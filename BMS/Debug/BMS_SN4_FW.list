
BMS_SN4_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  080087c0  080087c0  000097c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f90  08008f90  0000a1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008f90  08008f90  00009f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f98  08008f98  0000a1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f98  08008f98  00009f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f9c  08008f9c  00009f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008fa0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200001e4  08009184  0000a1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  08009184  0000a610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012136  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b3b  00000000  00000000  0001c34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d53  00000000  00000000  0001ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244a1  00000000  00000000  00020d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015593  00000000  00000000  000451ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d56eb  00000000  00000000  0005a73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012fe2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005894  00000000  00000000  0012fe70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00135704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080087a8 	.word	0x080087a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	080087a8 	.word	0x080087a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <pec15_calc>:
// ****************** Error Correction *******************
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000ee8:	2300      	movs	r3, #0
 8000eea:	737b      	strb	r3, [r7, #13]
 8000eec:	e018      	b.n	8000f20 <pec15_calc+0x48>
	{
		addr = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	09db      	lsrs	r3, r3, #7
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	7b7a      	ldrb	r2, [r7, #13]
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	440a      	add	r2, r1
 8000efa:	7812      	ldrb	r2, [r2, #0]
 8000efc:	4053      	eors	r3, r2
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000f04:	89fb      	ldrh	r3, [r7, #14]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	897b      	ldrh	r3, [r7, #10]
 8000f0c:	490b      	ldr	r1, [pc, #44]	@ (8000f3c <pec15_calc+0x64>)
 8000f0e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	4053      	eors	r3, r2
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000f1a:	7b7b      	ldrb	r3, [r7, #13]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	737b      	strb	r3, [r7, #13]
 8000f20:	7b7a      	ldrb	r2, [r7, #13]
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d3e2      	bcc.n	8000eee <pec15_calc+0x16>
	}

	return(remainder * 2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000f28:	89fb      	ldrh	r3, [r7, #14]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	b29b      	uxth	r3, r3
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	08008808 	.word	0x08008808

08000f40 <pec10_calc>:

/* Calculates  and returns the CRC10 */
uint16_t pec10_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000f50:	2300      	movs	r3, #0
 8000f52:	737b      	strb	r3, [r7, #13]
 8000f54:	e01c      	b.n	8000f90 <pec10_calc+0x50>
	{
		addr = ((remainder >> 2) ^ data[i]) & 0xff;//calculate PEC table address
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	7b7a      	ldrb	r2, [r7, #13]
 8000f5e:	6839      	ldr	r1, [r7, #0]
 8000f60:	440a      	add	r2, r1
 8000f62:	7812      	ldrb	r2, [r2, #0]
 8000f64:	4053      	eors	r3, r2
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc10Table[addr];
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	021b      	lsls	r3, r3, #8
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	897b      	ldrh	r3, [r7, #10]
 8000f74:	490c      	ldr	r1, [pc, #48]	@ (8000fa8 <pec10_calc+0x68>)
 8000f76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4053      	eors	r3, r2
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	81fb      	strh	r3, [r7, #14]
		remainder &= 0x3FF; //Ensure remainder stays within 10 bits
 8000f82:	89fb      	ldrh	r3, [r7, #14]
 8000f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f88:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000f8a:	7b7b      	ldrb	r3, [r7, #13]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	737b      	strb	r3, [r7, #13]
 8000f90:	7b7a      	ldrb	r2, [r7, #13]
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3de      	bcc.n	8000f56 <pec10_calc+0x16>
	}

	return(remainder); // No 0 in LSB
 8000f98:	89fb      	ldrh	r3, [r7, #14]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	08008a08 	.word	0x08008a08

08000fac <cmd_68>:
//***************** Read and Write to SPI ****************
/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	785b      	ldrb	r3, [r3, #1]
 8000fbe:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f7ff ff86 	bl	8000ed8 <pec15_calc>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	0a1b      	lsrs	r3, r3, #8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	72fb      	strb	r3, [r7, #11]

	FEB_cs_low();
 8000fe0:	f001 fc10 	bl	8002804 <FEB_cs_low>
	FEB_spi_write_array(4,cmd);
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2004      	movs	r0, #4
 8000fec:	f001 fc22 	bl	8002834 <FEB_spi_write_array>
	FEB_cs_high();
 8000ff0:	f001 fc14 	bl	800281c <FEB_cs_high>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <cmd_68_r>:
void cmd_68_r(uint8_t tx_cmd[2],uint8_t* data, uint8_t len) //The command to be transmitted
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	4613      	mov	r3, r2
 8001008:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	743b      	strb	r3, [r7, #16]
	cmd[1] =  tx_cmd[1];
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	785b      	ldrb	r3, [r3, #1]
 8001014:	747b      	strb	r3, [r7, #17]
	cmd_pec = pec15_calc(2, cmd);
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	4619      	mov	r1, r3
 800101c:	2002      	movs	r0, #2
 800101e:	f7ff ff5b 	bl	8000ed8 <pec15_calc>
 8001022:	4603      	mov	r3, r0
 8001024:	82fb      	strh	r3, [r7, #22]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001026:	8afb      	ldrh	r3, [r7, #22]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b29b      	uxth	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t)(cmd_pec);
 8001030:	8afb      	ldrh	r3, [r7, #22]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	74fb      	strb	r3, [r7, #19]

	FEB_cs_low();
 8001036:	f001 fbe5 	bl	8002804 <FEB_cs_low>
	FEB_spi_write_read(cmd, 4, data, len);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f107 0010 	add.w	r0, r7, #16
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	2104      	movs	r1, #4
 8001044:	f001 fc0a 	bl	800285c <FEB_spi_write_read>
	FEB_cs_high();
 8001048:	f001 fbe8 	bl	800281c <FEB_cs_high>
}
 800104c:	bf00      	nop
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8001062:	2306      	movs	r3, #6
 8001064:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	3304      	adds	r3, #4
 800106e:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001070:	7efb      	ldrb	r3, [r7, #27]
 8001072:	4618      	mov	r0, r3
 8001074:	f004 fd48 	bl	8005b08 <malloc>
 8001078:	4603      	mov	r3, r0
 800107a:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	781a      	ldrb	r2, [r3, #0]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	7852      	ldrb	r2, [r2, #1]
 800108c:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	2002      	movs	r0, #2
 8001092:	f7ff ff21 	bl	8000ed8 <pec15_calc>
 8001096:	4603      	mov	r3, r0
 8001098:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800109a:	8a7b      	ldrh	r3, [r7, #18]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	b29a      	uxth	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3302      	adds	r3, #2
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3303      	adds	r3, #3
 80010ac:	8a7a      	ldrh	r2, [r7, #18]
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 80010b2:	2304      	movs	r3, #4
 80010b4:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each ADBMS630B, this loops starts with the last IC on the stack.
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	77bb      	strb	r3, [r7, #30]
 80010ba:	e042      	b.n	8001142 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010bc:	2300      	movs	r3, #0
 80010be:	777b      	strb	r3, [r7, #29]
 80010c0:	e016      	b.n	80010f0 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 80010c2:	7fbb      	ldrb	r3, [r7, #30]
 80010c4:	1e5a      	subs	r2, r3, #1
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	461a      	mov	r2, r3
 80010d0:	7f7b      	ldrb	r3, [r7, #29]
 80010d2:	4413      	add	r3, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	441a      	add	r2, r3
 80010da:	7ffb      	ldrb	r3, [r7, #31]
 80010dc:	6979      	ldr	r1, [r7, #20]
 80010de:	440b      	add	r3, r1
 80010e0:	7812      	ldrb	r2, [r2, #0]
 80010e2:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 80010e4:	7ffb      	ldrb	r3, [r7, #31]
 80010e6:	3301      	adds	r3, #1
 80010e8:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010ea:	7f7b      	ldrb	r3, [r7, #29]
 80010ec:	3301      	adds	r3, #1
 80010ee:	777b      	strb	r3, [r7, #29]
 80010f0:	7f7a      	ldrb	r2, [r7, #29]
 80010f2:	7f3b      	ldrb	r3, [r7, #28]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d3e4      	bcc.n	80010c2 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec10_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 80010f8:	7fbb      	ldrb	r3, [r7, #30]
 80010fa:	1e5a      	subs	r2, r3, #1
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	441a      	add	r2, r3
 800110a:	7f3b      	ldrb	r3, [r7, #28]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff16 	bl	8000f40 <pec10_calc>
 8001114:	4603      	mov	r3, r0
 8001116:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8001118:	8a3b      	ldrh	r3, [r7, #16]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	b299      	uxth	r1, r3
 800111e:	7ffb      	ldrb	r3, [r7, #31]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	4413      	add	r3, r2
 8001124:	b2ca      	uxtb	r2, r1
 8001126:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 8001128:	7ffb      	ldrb	r3, [r7, #31]
 800112a:	3301      	adds	r3, #1
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	4413      	add	r3, r2
 8001130:	8a3a      	ldrh	r2, [r7, #16]
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8001136:	7ffb      	ldrb	r3, [r7, #31]
 8001138:	3302      	adds	r3, #2
 800113a:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each ADBMS630B, this loops starts with the last IC on the stack.
 800113c:	7fbb      	ldrb	r3, [r7, #30]
 800113e:	3b01      	subs	r3, #1
 8001140:	77bb      	strb	r3, [r7, #30]
 8001142:	7fbb      	ldrb	r3, [r7, #30]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1b9      	bne.n	80010bc <write_68+0x68>
	}

	FEB_cs_low();
 8001148:	f001 fb5c 	bl	8002804 <FEB_cs_low>
	FEB_spi_write_array(CMD_LEN, cmd);
 800114c:	7efb      	ldrb	r3, [r7, #27]
 800114e:	6979      	ldr	r1, [r7, #20]
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fb6f 	bl	8002834 <FEB_spi_write_array>
	FEB_cs_high();
 8001156:	f001 fb61 	bl	800281c <FEB_cs_high>

	free(cmd);
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f004 fcdc 	bl	8005b18 <free>
}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <transmitCMDR>:
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
	cmd[1]=(cmdcode%0x100);//selects second byte
	cmd_68(cmd);
}
void transmitCMDR(uint16_t cmdcode,uint8_t*data,uint8_t len){
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	b29b      	uxth	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	733b      	strb	r3, [r7, #12]
	cmd[1]=(cmdcode%0x100);//selects second byte
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	737b      	strb	r3, [r7, #13]
	cmd_68_r(cmd,data,len);
 8001188:	797a      	ldrb	r2, [r7, #5]
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	6839      	ldr	r1, [r7, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff33 	bl	8000ffc <cmd_68_r>
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <get_gpio_pin>:


// ******************************** Helper Functions ********************************


static uint8_t get_gpio_pin(uint8_t mux) {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	if(mux<0||mux>3)return -1;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d901      	bls.n	80011b4 <get_gpio_pin+0x14>
 80011b0:	23ff      	movs	r3, #255	@ 0xff
 80011b2:	e002      	b.n	80011ba <get_gpio_pin+0x1a>

	return gpio_map[mux];
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <get_gpio_pin+0x28>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008

080011cc <get_sensor>:

static uint8_t get_sensor(uint8_t mux, uint8_t channel) {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
	return mux * 8 + channel;
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	4413      	add	r3, r2
 80011e6:	b2db      	uxtb	r3, r3
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <convert_voltage>:

static float convert_voltage(uint16_t raw_code) {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
	return raw_code * 0.000150f - 1.5f;
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001208:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001228 <convert_voltage+0x34>
 800120c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001210:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001214:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001218:	eeb0 0a67 	vmov.f32	s0, s15
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	391d4952 	.word	0x391d4952

0800122c <FEB_ADBMS_Init>:

// ******************************** Functions ********************************

void FEB_ADBMS_Init() {
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af06      	add	r7, sp, #24
	FEB_cs_high();
 8001232:	f001 faf3 	bl	800281c <FEB_cs_high>
	ADBMS6830B_init_cfg(FEB_NUM_IC, accumulator.IC_Config);
 8001236:	4916      	ldr	r1, [pc, #88]	@ (8001290 <FEB_ADBMS_Init+0x64>)
 8001238:	2001      	movs	r0, #1
 800123a:	f000 fa9f 	bl	800177c <ADBMS6830B_init_cfg>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 800123e:	2300      	movs	r3, #0
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	e016      	b.n	8001272 <FEB_ADBMS_Init+0x46>
		ADBMS6830B_set_cfgr(ic, accumulator.IC_Config, refon, cth_bits, gpio_bits, dcc_bits, dcto_bits, uv, ov);
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <FEB_ADBMS_Init+0x68>)
 8001246:	7819      	ldrb	r1, [r3, #0]
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <FEB_ADBMS_Init+0x6c>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4a13      	ldr	r2, [pc, #76]	@ (800129c <FEB_ADBMS_Init+0x70>)
 800124e:	8812      	ldrh	r2, [r2, #0]
 8001250:	79f8      	ldrb	r0, [r7, #7]
 8001252:	9204      	str	r2, [sp, #16]
 8001254:	9303      	str	r3, [sp, #12]
 8001256:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <FEB_ADBMS_Init+0x74>)
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <FEB_ADBMS_Init+0x78>)
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <FEB_ADBMS_Init+0x7c>)
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <FEB_ADBMS_Init+0x80>)
 8001264:	460a      	mov	r2, r1
 8001266:	490a      	ldr	r1, [pc, #40]	@ (8001290 <FEB_ADBMS_Init+0x64>)
 8001268:	f000 fb25 	bl	80018b6 <ADBMS6830B_set_cfgr>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	3301      	adds	r3, #1
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0e5      	beq.n	8001244 <FEB_ADBMS_Init+0x18>
	}
	ADBMS6830B_reset_crc_count(FEB_NUM_IC, accumulator.IC_Config);
 8001278:	4905      	ldr	r1, [pc, #20]	@ (8001290 <FEB_ADBMS_Init+0x64>)
 800127a:	2001      	movs	r0, #1
 800127c:	f000 fab3 	bl	80017e6 <ADBMS6830B_reset_crc_count>
	ADBMS6830B_init_reg_limits(FEB_NUM_IC, accumulator.IC_Config);
 8001280:	4903      	ldr	r1, [pc, #12]	@ (8001290 <FEB_ADBMS_Init+0x64>)
 8001282:	2001      	movs	r0, #1
 8001284:	f000 fdc4 	bl	8001e10 <ADBMS6830B_init_reg_limits>

}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200002cc 	.word	0x200002cc
 8001294:	20000000 	.word	0x20000000
 8001298:	2000000c 	.word	0x2000000c
 800129c:	2000000e 	.word	0x2000000e
 80012a0:	200003cc 	.word	0x200003cc
 80012a4:	200003c0 	.word	0x200003c0
 80012a8:	200003b4 	.word	0x200003b4
 80012ac:	20000004 	.word	0x20000004

080012b0 <FEB_ADBMS_AcquireData>:

void FEB_ADBMS_AcquireData() {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

	/* Voltage */
	start_adc_cell_voltage_measurements();
 80012b6:	f000 f81e 	bl	80012f6 <start_adc_cell_voltage_measurements>
	read_cell_voltages();
 80012ba:	f000 f82f 	bl	800131c <read_cell_voltages>
	store_cell_voltages();
 80012be:	f000 f83b 	bl	8001338 <store_cell_voltages>
	//validate_voltages();

	/* Temperature */
	for (uint8_t channel = 0; channel < 8; channel++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	e00e      	b.n	80012e6 <FEB_ADBMS_AcquireData+0x36>
		configure_gpio_bits(channel);
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f876 	bl	80013bc <configure_gpio_bits>
		start_aux_voltage_measurements();
 80012d0:	f000 f8e4 	bl	800149c <start_aux_voltage_measurements>
		read_aux_voltages();
 80012d4:	f000 f8f0 	bl	80014b8 <read_aux_voltages>
		store_cell_temps(channel);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f8fa 	bl	80014d4 <store_cell_temps>
	for (uint8_t channel = 0; channel < 8; channel++) {
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	3301      	adds	r3, #1
 80012e4:	71fb      	strb	r3, [r7, #7]
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b07      	cmp	r3, #7
 80012ea:	d9ed      	bls.n	80012c8 <FEB_ADBMS_AcquireData+0x18>
	}

}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <start_adc_cell_voltage_measurements>:

// ******************************** Voltage ********************************

void start_adc_cell_voltage_measurements() {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af02      	add	r7, sp, #8
	wakeup_sleep(FEB_NUM_IC);
 80012fc:	2001      	movs	r0, #1
 80012fe:	f001 f8ab 	bl	8002458 <wakeup_sleep>
	ADBMS6830B_adcv(RDVR, DCPVR, CONTVR, RSTFVR, OWVR);
 8001302:	2300      	movs	r3, #0
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2300      	movs	r3, #0
 8001308:	2201      	movs	r2, #1
 800130a:	2100      	movs	r1, #0
 800130c:	2000      	movs	r0, #0
 800130e:	f000 fdcc 	bl	8001eaa <ADBMS6830B_adcv>
	ADBMS6830B_pollAdc();
 8001312:	f000 fdfd 	bl	8001f10 <ADBMS6830B_pollAdc>
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <read_cell_voltages>:

void read_cell_voltages() {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 8001320:	2001      	movs	r0, #1
 8001322:	f001 f899 	bl	8002458 <wakeup_sleep>
	ADBMS6830B_rdcv(FEB_NUM_IC, accumulator.IC_Config);
 8001326:	4903      	ldr	r1, [pc, #12]	@ (8001334 <read_cell_voltages+0x18>)
 8001328:	2001      	movs	r0, #1
 800132a:	f000 fe21 	bl	8001f70 <ADBMS6830B_rdcv>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200002cc 	.word	0x200002cc

08001338 <store_cell_voltages>:

void store_cell_voltages() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
	accumulator.total_voltage_V = 0;
 800133e:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <store_cell_voltages+0x80>)
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	e02c      	b.n	80013a6 <store_cell_voltages+0x6e>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 800134c:	2300      	movs	r3, #0
 800134e:	71bb      	strb	r3, [r7, #6]
 8001350:	e023      	b.n	800139a <store_cell_voltages+0x62>
			uint8_t ic = bank;
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	717b      	strb	r3, [r7, #5]
			float actual_voltage = convert_voltage(accumulator.IC_Config[bank].cells.c_codes[ic]);
 8001356:	79fa      	ldrb	r2, [r7, #7]
 8001358:	797b      	ldrb	r3, [r7, #5]
 800135a:	4917      	ldr	r1, [pc, #92]	@ (80013b8 <store_cell_voltages+0x80>)
 800135c:	2074      	movs	r0, #116	@ 0x74
 800135e:	fb00 f202 	mul.w	r2, r0, r2
 8001362:	4413      	add	r3, r2
 8001364:	3370      	adds	r3, #112	@ 0x70
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	440b      	add	r3, r1
 800136a:	895b      	ldrh	r3, [r3, #10]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff41 	bl	80011f4 <convert_voltage>
 8001372:	ed87 0a00 	vstr	s0, [r7]
			accumulator.banks[bank].cells[cell].voltage_V = actual_voltage;
 8001376:	79fa      	ldrb	r2, [r7, #7]
 8001378:	79b9      	ldrb	r1, [r7, #6]
 800137a:	480f      	ldr	r0, [pc, #60]	@ (80013b8 <store_cell_voltages+0x80>)
 800137c:	4613      	mov	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	1a9b      	subs	r3, r3, r2
 8001382:	00da      	lsls	r2, r3, #3
 8001384:	1ad2      	subs	r2, r2, r3
 8001386:	1853      	adds	r3, r2, r1
 8001388:	3322      	adds	r3, #34	@ 0x22
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4403      	add	r3, r0
 800138e:	3304      	adds	r3, #4
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	601a      	str	r2, [r3, #0]
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 8001394:	79bb      	ldrb	r3, [r7, #6]
 8001396:	3301      	adds	r3, #1
 8001398:	71bb      	strb	r3, [r7, #6]
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d9d8      	bls.n	8001352 <store_cell_voltages+0x1a>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	3301      	adds	r3, #1
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0cf      	beq.n	800134c <store_cell_voltages+0x14>
		}
	}
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000200 	.word	0x20000200

080013bc <configure_gpio_bits>:

// ******************************** Temperature ********************************



void configure_gpio_bits(uint8_t channel) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	@ 0x28
 80013c0:	af06      	add	r7, sp, #24
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
	gpio_bits[0] = 0b1; /* ADC Channel */
 80013c6:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <configure_gpio_bits+0xc0>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
	gpio_bits[1] = 0b1; /* ADC Channel */
 80013cc:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <configure_gpio_bits+0xc0>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	705a      	strb	r2, [r3, #1]
	gpio_bits[2] = (channel >> 0) & 0b1; /* MUX Sel 1 */
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf14      	ite	ne
 80013dc:	2301      	movne	r3, #1
 80013de:	2300      	moveq	r3, #0
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <configure_gpio_bits+0xc0>)
 80013e4:	709a      	strb	r2, [r3, #2]
	gpio_bits[3] = (channel >> 1) & 0b1; /* MUX Sel 1 */
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf14      	ite	ne
 80013f4:	2301      	movne	r3, #1
 80013f6:	2300      	moveq	r3, #0
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <configure_gpio_bits+0xc0>)
 80013fc:	70da      	strb	r2, [r3, #3]
	gpio_bits[4] = (channel >> 2) & 0b1; /* MUX Sel 1 */
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf14      	ite	ne
 800140c:	2301      	movne	r3, #1
 800140e:	2300      	moveq	r3, #0
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <configure_gpio_bits+0xc0>)
 8001414:	711a      	strb	r2, [r3, #4]
	gpio_bits[5] = 0b1; /* ADC Channel */
 8001416:	4b19      	ldr	r3, [pc, #100]	@ (800147c <configure_gpio_bits+0xc0>)
 8001418:	2201      	movs	r2, #1
 800141a:	715a      	strb	r2, [r3, #5]
	gpio_bits[6] = 0b1; /* ADC Channel */
 800141c:	4b17      	ldr	r3, [pc, #92]	@ (800147c <configure_gpio_bits+0xc0>)
 800141e:	2201      	movs	r2, #1
 8001420:	719a      	strb	r2, [r3, #6]
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e016      	b.n	8001456 <configure_gpio_bits+0x9a>
		ADBMS6830B_set_cfgr(ic, accumulator.IC_Config, refon, cth_bits, gpio_bits, dcc_bits, dcto_bits, uv, ov);
 8001428:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <configure_gpio_bits+0xc4>)
 800142a:	7819      	ldrb	r1, [r3, #0]
 800142c:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <configure_gpio_bits+0xc8>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	4a15      	ldr	r2, [pc, #84]	@ (8001488 <configure_gpio_bits+0xcc>)
 8001432:	8812      	ldrh	r2, [r2, #0]
 8001434:	7bf8      	ldrb	r0, [r7, #15]
 8001436:	9204      	str	r2, [sp, #16]
 8001438:	9303      	str	r3, [sp, #12]
 800143a:	4b14      	ldr	r3, [pc, #80]	@ (800148c <configure_gpio_bits+0xd0>)
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <configure_gpio_bits+0xd4>)
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <configure_gpio_bits+0xc0>)
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <configure_gpio_bits+0xd8>)
 8001448:	460a      	mov	r2, r1
 800144a:	4913      	ldr	r1, [pc, #76]	@ (8001498 <configure_gpio_bits+0xdc>)
 800144c:	f000 fa33 	bl	80018b6 <ADBMS6830B_set_cfgr>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	3301      	adds	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0e5      	beq.n	8001428 <configure_gpio_bits+0x6c>
	}
	wakeup_sleep(FEB_NUM_IC);
 800145c:	2001      	movs	r0, #1
 800145e:	f000 fffb 	bl	8002458 <wakeup_sleep>
	ADBMS6830B_wrcfga(FEB_NUM_IC, accumulator.IC_Config);
 8001462:	490d      	ldr	r1, [pc, #52]	@ (8001498 <configure_gpio_bits+0xdc>)
 8001464:	2001      	movs	r0, #1
 8001466:	f000 fe24 	bl	80020b2 <ADBMS6830B_wrcfga>
	ADBMS6830B_wrcfgb(FEB_NUM_IC, accumulator.IC_Config);
 800146a:	490b      	ldr	r1, [pc, #44]	@ (8001498 <configure_gpio_bits+0xdc>)
 800146c:	2001      	movs	r0, #1
 800146e:	f000 fe9f 	bl	80021b0 <ADBMS6830B_wrcfgb>

}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200003b4 	.word	0x200003b4
 8001480:	20000000 	.word	0x20000000
 8001484:	2000000c 	.word	0x2000000c
 8001488:	2000000e 	.word	0x2000000e
 800148c:	200003cc 	.word	0x200003cc
 8001490:	200003c0 	.word	0x200003c0
 8001494:	20000004 	.word	0x20000004
 8001498:	200002cc 	.word	0x200002cc

0800149c <start_aux_voltage_measurements>:

void start_aux_voltage_measurements() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f000 ffd9 	bl	8002458 <wakeup_sleep>
	ADBMS6830B_adax(AUX_OW_OFF, PUP_DOWN, AUX_ALL);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2000      	movs	r0, #0
 80014ac:	f000 ff00 	bl	80022b0 <ADBMS6830B_adax>
	ADBMS6830B_pollAdc();
 80014b0:	f000 fd2e 	bl	8001f10 <ADBMS6830B_pollAdc>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <read_aux_voltages>:

void read_aux_voltages() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 80014bc:	2001      	movs	r0, #1
 80014be:	f000 ffcb 	bl	8002458 <wakeup_sleep>
	ADBMS6830B_rdaux(FEB_NUM_IC, accumulator.IC_Config);
 80014c2:	4903      	ldr	r1, [pc, #12]	@ (80014d0 <read_aux_voltages+0x18>)
 80014c4:	2001      	movs	r0, #1
 80014c6:	f000 ff1d 	bl	8002304 <ADBMS6830B_rdaux>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002cc 	.word	0x200002cc

080014d4 <store_cell_temps>:

void store_cell_temps(uint8_t channel) {
 80014d4:	b5b0      	push	{r4, r5, r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	e03a      	b.n	800155a <store_cell_temps+0x86>
		for (uint8_t mux = 0; mux < 4; mux++) {
 80014e4:	2300      	movs	r3, #0
 80014e6:	73bb      	strb	r3, [r7, #14]
 80014e8:	e031      	b.n	800154e <store_cell_temps+0x7a>
			uint8_t gpio = get_gpio_pin(mux);
 80014ea:	7bbb      	ldrb	r3, [r7, #14]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fe57 	bl	80011a0 <get_gpio_pin>
 80014f2:	4603      	mov	r3, r0
 80014f4:	737b      	strb	r3, [r7, #13]
			uint16_t raw_code = accumulator.IC_Config[bank].aux.a_codes[gpio];
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	491c      	ldr	r1, [pc, #112]	@ (800156c <store_cell_temps+0x98>)
 80014fc:	2074      	movs	r0, #116	@ 0x74
 80014fe:	fb00 f202 	mul.w	r2, r0, r2
 8001502:	4413      	add	r3, r2
 8001504:	3388      	adds	r3, #136	@ 0x88
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	440b      	add	r3, r1
 800150a:	889b      	ldrh	r3, [r3, #4]
 800150c:	817b      	strh	r3, [r7, #10]
			uint8_t sensor = get_sensor(mux, channel);
 800150e:	79fa      	ldrb	r2, [r7, #7]
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fe59 	bl	80011cc <get_sensor>
 800151a:	4603      	mov	r3, r0
 800151c:	727b      	strb	r3, [r7, #9]
			accumulator.banks[bank].temp_sensor_readings_V[sensor] = convert_voltage(raw_code);
 800151e:	7bfc      	ldrb	r4, [r7, #15]
 8001520:	7a7d      	ldrb	r5, [r7, #9]
 8001522:	897b      	ldrh	r3, [r7, #10]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe65 	bl	80011f4 <convert_voltage>
 800152a:	eef0 7a40 	vmov.f32	s15, s0
 800152e:	490f      	ldr	r1, [pc, #60]	@ (800156c <store_cell_temps+0x98>)
 8001530:	4623      	mov	r3, r4
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	1b1b      	subs	r3, r3, r4
 8001536:	00da      	lsls	r2, r3, #3
 8001538:	1ad2      	subs	r2, r2, r3
 800153a:	1953      	adds	r3, r2, r5
 800153c:	3302      	adds	r3, #2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	3304      	adds	r3, #4
 8001544:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t mux = 0; mux < 4; mux++) {
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	3301      	adds	r3, #1
 800154c:	73bb      	strb	r3, [r7, #14]
 800154e:	7bbb      	ldrb	r3, [r7, #14]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d9ca      	bls.n	80014ea <store_cell_temps+0x16>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	3301      	adds	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0c1      	beq.n	80014e4 <store_cell_temps+0x10>
		}
	}
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bdb0      	pop	{r4, r5, r7, pc}
 800156a:	bf00      	nop
 800156c:	20000200 	.word	0x20000200

08001570 <FEB_ADBMS_UART_Transmit>:

void FEB_ADBMS_UART_Transmit() {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	f5ad 7d45 	sub.w	sp, sp, #788	@ 0x314
 8001576:	af00      	add	r7, sp, #0
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 8001578:	2300      	movs	r3, #0
 800157a:	f887 330f 	strb.w	r3, [r7, #783]	@ 0x30f
 800157e:	e0dd      	b.n	800173c <FEB_ADBMS_UART_Transmit+0x1cc>
		char UART_head[256];
		char UART_str[256];
		char UART_temp[256];
		int offset[3];
		offset[0]=sprintf((char*)UART_head,"|Bnk %d|",bank);
 8001580:	f897 230f 	ldrb.w	r2, [r7, #783]	@ 0x30f
 8001584:	463b      	mov	r3, r7
 8001586:	4973      	ldr	r1, [pc, #460]	@ (8001754 <FEB_ADBMS_UART_Transmit+0x1e4>)
 8001588:	4618      	mov	r0, r3
 800158a:	f005 f895 	bl	80066b8 <siprintf>
 800158e:	4603      	mov	r3, r0
 8001590:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
		offset[1]=sprintf((char*)UART_str,"|Vlt  |");
 8001594:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001598:	496f      	ldr	r1, [pc, #444]	@ (8001758 <FEB_ADBMS_UART_Transmit+0x1e8>)
 800159a:	4618      	mov	r0, r3
 800159c:	f005 f88c 	bl	80066b8 <siprintf>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
		offset[2]=sprintf((char*)UART_temp,"|Temp |");
 80015a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015aa:	496c      	ldr	r1, [pc, #432]	@ (800175c <FEB_ADBMS_UART_Transmit+0x1ec>)
 80015ac:	4618      	mov	r0, r3
 80015ae:	f005 f883 	bl	80066b8 <siprintf>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308


		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell++) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 330e 	strb.w	r3, [r7, #782]	@ 0x30e
 80015be:	e065      	b.n	800168c <FEB_ADBMS_UART_Transmit+0x11c>
			offset[0]+=sprintf((char*)(UART_head + offset[0]), (cell>=10)?"Cell  %d|":"Cell   %d|",cell);
 80015c0:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 80015c4:	461a      	mov	r2, r3
 80015c6:	463b      	mov	r3, r7
 80015c8:	1898      	adds	r0, r3, r2
 80015ca:	f897 330e 	ldrb.w	r3, [r7, #782]	@ 0x30e
 80015ce:	2b09      	cmp	r3, #9
 80015d0:	d901      	bls.n	80015d6 <FEB_ADBMS_UART_Transmit+0x66>
 80015d2:	4b63      	ldr	r3, [pc, #396]	@ (8001760 <FEB_ADBMS_UART_Transmit+0x1f0>)
 80015d4:	e000      	b.n	80015d8 <FEB_ADBMS_UART_Transmit+0x68>
 80015d6:	4b63      	ldr	r3, [pc, #396]	@ (8001764 <FEB_ADBMS_UART_Transmit+0x1f4>)
 80015d8:	f897 230e 	ldrb.w	r2, [r7, #782]	@ 0x30e
 80015dc:	4619      	mov	r1, r3
 80015de:	f005 f86b 	bl	80066b8 <siprintf>
 80015e2:	4602      	mov	r2, r0
 80015e4:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 80015e8:	4413      	add	r3, r2
 80015ea:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
			offset[1]+=sprintf((char*)(UART_str + offset[1]), "%.6f|",accumulator.banks[bank].cells[cell].voltage_V);
 80015ee:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 80015f2:	461a      	mov	r2, r3
 80015f4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80015f8:	189c      	adds	r4, r3, r2
 80015fa:	f897 230f 	ldrb.w	r2, [r7, #783]	@ 0x30f
 80015fe:	f897 130e 	ldrb.w	r1, [r7, #782]	@ 0x30e
 8001602:	4859      	ldr	r0, [pc, #356]	@ (8001768 <FEB_ADBMS_UART_Transmit+0x1f8>)
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	00da      	lsls	r2, r3, #3
 800160c:	1ad2      	subs	r2, r2, r3
 800160e:	1853      	adds	r3, r2, r1
 8001610:	3322      	adds	r3, #34	@ 0x22
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4403      	add	r3, r0
 8001616:	3304      	adds	r3, #4
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ffb4 	bl	8000588 <__aeabi_f2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4951      	ldr	r1, [pc, #324]	@ (800176c <FEB_ADBMS_UART_Transmit+0x1fc>)
 8001626:	4620      	mov	r0, r4
 8001628:	f005 f846 	bl	80066b8 <siprintf>
 800162c:	4602      	mov	r2, r0
 800162e:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8001632:	4413      	add	r3, r2
 8001634:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
			offset[2]+=sprintf((char*)(UART_temp + offset[2]), "%.6f|",accumulator.banks[bank].temp_sensor_readings_V[cell]);
 8001638:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 800163c:	461a      	mov	r2, r3
 800163e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001642:	189c      	adds	r4, r3, r2
 8001644:	f897 230f 	ldrb.w	r2, [r7, #783]	@ 0x30f
 8001648:	f897 130e 	ldrb.w	r1, [r7, #782]	@ 0x30e
 800164c:	4846      	ldr	r0, [pc, #280]	@ (8001768 <FEB_ADBMS_UART_Transmit+0x1f8>)
 800164e:	4613      	mov	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	00da      	lsls	r2, r3, #3
 8001656:	1ad2      	subs	r2, r2, r3
 8001658:	1853      	adds	r3, r2, r1
 800165a:	3302      	adds	r3, #2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4403      	add	r3, r0
 8001660:	3304      	adds	r3, #4
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff8f 	bl	8000588 <__aeabi_f2d>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	493f      	ldr	r1, [pc, #252]	@ (800176c <FEB_ADBMS_UART_Transmit+0x1fc>)
 8001670:	4620      	mov	r0, r4
 8001672:	f005 f821 	bl	80066b8 <siprintf>
 8001676:	4602      	mov	r2, r0
 8001678:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 800167c:	4413      	add	r3, r2
 800167e:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell++) {
 8001682:	f897 330e 	ldrb.w	r3, [r7, #782]	@ 0x30e
 8001686:	3301      	adds	r3, #1
 8001688:	f887 330e 	strb.w	r3, [r7, #782]	@ 0x30e
 800168c:	f897 330e 	ldrb.w	r3, [r7, #782]	@ 0x30e
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d995      	bls.n	80015c0 <FEB_ADBMS_UART_Transmit+0x50>
		}
		offset[0]+=sprintf((char*)(UART_head + offset[0]), "\n\r");
 8001694:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8001698:	461a      	mov	r2, r3
 800169a:	463b      	mov	r3, r7
 800169c:	4413      	add	r3, r2
 800169e:	4934      	ldr	r1, [pc, #208]	@ (8001770 <FEB_ADBMS_UART_Transmit+0x200>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f005 f809 	bl	80066b8 <siprintf>
 80016a6:	4602      	mov	r2, r0
 80016a8:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 80016ac:	4413      	add	r3, r2
 80016ae:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
		offset[1]+=sprintf((char*)(UART_str + offset[1]), "\n\r");
 80016b2:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 80016b6:	461a      	mov	r2, r3
 80016b8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80016bc:	4413      	add	r3, r2
 80016be:	492c      	ldr	r1, [pc, #176]	@ (8001770 <FEB_ADBMS_UART_Transmit+0x200>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 fff9 	bl	80066b8 <siprintf>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 80016cc:	4413      	add	r3, r2
 80016ce:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
		offset[2]+=sprintf((char*)(UART_temp + offset[2]), "\n\r\n\r\n\r");
 80016d2:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80016d6:	461a      	mov	r2, r3
 80016d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016dc:	4413      	add	r3, r2
 80016de:	4925      	ldr	r1, [pc, #148]	@ (8001774 <FEB_ADBMS_UART_Transmit+0x204>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 ffe9 	bl	80066b8 <siprintf>
 80016e6:	4602      	mov	r2, r0
 80016e8:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80016ec:	4413      	add	r3, r2
 80016ee:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_head, offset[0]+1, 100);
 80016f2:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3301      	adds	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	4639      	mov	r1, r7
 80016fe:	2364      	movs	r3, #100	@ 0x64
 8001700:	481d      	ldr	r0, [pc, #116]	@ (8001778 <FEB_ADBMS_UART_Transmit+0x208>)
 8001702:	f003 fe8c 	bl	800541e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, offset[1]+1, 100);
 8001706:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 800170a:	b29b      	uxth	r3, r3
 800170c:	3301      	adds	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8001714:	2364      	movs	r3, #100	@ 0x64
 8001716:	4818      	ldr	r0, [pc, #96]	@ (8001778 <FEB_ADBMS_UART_Transmit+0x208>)
 8001718:	f003 fe81 	bl	800541e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_temp, offset[2]+1, 100);
 800171c:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8001720:	b29b      	uxth	r3, r3
 8001722:	3301      	adds	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 800172a:	2364      	movs	r3, #100	@ 0x64
 800172c:	4812      	ldr	r0, [pc, #72]	@ (8001778 <FEB_ADBMS_UART_Transmit+0x208>)
 800172e:	f003 fe76 	bl	800541e <HAL_UART_Transmit>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 8001732:	f897 330f 	ldrb.w	r3, [r7, #783]	@ 0x30f
 8001736:	3301      	adds	r3, #1
 8001738:	f887 330f 	strb.w	r3, [r7, #783]	@ 0x30f
 800173c:	f897 330f 	ldrb.w	r3, [r7, #783]	@ 0x30f
 8001740:	2b00      	cmp	r3, #0
 8001742:	f43f af1d 	beq.w	8001580 <FEB_ADBMS_UART_Transmit+0x10>
	}
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	f507 7745 	add.w	r7, r7, #788	@ 0x314
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	bf00      	nop
 8001754:	080087c0 	.word	0x080087c0
 8001758:	080087cc 	.word	0x080087cc
 800175c:	080087d4 	.word	0x080087d4
 8001760:	080087dc 	.word	0x080087dc
 8001764:	080087e8 	.word	0x080087e8
 8001768:	20000200 	.word	0x20000200
 800176c:	080087f4 	.word	0x080087f4
 8001770:	080087fc 	.word	0x080087fc
 8001774:	08008800 	.word	0x08008800
 8001778:	20000430 	.word	0x20000430

0800177c <ADBMS6830B_init_cfg>:

/* Helper function to initialize CFG variables */
void ADBMS6830B_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e020      	b.n	80017d0 <ADBMS6830B_init_cfg+0x54>
	{
		for (int j =0; j<6; j++)
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	e017      	b.n	80017c4 <ADBMS6830B_init_cfg+0x48>
		{
		  ic[current_ic].configa.tx_data[j] = 0;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	22e8      	movs	r2, #232	@ 0xe8
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	441a      	add	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4413      	add	r3, r2
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
          ic[current_ic].configb.tx_data[j] = 0;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	22e8      	movs	r2, #232	@ 0xe8
 80017ac:	fb02 f303 	mul.w	r3, r2, r3
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	441a      	add	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4413      	add	r3, r2
 80017b8:	330f      	adds	r3, #15
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3301      	adds	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b05      	cmp	r3, #5
 80017c8:	dde4      	ble.n	8001794 <ADBMS6830B_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	3301      	adds	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d3da      	bcc.n	800178e <ADBMS6830B_init_cfg+0x12>
		}
	}
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <ADBMS6830B_reset_crc_count>:

/* Helper Function to reset PEC counters */
void ADBMS6830B_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 80017e6:	b480      	push	{r7}
 80017e8:	b087      	sub	sp, #28
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	6039      	str	r1, [r7, #0]
 80017f0:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e053      	b.n	80018a0 <ADBMS6830B_reset_crc_count+0xba>
	{
		ic[current_ic].crc_count.pec_count = 0;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	22e8      	movs	r2, #232	@ 0xe8
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	4413      	add	r3, r2
 8001804:	2200      	movs	r2, #0
 8001806:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
		ic[current_ic].crc_count.cfgr_pec = 0;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	22e8      	movs	r2, #232	@ 0xe8
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	4413      	add	r3, r2
 8001816:	2200      	movs	r2, #0
 8001818:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		for (int i=0; i<6; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	e00e      	b.n	8001840 <ADBMS6830B_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	22e8      	movs	r2, #232	@ 0xe8
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	441a      	add	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	3360      	adds	r3, #96	@ 0x60
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	2200      	movs	r2, #0
 8001838:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<6; i++)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3301      	adds	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	2b05      	cmp	r3, #5
 8001844:	dded      	ble.n	8001822 <ADBMS6830B_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e00e      	b.n	800186a <ADBMS6830B_reset_crc_count+0x84>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	22e8      	movs	r2, #232	@ 0xe8
 8001850:	fb02 f303 	mul.w	r3, r2, r3
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	441a      	add	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3368      	adds	r3, #104	@ 0x68
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	2200      	movs	r2, #0
 8001862:	805a      	strh	r2, [r3, #2]
		for (int i=0; i<4; i++)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3301      	adds	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b03      	cmp	r3, #3
 800186e:	dded      	ble.n	800184c <ADBMS6830B_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	e00e      	b.n	8001894 <ADBMS6830B_reset_crc_count+0xae>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	22e8      	movs	r2, #232	@ 0xe8
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	441a      	add	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	336c      	adds	r3, #108	@ 0x6c
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	2200      	movs	r2, #0
 800188c:	805a      	strh	r2, [r3, #2]
		for (int i=0; i<2; i++)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3301      	adds	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b01      	cmp	r3, #1
 8001898:	dded      	ble.n	8001876 <ADBMS6830B_reset_crc_count+0x90>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dba7      	blt.n	80017f8 <ADBMS6830B_reset_crc_count+0x12>
		}
	}
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <ADBMS6830B_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	4603      	mov	r3, r0
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	4613      	mov	r3, r2
 80018c6:	73bb      	strb	r3, [r7, #14]
	ADBMS6830B_set_cfgr_refon(nIC,ic,refon);
 80018c8:	7bba      	ldrb	r2, [r7, #14]
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f828 	bl	8001924 <ADBMS6830B_set_cfgr_refon>
	ADBMS6830B_set_cfgr_cth(nIC,ic,cth);
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f856 	bl	800198c <ADBMS6830B_set_cfgr_cth>
	ADBMS6830B_set_cfgr_gpio(nIC,ic,gpio);
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f89e 	bl	8001a28 <ADBMS6830B_set_cfgr_gpio>
	ADBMS6830B_set_cfgr_dis(nIC,ic,dcc);
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f927 	bl	8001b46 <ADBMS6830B_set_cfgr_dis>
	ADBMS6830B_set_cfgr_dcto(nIC,ic,dcto);
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	6a3a      	ldr	r2, [r7, #32]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f9b0 	bl	8001c64 <ADBMS6830B_set_cfgr_dcto>
	ADBMS6830B_set_cfgr_uv(nIC, ic, uv);
 8001904:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f9f8 	bl	8001d00 <ADBMS6830B_set_cfgr_uv>
	ADBMS6830B_set_cfgr_ov(nIC, ic, ov);
 8001910:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fa38 	bl	8001d8c <ADBMS6830B_set_cfgr_ov>
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <ADBMS6830B_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void ADBMS6830B_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
 8001930:	4613      	mov	r3, r2
 8001932:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]|0x80;
 8001934:	79bb      	ldrb	r3, [r7, #6]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d011      	beq.n	800195e <ADBMS6830B_set_cfgr_refon+0x3a>
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	22e8      	movs	r2, #232	@ 0xe8
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	4413      	add	r3, r2
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	21e8      	movs	r1, #232	@ 0xe8
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	440b      	add	r3, r1
 8001954:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]
	else ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]&0x7F;
}
 800195c:	e010      	b.n	8001980 <ADBMS6830B_set_cfgr_refon+0x5c>
	else ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]&0x7F;
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	22e8      	movs	r2, #232	@ 0xe8
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	4413      	add	r3, r2
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	21e8      	movs	r1, #232	@ 0xe8
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	6839      	ldr	r1, [r7, #0]
 8001976:	440b      	add	r3, r1
 8001978:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	701a      	strb	r2, [r3, #0]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <ADBMS6830B_set_cfgr_cth>:

/* Helper function to set CTH bits */
void ADBMS6830B_set_cfgr_cth(uint8_t nIC, cell_asic *ic, bool cth[3])
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 3; i++) {
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	e039      	b.n	8001a14 <ADBMS6830B_set_cfgr_cth+0x88>
        if (cth[i]) {
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d017      	beq.n	80019dc <ADBMS6830B_set_cfgr_cth+0x50>
            ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0] | (0b01 << i);
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	22e8      	movs	r2, #232	@ 0xe8
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	4413      	add	r3, r2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	b25a      	sxtb	r2, r3
 80019bc:	2101      	movs	r1, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	4313      	orrs	r3, r2
 80019c8:	b259      	sxtb	r1, r3
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	22e8      	movs	r2, #232	@ 0xe8
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	4413      	add	r3, r2
 80019d6:	b2ca      	uxtb	r2, r1
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e018      	b.n	8001a0e <ADBMS6830B_set_cfgr_cth+0x82>
        } else {
            ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0] & ~(0b01 << i);
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	22e8      	movs	r2, #232	@ 0xe8
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	4413      	add	r3, r2
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	b25a      	sxtb	r2, r3
 80019ec:	2101      	movs	r1, #1
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	b25b      	sxtb	r3, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	4013      	ands	r3, r2
 80019fc:	b259      	sxtb	r1, r3
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	22e8      	movs	r2, #232	@ 0xe8
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	4413      	add	r3, r2
 8001a0a:	b2ca      	uxtb	r2, r1
 8001a0c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	ddc2      	ble.n	80019a0 <ADBMS6830B_set_cfgr_cth+0x14>
        }
    }
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <ADBMS6830B_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void ADBMS6830B_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[10])
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++) {
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e039      	b.n	8001ab0 <ADBMS6830B_set_cfgr_gpio+0x88>
		if (gpio[i]) {
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d017      	beq.n	8001a78 <ADBMS6830B_set_cfgr_gpio+0x50>
            ic[nIC].configa.tx_data[3] = ic[nIC].configa.tx_data[3] | (0b01 << i);
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	22e8      	movs	r2, #232	@ 0xe8
 8001a4c:	fb02 f303 	mul.w	r3, r2, r3
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	4413      	add	r3, r2
 8001a54:	78db      	ldrb	r3, [r3, #3]
 8001a56:	b25a      	sxtb	r2, r3
 8001a58:	2101      	movs	r1, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b259      	sxtb	r1, r3
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	22e8      	movs	r2, #232	@ 0xe8
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	4413      	add	r3, r2
 8001a72:	b2ca      	uxtb	r2, r1
 8001a74:	70da      	strb	r2, [r3, #3]
 8001a76:	e018      	b.n	8001aaa <ADBMS6830B_set_cfgr_gpio+0x82>
        } else {
             ic[nIC].configa.tx_data[3] = ic[nIC].configa.tx_data[3] & ~(0b01 << i);
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	22e8      	movs	r2, #232	@ 0xe8
 8001a7c:	fb02 f303 	mul.w	r3, r2, r3
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	4413      	add	r3, r2
 8001a84:	78db      	ldrb	r3, [r3, #3]
 8001a86:	b25a      	sxtb	r2, r3
 8001a88:	2101      	movs	r1, #1
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	4013      	ands	r3, r2
 8001a98:	b259      	sxtb	r1, r3
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	22e8      	movs	r2, #232	@ 0xe8
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b2ca      	uxtb	r2, r1
 8001aa8:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < 8; i++) {
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b07      	cmp	r3, #7
 8001ab4:	ddc2      	ble.n	8001a3c <ADBMS6830B_set_cfgr_gpio+0x14>
        }
	}

    for (int i = 0; i < 2; i++) {
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	e03a      	b.n	8001b32 <ADBMS6830B_set_cfgr_gpio+0x10a>
        if (gpio[i + 8]) {
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	3308      	adds	r3, #8
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d017      	beq.n	8001afa <ADBMS6830B_set_cfgr_gpio+0xd2>
            ic[nIC].configa.tx_data[4] = ic[nIC].configa.tx_data[4] | (0b01 << i);
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	22e8      	movs	r2, #232	@ 0xe8
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	791b      	ldrb	r3, [r3, #4]
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	2101      	movs	r1, #1
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	b259      	sxtb	r1, r3
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	22e8      	movs	r2, #232	@ 0xe8
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	4413      	add	r3, r2
 8001af4:	b2ca      	uxtb	r2, r1
 8001af6:	711a      	strb	r2, [r3, #4]
 8001af8:	e018      	b.n	8001b2c <ADBMS6830B_set_cfgr_gpio+0x104>
        } else {
             ic[nIC].configa.tx_data[4] = ic[nIC].configa.tx_data[4] & ~(0b01 << i);
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	22e8      	movs	r2, #232	@ 0xe8
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	4413      	add	r3, r2
 8001b06:	791b      	ldrb	r3, [r3, #4]
 8001b08:	b25a      	sxtb	r2, r3
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	b25b      	sxtb	r3, r3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	b259      	sxtb	r1, r3
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	22e8      	movs	r2, #232	@ 0xe8
 8001b20:	fb02 f303 	mul.w	r3, r2, r3
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	4413      	add	r3, r2
 8001b28:	b2ca      	uxtb	r2, r1
 8001b2a:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < 2; i++) {
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	ddc1      	ble.n	8001abc <ADBMS6830B_set_cfgr_gpio+0x94>
        }
    }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <ADBMS6830B_set_cfgr_dis>:

/* Helper function to control discharge */
void ADBMS6830B_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 8001b46:	b480      	push	{r7}
 8001b48:	b087      	sub	sp, #28
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++) {
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e039      	b.n	8001bce <ADBMS6830B_set_cfgr_dis+0x88>
		if (dcc[i]) {
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d017      	beq.n	8001b96 <ADBMS6830B_set_cfgr_dis+0x50>
            ic[nIC].configb.tx_data[4] = ic[nIC].configb.tx_data[4] | (0b01 << i);
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	22e8      	movs	r2, #232	@ 0xe8
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	4413      	add	r3, r2
 8001b72:	7cdb      	ldrb	r3, [r3, #19]
 8001b74:	b25a      	sxtb	r2, r3
 8001b76:	2101      	movs	r1, #1
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b259      	sxtb	r1, r3
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	22e8      	movs	r2, #232	@ 0xe8
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	4413      	add	r3, r2
 8001b90:	b2ca      	uxtb	r2, r1
 8001b92:	74da      	strb	r2, [r3, #19]
 8001b94:	e018      	b.n	8001bc8 <ADBMS6830B_set_cfgr_dis+0x82>
        } else {
             ic[nIC].configb.tx_data[4] = ic[nIC].configb.tx_data[4] & ~(0b01 << i);
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	22e8      	movs	r2, #232	@ 0xe8
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	7cdb      	ldrb	r3, [r3, #19]
 8001ba4:	b25a      	sxtb	r2, r3
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	b259      	sxtb	r1, r3
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	22e8      	movs	r2, #232	@ 0xe8
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b2ca      	uxtb	r2, r1
 8001bc6:	74da      	strb	r2, [r3, #19]
	for (int i = 0; i < 8; i++) {
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b07      	cmp	r3, #7
 8001bd2:	ddc2      	ble.n	8001b5a <ADBMS6830B_set_cfgr_dis+0x14>
        }
	}

    for (int i = 0; i < 8; i++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	e03a      	b.n	8001c50 <ADBMS6830B_set_cfgr_dis+0x10a>
        if (dcc[i + 8]) {
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	3308      	adds	r3, #8
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d017      	beq.n	8001c18 <ADBMS6830B_set_cfgr_dis+0xd2>
            ic[nIC].configb.tx_data[5] = ic[nIC].configb.tx_data[5] | (0b01 << i);
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	22e8      	movs	r2, #232	@ 0xe8
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	7d1b      	ldrb	r3, [r3, #20]
 8001bf6:	b25a      	sxtb	r2, r3
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	b25b      	sxtb	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b259      	sxtb	r1, r3
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	22e8      	movs	r2, #232	@ 0xe8
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	4413      	add	r3, r2
 8001c12:	b2ca      	uxtb	r2, r1
 8001c14:	751a      	strb	r2, [r3, #20]
 8001c16:	e018      	b.n	8001c4a <ADBMS6830B_set_cfgr_dis+0x104>
        } else {
             ic[nIC].configb.tx_data[5] = ic[nIC].configb.tx_data[5] & ~(0b01 << i);
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	22e8      	movs	r2, #232	@ 0xe8
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	4413      	add	r3, r2
 8001c24:	7d1b      	ldrb	r3, [r3, #20]
 8001c26:	b25a      	sxtb	r2, r3
 8001c28:	2101      	movs	r1, #1
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	4013      	ands	r3, r2
 8001c38:	b259      	sxtb	r1, r3
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	22e8      	movs	r2, #232	@ 0xe8
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	4413      	add	r3, r2
 8001c46:	b2ca      	uxtb	r2, r1
 8001c48:	751a      	strb	r2, [r3, #20]
    for (int i = 0; i < 8; i++) {
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b07      	cmp	r3, #7
 8001c54:	ddc1      	ble.n	8001bda <ADBMS6830B_set_cfgr_dis+0x94>
        }
    }
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	371c      	adds	r7, #28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <ADBMS6830B_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void ADBMS6830B_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 6; i++) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e039      	b.n	8001cec <ADBMS6830B_set_cfgr_dcto+0x88>
		if (dcto[i]) {
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d017      	beq.n	8001cb4 <ADBMS6830B_set_cfgr_dcto+0x50>
            ic[nIC].configb.tx_data[3] = ic[nIC].configb.tx_data[3] | (0b01 << i);
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	22e8      	movs	r2, #232	@ 0xe8
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	4413      	add	r3, r2
 8001c90:	7c9b      	ldrb	r3, [r3, #18]
 8001c92:	b25a      	sxtb	r2, r3
 8001c94:	2101      	movs	r1, #1
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b259      	sxtb	r1, r3
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	22e8      	movs	r2, #232	@ 0xe8
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	4413      	add	r3, r2
 8001cae:	b2ca      	uxtb	r2, r1
 8001cb0:	749a      	strb	r2, [r3, #18]
 8001cb2:	e018      	b.n	8001ce6 <ADBMS6830B_set_cfgr_dcto+0x82>
        } else {
             ic[nIC].configb.tx_data[3] = ic[nIC].configb.tx_data[3] & ~(0b01 << i);
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	22e8      	movs	r2, #232	@ 0xe8
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	7c9b      	ldrb	r3, [r3, #18]
 8001cc2:	b25a      	sxtb	r2, r3
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	b25b      	sxtb	r3, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	b259      	sxtb	r1, r3
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	22e8      	movs	r2, #232	@ 0xe8
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b2ca      	uxtb	r2, r1
 8001ce4:	749a      	strb	r2, [r3, #18]
	for (int i = 0; i < 6; i++) {
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	ddc2      	ble.n	8001c78 <ADBMS6830B_set_cfgr_dcto+0x14>
        }
	}
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <ADBMS6830B_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void ADBMS6830B_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv / 16) - 1;
 8001d10:	88bb      	ldrh	r3, [r7, #4]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	81fb      	strh	r3, [r7, #14]
	ic[nIC].configb.tx_data[0] = 0x00FF & tmp;
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	22e8      	movs	r2, #232	@ 0xe8
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	4413      	add	r3, r2
 8001d26:	89fa      	ldrh	r2, [r7, #14]
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	73da      	strb	r2, [r3, #15]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] & 0xF0;
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	22e8      	movs	r2, #232	@ 0xe8
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	7c1a      	ldrb	r2, [r3, #16]
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	21e8      	movs	r1, #232	@ 0xe8
 8001d3e:	fb01 f303 	mul.w	r3, r1, r3
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	440b      	add	r3, r1
 8001d46:	f022 020f 	bic.w	r2, r2, #15
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	741a      	strb	r2, [r3, #16]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] | ((0x0F00 & tmp) >> 8);
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	22e8      	movs	r2, #232	@ 0xe8
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	4413      	add	r3, r2
 8001d5a:	7c1b      	ldrb	r3, [r3, #16]
 8001d5c:	b25a      	sxtb	r2, r3
 8001d5e:	89fb      	ldrh	r3, [r7, #14]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	b25b      	sxtb	r3, r3
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b259      	sxtb	r1, r3
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	22e8      	movs	r2, #232	@ 0xe8
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2ca      	uxtb	r2, r1
 8001d7e:	741a      	strb	r2, [r3, #16]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <ADBMS6830B_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void ADBMS6830B_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov / 16);
 8001d9c:	88bb      	ldrh	r3, [r7, #4]
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	81fb      	strh	r3, [r7, #14]
	ic[nIC].configb.tx_data[2] = 0x00FF & (tmp >> 4);
 8001da2:	89fb      	ldrh	r3, [r7, #14]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	b299      	uxth	r1, r3
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	22e8      	movs	r2, #232	@ 0xe8
 8001dac:	fb02 f303 	mul.w	r3, r2, r3
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	b2ca      	uxtb	r2, r1
 8001db6:	745a      	strb	r2, [r3, #17]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] & 0x0F;
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	22e8      	movs	r2, #232	@ 0xe8
 8001dbc:	fb02 f303 	mul.w	r3, r2, r3
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	7c1a      	ldrb	r2, [r3, #16]
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	21e8      	movs	r1, #232	@ 0xe8
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	6839      	ldr	r1, [r7, #0]
 8001dd0:	440b      	add	r3, r1
 8001dd2:	f002 020f 	and.w	r2, r2, #15
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	741a      	strb	r2, [r3, #16]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] | ((0x000F & tmp) << 4);
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	22e8      	movs	r2, #232	@ 0xe8
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	7c1b      	ldrb	r3, [r3, #16]
 8001de8:	b25a      	sxtb	r2, r3
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b259      	sxtb	r1, r3
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	22e8      	movs	r2, #232	@ 0xe8
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b2ca      	uxtb	r2, r1
 8001e02:	741a      	strb	r2, [r3, #16]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <ADBMS6830B_init_reg_limits>:

/* Initialize the Register limits */
void ADBMS6830B_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]
 8001e20:	e038      	b.n	8001e94 <ADBMS6830B_init_reg_limits+0x84>
    ic[cic].ic_reg.cell_channels = 20;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	22e8      	movs	r2, #232	@ 0xe8
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	2214      	movs	r2, #20
 8001e30:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
    ic[cic].ic_reg.stat_channels = 4; //Doesn't matter?
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	22e8      	movs	r2, #232	@ 0xe8
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	2204      	movs	r2, #4
 8001e42:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    ic[cic].ic_reg.aux_channels = 6; //Doesn't matter?
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	22e8      	movs	r2, #232	@ 0xe8
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	4413      	add	r3, r2
 8001e52:	2206      	movs	r2, #6
 8001e54:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
    ic[cic].ic_reg.num_cv_reg = 6;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	22e8      	movs	r2, #232	@ 0xe8
 8001e5c:	fb02 f303 	mul.w	r3, r2, r3
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	2206      	movs	r2, #6
 8001e66:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
    ic[cic].ic_reg.num_gpio_reg = 4;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	22e8      	movs	r2, #232	@ 0xe8
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	2204      	movs	r2, #4
 8001e78:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    ic[cic].ic_reg.num_stat_reg = 5;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	22e8      	movs	r2, #232	@ 0xe8
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	2205      	movs	r2, #5
 8001e8a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	3301      	adds	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d3c2      	bcc.n	8001e22 <ADBMS6830B_init_reg_limits+0x12>
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <ADBMS6830B_adcv>:
				   uint8_t DCP, //Discharge Permit
				   uint8_t CONT, //Cell Channels to be measured
				   uint8_t RSTF, //Reset Filter
				   uint8_t OW //Open-wire bits
                 )
{
 8001eaa:	b590      	push	{r4, r7, lr}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	4608      	mov	r0, r1
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4623      	mov	r3, r4
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71bb      	strb	r3, [r7, #6]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	717b      	strb	r3, [r7, #5]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	713b      	strb	r3, [r7, #4]
	uint8_t cmd[2];

	cmd[0] = 0x02 + RD;
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	3302      	adds	r3, #2
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x60 | (CONT << 7) | (DCP << 4) | (RSTF << 2) | OW;
 8001ed0:	797b      	ldrb	r3, [r7, #5]
 8001ed2:	01db      	lsls	r3, r3, #7
 8001ed4:	b25b      	sxtb	r3, r3
 8001ed6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001eda:	b25a      	sxtb	r2, r3
 8001edc:	79bb      	ldrb	r3, [r7, #6]
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	b25b      	sxtb	r3, r3
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b25a      	sxtb	r2, r3
 8001ee6:	793b      	ldrb	r3, [r7, #4]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	b25b      	sxtb	r3, r3
 8001eec:	4313      	orrs	r3, r2
 8001eee:	b25a      	sxtb	r2, r3
 8001ef0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	b25b      	sxtb	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff f853 	bl	8000fac <cmd_68>
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd90      	pop	{r4, r7, pc}
	...

08001f10 <ADBMS6830B_pollAdc>:

/* This function will block operation until the ADC has finished it's conversion */
uint32_t ADBMS6830B_pollAdc()
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	72bb      	strb	r3, [r7, #10]
	cmd[1] = 0x18;
	cmd_pec = pec15_calc(2, cmd);
	cmd[2] = (uint8_t) (cmd_pec >> 8);
	cmd[3] = (uint8_t) (cmd_pec);
	*/
	FEB_cs_low();
 8001f22:	f000 fc6f 	bl	8002804 <FEB_cs_low>
	FEB_spi_write_array(4, cmd);
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	2004      	movs	r0, #4
 8001f2c:	f000 fc82 	bl	8002834 <FEB_spi_write_array>

	while ((counter < 200000) && (finished == 0))
 8001f30:	e00d      	b.n	8001f4e <ADBMS6830B_pollAdc+0x3e>
	{
		current_time = FEB_spi_read_byte(0xff);
 8001f32:	20ff      	movs	r0, #255	@ 0xff
 8001f34:	f000 fcb2 	bl	800289c <FEB_spi_read_byte>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0)
 8001f3c:	7abb      	ldrb	r3, [r7, #10]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <ADBMS6830B_pollAdc+0x38>
		{
			finished = 1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	72fb      	strb	r3, [r7, #11]
 8001f46:	e002      	b.n	8001f4e <ADBMS6830B_pollAdc+0x3e>
		}
		else
		{
			counter = counter + 10;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	330a      	adds	r3, #10
 8001f4c:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4a06      	ldr	r2, [pc, #24]	@ (8001f6c <ADBMS6830B_pollAdc+0x5c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d802      	bhi.n	8001f5c <ADBMS6830B_pollAdc+0x4c>
 8001f56:	7afb      	ldrb	r3, [r7, #11]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ea      	beq.n	8001f32 <ADBMS6830B_pollAdc+0x22>
		}
	}

	FEB_cs_high();
 8001f5c:	f000 fc5e 	bl	800281c <FEB_cs_high>

	return(counter);
 8001f60:	68fb      	ldr	r3, [r7, #12]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	00030d3f 	.word	0x00030d3f

08001f70 <ADBMS6830B_rdcv>:
and store the cell voltages in c_codes variable.
*/
uint8_t ADBMS6830B_rdcv(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
				c_ic = total_ic - curr_ic - 1;
			}
			//pec_error += parse_cells(c_ic, CELL, cell_data, &ic[c_ic].cells.c_codes[0], &ic[c_ic].cells.pec_match[0]);
		}*/
	uint8_t *cell_data;
	cell_data = (uint8_t *) malloc(34 * sizeof(uint8_t));
 8001f7c:	2022      	movs	r0, #34	@ 0x22
 8001f7e:	f003 fdc3 	bl	8005b08 <malloc>
 8001f82:	4603      	mov	r3, r0
 8001f84:	60fb      	str	r3, [r7, #12]
	transmitCMDR(RDACALL,cell_data,34);
 8001f86:	2222      	movs	r2, #34	@ 0x22
 8001f88:	68f9      	ldr	r1, [r7, #12]
 8001f8a:	204c      	movs	r0, #76	@ 0x4c
 8001f8c:	f7ff f8ec 	bl	8001168 <transmitCMDR>
	memcpy(&(ic->cells.c_codes),cell_data,(size_t)32);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	331e      	adds	r3, #30
 8001f94:	2220      	movs	r2, #32
 8001f96:	68f9      	ldr	r1, [r7, #12]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f004 fc80 	bl	800689e <memcpy>
	uint16_t data_pec=pec10_calc(32,cell_data);
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	2020      	movs	r0, #32
 8001fa2:	f7fe ffcd 	bl	8000f40 <pec10_calc>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	817b      	strh	r3, [r7, #10]
	uint16_t rx_pec=*(uint16_t*)(cell_data+32);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8c1b      	ldrh	r3, [r3, #32]
 8001fae:	813b      	strh	r3, [r7, #8]
	free(cell_data);
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f003 fdb1 	bl	8005b18 <free>
	return(data_pec!=rx_pec);
 8001fb6:	897a      	ldrh	r2, [r7, #10]
 8001fb8:	893b      	ldrh	r3, [r7, #8]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60ba      	str	r2, [r7, #8]
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 8001fde:	2306      	movs	r3, #6
 8001fe0:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	777b      	strb	r3, [r7, #29]
 8001ff4:	e01f      	b.n	8002036 <parse_cells+0x6a>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 8001ff6:	7fbb      	ldrb	r3, [r7, #30]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	4619      	mov	r1, r3
 8002000:	7fbb      	ldrb	r3, [r7, #30]
 8002002:	3301      	adds	r3, #1
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	b29b      	uxth	r3, r3
 800200e:	440b      	add	r3, r1
 8002010:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8002012:	7f7a      	ldrb	r2, [r7, #29]
 8002014:	7bbb      	ldrb	r3, [r7, #14]
 8002016:	3b01      	subs	r3, #1
 8002018:	7ef9      	ldrb	r1, [r7, #27]
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	8aba      	ldrh	r2, [r7, #20]
 8002028:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 800202a:	7fbb      	ldrb	r3, [r7, #30]
 800202c:	3302      	adds	r3, #2
 800202e:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8002030:	7f7b      	ldrb	r3, [r7, #29]
 8002032:	3301      	adds	r3, #1
 8002034:	777b      	strb	r3, [r7, #29]
 8002036:	7f7a      	ldrb	r2, [r7, #29]
 8002038:	7efb      	ldrb	r3, [r7, #27]
 800203a:	429a      	cmp	r2, r3
 800203c:	d3db      	bcc.n	8001ff6 <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = ((cell_data[data_counter] & 0x03) << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 800203e:	7fbb      	ldrb	r3, [r7, #30]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	b21b      	sxth	r3, r3
 800204a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800204e:	b21a      	sxth	r2, r3
 8002050:	7fbb      	ldrb	r3, [r7, #30]
 8002052:	3301      	adds	r3, #1
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	440b      	add	r3, r1
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b21b      	sxth	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	b21b      	sxth	r3, r3
 8002060:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes. Command counter is first 6 bits of first byte, which we don't care bout, so we do & 0x03
	data_pec = pec10_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	461a      	mov	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	441a      	add	r2, r3
 800206c:	7f3b      	ldrb	r3, [r7, #28]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe ff65 	bl	8000f40 <pec10_calc>
 8002076:	4603      	mov	r3, r0
 8002078:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 800207a:	8b3a      	ldrh	r2, [r7, #24]
 800207c:	8afb      	ldrh	r3, [r7, #22]
 800207e:	429a      	cmp	r2, r3
 8002080:	d008      	beq.n	8002094 <parse_cells+0xc8>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8002082:	2301      	movs	r3, #1
 8002084:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 8002086:	7bbb      	ldrb	r3, [r7, #14]
 8002088:	3b01      	subs	r3, #1
 800208a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800208c:	4413      	add	r3, r2
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	e005      	b.n	80020a0 <parse_cells+0xd4>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8002094:	7bbb      	ldrb	r3, [r7, #14]
 8002096:	3b01      	subs	r3, #1
 8002098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800209a:	4413      	add	r3, r2
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 80020a0:	7fbb      	ldrb	r3, [r7, #30]
 80020a2:	3302      	adds	r3, #2
 80020a4:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 80020a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <ADBMS6830B_wrcfga>:

/* Write the ADBMS6830B CFGRA */
void ADBMS6830B_wrcfga(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b0c4      	sub	sp, #272	@ 0x110
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4602      	mov	r2, r0
 80020ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020be:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020c2:	6019      	str	r1, [r3, #0]
 80020c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020c8:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80020cc:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 80020ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d2:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t c_ic = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80020e8:	e048      	b.n	800217c <ADBMS6830B_wrcfga+0xca>
	{
		if (ic->isospi_reverse == false)
 80020ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80020f8:	f083 0301 	eor.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d004      	beq.n	800210c <ADBMS6830B_wrcfga+0x5a>
		{
			c_ic = current_ic;
 8002102:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002106:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 800210a:	e00b      	b.n	8002124 <ADBMS6830B_wrcfga+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 800210c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002110:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3b01      	subs	r3, #1
 8002120:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8002124:	2300      	movs	r3, #0
 8002126:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800212a:	e01e      	b.n	800216a <ADBMS6830B_wrcfga+0xb8>
		{
			write_buffer[write_count] = ic[c_ic].configa.tx_data[data];
 800212c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8002130:	22e8      	movs	r2, #232	@ 0xe8
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800213a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	18d1      	adds	r1, r2, r3
 8002142:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8002146:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800214a:	5c89      	ldrb	r1, [r1, r2]
 800214c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002150:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8002154:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8002156:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800215a:	3301      	adds	r3, #1
 800215c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002160:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002164:	3301      	adds	r3, #1
 8002166:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800216a:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800216e:	2b05      	cmp	r3, #5
 8002170:	d9dc      	bls.n	800212c <ADBMS6830B_wrcfga+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002172:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002176:	3301      	adds	r3, #1
 8002178:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800217c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002180:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002184:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d3ad      	bcc.n	80020ea <ADBMS6830B_wrcfga+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 800218e:	f107 0208 	add.w	r2, r7, #8
 8002192:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002196:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800219a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe ff57 	bl	8001054 <write_68>
}
 80021a6:	bf00      	nop
 80021a8:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <ADBMS6830B_wrcfgb>:

/* Write the ADBMS6830B CFGRB */
void ADBMS6830B_wrcfgb(uint8_t total_ic, //The number of ICs being written to
                    cell_asic ic[] // A two dimensional array of the configuration data that will be written
                   )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b0c4      	sub	sp, #272	@ 0x110
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4602      	mov	r2, r0
 80021b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021c0:	6019      	str	r1, [r3, #0]
 80021c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021c6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80021ca:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x24} ;
 80021cc:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80021d0:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t c_ic = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80021e6:	e049      	b.n	800227c <ADBMS6830B_wrcfgb+0xcc>
	{
		if (ic->isospi_reverse == false)
 80021e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80021f6:	f083 0301 	eor.w	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <ADBMS6830B_wrcfgb+0x5a>
		{
			c_ic = current_ic;
 8002200:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002204:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8002208:	e00b      	b.n	8002222 <ADBMS6830B_wrcfgb+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 800220a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800220e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8002222:	2300      	movs	r3, #0
 8002224:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002228:	e01f      	b.n	800226a <ADBMS6830B_wrcfgb+0xba>
		{
			write_buffer[write_count] = ic[c_ic].configb.tx_data[data];
 800222a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800222e:	22e8      	movs	r2, #232	@ 0xe8
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002238:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	18d1      	adds	r1, r2, r3
 8002240:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8002244:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002248:	440a      	add	r2, r1
 800224a:	7bd1      	ldrb	r1, [r2, #15]
 800224c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002250:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8002254:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8002256:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800225a:	3301      	adds	r3, #1
 800225c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002260:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002264:	3301      	adds	r3, #1
 8002266:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800226a:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800226e:	2b05      	cmp	r3, #5
 8002270:	d9db      	bls.n	800222a <ADBMS6830B_wrcfgb+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002272:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002276:	3301      	adds	r3, #1
 8002278:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800227c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002280:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002284:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d3ac      	bcc.n	80021e8 <ADBMS6830B_wrcfgb+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 800228e:	f107 0208 	add.w	r2, r7, #8
 8002292:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800229a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fed7 	bl	8001054 <write_68>
}
 80022a6:	bf00      	nop
 80022a8:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <ADBMS6830B_adax>:
/* Start ADC Conversion for GPIO and Vref2  */
void ADBMS6830B_adax(uint8_t OW, //Open Wire Detection
				  uint8_t PUP, //Pull up/pull down current sources during measurement
				  uint8_t CH //GPIO Channels to be measured
				  )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
 80022ba:	460b      	mov	r3, r1
 80022bc:	71bb      	strb	r3, [r7, #6]
 80022be:	4613      	mov	r3, r2
 80022c0:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];

	cmd[0] = OW + 0x04;
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	3304      	adds	r3, #4
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	733b      	strb	r3, [r7, #12]
	cmd[1] = (PUP << 7) + ((CH & 0x10) << 2) + (CH & 0xF) + 0x10;
 80022ca:	79bb      	ldrb	r3, [r7, #6]
 80022cc:	01db      	lsls	r3, r3, #7
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	797b      	ldrb	r3, [r7, #5]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4413      	add	r3, r2
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	797b      	ldrb	r3, [r7, #5]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	3310      	adds	r3, #16
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fe58 	bl	8000fac <cmd_68>
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <ADBMS6830B_rdaux>:
*/

uint8_t ADBMS6830B_rdaux(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b08b      	sub	sp, #44	@ 0x2c
 8002308:	af02      	add	r7, sp, #8
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8002310:	2308      	movs	r3, #8
 8002312:	75fb      	strb	r3, [r7, #23]

	int8_t pec_error = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	77fb      	strb	r3, [r7, #31]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	77bb      	strb	r3, [r7, #30]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fbf1 	bl	8005b08 <malloc>
 8002326:	4603      	mov	r3, r0
 8002328:	613b      	str	r3, [r7, #16]

	for (uint8_t cell_reg = 1; cell_reg <= ic[0].ic_reg.num_cv_reg; cell_reg++) {
 800232a:	2301      	movs	r3, #1
 800232c:	777b      	strb	r3, [r7, #29]
 800232e:	e07d      	b.n	800242c <ADBMS6830B_rdaux+0x128>
		uint8_t cmd[4];
		switch(cell_reg) {
 8002330:	7f7b      	ldrb	r3, [r7, #29]
 8002332:	3b01      	subs	r3, #1
 8002334:	2b03      	cmp	r3, #3
 8002336:	d81f      	bhi.n	8002378 <ADBMS6830B_rdaux+0x74>
 8002338:	a201      	add	r2, pc, #4	@ (adr r2, 8002340 <ADBMS6830B_rdaux+0x3c>)
 800233a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233e:	bf00      	nop
 8002340:	08002351 	.word	0x08002351
 8002344:	0800235b 	.word	0x0800235b
 8002348:	08002365 	.word	0x08002365
 800234c:	0800236f 	.word	0x0800236f
			case 1: //Reg A
				cmd[0] = 0x00;
 8002350:	2300      	movs	r3, #0
 8002352:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x19;
 8002354:	2319      	movs	r3, #25
 8002356:	727b      	strb	r3, [r7, #9]
				break;
 8002358:	e00e      	b.n	8002378 <ADBMS6830B_rdaux+0x74>
			case 2: //Reg B
				cmd[0] = 0x00;
 800235a:	2300      	movs	r3, #0
 800235c:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1A;
 800235e:	231a      	movs	r3, #26
 8002360:	727b      	strb	r3, [r7, #9]
				break;
 8002362:	e009      	b.n	8002378 <ADBMS6830B_rdaux+0x74>
			case 3: //Reg C
				cmd[0] = 0x00;
 8002364:	2300      	movs	r3, #0
 8002366:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1B;
 8002368:	231b      	movs	r3, #27
 800236a:	727b      	strb	r3, [r7, #9]
				break;
 800236c:	e004      	b.n	8002378 <ADBMS6830B_rdaux+0x74>
			case 4: //Reg D
				cmd[0] = 0x00;
 800236e:	2300      	movs	r3, #0
 8002370:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1F;
 8002372:	231f      	movs	r3, #31
 8002374:	727b      	strb	r3, [r7, #9]
				break;
 8002376:	bf00      	nop
		}
		uint16_t cmd_pec = pec15_calc(2, cmd);
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4619      	mov	r1, r3
 800237e:	2002      	movs	r0, #2
 8002380:	f7fe fdaa 	bl	8000ed8 <pec15_calc>
 8002384:	4603      	mov	r3, r0
 8002386:	81fb      	strh	r3, [r7, #14]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002388:	89fb      	ldrh	r3, [r7, #14]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	b29b      	uxth	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(cmd_pec);
 8002392:	89fb      	ldrh	r3, [r7, #14]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	72fb      	strb	r3, [r7, #11]
		FEB_cs_low();
 8002398:	f000 fa34 	bl	8002804 <FEB_cs_low>
		FEB_spi_write_read(cmd, 4, cell_data, (REG_LEN * total_ic));
 800239c:	7dfa      	ldrb	r2, [r7, #23]
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	fb12 f303 	smulbb	r3, r2, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f107 0008 	add.w	r0, r7, #8
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	2104      	movs	r1, #4
 80023ae:	f000 fa55 	bl	800285c <FEB_spi_write_read>
		FEB_cs_high();
 80023b2:	f000 fa33 	bl	800281c <FEB_cs_high>

		//parse data
		for (int curr_ic = 0; curr_ic < total_ic; curr_ic++) {
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	e030      	b.n	800241e <ADBMS6830B_rdaux+0x11a>
			if (ic->isospi_reverse == false) {
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80023c2:	f083 0301 	eor.w	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <ADBMS6830B_rdaux+0xce>
				c_ic = curr_ic;
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	77bb      	strb	r3, [r7, #30]
 80023d0:	e006      	b.n	80023e0 <ADBMS6830B_rdaux+0xdc>
			} else {
				c_ic = total_ic - curr_ic - 1;
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	79fa      	ldrb	r2, [r7, #7]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	77bb      	strb	r3, [r7, #30]
			}
			pec_error += parse_cells(c_ic, cell_reg, cell_data, &ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 80023e0:	7fbb      	ldrb	r3, [r7, #30]
 80023e2:	22e8      	movs	r2, #232	@ 0xe8
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 80023f0:	7fbb      	ldrb	r3, [r7, #30]
 80023f2:	22e8      	movs	r2, #232	@ 0xe8
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	335c      	adds	r3, #92	@ 0x5c
 80023fe:	7f79      	ldrb	r1, [r7, #29]
 8002400:	7fb8      	ldrb	r0, [r7, #30]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4623      	mov	r3, r4
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	f7ff fde0 	bl	8001fcc <parse_cells>
 800240c:	4603      	mov	r3, r0
 800240e:	b2da      	uxtb	r2, r3
 8002410:	7ffb      	ldrb	r3, [r7, #31]
 8002412:	4413      	add	r3, r2
 8002414:	b2db      	uxtb	r3, r3
 8002416:	77fb      	strb	r3, [r7, #31]
		for (int curr_ic = 0; curr_ic < total_ic; curr_ic++) {
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	3301      	adds	r3, #1
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	429a      	cmp	r2, r3
 8002424:	dbca      	blt.n	80023bc <ADBMS6830B_rdaux+0xb8>
	for (uint8_t cell_reg = 1; cell_reg <= ic[0].ic_reg.num_cv_reg; cell_reg++) {
 8002426:	7f7b      	ldrb	r3, [r7, #29]
 8002428:	3301      	adds	r3, #1
 800242a:	777b      	strb	r3, [r7, #29]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 8002432:	7f7a      	ldrb	r2, [r7, #29]
 8002434:	429a      	cmp	r2, r3
 8002436:	f67f af7b 	bls.w	8002330 <ADBMS6830B_rdaux+0x2c>
		}
	}

	ADBMS6830B_check_pec(total_ic, CELL, ic);
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	2102      	movs	r1, #2
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f829 	bl	8002498 <ADBMS6830B_check_pec>
	free(cell_data);
 8002446:	6938      	ldr	r0, [r7, #16]
 8002448:	f003 fb66 	bl	8005b18 <free>
	return(pec_error);
 800244c:	7ffb      	ldrb	r3, [r7, #31]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	@ 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd90      	pop	{r4, r7, pc}
 8002456:	bf00      	nop

08002458 <wakeup_sleep>:

/* Generic wakeup command to wake the ADBMS6830B from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < total_ic; i++) {
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	e00d      	b.n	8002484 <wakeup_sleep+0x2c>
	   FEB_cs_low(); //TODO: changed  from low
 8002468:	f000 f9cc 	bl	8002804 <FEB_cs_low>
	   FEB_delay_u(300); // Guarantees the ADBMS6830B will be in standby
 800246c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002470:	f000 f9bc 	bl	80027ec <FEB_delay_u>
	   FEB_cs_high();
 8002474:	f000 f9d2 	bl	800281c <FEB_cs_high>
	   FEB_delay_u(10);
 8002478:	200a      	movs	r0, #10
 800247a:	f000 f9b7 	bl	80027ec <FEB_delay_u>
	for (int i = 0; i < total_ic; i++) {
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3301      	adds	r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	dbed      	blt.n	8002468 <wakeup_sleep+0x10>
	}
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <ADBMS6830B_check_pec>:

void ADBMS6830B_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 8002498:	b480      	push	{r7}
 800249a:	b08b      	sub	sp, #44	@ 0x2c
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	603a      	str	r2, [r7, #0]
 80024a2:	71fb      	strb	r3, [r7, #7]
 80024a4:	460b      	mov	r3, r1
 80024a6:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	f200 8197 	bhi.w	80027de <ADBMS6830B_check_pec+0x346>
 80024b0:	a201      	add	r2, pc, #4	@ (adr r2, 80024b8 <ADBMS6830B_check_pec+0x20>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024cd 	.word	0x080024cd
 80024bc:	0800254b 	.word	0x0800254b
 80024c0:	080025c9 	.word	0x080025c9
 80024c4:	0800267b 	.word	0x0800267b
 80024c8:	0800272d 	.word	0x0800272d
	{
		case CFGRA:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d0:	e036      	b.n	8002540 <ADBMS6830B_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configa.rx_pec_match;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	22e8      	movs	r2, #232	@ 0xe8
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	21e8      	movs	r1, #232	@ 0xe8
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	6839      	ldr	r1, [r7, #0]
 80024ec:	440b      	add	r3, r1
 80024ee:	7b9b      	ldrb	r3, [r3, #14]
 80024f0:	4618      	mov	r0, r3
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	21e8      	movs	r1, #232	@ 0xe8
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	6839      	ldr	r1, [r7, #0]
 80024fc:	440b      	add	r3, r1
 80024fe:	4402      	add	r2, r0
 8002500:	b292      	uxth	r2, r2
 8002502:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configa.rx_pec_match;
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	22e8      	movs	r2, #232	@ 0xe8
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	4413      	add	r3, r2
 8002512:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	@ 0xc4
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	21e8      	movs	r1, #232	@ 0xe8
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	6839      	ldr	r1, [r7, #0]
 8002520:	440b      	add	r3, r1
 8002522:	7b9b      	ldrb	r3, [r3, #14]
 8002524:	4618      	mov	r0, r3
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	21e8      	movs	r1, #232	@ 0xe8
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	6839      	ldr	r1, [r7, #0]
 8002530:	440b      	add	r3, r1
 8002532:	4402      	add	r2, r0
 8002534:	b292      	uxth	r2, r2
 8002536:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	3301      	adds	r3, #1
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002544:	429a      	cmp	r2, r3
 8002546:	dbc4      	blt.n	80024d2 <ADBMS6830B_check_pec+0x3a>
		  }
		break;
 8002548:	e14a      	b.n	80027e0 <ADBMS6830B_check_pec+0x348>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
 800254e:	e036      	b.n	80025be <ADBMS6830B_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	22e8      	movs	r2, #232	@ 0xe8
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	21e8      	movs	r1, #232	@ 0xe8
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	440b      	add	r3, r1
 800256c:	7f5b      	ldrb	r3, [r3, #29]
 800256e:	4618      	mov	r0, r3
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	21e8      	movs	r1, #232	@ 0xe8
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	6839      	ldr	r1, [r7, #0]
 800257a:	440b      	add	r3, r1
 800257c:	4402      	add	r2, r0
 800257e:	b292      	uxth	r2, r2
 8002580:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	22e8      	movs	r2, #232	@ 0xe8
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	@ 0xc4
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	21e8      	movs	r1, #232	@ 0xe8
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	6839      	ldr	r1, [r7, #0]
 800259e:	440b      	add	r3, r1
 80025a0:	7f5b      	ldrb	r3, [r3, #29]
 80025a2:	4618      	mov	r0, r3
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	21e8      	movs	r1, #232	@ 0xe8
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	6839      	ldr	r1, [r7, #0]
 80025ae:	440b      	add	r3, r1
 80025b0:	4402      	add	r2, r0
 80025b2:	b292      	uxth	r2, r2
 80025b4:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	3301      	adds	r3, #1
 80025bc:	623b      	str	r3, [r7, #32]
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	6a3a      	ldr	r2, [r7, #32]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	dbc4      	blt.n	8002550 <ADBMS6830B_check_pec+0xb8>
		  }
		break;
 80025c6:	e10b      	b.n	80027e0 <ADBMS6830B_check_pec+0x348>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	e050      	b.n	8002670 <ADBMS6830B_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	e043      	b.n	800265c <ADBMS6830B_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	22e8      	movs	r2, #232	@ 0xe8
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	21e8      	movs	r1, #232	@ 0xe8
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	4419      	add	r1, r3
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	440b      	add	r3, r1
 80025f4:	3342      	adds	r3, #66	@ 0x42
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	21e8      	movs	r1, #232	@ 0xe8
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	6839      	ldr	r1, [r7, #0]
 8002604:	440b      	add	r3, r1
 8002606:	4402      	add	r2, r0
 8002608:	b292      	uxth	r2, r2
 800260a:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	22e8      	movs	r2, #232	@ 0xe8
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	441a      	add	r2, r3
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	3360      	adds	r3, #96	@ 0x60
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	88db      	ldrh	r3, [r3, #6]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	21e8      	movs	r1, #232	@ 0xe8
 8002628:	fb01 f202 	mul.w	r2, r1, r2
 800262c:	6839      	ldr	r1, [r7, #0]
 800262e:	4411      	add	r1, r2
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	440a      	add	r2, r1
 8002634:	3242      	adds	r2, #66	@ 0x42
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	4610      	mov	r0, r2
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	21e8      	movs	r1, #232	@ 0xe8
 800263e:	fb01 f202 	mul.w	r2, r1, r2
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	440a      	add	r2, r1
 8002646:	4403      	add	r3, r0
 8002648:	b299      	uxth	r1, r3
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	3360      	adds	r3, #96	@ 0x60
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	460a      	mov	r2, r1
 8002654:	80da      	strh	r2, [r3, #6]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	3301      	adds	r3, #1
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f893 30e1 	ldrb.w	r3, [r3, #225]	@ 0xe1
 8002662:	461a      	mov	r2, r3
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4293      	cmp	r3, r2
 8002668:	dbb4      	blt.n	80025d4 <ADBMS6830B_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3301      	adds	r3, #1
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	429a      	cmp	r2, r3
 8002676:	dbaa      	blt.n	80025ce <ADBMS6830B_check_pec+0x136>
			}
		  }
		break;
 8002678:	e0b2      	b.n	80027e0 <ADBMS6830B_check_pec+0x348>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e050      	b.n	8002722 <ADBMS6830B_check_pec+0x28a>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	e043      	b.n	800270e <ADBMS6830B_check_pec+0x276>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	22e8      	movs	r2, #232	@ 0xe8
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	4413      	add	r3, r2
 8002692:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	21e8      	movs	r1, #232	@ 0xe8
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	6839      	ldr	r1, [r7, #0]
 80026a0:	4419      	add	r1, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	440b      	add	r3, r1
 80026a6:	335c      	adds	r3, #92	@ 0x5c
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	21e8      	movs	r1, #232	@ 0xe8
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	6839      	ldr	r1, [r7, #0]
 80026b6:	440b      	add	r3, r1
 80026b8:	4402      	add	r2, r0
 80026ba:	b292      	uxth	r2, r2
 80026bc:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	22e8      	movs	r2, #232	@ 0xe8
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	441a      	add	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	3368      	adds	r3, #104	@ 0x68
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	885b      	ldrh	r3, [r3, #2]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	21e8      	movs	r1, #232	@ 0xe8
 80026da:	fb01 f202 	mul.w	r2, r1, r2
 80026de:	6839      	ldr	r1, [r7, #0]
 80026e0:	4411      	add	r1, r2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	440a      	add	r2, r1
 80026e6:	325c      	adds	r2, #92	@ 0x5c
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	4610      	mov	r0, r2
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	21e8      	movs	r1, #232	@ 0xe8
 80026f0:	fb01 f202 	mul.w	r2, r1, r2
 80026f4:	6839      	ldr	r1, [r7, #0]
 80026f6:	440a      	add	r2, r1
 80026f8:	4403      	add	r3, r0
 80026fa:	b299      	uxth	r1, r3
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	3368      	adds	r3, #104	@ 0x68
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	460a      	mov	r2, r1
 8002706:	805a      	strh	r2, [r3, #2]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	3301      	adds	r3, #1
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002714:	461a      	mov	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4293      	cmp	r3, r2
 800271a:	dbb4      	blt.n	8002686 <ADBMS6830B_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3301      	adds	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	429a      	cmp	r2, r3
 8002728:	dbaa      	blt.n	8002680 <ADBMS6830B_check_pec+0x1e8>
			}
		  }

		break;
 800272a:	e059      	b.n	80027e0 <ADBMS6830B_check_pec+0x348>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e050      	b.n	80027d4 <ADBMS6830B_check_pec+0x33c>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	e043      	b.n	80027c0 <ADBMS6830B_check_pec+0x328>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	22e8      	movs	r2, #232	@ 0xe8
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	4413      	add	r3, r2
 8002744:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	@ 0xc2
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	21e8      	movs	r1, #232	@ 0xe8
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	6839      	ldr	r1, [r7, #0]
 8002752:	4419      	add	r1, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	440b      	add	r3, r1
 8002758:	336d      	adds	r3, #109	@ 0x6d
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	21e8      	movs	r1, #232	@ 0xe8
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	440b      	add	r3, r1
 800276a:	4402      	add	r2, r0
 800276c:	b292      	uxth	r2, r2
 800276e:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	22e8      	movs	r2, #232	@ 0xe8
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	441a      	add	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	336c      	adds	r3, #108	@ 0x6c
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	885b      	ldrh	r3, [r3, #2]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	21e8      	movs	r1, #232	@ 0xe8
 800278c:	fb01 f202 	mul.w	r2, r1, r2
 8002790:	6839      	ldr	r1, [r7, #0]
 8002792:	4411      	add	r1, r2
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	440a      	add	r2, r1
 8002798:	326d      	adds	r2, #109	@ 0x6d
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	4610      	mov	r0, r2
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	21e8      	movs	r1, #232	@ 0xe8
 80027a2:	fb01 f202 	mul.w	r2, r1, r2
 80027a6:	6839      	ldr	r1, [r7, #0]
 80027a8:	440a      	add	r2, r1
 80027aa:	4403      	add	r3, r0
 80027ac:	b299      	uxth	r1, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	336c      	adds	r3, #108	@ 0x6c
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	460a      	mov	r2, r1
 80027b8:	805a      	strh	r2, [r3, #2]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3301      	adds	r3, #1
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	dbb4      	blt.n	8002738 <ADBMS6830B_check_pec+0x2a0>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3301      	adds	r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	dbaa      	blt.n	8002732 <ADBMS6830B_check_pec+0x29a>
			}
		  }
		break;
 80027dc:	e000      	b.n	80027e0 <ADBMS6830B_check_pec+0x348>
		default:
		break;
 80027de:	bf00      	nop
	}
}
 80027e0:	bf00      	nop
 80027e2:	372c      	adds	r7, #44	@ 0x2c
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <FEB_delay_u>:
static relay_status_t relay_status;
static uint8_t shutdown_close_guard = 0; //guard for shutdown relay

// ******************************** SPI ********************************

void FEB_delay_u(uint16_t micro) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(1);
 80027f6:	2001      	movs	r0, #1
 80027f8:	f000 fca0 	bl	800313c <HAL_Delay>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <FEB_cs_low>:

void FEB_delay_m(uint16_t milli) {
	HAL_Delay(milli);
}

void FEB_cs_low() {
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002808:	2200      	movs	r2, #0
 800280a:	2140      	movs	r1, #64	@ 0x40
 800280c:	4802      	ldr	r0, [pc, #8]	@ (8002818 <FEB_cs_low+0x14>)
 800280e:	f000 ff2f 	bl	8003670 <HAL_GPIO_WritePin>
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40020400 	.word	0x40020400

0800281c <FEB_cs_high>:

void FEB_cs_high() {
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002820:	2201      	movs	r2, #1
 8002822:	2140      	movs	r1, #64	@ 0x40
 8002824:	4802      	ldr	r0, [pc, #8]	@ (8002830 <FEB_cs_high+0x14>)
 8002826:	f000 ff23 	bl	8003670 <HAL_GPIO_WritePin>
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40020400 	.word	0x40020400

08002834 <FEB_spi_write_array>:

void FEB_spi_write_array(uint8_t len, uint8_t data[]) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, data, len, 100);
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	b29a      	uxth	r2, r3
 8002844:	2364      	movs	r3, #100	@ 0x64
 8002846:	6839      	ldr	r1, [r7, #0]
 8002848:	4803      	ldr	r0, [pc, #12]	@ (8002858 <FEB_spi_write_array+0x24>)
 800284a:	f001 fdce 	bl	80043ea <HAL_SPI_Transmit>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200003d8 	.word	0x200003d8

0800285c <FEB_spi_write_read>:

void FEB_spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	461a      	mov	r2, r3
 8002868:	460b      	mov	r3, r1
 800286a:	72fb      	strb	r3, [r7, #11]
 800286c:	4613      	mov	r3, r2
 800286e:	72bb      	strb	r3, [r7, #10]
			error=1;
		}
	}
	*/

	HAL_SPI_Transmit(&hspi1,tx_Data,tx_len,HAL_MAX_DELAY);
 8002870:	7afb      	ldrb	r3, [r7, #11]
 8002872:	b29a      	uxth	r2, r3
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	68f9      	ldr	r1, [r7, #12]
 800287a:	4807      	ldr	r0, [pc, #28]	@ (8002898 <FEB_spi_write_read+0x3c>)
 800287c:	f001 fdb5 	bl	80043ea <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,rx_data,rx_len,HAL_MAX_DELAY);
 8002880:	7abb      	ldrb	r3, [r7, #10]
 8002882:	b29a      	uxth	r2, r3
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4803      	ldr	r0, [pc, #12]	@ (8002898 <FEB_spi_write_read+0x3c>)
 800288c:	f001 fee9 	bl	8004662 <HAL_SPI_Receive>
	return;
 8002890:	bf00      	nop
}
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200003d8 	.word	0x200003d8

0800289c <FEB_spi_read_byte>:

uint8_t FEB_spi_read_byte(uint8_t tx_data) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_SPI_Receive(&hspi1, &data, 1, 100);
 80028a6:	f107 010f 	add.w	r1, r7, #15
 80028aa:	2364      	movs	r3, #100	@ 0x64
 80028ac:	2201      	movs	r2, #1
 80028ae:	4804      	ldr	r0, [pc, #16]	@ (80028c0 <FEB_spi_read_byte+0x24>)
 80028b0:	f001 fed7 	bl	8004662 <HAL_SPI_Receive>
	return data;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200003d8 	.word	0x200003d8

080028c4 <FEB_Main_Setup>:
#include "FEB_Main.h"
#include "FEB_ADBMS6830B.h"

// ******************************** Functions ********************************

void FEB_Main_Setup() {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	//SM setup
	FEB_ADBMS_Init();
 80028c8:	f7fe fcb0 	bl	800122c <FEB_ADBMS_Init>
	//CAN Filter Config Setup
	//IVT Setup
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <FEB_Main_Task1_VT>:

void FEB_Main_Task1_VT() {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
	FEB_ADBMS_AcquireData();
 80028d4:	f7fe fcec 	bl	80012b0 <FEB_ADBMS_AcquireData>
	FEB_ADBMS_UART_Transmit();
 80028d8:	f7fe fe4a 	bl	8001570 <FEB_ADBMS_UART_Transmit>
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}

080028e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028e4:	f000 fbe8 	bl	80030b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028e8:	f000 f80c 	bl	8002904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028ec:	f000 f8d8 	bl	8002aa0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028f0:	f000 f8ac 	bl	8002a4c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80028f4:	f000 f874 	bl	80029e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  FEB_Main_Setup();
 80028f8:	f7ff ffe4 	bl	80028c4 <FEB_Main_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FEB_Main_Task1_VT();
 80028fc:	f7ff ffe8 	bl	80028d0 <FEB_Main_Task1_VT>
 8002900:	e7fc      	b.n	80028fc <main+0x1c>
	...

08002904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b094      	sub	sp, #80	@ 0x50
 8002908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800290a:	f107 031c 	add.w	r3, r7, #28
 800290e:	2234      	movs	r2, #52	@ 0x34
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f003 ff33 	bl	800677e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002918:	f107 0308 	add.w	r3, r7, #8
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <SystemClock_Config+0xd4>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	4a29      	ldr	r2, [pc, #164]	@ (80029d8 <SystemClock_Config+0xd4>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002936:	6413      	str	r3, [r2, #64]	@ 0x40
 8002938:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <SystemClock_Config+0xd4>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002944:	2300      	movs	r3, #0
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4b24      	ldr	r3, [pc, #144]	@ (80029dc <SystemClock_Config+0xd8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002950:	4a22      	ldr	r2, [pc, #136]	@ (80029dc <SystemClock_Config+0xd8>)
 8002952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b20      	ldr	r3, [pc, #128]	@ (80029dc <SystemClock_Config+0xd8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002964:	2302      	movs	r3, #2
 8002966:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002968:	2301      	movs	r3, #1
 800296a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800296c:	2310      	movs	r3, #16
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002970:	2302      	movs	r3, #2
 8002972:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002974:	2300      	movs	r3, #0
 8002976:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002978:	2310      	movs	r3, #16
 800297a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800297c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002980:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002982:	2304      	movs	r3, #4
 8002984:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002986:	2302      	movs	r3, #2
 8002988:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800298a:	2302      	movs	r3, #2
 800298c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800298e:	f107 031c 	add.w	r3, r7, #28
 8002992:	4618      	mov	r0, r3
 8002994:	f001 fa02 	bl	8003d9c <HAL_RCC_OscConfig>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800299e:	f000 f91f 	bl	8002be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029a2:	230f      	movs	r3, #15
 80029a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a6:	2302      	movs	r3, #2
 80029a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029b8:	f107 0308 	add.w	r3, r7, #8
 80029bc:	2102      	movs	r1, #2
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fe70 	bl	80036a4 <HAL_RCC_ClockConfig>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80029ca:	f000 f909 	bl	8002be0 <Error_Handler>
  }
}
 80029ce:	bf00      	nop
 80029d0:	3750      	adds	r7, #80	@ 0x50
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40007000 	.word	0x40007000

080029e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029e4:	4b17      	ldr	r3, [pc, #92]	@ (8002a44 <MX_SPI1_Init+0x64>)
 80029e6:	4a18      	ldr	r2, [pc, #96]	@ (8002a48 <MX_SPI1_Init+0x68>)
 80029e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029ea:	4b16      	ldr	r3, [pc, #88]	@ (8002a44 <MX_SPI1_Init+0x64>)
 80029ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029f2:	4b14      	ldr	r3, [pc, #80]	@ (8002a44 <MX_SPI1_Init+0x64>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029f8:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <MX_SPI1_Init+0x64>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029fe:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <MX_SPI1_Init+0x64>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a04:	4b0f      	ldr	r3, [pc, #60]	@ (8002a44 <MX_SPI1_Init+0x64>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a44 <MX_SPI1_Init+0x64>)
 8002a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002a12:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <MX_SPI1_Init+0x64>)
 8002a14:	2228      	movs	r2, #40	@ 0x28
 8002a16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <MX_SPI1_Init+0x64>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a1e:	4b09      	ldr	r3, [pc, #36]	@ (8002a44 <MX_SPI1_Init+0x64>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a24:	4b07      	ldr	r3, [pc, #28]	@ (8002a44 <MX_SPI1_Init+0x64>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a2a:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <MX_SPI1_Init+0x64>)
 8002a2c:	220a      	movs	r2, #10
 8002a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a30:	4804      	ldr	r0, [pc, #16]	@ (8002a44 <MX_SPI1_Init+0x64>)
 8002a32:	f001 fc51 	bl	80042d8 <HAL_SPI_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a3c:	f000 f8d0 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	200003d8 	.word	0x200003d8
 8002a48:	40013000 	.word	0x40013000

08002a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a50:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <MX_USART2_UART_Init+0x4c>)
 8002a52:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <MX_USART2_UART_Init+0x50>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <MX_USART2_UART_Init+0x4c>)
 8002a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <MX_USART2_UART_Init+0x4c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <MX_USART2_UART_Init+0x4c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <MX_USART2_UART_Init+0x4c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b09      	ldr	r3, [pc, #36]	@ (8002a98 <MX_USART2_UART_Init+0x4c>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <MX_USART2_UART_Init+0x4c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <MX_USART2_UART_Init+0x4c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a82:	4805      	ldr	r0, [pc, #20]	@ (8002a98 <MX_USART2_UART_Init+0x4c>)
 8002a84:	f002 fc7e 	bl	8005384 <HAL_UART_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a8e:	f000 f8a7 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000430 	.word	0x20000430
 8002a9c:	40004400 	.word	0x40004400

08002aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	@ 0x28
 8002aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb0 <MX_GPIO_Init+0x110>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	4a3c      	ldr	r2, [pc, #240]	@ (8002bb0 <MX_GPIO_Init+0x110>)
 8002ac0:	f043 0304 	orr.w	r3, r3, #4
 8002ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb0 <MX_GPIO_Init+0x110>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b36      	ldr	r3, [pc, #216]	@ (8002bb0 <MX_GPIO_Init+0x110>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	4a35      	ldr	r2, [pc, #212]	@ (8002bb0 <MX_GPIO_Init+0x110>)
 8002adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae2:	4b33      	ldr	r3, [pc, #204]	@ (8002bb0 <MX_GPIO_Init+0x110>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb0 <MX_GPIO_Init+0x110>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb0 <MX_GPIO_Init+0x110>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afe:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb0 <MX_GPIO_Init+0x110>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	4b28      	ldr	r3, [pc, #160]	@ (8002bb0 <MX_GPIO_Init+0x110>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	4a27      	ldr	r2, [pc, #156]	@ (8002bb0 <MX_GPIO_Init+0x110>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1a:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <MX_GPIO_Init+0x110>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2108      	movs	r1, #8
 8002b2a:	4822      	ldr	r0, [pc, #136]	@ (8002bb4 <MX_GPIO_Init+0x114>)
 8002b2c:	f000 fda0 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2140      	movs	r1, #64	@ 0x40
 8002b34:	4820      	ldr	r0, [pc, #128]	@ (8002bb8 <MX_GPIO_Init+0x118>)
 8002b36:	f000 fd9b 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b40:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4818      	ldr	r0, [pc, #96]	@ (8002bb4 <MX_GPIO_Init+0x114>)
 8002b52:	f000 fbf9 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : WAKE_Pin INTR_Pin */
  GPIO_InitStruct.Pin = WAKE_Pin|INTR_Pin;
 8002b56:	2306      	movs	r3, #6
 8002b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4812      	ldr	r0, [pc, #72]	@ (8002bb4 <MX_GPIO_Init+0x114>)
 8002b6a:	f000 fbed 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b6e:	2308      	movs	r3, #8
 8002b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b72:	2301      	movs	r3, #1
 8002b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	480b      	ldr	r0, [pc, #44]	@ (8002bb4 <MX_GPIO_Init+0x114>)
 8002b86:	f000 fbdf 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b8a:	2340      	movs	r3, #64	@ 0x40
 8002b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9a:	f107 0314 	add.w	r3, r7, #20
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4805      	ldr	r0, [pc, #20]	@ (8002bb8 <MX_GPIO_Init+0x118>)
 8002ba2:	f000 fbd1 	bl	8003348 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ba6:	bf00      	nop
 8002ba8:	3728      	adds	r7, #40	@ 0x28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020400 	.word	0x40020400

08002bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a04      	ldr	r2, [pc, #16]	@ (8002bdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bce:	f000 fa95 	bl	80030fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40010000 	.word	0x40010000

08002be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002be4:	b672      	cpsid	i
}
 8002be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <Error_Handler+0x8>

08002bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <HAL_MspInit+0x4c>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8002c38 <HAL_MspInit+0x4c>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c02:	4b0d      	ldr	r3, [pc, #52]	@ (8002c38 <HAL_MspInit+0x4c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <HAL_MspInit+0x4c>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	4a08      	ldr	r2, [pc, #32]	@ (8002c38 <HAL_MspInit+0x4c>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_MspInit+0x4c>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800

08002c3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	@ 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a19      	ldr	r2, [pc, #100]	@ (8002cc0 <HAL_SPI_MspInit+0x84>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d12b      	bne.n	8002cb6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	4b18      	ldr	r3, [pc, #96]	@ (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	4a17      	ldr	r2, [pc, #92]	@ (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6e:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	4a10      	ldr	r2, [pc, #64]	@ (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c96:	23e0      	movs	r3, #224	@ 0xe0
 8002c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ca6:	2305      	movs	r3, #5
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4805      	ldr	r0, [pc, #20]	@ (8002cc8 <HAL_SPI_MspInit+0x8c>)
 8002cb2:	f000 fb49 	bl	8003348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002cb6:	bf00      	nop
 8002cb8:	3728      	adds	r7, #40	@ 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40013000 	.word	0x40013000
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40020000 	.word	0x40020000

08002ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a19      	ldr	r2, [pc, #100]	@ (8002d50 <HAL_UART_MspInit+0x84>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d12b      	bne.n	8002d46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	4b18      	ldr	r3, [pc, #96]	@ (8002d54 <HAL_UART_MspInit+0x88>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <HAL_UART_MspInit+0x88>)
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cfe:	4b15      	ldr	r3, [pc, #84]	@ (8002d54 <HAL_UART_MspInit+0x88>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <HAL_UART_MspInit+0x88>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	4a10      	ldr	r2, [pc, #64]	@ (8002d54 <HAL_UART_MspInit+0x88>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d54 <HAL_UART_MspInit+0x88>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d26:	230c      	movs	r3, #12
 8002d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d32:	2303      	movs	r3, #3
 8002d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d36:	2307      	movs	r3, #7
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4805      	ldr	r0, [pc, #20]	@ (8002d58 <HAL_UART_MspInit+0x8c>)
 8002d42:	f000 fb01 	bl	8003348 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	@ 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40004400 	.word	0x40004400
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020000 	.word	0x40020000

08002d5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	@ 0x30
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	4b2e      	ldr	r3, [pc, #184]	@ (8002e2c <HAL_InitTick+0xd0>)
 8002d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d74:	4a2d      	ldr	r2, [pc, #180]	@ (8002e2c <HAL_InitTick+0xd0>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e2c <HAL_InitTick+0xd0>)
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d88:	f107 020c 	add.w	r2, r7, #12
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fda0 	bl	80038d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002d98:	f000 fd8a 	bl	80038b0 <HAL_RCC_GetPCLK2Freq>
 8002d9c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da0:	4a23      	ldr	r2, [pc, #140]	@ (8002e30 <HAL_InitTick+0xd4>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0c9b      	lsrs	r3, r3, #18
 8002da8:	3b01      	subs	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002dac:	4b21      	ldr	r3, [pc, #132]	@ (8002e34 <HAL_InitTick+0xd8>)
 8002dae:	4a22      	ldr	r2, [pc, #136]	@ (8002e38 <HAL_InitTick+0xdc>)
 8002db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002db2:	4b20      	ldr	r3, [pc, #128]	@ (8002e34 <HAL_InitTick+0xd8>)
 8002db4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002db8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002dba:	4a1e      	ldr	r2, [pc, #120]	@ (8002e34 <HAL_InitTick+0xd8>)
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e34 <HAL_InitTick+0xd8>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e34 <HAL_InitTick+0xd8>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_InitTick+0xd8>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002dd2:	4818      	ldr	r0, [pc, #96]	@ (8002e34 <HAL_InitTick+0xd8>)
 8002dd4:	f002 f828 	bl	8004e28 <HAL_TIM_Base_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002dde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11b      	bne.n	8002e1e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002de6:	4813      	ldr	r0, [pc, #76]	@ (8002e34 <HAL_InitTick+0xd8>)
 8002de8:	f002 f878 	bl	8004edc <HAL_TIM_Base_Start_IT>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002df2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d111      	bne.n	8002e1e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002dfa:	2019      	movs	r0, #25
 8002dfc:	f000 fa96 	bl	800332c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b0f      	cmp	r3, #15
 8002e04:	d808      	bhi.n	8002e18 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002e06:	2200      	movs	r2, #0
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	2019      	movs	r0, #25
 8002e0c:	f000 fa72 	bl	80032f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e10:	4a0a      	ldr	r2, [pc, #40]	@ (8002e3c <HAL_InitTick+0xe0>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e002      	b.n	8002e1e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3730      	adds	r7, #48	@ 0x30
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	431bde83 	.word	0x431bde83
 8002e34:	20000474 	.word	0x20000474
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	20000014 	.word	0x20000014

08002e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <NMI_Handler+0x4>

08002e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e4c:	bf00      	nop
 8002e4e:	e7fd      	b.n	8002e4c <HardFault_Handler+0x4>

08002e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <MemManage_Handler+0x4>

08002e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <BusFault_Handler+0x4>

08002e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e64:	bf00      	nop
 8002e66:	e7fd      	b.n	8002e64 <UsageFault_Handler+0x4>

08002e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ea4:	4802      	ldr	r0, [pc, #8]	@ (8002eb0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ea6:	f002 f889 	bl	8004fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000474 	.word	0x20000474

08002eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return 1;
 8002eb8:	2301      	movs	r3, #1
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <_kill>:

int _kill(int pid, int sig)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ece:	f003 fcb9 	bl	8006844 <__errno>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2216      	movs	r2, #22
 8002ed6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_exit>:

void _exit (int status)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ffe7 	bl	8002ec4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ef6:	bf00      	nop
 8002ef8:	e7fd      	b.n	8002ef6 <_exit+0x12>

08002efa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	e00a      	b.n	8002f22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f0c:	f3af 8000 	nop.w
 8002f10:	4601      	mov	r1, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	60ba      	str	r2, [r7, #8]
 8002f18:	b2ca      	uxtb	r2, r1
 8002f1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	dbf0      	blt.n	8002f0c <_read+0x12>
  }

  return len;
 8002f2a:	687b      	ldr	r3, [r7, #4]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	e009      	b.n	8002f5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	60ba      	str	r2, [r7, #8]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	dbf1      	blt.n	8002f46 <_write+0x12>
  }
  return len;
 8002f62:	687b      	ldr	r3, [r7, #4]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_close>:

int _close(int file)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f94:	605a      	str	r2, [r3, #4]
  return 0;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <_isatty>:

int _isatty(int file)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fac:	2301      	movs	r3, #1
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fdc:	4a14      	ldr	r2, [pc, #80]	@ (8003030 <_sbrk+0x5c>)
 8002fde:	4b15      	ldr	r3, [pc, #84]	@ (8003034 <_sbrk+0x60>)
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe8:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	@ (8003038 <_sbrk+0x64>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	@ (800303c <_sbrk+0x68>)
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d207      	bcs.n	8003014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003004:	f003 fc1e 	bl	8006844 <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	220c      	movs	r2, #12
 800300c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e009      	b.n	8003028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003014:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <_sbrk+0x64>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301a:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	4a05      	ldr	r2, [pc, #20]	@ (8003038 <_sbrk+0x64>)
 8003024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20020000 	.word	0x20020000
 8003034:	00000400 	.word	0x00000400
 8003038:	200004bc 	.word	0x200004bc
 800303c:	20000610 	.word	0x20000610

08003040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <SystemInit+0x20>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304a:	4a05      	ldr	r2, [pc, #20]	@ (8003060 <SystemInit+0x20>)
 800304c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800309c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003068:	480d      	ldr	r0, [pc, #52]	@ (80030a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800306a:	490e      	ldr	r1, [pc, #56]	@ (80030a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800306c:	4a0e      	ldr	r2, [pc, #56]	@ (80030a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003070:	e002      	b.n	8003078 <LoopCopyDataInit>

08003072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003076:	3304      	adds	r3, #4

08003078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800307c:	d3f9      	bcc.n	8003072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307e:	4a0b      	ldr	r2, [pc, #44]	@ (80030ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003080:	4c0b      	ldr	r4, [pc, #44]	@ (80030b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003084:	e001      	b.n	800308a <LoopFillZerobss>

08003086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003088:	3204      	adds	r2, #4

0800308a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800308c:	d3fb      	bcc.n	8003086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800308e:	f7ff ffd7 	bl	8003040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003092:	f003 fbdd 	bl	8006850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003096:	f7ff fc23 	bl	80028e0 <main>
  bx  lr    
 800309a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800309c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80030a8:	08008fa0 	.word	0x08008fa0
  ldr r2, =_sbss
 80030ac:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80030b0:	20000610 	.word	0x20000610

080030b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b4:	e7fe      	b.n	80030b4 <ADC_IRQHandler>
	...

080030b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030bc:	4b0e      	ldr	r3, [pc, #56]	@ (80030f8 <HAL_Init+0x40>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0d      	ldr	r2, [pc, #52]	@ (80030f8 <HAL_Init+0x40>)
 80030c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030c8:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_Init+0x40>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	@ (80030f8 <HAL_Init+0x40>)
 80030ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d4:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <HAL_Init+0x40>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a07      	ldr	r2, [pc, #28]	@ (80030f8 <HAL_Init+0x40>)
 80030da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e0:	2003      	movs	r0, #3
 80030e2:	f000 f8fc 	bl	80032de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030e6:	200f      	movs	r0, #15
 80030e8:	f7ff fe38 	bl	8002d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ec:	f7ff fd7e 	bl	8002bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00

080030fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <HAL_IncTick+0x20>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <HAL_IncTick+0x24>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4413      	add	r3, r2
 800310c:	4a04      	ldr	r2, [pc, #16]	@ (8003120 <HAL_IncTick+0x24>)
 800310e:	6013      	str	r3, [r2, #0]
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000018 	.word	0x20000018
 8003120:	200004c0 	.word	0x200004c0

08003124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return uwTick;
 8003128:	4b03      	ldr	r3, [pc, #12]	@ (8003138 <HAL_GetTick+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	200004c0 	.word	0x200004c0

0800313c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003144:	f7ff ffee 	bl	8003124 <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d005      	beq.n	8003162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003156:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <HAL_Delay+0x44>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003162:	bf00      	nop
 8003164:	f7ff ffde 	bl	8003124 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	429a      	cmp	r2, r3
 8003172:	d8f7      	bhi.n	8003164 <HAL_Delay+0x28>
  {
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000018 	.word	0x20000018

08003184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b6:	4a04      	ldr	r2, [pc, #16]	@ (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d0:	4b04      	ldr	r3, [pc, #16]	@ (80031e4 <__NVIC_GetPriorityGrouping+0x18>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	f003 0307 	and.w	r3, r3, #7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db0b      	blt.n	8003212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	4907      	ldr	r1, [pc, #28]	@ (8003220 <__NVIC_EnableIRQ+0x38>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2001      	movs	r0, #1
 800320a:	fa00 f202 	lsl.w	r2, r0, r2
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000e100 	.word	0xe000e100

08003224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003234:	2b00      	cmp	r3, #0
 8003236:	db0a      	blt.n	800324e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	490c      	ldr	r1, [pc, #48]	@ (8003270 <__NVIC_SetPriority+0x4c>)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	0112      	lsls	r2, r2, #4
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	440b      	add	r3, r1
 8003248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800324c:	e00a      	b.n	8003264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4908      	ldr	r1, [pc, #32]	@ (8003274 <__NVIC_SetPriority+0x50>)
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	3b04      	subs	r3, #4
 800325c:	0112      	lsls	r2, r2, #4
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	440b      	add	r3, r1
 8003262:	761a      	strb	r2, [r3, #24]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000e100 	.word	0xe000e100
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003278:	b480      	push	{r7}
 800327a:	b089      	sub	sp, #36	@ 0x24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f1c3 0307 	rsb	r3, r3, #7
 8003292:	2b04      	cmp	r3, #4
 8003294:	bf28      	it	cs
 8003296:	2304      	movcs	r3, #4
 8003298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	3304      	adds	r3, #4
 800329e:	2b06      	cmp	r3, #6
 80032a0:	d902      	bls.n	80032a8 <NVIC_EncodePriority+0x30>
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3b03      	subs	r3, #3
 80032a6:	e000      	b.n	80032aa <NVIC_EncodePriority+0x32>
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ac:	f04f 32ff 	mov.w	r2, #4294967295
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	401a      	ands	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c0:	f04f 31ff 	mov.w	r1, #4294967295
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	43d9      	mvns	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d0:	4313      	orrs	r3, r2
         );
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3724      	adds	r7, #36	@ 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ff4c 	bl	8003184 <__NVIC_SetPriorityGrouping>
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003306:	f7ff ff61 	bl	80031cc <__NVIC_GetPriorityGrouping>
 800330a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	6978      	ldr	r0, [r7, #20]
 8003312:	f7ff ffb1 	bl	8003278 <NVIC_EncodePriority>
 8003316:	4602      	mov	r2, r0
 8003318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff ff80 	bl	8003224 <__NVIC_SetPriority>
}
 8003324:	bf00      	nop
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff ff54 	bl	80031e8 <__NVIC_EnableIRQ>
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	@ 0x24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	e165      	b.n	8003630 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003364:	2201      	movs	r2, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	429a      	cmp	r2, r3
 800337e:	f040 8154 	bne.w	800362a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d005      	beq.n	800339a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003396:	2b02      	cmp	r3, #2
 8003398:	d130      	bne.n	80033fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	2203      	movs	r2, #3
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d0:	2201      	movs	r2, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 0201 	and.w	r2, r3, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b03      	cmp	r3, #3
 8003406:	d017      	beq.n	8003438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	2203      	movs	r2, #3
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d123      	bne.n	800348c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	08da      	lsrs	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3208      	adds	r2, #8
 800344c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	220f      	movs	r2, #15
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	08da      	lsrs	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3208      	adds	r2, #8
 8003486:	69b9      	ldr	r1, [r7, #24]
 8003488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2203      	movs	r2, #3
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0203 	and.w	r2, r3, #3
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80ae 	beq.w	800362a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003648 <HAL_GPIO_Init+0x300>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003648 <HAL_GPIO_Init+0x300>)
 80034d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80034de:	4b5a      	ldr	r3, [pc, #360]	@ (8003648 <HAL_GPIO_Init+0x300>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ea:	4a58      	ldr	r2, [pc, #352]	@ (800364c <HAL_GPIO_Init+0x304>)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	3302      	adds	r3, #2
 80034f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	220f      	movs	r2, #15
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a4f      	ldr	r2, [pc, #316]	@ (8003650 <HAL_GPIO_Init+0x308>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d025      	beq.n	8003562 <HAL_GPIO_Init+0x21a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a4e      	ldr	r2, [pc, #312]	@ (8003654 <HAL_GPIO_Init+0x30c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01f      	beq.n	800355e <HAL_GPIO_Init+0x216>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a4d      	ldr	r2, [pc, #308]	@ (8003658 <HAL_GPIO_Init+0x310>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d019      	beq.n	800355a <HAL_GPIO_Init+0x212>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a4c      	ldr	r2, [pc, #304]	@ (800365c <HAL_GPIO_Init+0x314>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_GPIO_Init+0x20e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a4b      	ldr	r2, [pc, #300]	@ (8003660 <HAL_GPIO_Init+0x318>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00d      	beq.n	8003552 <HAL_GPIO_Init+0x20a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4a      	ldr	r2, [pc, #296]	@ (8003664 <HAL_GPIO_Init+0x31c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <HAL_GPIO_Init+0x206>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a49      	ldr	r2, [pc, #292]	@ (8003668 <HAL_GPIO_Init+0x320>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_GPIO_Init+0x202>
 8003546:	2306      	movs	r3, #6
 8003548:	e00c      	b.n	8003564 <HAL_GPIO_Init+0x21c>
 800354a:	2307      	movs	r3, #7
 800354c:	e00a      	b.n	8003564 <HAL_GPIO_Init+0x21c>
 800354e:	2305      	movs	r3, #5
 8003550:	e008      	b.n	8003564 <HAL_GPIO_Init+0x21c>
 8003552:	2304      	movs	r3, #4
 8003554:	e006      	b.n	8003564 <HAL_GPIO_Init+0x21c>
 8003556:	2303      	movs	r3, #3
 8003558:	e004      	b.n	8003564 <HAL_GPIO_Init+0x21c>
 800355a:	2302      	movs	r3, #2
 800355c:	e002      	b.n	8003564 <HAL_GPIO_Init+0x21c>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_GPIO_Init+0x21c>
 8003562:	2300      	movs	r3, #0
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	f002 0203 	and.w	r2, r2, #3
 800356a:	0092      	lsls	r2, r2, #2
 800356c:	4093      	lsls	r3, r2
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003574:	4935      	ldr	r1, [pc, #212]	@ (800364c <HAL_GPIO_Init+0x304>)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	3302      	adds	r3, #2
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003582:	4b3a      	ldr	r3, [pc, #232]	@ (800366c <HAL_GPIO_Init+0x324>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035a6:	4a31      	ldr	r2, [pc, #196]	@ (800366c <HAL_GPIO_Init+0x324>)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035ac:	4b2f      	ldr	r3, [pc, #188]	@ (800366c <HAL_GPIO_Init+0x324>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035d0:	4a26      	ldr	r2, [pc, #152]	@ (800366c <HAL_GPIO_Init+0x324>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035d6:	4b25      	ldr	r3, [pc, #148]	@ (800366c <HAL_GPIO_Init+0x324>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035fa:	4a1c      	ldr	r2, [pc, #112]	@ (800366c <HAL_GPIO_Init+0x324>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003600:	4b1a      	ldr	r3, [pc, #104]	@ (800366c <HAL_GPIO_Init+0x324>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003624:	4a11      	ldr	r2, [pc, #68]	@ (800366c <HAL_GPIO_Init+0x324>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3301      	adds	r3, #1
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b0f      	cmp	r3, #15
 8003634:	f67f ae96 	bls.w	8003364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	3724      	adds	r7, #36	@ 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800
 800364c:	40013800 	.word	0x40013800
 8003650:	40020000 	.word	0x40020000
 8003654:	40020400 	.word	0x40020400
 8003658:	40020800 	.word	0x40020800
 800365c:	40020c00 	.word	0x40020c00
 8003660:	40021000 	.word	0x40021000
 8003664:	40021400 	.word	0x40021400
 8003668:	40021800 	.word	0x40021800
 800366c:	40013c00 	.word	0x40013c00

08003670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	807b      	strh	r3, [r7, #2]
 800367c:	4613      	mov	r3, r2
 800367e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003680:	787b      	ldrb	r3, [r7, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800368c:	e003      	b.n	8003696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800368e:	887b      	ldrh	r3, [r7, #2]
 8003690:	041a      	lsls	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	619a      	str	r2, [r3, #24]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0cc      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b8:	4b68      	ldr	r3, [pc, #416]	@ (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d90c      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b65      	ldr	r3, [pc, #404]	@ (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	@ (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a58      	ldr	r2, [pc, #352]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a52      	ldr	r2, [pc, #328]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800371a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d044      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d119      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d003      	beq.n	8003762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375e:	2b03      	cmp	r3, #3
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b3f      	ldr	r3, [pc, #252]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	4b3b      	ldr	r3, [pc, #236]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e067      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b37      	ldr	r3, [pc, #220]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4934      	ldr	r1, [pc, #208]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7ff fcc6 	bl	8003124 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7ff fcc2 	bl	8003124 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e04f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b25      	ldr	r3, [pc, #148]	@ (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d20c      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b22      	ldr	r3, [pc, #136]	@ (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	@ (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003816:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f887 	bl	800393c <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	490a      	ldr	r1, [pc, #40]	@ (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	@ (800386c <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fa86 	bl	8002d5c <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023c00 	.word	0x40023c00
 8003860:	40023800 	.word	0x40023800
 8003864:	08008c08 	.word	0x08008c08
 8003868:	20000010 	.word	0x20000010
 800386c:	20000014 	.word	0x20000014

08003870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003874:	4b03      	ldr	r3, [pc, #12]	@ (8003884 <HAL_RCC_GetHCLKFreq+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000010 	.word	0x20000010

08003888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800388c:	f7ff fff0 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8003890:	4602      	mov	r2, r0
 8003892:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	0a9b      	lsrs	r3, r3, #10
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	4903      	ldr	r1, [pc, #12]	@ (80038ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800389e:	5ccb      	ldrb	r3, [r1, r3]
 80038a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40023800 	.word	0x40023800
 80038ac:	08008c18 	.word	0x08008c18

080038b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038b4:	f7ff ffdc 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0b5b      	lsrs	r3, r3, #13
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4903      	ldr	r1, [pc, #12]	@ (80038d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	08008c18 	.word	0x08008c18

080038d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	220f      	movs	r2, #15
 80038e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038e8:	4b12      	ldr	r3, [pc, #72]	@ (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0203 	and.w	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800390c:	4b09      	ldr	r3, [pc, #36]	@ (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	08db      	lsrs	r3, r3, #3
 8003912:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800391a:	4b07      	ldr	r3, [pc, #28]	@ (8003938 <HAL_RCC_GetClockConfig+0x60>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 020f 	and.w	r2, r3, #15
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	601a      	str	r2, [r3, #0]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	40023c00 	.word	0x40023c00

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003940:	b0ae      	sub	sp, #184	@ 0xb8
 8003942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003962:	4bcb      	ldr	r3, [pc, #812]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b0c      	cmp	r3, #12
 800396c:	f200 8206 	bhi.w	8003d7c <HAL_RCC_GetSysClockFreq+0x440>
 8003970:	a201      	add	r2, pc, #4	@ (adr r2, 8003978 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	080039ad 	.word	0x080039ad
 800397c:	08003d7d 	.word	0x08003d7d
 8003980:	08003d7d 	.word	0x08003d7d
 8003984:	08003d7d 	.word	0x08003d7d
 8003988:	080039b5 	.word	0x080039b5
 800398c:	08003d7d 	.word	0x08003d7d
 8003990:	08003d7d 	.word	0x08003d7d
 8003994:	08003d7d 	.word	0x08003d7d
 8003998:	080039bd 	.word	0x080039bd
 800399c:	08003d7d 	.word	0x08003d7d
 80039a0:	08003d7d 	.word	0x08003d7d
 80039a4:	08003d7d 	.word	0x08003d7d
 80039a8:	08003bad 	.word	0x08003bad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ac:	4bb9      	ldr	r3, [pc, #740]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0x358>)
 80039ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80039b2:	e1e7      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039b4:	4bb8      	ldr	r3, [pc, #736]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x35c>)
 80039b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039ba:	e1e3      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039bc:	4bb4      	ldr	r3, [pc, #720]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039c8:	4bb1      	ldr	r3, [pc, #708]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d071      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d4:	4bae      	ldr	r3, [pc, #696]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	099b      	lsrs	r3, r3, #6
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039e0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80039e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039fa:	4622      	mov	r2, r4
 80039fc:	462b      	mov	r3, r5
 80039fe:	f04f 0000 	mov.w	r0, #0
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	0159      	lsls	r1, r3, #5
 8003a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a0c:	0150      	lsls	r0, r2, #5
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4621      	mov	r1, r4
 8003a14:	1a51      	subs	r1, r2, r1
 8003a16:	6439      	str	r1, [r7, #64]	@ 0x40
 8003a18:	4629      	mov	r1, r5
 8003a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	018b      	lsls	r3, r1, #6
 8003a30:	4641      	mov	r1, r8
 8003a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a36:	4641      	mov	r1, r8
 8003a38:	018a      	lsls	r2, r1, #6
 8003a3a:	4641      	mov	r1, r8
 8003a3c:	1a51      	subs	r1, r2, r1
 8003a3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a40:	4649      	mov	r1, r9
 8003a42:	eb63 0301 	sbc.w	r3, r3, r1
 8003a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003a54:	4649      	mov	r1, r9
 8003a56:	00cb      	lsls	r3, r1, #3
 8003a58:	4641      	mov	r1, r8
 8003a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a5e:	4641      	mov	r1, r8
 8003a60:	00ca      	lsls	r2, r1, #3
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	4603      	mov	r3, r0
 8003a68:	4622      	mov	r2, r4
 8003a6a:	189b      	adds	r3, r3, r2
 8003a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a6e:	462b      	mov	r3, r5
 8003a70:	460a      	mov	r2, r1
 8003a72:	eb42 0303 	adc.w	r3, r2, r3
 8003a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a84:	4629      	mov	r1, r5
 8003a86:	024b      	lsls	r3, r1, #9
 8003a88:	4621      	mov	r1, r4
 8003a8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a8e:	4621      	mov	r1, r4
 8003a90:	024a      	lsls	r2, r1, #9
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003aa0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003aa4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003aa8:	f7fd f89e 	bl	8000be8 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ab6:	e067      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab8:	4b75      	ldr	r3, [pc, #468]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ac4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ad6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003ada:	4622      	mov	r2, r4
 8003adc:	462b      	mov	r3, r5
 8003ade:	f04f 0000 	mov.w	r0, #0
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	0159      	lsls	r1, r3, #5
 8003ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aec:	0150      	lsls	r0, r2, #5
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4621      	mov	r1, r4
 8003af4:	1a51      	subs	r1, r2, r1
 8003af6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003af8:	4629      	mov	r1, r5
 8003afa:	eb63 0301 	sbc.w	r3, r3, r1
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	018b      	lsls	r3, r1, #6
 8003b10:	4641      	mov	r1, r8
 8003b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b16:	4641      	mov	r1, r8
 8003b18:	018a      	lsls	r2, r1, #6
 8003b1a:	4641      	mov	r1, r8
 8003b1c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b20:	4649      	mov	r1, r9
 8003b22:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b3a:	4692      	mov	sl, r2
 8003b3c:	469b      	mov	fp, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	eb1a 0303 	adds.w	r3, sl, r3
 8003b44:	623b      	str	r3, [r7, #32]
 8003b46:	462b      	mov	r3, r5
 8003b48:	eb4b 0303 	adc.w	r3, fp, r3
 8003b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	028b      	lsls	r3, r1, #10
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b64:	4621      	mov	r1, r4
 8003b66:	028a      	lsls	r2, r1, #10
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b70:	2200      	movs	r2, #0
 8003b72:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b74:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b7a:	f7fd f835 	bl	8000be8 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4613      	mov	r3, r2
 8003b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b88:	4b41      	ldr	r3, [pc, #260]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	0c1b      	lsrs	r3, r3, #16
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	3301      	adds	r3, #1
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003baa:	e0eb      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bac:	4b38      	ldr	r3, [pc, #224]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb8:	4b35      	ldr	r3, [pc, #212]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d06b      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc4:	4b32      	ldr	r3, [pc, #200]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	099b      	lsrs	r3, r3, #6
 8003bca:	2200      	movs	r2, #0
 8003bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bd8:	2300      	movs	r3, #0
 8003bda:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bdc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003be0:	4622      	mov	r2, r4
 8003be2:	462b      	mov	r3, r5
 8003be4:	f04f 0000 	mov.w	r0, #0
 8003be8:	f04f 0100 	mov.w	r1, #0
 8003bec:	0159      	lsls	r1, r3, #5
 8003bee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf2:	0150      	lsls	r0, r2, #5
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	1a51      	subs	r1, r2, r1
 8003bfc:	61b9      	str	r1, [r7, #24]
 8003bfe:	4629      	mov	r1, r5
 8003c00:	eb63 0301 	sbc.w	r3, r3, r1
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c12:	4659      	mov	r1, fp
 8003c14:	018b      	lsls	r3, r1, #6
 8003c16:	4651      	mov	r1, sl
 8003c18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c1c:	4651      	mov	r1, sl
 8003c1e:	018a      	lsls	r2, r1, #6
 8003c20:	4651      	mov	r1, sl
 8003c22:	ebb2 0801 	subs.w	r8, r2, r1
 8003c26:	4659      	mov	r1, fp
 8003c28:	eb63 0901 	sbc.w	r9, r3, r1
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c40:	4690      	mov	r8, r2
 8003c42:	4699      	mov	r9, r3
 8003c44:	4623      	mov	r3, r4
 8003c46:	eb18 0303 	adds.w	r3, r8, r3
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	462b      	mov	r3, r5
 8003c4e:	eb49 0303 	adc.w	r3, r9, r3
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c60:	4629      	mov	r1, r5
 8003c62:	024b      	lsls	r3, r1, #9
 8003c64:	4621      	mov	r1, r4
 8003c66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	024a      	lsls	r2, r1, #9
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c76:	2200      	movs	r2, #0
 8003c78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c7a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003c7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c80:	f7fc ffb2 	bl	8000be8 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4613      	mov	r3, r2
 8003c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c8e:	e065      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x420>
 8003c90:	40023800 	.word	0x40023800
 8003c94:	00f42400 	.word	0x00f42400
 8003c98:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cac:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cae:	2300      	movs	r3, #0
 8003cb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cb2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003cb6:	4642      	mov	r2, r8
 8003cb8:	464b      	mov	r3, r9
 8003cba:	f04f 0000 	mov.w	r0, #0
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	0159      	lsls	r1, r3, #5
 8003cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc8:	0150      	lsls	r0, r2, #5
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4641      	mov	r1, r8
 8003cd0:	1a51      	subs	r1, r2, r1
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ce8:	4659      	mov	r1, fp
 8003cea:	018b      	lsls	r3, r1, #6
 8003cec:	4651      	mov	r1, sl
 8003cee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	018a      	lsls	r2, r1, #6
 8003cf6:	4651      	mov	r1, sl
 8003cf8:	1a54      	subs	r4, r2, r1
 8003cfa:	4659      	mov	r1, fp
 8003cfc:	eb63 0501 	sbc.w	r5, r3, r1
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	00eb      	lsls	r3, r5, #3
 8003d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0e:	00e2      	lsls	r2, r4, #3
 8003d10:	4614      	mov	r4, r2
 8003d12:	461d      	mov	r5, r3
 8003d14:	4643      	mov	r3, r8
 8003d16:	18e3      	adds	r3, r4, r3
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	eb45 0303 	adc.w	r3, r5, r3
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d2e:	4629      	mov	r1, r5
 8003d30:	028b      	lsls	r3, r1, #10
 8003d32:	4621      	mov	r1, r4
 8003d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d38:	4621      	mov	r1, r4
 8003d3a:	028a      	lsls	r2, r1, #10
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d44:	2200      	movs	r2, #0
 8003d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d48:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003d4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d4e:	f7fc ff4b 	bl	8000be8 <__aeabi_uldivmod>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4613      	mov	r3, r2
 8003d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	0f1b      	lsrs	r3, r3, #28
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d7a:	e003      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	37b8      	adds	r7, #184	@ 0xb8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d92:	bf00      	nop
 8003d94:	40023800 	.word	0x40023800
 8003d98:	00f42400 	.word	0x00f42400

08003d9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e28d      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8083 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003dbc:	4b94      	ldr	r3, [pc, #592]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d019      	beq.n	8003dfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dc8:	4b91      	ldr	r3, [pc, #580]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dd4:	4b8e      	ldr	r3, [pc, #568]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ddc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003de0:	d00c      	beq.n	8003dfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de2:	4b8b      	ldr	r3, [pc, #556]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d112      	bne.n	8003e14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b88      	ldr	r3, [pc, #544]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dfa:	d10b      	bne.n	8003e14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	4b84      	ldr	r3, [pc, #528]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d05b      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x124>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d157      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e25a      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_OscConfig+0x90>
 8003e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a7b      	ldr	r2, [pc, #492]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e01d      	b.n	8003e68 <HAL_RCC_OscConfig+0xcc>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0xb4>
 8003e36:	4b76      	ldr	r3, [pc, #472]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a75      	ldr	r2, [pc, #468]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b73      	ldr	r3, [pc, #460]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a72      	ldr	r2, [pc, #456]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0xcc>
 8003e50:	4b6f      	ldr	r3, [pc, #444]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a6e      	ldr	r2, [pc, #440]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b6c      	ldr	r3, [pc, #432]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a6b      	ldr	r2, [pc, #428]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d013      	beq.n	8003e98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7ff f958 	bl	8003124 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e78:	f7ff f954 	bl	8003124 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	@ 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e21f      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	4b61      	ldr	r3, [pc, #388]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0xdc>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7ff f944 	bl	8003124 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7ff f940 	bl	8003124 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	@ 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e20b      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	4b57      	ldr	r3, [pc, #348]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x104>
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d06f      	beq.n	8003fae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ece:	4b50      	ldr	r3, [pc, #320]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d017      	beq.n	8003f0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eda:	4b4d      	ldr	r3, [pc, #308]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d105      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b47      	ldr	r3, [pc, #284]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b44      	ldr	r3, [pc, #272]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	4b41      	ldr	r3, [pc, #260]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x186>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1d3      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b3b      	ldr	r3, [pc, #236]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4937      	ldr	r1, [pc, #220]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	e03a      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b34      	ldr	r3, [pc, #208]	@ (8004014 <HAL_RCC_OscConfig+0x278>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7ff f8ed 	bl	8003124 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7ff f8e9 	bl	8003124 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e1b4      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	4b2b      	ldr	r3, [pc, #172]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b28      	ldr	r3, [pc, #160]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4925      	ldr	r1, [pc, #148]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e015      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b24      	ldr	r3, [pc, #144]	@ (8004014 <HAL_RCC_OscConfig+0x278>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7ff f8cc 	bl	8003124 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f90:	f7ff f8c8 	bl	8003124 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e193      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d036      	beq.n	8004028 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b15      	ldr	r3, [pc, #84]	@ (8004018 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7ff f8ac 	bl	8003124 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7ff f8a8 	bl	8003124 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e173      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <HAL_RCC_OscConfig+0x274>)
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x234>
 8003fee:	e01b      	b.n	8004028 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff0:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <HAL_RCC_OscConfig+0x27c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff6:	f7ff f895 	bl	8003124 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	e00e      	b.n	800401c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ffe:	f7ff f891 	bl	8003124 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d907      	bls.n	800401c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e15c      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
 8004010:	40023800 	.word	0x40023800
 8004014:	42470000 	.word	0x42470000
 8004018:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800401c:	4b8a      	ldr	r3, [pc, #552]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 800401e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ea      	bne.n	8003ffe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8097 	beq.w	8004164 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403a:	4b83      	ldr	r3, [pc, #524]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10f      	bne.n	8004066 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	4b7f      	ldr	r3, [pc, #508]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	4a7e      	ldr	r2, [pc, #504]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 8004050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004054:	6413      	str	r3, [r2, #64]	@ 0x40
 8004056:	4b7c      	ldr	r3, [pc, #496]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004062:	2301      	movs	r3, #1
 8004064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004066:	4b79      	ldr	r3, [pc, #484]	@ (800424c <HAL_RCC_OscConfig+0x4b0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d118      	bne.n	80040a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004072:	4b76      	ldr	r3, [pc, #472]	@ (800424c <HAL_RCC_OscConfig+0x4b0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a75      	ldr	r2, [pc, #468]	@ (800424c <HAL_RCC_OscConfig+0x4b0>)
 8004078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800407c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800407e:	f7ff f851 	bl	8003124 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004086:	f7ff f84d 	bl	8003124 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e118      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	4b6c      	ldr	r3, [pc, #432]	@ (800424c <HAL_RCC_OscConfig+0x4b0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d106      	bne.n	80040ba <HAL_RCC_OscConfig+0x31e>
 80040ac:	4b66      	ldr	r3, [pc, #408]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b0:	4a65      	ldr	r2, [pc, #404]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b8:	e01c      	b.n	80040f4 <HAL_RCC_OscConfig+0x358>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0x340>
 80040c2:	4b61      	ldr	r3, [pc, #388]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c6:	4a60      	ldr	r2, [pc, #384]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d2:	4a5d      	ldr	r2, [pc, #372]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040da:	e00b      	b.n	80040f4 <HAL_RCC_OscConfig+0x358>
 80040dc:	4b5a      	ldr	r3, [pc, #360]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e0:	4a59      	ldr	r2, [pc, #356]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e8:	4b57      	ldr	r3, [pc, #348]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ec:	4a56      	ldr	r2, [pc, #344]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80040ee:	f023 0304 	bic.w	r3, r3, #4
 80040f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d015      	beq.n	8004128 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7ff f812 	bl	8003124 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004102:	e00a      	b.n	800411a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004104:	f7ff f80e 	bl	8003124 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e0d7      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411a:	4b4b      	ldr	r3, [pc, #300]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0ee      	beq.n	8004104 <HAL_RCC_OscConfig+0x368>
 8004126:	e014      	b.n	8004152 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fe fffc 	bl	8003124 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412e:	e00a      	b.n	8004146 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fe fff8 	bl	8003124 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0c1      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004146:	4b40      	ldr	r3, [pc, #256]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1ee      	bne.n	8004130 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004152:	7dfb      	ldrb	r3, [r7, #23]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d105      	bne.n	8004164 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004158:	4b3b      	ldr	r3, [pc, #236]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 800415a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415c:	4a3a      	ldr	r2, [pc, #232]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 800415e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004162:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80ad 	beq.w	80042c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800416e:	4b36      	ldr	r3, [pc, #216]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b08      	cmp	r3, #8
 8004178:	d060      	beq.n	800423c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d145      	bne.n	800420e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004182:	4b33      	ldr	r3, [pc, #204]	@ (8004250 <HAL_RCC_OscConfig+0x4b4>)
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fe ffcc 	bl	8003124 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004190:	f7fe ffc8 	bl	8003124 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e093      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a2:	4b29      	ldr	r3, [pc, #164]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	019b      	lsls	r3, r3, #6
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c4:	085b      	lsrs	r3, r3, #1
 80041c6:	3b01      	subs	r3, #1
 80041c8:	041b      	lsls	r3, r3, #16
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	061b      	lsls	r3, r3, #24
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	071b      	lsls	r3, r3, #28
 80041da:	491b      	ldr	r1, [pc, #108]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004250 <HAL_RCC_OscConfig+0x4b4>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fe ff9d 	bl	8003124 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fe ff99 	bl	8003124 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e064      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004200:	4b11      	ldr	r3, [pc, #68]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x452>
 800420c:	e05c      	b.n	80042c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420e:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <HAL_RCC_OscConfig+0x4b4>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fe ff86 	bl	8003124 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421c:	f7fe ff82 	bl	8003124 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e04d      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	4b06      	ldr	r3, [pc, #24]	@ (8004248 <HAL_RCC_OscConfig+0x4ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x480>
 800423a:	e045      	b.n	80042c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d107      	bne.n	8004254 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e040      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
 8004248:	40023800 	.word	0x40023800
 800424c:	40007000 	.word	0x40007000
 8004250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004254:	4b1f      	ldr	r3, [pc, #124]	@ (80042d4 <HAL_RCC_OscConfig+0x538>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d030      	beq.n	80042c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d129      	bne.n	80042c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d122      	bne.n	80042c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004284:	4013      	ands	r3, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800428a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800428c:	4293      	cmp	r3, r2
 800428e:	d119      	bne.n	80042c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	3b01      	subs	r3, #1
 800429e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d10f      	bne.n	80042c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800

080042d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e07b      	b.n	80043e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042fa:	d009      	beq.n	8004310 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	61da      	str	r2, [r3, #28]
 8004302:	e005      	b.n	8004310 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fe fc86 	bl	8002c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004346:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004394:	ea42 0103 	orr.w	r1, r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	0c1b      	lsrs	r3, r3, #16
 80043ae:	f003 0104 	and.w	r1, r3, #4
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	f003 0210 	and.w	r2, r3, #16
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b088      	sub	sp, #32
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	603b      	str	r3, [r7, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_SPI_Transmit+0x22>
 8004408:	2302      	movs	r3, #2
 800440a:	e126      	b.n	800465a <HAL_SPI_Transmit+0x270>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004414:	f7fe fe86 	bl	8003124 <HAL_GetTick>
 8004418:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	d002      	beq.n	8004430 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800442a:	2302      	movs	r3, #2
 800442c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800442e:	e10b      	b.n	8004648 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <HAL_SPI_Transmit+0x52>
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004440:	e102      	b.n	8004648 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2203      	movs	r2, #3
 8004446:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	88fa      	ldrh	r2, [r7, #6]
 800445a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004488:	d10f      	bne.n	80044aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b4:	2b40      	cmp	r3, #64	@ 0x40
 80044b6:	d007      	beq.n	80044c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044d0:	d14b      	bne.n	800456a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_SPI_Transmit+0xf6>
 80044da:	8afb      	ldrh	r3, [r7, #22]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d13e      	bne.n	800455e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e4:	881a      	ldrh	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f0:	1c9a      	adds	r2, r3, #2
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004504:	e02b      	b.n	800455e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d112      	bne.n	800453a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004518:	881a      	ldrh	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	1c9a      	adds	r2, r3, #2
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004538:	e011      	b.n	800455e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800453a:	f7fe fdf3 	bl	8003124 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d803      	bhi.n	8004552 <HAL_SPI_Transmit+0x168>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d102      	bne.n	8004558 <HAL_SPI_Transmit+0x16e>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d102      	bne.n	800455e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800455c:	e074      	b.n	8004648 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ce      	bne.n	8004506 <HAL_SPI_Transmit+0x11c>
 8004568:	e04c      	b.n	8004604 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_SPI_Transmit+0x18e>
 8004572:	8afb      	ldrh	r3, [r7, #22]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d140      	bne.n	80045fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	7812      	ldrb	r2, [r2, #0]
 8004584:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800459e:	e02c      	b.n	80045fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d113      	bne.n	80045d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045d4:	e011      	b.n	80045fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045d6:	f7fe fda5 	bl	8003124 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d803      	bhi.n	80045ee <HAL_SPI_Transmit+0x204>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d102      	bne.n	80045f4 <HAL_SPI_Transmit+0x20a>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045f8:	e026      	b.n	8004648 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1cd      	bne.n	80045a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	6839      	ldr	r1, [r7, #0]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fbcb 	bl	8004da4 <SPI_EndRxTxTransaction>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10a      	bne.n	8004638 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e000      	b.n	8004648 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004646:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004658:	7ffb      	ldrb	r3, [r7, #31]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b088      	sub	sp, #32
 8004666:	af02      	add	r7, sp, #8
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	603b      	str	r3, [r7, #0]
 800466e:	4613      	mov	r3, r2
 8004670:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800467e:	d112      	bne.n	80046a6 <HAL_SPI_Receive+0x44>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10e      	bne.n	80046a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2204      	movs	r2, #4
 800468c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004690:	88fa      	ldrh	r2, [r7, #6]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	4613      	mov	r3, r2
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f8f1 	bl	8004884 <HAL_SPI_TransmitReceive>
 80046a2:	4603      	mov	r3, r0
 80046a4:	e0ea      	b.n	800487c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_SPI_Receive+0x52>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e0e3      	b.n	800487c <HAL_SPI_Receive+0x21a>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046bc:	f7fe fd32 	bl	8003124 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d002      	beq.n	80046d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
 80046d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046d2:	e0ca      	b.n	800486a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_SPI_Receive+0x7e>
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d102      	bne.n	80046e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046e4:	e0c1      	b.n	800486a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2204      	movs	r2, #4
 80046ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	88fa      	ldrh	r2, [r7, #6]
 80046fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800472c:	d10f      	bne.n	800474e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800473c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800474c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004758:	2b40      	cmp	r3, #64	@ 0x40
 800475a:	d007      	beq.n	800476c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800476a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d162      	bne.n	800483a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004774:	e02e      	b.n	80047d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b01      	cmp	r3, #1
 8004782:	d115      	bne.n	80047b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f103 020c 	add.w	r2, r3, #12
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004790:	7812      	ldrb	r2, [r2, #0]
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047ae:	e011      	b.n	80047d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047b0:	f7fe fcb8 	bl	8003124 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d803      	bhi.n	80047c8 <HAL_SPI_Receive+0x166>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c6:	d102      	bne.n	80047ce <HAL_SPI_Receive+0x16c>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047d2:	e04a      	b.n	800486a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1cb      	bne.n	8004776 <HAL_SPI_Receive+0x114>
 80047de:	e031      	b.n	8004844 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d113      	bne.n	8004816 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	b292      	uxth	r2, r2
 80047fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004800:	1c9a      	adds	r2, r3, #2
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004814:	e011      	b.n	800483a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004816:	f7fe fc85 	bl	8003124 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d803      	bhi.n	800482e <HAL_SPI_Receive+0x1cc>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d102      	bne.n	8004834 <HAL_SPI_Receive+0x1d2>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004838:	e017      	b.n	800486a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1cd      	bne.n	80047e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fa45 	bl	8004cd8 <SPI_EndRxTransaction>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
 8004866:	e000      	b.n	800486a <HAL_SPI_Receive+0x208>
  }

error :
 8004868:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800487a:	7dfb      	ldrb	r3, [r7, #23]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08c      	sub	sp, #48	@ 0x30
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004892:	2301      	movs	r3, #1
 8004894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_SPI_TransmitReceive+0x26>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e18a      	b.n	8004bc0 <HAL_SPI_TransmitReceive+0x33c>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048b2:	f7fe fc37 	bl	8003124 <HAL_GetTick>
 80048b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80048c8:	887b      	ldrh	r3, [r7, #2]
 80048ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d00f      	beq.n	80048f4 <HAL_SPI_TransmitReceive+0x70>
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048da:	d107      	bne.n	80048ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d103      	bne.n	80048ec <HAL_SPI_TransmitReceive+0x68>
 80048e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d003      	beq.n	80048f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80048f2:	e15b      	b.n	8004bac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_SPI_TransmitReceive+0x82>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_SPI_TransmitReceive+0x82>
 8004900:	887b      	ldrh	r3, [r7, #2]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800490c:	e14e      	b.n	8004bac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b04      	cmp	r3, #4
 8004918:	d003      	beq.n	8004922 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2205      	movs	r2, #5
 800491e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	887a      	ldrh	r2, [r7, #2]
 8004932:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	887a      	ldrh	r2, [r7, #2]
 8004938:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	887a      	ldrh	r2, [r7, #2]
 8004944:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	887a      	ldrh	r2, [r7, #2]
 800494a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004962:	2b40      	cmp	r3, #64	@ 0x40
 8004964:	d007      	beq.n	8004976 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004974:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800497e:	d178      	bne.n	8004a72 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <HAL_SPI_TransmitReceive+0x10a>
 8004988:	8b7b      	ldrh	r3, [r7, #26]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d166      	bne.n	8004a5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499e:	1c9a      	adds	r2, r3, #2
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049b2:	e053      	b.n	8004a5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d11b      	bne.n	80049fa <HAL_SPI_TransmitReceive+0x176>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d016      	beq.n	80049fa <HAL_SPI_TransmitReceive+0x176>
 80049cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d113      	bne.n	80049fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d6:	881a      	ldrh	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e2:	1c9a      	adds	r2, r3, #2
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d119      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x1b8>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d014      	beq.n	8004a3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	b292      	uxth	r2, r2
 8004a1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	1c9a      	adds	r2, r3, #2
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a3c:	f7fe fb72 	bl	8003124 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d807      	bhi.n	8004a5c <HAL_SPI_TransmitReceive+0x1d8>
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a52:	d003      	beq.n	8004a5c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004a5a:	e0a7      	b.n	8004bac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1a6      	bne.n	80049b4 <HAL_SPI_TransmitReceive+0x130>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1a1      	bne.n	80049b4 <HAL_SPI_TransmitReceive+0x130>
 8004a70:	e07c      	b.n	8004b6c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x1fc>
 8004a7a:	8b7b      	ldrh	r3, [r7, #26]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d16b      	bne.n	8004b58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	7812      	ldrb	r2, [r2, #0]
 8004a8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa6:	e057      	b.n	8004b58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d11c      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x26c>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d017      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x26c>
 8004ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d114      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	330c      	adds	r3, #12
 8004ad0:	7812      	ldrb	r2, [r2, #0]
 8004ad2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d119      	bne.n	8004b32 <HAL_SPI_TransmitReceive+0x2ae>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d014      	beq.n	8004b32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b32:	f7fe faf7 	bl	8003124 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d803      	bhi.n	8004b4a <HAL_SPI_TransmitReceive+0x2c6>
 8004b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d102      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x2cc>
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d103      	bne.n	8004b58 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004b56:	e029      	b.n	8004bac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1a2      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x224>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d19d      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f917 	bl	8004da4 <SPI_EndRxTxTransaction>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004b88:	e010      	b.n	8004bac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10b      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	e000      	b.n	8004bac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004baa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004bbc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3730      	adds	r7, #48	@ 0x30
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bd8:	f7fe faa4 	bl	8003124 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	4413      	add	r3, r2
 8004be6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004be8:	f7fe fa9c 	bl	8003124 <HAL_GetTick>
 8004bec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bee:	4b39      	ldr	r3, [pc, #228]	@ (8004cd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	015b      	lsls	r3, r3, #5
 8004bf4:	0d1b      	lsrs	r3, r3, #20
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	fb02 f303 	mul.w	r3, r2, r3
 8004bfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bfe:	e054      	b.n	8004caa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d050      	beq.n	8004caa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c08:	f7fe fa8c 	bl	8003124 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d902      	bls.n	8004c1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d13d      	bne.n	8004c9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c36:	d111      	bne.n	8004c5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c40:	d004      	beq.n	8004c4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c4a:	d107      	bne.n	8004c5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c64:	d10f      	bne.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e017      	b.n	8004cca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	bf0c      	ite	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	2300      	movne	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d19b      	bne.n	8004c00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000010 	.word	0x20000010

08004cd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cec:	d111      	bne.n	8004d12 <SPI_EndRxTransaction+0x3a>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf6:	d004      	beq.n	8004d02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d00:	d107      	bne.n	8004d12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d1a:	d12a      	bne.n	8004d72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d24:	d012      	beq.n	8004d4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2180      	movs	r1, #128	@ 0x80
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7ff ff49 	bl	8004bc8 <SPI_WaitFlagStateUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02d      	beq.n	8004d98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e026      	b.n	8004d9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2200      	movs	r2, #0
 8004d54:	2101      	movs	r1, #1
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff ff36 	bl	8004bc8 <SPI_WaitFlagStateUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01a      	beq.n	8004d98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	f043 0220 	orr.w	r2, r3, #32
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e013      	b.n	8004d9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff ff23 	bl	8004bc8 <SPI_WaitFlagStateUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8c:	f043 0220 	orr.w	r2, r3, #32
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e000      	b.n	8004d9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004db0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e20 <SPI_EndRxTxTransaction+0x7c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e24 <SPI_EndRxTxTransaction+0x80>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	0d5b      	lsrs	r3, r3, #21
 8004dbc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004dc0:	fb02 f303 	mul.w	r3, r2, r3
 8004dc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dce:	d112      	bne.n	8004df6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2180      	movs	r1, #128	@ 0x80
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff fef4 	bl	8004bc8 <SPI_WaitFlagStateUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d016      	beq.n	8004e14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dea:	f043 0220 	orr.w	r2, r3, #32
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e00f      	b.n	8004e16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0c:	2b80      	cmp	r3, #128	@ 0x80
 8004e0e:	d0f2      	beq.n	8004df6 <SPI_EndRxTxTransaction+0x52>
 8004e10:	e000      	b.n	8004e14 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e12:	bf00      	nop
  }

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000010 	.word	0x20000010
 8004e24:	165e9f81 	.word	0x165e9f81

08004e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e041      	b.n	8004ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f839 	bl	8004ec6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f000 f9d8 	bl	800521c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d001      	beq.n	8004ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e04e      	b.n	8004f92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a23      	ldr	r2, [pc, #140]	@ (8004fa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d022      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1e:	d01d      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a1f      	ldr	r2, [pc, #124]	@ (8004fa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d018      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1c      	ldr	r2, [pc, #112]	@ (8004fac <HAL_TIM_Base_Start_IT+0xd0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a19      	ldr	r2, [pc, #100]	@ (8004fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x80>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a18      	ldr	r2, [pc, #96]	@ (8004fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d111      	bne.n	8004f80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b06      	cmp	r3, #6
 8004f6c:	d010      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0201 	orr.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7e:	e007      	b.n	8004f90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800
 8004fac:	40000c00 	.word	0x40000c00
 8004fb0:	40010400 	.word	0x40010400
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40001800 	.word	0x40001800

08004fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d122      	bne.n	8005018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d11b      	bne.n	8005018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0202 	mvn.w	r2, #2
 8004fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f8ee 	bl	80051e0 <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f8e0 	bl	80051cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f8f1 	bl	80051f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b04      	cmp	r3, #4
 8005024:	d122      	bne.n	800506c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b04      	cmp	r3, #4
 8005032:	d11b      	bne.n	800506c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0204 	mvn.w	r2, #4
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f8c4 	bl	80051e0 <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8b6 	bl	80051cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8c7 	bl	80051f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b08      	cmp	r3, #8
 8005078:	d122      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d11b      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0208 	mvn.w	r2, #8
 8005090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2204      	movs	r2, #4
 8005096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f89a 	bl	80051e0 <HAL_TIM_IC_CaptureCallback>
 80050ac:	e005      	b.n	80050ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f88c 	bl	80051cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f89d 	bl	80051f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d122      	bne.n	8005114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d11b      	bne.n	8005114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0210 	mvn.w	r2, #16
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2208      	movs	r2, #8
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f870 	bl	80051e0 <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f862 	bl	80051cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f873 	bl	80051f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d10e      	bne.n	8005140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b01      	cmp	r3, #1
 800512e:	d107      	bne.n	8005140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0201 	mvn.w	r2, #1
 8005138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fd fd3e 	bl	8002bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800514a:	2b80      	cmp	r3, #128	@ 0x80
 800514c:	d10e      	bne.n	800516c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005158:	2b80      	cmp	r3, #128	@ 0x80
 800515a:	d107      	bne.n	800516c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f902 	bl	8005370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005176:	2b40      	cmp	r3, #64	@ 0x40
 8005178:	d10e      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005184:	2b40      	cmp	r3, #64	@ 0x40
 8005186:	d107      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f838 	bl	8005208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d10e      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d107      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0220 	mvn.w	r2, #32
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f8cc 	bl	800535c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a40      	ldr	r2, [pc, #256]	@ (8005330 <TIM_Base_SetConfig+0x114>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d013      	beq.n	800525c <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800523a:	d00f      	beq.n	800525c <TIM_Base_SetConfig+0x40>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a3d      	ldr	r2, [pc, #244]	@ (8005334 <TIM_Base_SetConfig+0x118>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00b      	beq.n	800525c <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a3c      	ldr	r2, [pc, #240]	@ (8005338 <TIM_Base_SetConfig+0x11c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d007      	beq.n	800525c <TIM_Base_SetConfig+0x40>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a3b      	ldr	r2, [pc, #236]	@ (800533c <TIM_Base_SetConfig+0x120>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_Base_SetConfig+0x40>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a3a      	ldr	r2, [pc, #232]	@ (8005340 <TIM_Base_SetConfig+0x124>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d108      	bne.n	800526e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2f      	ldr	r2, [pc, #188]	@ (8005330 <TIM_Base_SetConfig+0x114>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d02b      	beq.n	80052ce <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800527c:	d027      	beq.n	80052ce <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2c      	ldr	r2, [pc, #176]	@ (8005334 <TIM_Base_SetConfig+0x118>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d023      	beq.n	80052ce <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a2b      	ldr	r2, [pc, #172]	@ (8005338 <TIM_Base_SetConfig+0x11c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01f      	beq.n	80052ce <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2a      	ldr	r2, [pc, #168]	@ (800533c <TIM_Base_SetConfig+0x120>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d01b      	beq.n	80052ce <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a29      	ldr	r2, [pc, #164]	@ (8005340 <TIM_Base_SetConfig+0x124>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d017      	beq.n	80052ce <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a28      	ldr	r2, [pc, #160]	@ (8005344 <TIM_Base_SetConfig+0x128>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a27      	ldr	r2, [pc, #156]	@ (8005348 <TIM_Base_SetConfig+0x12c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00f      	beq.n	80052ce <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a26      	ldr	r2, [pc, #152]	@ (800534c <TIM_Base_SetConfig+0x130>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00b      	beq.n	80052ce <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a25      	ldr	r2, [pc, #148]	@ (8005350 <TIM_Base_SetConfig+0x134>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d007      	beq.n	80052ce <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a24      	ldr	r2, [pc, #144]	@ (8005354 <TIM_Base_SetConfig+0x138>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d003      	beq.n	80052ce <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a23      	ldr	r2, [pc, #140]	@ (8005358 <TIM_Base_SetConfig+0x13c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d108      	bne.n	80052e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a0a      	ldr	r2, [pc, #40]	@ (8005330 <TIM_Base_SetConfig+0x114>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d003      	beq.n	8005314 <TIM_Base_SetConfig+0xf8>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a0c      	ldr	r2, [pc, #48]	@ (8005340 <TIM_Base_SetConfig+0x124>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d103      	bne.n	800531c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	615a      	str	r2, [r3, #20]
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40010000 	.word	0x40010000
 8005334:	40000400 	.word	0x40000400
 8005338:	40000800 	.word	0x40000800
 800533c:	40000c00 	.word	0x40000c00
 8005340:	40010400 	.word	0x40010400
 8005344:	40014000 	.word	0x40014000
 8005348:	40014400 	.word	0x40014400
 800534c:	40014800 	.word	0x40014800
 8005350:	40001800 	.word	0x40001800
 8005354:	40001c00 	.word	0x40001c00
 8005358:	40002000 	.word	0x40002000

0800535c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e03f      	b.n	8005416 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fd fc8e 	bl	8002ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2224      	movs	r2, #36	@ 0x24
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f929 	bl	8005620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b08a      	sub	sp, #40	@ 0x28
 8005422:	af02      	add	r7, sp, #8
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	4613      	mov	r3, r2
 800542c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b20      	cmp	r3, #32
 800543c:	d17c      	bne.n	8005538 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <HAL_UART_Transmit+0x2c>
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e075      	b.n	800553a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_UART_Transmit+0x3e>
 8005458:	2302      	movs	r3, #2
 800545a:	e06e      	b.n	800553a <HAL_UART_Transmit+0x11c>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2221      	movs	r2, #33	@ 0x21
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005472:	f7fd fe57 	bl	8003124 <HAL_GetTick>
 8005476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	88fa      	ldrh	r2, [r7, #6]
 800547c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	88fa      	ldrh	r2, [r7, #6]
 8005482:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548c:	d108      	bne.n	80054a0 <HAL_UART_Transmit+0x82>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e003      	b.n	80054a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80054b0:	e02a      	b.n	8005508 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2200      	movs	r2, #0
 80054ba:	2180      	movs	r1, #128	@ 0x80
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f840 	bl	8005542 <UART_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e036      	b.n	800553a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	3302      	adds	r3, #2
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	e007      	b.n	80054fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	3301      	adds	r3, #1
 80054f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1cf      	bne.n	80054b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2200      	movs	r2, #0
 800551a:	2140      	movs	r1, #64	@ 0x40
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f810 	bl	8005542 <UART_WaitOnFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e006      	b.n	800553a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	e000      	b.n	800553a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005538:	2302      	movs	r3, #2
  }
}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b090      	sub	sp, #64	@ 0x40
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	4613      	mov	r3, r2
 8005550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005552:	e050      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d04c      	beq.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800555c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <UART_WaitOnFlagUntilTimeout+0x30>
 8005562:	f7fd fddf 	bl	8003124 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800556e:	429a      	cmp	r2, r3
 8005570:	d241      	bcs.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005588:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005592:	637a      	str	r2, [r7, #52]	@ 0x34
 8005594:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005598:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80055a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3314      	adds	r3, #20
 80055ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	613b      	str	r3, [r7, #16]
   return(result);
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3314      	adds	r3, #20
 80055c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055c6:	623a      	str	r2, [r7, #32]
 80055c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	69f9      	ldr	r1, [r7, #28]
 80055cc:	6a3a      	ldr	r2, [r7, #32]
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e5      	bne.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e00f      	b.n	8005616 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4013      	ands	r3, r2
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	429a      	cmp	r2, r3
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	429a      	cmp	r2, r3
 8005612:	d09f      	beq.n	8005554 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3740      	adds	r7, #64	@ 0x40
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005624:	b0c0      	sub	sp, #256	@ 0x100
 8005626:	af00      	add	r7, sp, #0
 8005628:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563c:	68d9      	ldr	r1, [r3, #12]
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	ea40 0301 	orr.w	r3, r0, r1
 8005648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800564a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	431a      	orrs	r2, r3
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	431a      	orrs	r2, r3
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005678:	f021 010c 	bic.w	r1, r1, #12
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005686:	430b      	orrs	r3, r1
 8005688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569a:	6999      	ldr	r1, [r3, #24]
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	ea40 0301 	orr.w	r3, r0, r1
 80056a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b8f      	ldr	r3, [pc, #572]	@ (80058ec <UART_SetConfig+0x2cc>)
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d005      	beq.n	80056c0 <UART_SetConfig+0xa0>
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4b8d      	ldr	r3, [pc, #564]	@ (80058f0 <UART_SetConfig+0x2d0>)
 80056bc:	429a      	cmp	r2, r3
 80056be:	d104      	bne.n	80056ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056c0:	f7fe f8f6 	bl	80038b0 <HAL_RCC_GetPCLK2Freq>
 80056c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056c8:	e003      	b.n	80056d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056ca:	f7fe f8dd 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 80056ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056dc:	f040 810c 	bne.w	80058f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056f2:	4622      	mov	r2, r4
 80056f4:	462b      	mov	r3, r5
 80056f6:	1891      	adds	r1, r2, r2
 80056f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056fa:	415b      	adcs	r3, r3
 80056fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005702:	4621      	mov	r1, r4
 8005704:	eb12 0801 	adds.w	r8, r2, r1
 8005708:	4629      	mov	r1, r5
 800570a:	eb43 0901 	adc.w	r9, r3, r1
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800571a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800571e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005722:	4690      	mov	r8, r2
 8005724:	4699      	mov	r9, r3
 8005726:	4623      	mov	r3, r4
 8005728:	eb18 0303 	adds.w	r3, r8, r3
 800572c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005730:	462b      	mov	r3, r5
 8005732:	eb49 0303 	adc.w	r3, r9, r3
 8005736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005746:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800574a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800574e:	460b      	mov	r3, r1
 8005750:	18db      	adds	r3, r3, r3
 8005752:	653b      	str	r3, [r7, #80]	@ 0x50
 8005754:	4613      	mov	r3, r2
 8005756:	eb42 0303 	adc.w	r3, r2, r3
 800575a:	657b      	str	r3, [r7, #84]	@ 0x54
 800575c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005760:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005764:	f7fb fa40 	bl	8000be8 <__aeabi_uldivmod>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4b61      	ldr	r3, [pc, #388]	@ (80058f4 <UART_SetConfig+0x2d4>)
 800576e:	fba3 2302 	umull	r2, r3, r3, r2
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	011c      	lsls	r4, r3, #4
 8005776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800577a:	2200      	movs	r2, #0
 800577c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005780:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005784:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005788:	4642      	mov	r2, r8
 800578a:	464b      	mov	r3, r9
 800578c:	1891      	adds	r1, r2, r2
 800578e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005790:	415b      	adcs	r3, r3
 8005792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005794:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005798:	4641      	mov	r1, r8
 800579a:	eb12 0a01 	adds.w	sl, r2, r1
 800579e:	4649      	mov	r1, r9
 80057a0:	eb43 0b01 	adc.w	fp, r3, r1
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057b8:	4692      	mov	sl, r2
 80057ba:	469b      	mov	fp, r3
 80057bc:	4643      	mov	r3, r8
 80057be:	eb1a 0303 	adds.w	r3, sl, r3
 80057c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057c6:	464b      	mov	r3, r9
 80057c8:	eb4b 0303 	adc.w	r3, fp, r3
 80057cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057e4:	460b      	mov	r3, r1
 80057e6:	18db      	adds	r3, r3, r3
 80057e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057ea:	4613      	mov	r3, r2
 80057ec:	eb42 0303 	adc.w	r3, r2, r3
 80057f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80057f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057fa:	f7fb f9f5 	bl	8000be8 <__aeabi_uldivmod>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4611      	mov	r1, r2
 8005804:	4b3b      	ldr	r3, [pc, #236]	@ (80058f4 <UART_SetConfig+0x2d4>)
 8005806:	fba3 2301 	umull	r2, r3, r3, r1
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	2264      	movs	r2, #100	@ 0x64
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	1acb      	subs	r3, r1, r3
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800581a:	4b36      	ldr	r3, [pc, #216]	@ (80058f4 <UART_SetConfig+0x2d4>)
 800581c:	fba3 2302 	umull	r2, r3, r3, r2
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005828:	441c      	add	r4, r3
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800582e:	2200      	movs	r2, #0
 8005830:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005834:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005838:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800583c:	4642      	mov	r2, r8
 800583e:	464b      	mov	r3, r9
 8005840:	1891      	adds	r1, r2, r2
 8005842:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005844:	415b      	adcs	r3, r3
 8005846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800584c:	4641      	mov	r1, r8
 800584e:	1851      	adds	r1, r2, r1
 8005850:	6339      	str	r1, [r7, #48]	@ 0x30
 8005852:	4649      	mov	r1, r9
 8005854:	414b      	adcs	r3, r1
 8005856:	637b      	str	r3, [r7, #52]	@ 0x34
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005864:	4659      	mov	r1, fp
 8005866:	00cb      	lsls	r3, r1, #3
 8005868:	4651      	mov	r1, sl
 800586a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800586e:	4651      	mov	r1, sl
 8005870:	00ca      	lsls	r2, r1, #3
 8005872:	4610      	mov	r0, r2
 8005874:	4619      	mov	r1, r3
 8005876:	4603      	mov	r3, r0
 8005878:	4642      	mov	r2, r8
 800587a:	189b      	adds	r3, r3, r2
 800587c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005880:	464b      	mov	r3, r9
 8005882:	460a      	mov	r2, r1
 8005884:	eb42 0303 	adc.w	r3, r2, r3
 8005888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005898:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800589c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058a0:	460b      	mov	r3, r1
 80058a2:	18db      	adds	r3, r3, r3
 80058a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058a6:	4613      	mov	r3, r2
 80058a8:	eb42 0303 	adc.w	r3, r2, r3
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058b6:	f7fb f997 	bl	8000be8 <__aeabi_uldivmod>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <UART_SetConfig+0x2d4>)
 80058c0:	fba3 1302 	umull	r1, r3, r3, r2
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	2164      	movs	r1, #100	@ 0x64
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	3332      	adds	r3, #50	@ 0x32
 80058d2:	4a08      	ldr	r2, [pc, #32]	@ (80058f4 <UART_SetConfig+0x2d4>)
 80058d4:	fba2 2303 	umull	r2, r3, r2, r3
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	f003 0207 	and.w	r2, r3, #7
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4422      	add	r2, r4
 80058e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058e8:	e106      	b.n	8005af8 <UART_SetConfig+0x4d8>
 80058ea:	bf00      	nop
 80058ec:	40011000 	.word	0x40011000
 80058f0:	40011400 	.word	0x40011400
 80058f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005902:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005906:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800590a:	4642      	mov	r2, r8
 800590c:	464b      	mov	r3, r9
 800590e:	1891      	adds	r1, r2, r2
 8005910:	6239      	str	r1, [r7, #32]
 8005912:	415b      	adcs	r3, r3
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
 8005916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800591a:	4641      	mov	r1, r8
 800591c:	1854      	adds	r4, r2, r1
 800591e:	4649      	mov	r1, r9
 8005920:	eb43 0501 	adc.w	r5, r3, r1
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	00eb      	lsls	r3, r5, #3
 800592e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005932:	00e2      	lsls	r2, r4, #3
 8005934:	4614      	mov	r4, r2
 8005936:	461d      	mov	r5, r3
 8005938:	4643      	mov	r3, r8
 800593a:	18e3      	adds	r3, r4, r3
 800593c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005940:	464b      	mov	r3, r9
 8005942:	eb45 0303 	adc.w	r3, r5, r3
 8005946:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800594a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005956:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005966:	4629      	mov	r1, r5
 8005968:	008b      	lsls	r3, r1, #2
 800596a:	4621      	mov	r1, r4
 800596c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005970:	4621      	mov	r1, r4
 8005972:	008a      	lsls	r2, r1, #2
 8005974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005978:	f7fb f936 	bl	8000be8 <__aeabi_uldivmod>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4b60      	ldr	r3, [pc, #384]	@ (8005b04 <UART_SetConfig+0x4e4>)
 8005982:	fba3 2302 	umull	r2, r3, r3, r2
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	011c      	lsls	r4, r3, #4
 800598a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800598e:	2200      	movs	r2, #0
 8005990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005994:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005998:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800599c:	4642      	mov	r2, r8
 800599e:	464b      	mov	r3, r9
 80059a0:	1891      	adds	r1, r2, r2
 80059a2:	61b9      	str	r1, [r7, #24]
 80059a4:	415b      	adcs	r3, r3
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ac:	4641      	mov	r1, r8
 80059ae:	1851      	adds	r1, r2, r1
 80059b0:	6139      	str	r1, [r7, #16]
 80059b2:	4649      	mov	r1, r9
 80059b4:	414b      	adcs	r3, r1
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059c4:	4659      	mov	r1, fp
 80059c6:	00cb      	lsls	r3, r1, #3
 80059c8:	4651      	mov	r1, sl
 80059ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ce:	4651      	mov	r1, sl
 80059d0:	00ca      	lsls	r2, r1, #3
 80059d2:	4610      	mov	r0, r2
 80059d4:	4619      	mov	r1, r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	4642      	mov	r2, r8
 80059da:	189b      	adds	r3, r3, r2
 80059dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059e0:	464b      	mov	r3, r9
 80059e2:	460a      	mov	r2, r1
 80059e4:	eb42 0303 	adc.w	r3, r2, r3
 80059e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a04:	4649      	mov	r1, r9
 8005a06:	008b      	lsls	r3, r1, #2
 8005a08:	4641      	mov	r1, r8
 8005a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a0e:	4641      	mov	r1, r8
 8005a10:	008a      	lsls	r2, r1, #2
 8005a12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a16:	f7fb f8e7 	bl	8000be8 <__aeabi_uldivmod>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4b38      	ldr	r3, [pc, #224]	@ (8005b04 <UART_SetConfig+0x4e4>)
 8005a22:	fba3 2301 	umull	r2, r3, r3, r1
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	2264      	movs	r2, #100	@ 0x64
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	1acb      	subs	r3, r1, r3
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	3332      	adds	r3, #50	@ 0x32
 8005a34:	4a33      	ldr	r2, [pc, #204]	@ (8005b04 <UART_SetConfig+0x4e4>)
 8005a36:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a40:	441c      	add	r4, r3
 8005a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a46:	2200      	movs	r2, #0
 8005a48:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a50:	4642      	mov	r2, r8
 8005a52:	464b      	mov	r3, r9
 8005a54:	1891      	adds	r1, r2, r2
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	415b      	adcs	r3, r3
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a60:	4641      	mov	r1, r8
 8005a62:	1851      	adds	r1, r2, r1
 8005a64:	6039      	str	r1, [r7, #0]
 8005a66:	4649      	mov	r1, r9
 8005a68:	414b      	adcs	r3, r1
 8005a6a:	607b      	str	r3, [r7, #4]
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a78:	4659      	mov	r1, fp
 8005a7a:	00cb      	lsls	r3, r1, #3
 8005a7c:	4651      	mov	r1, sl
 8005a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a82:	4651      	mov	r1, sl
 8005a84:	00ca      	lsls	r2, r1, #3
 8005a86:	4610      	mov	r0, r2
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	189b      	adds	r3, r3, r2
 8005a90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a92:	464b      	mov	r3, r9
 8005a94:	460a      	mov	r2, r1
 8005a96:	eb42 0303 	adc.w	r3, r2, r3
 8005a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005aa6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	008b      	lsls	r3, r1, #2
 8005ab8:	4641      	mov	r1, r8
 8005aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005abe:	4641      	mov	r1, r8
 8005ac0:	008a      	lsls	r2, r1, #2
 8005ac2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ac6:	f7fb f88f 	bl	8000be8 <__aeabi_uldivmod>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4b0d      	ldr	r3, [pc, #52]	@ (8005b04 <UART_SetConfig+0x4e4>)
 8005ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad4:	095b      	lsrs	r3, r3, #5
 8005ad6:	2164      	movs	r1, #100	@ 0x64
 8005ad8:	fb01 f303 	mul.w	r3, r1, r3
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	3332      	adds	r3, #50	@ 0x32
 8005ae2:	4a08      	ldr	r2, [pc, #32]	@ (8005b04 <UART_SetConfig+0x4e4>)
 8005ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	f003 020f 	and.w	r2, r3, #15
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4422      	add	r2, r4
 8005af6:	609a      	str	r2, [r3, #8]
}
 8005af8:	bf00      	nop
 8005afa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005afe:	46bd      	mov	sp, r7
 8005b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b04:	51eb851f 	.word	0x51eb851f

08005b08 <malloc>:
 8005b08:	4b02      	ldr	r3, [pc, #8]	@ (8005b14 <malloc+0xc>)
 8005b0a:	4601      	mov	r1, r0
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	f000 b82d 	b.w	8005b6c <_malloc_r>
 8005b12:	bf00      	nop
 8005b14:	20000028 	.word	0x20000028

08005b18 <free>:
 8005b18:	4b02      	ldr	r3, [pc, #8]	@ (8005b24 <free+0xc>)
 8005b1a:	4601      	mov	r1, r0
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	f001 bd1b 	b.w	8007558 <_free_r>
 8005b22:	bf00      	nop
 8005b24:	20000028 	.word	0x20000028

08005b28 <sbrk_aligned>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4e0f      	ldr	r6, [pc, #60]	@ (8005b68 <sbrk_aligned+0x40>)
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	6831      	ldr	r1, [r6, #0]
 8005b30:	4605      	mov	r5, r0
 8005b32:	b911      	cbnz	r1, 8005b3a <sbrk_aligned+0x12>
 8005b34:	f000 fe64 	bl	8006800 <_sbrk_r>
 8005b38:	6030      	str	r0, [r6, #0]
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f000 fe5f 	bl	8006800 <_sbrk_r>
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	d103      	bne.n	8005b4e <sbrk_aligned+0x26>
 8005b46:	f04f 34ff 	mov.w	r4, #4294967295
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	bd70      	pop	{r4, r5, r6, pc}
 8005b4e:	1cc4      	adds	r4, r0, #3
 8005b50:	f024 0403 	bic.w	r4, r4, #3
 8005b54:	42a0      	cmp	r0, r4
 8005b56:	d0f8      	beq.n	8005b4a <sbrk_aligned+0x22>
 8005b58:	1a21      	subs	r1, r4, r0
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 fe50 	bl	8006800 <_sbrk_r>
 8005b60:	3001      	adds	r0, #1
 8005b62:	d1f2      	bne.n	8005b4a <sbrk_aligned+0x22>
 8005b64:	e7ef      	b.n	8005b46 <sbrk_aligned+0x1e>
 8005b66:	bf00      	nop
 8005b68:	200004c4 	.word	0x200004c4

08005b6c <_malloc_r>:
 8005b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b70:	1ccd      	adds	r5, r1, #3
 8005b72:	f025 0503 	bic.w	r5, r5, #3
 8005b76:	3508      	adds	r5, #8
 8005b78:	2d0c      	cmp	r5, #12
 8005b7a:	bf38      	it	cc
 8005b7c:	250c      	movcc	r5, #12
 8005b7e:	2d00      	cmp	r5, #0
 8005b80:	4606      	mov	r6, r0
 8005b82:	db01      	blt.n	8005b88 <_malloc_r+0x1c>
 8005b84:	42a9      	cmp	r1, r5
 8005b86:	d904      	bls.n	8005b92 <_malloc_r+0x26>
 8005b88:	230c      	movs	r3, #12
 8005b8a:	6033      	str	r3, [r6, #0]
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c68 <_malloc_r+0xfc>
 8005b96:	f000 f869 	bl	8005c6c <__malloc_lock>
 8005b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b9e:	461c      	mov	r4, r3
 8005ba0:	bb44      	cbnz	r4, 8005bf4 <_malloc_r+0x88>
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	f7ff ffbf 	bl	8005b28 <sbrk_aligned>
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	4604      	mov	r4, r0
 8005bae:	d158      	bne.n	8005c62 <_malloc_r+0xf6>
 8005bb0:	f8d8 4000 	ldr.w	r4, [r8]
 8005bb4:	4627      	mov	r7, r4
 8005bb6:	2f00      	cmp	r7, #0
 8005bb8:	d143      	bne.n	8005c42 <_malloc_r+0xd6>
 8005bba:	2c00      	cmp	r4, #0
 8005bbc:	d04b      	beq.n	8005c56 <_malloc_r+0xea>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	eb04 0903 	add.w	r9, r4, r3
 8005bc8:	f000 fe1a 	bl	8006800 <_sbrk_r>
 8005bcc:	4581      	cmp	r9, r0
 8005bce:	d142      	bne.n	8005c56 <_malloc_r+0xea>
 8005bd0:	6821      	ldr	r1, [r4, #0]
 8005bd2:	1a6d      	subs	r5, r5, r1
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f7ff ffa6 	bl	8005b28 <sbrk_aligned>
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d03a      	beq.n	8005c56 <_malloc_r+0xea>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	442b      	add	r3, r5
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	bb62      	cbnz	r2, 8005c48 <_malloc_r+0xdc>
 8005bee:	f8c8 7000 	str.w	r7, [r8]
 8005bf2:	e00f      	b.n	8005c14 <_malloc_r+0xa8>
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	1b52      	subs	r2, r2, r5
 8005bf8:	d420      	bmi.n	8005c3c <_malloc_r+0xd0>
 8005bfa:	2a0b      	cmp	r2, #11
 8005bfc:	d917      	bls.n	8005c2e <_malloc_r+0xc2>
 8005bfe:	1961      	adds	r1, r4, r5
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	6025      	str	r5, [r4, #0]
 8005c04:	bf18      	it	ne
 8005c06:	6059      	strne	r1, [r3, #4]
 8005c08:	6863      	ldr	r3, [r4, #4]
 8005c0a:	bf08      	it	eq
 8005c0c:	f8c8 1000 	streq.w	r1, [r8]
 8005c10:	5162      	str	r2, [r4, r5]
 8005c12:	604b      	str	r3, [r1, #4]
 8005c14:	4630      	mov	r0, r6
 8005c16:	f000 f82f 	bl	8005c78 <__malloc_unlock>
 8005c1a:	f104 000b 	add.w	r0, r4, #11
 8005c1e:	1d23      	adds	r3, r4, #4
 8005c20:	f020 0007 	bic.w	r0, r0, #7
 8005c24:	1ac2      	subs	r2, r0, r3
 8005c26:	bf1c      	itt	ne
 8005c28:	1a1b      	subne	r3, r3, r0
 8005c2a:	50a3      	strne	r3, [r4, r2]
 8005c2c:	e7af      	b.n	8005b8e <_malloc_r+0x22>
 8005c2e:	6862      	ldr	r2, [r4, #4]
 8005c30:	42a3      	cmp	r3, r4
 8005c32:	bf0c      	ite	eq
 8005c34:	f8c8 2000 	streq.w	r2, [r8]
 8005c38:	605a      	strne	r2, [r3, #4]
 8005c3a:	e7eb      	b.n	8005c14 <_malloc_r+0xa8>
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	6864      	ldr	r4, [r4, #4]
 8005c40:	e7ae      	b.n	8005ba0 <_malloc_r+0x34>
 8005c42:	463c      	mov	r4, r7
 8005c44:	687f      	ldr	r7, [r7, #4]
 8005c46:	e7b6      	b.n	8005bb6 <_malloc_r+0x4a>
 8005c48:	461a      	mov	r2, r3
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	d1fb      	bne.n	8005c48 <_malloc_r+0xdc>
 8005c50:	2300      	movs	r3, #0
 8005c52:	6053      	str	r3, [r2, #4]
 8005c54:	e7de      	b.n	8005c14 <_malloc_r+0xa8>
 8005c56:	230c      	movs	r3, #12
 8005c58:	6033      	str	r3, [r6, #0]
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f000 f80c 	bl	8005c78 <__malloc_unlock>
 8005c60:	e794      	b.n	8005b8c <_malloc_r+0x20>
 8005c62:	6005      	str	r5, [r0, #0]
 8005c64:	e7d6      	b.n	8005c14 <_malloc_r+0xa8>
 8005c66:	bf00      	nop
 8005c68:	200004c8 	.word	0x200004c8

08005c6c <__malloc_lock>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	@ (8005c74 <__malloc_lock+0x8>)
 8005c6e:	f000 be14 	b.w	800689a <__retarget_lock_acquire_recursive>
 8005c72:	bf00      	nop
 8005c74:	2000060c 	.word	0x2000060c

08005c78 <__malloc_unlock>:
 8005c78:	4801      	ldr	r0, [pc, #4]	@ (8005c80 <__malloc_unlock+0x8>)
 8005c7a:	f000 be0f 	b.w	800689c <__retarget_lock_release_recursive>
 8005c7e:	bf00      	nop
 8005c80:	2000060c 	.word	0x2000060c

08005c84 <__cvt>:
 8005c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c88:	ec57 6b10 	vmov	r6, r7, d0
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	4619      	mov	r1, r3
 8005c92:	463b      	mov	r3, r7
 8005c94:	bfbb      	ittet	lt
 8005c96:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c9a:	461f      	movlt	r7, r3
 8005c9c:	2300      	movge	r3, #0
 8005c9e:	232d      	movlt	r3, #45	@ 0x2d
 8005ca0:	700b      	strb	r3, [r1, #0]
 8005ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ca4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ca8:	4691      	mov	r9, r2
 8005caa:	f023 0820 	bic.w	r8, r3, #32
 8005cae:	bfbc      	itt	lt
 8005cb0:	4632      	movlt	r2, r6
 8005cb2:	4616      	movlt	r6, r2
 8005cb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005cb8:	d005      	beq.n	8005cc6 <__cvt+0x42>
 8005cba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005cbe:	d100      	bne.n	8005cc2 <__cvt+0x3e>
 8005cc0:	3401      	adds	r4, #1
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	e000      	b.n	8005cc8 <__cvt+0x44>
 8005cc6:	2103      	movs	r1, #3
 8005cc8:	ab03      	add	r3, sp, #12
 8005cca:	9301      	str	r3, [sp, #4]
 8005ccc:	ab02      	add	r3, sp, #8
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	ec47 6b10 	vmov	d0, r6, r7
 8005cd4:	4653      	mov	r3, sl
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	f000 fe7a 	bl	80069d0 <_dtoa_r>
 8005cdc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	d119      	bne.n	8005d18 <__cvt+0x94>
 8005ce4:	f019 0f01 	tst.w	r9, #1
 8005ce8:	d00e      	beq.n	8005d08 <__cvt+0x84>
 8005cea:	eb00 0904 	add.w	r9, r0, r4
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	4639      	mov	r1, r7
 8005cf6:	f7fa ff07 	bl	8000b08 <__aeabi_dcmpeq>
 8005cfa:	b108      	cbz	r0, 8005d00 <__cvt+0x7c>
 8005cfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d00:	2230      	movs	r2, #48	@ 0x30
 8005d02:	9b03      	ldr	r3, [sp, #12]
 8005d04:	454b      	cmp	r3, r9
 8005d06:	d31e      	bcc.n	8005d46 <__cvt+0xc2>
 8005d08:	9b03      	ldr	r3, [sp, #12]
 8005d0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d0c:	1b5b      	subs	r3, r3, r5
 8005d0e:	4628      	mov	r0, r5
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	b004      	add	sp, #16
 8005d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d1c:	eb00 0904 	add.w	r9, r0, r4
 8005d20:	d1e5      	bne.n	8005cee <__cvt+0x6a>
 8005d22:	7803      	ldrb	r3, [r0, #0]
 8005d24:	2b30      	cmp	r3, #48	@ 0x30
 8005d26:	d10a      	bne.n	8005d3e <__cvt+0xba>
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	4639      	mov	r1, r7
 8005d30:	f7fa feea 	bl	8000b08 <__aeabi_dcmpeq>
 8005d34:	b918      	cbnz	r0, 8005d3e <__cvt+0xba>
 8005d36:	f1c4 0401 	rsb	r4, r4, #1
 8005d3a:	f8ca 4000 	str.w	r4, [sl]
 8005d3e:	f8da 3000 	ldr.w	r3, [sl]
 8005d42:	4499      	add	r9, r3
 8005d44:	e7d3      	b.n	8005cee <__cvt+0x6a>
 8005d46:	1c59      	adds	r1, r3, #1
 8005d48:	9103      	str	r1, [sp, #12]
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e7d9      	b.n	8005d02 <__cvt+0x7e>

08005d4e <__exponent>:
 8005d4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d50:	2900      	cmp	r1, #0
 8005d52:	bfba      	itte	lt
 8005d54:	4249      	neglt	r1, r1
 8005d56:	232d      	movlt	r3, #45	@ 0x2d
 8005d58:	232b      	movge	r3, #43	@ 0x2b
 8005d5a:	2909      	cmp	r1, #9
 8005d5c:	7002      	strb	r2, [r0, #0]
 8005d5e:	7043      	strb	r3, [r0, #1]
 8005d60:	dd29      	ble.n	8005db6 <__exponent+0x68>
 8005d62:	f10d 0307 	add.w	r3, sp, #7
 8005d66:	461d      	mov	r5, r3
 8005d68:	270a      	movs	r7, #10
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d70:	fb07 1416 	mls	r4, r7, r6, r1
 8005d74:	3430      	adds	r4, #48	@ 0x30
 8005d76:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	2c63      	cmp	r4, #99	@ 0x63
 8005d7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d82:	4631      	mov	r1, r6
 8005d84:	dcf1      	bgt.n	8005d6a <__exponent+0x1c>
 8005d86:	3130      	adds	r1, #48	@ 0x30
 8005d88:	1e94      	subs	r4, r2, #2
 8005d8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d8e:	1c41      	adds	r1, r0, #1
 8005d90:	4623      	mov	r3, r4
 8005d92:	42ab      	cmp	r3, r5
 8005d94:	d30a      	bcc.n	8005dac <__exponent+0x5e>
 8005d96:	f10d 0309 	add.w	r3, sp, #9
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	42ac      	cmp	r4, r5
 8005d9e:	bf88      	it	hi
 8005da0:	2300      	movhi	r3, #0
 8005da2:	3302      	adds	r3, #2
 8005da4:	4403      	add	r3, r0
 8005da6:	1a18      	subs	r0, r3, r0
 8005da8:	b003      	add	sp, #12
 8005daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dac:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005db0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005db4:	e7ed      	b.n	8005d92 <__exponent+0x44>
 8005db6:	2330      	movs	r3, #48	@ 0x30
 8005db8:	3130      	adds	r1, #48	@ 0x30
 8005dba:	7083      	strb	r3, [r0, #2]
 8005dbc:	70c1      	strb	r1, [r0, #3]
 8005dbe:	1d03      	adds	r3, r0, #4
 8005dc0:	e7f1      	b.n	8005da6 <__exponent+0x58>
	...

08005dc4 <_printf_float>:
 8005dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	b08d      	sub	sp, #52	@ 0x34
 8005dca:	460c      	mov	r4, r1
 8005dcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005dd0:	4616      	mov	r6, r2
 8005dd2:	461f      	mov	r7, r3
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	f000 fcdb 	bl	8006790 <_localeconv_r>
 8005dda:	6803      	ldr	r3, [r0, #0]
 8005ddc:	9304      	str	r3, [sp, #16]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fa fa66 	bl	80002b0 <strlen>
 8005de4:	2300      	movs	r3, #0
 8005de6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005de8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dec:	9005      	str	r0, [sp, #20]
 8005dee:	3307      	adds	r3, #7
 8005df0:	f023 0307 	bic.w	r3, r3, #7
 8005df4:	f103 0208 	add.w	r2, r3, #8
 8005df8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005dfc:	f8d4 b000 	ldr.w	fp, [r4]
 8005e00:	f8c8 2000 	str.w	r2, [r8]
 8005e04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e0c:	9307      	str	r3, [sp, #28]
 8005e0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e1a:	4b9c      	ldr	r3, [pc, #624]	@ (800608c <_printf_float+0x2c8>)
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e20:	f7fa fea4 	bl	8000b6c <__aeabi_dcmpun>
 8005e24:	bb70      	cbnz	r0, 8005e84 <_printf_float+0xc0>
 8005e26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e2a:	4b98      	ldr	r3, [pc, #608]	@ (800608c <_printf_float+0x2c8>)
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	f7fa fe7e 	bl	8000b30 <__aeabi_dcmple>
 8005e34:	bb30      	cbnz	r0, 8005e84 <_printf_float+0xc0>
 8005e36:	2200      	movs	r2, #0
 8005e38:	2300      	movs	r3, #0
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	f7fa fe6d 	bl	8000b1c <__aeabi_dcmplt>
 8005e42:	b110      	cbz	r0, 8005e4a <_printf_float+0x86>
 8005e44:	232d      	movs	r3, #45	@ 0x2d
 8005e46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e4a:	4a91      	ldr	r2, [pc, #580]	@ (8006090 <_printf_float+0x2cc>)
 8005e4c:	4b91      	ldr	r3, [pc, #580]	@ (8006094 <_printf_float+0x2d0>)
 8005e4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005e52:	bf94      	ite	ls
 8005e54:	4690      	movls	r8, r2
 8005e56:	4698      	movhi	r8, r3
 8005e58:	2303      	movs	r3, #3
 8005e5a:	6123      	str	r3, [r4, #16]
 8005e5c:	f02b 0304 	bic.w	r3, fp, #4
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	f04f 0900 	mov.w	r9, #0
 8005e66:	9700      	str	r7, [sp, #0]
 8005e68:	4633      	mov	r3, r6
 8005e6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 f9d2 	bl	8006218 <_printf_common>
 8005e74:	3001      	adds	r0, #1
 8005e76:	f040 808d 	bne.w	8005f94 <_printf_float+0x1d0>
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7e:	b00d      	add	sp, #52	@ 0x34
 8005e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e84:	4642      	mov	r2, r8
 8005e86:	464b      	mov	r3, r9
 8005e88:	4640      	mov	r0, r8
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	f7fa fe6e 	bl	8000b6c <__aeabi_dcmpun>
 8005e90:	b140      	cbz	r0, 8005ea4 <_printf_float+0xe0>
 8005e92:	464b      	mov	r3, r9
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bfbc      	itt	lt
 8005e98:	232d      	movlt	r3, #45	@ 0x2d
 8005e9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8006098 <_printf_float+0x2d4>)
 8005ea0:	4b7e      	ldr	r3, [pc, #504]	@ (800609c <_printf_float+0x2d8>)
 8005ea2:	e7d4      	b.n	8005e4e <_printf_float+0x8a>
 8005ea4:	6863      	ldr	r3, [r4, #4]
 8005ea6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005eaa:	9206      	str	r2, [sp, #24]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	d13b      	bne.n	8005f28 <_printf_float+0x164>
 8005eb0:	2306      	movs	r3, #6
 8005eb2:	6063      	str	r3, [r4, #4]
 8005eb4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005eb8:	2300      	movs	r3, #0
 8005eba:	6022      	str	r2, [r4, #0]
 8005ebc:	9303      	str	r3, [sp, #12]
 8005ebe:	ab0a      	add	r3, sp, #40	@ 0x28
 8005ec0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005ec4:	ab09      	add	r3, sp, #36	@ 0x24
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	6861      	ldr	r1, [r4, #4]
 8005eca:	ec49 8b10 	vmov	d0, r8, r9
 8005ece:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f7ff fed6 	bl	8005c84 <__cvt>
 8005ed8:	9b06      	ldr	r3, [sp, #24]
 8005eda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005edc:	2b47      	cmp	r3, #71	@ 0x47
 8005ede:	4680      	mov	r8, r0
 8005ee0:	d129      	bne.n	8005f36 <_printf_float+0x172>
 8005ee2:	1cc8      	adds	r0, r1, #3
 8005ee4:	db02      	blt.n	8005eec <_printf_float+0x128>
 8005ee6:	6863      	ldr	r3, [r4, #4]
 8005ee8:	4299      	cmp	r1, r3
 8005eea:	dd41      	ble.n	8005f70 <_printf_float+0x1ac>
 8005eec:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ef0:	fa5f fa8a 	uxtb.w	sl, sl
 8005ef4:	3901      	subs	r1, #1
 8005ef6:	4652      	mov	r2, sl
 8005ef8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005efc:	9109      	str	r1, [sp, #36]	@ 0x24
 8005efe:	f7ff ff26 	bl	8005d4e <__exponent>
 8005f02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f04:	1813      	adds	r3, r2, r0
 8005f06:	2a01      	cmp	r2, #1
 8005f08:	4681      	mov	r9, r0
 8005f0a:	6123      	str	r3, [r4, #16]
 8005f0c:	dc02      	bgt.n	8005f14 <_printf_float+0x150>
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	07d2      	lsls	r2, r2, #31
 8005f12:	d501      	bpl.n	8005f18 <_printf_float+0x154>
 8005f14:	3301      	adds	r3, #1
 8005f16:	6123      	str	r3, [r4, #16]
 8005f18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0a2      	beq.n	8005e66 <_printf_float+0xa2>
 8005f20:	232d      	movs	r3, #45	@ 0x2d
 8005f22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f26:	e79e      	b.n	8005e66 <_printf_float+0xa2>
 8005f28:	9a06      	ldr	r2, [sp, #24]
 8005f2a:	2a47      	cmp	r2, #71	@ 0x47
 8005f2c:	d1c2      	bne.n	8005eb4 <_printf_float+0xf0>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1c0      	bne.n	8005eb4 <_printf_float+0xf0>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e7bd      	b.n	8005eb2 <_printf_float+0xee>
 8005f36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f3a:	d9db      	bls.n	8005ef4 <_printf_float+0x130>
 8005f3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f40:	d118      	bne.n	8005f74 <_printf_float+0x1b0>
 8005f42:	2900      	cmp	r1, #0
 8005f44:	6863      	ldr	r3, [r4, #4]
 8005f46:	dd0b      	ble.n	8005f60 <_printf_float+0x19c>
 8005f48:	6121      	str	r1, [r4, #16]
 8005f4a:	b913      	cbnz	r3, 8005f52 <_printf_float+0x18e>
 8005f4c:	6822      	ldr	r2, [r4, #0]
 8005f4e:	07d0      	lsls	r0, r2, #31
 8005f50:	d502      	bpl.n	8005f58 <_printf_float+0x194>
 8005f52:	3301      	adds	r3, #1
 8005f54:	440b      	add	r3, r1
 8005f56:	6123      	str	r3, [r4, #16]
 8005f58:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005f5a:	f04f 0900 	mov.w	r9, #0
 8005f5e:	e7db      	b.n	8005f18 <_printf_float+0x154>
 8005f60:	b913      	cbnz	r3, 8005f68 <_printf_float+0x1a4>
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	07d2      	lsls	r2, r2, #31
 8005f66:	d501      	bpl.n	8005f6c <_printf_float+0x1a8>
 8005f68:	3302      	adds	r3, #2
 8005f6a:	e7f4      	b.n	8005f56 <_printf_float+0x192>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e7f2      	b.n	8005f56 <_printf_float+0x192>
 8005f70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f76:	4299      	cmp	r1, r3
 8005f78:	db05      	blt.n	8005f86 <_printf_float+0x1c2>
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	6121      	str	r1, [r4, #16]
 8005f7e:	07d8      	lsls	r0, r3, #31
 8005f80:	d5ea      	bpl.n	8005f58 <_printf_float+0x194>
 8005f82:	1c4b      	adds	r3, r1, #1
 8005f84:	e7e7      	b.n	8005f56 <_printf_float+0x192>
 8005f86:	2900      	cmp	r1, #0
 8005f88:	bfd4      	ite	le
 8005f8a:	f1c1 0202 	rsble	r2, r1, #2
 8005f8e:	2201      	movgt	r2, #1
 8005f90:	4413      	add	r3, r2
 8005f92:	e7e0      	b.n	8005f56 <_printf_float+0x192>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	055a      	lsls	r2, r3, #21
 8005f98:	d407      	bmi.n	8005faa <_printf_float+0x1e6>
 8005f9a:	6923      	ldr	r3, [r4, #16]
 8005f9c:	4642      	mov	r2, r8
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	47b8      	blx	r7
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d12b      	bne.n	8006000 <_printf_float+0x23c>
 8005fa8:	e767      	b.n	8005e7a <_printf_float+0xb6>
 8005faa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005fae:	f240 80dd 	bls.w	800616c <_printf_float+0x3a8>
 8005fb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f7fa fda5 	bl	8000b08 <__aeabi_dcmpeq>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d033      	beq.n	800602a <_printf_float+0x266>
 8005fc2:	4a37      	ldr	r2, [pc, #220]	@ (80060a0 <_printf_float+0x2dc>)
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b8      	blx	r7
 8005fcc:	3001      	adds	r0, #1
 8005fce:	f43f af54 	beq.w	8005e7a <_printf_float+0xb6>
 8005fd2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005fd6:	4543      	cmp	r3, r8
 8005fd8:	db02      	blt.n	8005fe0 <_printf_float+0x21c>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	07d8      	lsls	r0, r3, #31
 8005fde:	d50f      	bpl.n	8006000 <_printf_float+0x23c>
 8005fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	47b8      	blx	r7
 8005fea:	3001      	adds	r0, #1
 8005fec:	f43f af45 	beq.w	8005e7a <_printf_float+0xb6>
 8005ff0:	f04f 0900 	mov.w	r9, #0
 8005ff4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ff8:	f104 0a1a 	add.w	sl, r4, #26
 8005ffc:	45c8      	cmp	r8, r9
 8005ffe:	dc09      	bgt.n	8006014 <_printf_float+0x250>
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	079b      	lsls	r3, r3, #30
 8006004:	f100 8103 	bmi.w	800620e <_printf_float+0x44a>
 8006008:	68e0      	ldr	r0, [r4, #12]
 800600a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800600c:	4298      	cmp	r0, r3
 800600e:	bfb8      	it	lt
 8006010:	4618      	movlt	r0, r3
 8006012:	e734      	b.n	8005e7e <_printf_float+0xba>
 8006014:	2301      	movs	r3, #1
 8006016:	4652      	mov	r2, sl
 8006018:	4631      	mov	r1, r6
 800601a:	4628      	mov	r0, r5
 800601c:	47b8      	blx	r7
 800601e:	3001      	adds	r0, #1
 8006020:	f43f af2b 	beq.w	8005e7a <_printf_float+0xb6>
 8006024:	f109 0901 	add.w	r9, r9, #1
 8006028:	e7e8      	b.n	8005ffc <_printf_float+0x238>
 800602a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800602c:	2b00      	cmp	r3, #0
 800602e:	dc39      	bgt.n	80060a4 <_printf_float+0x2e0>
 8006030:	4a1b      	ldr	r2, [pc, #108]	@ (80060a0 <_printf_float+0x2dc>)
 8006032:	2301      	movs	r3, #1
 8006034:	4631      	mov	r1, r6
 8006036:	4628      	mov	r0, r5
 8006038:	47b8      	blx	r7
 800603a:	3001      	adds	r0, #1
 800603c:	f43f af1d 	beq.w	8005e7a <_printf_float+0xb6>
 8006040:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006044:	ea59 0303 	orrs.w	r3, r9, r3
 8006048:	d102      	bne.n	8006050 <_printf_float+0x28c>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	07d9      	lsls	r1, r3, #31
 800604e:	d5d7      	bpl.n	8006000 <_printf_float+0x23c>
 8006050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006054:	4631      	mov	r1, r6
 8006056:	4628      	mov	r0, r5
 8006058:	47b8      	blx	r7
 800605a:	3001      	adds	r0, #1
 800605c:	f43f af0d 	beq.w	8005e7a <_printf_float+0xb6>
 8006060:	f04f 0a00 	mov.w	sl, #0
 8006064:	f104 0b1a 	add.w	fp, r4, #26
 8006068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800606a:	425b      	negs	r3, r3
 800606c:	4553      	cmp	r3, sl
 800606e:	dc01      	bgt.n	8006074 <_printf_float+0x2b0>
 8006070:	464b      	mov	r3, r9
 8006072:	e793      	b.n	8005f9c <_printf_float+0x1d8>
 8006074:	2301      	movs	r3, #1
 8006076:	465a      	mov	r2, fp
 8006078:	4631      	mov	r1, r6
 800607a:	4628      	mov	r0, r5
 800607c:	47b8      	blx	r7
 800607e:	3001      	adds	r0, #1
 8006080:	f43f aefb 	beq.w	8005e7a <_printf_float+0xb6>
 8006084:	f10a 0a01 	add.w	sl, sl, #1
 8006088:	e7ee      	b.n	8006068 <_printf_float+0x2a4>
 800608a:	bf00      	nop
 800608c:	7fefffff 	.word	0x7fefffff
 8006090:	08008c20 	.word	0x08008c20
 8006094:	08008c24 	.word	0x08008c24
 8006098:	08008c28 	.word	0x08008c28
 800609c:	08008c2c 	.word	0x08008c2c
 80060a0:	08008c30 	.word	0x08008c30
 80060a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80060aa:	4553      	cmp	r3, sl
 80060ac:	bfa8      	it	ge
 80060ae:	4653      	movge	r3, sl
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	4699      	mov	r9, r3
 80060b4:	dc36      	bgt.n	8006124 <_printf_float+0x360>
 80060b6:	f04f 0b00 	mov.w	fp, #0
 80060ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060be:	f104 021a 	add.w	r2, r4, #26
 80060c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060c4:	9306      	str	r3, [sp, #24]
 80060c6:	eba3 0309 	sub.w	r3, r3, r9
 80060ca:	455b      	cmp	r3, fp
 80060cc:	dc31      	bgt.n	8006132 <_printf_float+0x36e>
 80060ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d0:	459a      	cmp	sl, r3
 80060d2:	dc3a      	bgt.n	800614a <_printf_float+0x386>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	07da      	lsls	r2, r3, #31
 80060d8:	d437      	bmi.n	800614a <_printf_float+0x386>
 80060da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060dc:	ebaa 0903 	sub.w	r9, sl, r3
 80060e0:	9b06      	ldr	r3, [sp, #24]
 80060e2:	ebaa 0303 	sub.w	r3, sl, r3
 80060e6:	4599      	cmp	r9, r3
 80060e8:	bfa8      	it	ge
 80060ea:	4699      	movge	r9, r3
 80060ec:	f1b9 0f00 	cmp.w	r9, #0
 80060f0:	dc33      	bgt.n	800615a <_printf_float+0x396>
 80060f2:	f04f 0800 	mov.w	r8, #0
 80060f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060fa:	f104 0b1a 	add.w	fp, r4, #26
 80060fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006100:	ebaa 0303 	sub.w	r3, sl, r3
 8006104:	eba3 0309 	sub.w	r3, r3, r9
 8006108:	4543      	cmp	r3, r8
 800610a:	f77f af79 	ble.w	8006000 <_printf_float+0x23c>
 800610e:	2301      	movs	r3, #1
 8006110:	465a      	mov	r2, fp
 8006112:	4631      	mov	r1, r6
 8006114:	4628      	mov	r0, r5
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	f43f aeae 	beq.w	8005e7a <_printf_float+0xb6>
 800611e:	f108 0801 	add.w	r8, r8, #1
 8006122:	e7ec      	b.n	80060fe <_printf_float+0x33a>
 8006124:	4642      	mov	r2, r8
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	d1c2      	bne.n	80060b6 <_printf_float+0x2f2>
 8006130:	e6a3      	b.n	8005e7a <_printf_float+0xb6>
 8006132:	2301      	movs	r3, #1
 8006134:	4631      	mov	r1, r6
 8006136:	4628      	mov	r0, r5
 8006138:	9206      	str	r2, [sp, #24]
 800613a:	47b8      	blx	r7
 800613c:	3001      	adds	r0, #1
 800613e:	f43f ae9c 	beq.w	8005e7a <_printf_float+0xb6>
 8006142:	9a06      	ldr	r2, [sp, #24]
 8006144:	f10b 0b01 	add.w	fp, fp, #1
 8006148:	e7bb      	b.n	80060c2 <_printf_float+0x2fe>
 800614a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	47b8      	blx	r7
 8006154:	3001      	adds	r0, #1
 8006156:	d1c0      	bne.n	80060da <_printf_float+0x316>
 8006158:	e68f      	b.n	8005e7a <_printf_float+0xb6>
 800615a:	9a06      	ldr	r2, [sp, #24]
 800615c:	464b      	mov	r3, r9
 800615e:	4442      	add	r2, r8
 8006160:	4631      	mov	r1, r6
 8006162:	4628      	mov	r0, r5
 8006164:	47b8      	blx	r7
 8006166:	3001      	adds	r0, #1
 8006168:	d1c3      	bne.n	80060f2 <_printf_float+0x32e>
 800616a:	e686      	b.n	8005e7a <_printf_float+0xb6>
 800616c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006170:	f1ba 0f01 	cmp.w	sl, #1
 8006174:	dc01      	bgt.n	800617a <_printf_float+0x3b6>
 8006176:	07db      	lsls	r3, r3, #31
 8006178:	d536      	bpl.n	80061e8 <_printf_float+0x424>
 800617a:	2301      	movs	r3, #1
 800617c:	4642      	mov	r2, r8
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f ae78 	beq.w	8005e7a <_printf_float+0xb6>
 800618a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800618e:	4631      	mov	r1, r6
 8006190:	4628      	mov	r0, r5
 8006192:	47b8      	blx	r7
 8006194:	3001      	adds	r0, #1
 8006196:	f43f ae70 	beq.w	8005e7a <_printf_float+0xb6>
 800619a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800619e:	2200      	movs	r2, #0
 80061a0:	2300      	movs	r3, #0
 80061a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061a6:	f7fa fcaf 	bl	8000b08 <__aeabi_dcmpeq>
 80061aa:	b9c0      	cbnz	r0, 80061de <_printf_float+0x41a>
 80061ac:	4653      	mov	r3, sl
 80061ae:	f108 0201 	add.w	r2, r8, #1
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	d10c      	bne.n	80061d6 <_printf_float+0x412>
 80061bc:	e65d      	b.n	8005e7a <_printf_float+0xb6>
 80061be:	2301      	movs	r3, #1
 80061c0:	465a      	mov	r2, fp
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	f43f ae56 	beq.w	8005e7a <_printf_float+0xb6>
 80061ce:	f108 0801 	add.w	r8, r8, #1
 80061d2:	45d0      	cmp	r8, sl
 80061d4:	dbf3      	blt.n	80061be <_printf_float+0x3fa>
 80061d6:	464b      	mov	r3, r9
 80061d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80061dc:	e6df      	b.n	8005f9e <_printf_float+0x1da>
 80061de:	f04f 0800 	mov.w	r8, #0
 80061e2:	f104 0b1a 	add.w	fp, r4, #26
 80061e6:	e7f4      	b.n	80061d2 <_printf_float+0x40e>
 80061e8:	2301      	movs	r3, #1
 80061ea:	4642      	mov	r2, r8
 80061ec:	e7e1      	b.n	80061b2 <_printf_float+0x3ee>
 80061ee:	2301      	movs	r3, #1
 80061f0:	464a      	mov	r2, r9
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f ae3e 	beq.w	8005e7a <_printf_float+0xb6>
 80061fe:	f108 0801 	add.w	r8, r8, #1
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006206:	1a5b      	subs	r3, r3, r1
 8006208:	4543      	cmp	r3, r8
 800620a:	dcf0      	bgt.n	80061ee <_printf_float+0x42a>
 800620c:	e6fc      	b.n	8006008 <_printf_float+0x244>
 800620e:	f04f 0800 	mov.w	r8, #0
 8006212:	f104 0919 	add.w	r9, r4, #25
 8006216:	e7f4      	b.n	8006202 <_printf_float+0x43e>

08006218 <_printf_common>:
 8006218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800621c:	4616      	mov	r6, r2
 800621e:	4698      	mov	r8, r3
 8006220:	688a      	ldr	r2, [r1, #8]
 8006222:	690b      	ldr	r3, [r1, #16]
 8006224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006228:	4293      	cmp	r3, r2
 800622a:	bfb8      	it	lt
 800622c:	4613      	movlt	r3, r2
 800622e:	6033      	str	r3, [r6, #0]
 8006230:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006234:	4607      	mov	r7, r0
 8006236:	460c      	mov	r4, r1
 8006238:	b10a      	cbz	r2, 800623e <_printf_common+0x26>
 800623a:	3301      	adds	r3, #1
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	0699      	lsls	r1, r3, #26
 8006242:	bf42      	ittt	mi
 8006244:	6833      	ldrmi	r3, [r6, #0]
 8006246:	3302      	addmi	r3, #2
 8006248:	6033      	strmi	r3, [r6, #0]
 800624a:	6825      	ldr	r5, [r4, #0]
 800624c:	f015 0506 	ands.w	r5, r5, #6
 8006250:	d106      	bne.n	8006260 <_printf_common+0x48>
 8006252:	f104 0a19 	add.w	sl, r4, #25
 8006256:	68e3      	ldr	r3, [r4, #12]
 8006258:	6832      	ldr	r2, [r6, #0]
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	42ab      	cmp	r3, r5
 800625e:	dc26      	bgt.n	80062ae <_printf_common+0x96>
 8006260:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	3b00      	subs	r3, #0
 8006268:	bf18      	it	ne
 800626a:	2301      	movne	r3, #1
 800626c:	0692      	lsls	r2, r2, #26
 800626e:	d42b      	bmi.n	80062c8 <_printf_common+0xb0>
 8006270:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006274:	4641      	mov	r1, r8
 8006276:	4638      	mov	r0, r7
 8006278:	47c8      	blx	r9
 800627a:	3001      	adds	r0, #1
 800627c:	d01e      	beq.n	80062bc <_printf_common+0xa4>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	6922      	ldr	r2, [r4, #16]
 8006282:	f003 0306 	and.w	r3, r3, #6
 8006286:	2b04      	cmp	r3, #4
 8006288:	bf02      	ittt	eq
 800628a:	68e5      	ldreq	r5, [r4, #12]
 800628c:	6833      	ldreq	r3, [r6, #0]
 800628e:	1aed      	subeq	r5, r5, r3
 8006290:	68a3      	ldr	r3, [r4, #8]
 8006292:	bf0c      	ite	eq
 8006294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006298:	2500      	movne	r5, #0
 800629a:	4293      	cmp	r3, r2
 800629c:	bfc4      	itt	gt
 800629e:	1a9b      	subgt	r3, r3, r2
 80062a0:	18ed      	addgt	r5, r5, r3
 80062a2:	2600      	movs	r6, #0
 80062a4:	341a      	adds	r4, #26
 80062a6:	42b5      	cmp	r5, r6
 80062a8:	d11a      	bne.n	80062e0 <_printf_common+0xc8>
 80062aa:	2000      	movs	r0, #0
 80062ac:	e008      	b.n	80062c0 <_printf_common+0xa8>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4652      	mov	r2, sl
 80062b2:	4641      	mov	r1, r8
 80062b4:	4638      	mov	r0, r7
 80062b6:	47c8      	blx	r9
 80062b8:	3001      	adds	r0, #1
 80062ba:	d103      	bne.n	80062c4 <_printf_common+0xac>
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c4:	3501      	adds	r5, #1
 80062c6:	e7c6      	b.n	8006256 <_printf_common+0x3e>
 80062c8:	18e1      	adds	r1, r4, r3
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	2030      	movs	r0, #48	@ 0x30
 80062ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062d2:	4422      	add	r2, r4
 80062d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062dc:	3302      	adds	r3, #2
 80062de:	e7c7      	b.n	8006270 <_printf_common+0x58>
 80062e0:	2301      	movs	r3, #1
 80062e2:	4622      	mov	r2, r4
 80062e4:	4641      	mov	r1, r8
 80062e6:	4638      	mov	r0, r7
 80062e8:	47c8      	blx	r9
 80062ea:	3001      	adds	r0, #1
 80062ec:	d0e6      	beq.n	80062bc <_printf_common+0xa4>
 80062ee:	3601      	adds	r6, #1
 80062f0:	e7d9      	b.n	80062a6 <_printf_common+0x8e>
	...

080062f4 <_printf_i>:
 80062f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062f8:	7e0f      	ldrb	r7, [r1, #24]
 80062fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062fc:	2f78      	cmp	r7, #120	@ 0x78
 80062fe:	4691      	mov	r9, r2
 8006300:	4680      	mov	r8, r0
 8006302:	460c      	mov	r4, r1
 8006304:	469a      	mov	sl, r3
 8006306:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800630a:	d807      	bhi.n	800631c <_printf_i+0x28>
 800630c:	2f62      	cmp	r7, #98	@ 0x62
 800630e:	d80a      	bhi.n	8006326 <_printf_i+0x32>
 8006310:	2f00      	cmp	r7, #0
 8006312:	f000 80d2 	beq.w	80064ba <_printf_i+0x1c6>
 8006316:	2f58      	cmp	r7, #88	@ 0x58
 8006318:	f000 80b9 	beq.w	800648e <_printf_i+0x19a>
 800631c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006320:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006324:	e03a      	b.n	800639c <_printf_i+0xa8>
 8006326:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800632a:	2b15      	cmp	r3, #21
 800632c:	d8f6      	bhi.n	800631c <_printf_i+0x28>
 800632e:	a101      	add	r1, pc, #4	@ (adr r1, 8006334 <_printf_i+0x40>)
 8006330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006334:	0800638d 	.word	0x0800638d
 8006338:	080063a1 	.word	0x080063a1
 800633c:	0800631d 	.word	0x0800631d
 8006340:	0800631d 	.word	0x0800631d
 8006344:	0800631d 	.word	0x0800631d
 8006348:	0800631d 	.word	0x0800631d
 800634c:	080063a1 	.word	0x080063a1
 8006350:	0800631d 	.word	0x0800631d
 8006354:	0800631d 	.word	0x0800631d
 8006358:	0800631d 	.word	0x0800631d
 800635c:	0800631d 	.word	0x0800631d
 8006360:	080064a1 	.word	0x080064a1
 8006364:	080063cb 	.word	0x080063cb
 8006368:	0800645b 	.word	0x0800645b
 800636c:	0800631d 	.word	0x0800631d
 8006370:	0800631d 	.word	0x0800631d
 8006374:	080064c3 	.word	0x080064c3
 8006378:	0800631d 	.word	0x0800631d
 800637c:	080063cb 	.word	0x080063cb
 8006380:	0800631d 	.word	0x0800631d
 8006384:	0800631d 	.word	0x0800631d
 8006388:	08006463 	.word	0x08006463
 800638c:	6833      	ldr	r3, [r6, #0]
 800638e:	1d1a      	adds	r2, r3, #4
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6032      	str	r2, [r6, #0]
 8006394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800639c:	2301      	movs	r3, #1
 800639e:	e09d      	b.n	80064dc <_printf_i+0x1e8>
 80063a0:	6833      	ldr	r3, [r6, #0]
 80063a2:	6820      	ldr	r0, [r4, #0]
 80063a4:	1d19      	adds	r1, r3, #4
 80063a6:	6031      	str	r1, [r6, #0]
 80063a8:	0606      	lsls	r6, r0, #24
 80063aa:	d501      	bpl.n	80063b0 <_printf_i+0xbc>
 80063ac:	681d      	ldr	r5, [r3, #0]
 80063ae:	e003      	b.n	80063b8 <_printf_i+0xc4>
 80063b0:	0645      	lsls	r5, r0, #25
 80063b2:	d5fb      	bpl.n	80063ac <_printf_i+0xb8>
 80063b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	da03      	bge.n	80063c4 <_printf_i+0xd0>
 80063bc:	232d      	movs	r3, #45	@ 0x2d
 80063be:	426d      	negs	r5, r5
 80063c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063c4:	4859      	ldr	r0, [pc, #356]	@ (800652c <_printf_i+0x238>)
 80063c6:	230a      	movs	r3, #10
 80063c8:	e011      	b.n	80063ee <_printf_i+0xfa>
 80063ca:	6821      	ldr	r1, [r4, #0]
 80063cc:	6833      	ldr	r3, [r6, #0]
 80063ce:	0608      	lsls	r0, r1, #24
 80063d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80063d4:	d402      	bmi.n	80063dc <_printf_i+0xe8>
 80063d6:	0649      	lsls	r1, r1, #25
 80063d8:	bf48      	it	mi
 80063da:	b2ad      	uxthmi	r5, r5
 80063dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80063de:	4853      	ldr	r0, [pc, #332]	@ (800652c <_printf_i+0x238>)
 80063e0:	6033      	str	r3, [r6, #0]
 80063e2:	bf14      	ite	ne
 80063e4:	230a      	movne	r3, #10
 80063e6:	2308      	moveq	r3, #8
 80063e8:	2100      	movs	r1, #0
 80063ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063ee:	6866      	ldr	r6, [r4, #4]
 80063f0:	60a6      	str	r6, [r4, #8]
 80063f2:	2e00      	cmp	r6, #0
 80063f4:	bfa2      	ittt	ge
 80063f6:	6821      	ldrge	r1, [r4, #0]
 80063f8:	f021 0104 	bicge.w	r1, r1, #4
 80063fc:	6021      	strge	r1, [r4, #0]
 80063fe:	b90d      	cbnz	r5, 8006404 <_printf_i+0x110>
 8006400:	2e00      	cmp	r6, #0
 8006402:	d04b      	beq.n	800649c <_printf_i+0x1a8>
 8006404:	4616      	mov	r6, r2
 8006406:	fbb5 f1f3 	udiv	r1, r5, r3
 800640a:	fb03 5711 	mls	r7, r3, r1, r5
 800640e:	5dc7      	ldrb	r7, [r0, r7]
 8006410:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006414:	462f      	mov	r7, r5
 8006416:	42bb      	cmp	r3, r7
 8006418:	460d      	mov	r5, r1
 800641a:	d9f4      	bls.n	8006406 <_printf_i+0x112>
 800641c:	2b08      	cmp	r3, #8
 800641e:	d10b      	bne.n	8006438 <_printf_i+0x144>
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	07df      	lsls	r7, r3, #31
 8006424:	d508      	bpl.n	8006438 <_printf_i+0x144>
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	6861      	ldr	r1, [r4, #4]
 800642a:	4299      	cmp	r1, r3
 800642c:	bfde      	ittt	le
 800642e:	2330      	movle	r3, #48	@ 0x30
 8006430:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006434:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006438:	1b92      	subs	r2, r2, r6
 800643a:	6122      	str	r2, [r4, #16]
 800643c:	f8cd a000 	str.w	sl, [sp]
 8006440:	464b      	mov	r3, r9
 8006442:	aa03      	add	r2, sp, #12
 8006444:	4621      	mov	r1, r4
 8006446:	4640      	mov	r0, r8
 8006448:	f7ff fee6 	bl	8006218 <_printf_common>
 800644c:	3001      	adds	r0, #1
 800644e:	d14a      	bne.n	80064e6 <_printf_i+0x1f2>
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	b004      	add	sp, #16
 8006456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	f043 0320 	orr.w	r3, r3, #32
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	4833      	ldr	r0, [pc, #204]	@ (8006530 <_printf_i+0x23c>)
 8006464:	2778      	movs	r7, #120	@ 0x78
 8006466:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	6831      	ldr	r1, [r6, #0]
 800646e:	061f      	lsls	r7, r3, #24
 8006470:	f851 5b04 	ldr.w	r5, [r1], #4
 8006474:	d402      	bmi.n	800647c <_printf_i+0x188>
 8006476:	065f      	lsls	r7, r3, #25
 8006478:	bf48      	it	mi
 800647a:	b2ad      	uxthmi	r5, r5
 800647c:	6031      	str	r1, [r6, #0]
 800647e:	07d9      	lsls	r1, r3, #31
 8006480:	bf44      	itt	mi
 8006482:	f043 0320 	orrmi.w	r3, r3, #32
 8006486:	6023      	strmi	r3, [r4, #0]
 8006488:	b11d      	cbz	r5, 8006492 <_printf_i+0x19e>
 800648a:	2310      	movs	r3, #16
 800648c:	e7ac      	b.n	80063e8 <_printf_i+0xf4>
 800648e:	4827      	ldr	r0, [pc, #156]	@ (800652c <_printf_i+0x238>)
 8006490:	e7e9      	b.n	8006466 <_printf_i+0x172>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	f023 0320 	bic.w	r3, r3, #32
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	e7f6      	b.n	800648a <_printf_i+0x196>
 800649c:	4616      	mov	r6, r2
 800649e:	e7bd      	b.n	800641c <_printf_i+0x128>
 80064a0:	6833      	ldr	r3, [r6, #0]
 80064a2:	6825      	ldr	r5, [r4, #0]
 80064a4:	6961      	ldr	r1, [r4, #20]
 80064a6:	1d18      	adds	r0, r3, #4
 80064a8:	6030      	str	r0, [r6, #0]
 80064aa:	062e      	lsls	r6, r5, #24
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	d501      	bpl.n	80064b4 <_printf_i+0x1c0>
 80064b0:	6019      	str	r1, [r3, #0]
 80064b2:	e002      	b.n	80064ba <_printf_i+0x1c6>
 80064b4:	0668      	lsls	r0, r5, #25
 80064b6:	d5fb      	bpl.n	80064b0 <_printf_i+0x1bc>
 80064b8:	8019      	strh	r1, [r3, #0]
 80064ba:	2300      	movs	r3, #0
 80064bc:	6123      	str	r3, [r4, #16]
 80064be:	4616      	mov	r6, r2
 80064c0:	e7bc      	b.n	800643c <_printf_i+0x148>
 80064c2:	6833      	ldr	r3, [r6, #0]
 80064c4:	1d1a      	adds	r2, r3, #4
 80064c6:	6032      	str	r2, [r6, #0]
 80064c8:	681e      	ldr	r6, [r3, #0]
 80064ca:	6862      	ldr	r2, [r4, #4]
 80064cc:	2100      	movs	r1, #0
 80064ce:	4630      	mov	r0, r6
 80064d0:	f7f9 fe9e 	bl	8000210 <memchr>
 80064d4:	b108      	cbz	r0, 80064da <_printf_i+0x1e6>
 80064d6:	1b80      	subs	r0, r0, r6
 80064d8:	6060      	str	r0, [r4, #4]
 80064da:	6863      	ldr	r3, [r4, #4]
 80064dc:	6123      	str	r3, [r4, #16]
 80064de:	2300      	movs	r3, #0
 80064e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064e4:	e7aa      	b.n	800643c <_printf_i+0x148>
 80064e6:	6923      	ldr	r3, [r4, #16]
 80064e8:	4632      	mov	r2, r6
 80064ea:	4649      	mov	r1, r9
 80064ec:	4640      	mov	r0, r8
 80064ee:	47d0      	blx	sl
 80064f0:	3001      	adds	r0, #1
 80064f2:	d0ad      	beq.n	8006450 <_printf_i+0x15c>
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	079b      	lsls	r3, r3, #30
 80064f8:	d413      	bmi.n	8006522 <_printf_i+0x22e>
 80064fa:	68e0      	ldr	r0, [r4, #12]
 80064fc:	9b03      	ldr	r3, [sp, #12]
 80064fe:	4298      	cmp	r0, r3
 8006500:	bfb8      	it	lt
 8006502:	4618      	movlt	r0, r3
 8006504:	e7a6      	b.n	8006454 <_printf_i+0x160>
 8006506:	2301      	movs	r3, #1
 8006508:	4632      	mov	r2, r6
 800650a:	4649      	mov	r1, r9
 800650c:	4640      	mov	r0, r8
 800650e:	47d0      	blx	sl
 8006510:	3001      	adds	r0, #1
 8006512:	d09d      	beq.n	8006450 <_printf_i+0x15c>
 8006514:	3501      	adds	r5, #1
 8006516:	68e3      	ldr	r3, [r4, #12]
 8006518:	9903      	ldr	r1, [sp, #12]
 800651a:	1a5b      	subs	r3, r3, r1
 800651c:	42ab      	cmp	r3, r5
 800651e:	dcf2      	bgt.n	8006506 <_printf_i+0x212>
 8006520:	e7eb      	b.n	80064fa <_printf_i+0x206>
 8006522:	2500      	movs	r5, #0
 8006524:	f104 0619 	add.w	r6, r4, #25
 8006528:	e7f5      	b.n	8006516 <_printf_i+0x222>
 800652a:	bf00      	nop
 800652c:	08008c32 	.word	0x08008c32
 8006530:	08008c43 	.word	0x08008c43

08006534 <std>:
 8006534:	2300      	movs	r3, #0
 8006536:	b510      	push	{r4, lr}
 8006538:	4604      	mov	r4, r0
 800653a:	e9c0 3300 	strd	r3, r3, [r0]
 800653e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006542:	6083      	str	r3, [r0, #8]
 8006544:	8181      	strh	r1, [r0, #12]
 8006546:	6643      	str	r3, [r0, #100]	@ 0x64
 8006548:	81c2      	strh	r2, [r0, #14]
 800654a:	6183      	str	r3, [r0, #24]
 800654c:	4619      	mov	r1, r3
 800654e:	2208      	movs	r2, #8
 8006550:	305c      	adds	r0, #92	@ 0x5c
 8006552:	f000 f914 	bl	800677e <memset>
 8006556:	4b0d      	ldr	r3, [pc, #52]	@ (800658c <std+0x58>)
 8006558:	6263      	str	r3, [r4, #36]	@ 0x24
 800655a:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <std+0x5c>)
 800655c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800655e:	4b0d      	ldr	r3, [pc, #52]	@ (8006594 <std+0x60>)
 8006560:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006562:	4b0d      	ldr	r3, [pc, #52]	@ (8006598 <std+0x64>)
 8006564:	6323      	str	r3, [r4, #48]	@ 0x30
 8006566:	4b0d      	ldr	r3, [pc, #52]	@ (800659c <std+0x68>)
 8006568:	6224      	str	r4, [r4, #32]
 800656a:	429c      	cmp	r4, r3
 800656c:	d006      	beq.n	800657c <std+0x48>
 800656e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006572:	4294      	cmp	r4, r2
 8006574:	d002      	beq.n	800657c <std+0x48>
 8006576:	33d0      	adds	r3, #208	@ 0xd0
 8006578:	429c      	cmp	r4, r3
 800657a:	d105      	bne.n	8006588 <std+0x54>
 800657c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006584:	f000 b988 	b.w	8006898 <__retarget_lock_init_recursive>
 8006588:	bd10      	pop	{r4, pc}
 800658a:	bf00      	nop
 800658c:	080066f9 	.word	0x080066f9
 8006590:	0800671b 	.word	0x0800671b
 8006594:	08006753 	.word	0x08006753
 8006598:	08006777 	.word	0x08006777
 800659c:	200004cc 	.word	0x200004cc

080065a0 <stdio_exit_handler>:
 80065a0:	4a02      	ldr	r2, [pc, #8]	@ (80065ac <stdio_exit_handler+0xc>)
 80065a2:	4903      	ldr	r1, [pc, #12]	@ (80065b0 <stdio_exit_handler+0x10>)
 80065a4:	4803      	ldr	r0, [pc, #12]	@ (80065b4 <stdio_exit_handler+0x14>)
 80065a6:	f000 b869 	b.w	800667c <_fwalk_sglue>
 80065aa:	bf00      	nop
 80065ac:	2000001c 	.word	0x2000001c
 80065b0:	080080a9 	.word	0x080080a9
 80065b4:	2000002c 	.word	0x2000002c

080065b8 <cleanup_stdio>:
 80065b8:	6841      	ldr	r1, [r0, #4]
 80065ba:	4b0c      	ldr	r3, [pc, #48]	@ (80065ec <cleanup_stdio+0x34>)
 80065bc:	4299      	cmp	r1, r3
 80065be:	b510      	push	{r4, lr}
 80065c0:	4604      	mov	r4, r0
 80065c2:	d001      	beq.n	80065c8 <cleanup_stdio+0x10>
 80065c4:	f001 fd70 	bl	80080a8 <_fflush_r>
 80065c8:	68a1      	ldr	r1, [r4, #8]
 80065ca:	4b09      	ldr	r3, [pc, #36]	@ (80065f0 <cleanup_stdio+0x38>)
 80065cc:	4299      	cmp	r1, r3
 80065ce:	d002      	beq.n	80065d6 <cleanup_stdio+0x1e>
 80065d0:	4620      	mov	r0, r4
 80065d2:	f001 fd69 	bl	80080a8 <_fflush_r>
 80065d6:	68e1      	ldr	r1, [r4, #12]
 80065d8:	4b06      	ldr	r3, [pc, #24]	@ (80065f4 <cleanup_stdio+0x3c>)
 80065da:	4299      	cmp	r1, r3
 80065dc:	d004      	beq.n	80065e8 <cleanup_stdio+0x30>
 80065de:	4620      	mov	r0, r4
 80065e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e4:	f001 bd60 	b.w	80080a8 <_fflush_r>
 80065e8:	bd10      	pop	{r4, pc}
 80065ea:	bf00      	nop
 80065ec:	200004cc 	.word	0x200004cc
 80065f0:	20000534 	.word	0x20000534
 80065f4:	2000059c 	.word	0x2000059c

080065f8 <global_stdio_init.part.0>:
 80065f8:	b510      	push	{r4, lr}
 80065fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006628 <global_stdio_init.part.0+0x30>)
 80065fc:	4c0b      	ldr	r4, [pc, #44]	@ (800662c <global_stdio_init.part.0+0x34>)
 80065fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006630 <global_stdio_init.part.0+0x38>)
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	4620      	mov	r0, r4
 8006604:	2200      	movs	r2, #0
 8006606:	2104      	movs	r1, #4
 8006608:	f7ff ff94 	bl	8006534 <std>
 800660c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006610:	2201      	movs	r2, #1
 8006612:	2109      	movs	r1, #9
 8006614:	f7ff ff8e 	bl	8006534 <std>
 8006618:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800661c:	2202      	movs	r2, #2
 800661e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006622:	2112      	movs	r1, #18
 8006624:	f7ff bf86 	b.w	8006534 <std>
 8006628:	20000604 	.word	0x20000604
 800662c:	200004cc 	.word	0x200004cc
 8006630:	080065a1 	.word	0x080065a1

08006634 <__sfp_lock_acquire>:
 8006634:	4801      	ldr	r0, [pc, #4]	@ (800663c <__sfp_lock_acquire+0x8>)
 8006636:	f000 b930 	b.w	800689a <__retarget_lock_acquire_recursive>
 800663a:	bf00      	nop
 800663c:	2000060d 	.word	0x2000060d

08006640 <__sfp_lock_release>:
 8006640:	4801      	ldr	r0, [pc, #4]	@ (8006648 <__sfp_lock_release+0x8>)
 8006642:	f000 b92b 	b.w	800689c <__retarget_lock_release_recursive>
 8006646:	bf00      	nop
 8006648:	2000060d 	.word	0x2000060d

0800664c <__sinit>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4604      	mov	r4, r0
 8006650:	f7ff fff0 	bl	8006634 <__sfp_lock_acquire>
 8006654:	6a23      	ldr	r3, [r4, #32]
 8006656:	b11b      	cbz	r3, 8006660 <__sinit+0x14>
 8006658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665c:	f7ff bff0 	b.w	8006640 <__sfp_lock_release>
 8006660:	4b04      	ldr	r3, [pc, #16]	@ (8006674 <__sinit+0x28>)
 8006662:	6223      	str	r3, [r4, #32]
 8006664:	4b04      	ldr	r3, [pc, #16]	@ (8006678 <__sinit+0x2c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f5      	bne.n	8006658 <__sinit+0xc>
 800666c:	f7ff ffc4 	bl	80065f8 <global_stdio_init.part.0>
 8006670:	e7f2      	b.n	8006658 <__sinit+0xc>
 8006672:	bf00      	nop
 8006674:	080065b9 	.word	0x080065b9
 8006678:	20000604 	.word	0x20000604

0800667c <_fwalk_sglue>:
 800667c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006680:	4607      	mov	r7, r0
 8006682:	4688      	mov	r8, r1
 8006684:	4614      	mov	r4, r2
 8006686:	2600      	movs	r6, #0
 8006688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800668c:	f1b9 0901 	subs.w	r9, r9, #1
 8006690:	d505      	bpl.n	800669e <_fwalk_sglue+0x22>
 8006692:	6824      	ldr	r4, [r4, #0]
 8006694:	2c00      	cmp	r4, #0
 8006696:	d1f7      	bne.n	8006688 <_fwalk_sglue+0xc>
 8006698:	4630      	mov	r0, r6
 800669a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800669e:	89ab      	ldrh	r3, [r5, #12]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d907      	bls.n	80066b4 <_fwalk_sglue+0x38>
 80066a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066a8:	3301      	adds	r3, #1
 80066aa:	d003      	beq.n	80066b4 <_fwalk_sglue+0x38>
 80066ac:	4629      	mov	r1, r5
 80066ae:	4638      	mov	r0, r7
 80066b0:	47c0      	blx	r8
 80066b2:	4306      	orrs	r6, r0
 80066b4:	3568      	adds	r5, #104	@ 0x68
 80066b6:	e7e9      	b.n	800668c <_fwalk_sglue+0x10>

080066b8 <siprintf>:
 80066b8:	b40e      	push	{r1, r2, r3}
 80066ba:	b500      	push	{lr}
 80066bc:	b09c      	sub	sp, #112	@ 0x70
 80066be:	ab1d      	add	r3, sp, #116	@ 0x74
 80066c0:	9002      	str	r0, [sp, #8]
 80066c2:	9006      	str	r0, [sp, #24]
 80066c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80066c8:	4809      	ldr	r0, [pc, #36]	@ (80066f0 <siprintf+0x38>)
 80066ca:	9107      	str	r1, [sp, #28]
 80066cc:	9104      	str	r1, [sp, #16]
 80066ce:	4909      	ldr	r1, [pc, #36]	@ (80066f4 <siprintf+0x3c>)
 80066d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d4:	9105      	str	r1, [sp, #20]
 80066d6:	6800      	ldr	r0, [r0, #0]
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	a902      	add	r1, sp, #8
 80066dc:	f001 fb64 	bl	8007da8 <_svfiprintf_r>
 80066e0:	9b02      	ldr	r3, [sp, #8]
 80066e2:	2200      	movs	r2, #0
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	b01c      	add	sp, #112	@ 0x70
 80066e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066ec:	b003      	add	sp, #12
 80066ee:	4770      	bx	lr
 80066f0:	20000028 	.word	0x20000028
 80066f4:	ffff0208 	.word	0xffff0208

080066f8 <__sread>:
 80066f8:	b510      	push	{r4, lr}
 80066fa:	460c      	mov	r4, r1
 80066fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006700:	f000 f86c 	bl	80067dc <_read_r>
 8006704:	2800      	cmp	r0, #0
 8006706:	bfab      	itete	ge
 8006708:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800670a:	89a3      	ldrhlt	r3, [r4, #12]
 800670c:	181b      	addge	r3, r3, r0
 800670e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006712:	bfac      	ite	ge
 8006714:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006716:	81a3      	strhlt	r3, [r4, #12]
 8006718:	bd10      	pop	{r4, pc}

0800671a <__swrite>:
 800671a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800671e:	461f      	mov	r7, r3
 8006720:	898b      	ldrh	r3, [r1, #12]
 8006722:	05db      	lsls	r3, r3, #23
 8006724:	4605      	mov	r5, r0
 8006726:	460c      	mov	r4, r1
 8006728:	4616      	mov	r6, r2
 800672a:	d505      	bpl.n	8006738 <__swrite+0x1e>
 800672c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006730:	2302      	movs	r3, #2
 8006732:	2200      	movs	r2, #0
 8006734:	f000 f840 	bl	80067b8 <_lseek_r>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800673e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006742:	81a3      	strh	r3, [r4, #12]
 8006744:	4632      	mov	r2, r6
 8006746:	463b      	mov	r3, r7
 8006748:	4628      	mov	r0, r5
 800674a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800674e:	f000 b867 	b.w	8006820 <_write_r>

08006752 <__sseek>:
 8006752:	b510      	push	{r4, lr}
 8006754:	460c      	mov	r4, r1
 8006756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800675a:	f000 f82d 	bl	80067b8 <_lseek_r>
 800675e:	1c43      	adds	r3, r0, #1
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	bf15      	itete	ne
 8006764:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006766:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800676a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800676e:	81a3      	strheq	r3, [r4, #12]
 8006770:	bf18      	it	ne
 8006772:	81a3      	strhne	r3, [r4, #12]
 8006774:	bd10      	pop	{r4, pc}

08006776 <__sclose>:
 8006776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677a:	f000 b80d 	b.w	8006798 <_close_r>

0800677e <memset>:
 800677e:	4402      	add	r2, r0
 8006780:	4603      	mov	r3, r0
 8006782:	4293      	cmp	r3, r2
 8006784:	d100      	bne.n	8006788 <memset+0xa>
 8006786:	4770      	bx	lr
 8006788:	f803 1b01 	strb.w	r1, [r3], #1
 800678c:	e7f9      	b.n	8006782 <memset+0x4>
	...

08006790 <_localeconv_r>:
 8006790:	4800      	ldr	r0, [pc, #0]	@ (8006794 <_localeconv_r+0x4>)
 8006792:	4770      	bx	lr
 8006794:	20000168 	.word	0x20000168

08006798 <_close_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	4d06      	ldr	r5, [pc, #24]	@ (80067b4 <_close_r+0x1c>)
 800679c:	2300      	movs	r3, #0
 800679e:	4604      	mov	r4, r0
 80067a0:	4608      	mov	r0, r1
 80067a2:	602b      	str	r3, [r5, #0]
 80067a4:	f7fc fbe2 	bl	8002f6c <_close>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d102      	bne.n	80067b2 <_close_r+0x1a>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	b103      	cbz	r3, 80067b2 <_close_r+0x1a>
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	20000608 	.word	0x20000608

080067b8 <_lseek_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d07      	ldr	r5, [pc, #28]	@ (80067d8 <_lseek_r+0x20>)
 80067bc:	4604      	mov	r4, r0
 80067be:	4608      	mov	r0, r1
 80067c0:	4611      	mov	r1, r2
 80067c2:	2200      	movs	r2, #0
 80067c4:	602a      	str	r2, [r5, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f7fc fbf7 	bl	8002fba <_lseek>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <_lseek_r+0x1e>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	b103      	cbz	r3, 80067d6 <_lseek_r+0x1e>
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	20000608 	.word	0x20000608

080067dc <_read_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	4d07      	ldr	r5, [pc, #28]	@ (80067fc <_read_r+0x20>)
 80067e0:	4604      	mov	r4, r0
 80067e2:	4608      	mov	r0, r1
 80067e4:	4611      	mov	r1, r2
 80067e6:	2200      	movs	r2, #0
 80067e8:	602a      	str	r2, [r5, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	f7fc fb85 	bl	8002efa <_read>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d102      	bne.n	80067fa <_read_r+0x1e>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	b103      	cbz	r3, 80067fa <_read_r+0x1e>
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	20000608 	.word	0x20000608

08006800 <_sbrk_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d06      	ldr	r5, [pc, #24]	@ (800681c <_sbrk_r+0x1c>)
 8006804:	2300      	movs	r3, #0
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	602b      	str	r3, [r5, #0]
 800680c:	f7fc fbe2 	bl	8002fd4 <_sbrk>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_sbrk_r+0x1a>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b103      	cbz	r3, 800681a <_sbrk_r+0x1a>
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	20000608 	.word	0x20000608

08006820 <_write_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d07      	ldr	r5, [pc, #28]	@ (8006840 <_write_r+0x20>)
 8006824:	4604      	mov	r4, r0
 8006826:	4608      	mov	r0, r1
 8006828:	4611      	mov	r1, r2
 800682a:	2200      	movs	r2, #0
 800682c:	602a      	str	r2, [r5, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	f7fc fb80 	bl	8002f34 <_write>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_write_r+0x1e>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_write_r+0x1e>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20000608 	.word	0x20000608

08006844 <__errno>:
 8006844:	4b01      	ldr	r3, [pc, #4]	@ (800684c <__errno+0x8>)
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	20000028 	.word	0x20000028

08006850 <__libc_init_array>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	4d0d      	ldr	r5, [pc, #52]	@ (8006888 <__libc_init_array+0x38>)
 8006854:	4c0d      	ldr	r4, [pc, #52]	@ (800688c <__libc_init_array+0x3c>)
 8006856:	1b64      	subs	r4, r4, r5
 8006858:	10a4      	asrs	r4, r4, #2
 800685a:	2600      	movs	r6, #0
 800685c:	42a6      	cmp	r6, r4
 800685e:	d109      	bne.n	8006874 <__libc_init_array+0x24>
 8006860:	4d0b      	ldr	r5, [pc, #44]	@ (8006890 <__libc_init_array+0x40>)
 8006862:	4c0c      	ldr	r4, [pc, #48]	@ (8006894 <__libc_init_array+0x44>)
 8006864:	f001 ffa0 	bl	80087a8 <_init>
 8006868:	1b64      	subs	r4, r4, r5
 800686a:	10a4      	asrs	r4, r4, #2
 800686c:	2600      	movs	r6, #0
 800686e:	42a6      	cmp	r6, r4
 8006870:	d105      	bne.n	800687e <__libc_init_array+0x2e>
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	f855 3b04 	ldr.w	r3, [r5], #4
 8006878:	4798      	blx	r3
 800687a:	3601      	adds	r6, #1
 800687c:	e7ee      	b.n	800685c <__libc_init_array+0xc>
 800687e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006882:	4798      	blx	r3
 8006884:	3601      	adds	r6, #1
 8006886:	e7f2      	b.n	800686e <__libc_init_array+0x1e>
 8006888:	08008f98 	.word	0x08008f98
 800688c:	08008f98 	.word	0x08008f98
 8006890:	08008f98 	.word	0x08008f98
 8006894:	08008f9c 	.word	0x08008f9c

08006898 <__retarget_lock_init_recursive>:
 8006898:	4770      	bx	lr

0800689a <__retarget_lock_acquire_recursive>:
 800689a:	4770      	bx	lr

0800689c <__retarget_lock_release_recursive>:
 800689c:	4770      	bx	lr

0800689e <memcpy>:
 800689e:	440a      	add	r2, r1
 80068a0:	4291      	cmp	r1, r2
 80068a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80068a6:	d100      	bne.n	80068aa <memcpy+0xc>
 80068a8:	4770      	bx	lr
 80068aa:	b510      	push	{r4, lr}
 80068ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068b4:	4291      	cmp	r1, r2
 80068b6:	d1f9      	bne.n	80068ac <memcpy+0xe>
 80068b8:	bd10      	pop	{r4, pc}

080068ba <quorem>:
 80068ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068be:	6903      	ldr	r3, [r0, #16]
 80068c0:	690c      	ldr	r4, [r1, #16]
 80068c2:	42a3      	cmp	r3, r4
 80068c4:	4607      	mov	r7, r0
 80068c6:	db7e      	blt.n	80069c6 <quorem+0x10c>
 80068c8:	3c01      	subs	r4, #1
 80068ca:	f101 0814 	add.w	r8, r1, #20
 80068ce:	00a3      	lsls	r3, r4, #2
 80068d0:	f100 0514 	add.w	r5, r0, #20
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068da:	9301      	str	r3, [sp, #4]
 80068dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068e4:	3301      	adds	r3, #1
 80068e6:	429a      	cmp	r2, r3
 80068e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80068f0:	d32e      	bcc.n	8006950 <quorem+0x96>
 80068f2:	f04f 0a00 	mov.w	sl, #0
 80068f6:	46c4      	mov	ip, r8
 80068f8:	46ae      	mov	lr, r5
 80068fa:	46d3      	mov	fp, sl
 80068fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006900:	b298      	uxth	r0, r3
 8006902:	fb06 a000 	mla	r0, r6, r0, sl
 8006906:	0c02      	lsrs	r2, r0, #16
 8006908:	0c1b      	lsrs	r3, r3, #16
 800690a:	fb06 2303 	mla	r3, r6, r3, r2
 800690e:	f8de 2000 	ldr.w	r2, [lr]
 8006912:	b280      	uxth	r0, r0
 8006914:	b292      	uxth	r2, r2
 8006916:	1a12      	subs	r2, r2, r0
 8006918:	445a      	add	r2, fp
 800691a:	f8de 0000 	ldr.w	r0, [lr]
 800691e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006922:	b29b      	uxth	r3, r3
 8006924:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006928:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800692c:	b292      	uxth	r2, r2
 800692e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006932:	45e1      	cmp	r9, ip
 8006934:	f84e 2b04 	str.w	r2, [lr], #4
 8006938:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800693c:	d2de      	bcs.n	80068fc <quorem+0x42>
 800693e:	9b00      	ldr	r3, [sp, #0]
 8006940:	58eb      	ldr	r3, [r5, r3]
 8006942:	b92b      	cbnz	r3, 8006950 <quorem+0x96>
 8006944:	9b01      	ldr	r3, [sp, #4]
 8006946:	3b04      	subs	r3, #4
 8006948:	429d      	cmp	r5, r3
 800694a:	461a      	mov	r2, r3
 800694c:	d32f      	bcc.n	80069ae <quorem+0xf4>
 800694e:	613c      	str	r4, [r7, #16]
 8006950:	4638      	mov	r0, r7
 8006952:	f001 f8c5 	bl	8007ae0 <__mcmp>
 8006956:	2800      	cmp	r0, #0
 8006958:	db25      	blt.n	80069a6 <quorem+0xec>
 800695a:	4629      	mov	r1, r5
 800695c:	2000      	movs	r0, #0
 800695e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006962:	f8d1 c000 	ldr.w	ip, [r1]
 8006966:	fa1f fe82 	uxth.w	lr, r2
 800696a:	fa1f f38c 	uxth.w	r3, ip
 800696e:	eba3 030e 	sub.w	r3, r3, lr
 8006972:	4403      	add	r3, r0
 8006974:	0c12      	lsrs	r2, r2, #16
 8006976:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800697a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800697e:	b29b      	uxth	r3, r3
 8006980:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006984:	45c1      	cmp	r9, r8
 8006986:	f841 3b04 	str.w	r3, [r1], #4
 800698a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800698e:	d2e6      	bcs.n	800695e <quorem+0xa4>
 8006990:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006994:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006998:	b922      	cbnz	r2, 80069a4 <quorem+0xea>
 800699a:	3b04      	subs	r3, #4
 800699c:	429d      	cmp	r5, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	d30b      	bcc.n	80069ba <quorem+0x100>
 80069a2:	613c      	str	r4, [r7, #16]
 80069a4:	3601      	adds	r6, #1
 80069a6:	4630      	mov	r0, r6
 80069a8:	b003      	add	sp, #12
 80069aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ae:	6812      	ldr	r2, [r2, #0]
 80069b0:	3b04      	subs	r3, #4
 80069b2:	2a00      	cmp	r2, #0
 80069b4:	d1cb      	bne.n	800694e <quorem+0x94>
 80069b6:	3c01      	subs	r4, #1
 80069b8:	e7c6      	b.n	8006948 <quorem+0x8e>
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	3b04      	subs	r3, #4
 80069be:	2a00      	cmp	r2, #0
 80069c0:	d1ef      	bne.n	80069a2 <quorem+0xe8>
 80069c2:	3c01      	subs	r4, #1
 80069c4:	e7ea      	b.n	800699c <quorem+0xe2>
 80069c6:	2000      	movs	r0, #0
 80069c8:	e7ee      	b.n	80069a8 <quorem+0xee>
 80069ca:	0000      	movs	r0, r0
 80069cc:	0000      	movs	r0, r0
	...

080069d0 <_dtoa_r>:
 80069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	69c7      	ldr	r7, [r0, #28]
 80069d6:	b099      	sub	sp, #100	@ 0x64
 80069d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80069dc:	ec55 4b10 	vmov	r4, r5, d0
 80069e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80069e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80069e4:	4683      	mov	fp, r0
 80069e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80069e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80069ea:	b97f      	cbnz	r7, 8006a0c <_dtoa_r+0x3c>
 80069ec:	2010      	movs	r0, #16
 80069ee:	f7ff f88b 	bl	8005b08 <malloc>
 80069f2:	4602      	mov	r2, r0
 80069f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80069f8:	b920      	cbnz	r0, 8006a04 <_dtoa_r+0x34>
 80069fa:	4ba7      	ldr	r3, [pc, #668]	@ (8006c98 <_dtoa_r+0x2c8>)
 80069fc:	21ef      	movs	r1, #239	@ 0xef
 80069fe:	48a7      	ldr	r0, [pc, #668]	@ (8006c9c <_dtoa_r+0x2cc>)
 8006a00:	f001 fb94 	bl	800812c <__assert_func>
 8006a04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a08:	6007      	str	r7, [r0, #0]
 8006a0a:	60c7      	str	r7, [r0, #12]
 8006a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a10:	6819      	ldr	r1, [r3, #0]
 8006a12:	b159      	cbz	r1, 8006a2c <_dtoa_r+0x5c>
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	604a      	str	r2, [r1, #4]
 8006a18:	2301      	movs	r3, #1
 8006a1a:	4093      	lsls	r3, r2
 8006a1c:	608b      	str	r3, [r1, #8]
 8006a1e:	4658      	mov	r0, fp
 8006a20:	f000 fe24 	bl	800766c <_Bfree>
 8006a24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	1e2b      	subs	r3, r5, #0
 8006a2e:	bfb9      	ittee	lt
 8006a30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a34:	9303      	strlt	r3, [sp, #12]
 8006a36:	2300      	movge	r3, #0
 8006a38:	6033      	strge	r3, [r6, #0]
 8006a3a:	9f03      	ldr	r7, [sp, #12]
 8006a3c:	4b98      	ldr	r3, [pc, #608]	@ (8006ca0 <_dtoa_r+0x2d0>)
 8006a3e:	bfbc      	itt	lt
 8006a40:	2201      	movlt	r2, #1
 8006a42:	6032      	strlt	r2, [r6, #0]
 8006a44:	43bb      	bics	r3, r7
 8006a46:	d112      	bne.n	8006a6e <_dtoa_r+0x9e>
 8006a48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a54:	4323      	orrs	r3, r4
 8006a56:	f000 854d 	beq.w	80074f4 <_dtoa_r+0xb24>
 8006a5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006cb4 <_dtoa_r+0x2e4>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 854f 	beq.w	8007504 <_dtoa_r+0xb34>
 8006a66:	f10a 0303 	add.w	r3, sl, #3
 8006a6a:	f000 bd49 	b.w	8007500 <_dtoa_r+0xb30>
 8006a6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a72:	2200      	movs	r2, #0
 8006a74:	ec51 0b17 	vmov	r0, r1, d7
 8006a78:	2300      	movs	r3, #0
 8006a7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006a7e:	f7fa f843 	bl	8000b08 <__aeabi_dcmpeq>
 8006a82:	4680      	mov	r8, r0
 8006a84:	b158      	cbz	r0, 8006a9e <_dtoa_r+0xce>
 8006a86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a88:	2301      	movs	r3, #1
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a8e:	b113      	cbz	r3, 8006a96 <_dtoa_r+0xc6>
 8006a90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a92:	4b84      	ldr	r3, [pc, #528]	@ (8006ca4 <_dtoa_r+0x2d4>)
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006cb8 <_dtoa_r+0x2e8>
 8006a9a:	f000 bd33 	b.w	8007504 <_dtoa_r+0xb34>
 8006a9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006aa2:	aa16      	add	r2, sp, #88	@ 0x58
 8006aa4:	a917      	add	r1, sp, #92	@ 0x5c
 8006aa6:	4658      	mov	r0, fp
 8006aa8:	f001 f8ca 	bl	8007c40 <__d2b>
 8006aac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ab0:	4681      	mov	r9, r0
 8006ab2:	2e00      	cmp	r6, #0
 8006ab4:	d077      	beq.n	8006ba6 <_dtoa_r+0x1d6>
 8006ab6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ab8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ac4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ac8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006acc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	4b74      	ldr	r3, [pc, #464]	@ (8006ca8 <_dtoa_r+0x2d8>)
 8006ad6:	f7f9 fbf7 	bl	80002c8 <__aeabi_dsub>
 8006ada:	a369      	add	r3, pc, #420	@ (adr r3, 8006c80 <_dtoa_r+0x2b0>)
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fdaa 	bl	8000638 <__aeabi_dmul>
 8006ae4:	a368      	add	r3, pc, #416	@ (adr r3, 8006c88 <_dtoa_r+0x2b8>)
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	f7f9 fbef 	bl	80002cc <__adddf3>
 8006aee:	4604      	mov	r4, r0
 8006af0:	4630      	mov	r0, r6
 8006af2:	460d      	mov	r5, r1
 8006af4:	f7f9 fd36 	bl	8000564 <__aeabi_i2d>
 8006af8:	a365      	add	r3, pc, #404	@ (adr r3, 8006c90 <_dtoa_r+0x2c0>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	f7f9 fd9b 	bl	8000638 <__aeabi_dmul>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4620      	mov	r0, r4
 8006b08:	4629      	mov	r1, r5
 8006b0a:	f7f9 fbdf 	bl	80002cc <__adddf3>
 8006b0e:	4604      	mov	r4, r0
 8006b10:	460d      	mov	r5, r1
 8006b12:	f7fa f841 	bl	8000b98 <__aeabi_d2iz>
 8006b16:	2200      	movs	r2, #0
 8006b18:	4607      	mov	r7, r0
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	4629      	mov	r1, r5
 8006b20:	f7f9 fffc 	bl	8000b1c <__aeabi_dcmplt>
 8006b24:	b140      	cbz	r0, 8006b38 <_dtoa_r+0x168>
 8006b26:	4638      	mov	r0, r7
 8006b28:	f7f9 fd1c 	bl	8000564 <__aeabi_i2d>
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	462b      	mov	r3, r5
 8006b30:	f7f9 ffea 	bl	8000b08 <__aeabi_dcmpeq>
 8006b34:	b900      	cbnz	r0, 8006b38 <_dtoa_r+0x168>
 8006b36:	3f01      	subs	r7, #1
 8006b38:	2f16      	cmp	r7, #22
 8006b3a:	d851      	bhi.n	8006be0 <_dtoa_r+0x210>
 8006b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8006cac <_dtoa_r+0x2dc>)
 8006b3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b4a:	f7f9 ffe7 	bl	8000b1c <__aeabi_dcmplt>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d048      	beq.n	8006be4 <_dtoa_r+0x214>
 8006b52:	3f01      	subs	r7, #1
 8006b54:	2300      	movs	r3, #0
 8006b56:	9312      	str	r3, [sp, #72]	@ 0x48
 8006b58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b5a:	1b9b      	subs	r3, r3, r6
 8006b5c:	1e5a      	subs	r2, r3, #1
 8006b5e:	bf44      	itt	mi
 8006b60:	f1c3 0801 	rsbmi	r8, r3, #1
 8006b64:	2300      	movmi	r3, #0
 8006b66:	9208      	str	r2, [sp, #32]
 8006b68:	bf54      	ite	pl
 8006b6a:	f04f 0800 	movpl.w	r8, #0
 8006b6e:	9308      	strmi	r3, [sp, #32]
 8006b70:	2f00      	cmp	r7, #0
 8006b72:	db39      	blt.n	8006be8 <_dtoa_r+0x218>
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006b78:	443b      	add	r3, r7
 8006b7a:	9308      	str	r3, [sp, #32]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b82:	2b09      	cmp	r3, #9
 8006b84:	d864      	bhi.n	8006c50 <_dtoa_r+0x280>
 8006b86:	2b05      	cmp	r3, #5
 8006b88:	bfc4      	itt	gt
 8006b8a:	3b04      	subgt	r3, #4
 8006b8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b90:	f1a3 0302 	sub.w	r3, r3, #2
 8006b94:	bfcc      	ite	gt
 8006b96:	2400      	movgt	r4, #0
 8006b98:	2401      	movle	r4, #1
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d863      	bhi.n	8006c66 <_dtoa_r+0x296>
 8006b9e:	e8df f003 	tbb	[pc, r3]
 8006ba2:	372a      	.short	0x372a
 8006ba4:	5535      	.short	0x5535
 8006ba6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006baa:	441e      	add	r6, r3
 8006bac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	bfc1      	itttt	gt
 8006bb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006bb8:	409f      	lslgt	r7, r3
 8006bba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006bbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006bc2:	bfd6      	itet	le
 8006bc4:	f1c3 0320 	rsble	r3, r3, #32
 8006bc8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006bcc:	fa04 f003 	lslle.w	r0, r4, r3
 8006bd0:	f7f9 fcb8 	bl	8000544 <__aeabi_ui2d>
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006bda:	3e01      	subs	r6, #1
 8006bdc:	9214      	str	r2, [sp, #80]	@ 0x50
 8006bde:	e777      	b.n	8006ad0 <_dtoa_r+0x100>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e7b8      	b.n	8006b56 <_dtoa_r+0x186>
 8006be4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006be6:	e7b7      	b.n	8006b58 <_dtoa_r+0x188>
 8006be8:	427b      	negs	r3, r7
 8006bea:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bec:	2300      	movs	r3, #0
 8006bee:	eba8 0807 	sub.w	r8, r8, r7
 8006bf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006bf4:	e7c4      	b.n	8006b80 <_dtoa_r+0x1b0>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	dc35      	bgt.n	8006c6c <_dtoa_r+0x29c>
 8006c00:	2301      	movs	r3, #1
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	9307      	str	r3, [sp, #28]
 8006c06:	461a      	mov	r2, r3
 8006c08:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c0a:	e00b      	b.n	8006c24 <_dtoa_r+0x254>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e7f3      	b.n	8006bf8 <_dtoa_r+0x228>
 8006c10:	2300      	movs	r3, #0
 8006c12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c16:	18fb      	adds	r3, r7, r3
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	9307      	str	r3, [sp, #28]
 8006c20:	bfb8      	it	lt
 8006c22:	2301      	movlt	r3, #1
 8006c24:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006c28:	2100      	movs	r1, #0
 8006c2a:	2204      	movs	r2, #4
 8006c2c:	f102 0514 	add.w	r5, r2, #20
 8006c30:	429d      	cmp	r5, r3
 8006c32:	d91f      	bls.n	8006c74 <_dtoa_r+0x2a4>
 8006c34:	6041      	str	r1, [r0, #4]
 8006c36:	4658      	mov	r0, fp
 8006c38:	f000 fcd8 	bl	80075ec <_Balloc>
 8006c3c:	4682      	mov	sl, r0
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d13c      	bne.n	8006cbc <_dtoa_r+0x2ec>
 8006c42:	4b1b      	ldr	r3, [pc, #108]	@ (8006cb0 <_dtoa_r+0x2e0>)
 8006c44:	4602      	mov	r2, r0
 8006c46:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c4a:	e6d8      	b.n	80069fe <_dtoa_r+0x2e>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e7e0      	b.n	8006c12 <_dtoa_r+0x242>
 8006c50:	2401      	movs	r4, #1
 8006c52:	2300      	movs	r3, #0
 8006c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c56:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c58:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	9307      	str	r3, [sp, #28]
 8006c60:	2200      	movs	r2, #0
 8006c62:	2312      	movs	r3, #18
 8006c64:	e7d0      	b.n	8006c08 <_dtoa_r+0x238>
 8006c66:	2301      	movs	r3, #1
 8006c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c6a:	e7f5      	b.n	8006c58 <_dtoa_r+0x288>
 8006c6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	9307      	str	r3, [sp, #28]
 8006c72:	e7d7      	b.n	8006c24 <_dtoa_r+0x254>
 8006c74:	3101      	adds	r1, #1
 8006c76:	0052      	lsls	r2, r2, #1
 8006c78:	e7d8      	b.n	8006c2c <_dtoa_r+0x25c>
 8006c7a:	bf00      	nop
 8006c7c:	f3af 8000 	nop.w
 8006c80:	636f4361 	.word	0x636f4361
 8006c84:	3fd287a7 	.word	0x3fd287a7
 8006c88:	8b60c8b3 	.word	0x8b60c8b3
 8006c8c:	3fc68a28 	.word	0x3fc68a28
 8006c90:	509f79fb 	.word	0x509f79fb
 8006c94:	3fd34413 	.word	0x3fd34413
 8006c98:	08008c61 	.word	0x08008c61
 8006c9c:	08008c78 	.word	0x08008c78
 8006ca0:	7ff00000 	.word	0x7ff00000
 8006ca4:	08008c31 	.word	0x08008c31
 8006ca8:	3ff80000 	.word	0x3ff80000
 8006cac:	08008d70 	.word	0x08008d70
 8006cb0:	08008cd0 	.word	0x08008cd0
 8006cb4:	08008c5d 	.word	0x08008c5d
 8006cb8:	08008c30 	.word	0x08008c30
 8006cbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cc0:	6018      	str	r0, [r3, #0]
 8006cc2:	9b07      	ldr	r3, [sp, #28]
 8006cc4:	2b0e      	cmp	r3, #14
 8006cc6:	f200 80a4 	bhi.w	8006e12 <_dtoa_r+0x442>
 8006cca:	2c00      	cmp	r4, #0
 8006ccc:	f000 80a1 	beq.w	8006e12 <_dtoa_r+0x442>
 8006cd0:	2f00      	cmp	r7, #0
 8006cd2:	dd33      	ble.n	8006d3c <_dtoa_r+0x36c>
 8006cd4:	4bad      	ldr	r3, [pc, #692]	@ (8006f8c <_dtoa_r+0x5bc>)
 8006cd6:	f007 020f 	and.w	r2, r7, #15
 8006cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cde:	ed93 7b00 	vldr	d7, [r3]
 8006ce2:	05f8      	lsls	r0, r7, #23
 8006ce4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006ce8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006cec:	d516      	bpl.n	8006d1c <_dtoa_r+0x34c>
 8006cee:	4ba8      	ldr	r3, [pc, #672]	@ (8006f90 <_dtoa_r+0x5c0>)
 8006cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cf8:	f7f9 fdc8 	bl	800088c <__aeabi_ddiv>
 8006cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d00:	f004 040f 	and.w	r4, r4, #15
 8006d04:	2603      	movs	r6, #3
 8006d06:	4da2      	ldr	r5, [pc, #648]	@ (8006f90 <_dtoa_r+0x5c0>)
 8006d08:	b954      	cbnz	r4, 8006d20 <_dtoa_r+0x350>
 8006d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d12:	f7f9 fdbb 	bl	800088c <__aeabi_ddiv>
 8006d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d1a:	e028      	b.n	8006d6e <_dtoa_r+0x39e>
 8006d1c:	2602      	movs	r6, #2
 8006d1e:	e7f2      	b.n	8006d06 <_dtoa_r+0x336>
 8006d20:	07e1      	lsls	r1, r4, #31
 8006d22:	d508      	bpl.n	8006d36 <_dtoa_r+0x366>
 8006d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d2c:	f7f9 fc84 	bl	8000638 <__aeabi_dmul>
 8006d30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d34:	3601      	adds	r6, #1
 8006d36:	1064      	asrs	r4, r4, #1
 8006d38:	3508      	adds	r5, #8
 8006d3a:	e7e5      	b.n	8006d08 <_dtoa_r+0x338>
 8006d3c:	f000 80d2 	beq.w	8006ee4 <_dtoa_r+0x514>
 8006d40:	427c      	negs	r4, r7
 8006d42:	4b92      	ldr	r3, [pc, #584]	@ (8006f8c <_dtoa_r+0x5bc>)
 8006d44:	4d92      	ldr	r5, [pc, #584]	@ (8006f90 <_dtoa_r+0x5c0>)
 8006d46:	f004 020f 	and.w	r2, r4, #15
 8006d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d56:	f7f9 fc6f 	bl	8000638 <__aeabi_dmul>
 8006d5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5e:	1124      	asrs	r4, r4, #4
 8006d60:	2300      	movs	r3, #0
 8006d62:	2602      	movs	r6, #2
 8006d64:	2c00      	cmp	r4, #0
 8006d66:	f040 80b2 	bne.w	8006ece <_dtoa_r+0x4fe>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1d3      	bne.n	8006d16 <_dtoa_r+0x346>
 8006d6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80b7 	beq.w	8006ee8 <_dtoa_r+0x518>
 8006d7a:	4b86      	ldr	r3, [pc, #536]	@ (8006f94 <_dtoa_r+0x5c4>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4629      	mov	r1, r5
 8006d82:	f7f9 fecb 	bl	8000b1c <__aeabi_dcmplt>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	f000 80ae 	beq.w	8006ee8 <_dtoa_r+0x518>
 8006d8c:	9b07      	ldr	r3, [sp, #28]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 80aa 	beq.w	8006ee8 <_dtoa_r+0x518>
 8006d94:	9b00      	ldr	r3, [sp, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	dd37      	ble.n	8006e0a <_dtoa_r+0x43a>
 8006d9a:	1e7b      	subs	r3, r7, #1
 8006d9c:	9304      	str	r3, [sp, #16]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	4b7d      	ldr	r3, [pc, #500]	@ (8006f98 <_dtoa_r+0x5c8>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	4629      	mov	r1, r5
 8006da6:	f7f9 fc47 	bl	8000638 <__aeabi_dmul>
 8006daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dae:	9c00      	ldr	r4, [sp, #0]
 8006db0:	3601      	adds	r6, #1
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7f9 fbd6 	bl	8000564 <__aeabi_i2d>
 8006db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dbc:	f7f9 fc3c 	bl	8000638 <__aeabi_dmul>
 8006dc0:	4b76      	ldr	r3, [pc, #472]	@ (8006f9c <_dtoa_r+0x5cc>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f7f9 fa82 	bl	80002cc <__adddf3>
 8006dc8:	4605      	mov	r5, r0
 8006dca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006dce:	2c00      	cmp	r4, #0
 8006dd0:	f040 808d 	bne.w	8006eee <_dtoa_r+0x51e>
 8006dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dd8:	4b71      	ldr	r3, [pc, #452]	@ (8006fa0 <_dtoa_r+0x5d0>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f7f9 fa74 	bl	80002c8 <__aeabi_dsub>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006de8:	462a      	mov	r2, r5
 8006dea:	4633      	mov	r3, r6
 8006dec:	f7f9 feb4 	bl	8000b58 <__aeabi_dcmpgt>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	f040 828b 	bne.w	800730c <_dtoa_r+0x93c>
 8006df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dfa:	462a      	mov	r2, r5
 8006dfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e00:	f7f9 fe8c 	bl	8000b1c <__aeabi_dcmplt>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	f040 8128 	bne.w	800705a <_dtoa_r+0x68a>
 8006e0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f2c0 815a 	blt.w	80070ce <_dtoa_r+0x6fe>
 8006e1a:	2f0e      	cmp	r7, #14
 8006e1c:	f300 8157 	bgt.w	80070ce <_dtoa_r+0x6fe>
 8006e20:	4b5a      	ldr	r3, [pc, #360]	@ (8006f8c <_dtoa_r+0x5bc>)
 8006e22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e26:	ed93 7b00 	vldr	d7, [r3]
 8006e2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	ed8d 7b00 	vstr	d7, [sp]
 8006e32:	da03      	bge.n	8006e3c <_dtoa_r+0x46c>
 8006e34:	9b07      	ldr	r3, [sp, #28]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f340 8101 	ble.w	800703e <_dtoa_r+0x66e>
 8006e3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e40:	4656      	mov	r6, sl
 8006e42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e46:	4620      	mov	r0, r4
 8006e48:	4629      	mov	r1, r5
 8006e4a:	f7f9 fd1f 	bl	800088c <__aeabi_ddiv>
 8006e4e:	f7f9 fea3 	bl	8000b98 <__aeabi_d2iz>
 8006e52:	4680      	mov	r8, r0
 8006e54:	f7f9 fb86 	bl	8000564 <__aeabi_i2d>
 8006e58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e5c:	f7f9 fbec 	bl	8000638 <__aeabi_dmul>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4620      	mov	r0, r4
 8006e66:	4629      	mov	r1, r5
 8006e68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e6c:	f7f9 fa2c 	bl	80002c8 <__aeabi_dsub>
 8006e70:	f806 4b01 	strb.w	r4, [r6], #1
 8006e74:	9d07      	ldr	r5, [sp, #28]
 8006e76:	eba6 040a 	sub.w	r4, r6, sl
 8006e7a:	42a5      	cmp	r5, r4
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	f040 8117 	bne.w	80070b2 <_dtoa_r+0x6e2>
 8006e84:	f7f9 fa22 	bl	80002cc <__adddf3>
 8006e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	460d      	mov	r5, r1
 8006e90:	f7f9 fe62 	bl	8000b58 <__aeabi_dcmpgt>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	f040 80f9 	bne.w	800708c <_dtoa_r+0x6bc>
 8006e9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	f7f9 fe31 	bl	8000b08 <__aeabi_dcmpeq>
 8006ea6:	b118      	cbz	r0, 8006eb0 <_dtoa_r+0x4e0>
 8006ea8:	f018 0f01 	tst.w	r8, #1
 8006eac:	f040 80ee 	bne.w	800708c <_dtoa_r+0x6bc>
 8006eb0:	4649      	mov	r1, r9
 8006eb2:	4658      	mov	r0, fp
 8006eb4:	f000 fbda 	bl	800766c <_Bfree>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	7033      	strb	r3, [r6, #0]
 8006ebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ebe:	3701      	adds	r7, #1
 8006ec0:	601f      	str	r7, [r3, #0]
 8006ec2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 831d 	beq.w	8007504 <_dtoa_r+0xb34>
 8006eca:	601e      	str	r6, [r3, #0]
 8006ecc:	e31a      	b.n	8007504 <_dtoa_r+0xb34>
 8006ece:	07e2      	lsls	r2, r4, #31
 8006ed0:	d505      	bpl.n	8006ede <_dtoa_r+0x50e>
 8006ed2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ed6:	f7f9 fbaf 	bl	8000638 <__aeabi_dmul>
 8006eda:	3601      	adds	r6, #1
 8006edc:	2301      	movs	r3, #1
 8006ede:	1064      	asrs	r4, r4, #1
 8006ee0:	3508      	adds	r5, #8
 8006ee2:	e73f      	b.n	8006d64 <_dtoa_r+0x394>
 8006ee4:	2602      	movs	r6, #2
 8006ee6:	e742      	b.n	8006d6e <_dtoa_r+0x39e>
 8006ee8:	9c07      	ldr	r4, [sp, #28]
 8006eea:	9704      	str	r7, [sp, #16]
 8006eec:	e761      	b.n	8006db2 <_dtoa_r+0x3e2>
 8006eee:	4b27      	ldr	r3, [pc, #156]	@ (8006f8c <_dtoa_r+0x5bc>)
 8006ef0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ef6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006efa:	4454      	add	r4, sl
 8006efc:	2900      	cmp	r1, #0
 8006efe:	d053      	beq.n	8006fa8 <_dtoa_r+0x5d8>
 8006f00:	4928      	ldr	r1, [pc, #160]	@ (8006fa4 <_dtoa_r+0x5d4>)
 8006f02:	2000      	movs	r0, #0
 8006f04:	f7f9 fcc2 	bl	800088c <__aeabi_ddiv>
 8006f08:	4633      	mov	r3, r6
 8006f0a:	462a      	mov	r2, r5
 8006f0c:	f7f9 f9dc 	bl	80002c8 <__aeabi_dsub>
 8006f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f14:	4656      	mov	r6, sl
 8006f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f1a:	f7f9 fe3d 	bl	8000b98 <__aeabi_d2iz>
 8006f1e:	4605      	mov	r5, r0
 8006f20:	f7f9 fb20 	bl	8000564 <__aeabi_i2d>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f2c:	f7f9 f9cc 	bl	80002c8 <__aeabi_dsub>
 8006f30:	3530      	adds	r5, #48	@ 0x30
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f3a:	f806 5b01 	strb.w	r5, [r6], #1
 8006f3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f42:	f7f9 fdeb 	bl	8000b1c <__aeabi_dcmplt>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d171      	bne.n	800702e <_dtoa_r+0x65e>
 8006f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f4e:	4911      	ldr	r1, [pc, #68]	@ (8006f94 <_dtoa_r+0x5c4>)
 8006f50:	2000      	movs	r0, #0
 8006f52:	f7f9 f9b9 	bl	80002c8 <__aeabi_dsub>
 8006f56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f5a:	f7f9 fddf 	bl	8000b1c <__aeabi_dcmplt>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	f040 8095 	bne.w	800708e <_dtoa_r+0x6be>
 8006f64:	42a6      	cmp	r6, r4
 8006f66:	f43f af50 	beq.w	8006e0a <_dtoa_r+0x43a>
 8006f6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f98 <_dtoa_r+0x5c8>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	f7f9 fb61 	bl	8000638 <__aeabi_dmul>
 8006f76:	4b08      	ldr	r3, [pc, #32]	@ (8006f98 <_dtoa_r+0x5c8>)
 8006f78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f82:	f7f9 fb59 	bl	8000638 <__aeabi_dmul>
 8006f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f8a:	e7c4      	b.n	8006f16 <_dtoa_r+0x546>
 8006f8c:	08008d70 	.word	0x08008d70
 8006f90:	08008d48 	.word	0x08008d48
 8006f94:	3ff00000 	.word	0x3ff00000
 8006f98:	40240000 	.word	0x40240000
 8006f9c:	401c0000 	.word	0x401c0000
 8006fa0:	40140000 	.word	0x40140000
 8006fa4:	3fe00000 	.word	0x3fe00000
 8006fa8:	4631      	mov	r1, r6
 8006faa:	4628      	mov	r0, r5
 8006fac:	f7f9 fb44 	bl	8000638 <__aeabi_dmul>
 8006fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fb4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006fb6:	4656      	mov	r6, sl
 8006fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fbc:	f7f9 fdec 	bl	8000b98 <__aeabi_d2iz>
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	f7f9 facf 	bl	8000564 <__aeabi_i2d>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fce:	f7f9 f97b 	bl	80002c8 <__aeabi_dsub>
 8006fd2:	3530      	adds	r5, #48	@ 0x30
 8006fd4:	f806 5b01 	strb.w	r5, [r6], #1
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	42a6      	cmp	r6, r4
 8006fde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fe2:	f04f 0200 	mov.w	r2, #0
 8006fe6:	d124      	bne.n	8007032 <_dtoa_r+0x662>
 8006fe8:	4bac      	ldr	r3, [pc, #688]	@ (800729c <_dtoa_r+0x8cc>)
 8006fea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fee:	f7f9 f96d 	bl	80002cc <__adddf3>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ffa:	f7f9 fdad 	bl	8000b58 <__aeabi_dcmpgt>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d145      	bne.n	800708e <_dtoa_r+0x6be>
 8007002:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007006:	49a5      	ldr	r1, [pc, #660]	@ (800729c <_dtoa_r+0x8cc>)
 8007008:	2000      	movs	r0, #0
 800700a:	f7f9 f95d 	bl	80002c8 <__aeabi_dsub>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007016:	f7f9 fd81 	bl	8000b1c <__aeabi_dcmplt>
 800701a:	2800      	cmp	r0, #0
 800701c:	f43f aef5 	beq.w	8006e0a <_dtoa_r+0x43a>
 8007020:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007022:	1e73      	subs	r3, r6, #1
 8007024:	9315      	str	r3, [sp, #84]	@ 0x54
 8007026:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800702a:	2b30      	cmp	r3, #48	@ 0x30
 800702c:	d0f8      	beq.n	8007020 <_dtoa_r+0x650>
 800702e:	9f04      	ldr	r7, [sp, #16]
 8007030:	e73e      	b.n	8006eb0 <_dtoa_r+0x4e0>
 8007032:	4b9b      	ldr	r3, [pc, #620]	@ (80072a0 <_dtoa_r+0x8d0>)
 8007034:	f7f9 fb00 	bl	8000638 <__aeabi_dmul>
 8007038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800703c:	e7bc      	b.n	8006fb8 <_dtoa_r+0x5e8>
 800703e:	d10c      	bne.n	800705a <_dtoa_r+0x68a>
 8007040:	4b98      	ldr	r3, [pc, #608]	@ (80072a4 <_dtoa_r+0x8d4>)
 8007042:	2200      	movs	r2, #0
 8007044:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007048:	f7f9 faf6 	bl	8000638 <__aeabi_dmul>
 800704c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007050:	f7f9 fd78 	bl	8000b44 <__aeabi_dcmpge>
 8007054:	2800      	cmp	r0, #0
 8007056:	f000 8157 	beq.w	8007308 <_dtoa_r+0x938>
 800705a:	2400      	movs	r4, #0
 800705c:	4625      	mov	r5, r4
 800705e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007060:	43db      	mvns	r3, r3
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	4656      	mov	r6, sl
 8007066:	2700      	movs	r7, #0
 8007068:	4621      	mov	r1, r4
 800706a:	4658      	mov	r0, fp
 800706c:	f000 fafe 	bl	800766c <_Bfree>
 8007070:	2d00      	cmp	r5, #0
 8007072:	d0dc      	beq.n	800702e <_dtoa_r+0x65e>
 8007074:	b12f      	cbz	r7, 8007082 <_dtoa_r+0x6b2>
 8007076:	42af      	cmp	r7, r5
 8007078:	d003      	beq.n	8007082 <_dtoa_r+0x6b2>
 800707a:	4639      	mov	r1, r7
 800707c:	4658      	mov	r0, fp
 800707e:	f000 faf5 	bl	800766c <_Bfree>
 8007082:	4629      	mov	r1, r5
 8007084:	4658      	mov	r0, fp
 8007086:	f000 faf1 	bl	800766c <_Bfree>
 800708a:	e7d0      	b.n	800702e <_dtoa_r+0x65e>
 800708c:	9704      	str	r7, [sp, #16]
 800708e:	4633      	mov	r3, r6
 8007090:	461e      	mov	r6, r3
 8007092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007096:	2a39      	cmp	r2, #57	@ 0x39
 8007098:	d107      	bne.n	80070aa <_dtoa_r+0x6da>
 800709a:	459a      	cmp	sl, r3
 800709c:	d1f8      	bne.n	8007090 <_dtoa_r+0x6c0>
 800709e:	9a04      	ldr	r2, [sp, #16]
 80070a0:	3201      	adds	r2, #1
 80070a2:	9204      	str	r2, [sp, #16]
 80070a4:	2230      	movs	r2, #48	@ 0x30
 80070a6:	f88a 2000 	strb.w	r2, [sl]
 80070aa:	781a      	ldrb	r2, [r3, #0]
 80070ac:	3201      	adds	r2, #1
 80070ae:	701a      	strb	r2, [r3, #0]
 80070b0:	e7bd      	b.n	800702e <_dtoa_r+0x65e>
 80070b2:	4b7b      	ldr	r3, [pc, #492]	@ (80072a0 <_dtoa_r+0x8d0>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	f7f9 fabf 	bl	8000638 <__aeabi_dmul>
 80070ba:	2200      	movs	r2, #0
 80070bc:	2300      	movs	r3, #0
 80070be:	4604      	mov	r4, r0
 80070c0:	460d      	mov	r5, r1
 80070c2:	f7f9 fd21 	bl	8000b08 <__aeabi_dcmpeq>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	f43f aebb 	beq.w	8006e42 <_dtoa_r+0x472>
 80070cc:	e6f0      	b.n	8006eb0 <_dtoa_r+0x4e0>
 80070ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80070d0:	2a00      	cmp	r2, #0
 80070d2:	f000 80db 	beq.w	800728c <_dtoa_r+0x8bc>
 80070d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070d8:	2a01      	cmp	r2, #1
 80070da:	f300 80bf 	bgt.w	800725c <_dtoa_r+0x88c>
 80070de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80070e0:	2a00      	cmp	r2, #0
 80070e2:	f000 80b7 	beq.w	8007254 <_dtoa_r+0x884>
 80070e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80070ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070ec:	4646      	mov	r6, r8
 80070ee:	9a08      	ldr	r2, [sp, #32]
 80070f0:	2101      	movs	r1, #1
 80070f2:	441a      	add	r2, r3
 80070f4:	4658      	mov	r0, fp
 80070f6:	4498      	add	r8, r3
 80070f8:	9208      	str	r2, [sp, #32]
 80070fa:	f000 fb6b 	bl	80077d4 <__i2b>
 80070fe:	4605      	mov	r5, r0
 8007100:	b15e      	cbz	r6, 800711a <_dtoa_r+0x74a>
 8007102:	9b08      	ldr	r3, [sp, #32]
 8007104:	2b00      	cmp	r3, #0
 8007106:	dd08      	ble.n	800711a <_dtoa_r+0x74a>
 8007108:	42b3      	cmp	r3, r6
 800710a:	9a08      	ldr	r2, [sp, #32]
 800710c:	bfa8      	it	ge
 800710e:	4633      	movge	r3, r6
 8007110:	eba8 0803 	sub.w	r8, r8, r3
 8007114:	1af6      	subs	r6, r6, r3
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	9308      	str	r3, [sp, #32]
 800711a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800711c:	b1f3      	cbz	r3, 800715c <_dtoa_r+0x78c>
 800711e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 80b7 	beq.w	8007294 <_dtoa_r+0x8c4>
 8007126:	b18c      	cbz	r4, 800714c <_dtoa_r+0x77c>
 8007128:	4629      	mov	r1, r5
 800712a:	4622      	mov	r2, r4
 800712c:	4658      	mov	r0, fp
 800712e:	f000 fc11 	bl	8007954 <__pow5mult>
 8007132:	464a      	mov	r2, r9
 8007134:	4601      	mov	r1, r0
 8007136:	4605      	mov	r5, r0
 8007138:	4658      	mov	r0, fp
 800713a:	f000 fb61 	bl	8007800 <__multiply>
 800713e:	4649      	mov	r1, r9
 8007140:	9004      	str	r0, [sp, #16]
 8007142:	4658      	mov	r0, fp
 8007144:	f000 fa92 	bl	800766c <_Bfree>
 8007148:	9b04      	ldr	r3, [sp, #16]
 800714a:	4699      	mov	r9, r3
 800714c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800714e:	1b1a      	subs	r2, r3, r4
 8007150:	d004      	beq.n	800715c <_dtoa_r+0x78c>
 8007152:	4649      	mov	r1, r9
 8007154:	4658      	mov	r0, fp
 8007156:	f000 fbfd 	bl	8007954 <__pow5mult>
 800715a:	4681      	mov	r9, r0
 800715c:	2101      	movs	r1, #1
 800715e:	4658      	mov	r0, fp
 8007160:	f000 fb38 	bl	80077d4 <__i2b>
 8007164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007166:	4604      	mov	r4, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 81cf 	beq.w	800750c <_dtoa_r+0xb3c>
 800716e:	461a      	mov	r2, r3
 8007170:	4601      	mov	r1, r0
 8007172:	4658      	mov	r0, fp
 8007174:	f000 fbee 	bl	8007954 <__pow5mult>
 8007178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800717a:	2b01      	cmp	r3, #1
 800717c:	4604      	mov	r4, r0
 800717e:	f300 8095 	bgt.w	80072ac <_dtoa_r+0x8dc>
 8007182:	9b02      	ldr	r3, [sp, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	f040 8087 	bne.w	8007298 <_dtoa_r+0x8c8>
 800718a:	9b03      	ldr	r3, [sp, #12]
 800718c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007190:	2b00      	cmp	r3, #0
 8007192:	f040 8089 	bne.w	80072a8 <_dtoa_r+0x8d8>
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800719c:	0d1b      	lsrs	r3, r3, #20
 800719e:	051b      	lsls	r3, r3, #20
 80071a0:	b12b      	cbz	r3, 80071ae <_dtoa_r+0x7de>
 80071a2:	9b08      	ldr	r3, [sp, #32]
 80071a4:	3301      	adds	r3, #1
 80071a6:	9308      	str	r3, [sp, #32]
 80071a8:	f108 0801 	add.w	r8, r8, #1
 80071ac:	2301      	movs	r3, #1
 80071ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80071b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 81b0 	beq.w	8007518 <_dtoa_r+0xb48>
 80071b8:	6923      	ldr	r3, [r4, #16]
 80071ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071be:	6918      	ldr	r0, [r3, #16]
 80071c0:	f000 fabc 	bl	800773c <__hi0bits>
 80071c4:	f1c0 0020 	rsb	r0, r0, #32
 80071c8:	9b08      	ldr	r3, [sp, #32]
 80071ca:	4418      	add	r0, r3
 80071cc:	f010 001f 	ands.w	r0, r0, #31
 80071d0:	d077      	beq.n	80072c2 <_dtoa_r+0x8f2>
 80071d2:	f1c0 0320 	rsb	r3, r0, #32
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	dd6b      	ble.n	80072b2 <_dtoa_r+0x8e2>
 80071da:	9b08      	ldr	r3, [sp, #32]
 80071dc:	f1c0 001c 	rsb	r0, r0, #28
 80071e0:	4403      	add	r3, r0
 80071e2:	4480      	add	r8, r0
 80071e4:	4406      	add	r6, r0
 80071e6:	9308      	str	r3, [sp, #32]
 80071e8:	f1b8 0f00 	cmp.w	r8, #0
 80071ec:	dd05      	ble.n	80071fa <_dtoa_r+0x82a>
 80071ee:	4649      	mov	r1, r9
 80071f0:	4642      	mov	r2, r8
 80071f2:	4658      	mov	r0, fp
 80071f4:	f000 fc08 	bl	8007a08 <__lshift>
 80071f8:	4681      	mov	r9, r0
 80071fa:	9b08      	ldr	r3, [sp, #32]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	dd05      	ble.n	800720c <_dtoa_r+0x83c>
 8007200:	4621      	mov	r1, r4
 8007202:	461a      	mov	r2, r3
 8007204:	4658      	mov	r0, fp
 8007206:	f000 fbff 	bl	8007a08 <__lshift>
 800720a:	4604      	mov	r4, r0
 800720c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800720e:	2b00      	cmp	r3, #0
 8007210:	d059      	beq.n	80072c6 <_dtoa_r+0x8f6>
 8007212:	4621      	mov	r1, r4
 8007214:	4648      	mov	r0, r9
 8007216:	f000 fc63 	bl	8007ae0 <__mcmp>
 800721a:	2800      	cmp	r0, #0
 800721c:	da53      	bge.n	80072c6 <_dtoa_r+0x8f6>
 800721e:	1e7b      	subs	r3, r7, #1
 8007220:	9304      	str	r3, [sp, #16]
 8007222:	4649      	mov	r1, r9
 8007224:	2300      	movs	r3, #0
 8007226:	220a      	movs	r2, #10
 8007228:	4658      	mov	r0, fp
 800722a:	f000 fa41 	bl	80076b0 <__multadd>
 800722e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007230:	4681      	mov	r9, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 8172 	beq.w	800751c <_dtoa_r+0xb4c>
 8007238:	2300      	movs	r3, #0
 800723a:	4629      	mov	r1, r5
 800723c:	220a      	movs	r2, #10
 800723e:	4658      	mov	r0, fp
 8007240:	f000 fa36 	bl	80076b0 <__multadd>
 8007244:	9b00      	ldr	r3, [sp, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	4605      	mov	r5, r0
 800724a:	dc67      	bgt.n	800731c <_dtoa_r+0x94c>
 800724c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724e:	2b02      	cmp	r3, #2
 8007250:	dc41      	bgt.n	80072d6 <_dtoa_r+0x906>
 8007252:	e063      	b.n	800731c <_dtoa_r+0x94c>
 8007254:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007256:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800725a:	e746      	b.n	80070ea <_dtoa_r+0x71a>
 800725c:	9b07      	ldr	r3, [sp, #28]
 800725e:	1e5c      	subs	r4, r3, #1
 8007260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007262:	42a3      	cmp	r3, r4
 8007264:	bfbf      	itttt	lt
 8007266:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007268:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800726a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800726c:	1ae3      	sublt	r3, r4, r3
 800726e:	bfb4      	ite	lt
 8007270:	18d2      	addlt	r2, r2, r3
 8007272:	1b1c      	subge	r4, r3, r4
 8007274:	9b07      	ldr	r3, [sp, #28]
 8007276:	bfbc      	itt	lt
 8007278:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800727a:	2400      	movlt	r4, #0
 800727c:	2b00      	cmp	r3, #0
 800727e:	bfb5      	itete	lt
 8007280:	eba8 0603 	sublt.w	r6, r8, r3
 8007284:	9b07      	ldrge	r3, [sp, #28]
 8007286:	2300      	movlt	r3, #0
 8007288:	4646      	movge	r6, r8
 800728a:	e730      	b.n	80070ee <_dtoa_r+0x71e>
 800728c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800728e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007290:	4646      	mov	r6, r8
 8007292:	e735      	b.n	8007100 <_dtoa_r+0x730>
 8007294:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007296:	e75c      	b.n	8007152 <_dtoa_r+0x782>
 8007298:	2300      	movs	r3, #0
 800729a:	e788      	b.n	80071ae <_dtoa_r+0x7de>
 800729c:	3fe00000 	.word	0x3fe00000
 80072a0:	40240000 	.word	0x40240000
 80072a4:	40140000 	.word	0x40140000
 80072a8:	9b02      	ldr	r3, [sp, #8]
 80072aa:	e780      	b.n	80071ae <_dtoa_r+0x7de>
 80072ac:	2300      	movs	r3, #0
 80072ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80072b0:	e782      	b.n	80071b8 <_dtoa_r+0x7e8>
 80072b2:	d099      	beq.n	80071e8 <_dtoa_r+0x818>
 80072b4:	9a08      	ldr	r2, [sp, #32]
 80072b6:	331c      	adds	r3, #28
 80072b8:	441a      	add	r2, r3
 80072ba:	4498      	add	r8, r3
 80072bc:	441e      	add	r6, r3
 80072be:	9208      	str	r2, [sp, #32]
 80072c0:	e792      	b.n	80071e8 <_dtoa_r+0x818>
 80072c2:	4603      	mov	r3, r0
 80072c4:	e7f6      	b.n	80072b4 <_dtoa_r+0x8e4>
 80072c6:	9b07      	ldr	r3, [sp, #28]
 80072c8:	9704      	str	r7, [sp, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	dc20      	bgt.n	8007310 <_dtoa_r+0x940>
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	dd1e      	ble.n	8007314 <_dtoa_r+0x944>
 80072d6:	9b00      	ldr	r3, [sp, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f47f aec0 	bne.w	800705e <_dtoa_r+0x68e>
 80072de:	4621      	mov	r1, r4
 80072e0:	2205      	movs	r2, #5
 80072e2:	4658      	mov	r0, fp
 80072e4:	f000 f9e4 	bl	80076b0 <__multadd>
 80072e8:	4601      	mov	r1, r0
 80072ea:	4604      	mov	r4, r0
 80072ec:	4648      	mov	r0, r9
 80072ee:	f000 fbf7 	bl	8007ae0 <__mcmp>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	f77f aeb3 	ble.w	800705e <_dtoa_r+0x68e>
 80072f8:	4656      	mov	r6, sl
 80072fa:	2331      	movs	r3, #49	@ 0x31
 80072fc:	f806 3b01 	strb.w	r3, [r6], #1
 8007300:	9b04      	ldr	r3, [sp, #16]
 8007302:	3301      	adds	r3, #1
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	e6ae      	b.n	8007066 <_dtoa_r+0x696>
 8007308:	9c07      	ldr	r4, [sp, #28]
 800730a:	9704      	str	r7, [sp, #16]
 800730c:	4625      	mov	r5, r4
 800730e:	e7f3      	b.n	80072f8 <_dtoa_r+0x928>
 8007310:	9b07      	ldr	r3, [sp, #28]
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 8104 	beq.w	8007524 <_dtoa_r+0xb54>
 800731c:	2e00      	cmp	r6, #0
 800731e:	dd05      	ble.n	800732c <_dtoa_r+0x95c>
 8007320:	4629      	mov	r1, r5
 8007322:	4632      	mov	r2, r6
 8007324:	4658      	mov	r0, fp
 8007326:	f000 fb6f 	bl	8007a08 <__lshift>
 800732a:	4605      	mov	r5, r0
 800732c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800732e:	2b00      	cmp	r3, #0
 8007330:	d05a      	beq.n	80073e8 <_dtoa_r+0xa18>
 8007332:	6869      	ldr	r1, [r5, #4]
 8007334:	4658      	mov	r0, fp
 8007336:	f000 f959 	bl	80075ec <_Balloc>
 800733a:	4606      	mov	r6, r0
 800733c:	b928      	cbnz	r0, 800734a <_dtoa_r+0x97a>
 800733e:	4b84      	ldr	r3, [pc, #528]	@ (8007550 <_dtoa_r+0xb80>)
 8007340:	4602      	mov	r2, r0
 8007342:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007346:	f7ff bb5a 	b.w	80069fe <_dtoa_r+0x2e>
 800734a:	692a      	ldr	r2, [r5, #16]
 800734c:	3202      	adds	r2, #2
 800734e:	0092      	lsls	r2, r2, #2
 8007350:	f105 010c 	add.w	r1, r5, #12
 8007354:	300c      	adds	r0, #12
 8007356:	f7ff faa2 	bl	800689e <memcpy>
 800735a:	2201      	movs	r2, #1
 800735c:	4631      	mov	r1, r6
 800735e:	4658      	mov	r0, fp
 8007360:	f000 fb52 	bl	8007a08 <__lshift>
 8007364:	f10a 0301 	add.w	r3, sl, #1
 8007368:	9307      	str	r3, [sp, #28]
 800736a:	9b00      	ldr	r3, [sp, #0]
 800736c:	4453      	add	r3, sl
 800736e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007370:	9b02      	ldr	r3, [sp, #8]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	462f      	mov	r7, r5
 8007378:	930a      	str	r3, [sp, #40]	@ 0x28
 800737a:	4605      	mov	r5, r0
 800737c:	9b07      	ldr	r3, [sp, #28]
 800737e:	4621      	mov	r1, r4
 8007380:	3b01      	subs	r3, #1
 8007382:	4648      	mov	r0, r9
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	f7ff fa98 	bl	80068ba <quorem>
 800738a:	4639      	mov	r1, r7
 800738c:	9002      	str	r0, [sp, #8]
 800738e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007392:	4648      	mov	r0, r9
 8007394:	f000 fba4 	bl	8007ae0 <__mcmp>
 8007398:	462a      	mov	r2, r5
 800739a:	9008      	str	r0, [sp, #32]
 800739c:	4621      	mov	r1, r4
 800739e:	4658      	mov	r0, fp
 80073a0:	f000 fbba 	bl	8007b18 <__mdiff>
 80073a4:	68c2      	ldr	r2, [r0, #12]
 80073a6:	4606      	mov	r6, r0
 80073a8:	bb02      	cbnz	r2, 80073ec <_dtoa_r+0xa1c>
 80073aa:	4601      	mov	r1, r0
 80073ac:	4648      	mov	r0, r9
 80073ae:	f000 fb97 	bl	8007ae0 <__mcmp>
 80073b2:	4602      	mov	r2, r0
 80073b4:	4631      	mov	r1, r6
 80073b6:	4658      	mov	r0, fp
 80073b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80073ba:	f000 f957 	bl	800766c <_Bfree>
 80073be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073c2:	9e07      	ldr	r6, [sp, #28]
 80073c4:	ea43 0102 	orr.w	r1, r3, r2
 80073c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ca:	4319      	orrs	r1, r3
 80073cc:	d110      	bne.n	80073f0 <_dtoa_r+0xa20>
 80073ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073d2:	d029      	beq.n	8007428 <_dtoa_r+0xa58>
 80073d4:	9b08      	ldr	r3, [sp, #32]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	dd02      	ble.n	80073e0 <_dtoa_r+0xa10>
 80073da:	9b02      	ldr	r3, [sp, #8]
 80073dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80073e0:	9b00      	ldr	r3, [sp, #0]
 80073e2:	f883 8000 	strb.w	r8, [r3]
 80073e6:	e63f      	b.n	8007068 <_dtoa_r+0x698>
 80073e8:	4628      	mov	r0, r5
 80073ea:	e7bb      	b.n	8007364 <_dtoa_r+0x994>
 80073ec:	2201      	movs	r2, #1
 80073ee:	e7e1      	b.n	80073b4 <_dtoa_r+0x9e4>
 80073f0:	9b08      	ldr	r3, [sp, #32]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	db04      	blt.n	8007400 <_dtoa_r+0xa30>
 80073f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073f8:	430b      	orrs	r3, r1
 80073fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80073fc:	430b      	orrs	r3, r1
 80073fe:	d120      	bne.n	8007442 <_dtoa_r+0xa72>
 8007400:	2a00      	cmp	r2, #0
 8007402:	dded      	ble.n	80073e0 <_dtoa_r+0xa10>
 8007404:	4649      	mov	r1, r9
 8007406:	2201      	movs	r2, #1
 8007408:	4658      	mov	r0, fp
 800740a:	f000 fafd 	bl	8007a08 <__lshift>
 800740e:	4621      	mov	r1, r4
 8007410:	4681      	mov	r9, r0
 8007412:	f000 fb65 	bl	8007ae0 <__mcmp>
 8007416:	2800      	cmp	r0, #0
 8007418:	dc03      	bgt.n	8007422 <_dtoa_r+0xa52>
 800741a:	d1e1      	bne.n	80073e0 <_dtoa_r+0xa10>
 800741c:	f018 0f01 	tst.w	r8, #1
 8007420:	d0de      	beq.n	80073e0 <_dtoa_r+0xa10>
 8007422:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007426:	d1d8      	bne.n	80073da <_dtoa_r+0xa0a>
 8007428:	9a00      	ldr	r2, [sp, #0]
 800742a:	2339      	movs	r3, #57	@ 0x39
 800742c:	7013      	strb	r3, [r2, #0]
 800742e:	4633      	mov	r3, r6
 8007430:	461e      	mov	r6, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007438:	2a39      	cmp	r2, #57	@ 0x39
 800743a:	d052      	beq.n	80074e2 <_dtoa_r+0xb12>
 800743c:	3201      	adds	r2, #1
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	e612      	b.n	8007068 <_dtoa_r+0x698>
 8007442:	2a00      	cmp	r2, #0
 8007444:	dd07      	ble.n	8007456 <_dtoa_r+0xa86>
 8007446:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800744a:	d0ed      	beq.n	8007428 <_dtoa_r+0xa58>
 800744c:	9a00      	ldr	r2, [sp, #0]
 800744e:	f108 0301 	add.w	r3, r8, #1
 8007452:	7013      	strb	r3, [r2, #0]
 8007454:	e608      	b.n	8007068 <_dtoa_r+0x698>
 8007456:	9b07      	ldr	r3, [sp, #28]
 8007458:	9a07      	ldr	r2, [sp, #28]
 800745a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800745e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007460:	4293      	cmp	r3, r2
 8007462:	d028      	beq.n	80074b6 <_dtoa_r+0xae6>
 8007464:	4649      	mov	r1, r9
 8007466:	2300      	movs	r3, #0
 8007468:	220a      	movs	r2, #10
 800746a:	4658      	mov	r0, fp
 800746c:	f000 f920 	bl	80076b0 <__multadd>
 8007470:	42af      	cmp	r7, r5
 8007472:	4681      	mov	r9, r0
 8007474:	f04f 0300 	mov.w	r3, #0
 8007478:	f04f 020a 	mov.w	r2, #10
 800747c:	4639      	mov	r1, r7
 800747e:	4658      	mov	r0, fp
 8007480:	d107      	bne.n	8007492 <_dtoa_r+0xac2>
 8007482:	f000 f915 	bl	80076b0 <__multadd>
 8007486:	4607      	mov	r7, r0
 8007488:	4605      	mov	r5, r0
 800748a:	9b07      	ldr	r3, [sp, #28]
 800748c:	3301      	adds	r3, #1
 800748e:	9307      	str	r3, [sp, #28]
 8007490:	e774      	b.n	800737c <_dtoa_r+0x9ac>
 8007492:	f000 f90d 	bl	80076b0 <__multadd>
 8007496:	4629      	mov	r1, r5
 8007498:	4607      	mov	r7, r0
 800749a:	2300      	movs	r3, #0
 800749c:	220a      	movs	r2, #10
 800749e:	4658      	mov	r0, fp
 80074a0:	f000 f906 	bl	80076b0 <__multadd>
 80074a4:	4605      	mov	r5, r0
 80074a6:	e7f0      	b.n	800748a <_dtoa_r+0xaba>
 80074a8:	9b00      	ldr	r3, [sp, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bfcc      	ite	gt
 80074ae:	461e      	movgt	r6, r3
 80074b0:	2601      	movle	r6, #1
 80074b2:	4456      	add	r6, sl
 80074b4:	2700      	movs	r7, #0
 80074b6:	4649      	mov	r1, r9
 80074b8:	2201      	movs	r2, #1
 80074ba:	4658      	mov	r0, fp
 80074bc:	f000 faa4 	bl	8007a08 <__lshift>
 80074c0:	4621      	mov	r1, r4
 80074c2:	4681      	mov	r9, r0
 80074c4:	f000 fb0c 	bl	8007ae0 <__mcmp>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	dcb0      	bgt.n	800742e <_dtoa_r+0xa5e>
 80074cc:	d102      	bne.n	80074d4 <_dtoa_r+0xb04>
 80074ce:	f018 0f01 	tst.w	r8, #1
 80074d2:	d1ac      	bne.n	800742e <_dtoa_r+0xa5e>
 80074d4:	4633      	mov	r3, r6
 80074d6:	461e      	mov	r6, r3
 80074d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074dc:	2a30      	cmp	r2, #48	@ 0x30
 80074de:	d0fa      	beq.n	80074d6 <_dtoa_r+0xb06>
 80074e0:	e5c2      	b.n	8007068 <_dtoa_r+0x698>
 80074e2:	459a      	cmp	sl, r3
 80074e4:	d1a4      	bne.n	8007430 <_dtoa_r+0xa60>
 80074e6:	9b04      	ldr	r3, [sp, #16]
 80074e8:	3301      	adds	r3, #1
 80074ea:	9304      	str	r3, [sp, #16]
 80074ec:	2331      	movs	r3, #49	@ 0x31
 80074ee:	f88a 3000 	strb.w	r3, [sl]
 80074f2:	e5b9      	b.n	8007068 <_dtoa_r+0x698>
 80074f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007554 <_dtoa_r+0xb84>
 80074fa:	b11b      	cbz	r3, 8007504 <_dtoa_r+0xb34>
 80074fc:	f10a 0308 	add.w	r3, sl, #8
 8007500:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	4650      	mov	r0, sl
 8007506:	b019      	add	sp, #100	@ 0x64
 8007508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800750e:	2b01      	cmp	r3, #1
 8007510:	f77f ae37 	ble.w	8007182 <_dtoa_r+0x7b2>
 8007514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007516:	930a      	str	r3, [sp, #40]	@ 0x28
 8007518:	2001      	movs	r0, #1
 800751a:	e655      	b.n	80071c8 <_dtoa_r+0x7f8>
 800751c:	9b00      	ldr	r3, [sp, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	f77f aed6 	ble.w	80072d0 <_dtoa_r+0x900>
 8007524:	4656      	mov	r6, sl
 8007526:	4621      	mov	r1, r4
 8007528:	4648      	mov	r0, r9
 800752a:	f7ff f9c6 	bl	80068ba <quorem>
 800752e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007532:	f806 8b01 	strb.w	r8, [r6], #1
 8007536:	9b00      	ldr	r3, [sp, #0]
 8007538:	eba6 020a 	sub.w	r2, r6, sl
 800753c:	4293      	cmp	r3, r2
 800753e:	ddb3      	ble.n	80074a8 <_dtoa_r+0xad8>
 8007540:	4649      	mov	r1, r9
 8007542:	2300      	movs	r3, #0
 8007544:	220a      	movs	r2, #10
 8007546:	4658      	mov	r0, fp
 8007548:	f000 f8b2 	bl	80076b0 <__multadd>
 800754c:	4681      	mov	r9, r0
 800754e:	e7ea      	b.n	8007526 <_dtoa_r+0xb56>
 8007550:	08008cd0 	.word	0x08008cd0
 8007554:	08008c54 	.word	0x08008c54

08007558 <_free_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4605      	mov	r5, r0
 800755c:	2900      	cmp	r1, #0
 800755e:	d041      	beq.n	80075e4 <_free_r+0x8c>
 8007560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007564:	1f0c      	subs	r4, r1, #4
 8007566:	2b00      	cmp	r3, #0
 8007568:	bfb8      	it	lt
 800756a:	18e4      	addlt	r4, r4, r3
 800756c:	f7fe fb7e 	bl	8005c6c <__malloc_lock>
 8007570:	4a1d      	ldr	r2, [pc, #116]	@ (80075e8 <_free_r+0x90>)
 8007572:	6813      	ldr	r3, [r2, #0]
 8007574:	b933      	cbnz	r3, 8007584 <_free_r+0x2c>
 8007576:	6063      	str	r3, [r4, #4]
 8007578:	6014      	str	r4, [r2, #0]
 800757a:	4628      	mov	r0, r5
 800757c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007580:	f7fe bb7a 	b.w	8005c78 <__malloc_unlock>
 8007584:	42a3      	cmp	r3, r4
 8007586:	d908      	bls.n	800759a <_free_r+0x42>
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	1821      	adds	r1, r4, r0
 800758c:	428b      	cmp	r3, r1
 800758e:	bf01      	itttt	eq
 8007590:	6819      	ldreq	r1, [r3, #0]
 8007592:	685b      	ldreq	r3, [r3, #4]
 8007594:	1809      	addeq	r1, r1, r0
 8007596:	6021      	streq	r1, [r4, #0]
 8007598:	e7ed      	b.n	8007576 <_free_r+0x1e>
 800759a:	461a      	mov	r2, r3
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	b10b      	cbz	r3, 80075a4 <_free_r+0x4c>
 80075a0:	42a3      	cmp	r3, r4
 80075a2:	d9fa      	bls.n	800759a <_free_r+0x42>
 80075a4:	6811      	ldr	r1, [r2, #0]
 80075a6:	1850      	adds	r0, r2, r1
 80075a8:	42a0      	cmp	r0, r4
 80075aa:	d10b      	bne.n	80075c4 <_free_r+0x6c>
 80075ac:	6820      	ldr	r0, [r4, #0]
 80075ae:	4401      	add	r1, r0
 80075b0:	1850      	adds	r0, r2, r1
 80075b2:	4283      	cmp	r3, r0
 80075b4:	6011      	str	r1, [r2, #0]
 80075b6:	d1e0      	bne.n	800757a <_free_r+0x22>
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	6053      	str	r3, [r2, #4]
 80075be:	4408      	add	r0, r1
 80075c0:	6010      	str	r0, [r2, #0]
 80075c2:	e7da      	b.n	800757a <_free_r+0x22>
 80075c4:	d902      	bls.n	80075cc <_free_r+0x74>
 80075c6:	230c      	movs	r3, #12
 80075c8:	602b      	str	r3, [r5, #0]
 80075ca:	e7d6      	b.n	800757a <_free_r+0x22>
 80075cc:	6820      	ldr	r0, [r4, #0]
 80075ce:	1821      	adds	r1, r4, r0
 80075d0:	428b      	cmp	r3, r1
 80075d2:	bf04      	itt	eq
 80075d4:	6819      	ldreq	r1, [r3, #0]
 80075d6:	685b      	ldreq	r3, [r3, #4]
 80075d8:	6063      	str	r3, [r4, #4]
 80075da:	bf04      	itt	eq
 80075dc:	1809      	addeq	r1, r1, r0
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	6054      	str	r4, [r2, #4]
 80075e2:	e7ca      	b.n	800757a <_free_r+0x22>
 80075e4:	bd38      	pop	{r3, r4, r5, pc}
 80075e6:	bf00      	nop
 80075e8:	200004c8 	.word	0x200004c8

080075ec <_Balloc>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	69c6      	ldr	r6, [r0, #28]
 80075f0:	4604      	mov	r4, r0
 80075f2:	460d      	mov	r5, r1
 80075f4:	b976      	cbnz	r6, 8007614 <_Balloc+0x28>
 80075f6:	2010      	movs	r0, #16
 80075f8:	f7fe fa86 	bl	8005b08 <malloc>
 80075fc:	4602      	mov	r2, r0
 80075fe:	61e0      	str	r0, [r4, #28]
 8007600:	b920      	cbnz	r0, 800760c <_Balloc+0x20>
 8007602:	4b18      	ldr	r3, [pc, #96]	@ (8007664 <_Balloc+0x78>)
 8007604:	4818      	ldr	r0, [pc, #96]	@ (8007668 <_Balloc+0x7c>)
 8007606:	216b      	movs	r1, #107	@ 0x6b
 8007608:	f000 fd90 	bl	800812c <__assert_func>
 800760c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007610:	6006      	str	r6, [r0, #0]
 8007612:	60c6      	str	r6, [r0, #12]
 8007614:	69e6      	ldr	r6, [r4, #28]
 8007616:	68f3      	ldr	r3, [r6, #12]
 8007618:	b183      	cbz	r3, 800763c <_Balloc+0x50>
 800761a:	69e3      	ldr	r3, [r4, #28]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007622:	b9b8      	cbnz	r0, 8007654 <_Balloc+0x68>
 8007624:	2101      	movs	r1, #1
 8007626:	fa01 f605 	lsl.w	r6, r1, r5
 800762a:	1d72      	adds	r2, r6, #5
 800762c:	0092      	lsls	r2, r2, #2
 800762e:	4620      	mov	r0, r4
 8007630:	f000 fd9a 	bl	8008168 <_calloc_r>
 8007634:	b160      	cbz	r0, 8007650 <_Balloc+0x64>
 8007636:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800763a:	e00e      	b.n	800765a <_Balloc+0x6e>
 800763c:	2221      	movs	r2, #33	@ 0x21
 800763e:	2104      	movs	r1, #4
 8007640:	4620      	mov	r0, r4
 8007642:	f000 fd91 	bl	8008168 <_calloc_r>
 8007646:	69e3      	ldr	r3, [r4, #28]
 8007648:	60f0      	str	r0, [r6, #12]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e4      	bne.n	800761a <_Balloc+0x2e>
 8007650:	2000      	movs	r0, #0
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	6802      	ldr	r2, [r0, #0]
 8007656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800765a:	2300      	movs	r3, #0
 800765c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007660:	e7f7      	b.n	8007652 <_Balloc+0x66>
 8007662:	bf00      	nop
 8007664:	08008c61 	.word	0x08008c61
 8007668:	08008ce1 	.word	0x08008ce1

0800766c <_Bfree>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	69c6      	ldr	r6, [r0, #28]
 8007670:	4605      	mov	r5, r0
 8007672:	460c      	mov	r4, r1
 8007674:	b976      	cbnz	r6, 8007694 <_Bfree+0x28>
 8007676:	2010      	movs	r0, #16
 8007678:	f7fe fa46 	bl	8005b08 <malloc>
 800767c:	4602      	mov	r2, r0
 800767e:	61e8      	str	r0, [r5, #28]
 8007680:	b920      	cbnz	r0, 800768c <_Bfree+0x20>
 8007682:	4b09      	ldr	r3, [pc, #36]	@ (80076a8 <_Bfree+0x3c>)
 8007684:	4809      	ldr	r0, [pc, #36]	@ (80076ac <_Bfree+0x40>)
 8007686:	218f      	movs	r1, #143	@ 0x8f
 8007688:	f000 fd50 	bl	800812c <__assert_func>
 800768c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007690:	6006      	str	r6, [r0, #0]
 8007692:	60c6      	str	r6, [r0, #12]
 8007694:	b13c      	cbz	r4, 80076a6 <_Bfree+0x3a>
 8007696:	69eb      	ldr	r3, [r5, #28]
 8007698:	6862      	ldr	r2, [r4, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076a0:	6021      	str	r1, [r4, #0]
 80076a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	08008c61 	.word	0x08008c61
 80076ac:	08008ce1 	.word	0x08008ce1

080076b0 <__multadd>:
 80076b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b4:	690d      	ldr	r5, [r1, #16]
 80076b6:	4607      	mov	r7, r0
 80076b8:	460c      	mov	r4, r1
 80076ba:	461e      	mov	r6, r3
 80076bc:	f101 0c14 	add.w	ip, r1, #20
 80076c0:	2000      	movs	r0, #0
 80076c2:	f8dc 3000 	ldr.w	r3, [ip]
 80076c6:	b299      	uxth	r1, r3
 80076c8:	fb02 6101 	mla	r1, r2, r1, r6
 80076cc:	0c1e      	lsrs	r6, r3, #16
 80076ce:	0c0b      	lsrs	r3, r1, #16
 80076d0:	fb02 3306 	mla	r3, r2, r6, r3
 80076d4:	b289      	uxth	r1, r1
 80076d6:	3001      	adds	r0, #1
 80076d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076dc:	4285      	cmp	r5, r0
 80076de:	f84c 1b04 	str.w	r1, [ip], #4
 80076e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076e6:	dcec      	bgt.n	80076c2 <__multadd+0x12>
 80076e8:	b30e      	cbz	r6, 800772e <__multadd+0x7e>
 80076ea:	68a3      	ldr	r3, [r4, #8]
 80076ec:	42ab      	cmp	r3, r5
 80076ee:	dc19      	bgt.n	8007724 <__multadd+0x74>
 80076f0:	6861      	ldr	r1, [r4, #4]
 80076f2:	4638      	mov	r0, r7
 80076f4:	3101      	adds	r1, #1
 80076f6:	f7ff ff79 	bl	80075ec <_Balloc>
 80076fa:	4680      	mov	r8, r0
 80076fc:	b928      	cbnz	r0, 800770a <__multadd+0x5a>
 80076fe:	4602      	mov	r2, r0
 8007700:	4b0c      	ldr	r3, [pc, #48]	@ (8007734 <__multadd+0x84>)
 8007702:	480d      	ldr	r0, [pc, #52]	@ (8007738 <__multadd+0x88>)
 8007704:	21ba      	movs	r1, #186	@ 0xba
 8007706:	f000 fd11 	bl	800812c <__assert_func>
 800770a:	6922      	ldr	r2, [r4, #16]
 800770c:	3202      	adds	r2, #2
 800770e:	f104 010c 	add.w	r1, r4, #12
 8007712:	0092      	lsls	r2, r2, #2
 8007714:	300c      	adds	r0, #12
 8007716:	f7ff f8c2 	bl	800689e <memcpy>
 800771a:	4621      	mov	r1, r4
 800771c:	4638      	mov	r0, r7
 800771e:	f7ff ffa5 	bl	800766c <_Bfree>
 8007722:	4644      	mov	r4, r8
 8007724:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007728:	3501      	adds	r5, #1
 800772a:	615e      	str	r6, [r3, #20]
 800772c:	6125      	str	r5, [r4, #16]
 800772e:	4620      	mov	r0, r4
 8007730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007734:	08008cd0 	.word	0x08008cd0
 8007738:	08008ce1 	.word	0x08008ce1

0800773c <__hi0bits>:
 800773c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007740:	4603      	mov	r3, r0
 8007742:	bf36      	itet	cc
 8007744:	0403      	lslcc	r3, r0, #16
 8007746:	2000      	movcs	r0, #0
 8007748:	2010      	movcc	r0, #16
 800774a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800774e:	bf3c      	itt	cc
 8007750:	021b      	lslcc	r3, r3, #8
 8007752:	3008      	addcc	r0, #8
 8007754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007758:	bf3c      	itt	cc
 800775a:	011b      	lslcc	r3, r3, #4
 800775c:	3004      	addcc	r0, #4
 800775e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007762:	bf3c      	itt	cc
 8007764:	009b      	lslcc	r3, r3, #2
 8007766:	3002      	addcc	r0, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	db05      	blt.n	8007778 <__hi0bits+0x3c>
 800776c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007770:	f100 0001 	add.w	r0, r0, #1
 8007774:	bf08      	it	eq
 8007776:	2020      	moveq	r0, #32
 8007778:	4770      	bx	lr

0800777a <__lo0bits>:
 800777a:	6803      	ldr	r3, [r0, #0]
 800777c:	4602      	mov	r2, r0
 800777e:	f013 0007 	ands.w	r0, r3, #7
 8007782:	d00b      	beq.n	800779c <__lo0bits+0x22>
 8007784:	07d9      	lsls	r1, r3, #31
 8007786:	d421      	bmi.n	80077cc <__lo0bits+0x52>
 8007788:	0798      	lsls	r0, r3, #30
 800778a:	bf49      	itett	mi
 800778c:	085b      	lsrmi	r3, r3, #1
 800778e:	089b      	lsrpl	r3, r3, #2
 8007790:	2001      	movmi	r0, #1
 8007792:	6013      	strmi	r3, [r2, #0]
 8007794:	bf5c      	itt	pl
 8007796:	6013      	strpl	r3, [r2, #0]
 8007798:	2002      	movpl	r0, #2
 800779a:	4770      	bx	lr
 800779c:	b299      	uxth	r1, r3
 800779e:	b909      	cbnz	r1, 80077a4 <__lo0bits+0x2a>
 80077a0:	0c1b      	lsrs	r3, r3, #16
 80077a2:	2010      	movs	r0, #16
 80077a4:	b2d9      	uxtb	r1, r3
 80077a6:	b909      	cbnz	r1, 80077ac <__lo0bits+0x32>
 80077a8:	3008      	adds	r0, #8
 80077aa:	0a1b      	lsrs	r3, r3, #8
 80077ac:	0719      	lsls	r1, r3, #28
 80077ae:	bf04      	itt	eq
 80077b0:	091b      	lsreq	r3, r3, #4
 80077b2:	3004      	addeq	r0, #4
 80077b4:	0799      	lsls	r1, r3, #30
 80077b6:	bf04      	itt	eq
 80077b8:	089b      	lsreq	r3, r3, #2
 80077ba:	3002      	addeq	r0, #2
 80077bc:	07d9      	lsls	r1, r3, #31
 80077be:	d403      	bmi.n	80077c8 <__lo0bits+0x4e>
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	f100 0001 	add.w	r0, r0, #1
 80077c6:	d003      	beq.n	80077d0 <__lo0bits+0x56>
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	4770      	bx	lr
 80077cc:	2000      	movs	r0, #0
 80077ce:	4770      	bx	lr
 80077d0:	2020      	movs	r0, #32
 80077d2:	4770      	bx	lr

080077d4 <__i2b>:
 80077d4:	b510      	push	{r4, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	2101      	movs	r1, #1
 80077da:	f7ff ff07 	bl	80075ec <_Balloc>
 80077de:	4602      	mov	r2, r0
 80077e0:	b928      	cbnz	r0, 80077ee <__i2b+0x1a>
 80077e2:	4b05      	ldr	r3, [pc, #20]	@ (80077f8 <__i2b+0x24>)
 80077e4:	4805      	ldr	r0, [pc, #20]	@ (80077fc <__i2b+0x28>)
 80077e6:	f240 1145 	movw	r1, #325	@ 0x145
 80077ea:	f000 fc9f 	bl	800812c <__assert_func>
 80077ee:	2301      	movs	r3, #1
 80077f0:	6144      	str	r4, [r0, #20]
 80077f2:	6103      	str	r3, [r0, #16]
 80077f4:	bd10      	pop	{r4, pc}
 80077f6:	bf00      	nop
 80077f8:	08008cd0 	.word	0x08008cd0
 80077fc:	08008ce1 	.word	0x08008ce1

08007800 <__multiply>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	4614      	mov	r4, r2
 8007806:	690a      	ldr	r2, [r1, #16]
 8007808:	6923      	ldr	r3, [r4, #16]
 800780a:	429a      	cmp	r2, r3
 800780c:	bfa8      	it	ge
 800780e:	4623      	movge	r3, r4
 8007810:	460f      	mov	r7, r1
 8007812:	bfa4      	itt	ge
 8007814:	460c      	movge	r4, r1
 8007816:	461f      	movge	r7, r3
 8007818:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800781c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007820:	68a3      	ldr	r3, [r4, #8]
 8007822:	6861      	ldr	r1, [r4, #4]
 8007824:	eb0a 0609 	add.w	r6, sl, r9
 8007828:	42b3      	cmp	r3, r6
 800782a:	b085      	sub	sp, #20
 800782c:	bfb8      	it	lt
 800782e:	3101      	addlt	r1, #1
 8007830:	f7ff fedc 	bl	80075ec <_Balloc>
 8007834:	b930      	cbnz	r0, 8007844 <__multiply+0x44>
 8007836:	4602      	mov	r2, r0
 8007838:	4b44      	ldr	r3, [pc, #272]	@ (800794c <__multiply+0x14c>)
 800783a:	4845      	ldr	r0, [pc, #276]	@ (8007950 <__multiply+0x150>)
 800783c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007840:	f000 fc74 	bl	800812c <__assert_func>
 8007844:	f100 0514 	add.w	r5, r0, #20
 8007848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800784c:	462b      	mov	r3, r5
 800784e:	2200      	movs	r2, #0
 8007850:	4543      	cmp	r3, r8
 8007852:	d321      	bcc.n	8007898 <__multiply+0x98>
 8007854:	f107 0114 	add.w	r1, r7, #20
 8007858:	f104 0214 	add.w	r2, r4, #20
 800785c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007860:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007864:	9302      	str	r3, [sp, #8]
 8007866:	1b13      	subs	r3, r2, r4
 8007868:	3b15      	subs	r3, #21
 800786a:	f023 0303 	bic.w	r3, r3, #3
 800786e:	3304      	adds	r3, #4
 8007870:	f104 0715 	add.w	r7, r4, #21
 8007874:	42ba      	cmp	r2, r7
 8007876:	bf38      	it	cc
 8007878:	2304      	movcc	r3, #4
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	9b02      	ldr	r3, [sp, #8]
 800787e:	9103      	str	r1, [sp, #12]
 8007880:	428b      	cmp	r3, r1
 8007882:	d80c      	bhi.n	800789e <__multiply+0x9e>
 8007884:	2e00      	cmp	r6, #0
 8007886:	dd03      	ble.n	8007890 <__multiply+0x90>
 8007888:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800788c:	2b00      	cmp	r3, #0
 800788e:	d05b      	beq.n	8007948 <__multiply+0x148>
 8007890:	6106      	str	r6, [r0, #16]
 8007892:	b005      	add	sp, #20
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	f843 2b04 	str.w	r2, [r3], #4
 800789c:	e7d8      	b.n	8007850 <__multiply+0x50>
 800789e:	f8b1 a000 	ldrh.w	sl, [r1]
 80078a2:	f1ba 0f00 	cmp.w	sl, #0
 80078a6:	d024      	beq.n	80078f2 <__multiply+0xf2>
 80078a8:	f104 0e14 	add.w	lr, r4, #20
 80078ac:	46a9      	mov	r9, r5
 80078ae:	f04f 0c00 	mov.w	ip, #0
 80078b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80078b6:	f8d9 3000 	ldr.w	r3, [r9]
 80078ba:	fa1f fb87 	uxth.w	fp, r7
 80078be:	b29b      	uxth	r3, r3
 80078c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80078c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80078c8:	f8d9 7000 	ldr.w	r7, [r9]
 80078cc:	4463      	add	r3, ip
 80078ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80078d2:	fb0a c70b 	mla	r7, sl, fp, ip
 80078d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80078da:	b29b      	uxth	r3, r3
 80078dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80078e0:	4572      	cmp	r2, lr
 80078e2:	f849 3b04 	str.w	r3, [r9], #4
 80078e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80078ea:	d8e2      	bhi.n	80078b2 <__multiply+0xb2>
 80078ec:	9b01      	ldr	r3, [sp, #4]
 80078ee:	f845 c003 	str.w	ip, [r5, r3]
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80078f8:	3104      	adds	r1, #4
 80078fa:	f1b9 0f00 	cmp.w	r9, #0
 80078fe:	d021      	beq.n	8007944 <__multiply+0x144>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	f104 0c14 	add.w	ip, r4, #20
 8007906:	46ae      	mov	lr, r5
 8007908:	f04f 0a00 	mov.w	sl, #0
 800790c:	f8bc b000 	ldrh.w	fp, [ip]
 8007910:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007914:	fb09 770b 	mla	r7, r9, fp, r7
 8007918:	4457      	add	r7, sl
 800791a:	b29b      	uxth	r3, r3
 800791c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007920:	f84e 3b04 	str.w	r3, [lr], #4
 8007924:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007928:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800792c:	f8be 3000 	ldrh.w	r3, [lr]
 8007930:	fb09 330a 	mla	r3, r9, sl, r3
 8007934:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007938:	4562      	cmp	r2, ip
 800793a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800793e:	d8e5      	bhi.n	800790c <__multiply+0x10c>
 8007940:	9f01      	ldr	r7, [sp, #4]
 8007942:	51eb      	str	r3, [r5, r7]
 8007944:	3504      	adds	r5, #4
 8007946:	e799      	b.n	800787c <__multiply+0x7c>
 8007948:	3e01      	subs	r6, #1
 800794a:	e79b      	b.n	8007884 <__multiply+0x84>
 800794c:	08008cd0 	.word	0x08008cd0
 8007950:	08008ce1 	.word	0x08008ce1

08007954 <__pow5mult>:
 8007954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007958:	4615      	mov	r5, r2
 800795a:	f012 0203 	ands.w	r2, r2, #3
 800795e:	4607      	mov	r7, r0
 8007960:	460e      	mov	r6, r1
 8007962:	d007      	beq.n	8007974 <__pow5mult+0x20>
 8007964:	4c25      	ldr	r4, [pc, #148]	@ (80079fc <__pow5mult+0xa8>)
 8007966:	3a01      	subs	r2, #1
 8007968:	2300      	movs	r3, #0
 800796a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800796e:	f7ff fe9f 	bl	80076b0 <__multadd>
 8007972:	4606      	mov	r6, r0
 8007974:	10ad      	asrs	r5, r5, #2
 8007976:	d03d      	beq.n	80079f4 <__pow5mult+0xa0>
 8007978:	69fc      	ldr	r4, [r7, #28]
 800797a:	b97c      	cbnz	r4, 800799c <__pow5mult+0x48>
 800797c:	2010      	movs	r0, #16
 800797e:	f7fe f8c3 	bl	8005b08 <malloc>
 8007982:	4602      	mov	r2, r0
 8007984:	61f8      	str	r0, [r7, #28]
 8007986:	b928      	cbnz	r0, 8007994 <__pow5mult+0x40>
 8007988:	4b1d      	ldr	r3, [pc, #116]	@ (8007a00 <__pow5mult+0xac>)
 800798a:	481e      	ldr	r0, [pc, #120]	@ (8007a04 <__pow5mult+0xb0>)
 800798c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007990:	f000 fbcc 	bl	800812c <__assert_func>
 8007994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007998:	6004      	str	r4, [r0, #0]
 800799a:	60c4      	str	r4, [r0, #12]
 800799c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80079a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079a4:	b94c      	cbnz	r4, 80079ba <__pow5mult+0x66>
 80079a6:	f240 2171 	movw	r1, #625	@ 0x271
 80079aa:	4638      	mov	r0, r7
 80079ac:	f7ff ff12 	bl	80077d4 <__i2b>
 80079b0:	2300      	movs	r3, #0
 80079b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80079b6:	4604      	mov	r4, r0
 80079b8:	6003      	str	r3, [r0, #0]
 80079ba:	f04f 0900 	mov.w	r9, #0
 80079be:	07eb      	lsls	r3, r5, #31
 80079c0:	d50a      	bpl.n	80079d8 <__pow5mult+0x84>
 80079c2:	4631      	mov	r1, r6
 80079c4:	4622      	mov	r2, r4
 80079c6:	4638      	mov	r0, r7
 80079c8:	f7ff ff1a 	bl	8007800 <__multiply>
 80079cc:	4631      	mov	r1, r6
 80079ce:	4680      	mov	r8, r0
 80079d0:	4638      	mov	r0, r7
 80079d2:	f7ff fe4b 	bl	800766c <_Bfree>
 80079d6:	4646      	mov	r6, r8
 80079d8:	106d      	asrs	r5, r5, #1
 80079da:	d00b      	beq.n	80079f4 <__pow5mult+0xa0>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	b938      	cbnz	r0, 80079f0 <__pow5mult+0x9c>
 80079e0:	4622      	mov	r2, r4
 80079e2:	4621      	mov	r1, r4
 80079e4:	4638      	mov	r0, r7
 80079e6:	f7ff ff0b 	bl	8007800 <__multiply>
 80079ea:	6020      	str	r0, [r4, #0]
 80079ec:	f8c0 9000 	str.w	r9, [r0]
 80079f0:	4604      	mov	r4, r0
 80079f2:	e7e4      	b.n	80079be <__pow5mult+0x6a>
 80079f4:	4630      	mov	r0, r6
 80079f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079fa:	bf00      	nop
 80079fc:	08008d3c 	.word	0x08008d3c
 8007a00:	08008c61 	.word	0x08008c61
 8007a04:	08008ce1 	.word	0x08008ce1

08007a08 <__lshift>:
 8007a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	6849      	ldr	r1, [r1, #4]
 8007a10:	6923      	ldr	r3, [r4, #16]
 8007a12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a16:	68a3      	ldr	r3, [r4, #8]
 8007a18:	4607      	mov	r7, r0
 8007a1a:	4691      	mov	r9, r2
 8007a1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a20:	f108 0601 	add.w	r6, r8, #1
 8007a24:	42b3      	cmp	r3, r6
 8007a26:	db0b      	blt.n	8007a40 <__lshift+0x38>
 8007a28:	4638      	mov	r0, r7
 8007a2a:	f7ff fddf 	bl	80075ec <_Balloc>
 8007a2e:	4605      	mov	r5, r0
 8007a30:	b948      	cbnz	r0, 8007a46 <__lshift+0x3e>
 8007a32:	4602      	mov	r2, r0
 8007a34:	4b28      	ldr	r3, [pc, #160]	@ (8007ad8 <__lshift+0xd0>)
 8007a36:	4829      	ldr	r0, [pc, #164]	@ (8007adc <__lshift+0xd4>)
 8007a38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007a3c:	f000 fb76 	bl	800812c <__assert_func>
 8007a40:	3101      	adds	r1, #1
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	e7ee      	b.n	8007a24 <__lshift+0x1c>
 8007a46:	2300      	movs	r3, #0
 8007a48:	f100 0114 	add.w	r1, r0, #20
 8007a4c:	f100 0210 	add.w	r2, r0, #16
 8007a50:	4618      	mov	r0, r3
 8007a52:	4553      	cmp	r3, sl
 8007a54:	db33      	blt.n	8007abe <__lshift+0xb6>
 8007a56:	6920      	ldr	r0, [r4, #16]
 8007a58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a5c:	f104 0314 	add.w	r3, r4, #20
 8007a60:	f019 091f 	ands.w	r9, r9, #31
 8007a64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a6c:	d02b      	beq.n	8007ac6 <__lshift+0xbe>
 8007a6e:	f1c9 0e20 	rsb	lr, r9, #32
 8007a72:	468a      	mov	sl, r1
 8007a74:	2200      	movs	r2, #0
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	fa00 f009 	lsl.w	r0, r0, r9
 8007a7c:	4310      	orrs	r0, r2
 8007a7e:	f84a 0b04 	str.w	r0, [sl], #4
 8007a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a86:	459c      	cmp	ip, r3
 8007a88:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a8c:	d8f3      	bhi.n	8007a76 <__lshift+0x6e>
 8007a8e:	ebac 0304 	sub.w	r3, ip, r4
 8007a92:	3b15      	subs	r3, #21
 8007a94:	f023 0303 	bic.w	r3, r3, #3
 8007a98:	3304      	adds	r3, #4
 8007a9a:	f104 0015 	add.w	r0, r4, #21
 8007a9e:	4584      	cmp	ip, r0
 8007aa0:	bf38      	it	cc
 8007aa2:	2304      	movcc	r3, #4
 8007aa4:	50ca      	str	r2, [r1, r3]
 8007aa6:	b10a      	cbz	r2, 8007aac <__lshift+0xa4>
 8007aa8:	f108 0602 	add.w	r6, r8, #2
 8007aac:	3e01      	subs	r6, #1
 8007aae:	4638      	mov	r0, r7
 8007ab0:	612e      	str	r6, [r5, #16]
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	f7ff fdda 	bl	800766c <_Bfree>
 8007ab8:	4628      	mov	r0, r5
 8007aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007abe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	e7c5      	b.n	8007a52 <__lshift+0x4a>
 8007ac6:	3904      	subs	r1, #4
 8007ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007acc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ad0:	459c      	cmp	ip, r3
 8007ad2:	d8f9      	bhi.n	8007ac8 <__lshift+0xc0>
 8007ad4:	e7ea      	b.n	8007aac <__lshift+0xa4>
 8007ad6:	bf00      	nop
 8007ad8:	08008cd0 	.word	0x08008cd0
 8007adc:	08008ce1 	.word	0x08008ce1

08007ae0 <__mcmp>:
 8007ae0:	690a      	ldr	r2, [r1, #16]
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	6900      	ldr	r0, [r0, #16]
 8007ae6:	1a80      	subs	r0, r0, r2
 8007ae8:	b530      	push	{r4, r5, lr}
 8007aea:	d10e      	bne.n	8007b0a <__mcmp+0x2a>
 8007aec:	3314      	adds	r3, #20
 8007aee:	3114      	adds	r1, #20
 8007af0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007af4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007af8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007afc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b00:	4295      	cmp	r5, r2
 8007b02:	d003      	beq.n	8007b0c <__mcmp+0x2c>
 8007b04:	d205      	bcs.n	8007b12 <__mcmp+0x32>
 8007b06:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0a:	bd30      	pop	{r4, r5, pc}
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	d3f3      	bcc.n	8007af8 <__mcmp+0x18>
 8007b10:	e7fb      	b.n	8007b0a <__mcmp+0x2a>
 8007b12:	2001      	movs	r0, #1
 8007b14:	e7f9      	b.n	8007b0a <__mcmp+0x2a>
	...

08007b18 <__mdiff>:
 8007b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	4689      	mov	r9, r1
 8007b1e:	4606      	mov	r6, r0
 8007b20:	4611      	mov	r1, r2
 8007b22:	4648      	mov	r0, r9
 8007b24:	4614      	mov	r4, r2
 8007b26:	f7ff ffdb 	bl	8007ae0 <__mcmp>
 8007b2a:	1e05      	subs	r5, r0, #0
 8007b2c:	d112      	bne.n	8007b54 <__mdiff+0x3c>
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff fd5b 	bl	80075ec <_Balloc>
 8007b36:	4602      	mov	r2, r0
 8007b38:	b928      	cbnz	r0, 8007b46 <__mdiff+0x2e>
 8007b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8007c38 <__mdiff+0x120>)
 8007b3c:	f240 2137 	movw	r1, #567	@ 0x237
 8007b40:	483e      	ldr	r0, [pc, #248]	@ (8007c3c <__mdiff+0x124>)
 8007b42:	f000 faf3 	bl	800812c <__assert_func>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	b003      	add	sp, #12
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	bfbc      	itt	lt
 8007b56:	464b      	movlt	r3, r9
 8007b58:	46a1      	movlt	r9, r4
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b60:	bfba      	itte	lt
 8007b62:	461c      	movlt	r4, r3
 8007b64:	2501      	movlt	r5, #1
 8007b66:	2500      	movge	r5, #0
 8007b68:	f7ff fd40 	bl	80075ec <_Balloc>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	b918      	cbnz	r0, 8007b78 <__mdiff+0x60>
 8007b70:	4b31      	ldr	r3, [pc, #196]	@ (8007c38 <__mdiff+0x120>)
 8007b72:	f240 2145 	movw	r1, #581	@ 0x245
 8007b76:	e7e3      	b.n	8007b40 <__mdiff+0x28>
 8007b78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007b7c:	6926      	ldr	r6, [r4, #16]
 8007b7e:	60c5      	str	r5, [r0, #12]
 8007b80:	f109 0310 	add.w	r3, r9, #16
 8007b84:	f109 0514 	add.w	r5, r9, #20
 8007b88:	f104 0e14 	add.w	lr, r4, #20
 8007b8c:	f100 0b14 	add.w	fp, r0, #20
 8007b90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b98:	9301      	str	r3, [sp, #4]
 8007b9a:	46d9      	mov	r9, fp
 8007b9c:	f04f 0c00 	mov.w	ip, #0
 8007ba0:	9b01      	ldr	r3, [sp, #4]
 8007ba2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007ba6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007baa:	9301      	str	r3, [sp, #4]
 8007bac:	fa1f f38a 	uxth.w	r3, sl
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	b283      	uxth	r3, r0
 8007bb4:	1acb      	subs	r3, r1, r3
 8007bb6:	0c00      	lsrs	r0, r0, #16
 8007bb8:	4463      	add	r3, ip
 8007bba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007bbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007bc8:	4576      	cmp	r6, lr
 8007bca:	f849 3b04 	str.w	r3, [r9], #4
 8007bce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bd2:	d8e5      	bhi.n	8007ba0 <__mdiff+0x88>
 8007bd4:	1b33      	subs	r3, r6, r4
 8007bd6:	3b15      	subs	r3, #21
 8007bd8:	f023 0303 	bic.w	r3, r3, #3
 8007bdc:	3415      	adds	r4, #21
 8007bde:	3304      	adds	r3, #4
 8007be0:	42a6      	cmp	r6, r4
 8007be2:	bf38      	it	cc
 8007be4:	2304      	movcc	r3, #4
 8007be6:	441d      	add	r5, r3
 8007be8:	445b      	add	r3, fp
 8007bea:	461e      	mov	r6, r3
 8007bec:	462c      	mov	r4, r5
 8007bee:	4544      	cmp	r4, r8
 8007bf0:	d30e      	bcc.n	8007c10 <__mdiff+0xf8>
 8007bf2:	f108 0103 	add.w	r1, r8, #3
 8007bf6:	1b49      	subs	r1, r1, r5
 8007bf8:	f021 0103 	bic.w	r1, r1, #3
 8007bfc:	3d03      	subs	r5, #3
 8007bfe:	45a8      	cmp	r8, r5
 8007c00:	bf38      	it	cc
 8007c02:	2100      	movcc	r1, #0
 8007c04:	440b      	add	r3, r1
 8007c06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c0a:	b191      	cbz	r1, 8007c32 <__mdiff+0x11a>
 8007c0c:	6117      	str	r7, [r2, #16]
 8007c0e:	e79d      	b.n	8007b4c <__mdiff+0x34>
 8007c10:	f854 1b04 	ldr.w	r1, [r4], #4
 8007c14:	46e6      	mov	lr, ip
 8007c16:	0c08      	lsrs	r0, r1, #16
 8007c18:	fa1c fc81 	uxtah	ip, ip, r1
 8007c1c:	4471      	add	r1, lr
 8007c1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007c22:	b289      	uxth	r1, r1
 8007c24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c28:	f846 1b04 	str.w	r1, [r6], #4
 8007c2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c30:	e7dd      	b.n	8007bee <__mdiff+0xd6>
 8007c32:	3f01      	subs	r7, #1
 8007c34:	e7e7      	b.n	8007c06 <__mdiff+0xee>
 8007c36:	bf00      	nop
 8007c38:	08008cd0 	.word	0x08008cd0
 8007c3c:	08008ce1 	.word	0x08008ce1

08007c40 <__d2b>:
 8007c40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c44:	460f      	mov	r7, r1
 8007c46:	2101      	movs	r1, #1
 8007c48:	ec59 8b10 	vmov	r8, r9, d0
 8007c4c:	4616      	mov	r6, r2
 8007c4e:	f7ff fccd 	bl	80075ec <_Balloc>
 8007c52:	4604      	mov	r4, r0
 8007c54:	b930      	cbnz	r0, 8007c64 <__d2b+0x24>
 8007c56:	4602      	mov	r2, r0
 8007c58:	4b23      	ldr	r3, [pc, #140]	@ (8007ce8 <__d2b+0xa8>)
 8007c5a:	4824      	ldr	r0, [pc, #144]	@ (8007cec <__d2b+0xac>)
 8007c5c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007c60:	f000 fa64 	bl	800812c <__assert_func>
 8007c64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c6c:	b10d      	cbz	r5, 8007c72 <__d2b+0x32>
 8007c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c72:	9301      	str	r3, [sp, #4]
 8007c74:	f1b8 0300 	subs.w	r3, r8, #0
 8007c78:	d023      	beq.n	8007cc2 <__d2b+0x82>
 8007c7a:	4668      	mov	r0, sp
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	f7ff fd7c 	bl	800777a <__lo0bits>
 8007c82:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c86:	b1d0      	cbz	r0, 8007cbe <__d2b+0x7e>
 8007c88:	f1c0 0320 	rsb	r3, r0, #32
 8007c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c90:	430b      	orrs	r3, r1
 8007c92:	40c2      	lsrs	r2, r0
 8007c94:	6163      	str	r3, [r4, #20]
 8007c96:	9201      	str	r2, [sp, #4]
 8007c98:	9b01      	ldr	r3, [sp, #4]
 8007c9a:	61a3      	str	r3, [r4, #24]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bf0c      	ite	eq
 8007ca0:	2201      	moveq	r2, #1
 8007ca2:	2202      	movne	r2, #2
 8007ca4:	6122      	str	r2, [r4, #16]
 8007ca6:	b1a5      	cbz	r5, 8007cd2 <__d2b+0x92>
 8007ca8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007cac:	4405      	add	r5, r0
 8007cae:	603d      	str	r5, [r7, #0]
 8007cb0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007cb4:	6030      	str	r0, [r6, #0]
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	b003      	add	sp, #12
 8007cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cbe:	6161      	str	r1, [r4, #20]
 8007cc0:	e7ea      	b.n	8007c98 <__d2b+0x58>
 8007cc2:	a801      	add	r0, sp, #4
 8007cc4:	f7ff fd59 	bl	800777a <__lo0bits>
 8007cc8:	9b01      	ldr	r3, [sp, #4]
 8007cca:	6163      	str	r3, [r4, #20]
 8007ccc:	3020      	adds	r0, #32
 8007cce:	2201      	movs	r2, #1
 8007cd0:	e7e8      	b.n	8007ca4 <__d2b+0x64>
 8007cd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007cd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007cda:	6038      	str	r0, [r7, #0]
 8007cdc:	6918      	ldr	r0, [r3, #16]
 8007cde:	f7ff fd2d 	bl	800773c <__hi0bits>
 8007ce2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ce6:	e7e5      	b.n	8007cb4 <__d2b+0x74>
 8007ce8:	08008cd0 	.word	0x08008cd0
 8007cec:	08008ce1 	.word	0x08008ce1

08007cf0 <__ssputs_r>:
 8007cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf4:	688e      	ldr	r6, [r1, #8]
 8007cf6:	461f      	mov	r7, r3
 8007cf8:	42be      	cmp	r6, r7
 8007cfa:	680b      	ldr	r3, [r1, #0]
 8007cfc:	4682      	mov	sl, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	4690      	mov	r8, r2
 8007d02:	d82d      	bhi.n	8007d60 <__ssputs_r+0x70>
 8007d04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d0c:	d026      	beq.n	8007d5c <__ssputs_r+0x6c>
 8007d0e:	6965      	ldr	r5, [r4, #20]
 8007d10:	6909      	ldr	r1, [r1, #16]
 8007d12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d16:	eba3 0901 	sub.w	r9, r3, r1
 8007d1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d1e:	1c7b      	adds	r3, r7, #1
 8007d20:	444b      	add	r3, r9
 8007d22:	106d      	asrs	r5, r5, #1
 8007d24:	429d      	cmp	r5, r3
 8007d26:	bf38      	it	cc
 8007d28:	461d      	movcc	r5, r3
 8007d2a:	0553      	lsls	r3, r2, #21
 8007d2c:	d527      	bpl.n	8007d7e <__ssputs_r+0x8e>
 8007d2e:	4629      	mov	r1, r5
 8007d30:	f7fd ff1c 	bl	8005b6c <_malloc_r>
 8007d34:	4606      	mov	r6, r0
 8007d36:	b360      	cbz	r0, 8007d92 <__ssputs_r+0xa2>
 8007d38:	6921      	ldr	r1, [r4, #16]
 8007d3a:	464a      	mov	r2, r9
 8007d3c:	f7fe fdaf 	bl	800689e <memcpy>
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d4a:	81a3      	strh	r3, [r4, #12]
 8007d4c:	6126      	str	r6, [r4, #16]
 8007d4e:	6165      	str	r5, [r4, #20]
 8007d50:	444e      	add	r6, r9
 8007d52:	eba5 0509 	sub.w	r5, r5, r9
 8007d56:	6026      	str	r6, [r4, #0]
 8007d58:	60a5      	str	r5, [r4, #8]
 8007d5a:	463e      	mov	r6, r7
 8007d5c:	42be      	cmp	r6, r7
 8007d5e:	d900      	bls.n	8007d62 <__ssputs_r+0x72>
 8007d60:	463e      	mov	r6, r7
 8007d62:	6820      	ldr	r0, [r4, #0]
 8007d64:	4632      	mov	r2, r6
 8007d66:	4641      	mov	r1, r8
 8007d68:	f000 f9c6 	bl	80080f8 <memmove>
 8007d6c:	68a3      	ldr	r3, [r4, #8]
 8007d6e:	1b9b      	subs	r3, r3, r6
 8007d70:	60a3      	str	r3, [r4, #8]
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	4433      	add	r3, r6
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	2000      	movs	r0, #0
 8007d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d7e:	462a      	mov	r2, r5
 8007d80:	f000 fa18 	bl	80081b4 <_realloc_r>
 8007d84:	4606      	mov	r6, r0
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d1e0      	bne.n	8007d4c <__ssputs_r+0x5c>
 8007d8a:	6921      	ldr	r1, [r4, #16]
 8007d8c:	4650      	mov	r0, sl
 8007d8e:	f7ff fbe3 	bl	8007558 <_free_r>
 8007d92:	230c      	movs	r3, #12
 8007d94:	f8ca 3000 	str.w	r3, [sl]
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d9e:	81a3      	strh	r3, [r4, #12]
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295
 8007da4:	e7e9      	b.n	8007d7a <__ssputs_r+0x8a>
	...

08007da8 <_svfiprintf_r>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	4698      	mov	r8, r3
 8007dae:	898b      	ldrh	r3, [r1, #12]
 8007db0:	061b      	lsls	r3, r3, #24
 8007db2:	b09d      	sub	sp, #116	@ 0x74
 8007db4:	4607      	mov	r7, r0
 8007db6:	460d      	mov	r5, r1
 8007db8:	4614      	mov	r4, r2
 8007dba:	d510      	bpl.n	8007dde <_svfiprintf_r+0x36>
 8007dbc:	690b      	ldr	r3, [r1, #16]
 8007dbe:	b973      	cbnz	r3, 8007dde <_svfiprintf_r+0x36>
 8007dc0:	2140      	movs	r1, #64	@ 0x40
 8007dc2:	f7fd fed3 	bl	8005b6c <_malloc_r>
 8007dc6:	6028      	str	r0, [r5, #0]
 8007dc8:	6128      	str	r0, [r5, #16]
 8007dca:	b930      	cbnz	r0, 8007dda <_svfiprintf_r+0x32>
 8007dcc:	230c      	movs	r3, #12
 8007dce:	603b      	str	r3, [r7, #0]
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	b01d      	add	sp, #116	@ 0x74
 8007dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dda:	2340      	movs	r3, #64	@ 0x40
 8007ddc:	616b      	str	r3, [r5, #20]
 8007dde:	2300      	movs	r3, #0
 8007de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007de2:	2320      	movs	r3, #32
 8007de4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007de8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dec:	2330      	movs	r3, #48	@ 0x30
 8007dee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f8c <_svfiprintf_r+0x1e4>
 8007df2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007df6:	f04f 0901 	mov.w	r9, #1
 8007dfa:	4623      	mov	r3, r4
 8007dfc:	469a      	mov	sl, r3
 8007dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e02:	b10a      	cbz	r2, 8007e08 <_svfiprintf_r+0x60>
 8007e04:	2a25      	cmp	r2, #37	@ 0x25
 8007e06:	d1f9      	bne.n	8007dfc <_svfiprintf_r+0x54>
 8007e08:	ebba 0b04 	subs.w	fp, sl, r4
 8007e0c:	d00b      	beq.n	8007e26 <_svfiprintf_r+0x7e>
 8007e0e:	465b      	mov	r3, fp
 8007e10:	4622      	mov	r2, r4
 8007e12:	4629      	mov	r1, r5
 8007e14:	4638      	mov	r0, r7
 8007e16:	f7ff ff6b 	bl	8007cf0 <__ssputs_r>
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	f000 80a7 	beq.w	8007f6e <_svfiprintf_r+0x1c6>
 8007e20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e22:	445a      	add	r2, fp
 8007e24:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e26:	f89a 3000 	ldrb.w	r3, [sl]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 809f 	beq.w	8007f6e <_svfiprintf_r+0x1c6>
 8007e30:	2300      	movs	r3, #0
 8007e32:	f04f 32ff 	mov.w	r2, #4294967295
 8007e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e3a:	f10a 0a01 	add.w	sl, sl, #1
 8007e3e:	9304      	str	r3, [sp, #16]
 8007e40:	9307      	str	r3, [sp, #28]
 8007e42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e46:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e48:	4654      	mov	r4, sl
 8007e4a:	2205      	movs	r2, #5
 8007e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e50:	484e      	ldr	r0, [pc, #312]	@ (8007f8c <_svfiprintf_r+0x1e4>)
 8007e52:	f7f8 f9dd 	bl	8000210 <memchr>
 8007e56:	9a04      	ldr	r2, [sp, #16]
 8007e58:	b9d8      	cbnz	r0, 8007e92 <_svfiprintf_r+0xea>
 8007e5a:	06d0      	lsls	r0, r2, #27
 8007e5c:	bf44      	itt	mi
 8007e5e:	2320      	movmi	r3, #32
 8007e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e64:	0711      	lsls	r1, r2, #28
 8007e66:	bf44      	itt	mi
 8007e68:	232b      	movmi	r3, #43	@ 0x2b
 8007e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e72:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e74:	d015      	beq.n	8007ea2 <_svfiprintf_r+0xfa>
 8007e76:	9a07      	ldr	r2, [sp, #28]
 8007e78:	4654      	mov	r4, sl
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	f04f 0c0a 	mov.w	ip, #10
 8007e80:	4621      	mov	r1, r4
 8007e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e86:	3b30      	subs	r3, #48	@ 0x30
 8007e88:	2b09      	cmp	r3, #9
 8007e8a:	d94b      	bls.n	8007f24 <_svfiprintf_r+0x17c>
 8007e8c:	b1b0      	cbz	r0, 8007ebc <_svfiprintf_r+0x114>
 8007e8e:	9207      	str	r2, [sp, #28]
 8007e90:	e014      	b.n	8007ebc <_svfiprintf_r+0x114>
 8007e92:	eba0 0308 	sub.w	r3, r0, r8
 8007e96:	fa09 f303 	lsl.w	r3, r9, r3
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	46a2      	mov	sl, r4
 8007ea0:	e7d2      	b.n	8007e48 <_svfiprintf_r+0xa0>
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	1d19      	adds	r1, r3, #4
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	9103      	str	r1, [sp, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bfbb      	ittet	lt
 8007eae:	425b      	neglt	r3, r3
 8007eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb4:	9307      	strge	r3, [sp, #28]
 8007eb6:	9307      	strlt	r3, [sp, #28]
 8007eb8:	bfb8      	it	lt
 8007eba:	9204      	strlt	r2, [sp, #16]
 8007ebc:	7823      	ldrb	r3, [r4, #0]
 8007ebe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ec0:	d10a      	bne.n	8007ed8 <_svfiprintf_r+0x130>
 8007ec2:	7863      	ldrb	r3, [r4, #1]
 8007ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ec6:	d132      	bne.n	8007f2e <_svfiprintf_r+0x186>
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	1d1a      	adds	r2, r3, #4
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	9203      	str	r2, [sp, #12]
 8007ed0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ed4:	3402      	adds	r4, #2
 8007ed6:	9305      	str	r3, [sp, #20]
 8007ed8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f9c <_svfiprintf_r+0x1f4>
 8007edc:	7821      	ldrb	r1, [r4, #0]
 8007ede:	2203      	movs	r2, #3
 8007ee0:	4650      	mov	r0, sl
 8007ee2:	f7f8 f995 	bl	8000210 <memchr>
 8007ee6:	b138      	cbz	r0, 8007ef8 <_svfiprintf_r+0x150>
 8007ee8:	9b04      	ldr	r3, [sp, #16]
 8007eea:	eba0 000a 	sub.w	r0, r0, sl
 8007eee:	2240      	movs	r2, #64	@ 0x40
 8007ef0:	4082      	lsls	r2, r0
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	3401      	adds	r4, #1
 8007ef6:	9304      	str	r3, [sp, #16]
 8007ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007efc:	4824      	ldr	r0, [pc, #144]	@ (8007f90 <_svfiprintf_r+0x1e8>)
 8007efe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f02:	2206      	movs	r2, #6
 8007f04:	f7f8 f984 	bl	8000210 <memchr>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d036      	beq.n	8007f7a <_svfiprintf_r+0x1d2>
 8007f0c:	4b21      	ldr	r3, [pc, #132]	@ (8007f94 <_svfiprintf_r+0x1ec>)
 8007f0e:	bb1b      	cbnz	r3, 8007f58 <_svfiprintf_r+0x1b0>
 8007f10:	9b03      	ldr	r3, [sp, #12]
 8007f12:	3307      	adds	r3, #7
 8007f14:	f023 0307 	bic.w	r3, r3, #7
 8007f18:	3308      	adds	r3, #8
 8007f1a:	9303      	str	r3, [sp, #12]
 8007f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f1e:	4433      	add	r3, r6
 8007f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f22:	e76a      	b.n	8007dfa <_svfiprintf_r+0x52>
 8007f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f28:	460c      	mov	r4, r1
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	e7a8      	b.n	8007e80 <_svfiprintf_r+0xd8>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	3401      	adds	r4, #1
 8007f32:	9305      	str	r3, [sp, #20]
 8007f34:	4619      	mov	r1, r3
 8007f36:	f04f 0c0a 	mov.w	ip, #10
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f40:	3a30      	subs	r2, #48	@ 0x30
 8007f42:	2a09      	cmp	r2, #9
 8007f44:	d903      	bls.n	8007f4e <_svfiprintf_r+0x1a6>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0c6      	beq.n	8007ed8 <_svfiprintf_r+0x130>
 8007f4a:	9105      	str	r1, [sp, #20]
 8007f4c:	e7c4      	b.n	8007ed8 <_svfiprintf_r+0x130>
 8007f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f52:	4604      	mov	r4, r0
 8007f54:	2301      	movs	r3, #1
 8007f56:	e7f0      	b.n	8007f3a <_svfiprintf_r+0x192>
 8007f58:	ab03      	add	r3, sp, #12
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	462a      	mov	r2, r5
 8007f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f98 <_svfiprintf_r+0x1f0>)
 8007f60:	a904      	add	r1, sp, #16
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7fd ff2e 	bl	8005dc4 <_printf_float>
 8007f68:	1c42      	adds	r2, r0, #1
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	d1d6      	bne.n	8007f1c <_svfiprintf_r+0x174>
 8007f6e:	89ab      	ldrh	r3, [r5, #12]
 8007f70:	065b      	lsls	r3, r3, #25
 8007f72:	f53f af2d 	bmi.w	8007dd0 <_svfiprintf_r+0x28>
 8007f76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f78:	e72c      	b.n	8007dd4 <_svfiprintf_r+0x2c>
 8007f7a:	ab03      	add	r3, sp, #12
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	462a      	mov	r2, r5
 8007f80:	4b05      	ldr	r3, [pc, #20]	@ (8007f98 <_svfiprintf_r+0x1f0>)
 8007f82:	a904      	add	r1, sp, #16
 8007f84:	4638      	mov	r0, r7
 8007f86:	f7fe f9b5 	bl	80062f4 <_printf_i>
 8007f8a:	e7ed      	b.n	8007f68 <_svfiprintf_r+0x1c0>
 8007f8c:	08008e38 	.word	0x08008e38
 8007f90:	08008e42 	.word	0x08008e42
 8007f94:	08005dc5 	.word	0x08005dc5
 8007f98:	08007cf1 	.word	0x08007cf1
 8007f9c:	08008e3e 	.word	0x08008e3e

08007fa0 <__sflush_r>:
 8007fa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa8:	0716      	lsls	r6, r2, #28
 8007faa:	4605      	mov	r5, r0
 8007fac:	460c      	mov	r4, r1
 8007fae:	d454      	bmi.n	800805a <__sflush_r+0xba>
 8007fb0:	684b      	ldr	r3, [r1, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	dc02      	bgt.n	8007fbc <__sflush_r+0x1c>
 8007fb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dd48      	ble.n	800804e <__sflush_r+0xae>
 8007fbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	d045      	beq.n	800804e <__sflush_r+0xae>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fc8:	682f      	ldr	r7, [r5, #0]
 8007fca:	6a21      	ldr	r1, [r4, #32]
 8007fcc:	602b      	str	r3, [r5, #0]
 8007fce:	d030      	beq.n	8008032 <__sflush_r+0x92>
 8007fd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fd2:	89a3      	ldrh	r3, [r4, #12]
 8007fd4:	0759      	lsls	r1, r3, #29
 8007fd6:	d505      	bpl.n	8007fe4 <__sflush_r+0x44>
 8007fd8:	6863      	ldr	r3, [r4, #4]
 8007fda:	1ad2      	subs	r2, r2, r3
 8007fdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fde:	b10b      	cbz	r3, 8007fe4 <__sflush_r+0x44>
 8007fe0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fe2:	1ad2      	subs	r2, r2, r3
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fe8:	6a21      	ldr	r1, [r4, #32]
 8007fea:	4628      	mov	r0, r5
 8007fec:	47b0      	blx	r6
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	d106      	bne.n	8008002 <__sflush_r+0x62>
 8007ff4:	6829      	ldr	r1, [r5, #0]
 8007ff6:	291d      	cmp	r1, #29
 8007ff8:	d82b      	bhi.n	8008052 <__sflush_r+0xb2>
 8007ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80080a4 <__sflush_r+0x104>)
 8007ffc:	410a      	asrs	r2, r1
 8007ffe:	07d6      	lsls	r6, r2, #31
 8008000:	d427      	bmi.n	8008052 <__sflush_r+0xb2>
 8008002:	2200      	movs	r2, #0
 8008004:	6062      	str	r2, [r4, #4]
 8008006:	04d9      	lsls	r1, r3, #19
 8008008:	6922      	ldr	r2, [r4, #16]
 800800a:	6022      	str	r2, [r4, #0]
 800800c:	d504      	bpl.n	8008018 <__sflush_r+0x78>
 800800e:	1c42      	adds	r2, r0, #1
 8008010:	d101      	bne.n	8008016 <__sflush_r+0x76>
 8008012:	682b      	ldr	r3, [r5, #0]
 8008014:	b903      	cbnz	r3, 8008018 <__sflush_r+0x78>
 8008016:	6560      	str	r0, [r4, #84]	@ 0x54
 8008018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800801a:	602f      	str	r7, [r5, #0]
 800801c:	b1b9      	cbz	r1, 800804e <__sflush_r+0xae>
 800801e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008022:	4299      	cmp	r1, r3
 8008024:	d002      	beq.n	800802c <__sflush_r+0x8c>
 8008026:	4628      	mov	r0, r5
 8008028:	f7ff fa96 	bl	8007558 <_free_r>
 800802c:	2300      	movs	r3, #0
 800802e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008030:	e00d      	b.n	800804e <__sflush_r+0xae>
 8008032:	2301      	movs	r3, #1
 8008034:	4628      	mov	r0, r5
 8008036:	47b0      	blx	r6
 8008038:	4602      	mov	r2, r0
 800803a:	1c50      	adds	r0, r2, #1
 800803c:	d1c9      	bne.n	8007fd2 <__sflush_r+0x32>
 800803e:	682b      	ldr	r3, [r5, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0c6      	beq.n	8007fd2 <__sflush_r+0x32>
 8008044:	2b1d      	cmp	r3, #29
 8008046:	d001      	beq.n	800804c <__sflush_r+0xac>
 8008048:	2b16      	cmp	r3, #22
 800804a:	d11e      	bne.n	800808a <__sflush_r+0xea>
 800804c:	602f      	str	r7, [r5, #0]
 800804e:	2000      	movs	r0, #0
 8008050:	e022      	b.n	8008098 <__sflush_r+0xf8>
 8008052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008056:	b21b      	sxth	r3, r3
 8008058:	e01b      	b.n	8008092 <__sflush_r+0xf2>
 800805a:	690f      	ldr	r7, [r1, #16]
 800805c:	2f00      	cmp	r7, #0
 800805e:	d0f6      	beq.n	800804e <__sflush_r+0xae>
 8008060:	0793      	lsls	r3, r2, #30
 8008062:	680e      	ldr	r6, [r1, #0]
 8008064:	bf08      	it	eq
 8008066:	694b      	ldreq	r3, [r1, #20]
 8008068:	600f      	str	r7, [r1, #0]
 800806a:	bf18      	it	ne
 800806c:	2300      	movne	r3, #0
 800806e:	eba6 0807 	sub.w	r8, r6, r7
 8008072:	608b      	str	r3, [r1, #8]
 8008074:	f1b8 0f00 	cmp.w	r8, #0
 8008078:	dde9      	ble.n	800804e <__sflush_r+0xae>
 800807a:	6a21      	ldr	r1, [r4, #32]
 800807c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800807e:	4643      	mov	r3, r8
 8008080:	463a      	mov	r2, r7
 8008082:	4628      	mov	r0, r5
 8008084:	47b0      	blx	r6
 8008086:	2800      	cmp	r0, #0
 8008088:	dc08      	bgt.n	800809c <__sflush_r+0xfc>
 800808a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800808e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809c:	4407      	add	r7, r0
 800809e:	eba8 0800 	sub.w	r8, r8, r0
 80080a2:	e7e7      	b.n	8008074 <__sflush_r+0xd4>
 80080a4:	dfbffffe 	.word	0xdfbffffe

080080a8 <_fflush_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	690b      	ldr	r3, [r1, #16]
 80080ac:	4605      	mov	r5, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	b913      	cbnz	r3, 80080b8 <_fflush_r+0x10>
 80080b2:	2500      	movs	r5, #0
 80080b4:	4628      	mov	r0, r5
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	b118      	cbz	r0, 80080c2 <_fflush_r+0x1a>
 80080ba:	6a03      	ldr	r3, [r0, #32]
 80080bc:	b90b      	cbnz	r3, 80080c2 <_fflush_r+0x1a>
 80080be:	f7fe fac5 	bl	800664c <__sinit>
 80080c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0f3      	beq.n	80080b2 <_fflush_r+0xa>
 80080ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080cc:	07d0      	lsls	r0, r2, #31
 80080ce:	d404      	bmi.n	80080da <_fflush_r+0x32>
 80080d0:	0599      	lsls	r1, r3, #22
 80080d2:	d402      	bmi.n	80080da <_fflush_r+0x32>
 80080d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080d6:	f7fe fbe0 	bl	800689a <__retarget_lock_acquire_recursive>
 80080da:	4628      	mov	r0, r5
 80080dc:	4621      	mov	r1, r4
 80080de:	f7ff ff5f 	bl	8007fa0 <__sflush_r>
 80080e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080e4:	07da      	lsls	r2, r3, #31
 80080e6:	4605      	mov	r5, r0
 80080e8:	d4e4      	bmi.n	80080b4 <_fflush_r+0xc>
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	059b      	lsls	r3, r3, #22
 80080ee:	d4e1      	bmi.n	80080b4 <_fflush_r+0xc>
 80080f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080f2:	f7fe fbd3 	bl	800689c <__retarget_lock_release_recursive>
 80080f6:	e7dd      	b.n	80080b4 <_fflush_r+0xc>

080080f8 <memmove>:
 80080f8:	4288      	cmp	r0, r1
 80080fa:	b510      	push	{r4, lr}
 80080fc:	eb01 0402 	add.w	r4, r1, r2
 8008100:	d902      	bls.n	8008108 <memmove+0x10>
 8008102:	4284      	cmp	r4, r0
 8008104:	4623      	mov	r3, r4
 8008106:	d807      	bhi.n	8008118 <memmove+0x20>
 8008108:	1e43      	subs	r3, r0, #1
 800810a:	42a1      	cmp	r1, r4
 800810c:	d008      	beq.n	8008120 <memmove+0x28>
 800810e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008112:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008116:	e7f8      	b.n	800810a <memmove+0x12>
 8008118:	4402      	add	r2, r0
 800811a:	4601      	mov	r1, r0
 800811c:	428a      	cmp	r2, r1
 800811e:	d100      	bne.n	8008122 <memmove+0x2a>
 8008120:	bd10      	pop	{r4, pc}
 8008122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800812a:	e7f7      	b.n	800811c <memmove+0x24>

0800812c <__assert_func>:
 800812c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800812e:	4614      	mov	r4, r2
 8008130:	461a      	mov	r2, r3
 8008132:	4b09      	ldr	r3, [pc, #36]	@ (8008158 <__assert_func+0x2c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4605      	mov	r5, r0
 8008138:	68d8      	ldr	r0, [r3, #12]
 800813a:	b954      	cbnz	r4, 8008152 <__assert_func+0x26>
 800813c:	4b07      	ldr	r3, [pc, #28]	@ (800815c <__assert_func+0x30>)
 800813e:	461c      	mov	r4, r3
 8008140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008144:	9100      	str	r1, [sp, #0]
 8008146:	462b      	mov	r3, r5
 8008148:	4905      	ldr	r1, [pc, #20]	@ (8008160 <__assert_func+0x34>)
 800814a:	f000 f86f 	bl	800822c <fiprintf>
 800814e:	f000 f87f 	bl	8008250 <abort>
 8008152:	4b04      	ldr	r3, [pc, #16]	@ (8008164 <__assert_func+0x38>)
 8008154:	e7f4      	b.n	8008140 <__assert_func+0x14>
 8008156:	bf00      	nop
 8008158:	20000028 	.word	0x20000028
 800815c:	08008e8e 	.word	0x08008e8e
 8008160:	08008e60 	.word	0x08008e60
 8008164:	08008e53 	.word	0x08008e53

08008168 <_calloc_r>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	fba1 5402 	umull	r5, r4, r1, r2
 800816e:	b93c      	cbnz	r4, 8008180 <_calloc_r+0x18>
 8008170:	4629      	mov	r1, r5
 8008172:	f7fd fcfb 	bl	8005b6c <_malloc_r>
 8008176:	4606      	mov	r6, r0
 8008178:	b928      	cbnz	r0, 8008186 <_calloc_r+0x1e>
 800817a:	2600      	movs	r6, #0
 800817c:	4630      	mov	r0, r6
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	220c      	movs	r2, #12
 8008182:	6002      	str	r2, [r0, #0]
 8008184:	e7f9      	b.n	800817a <_calloc_r+0x12>
 8008186:	462a      	mov	r2, r5
 8008188:	4621      	mov	r1, r4
 800818a:	f7fe faf8 	bl	800677e <memset>
 800818e:	e7f5      	b.n	800817c <_calloc_r+0x14>

08008190 <__ascii_mbtowc>:
 8008190:	b082      	sub	sp, #8
 8008192:	b901      	cbnz	r1, 8008196 <__ascii_mbtowc+0x6>
 8008194:	a901      	add	r1, sp, #4
 8008196:	b142      	cbz	r2, 80081aa <__ascii_mbtowc+0x1a>
 8008198:	b14b      	cbz	r3, 80081ae <__ascii_mbtowc+0x1e>
 800819a:	7813      	ldrb	r3, [r2, #0]
 800819c:	600b      	str	r3, [r1, #0]
 800819e:	7812      	ldrb	r2, [r2, #0]
 80081a0:	1e10      	subs	r0, r2, #0
 80081a2:	bf18      	it	ne
 80081a4:	2001      	movne	r0, #1
 80081a6:	b002      	add	sp, #8
 80081a8:	4770      	bx	lr
 80081aa:	4610      	mov	r0, r2
 80081ac:	e7fb      	b.n	80081a6 <__ascii_mbtowc+0x16>
 80081ae:	f06f 0001 	mvn.w	r0, #1
 80081b2:	e7f8      	b.n	80081a6 <__ascii_mbtowc+0x16>

080081b4 <_realloc_r>:
 80081b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b8:	4680      	mov	r8, r0
 80081ba:	4615      	mov	r5, r2
 80081bc:	460c      	mov	r4, r1
 80081be:	b921      	cbnz	r1, 80081ca <_realloc_r+0x16>
 80081c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081c4:	4611      	mov	r1, r2
 80081c6:	f7fd bcd1 	b.w	8005b6c <_malloc_r>
 80081ca:	b92a      	cbnz	r2, 80081d8 <_realloc_r+0x24>
 80081cc:	f7ff f9c4 	bl	8007558 <_free_r>
 80081d0:	2400      	movs	r4, #0
 80081d2:	4620      	mov	r0, r4
 80081d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d8:	f000 f841 	bl	800825e <_malloc_usable_size_r>
 80081dc:	4285      	cmp	r5, r0
 80081de:	4606      	mov	r6, r0
 80081e0:	d802      	bhi.n	80081e8 <_realloc_r+0x34>
 80081e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80081e6:	d8f4      	bhi.n	80081d2 <_realloc_r+0x1e>
 80081e8:	4629      	mov	r1, r5
 80081ea:	4640      	mov	r0, r8
 80081ec:	f7fd fcbe 	bl	8005b6c <_malloc_r>
 80081f0:	4607      	mov	r7, r0
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d0ec      	beq.n	80081d0 <_realloc_r+0x1c>
 80081f6:	42b5      	cmp	r5, r6
 80081f8:	462a      	mov	r2, r5
 80081fa:	4621      	mov	r1, r4
 80081fc:	bf28      	it	cs
 80081fe:	4632      	movcs	r2, r6
 8008200:	f7fe fb4d 	bl	800689e <memcpy>
 8008204:	4621      	mov	r1, r4
 8008206:	4640      	mov	r0, r8
 8008208:	f7ff f9a6 	bl	8007558 <_free_r>
 800820c:	463c      	mov	r4, r7
 800820e:	e7e0      	b.n	80081d2 <_realloc_r+0x1e>

08008210 <__ascii_wctomb>:
 8008210:	4603      	mov	r3, r0
 8008212:	4608      	mov	r0, r1
 8008214:	b141      	cbz	r1, 8008228 <__ascii_wctomb+0x18>
 8008216:	2aff      	cmp	r2, #255	@ 0xff
 8008218:	d904      	bls.n	8008224 <__ascii_wctomb+0x14>
 800821a:	228a      	movs	r2, #138	@ 0x8a
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	f04f 30ff 	mov.w	r0, #4294967295
 8008222:	4770      	bx	lr
 8008224:	700a      	strb	r2, [r1, #0]
 8008226:	2001      	movs	r0, #1
 8008228:	4770      	bx	lr
	...

0800822c <fiprintf>:
 800822c:	b40e      	push	{r1, r2, r3}
 800822e:	b503      	push	{r0, r1, lr}
 8008230:	4601      	mov	r1, r0
 8008232:	ab03      	add	r3, sp, #12
 8008234:	4805      	ldr	r0, [pc, #20]	@ (800824c <fiprintf+0x20>)
 8008236:	f853 2b04 	ldr.w	r2, [r3], #4
 800823a:	6800      	ldr	r0, [r0, #0]
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	f000 f83f 	bl	80082c0 <_vfiprintf_r>
 8008242:	b002      	add	sp, #8
 8008244:	f85d eb04 	ldr.w	lr, [sp], #4
 8008248:	b003      	add	sp, #12
 800824a:	4770      	bx	lr
 800824c:	20000028 	.word	0x20000028

08008250 <abort>:
 8008250:	b508      	push	{r3, lr}
 8008252:	2006      	movs	r0, #6
 8008254:	f000 fa08 	bl	8008668 <raise>
 8008258:	2001      	movs	r0, #1
 800825a:	f7fa fe43 	bl	8002ee4 <_exit>

0800825e <_malloc_usable_size_r>:
 800825e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008262:	1f18      	subs	r0, r3, #4
 8008264:	2b00      	cmp	r3, #0
 8008266:	bfbc      	itt	lt
 8008268:	580b      	ldrlt	r3, [r1, r0]
 800826a:	18c0      	addlt	r0, r0, r3
 800826c:	4770      	bx	lr

0800826e <__sfputc_r>:
 800826e:	6893      	ldr	r3, [r2, #8]
 8008270:	3b01      	subs	r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	b410      	push	{r4}
 8008276:	6093      	str	r3, [r2, #8]
 8008278:	da08      	bge.n	800828c <__sfputc_r+0x1e>
 800827a:	6994      	ldr	r4, [r2, #24]
 800827c:	42a3      	cmp	r3, r4
 800827e:	db01      	blt.n	8008284 <__sfputc_r+0x16>
 8008280:	290a      	cmp	r1, #10
 8008282:	d103      	bne.n	800828c <__sfputc_r+0x1e>
 8008284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008288:	f000 b932 	b.w	80084f0 <__swbuf_r>
 800828c:	6813      	ldr	r3, [r2, #0]
 800828e:	1c58      	adds	r0, r3, #1
 8008290:	6010      	str	r0, [r2, #0]
 8008292:	7019      	strb	r1, [r3, #0]
 8008294:	4608      	mov	r0, r1
 8008296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800829a:	4770      	bx	lr

0800829c <__sfputs_r>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	4606      	mov	r6, r0
 80082a0:	460f      	mov	r7, r1
 80082a2:	4614      	mov	r4, r2
 80082a4:	18d5      	adds	r5, r2, r3
 80082a6:	42ac      	cmp	r4, r5
 80082a8:	d101      	bne.n	80082ae <__sfputs_r+0x12>
 80082aa:	2000      	movs	r0, #0
 80082ac:	e007      	b.n	80082be <__sfputs_r+0x22>
 80082ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b2:	463a      	mov	r2, r7
 80082b4:	4630      	mov	r0, r6
 80082b6:	f7ff ffda 	bl	800826e <__sfputc_r>
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	d1f3      	bne.n	80082a6 <__sfputs_r+0xa>
 80082be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082c0 <_vfiprintf_r>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	460d      	mov	r5, r1
 80082c6:	b09d      	sub	sp, #116	@ 0x74
 80082c8:	4614      	mov	r4, r2
 80082ca:	4698      	mov	r8, r3
 80082cc:	4606      	mov	r6, r0
 80082ce:	b118      	cbz	r0, 80082d8 <_vfiprintf_r+0x18>
 80082d0:	6a03      	ldr	r3, [r0, #32]
 80082d2:	b90b      	cbnz	r3, 80082d8 <_vfiprintf_r+0x18>
 80082d4:	f7fe f9ba 	bl	800664c <__sinit>
 80082d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082da:	07d9      	lsls	r1, r3, #31
 80082dc:	d405      	bmi.n	80082ea <_vfiprintf_r+0x2a>
 80082de:	89ab      	ldrh	r3, [r5, #12]
 80082e0:	059a      	lsls	r2, r3, #22
 80082e2:	d402      	bmi.n	80082ea <_vfiprintf_r+0x2a>
 80082e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082e6:	f7fe fad8 	bl	800689a <__retarget_lock_acquire_recursive>
 80082ea:	89ab      	ldrh	r3, [r5, #12]
 80082ec:	071b      	lsls	r3, r3, #28
 80082ee:	d501      	bpl.n	80082f4 <_vfiprintf_r+0x34>
 80082f0:	692b      	ldr	r3, [r5, #16]
 80082f2:	b99b      	cbnz	r3, 800831c <_vfiprintf_r+0x5c>
 80082f4:	4629      	mov	r1, r5
 80082f6:	4630      	mov	r0, r6
 80082f8:	f000 f938 	bl	800856c <__swsetup_r>
 80082fc:	b170      	cbz	r0, 800831c <_vfiprintf_r+0x5c>
 80082fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008300:	07dc      	lsls	r4, r3, #31
 8008302:	d504      	bpl.n	800830e <_vfiprintf_r+0x4e>
 8008304:	f04f 30ff 	mov.w	r0, #4294967295
 8008308:	b01d      	add	sp, #116	@ 0x74
 800830a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	0598      	lsls	r0, r3, #22
 8008312:	d4f7      	bmi.n	8008304 <_vfiprintf_r+0x44>
 8008314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008316:	f7fe fac1 	bl	800689c <__retarget_lock_release_recursive>
 800831a:	e7f3      	b.n	8008304 <_vfiprintf_r+0x44>
 800831c:	2300      	movs	r3, #0
 800831e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008320:	2320      	movs	r3, #32
 8008322:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008326:	f8cd 800c 	str.w	r8, [sp, #12]
 800832a:	2330      	movs	r3, #48	@ 0x30
 800832c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80084dc <_vfiprintf_r+0x21c>
 8008330:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008334:	f04f 0901 	mov.w	r9, #1
 8008338:	4623      	mov	r3, r4
 800833a:	469a      	mov	sl, r3
 800833c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008340:	b10a      	cbz	r2, 8008346 <_vfiprintf_r+0x86>
 8008342:	2a25      	cmp	r2, #37	@ 0x25
 8008344:	d1f9      	bne.n	800833a <_vfiprintf_r+0x7a>
 8008346:	ebba 0b04 	subs.w	fp, sl, r4
 800834a:	d00b      	beq.n	8008364 <_vfiprintf_r+0xa4>
 800834c:	465b      	mov	r3, fp
 800834e:	4622      	mov	r2, r4
 8008350:	4629      	mov	r1, r5
 8008352:	4630      	mov	r0, r6
 8008354:	f7ff ffa2 	bl	800829c <__sfputs_r>
 8008358:	3001      	adds	r0, #1
 800835a:	f000 80a7 	beq.w	80084ac <_vfiprintf_r+0x1ec>
 800835e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008360:	445a      	add	r2, fp
 8008362:	9209      	str	r2, [sp, #36]	@ 0x24
 8008364:	f89a 3000 	ldrb.w	r3, [sl]
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 809f 	beq.w	80084ac <_vfiprintf_r+0x1ec>
 800836e:	2300      	movs	r3, #0
 8008370:	f04f 32ff 	mov.w	r2, #4294967295
 8008374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008378:	f10a 0a01 	add.w	sl, sl, #1
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	9307      	str	r3, [sp, #28]
 8008380:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008384:	931a      	str	r3, [sp, #104]	@ 0x68
 8008386:	4654      	mov	r4, sl
 8008388:	2205      	movs	r2, #5
 800838a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800838e:	4853      	ldr	r0, [pc, #332]	@ (80084dc <_vfiprintf_r+0x21c>)
 8008390:	f7f7 ff3e 	bl	8000210 <memchr>
 8008394:	9a04      	ldr	r2, [sp, #16]
 8008396:	b9d8      	cbnz	r0, 80083d0 <_vfiprintf_r+0x110>
 8008398:	06d1      	lsls	r1, r2, #27
 800839a:	bf44      	itt	mi
 800839c:	2320      	movmi	r3, #32
 800839e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083a2:	0713      	lsls	r3, r2, #28
 80083a4:	bf44      	itt	mi
 80083a6:	232b      	movmi	r3, #43	@ 0x2b
 80083a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083ac:	f89a 3000 	ldrb.w	r3, [sl]
 80083b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083b2:	d015      	beq.n	80083e0 <_vfiprintf_r+0x120>
 80083b4:	9a07      	ldr	r2, [sp, #28]
 80083b6:	4654      	mov	r4, sl
 80083b8:	2000      	movs	r0, #0
 80083ba:	f04f 0c0a 	mov.w	ip, #10
 80083be:	4621      	mov	r1, r4
 80083c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c4:	3b30      	subs	r3, #48	@ 0x30
 80083c6:	2b09      	cmp	r3, #9
 80083c8:	d94b      	bls.n	8008462 <_vfiprintf_r+0x1a2>
 80083ca:	b1b0      	cbz	r0, 80083fa <_vfiprintf_r+0x13a>
 80083cc:	9207      	str	r2, [sp, #28]
 80083ce:	e014      	b.n	80083fa <_vfiprintf_r+0x13a>
 80083d0:	eba0 0308 	sub.w	r3, r0, r8
 80083d4:	fa09 f303 	lsl.w	r3, r9, r3
 80083d8:	4313      	orrs	r3, r2
 80083da:	9304      	str	r3, [sp, #16]
 80083dc:	46a2      	mov	sl, r4
 80083de:	e7d2      	b.n	8008386 <_vfiprintf_r+0xc6>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	1d19      	adds	r1, r3, #4
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	9103      	str	r1, [sp, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	bfbb      	ittet	lt
 80083ec:	425b      	neglt	r3, r3
 80083ee:	f042 0202 	orrlt.w	r2, r2, #2
 80083f2:	9307      	strge	r3, [sp, #28]
 80083f4:	9307      	strlt	r3, [sp, #28]
 80083f6:	bfb8      	it	lt
 80083f8:	9204      	strlt	r2, [sp, #16]
 80083fa:	7823      	ldrb	r3, [r4, #0]
 80083fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80083fe:	d10a      	bne.n	8008416 <_vfiprintf_r+0x156>
 8008400:	7863      	ldrb	r3, [r4, #1]
 8008402:	2b2a      	cmp	r3, #42	@ 0x2a
 8008404:	d132      	bne.n	800846c <_vfiprintf_r+0x1ac>
 8008406:	9b03      	ldr	r3, [sp, #12]
 8008408:	1d1a      	adds	r2, r3, #4
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	9203      	str	r2, [sp, #12]
 800840e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008412:	3402      	adds	r4, #2
 8008414:	9305      	str	r3, [sp, #20]
 8008416:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084ec <_vfiprintf_r+0x22c>
 800841a:	7821      	ldrb	r1, [r4, #0]
 800841c:	2203      	movs	r2, #3
 800841e:	4650      	mov	r0, sl
 8008420:	f7f7 fef6 	bl	8000210 <memchr>
 8008424:	b138      	cbz	r0, 8008436 <_vfiprintf_r+0x176>
 8008426:	9b04      	ldr	r3, [sp, #16]
 8008428:	eba0 000a 	sub.w	r0, r0, sl
 800842c:	2240      	movs	r2, #64	@ 0x40
 800842e:	4082      	lsls	r2, r0
 8008430:	4313      	orrs	r3, r2
 8008432:	3401      	adds	r4, #1
 8008434:	9304      	str	r3, [sp, #16]
 8008436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800843a:	4829      	ldr	r0, [pc, #164]	@ (80084e0 <_vfiprintf_r+0x220>)
 800843c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008440:	2206      	movs	r2, #6
 8008442:	f7f7 fee5 	bl	8000210 <memchr>
 8008446:	2800      	cmp	r0, #0
 8008448:	d03f      	beq.n	80084ca <_vfiprintf_r+0x20a>
 800844a:	4b26      	ldr	r3, [pc, #152]	@ (80084e4 <_vfiprintf_r+0x224>)
 800844c:	bb1b      	cbnz	r3, 8008496 <_vfiprintf_r+0x1d6>
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	3307      	adds	r3, #7
 8008452:	f023 0307 	bic.w	r3, r3, #7
 8008456:	3308      	adds	r3, #8
 8008458:	9303      	str	r3, [sp, #12]
 800845a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800845c:	443b      	add	r3, r7
 800845e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008460:	e76a      	b.n	8008338 <_vfiprintf_r+0x78>
 8008462:	fb0c 3202 	mla	r2, ip, r2, r3
 8008466:	460c      	mov	r4, r1
 8008468:	2001      	movs	r0, #1
 800846a:	e7a8      	b.n	80083be <_vfiprintf_r+0xfe>
 800846c:	2300      	movs	r3, #0
 800846e:	3401      	adds	r4, #1
 8008470:	9305      	str	r3, [sp, #20]
 8008472:	4619      	mov	r1, r3
 8008474:	f04f 0c0a 	mov.w	ip, #10
 8008478:	4620      	mov	r0, r4
 800847a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800847e:	3a30      	subs	r2, #48	@ 0x30
 8008480:	2a09      	cmp	r2, #9
 8008482:	d903      	bls.n	800848c <_vfiprintf_r+0x1cc>
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0c6      	beq.n	8008416 <_vfiprintf_r+0x156>
 8008488:	9105      	str	r1, [sp, #20]
 800848a:	e7c4      	b.n	8008416 <_vfiprintf_r+0x156>
 800848c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008490:	4604      	mov	r4, r0
 8008492:	2301      	movs	r3, #1
 8008494:	e7f0      	b.n	8008478 <_vfiprintf_r+0x1b8>
 8008496:	ab03      	add	r3, sp, #12
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	462a      	mov	r2, r5
 800849c:	4b12      	ldr	r3, [pc, #72]	@ (80084e8 <_vfiprintf_r+0x228>)
 800849e:	a904      	add	r1, sp, #16
 80084a0:	4630      	mov	r0, r6
 80084a2:	f7fd fc8f 	bl	8005dc4 <_printf_float>
 80084a6:	4607      	mov	r7, r0
 80084a8:	1c78      	adds	r0, r7, #1
 80084aa:	d1d6      	bne.n	800845a <_vfiprintf_r+0x19a>
 80084ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084ae:	07d9      	lsls	r1, r3, #31
 80084b0:	d405      	bmi.n	80084be <_vfiprintf_r+0x1fe>
 80084b2:	89ab      	ldrh	r3, [r5, #12]
 80084b4:	059a      	lsls	r2, r3, #22
 80084b6:	d402      	bmi.n	80084be <_vfiprintf_r+0x1fe>
 80084b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084ba:	f7fe f9ef 	bl	800689c <__retarget_lock_release_recursive>
 80084be:	89ab      	ldrh	r3, [r5, #12]
 80084c0:	065b      	lsls	r3, r3, #25
 80084c2:	f53f af1f 	bmi.w	8008304 <_vfiprintf_r+0x44>
 80084c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084c8:	e71e      	b.n	8008308 <_vfiprintf_r+0x48>
 80084ca:	ab03      	add	r3, sp, #12
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	462a      	mov	r2, r5
 80084d0:	4b05      	ldr	r3, [pc, #20]	@ (80084e8 <_vfiprintf_r+0x228>)
 80084d2:	a904      	add	r1, sp, #16
 80084d4:	4630      	mov	r0, r6
 80084d6:	f7fd ff0d 	bl	80062f4 <_printf_i>
 80084da:	e7e4      	b.n	80084a6 <_vfiprintf_r+0x1e6>
 80084dc:	08008e38 	.word	0x08008e38
 80084e0:	08008e42 	.word	0x08008e42
 80084e4:	08005dc5 	.word	0x08005dc5
 80084e8:	0800829d 	.word	0x0800829d
 80084ec:	08008e3e 	.word	0x08008e3e

080084f0 <__swbuf_r>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	460e      	mov	r6, r1
 80084f4:	4614      	mov	r4, r2
 80084f6:	4605      	mov	r5, r0
 80084f8:	b118      	cbz	r0, 8008502 <__swbuf_r+0x12>
 80084fa:	6a03      	ldr	r3, [r0, #32]
 80084fc:	b90b      	cbnz	r3, 8008502 <__swbuf_r+0x12>
 80084fe:	f7fe f8a5 	bl	800664c <__sinit>
 8008502:	69a3      	ldr	r3, [r4, #24]
 8008504:	60a3      	str	r3, [r4, #8]
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	071a      	lsls	r2, r3, #28
 800850a:	d501      	bpl.n	8008510 <__swbuf_r+0x20>
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	b943      	cbnz	r3, 8008522 <__swbuf_r+0x32>
 8008510:	4621      	mov	r1, r4
 8008512:	4628      	mov	r0, r5
 8008514:	f000 f82a 	bl	800856c <__swsetup_r>
 8008518:	b118      	cbz	r0, 8008522 <__swbuf_r+0x32>
 800851a:	f04f 37ff 	mov.w	r7, #4294967295
 800851e:	4638      	mov	r0, r7
 8008520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	6922      	ldr	r2, [r4, #16]
 8008526:	1a98      	subs	r0, r3, r2
 8008528:	6963      	ldr	r3, [r4, #20]
 800852a:	b2f6      	uxtb	r6, r6
 800852c:	4283      	cmp	r3, r0
 800852e:	4637      	mov	r7, r6
 8008530:	dc05      	bgt.n	800853e <__swbuf_r+0x4e>
 8008532:	4621      	mov	r1, r4
 8008534:	4628      	mov	r0, r5
 8008536:	f7ff fdb7 	bl	80080a8 <_fflush_r>
 800853a:	2800      	cmp	r0, #0
 800853c:	d1ed      	bne.n	800851a <__swbuf_r+0x2a>
 800853e:	68a3      	ldr	r3, [r4, #8]
 8008540:	3b01      	subs	r3, #1
 8008542:	60a3      	str	r3, [r4, #8]
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	1c5a      	adds	r2, r3, #1
 8008548:	6022      	str	r2, [r4, #0]
 800854a:	701e      	strb	r6, [r3, #0]
 800854c:	6962      	ldr	r2, [r4, #20]
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	429a      	cmp	r2, r3
 8008552:	d004      	beq.n	800855e <__swbuf_r+0x6e>
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	07db      	lsls	r3, r3, #31
 8008558:	d5e1      	bpl.n	800851e <__swbuf_r+0x2e>
 800855a:	2e0a      	cmp	r6, #10
 800855c:	d1df      	bne.n	800851e <__swbuf_r+0x2e>
 800855e:	4621      	mov	r1, r4
 8008560:	4628      	mov	r0, r5
 8008562:	f7ff fda1 	bl	80080a8 <_fflush_r>
 8008566:	2800      	cmp	r0, #0
 8008568:	d0d9      	beq.n	800851e <__swbuf_r+0x2e>
 800856a:	e7d6      	b.n	800851a <__swbuf_r+0x2a>

0800856c <__swsetup_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4b29      	ldr	r3, [pc, #164]	@ (8008614 <__swsetup_r+0xa8>)
 8008570:	4605      	mov	r5, r0
 8008572:	6818      	ldr	r0, [r3, #0]
 8008574:	460c      	mov	r4, r1
 8008576:	b118      	cbz	r0, 8008580 <__swsetup_r+0x14>
 8008578:	6a03      	ldr	r3, [r0, #32]
 800857a:	b90b      	cbnz	r3, 8008580 <__swsetup_r+0x14>
 800857c:	f7fe f866 	bl	800664c <__sinit>
 8008580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008584:	0719      	lsls	r1, r3, #28
 8008586:	d422      	bmi.n	80085ce <__swsetup_r+0x62>
 8008588:	06da      	lsls	r2, r3, #27
 800858a:	d407      	bmi.n	800859c <__swsetup_r+0x30>
 800858c:	2209      	movs	r2, #9
 800858e:	602a      	str	r2, [r5, #0]
 8008590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008594:	81a3      	strh	r3, [r4, #12]
 8008596:	f04f 30ff 	mov.w	r0, #4294967295
 800859a:	e033      	b.n	8008604 <__swsetup_r+0x98>
 800859c:	0758      	lsls	r0, r3, #29
 800859e:	d512      	bpl.n	80085c6 <__swsetup_r+0x5a>
 80085a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085a2:	b141      	cbz	r1, 80085b6 <__swsetup_r+0x4a>
 80085a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085a8:	4299      	cmp	r1, r3
 80085aa:	d002      	beq.n	80085b2 <__swsetup_r+0x46>
 80085ac:	4628      	mov	r0, r5
 80085ae:	f7fe ffd3 	bl	8007558 <_free_r>
 80085b2:	2300      	movs	r3, #0
 80085b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	2300      	movs	r3, #0
 80085c0:	6063      	str	r3, [r4, #4]
 80085c2:	6923      	ldr	r3, [r4, #16]
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	f043 0308 	orr.w	r3, r3, #8
 80085cc:	81a3      	strh	r3, [r4, #12]
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	b94b      	cbnz	r3, 80085e6 <__swsetup_r+0x7a>
 80085d2:	89a3      	ldrh	r3, [r4, #12]
 80085d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80085d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085dc:	d003      	beq.n	80085e6 <__swsetup_r+0x7a>
 80085de:	4621      	mov	r1, r4
 80085e0:	4628      	mov	r0, r5
 80085e2:	f000 f883 	bl	80086ec <__smakebuf_r>
 80085e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ea:	f013 0201 	ands.w	r2, r3, #1
 80085ee:	d00a      	beq.n	8008606 <__swsetup_r+0x9a>
 80085f0:	2200      	movs	r2, #0
 80085f2:	60a2      	str	r2, [r4, #8]
 80085f4:	6962      	ldr	r2, [r4, #20]
 80085f6:	4252      	negs	r2, r2
 80085f8:	61a2      	str	r2, [r4, #24]
 80085fa:	6922      	ldr	r2, [r4, #16]
 80085fc:	b942      	cbnz	r2, 8008610 <__swsetup_r+0xa4>
 80085fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008602:	d1c5      	bne.n	8008590 <__swsetup_r+0x24>
 8008604:	bd38      	pop	{r3, r4, r5, pc}
 8008606:	0799      	lsls	r1, r3, #30
 8008608:	bf58      	it	pl
 800860a:	6962      	ldrpl	r2, [r4, #20]
 800860c:	60a2      	str	r2, [r4, #8]
 800860e:	e7f4      	b.n	80085fa <__swsetup_r+0x8e>
 8008610:	2000      	movs	r0, #0
 8008612:	e7f7      	b.n	8008604 <__swsetup_r+0x98>
 8008614:	20000028 	.word	0x20000028

08008618 <_raise_r>:
 8008618:	291f      	cmp	r1, #31
 800861a:	b538      	push	{r3, r4, r5, lr}
 800861c:	4605      	mov	r5, r0
 800861e:	460c      	mov	r4, r1
 8008620:	d904      	bls.n	800862c <_raise_r+0x14>
 8008622:	2316      	movs	r3, #22
 8008624:	6003      	str	r3, [r0, #0]
 8008626:	f04f 30ff 	mov.w	r0, #4294967295
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800862e:	b112      	cbz	r2, 8008636 <_raise_r+0x1e>
 8008630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008634:	b94b      	cbnz	r3, 800864a <_raise_r+0x32>
 8008636:	4628      	mov	r0, r5
 8008638:	f000 f830 	bl	800869c <_getpid_r>
 800863c:	4622      	mov	r2, r4
 800863e:	4601      	mov	r1, r0
 8008640:	4628      	mov	r0, r5
 8008642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008646:	f000 b817 	b.w	8008678 <_kill_r>
 800864a:	2b01      	cmp	r3, #1
 800864c:	d00a      	beq.n	8008664 <_raise_r+0x4c>
 800864e:	1c59      	adds	r1, r3, #1
 8008650:	d103      	bne.n	800865a <_raise_r+0x42>
 8008652:	2316      	movs	r3, #22
 8008654:	6003      	str	r3, [r0, #0]
 8008656:	2001      	movs	r0, #1
 8008658:	e7e7      	b.n	800862a <_raise_r+0x12>
 800865a:	2100      	movs	r1, #0
 800865c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008660:	4620      	mov	r0, r4
 8008662:	4798      	blx	r3
 8008664:	2000      	movs	r0, #0
 8008666:	e7e0      	b.n	800862a <_raise_r+0x12>

08008668 <raise>:
 8008668:	4b02      	ldr	r3, [pc, #8]	@ (8008674 <raise+0xc>)
 800866a:	4601      	mov	r1, r0
 800866c:	6818      	ldr	r0, [r3, #0]
 800866e:	f7ff bfd3 	b.w	8008618 <_raise_r>
 8008672:	bf00      	nop
 8008674:	20000028 	.word	0x20000028

08008678 <_kill_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4d07      	ldr	r5, [pc, #28]	@ (8008698 <_kill_r+0x20>)
 800867c:	2300      	movs	r3, #0
 800867e:	4604      	mov	r4, r0
 8008680:	4608      	mov	r0, r1
 8008682:	4611      	mov	r1, r2
 8008684:	602b      	str	r3, [r5, #0]
 8008686:	f7fa fc1d 	bl	8002ec4 <_kill>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	d102      	bne.n	8008694 <_kill_r+0x1c>
 800868e:	682b      	ldr	r3, [r5, #0]
 8008690:	b103      	cbz	r3, 8008694 <_kill_r+0x1c>
 8008692:	6023      	str	r3, [r4, #0]
 8008694:	bd38      	pop	{r3, r4, r5, pc}
 8008696:	bf00      	nop
 8008698:	20000608 	.word	0x20000608

0800869c <_getpid_r>:
 800869c:	f7fa bc0a 	b.w	8002eb4 <_getpid>

080086a0 <__swhatbuf_r>:
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	460c      	mov	r4, r1
 80086a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a8:	2900      	cmp	r1, #0
 80086aa:	b096      	sub	sp, #88	@ 0x58
 80086ac:	4615      	mov	r5, r2
 80086ae:	461e      	mov	r6, r3
 80086b0:	da0d      	bge.n	80086ce <__swhatbuf_r+0x2e>
 80086b2:	89a3      	ldrh	r3, [r4, #12]
 80086b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086b8:	f04f 0100 	mov.w	r1, #0
 80086bc:	bf14      	ite	ne
 80086be:	2340      	movne	r3, #64	@ 0x40
 80086c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80086c4:	2000      	movs	r0, #0
 80086c6:	6031      	str	r1, [r6, #0]
 80086c8:	602b      	str	r3, [r5, #0]
 80086ca:	b016      	add	sp, #88	@ 0x58
 80086cc:	bd70      	pop	{r4, r5, r6, pc}
 80086ce:	466a      	mov	r2, sp
 80086d0:	f000 f848 	bl	8008764 <_fstat_r>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	dbec      	blt.n	80086b2 <__swhatbuf_r+0x12>
 80086d8:	9901      	ldr	r1, [sp, #4]
 80086da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80086de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80086e2:	4259      	negs	r1, r3
 80086e4:	4159      	adcs	r1, r3
 80086e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086ea:	e7eb      	b.n	80086c4 <__swhatbuf_r+0x24>

080086ec <__smakebuf_r>:
 80086ec:	898b      	ldrh	r3, [r1, #12]
 80086ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086f0:	079d      	lsls	r5, r3, #30
 80086f2:	4606      	mov	r6, r0
 80086f4:	460c      	mov	r4, r1
 80086f6:	d507      	bpl.n	8008708 <__smakebuf_r+0x1c>
 80086f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	6123      	str	r3, [r4, #16]
 8008700:	2301      	movs	r3, #1
 8008702:	6163      	str	r3, [r4, #20]
 8008704:	b003      	add	sp, #12
 8008706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008708:	ab01      	add	r3, sp, #4
 800870a:	466a      	mov	r2, sp
 800870c:	f7ff ffc8 	bl	80086a0 <__swhatbuf_r>
 8008710:	9f00      	ldr	r7, [sp, #0]
 8008712:	4605      	mov	r5, r0
 8008714:	4639      	mov	r1, r7
 8008716:	4630      	mov	r0, r6
 8008718:	f7fd fa28 	bl	8005b6c <_malloc_r>
 800871c:	b948      	cbnz	r0, 8008732 <__smakebuf_r+0x46>
 800871e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008722:	059a      	lsls	r2, r3, #22
 8008724:	d4ee      	bmi.n	8008704 <__smakebuf_r+0x18>
 8008726:	f023 0303 	bic.w	r3, r3, #3
 800872a:	f043 0302 	orr.w	r3, r3, #2
 800872e:	81a3      	strh	r3, [r4, #12]
 8008730:	e7e2      	b.n	80086f8 <__smakebuf_r+0xc>
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	6020      	str	r0, [r4, #0]
 8008736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800873a:	81a3      	strh	r3, [r4, #12]
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008742:	b15b      	cbz	r3, 800875c <__smakebuf_r+0x70>
 8008744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008748:	4630      	mov	r0, r6
 800874a:	f000 f81d 	bl	8008788 <_isatty_r>
 800874e:	b128      	cbz	r0, 800875c <__smakebuf_r+0x70>
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	f023 0303 	bic.w	r3, r3, #3
 8008756:	f043 0301 	orr.w	r3, r3, #1
 800875a:	81a3      	strh	r3, [r4, #12]
 800875c:	89a3      	ldrh	r3, [r4, #12]
 800875e:	431d      	orrs	r5, r3
 8008760:	81a5      	strh	r5, [r4, #12]
 8008762:	e7cf      	b.n	8008704 <__smakebuf_r+0x18>

08008764 <_fstat_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4d07      	ldr	r5, [pc, #28]	@ (8008784 <_fstat_r+0x20>)
 8008768:	2300      	movs	r3, #0
 800876a:	4604      	mov	r4, r0
 800876c:	4608      	mov	r0, r1
 800876e:	4611      	mov	r1, r2
 8008770:	602b      	str	r3, [r5, #0]
 8008772:	f7fa fc07 	bl	8002f84 <_fstat>
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	d102      	bne.n	8008780 <_fstat_r+0x1c>
 800877a:	682b      	ldr	r3, [r5, #0]
 800877c:	b103      	cbz	r3, 8008780 <_fstat_r+0x1c>
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	bd38      	pop	{r3, r4, r5, pc}
 8008782:	bf00      	nop
 8008784:	20000608 	.word	0x20000608

08008788 <_isatty_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d06      	ldr	r5, [pc, #24]	@ (80087a4 <_isatty_r+0x1c>)
 800878c:	2300      	movs	r3, #0
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	602b      	str	r3, [r5, #0]
 8008794:	f7fa fc06 	bl	8002fa4 <_isatty>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_isatty_r+0x1a>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_isatty_r+0x1a>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	20000608 	.word	0x20000608

080087a8 <_init>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	bf00      	nop
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr

080087b4 <_fini>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	bf00      	nop
 80087b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ba:	bc08      	pop	{r3}
 80087bc:	469e      	mov	lr, r3
 80087be:	4770      	bx	lr
