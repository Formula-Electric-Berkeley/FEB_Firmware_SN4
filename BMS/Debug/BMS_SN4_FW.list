
BMS_SN4_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a90  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  08008c60  08008c60  00009c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095a0  080095a0  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  080095a0  080095a0  0000a5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095a8  080095a8  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095a8  080095a8  0000a5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095ac  080095ac  0000a5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080095b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  200001dc  0800978c  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  0800978c  0000b874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185d2  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003738  00000000  00000000  000237de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00026f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011aa  00000000  00000000  000285b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025daa  00000000  00000000  0002975a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e2a4  00000000  00000000  0004f504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbfe8  00000000  00000000  0006d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149790  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007180  00000000  00000000  001497d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00150954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008c48 	.word	0x08008c48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08008c48 	.word	0x08008c48

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <pec15_calc>:
// ****************** Error Correction *******************
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8000f84:	2310      	movs	r3, #16
 8000f86:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000f88:	2300      	movs	r3, #0
 8000f8a:	737b      	strb	r3, [r7, #13]
 8000f8c:	e018      	b.n	8000fc0 <pec15_calc+0x48>
	{
		addr = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	09db      	lsrs	r3, r3, #7
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	7b7a      	ldrb	r2, [r7, #13]
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	440a      	add	r2, r1
 8000f9a:	7812      	ldrb	r2, [r2, #0]
 8000f9c:	4053      	eors	r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	897b      	ldrh	r3, [r7, #10]
 8000fac:	490b      	ldr	r1, [pc, #44]	@ (8000fdc <pec15_calc+0x64>)
 8000fae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4053      	eors	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	737b      	strb	r3, [r7, #13]
 8000fc0:	7b7a      	ldrb	r2, [r7, #13]
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d3e2      	bcc.n	8000f8e <pec15_calc+0x16>
	}

	return(remainder * 2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	b29b      	uxth	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	08008e14 	.word	0x08008e14

08000fe0 <pec10_calc>:

/* Calculates  and returns the CRC10 */
uint16_t pec10_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8000fec:	2310      	movs	r3, #16
 8000fee:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	737b      	strb	r3, [r7, #13]
 8000ff4:	e01c      	b.n	8001030 <pec10_calc+0x50>
	{
		addr = ((remainder >> 2) ^ data[i]) & 0xff;//calculate PEC table address
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	7b7a      	ldrb	r2, [r7, #13]
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	440a      	add	r2, r1
 8001002:	7812      	ldrb	r2, [r2, #0]
 8001004:	4053      	eors	r3, r2
 8001006:	b29b      	uxth	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc10Table[addr];
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	897b      	ldrh	r3, [r7, #10]
 8001014:	490c      	ldr	r1, [pc, #48]	@ (8001048 <pec10_calc+0x68>)
 8001016:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4053      	eors	r3, r2
 800101e:	b21b      	sxth	r3, r3
 8001020:	81fb      	strh	r3, [r7, #14]
		remainder &= 0x3FF; //Ensure remainder stays within 10 bits
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001028:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 800102a:	7b7b      	ldrb	r3, [r7, #13]
 800102c:	3301      	adds	r3, #1
 800102e:	737b      	strb	r3, [r7, #13]
 8001030:	7b7a      	ldrb	r2, [r7, #13]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3de      	bcc.n	8000ff6 <pec10_calc+0x16>
	}

	return(remainder); // No 0 in LSB
 8001038:	89fb      	ldrh	r3, [r7, #14]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	08009014 	.word	0x08009014

0800104c <cmd_68>:
//***************** Read and Write to SPI ****************
/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	4619      	mov	r1, r3
 8001066:	2002      	movs	r0, #2
 8001068:	f7ff ff86 	bl	8000f78 <pec15_calc>
 800106c:	4603      	mov	r3, r0
 800106e:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001070:	89fb      	ldrh	r3, [r7, #14]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	72fb      	strb	r3, [r7, #11]

	FEB_cs_low();
 8001080:	f001 f80a 	bl	8002098 <FEB_cs_low>
	FEB_spi_write_array(4,cmd);
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	4619      	mov	r1, r3
 800108a:	2004      	movs	r0, #4
 800108c:	f001 f81c 	bl	80020c8 <FEB_spi_write_array>
	FEB_cs_high();
 8001090:	f001 f80e 	bl	80020b0 <FEB_cs_high>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <cmd_68_r>:
void cmd_68_r(uint8_t tx_cmd[2],uint8_t* data, uint8_t len) //The command to be transmitted
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	4613      	mov	r3, r2
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	743b      	strb	r3, [r7, #16]
	cmd[1] =  tx_cmd[1];
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	747b      	strb	r3, [r7, #17]
	cmd_pec = pec15_calc(2, cmd);
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4619      	mov	r1, r3
 80010bc:	2002      	movs	r0, #2
 80010be:	f7ff ff5b 	bl	8000f78 <pec15_calc>
 80010c2:	4603      	mov	r3, r0
 80010c4:	82fb      	strh	r3, [r7, #22]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80010c6:	8afb      	ldrh	r3, [r7, #22]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t)(cmd_pec);
 80010d0:	8afb      	ldrh	r3, [r7, #22]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	74fb      	strb	r3, [r7, #19]

	FEB_cs_low();
 80010d6:	f000 ffdf 	bl	8002098 <FEB_cs_low>
	FEB_spi_write_read(cmd, 4, data, len);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f107 0010 	add.w	r0, r7, #16
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	2104      	movs	r1, #4
 80010e4:	f001 f80a 	bl	80020fc <FEB_spi_write_read>
	FEB_cs_high();
 80010e8:	f000 ffe2 	bl	80020b0 <FEB_cs_high>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8001102:	2306      	movs	r3, #6
 8001104:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	3304      	adds	r3, #4
 800110e:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001110:	7efb      	ldrb	r3, [r7, #27]
 8001112:	4618      	mov	r0, r3
 8001114:	f004 ff48 	bl	8005fa8 <malloc>
 8001118:	4603      	mov	r3, r0
 800111a:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	7852      	ldrb	r2, [r2, #1]
 800112c:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 800112e:	6979      	ldr	r1, [r7, #20]
 8001130:	2002      	movs	r0, #2
 8001132:	f7ff ff21 	bl	8000f78 <pec15_calc>
 8001136:	4603      	mov	r3, r0
 8001138:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800113a:	8a7b      	ldrh	r3, [r7, #18]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b29a      	uxth	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3302      	adds	r3, #2
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3303      	adds	r3, #3
 800114c:	8a7a      	ldrh	r2, [r7, #18]
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8001152:	2304      	movs	r3, #4
 8001154:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each ADBMS630B, this loops starts with the last IC on the stack.
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	77bb      	strb	r3, [r7, #30]
 800115a:	e042      	b.n	80011e2 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800115c:	2300      	movs	r3, #0
 800115e:	777b      	strb	r3, [r7, #29]
 8001160:	e016      	b.n	8001190 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8001162:	7fbb      	ldrb	r3, [r7, #30]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	461a      	mov	r2, r3
 8001170:	7f7b      	ldrb	r3, [r7, #29]
 8001172:	4413      	add	r3, r2
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	441a      	add	r2, r3
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	6979      	ldr	r1, [r7, #20]
 800117e:	440b      	add	r3, r1
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8001184:	7ffb      	ldrb	r3, [r7, #31]
 8001186:	3301      	adds	r3, #1
 8001188:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800118a:	7f7b      	ldrb	r3, [r7, #29]
 800118c:	3301      	adds	r3, #1
 800118e:	777b      	strb	r3, [r7, #29]
 8001190:	7f7a      	ldrb	r2, [r7, #29]
 8001192:	7f3b      	ldrb	r3, [r7, #28]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3e4      	bcc.n	8001162 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec10_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 8001198:	7fbb      	ldrb	r3, [r7, #30]
 800119a:	1e5a      	subs	r2, r3, #1
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	461a      	mov	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	441a      	add	r2, r3
 80011aa:	7f3b      	ldrb	r3, [r7, #28]
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff16 	bl	8000fe0 <pec10_calc>
 80011b4:	4603      	mov	r3, r0
 80011b6:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 80011b8:	8a3b      	ldrh	r3, [r7, #16]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	b299      	uxth	r1, r3
 80011be:	7ffb      	ldrb	r3, [r7, #31]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	b2ca      	uxtb	r2, r1
 80011c6:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 80011c8:	7ffb      	ldrb	r3, [r7, #31]
 80011ca:	3301      	adds	r3, #1
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	4413      	add	r3, r2
 80011d0:	8a3a      	ldrh	r2, [r7, #16]
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	3302      	adds	r3, #2
 80011da:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each ADBMS630B, this loops starts with the last IC on the stack.
 80011dc:	7fbb      	ldrb	r3, [r7, #30]
 80011de:	3b01      	subs	r3, #1
 80011e0:	77bb      	strb	r3, [r7, #30]
 80011e2:	7fbb      	ldrb	r3, [r7, #30]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1b9      	bne.n	800115c <write_68+0x68>
	}
	FEB_cs_low();
 80011e8:	f000 ff56 	bl	8002098 <FEB_cs_low>
	FEB_spi_write_array(CMD_LEN, cmd);
 80011ec:	7efb      	ldrb	r3, [r7, #27]
 80011ee:	6979      	ldr	r1, [r7, #20]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 ff69 	bl	80020c8 <FEB_spi_write_array>
	FEB_cs_high();
 80011f6:	f000 ff5b 	bl	80020b0 <FEB_cs_high>

	free(cmd);
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f004 fedc 	bl	8005fb8 <free>
}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <transmitCMD>:

//****************** CMD Translation ****************************
void transmitCMD(uint16_t cmdcode){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	b29b      	uxth	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	733b      	strb	r3, [r7, #12]
	cmd[1]=(cmdcode%0x100);//selects second byte
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	737b      	strb	r3, [r7, #13]
	cmd_68(cmd);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff10 	bl	800104c <cmd_68>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <transmitCMDR>:
void transmitCMDR(uint16_t cmdcode,uint8_t*data,uint8_t len){
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
 8001240:	4613      	mov	r3, r2
 8001242:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	b29b      	uxth	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	733b      	strb	r3, [r7, #12]
	cmd[1]=(cmdcode%0x100);//selects second byte
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	737b      	strb	r3, [r7, #13]
	cmd_68_r(cmd,data,len);
 8001254:	797a      	ldrb	r2, [r7, #5]
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	6839      	ldr	r1, [r7, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff1d 	bl	800109c <cmd_68_r>
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	0000      	movs	r0, r0
 800126c:	0000      	movs	r0, r0
	...

08001270 <convert_voltage>:

static uint8_t get_sensor(uint8_t mux, uint8_t channel) {
	return mux * 8 + channel;
}

static float convert_voltage(int16_t raw_code) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
	return raw_code * 0.000150 + 1.5;
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f970 	bl	8000564 <__aeabi_i2d>
 8001284:	a30f      	add	r3, pc, #60	@ (adr r3, 80012c4 <convert_voltage+0x54>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9d5 	bl	8000638 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <convert_voltage+0x50>)
 800129c:	f7ff f816 	bl	80002cc <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fc9e 	bl	8000be8 <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	ee07 3a90 	vmov	s15, r3
}
 80012b2:	eeb0 0a67 	vmov.f32	s0, s15
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	f3af 8000 	nop.w
 80012c0:	3ff80000 	.word	0x3ff80000
 80012c4:	30553261 	.word	0x30553261
 80012c8:	3f23a92a 	.word	0x3f23a92a

080012cc <FEB_ADBMS_Init>:
	return voltage;
}
//TODO: Convert voltage to temperature
// ******************************** Functions ********************************

void FEB_ADBMS_Init() {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af06      	add	r7, sp, #24
	FEB_cs_high();
 80012d2:	f000 feed 	bl	80020b0 <FEB_cs_high>
	ADBMS6830B_init_cfg(FEB_NUM_IC, IC_Config);
 80012d6:	491d      	ldr	r1, [pc, #116]	@ (800134c <FEB_ADBMS_Init+0x80>)
 80012d8:	2001      	movs	r0, #1
 80012da:	f000 f923 	bl	8001524 <ADBMS6830B_init_cfg>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
 80012e2:	e014      	b.n	800130e <FEB_ADBMS_Init+0x42>
		ADBMS6830B_set_cfgr(ic, IC_Config, 1, cth_bits, gpio_bits, dcc_bits, dcto_bits, uv, ov);
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <FEB_ADBMS_Init+0x84>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001354 <FEB_ADBMS_Init+0x88>)
 80012ea:	8812      	ldrh	r2, [r2, #0]
 80012ec:	79f8      	ldrb	r0, [r7, #7]
 80012ee:	9204      	str	r2, [sp, #16]
 80012f0:	9303      	str	r3, [sp, #12]
 80012f2:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <FEB_ADBMS_Init+0x8c>)
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <FEB_ADBMS_Init+0x90>)
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <FEB_ADBMS_Init+0x94>)
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <FEB_ADBMS_Init+0x98>)
 8001300:	2201      	movs	r2, #1
 8001302:	4912      	ldr	r1, [pc, #72]	@ (800134c <FEB_ADBMS_Init+0x80>)
 8001304:	f000 f9b2 	bl	800166c <ADBMS6830B_set_cfgr>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	3301      	adds	r3, #1
 800130c:	71fb      	strb	r3, [r7, #7]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0e7      	beq.n	80012e4 <FEB_ADBMS_Init+0x18>
	}
	ADBMS6830B_reset_crc_count(FEB_NUM_IC, IC_Config);
 8001314:	490d      	ldr	r1, [pc, #52]	@ (800134c <FEB_ADBMS_Init+0x80>)
 8001316:	2001      	movs	r0, #1
 8001318:	f000 f93b 	bl	8001592 <ADBMS6830B_reset_crc_count>
	ADBMS6830B_init_reg_limits(FEB_NUM_IC, IC_Config);
 800131c:	490b      	ldr	r1, [pc, #44]	@ (800134c <FEB_ADBMS_Init+0x80>)
 800131e:	2001      	movs	r0, #1
 8001320:	f000 fc77 	bl	8001c12 <ADBMS6830B_init_reg_limits>
	wakeup_sleep(FEB_NUM_IC);
 8001324:	2001      	movs	r0, #1
 8001326:	f000 fe75 	bl	8002014 <wakeup_sleep>
	ADBMS6830B_wrcfga(FEB_NUM_IC, IC_Config);
 800132a:	4908      	ldr	r1, [pc, #32]	@ (800134c <FEB_ADBMS_Init+0x80>)
 800132c:	2001      	movs	r0, #1
 800132e:	f000 fd70 	bl	8001e12 <ADBMS6830B_wrcfga>
	ADBMS6830B_wrcfgb(FEB_NUM_IC, IC_Config);
 8001332:	4906      	ldr	r1, [pc, #24]	@ (800134c <FEB_ADBMS_Init+0x80>)
 8001334:	2001      	movs	r0, #1
 8001336:	f000 fdec 	bl	8001f12 <ADBMS6830B_wrcfgb>
	//TODO:read back config
	wakeup_sleep(FEB_NUM_IC);
 800133a:	2001      	movs	r0, #1
 800133c:	f000 fe6a 	bl	8002014 <wakeup_sleep>
	start_adc_cell_voltage_measurements();
 8001340:	f000 f81e 	bl	8001380 <start_adc_cell_voltage_measurements>

}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000340 	.word	0x20000340
 8001350:	20000004 	.word	0x20000004
 8001354:	20000006 	.word	0x20000006
 8001358:	20000464 	.word	0x20000464
 800135c:	20000458 	.word	0x20000458
 8001360:	2000044c 	.word	0x2000044c
 8001364:	20000000 	.word	0x20000000

08001368 <FEB_ADBMS_Voltage_Process>:

void FEB_ADBMS_Voltage_Process() {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	start_adc_cell_voltage_measurements();
 800136c:	f000 f808 	bl	8001380 <start_adc_cell_voltage_measurements>
	//HAL_Delay(10);
	read_cell_voltages();
 8001370:	f000 f81a 	bl	80013a8 <read_cell_voltages>
	store_cell_voltages();
 8001374:	f000 f826 	bl	80013c4 <store_cell_voltages>
	validate_voltages();
 8001378:	f000 f894 	bl	80014a4 <validate_voltages>

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <start_adc_cell_voltage_measurements>:
	}
}

// ******************************** Voltage ********************************

void start_adc_cell_voltage_measurements() {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af02      	add	r7, sp, #8
	wakeup_sleep(FEB_NUM_IC);
 8001386:	2001      	movs	r0, #1
 8001388:	f000 fe44 	bl	8002014 <wakeup_sleep>
	ADBMS6830B_adcv(1, 1, 1, 0, OWVR);
 800138c:	2300      	movs	r3, #0
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2300      	movs	r3, #0
 8001392:	2201      	movs	r2, #1
 8001394:	2101      	movs	r1, #1
 8001396:	2001      	movs	r0, #1
 8001398:	f000 fc8e 	bl	8001cb8 <ADBMS6830B_adcv>
	ADBMS6830B_pollAdc();
 800139c:	f000 fcbe 	bl	8001d1c <ADBMS6830B_pollAdc>
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <read_cell_voltages>:

void read_cell_voltages() {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f000 fe31 	bl	8002014 <wakeup_sleep>
	ADBMS6830B_rdcv(FEB_NUM_IC, IC_Config);
 80013b2:	4903      	ldr	r1, [pc, #12]	@ (80013c0 <read_cell_voltages+0x18>)
 80013b4:	2001      	movs	r0, #1
 80013b6:	f000 fcdb 	bl	8001d70 <ADBMS6830B_rdcv>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000340 	.word	0x20000340

080013c4 <store_cell_voltages>:

void store_cell_voltages() {
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	FEB_ACC.total_voltage_V = 0;
 80013ca:	4b34      	ldr	r3, [pc, #208]	@ (800149c <store_cell_voltages+0xd8>)
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	e059      	b.n	800148c <store_cell_voltages+0xc8>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 80013d8:	2300      	movs	r3, #0
 80013da:	71bb      	strb	r3, [r7, #6]
 80013dc:	e050      	b.n	8001480 <store_cell_voltages+0xbc>
			uint8_t ic = bank;
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	717b      	strb	r3, [r7, #5]
			float CVoltage = convert_voltage(IC_Config[bank].cells.c_codes[ic]);
 80013e2:	79fa      	ldrb	r2, [r7, #7]
 80013e4:	797b      	ldrb	r3, [r7, #5]
 80013e6:	492e      	ldr	r1, [pc, #184]	@ (80014a0 <store_cell_voltages+0xdc>)
 80013e8:	2086      	movs	r0, #134	@ 0x86
 80013ea:	fb00 f202 	mul.w	r2, r0, r2
 80013ee:	4413      	add	r3, r2
 80013f0:	330c      	adds	r3, #12
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	440b      	add	r3, r1
 80013f6:	88db      	ldrh	r3, [r3, #6]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff38 	bl	8001270 <convert_voltage>
 8001400:	ed87 0a00 	vstr	s0, [r7]
			FEB_ACC.banks[bank].cells[cell].voltage_V = CVoltage;
 8001404:	79f9      	ldrb	r1, [r7, #7]
 8001406:	79ba      	ldrb	r2, [r7, #6]
 8001408:	4824      	ldr	r0, [pc, #144]	@ (800149c <store_cell_voltages+0xd8>)
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8001416:	fb01 f202 	mul.w	r2, r1, r2
 800141a:	4413      	add	r3, r2
 800141c:	4403      	add	r3, r0
 800141e:	3388      	adds	r3, #136	@ 0x88
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	601a      	str	r2, [r3, #0]
			FEB_ACC.banks[bank].cells[cell].voltage_S = convert_voltage(IC_Config[bank].cells.s_codes[ic]);
 8001424:	79fa      	ldrb	r2, [r7, #7]
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	491d      	ldr	r1, [pc, #116]	@ (80014a0 <store_cell_voltages+0xdc>)
 800142a:	2086      	movs	r0, #134	@ 0x86
 800142c:	fb00 f202 	mul.w	r2, r0, r2
 8001430:	4413      	add	r3, r2
 8001432:	331c      	adds	r3, #28
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	440b      	add	r3, r1
 8001438:	895b      	ldrh	r3, [r3, #10]
 800143a:	b21b      	sxth	r3, r3
 800143c:	79fd      	ldrb	r5, [r7, #7]
 800143e:	79bc      	ldrb	r4, [r7, #6]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff15 	bl	8001270 <convert_voltage>
 8001446:	eef0 7a40 	vmov.f32	s15, s0
 800144a:	4914      	ldr	r1, [pc, #80]	@ (800149c <store_cell_voltages+0xd8>)
 800144c:	4623      	mov	r3, r4
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4423      	add	r3, r4
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8001458:	fb05 f202 	mul.w	r2, r5, r2
 800145c:	4413      	add	r3, r2
 800145e:	440b      	add	r3, r1
 8001460:	338c      	adds	r3, #140	@ 0x8c
 8001462:	edc3 7a00 	vstr	s15, [r3]
			FEB_ACC.total_voltage_V+=CVoltage;
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <store_cell_voltages+0xd8>)
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	edd7 7a00 	vldr	s15, [r7]
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <store_cell_voltages+0xd8>)
 8001476:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	3301      	adds	r3, #1
 800147e:	71bb      	strb	r3, [r7, #6]
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	d9ab      	bls.n	80013de <store_cell_voltages+0x1a>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	3301      	adds	r3, #1
 800148a:	71fb      	strb	r3, [r7, #7]
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0a2      	beq.n	80013d8 <store_cell_voltages+0x14>
		}
	}
}
 8001492:	bf00      	nop
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bdb0      	pop	{r4, r5, r7, pc}
 800149c:	200001f8 	.word	0x200001f8
 80014a0:	20000340 	.word	0x20000340

080014a4 <validate_voltages>:

void validate_voltages() {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
	uint16_t vMax = FEB_Config_Get_Cell_Max_Voltage_mV();
 80014aa:	f000 fde5 	bl	8002078 <FEB_Config_Get_Cell_Max_Voltage_mV>
 80014ae:	4603      	mov	r3, r0
 80014b0:	81bb      	strh	r3, [r7, #12]
	uint16_t vMin = FEB_Config_Get_Cell_Min_Voltage_mV();
 80014b2:	f000 fdd1 	bl	8002058 <FEB_Config_Get_Cell_Min_Voltage_mV>
 80014b6:	4603      	mov	r3, r0
 80014b8:	817b      	strh	r3, [r7, #10]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	e026      	b.n	800150e <validate_voltages+0x6a>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	73bb      	strb	r3, [r7, #14]
 80014c4:	e01d      	b.n	8001502 <validate_voltages+0x5e>
			float voltage = FEB_ACC.banks[bank].cells[cell].voltage_V;
 80014c6:	7bf9      	ldrb	r1, [r7, #15]
 80014c8:	7bba      	ldrb	r2, [r7, #14]
 80014ca:	4815      	ldr	r0, [pc, #84]	@ (8001520 <validate_voltages+0x7c>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 80014d8:	fb01 f202 	mul.w	r2, r1, r2
 80014dc:	4413      	add	r3, r2
 80014de:	4403      	add	r3, r0
 80014e0:	3388      	adds	r3, #136	@ 0x88
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	607b      	str	r3, [r7, #4]
			if (voltage > vMax || voltage < vMin) {
 80014e6:	89bb      	ldrh	r3, [r7, #12]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80014f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	3301      	adds	r3, #1
 8001500:	73bb      	strb	r3, [r7, #14]
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d9de      	bls.n	80014c6 <validate_voltages+0x22>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	3301      	adds	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0d5      	beq.n	80014c0 <validate_voltages+0x1c>
				//FEB_SM_Transition(FEB_SM_ST_FAULT_BMS);
			}
		}
	}
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200001f8 	.word	0x200001f8

08001524 <ADBMS6830B_init_cfg>:

/* Helper function to initialize CFG variables */
void ADBMS6830B_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e022      	b.n	800157c <ADBMS6830B_init_cfg+0x58>
	{
		for (int j =0; j<6; j++)
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	e019      	b.n	8001570 <ADBMS6830B_init_cfg+0x4c>
		{
		  ic[current_ic].configa.tx_data[j] = 0;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	441a      	add	r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	4413      	add	r3, r2
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
          ic[current_ic].configb.tx_data[j] = 0;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	441a      	add	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4413      	add	r3, r2
 8001564:	330f      	adds	r3, #15
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3301      	adds	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b05      	cmp	r3, #5
 8001574:	dde2      	ble.n	800153c <ADBMS6830B_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	3301      	adds	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	429a      	cmp	r2, r3
 8001582:	d3d8      	bcc.n	8001536 <ADBMS6830B_init_cfg+0x12>
		}
	}
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <ADBMS6830B_reset_crc_count>:

/* Helper Function to reset PEC counters */
void ADBMS6830B_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8001592:	b480      	push	{r7}
 8001594:	b087      	sub	sp, #28
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	6039      	str	r1, [r7, #0]
 800159c:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e058      	b.n	8001656 <ADBMS6830B_reset_crc_count+0xc4>
	{
		ic[current_ic].crc_count.pec_count = 0;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
		ic[current_ic].crc_count.cfgr_pec = 0;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	2200      	movs	r2, #0
 80015c8:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		for (int i=0; i<6; i++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	e00f      	b.n	80015f2 <ADBMS6830B_reset_crc_count+0x60>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	441a      	add	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	3370      	adds	r3, #112	@ 0x70
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	2200      	movs	r2, #0
 80015ea:	815a      	strh	r2, [r3, #10]
		for (int i=0; i<6; i++)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	3301      	adds	r3, #1
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	ddec      	ble.n	80015d2 <ADBMS6830B_reset_crc_count+0x40>

		}
		for (int i=0; i<4; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e00f      	b.n	800161e <ADBMS6830B_reset_crc_count+0x8c>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	441a      	add	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3378      	adds	r3, #120	@ 0x78
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	2200      	movs	r2, #0
 8001616:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<4; i++)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3301      	adds	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b03      	cmp	r3, #3
 8001622:	ddec      	ble.n	80015fe <ADBMS6830B_reset_crc_count+0x6c>
		}
		for (int i=0; i<2; i++)
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	e00f      	b.n	800164a <ADBMS6830B_reset_crc_count+0xb8>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001630:	fb02 f303 	mul.w	r3, r2, r3
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	441a      	add	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	337c      	adds	r3, #124	@ 0x7c
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	2200      	movs	r2, #0
 8001642:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<2; i++)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	3301      	adds	r3, #1
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	ddec      	ble.n	800162a <ADBMS6830B_reset_crc_count+0x98>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	429a      	cmp	r2, r3
 800165c:	dba2      	blt.n	80015a4 <ADBMS6830B_reset_crc_count+0x12>
		}
	}
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <ADBMS6830B_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4603      	mov	r3, r0
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	4613      	mov	r3, r2
 800167c:	73bb      	strb	r3, [r7, #14]
	ADBMS6830B_set_cfgr_refon(nIC,ic,refon);
 800167e:	7bba      	ldrb	r2, [r7, #14]
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f828 	bl	80016da <ADBMS6830B_set_cfgr_refon>
	ADBMS6830B_set_cfgr_cth(nIC,ic,cth);
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	4618      	mov	r0, r3
 8001692:	f000 f85a 	bl	800174a <ADBMS6830B_set_cfgr_cth>
	ADBMS6830B_set_cfgr_gpio(nIC,ic,gpio);
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f8a6 	bl	80017ee <ADBMS6830B_set_cfgr_gpio>
	ADBMS6830B_set_cfgr_dis(nIC,ic,dcc);
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	68b9      	ldr	r1, [r7, #8]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f937 	bl	800191c <ADBMS6830B_set_cfgr_dis>
	ADBMS6830B_set_cfgr_dcto(nIC,ic,dcto);
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	6a3a      	ldr	r2, [r7, #32]
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f9c8 	bl	8001a4a <ADBMS6830B_set_cfgr_dcto>
	ADBMS6830B_set_cfgr_uv(nIC, ic, uv);
 80016ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	68b9      	ldr	r1, [r7, #8]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 fa14 	bl	8001aee <ADBMS6830B_set_cfgr_uv>
	ADBMS6830B_set_cfgr_ov(nIC, ic, ov);
 80016c6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fa59 	bl	8001b84 <ADBMS6830B_set_cfgr_ov>
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <ADBMS6830B_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void ADBMS6830B_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	6039      	str	r1, [r7, #0]
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	4613      	mov	r3, r2
 80016e8:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]|0x80;
 80016ea:	79bb      	ldrb	r3, [r7, #6]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <ADBMS6830B_set_cfgr_refon+0x3e>
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	440b      	add	r3, r1
 800170e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]
	else ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]&0x7F;
}
 8001716:	e012      	b.n	800173e <ADBMS6830B_set_cfgr_refon+0x64>
	else ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]&0x7F;
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	4413      	add	r3, r2
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	6839      	ldr	r1, [r7, #0]
 8001734:	440b      	add	r3, r1
 8001736:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <ADBMS6830B_set_cfgr_cth>:

/* Helper function to set CTH bits */
void ADBMS6830B_set_cfgr_cth(uint8_t nIC, cell_asic *ic, bool cth[3])
{
 800174a:	b480      	push	{r7}
 800174c:	b087      	sub	sp, #28
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 3; i++) {
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e03d      	b.n	80017da <ADBMS6830B_set_cfgr_cth+0x90>
        if (cth[i]) {
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d019      	beq.n	800179e <ADBMS6830B_set_cfgr_cth+0x54>
            ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0] | (0b01 << i);
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	4413      	add	r3, r2
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b25a      	sxtb	r2, r3
 800177c:	2101      	movs	r1, #1
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	b25b      	sxtb	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	b259      	sxtb	r1, r3
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	4413      	add	r3, r2
 8001798:	b2ca      	uxtb	r2, r1
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	e01a      	b.n	80017d4 <ADBMS6830B_set_cfgr_cth+0x8a>
        } else {
            ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0] & ~(0b01 << i);
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b25a      	sxtb	r2, r3
 80017b0:	2101      	movs	r1, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	4013      	ands	r3, r2
 80017c0:	b259      	sxtb	r1, r3
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	4413      	add	r3, r2
 80017d0:	b2ca      	uxtb	r2, r1
 80017d2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	ddbe      	ble.n	800175e <ADBMS6830B_set_cfgr_cth+0x14>
        }
    }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <ADBMS6830B_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void ADBMS6830B_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[10])
{
 80017ee:	b480      	push	{r7}
 80017f0:	b087      	sub	sp, #28
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++) {
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e03d      	b.n	800187e <ADBMS6830B_set_cfgr_gpio+0x90>
		if (gpio[i]) {
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d019      	beq.n	8001842 <ADBMS6830B_set_cfgr_gpio+0x54>
            ic[nIC].configa.tx_data[3] = ic[nIC].configa.tx_data[3] | (0b01 << i);
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	4413      	add	r3, r2
 800181c:	78db      	ldrb	r3, [r3, #3]
 800181e:	b25a      	sxtb	r2, r3
 8001820:	2101      	movs	r1, #1
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	b25b      	sxtb	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b259      	sxtb	r1, r3
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	4413      	add	r3, r2
 800183c:	b2ca      	uxtb	r2, r1
 800183e:	70da      	strb	r2, [r3, #3]
 8001840:	e01a      	b.n	8001878 <ADBMS6830B_set_cfgr_gpio+0x8a>
        } else {
             ic[nIC].configa.tx_data[3] = ic[nIC].configa.tx_data[3] & ~(0b01 << i);
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	4413      	add	r3, r2
 8001850:	78db      	ldrb	r3, [r3, #3]
 8001852:	b25a      	sxtb	r2, r3
 8001854:	2101      	movs	r1, #1
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	b25b      	sxtb	r3, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	b25b      	sxtb	r3, r3
 8001862:	4013      	ands	r3, r2
 8001864:	b259      	sxtb	r1, r3
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800186c:	fb02 f303 	mul.w	r3, r2, r3
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	4413      	add	r3, r2
 8001874:	b2ca      	uxtb	r2, r1
 8001876:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < 8; i++) {
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3301      	adds	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b07      	cmp	r3, #7
 8001882:	ddbe      	ble.n	8001802 <ADBMS6830B_set_cfgr_gpio+0x14>
        }
	}

    for (int i = 0; i < 2; i++) {
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	e03e      	b.n	8001908 <ADBMS6830B_set_cfgr_gpio+0x11a>
        if (gpio[i + 8]) {
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	3308      	adds	r3, #8
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d019      	beq.n	80018cc <ADBMS6830B_set_cfgr_gpio+0xde>
            ic[nIC].configa.tx_data[4] = ic[nIC].configa.tx_data[4] | (0b01 << i);
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	4413      	add	r3, r2
 80018a6:	791b      	ldrb	r3, [r3, #4]
 80018a8:	b25a      	sxtb	r2, r3
 80018aa:	2101      	movs	r1, #1
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b259      	sxtb	r1, r3
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	b2ca      	uxtb	r2, r1
 80018c8:	711a      	strb	r2, [r3, #4]
 80018ca:	e01a      	b.n	8001902 <ADBMS6830B_set_cfgr_gpio+0x114>
        } else {
             ic[nIC].configa.tx_data[4] = ic[nIC].configa.tx_data[4] & ~(0b01 << i);
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	4413      	add	r3, r2
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	b25a      	sxtb	r2, r3
 80018de:	2101      	movs	r1, #1
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	4013      	ands	r3, r2
 80018ee:	b259      	sxtb	r1, r3
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	4413      	add	r3, r2
 80018fe:	b2ca      	uxtb	r2, r1
 8001900:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < 2; i++) {
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	3301      	adds	r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	2b01      	cmp	r3, #1
 800190c:	ddbd      	ble.n	800188a <ADBMS6830B_set_cfgr_gpio+0x9c>
        }
    }
}
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <ADBMS6830B_set_cfgr_dis>:

/* Helper function to control discharge */
void ADBMS6830B_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++) {
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e03d      	b.n	80019ac <ADBMS6830B_set_cfgr_dis+0x90>
		if (dcc[i]) {
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d019      	beq.n	8001970 <ADBMS6830B_set_cfgr_dis+0x54>
            ic[nIC].configb.tx_data[4] = ic[nIC].configb.tx_data[4] | (0b01 << i);
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	4413      	add	r3, r2
 800194a:	7cdb      	ldrb	r3, [r3, #19]
 800194c:	b25a      	sxtb	r2, r3
 800194e:	2101      	movs	r1, #1
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	b25b      	sxtb	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b259      	sxtb	r1, r3
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	4413      	add	r3, r2
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	74da      	strb	r2, [r3, #19]
 800196e:	e01a      	b.n	80019a6 <ADBMS6830B_set_cfgr_dis+0x8a>
        } else {
             ic[nIC].configb.tx_data[4] = ic[nIC].configb.tx_data[4] & ~(0b01 << i);
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	4413      	add	r3, r2
 800197e:	7cdb      	ldrb	r3, [r3, #19]
 8001980:	b25a      	sxtb	r2, r3
 8001982:	2101      	movs	r1, #1
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	b25b      	sxtb	r3, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	b25b      	sxtb	r3, r3
 8001990:	4013      	ands	r3, r2
 8001992:	b259      	sxtb	r1, r3
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	4413      	add	r3, r2
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	74da      	strb	r2, [r3, #19]
	for (int i = 0; i < 8; i++) {
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b07      	cmp	r3, #7
 80019b0:	ddbe      	ble.n	8001930 <ADBMS6830B_set_cfgr_dis+0x14>
        }
	}

    for (int i = 0; i < 8; i++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	e03e      	b.n	8001a36 <ADBMS6830B_set_cfgr_dis+0x11a>
        if (dcc[i + 8]) {
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	3308      	adds	r3, #8
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <ADBMS6830B_set_cfgr_dis+0xde>
            ic[nIC].configb.tx_data[5] = ic[nIC].configb.tx_data[5] | (0b01 << i);
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	4413      	add	r3, r2
 80019d4:	7d1b      	ldrb	r3, [r3, #20]
 80019d6:	b25a      	sxtb	r2, r3
 80019d8:	2101      	movs	r1, #1
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b259      	sxtb	r1, r3
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80019ec:	fb02 f303 	mul.w	r3, r2, r3
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	4413      	add	r3, r2
 80019f4:	b2ca      	uxtb	r2, r1
 80019f6:	751a      	strb	r2, [r3, #20]
 80019f8:	e01a      	b.n	8001a30 <ADBMS6830B_set_cfgr_dis+0x114>
        } else {
             ic[nIC].configb.tx_data[5] = ic[nIC].configb.tx_data[5] & ~(0b01 << i);
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	4413      	add	r3, r2
 8001a08:	7d1b      	ldrb	r3, [r3, #20]
 8001a0a:	b25a      	sxtb	r2, r3
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	b259      	sxtb	r1, r3
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b2ca      	uxtb	r2, r1
 8001a2e:	751a      	strb	r2, [r3, #20]
    for (int i = 0; i < 8; i++) {
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	3301      	adds	r3, #1
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b07      	cmp	r3, #7
 8001a3a:	ddbd      	ble.n	80019b8 <ADBMS6830B_set_cfgr_dis+0x9c>
        }
    }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <ADBMS6830B_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void ADBMS6830B_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b087      	sub	sp, #28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 6; i++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e03d      	b.n	8001ada <ADBMS6830B_set_cfgr_dcto+0x90>
		if (dcto[i]) {
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d019      	beq.n	8001a9e <ADBMS6830B_set_cfgr_dcto+0x54>
            ic[nIC].configb.tx_data[3] = ic[nIC].configb.tx_data[3] | (0b01 << i);
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	4413      	add	r3, r2
 8001a78:	7c9b      	ldrb	r3, [r3, #18]
 8001a7a:	b25a      	sxtb	r2, r3
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	b25b      	sxtb	r3, r3
 8001a86:	4313      	orrs	r3, r2
 8001a88:	b259      	sxtb	r1, r3
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	4413      	add	r3, r2
 8001a98:	b2ca      	uxtb	r2, r1
 8001a9a:	749a      	strb	r2, [r3, #18]
 8001a9c:	e01a      	b.n	8001ad4 <ADBMS6830B_set_cfgr_dcto+0x8a>
        } else {
             ic[nIC].configb.tx_data[3] = ic[nIC].configb.tx_data[3] & ~(0b01 << i);
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	4413      	add	r3, r2
 8001aac:	7c9b      	ldrb	r3, [r3, #18]
 8001aae:	b25a      	sxtb	r2, r3
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	4013      	ands	r3, r2
 8001ac0:	b259      	sxtb	r1, r3
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2ca      	uxtb	r2, r1
 8001ad2:	749a      	strb	r2, [r3, #18]
	for (int i = 0; i < 6; i++) {
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	ddbe      	ble.n	8001a5e <ADBMS6830B_set_cfgr_dcto+0x14>
        }
	}
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <ADBMS6830B_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void ADBMS6830B_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	6039      	str	r1, [r7, #0]
 8001af8:	71fb      	strb	r3, [r7, #7]
 8001afa:	4613      	mov	r3, r2
 8001afc:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv / 16) - 1;
 8001afe:	88bb      	ldrh	r3, [r7, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3b01      	subs	r3, #1
 8001b06:	81fb      	strh	r3, [r7, #14]
	ic[nIC].configb.tx_data[0] = 0x00FF & tmp;
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	89fa      	ldrh	r2, [r7, #14]
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	73da      	strb	r2, [r3, #15]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] & 0xF0;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	4413      	add	r3, r2
 8001b2a:	7c1a      	ldrb	r2, [r3, #16]
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	6839      	ldr	r1, [r7, #0]
 8001b38:	440b      	add	r3, r1
 8001b3a:	f022 020f 	bic.w	r2, r2, #15
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	741a      	strb	r2, [r3, #16]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] | ((0x0F00 & tmp) >> 8);
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	7c1b      	ldrb	r3, [r3, #16]
 8001b52:	b25a      	sxtb	r2, r3
 8001b54:	89fb      	ldrh	r3, [r7, #14]
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	b259      	sxtb	r1, r3
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	b2ca      	uxtb	r2, r1
 8001b76:	741a      	strb	r2, [r3, #16]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <ADBMS6830B_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void ADBMS6830B_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	4613      	mov	r3, r2
 8001b92:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov / 16);
 8001b94:	88bb      	ldrh	r3, [r7, #4]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	81fb      	strh	r3, [r7, #14]
	ic[nIC].configb.tx_data[2] = 0x00FF & (tmp >> 4);
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	4413      	add	r3, r2
 8001bae:	b2ca      	uxtb	r2, r1
 8001bb0:	745a      	strb	r2, [r3, #17]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] & 0x0F;
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	7c1a      	ldrb	r2, [r3, #16]
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	6839      	ldr	r1, [r7, #0]
 8001bce:	440b      	add	r3, r1
 8001bd0:	f002 020f 	and.w	r2, r2, #15
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	741a      	strb	r2, [r3, #16]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] | ((0x000F & tmp) << 4);
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	7c1b      	ldrb	r3, [r3, #16]
 8001be8:	b25a      	sxtb	r2, r3
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	b25b      	sxtb	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b259      	sxtb	r1, r3
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	b2ca      	uxtb	r2, r1
 8001c04:	741a      	strb	r2, [r3, #16]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <ADBMS6830B_init_reg_limits>:

/* Initialize the Register limits */
void ADBMS6830B_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	6039      	str	r1, [r7, #0]
 8001c1c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
 8001c22:	e03e      	b.n	8001ca2 <ADBMS6830B_init_reg_limits+0x90>
    ic[cic].ic_reg.cell_channels = 20;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	2214      	movs	r2, #20
 8001c34:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
    ic[cic].ic_reg.stat_channels = 4; //Doesn't matter?
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	4413      	add	r3, r2
 8001c46:	2204      	movs	r2, #4
 8001c48:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
    ic[cic].ic_reg.aux_channels = 6; //Doesn't matter?
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	4413      	add	r3, r2
 8001c5a:	2206      	movs	r2, #6
 8001c5c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    ic[cic].ic_reg.num_cv_reg = 6;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2206      	movs	r2, #6
 8001c70:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
    ic[cic].ic_reg.num_gpio_reg = 4;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	2204      	movs	r2, #4
 8001c84:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
    ic[cic].ic_reg.num_stat_reg = 5;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c8e:	fb02 f303 	mul.w	r3, r2, r3
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	2205      	movs	r2, #5
 8001c98:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3bc      	bcc.n	8001c24 <ADBMS6830B_init_reg_limits+0x12>
  }
}
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <ADBMS6830B_adcv>:
				   uint8_t DCP, //Discharge Permit
				   uint8_t CONT, //Cell Channels to be measured
				   uint8_t RSTF, //Reset Filter
				   uint8_t OW //Open-wire bits
                 )
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4623      	mov	r3, r4
 8001cc8:	71fb      	strb	r3, [r7, #7]
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71bb      	strb	r3, [r7, #6]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	717b      	strb	r3, [r7, #5]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	713b      	strb	r3, [r7, #4]
	uint8_t cmd[2];

	cmd[0] = 0x02 + RD;
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	3302      	adds	r3, #2
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x60 | (CONT << 7) | (DCP << 4) | (RSTF << 2) | OW;
 8001cde:	797b      	ldrb	r3, [r7, #5]
 8001ce0:	01db      	lsls	r3, r3, #7
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ce8:	b25a      	sxtb	r2, r3
 8001cea:	79bb      	ldrb	r3, [r7, #6]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	b25b      	sxtb	r3, r3
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b25a      	sxtb	r2, r3
 8001cf4:	793b      	ldrb	r3, [r7, #4]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b25a      	sxtb	r2, r3
 8001cfe:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f99c 	bl	800104c <cmd_68>
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}

08001d1c <ADBMS6830B_pollAdc>:

/* This function will block operation until the ADC has finished it's conversion */
uint32_t ADBMS6830B_pollAdc()
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
	uint8_t finished = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	70fb      	strb	r3, [r7, #3]
	uint8_t current_time = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	70bb      	strb	r3, [r7, #2]
	FEB_cs_low();
 8001d2e:	f000 f9b3 	bl	8002098 <FEB_cs_low>
	transmitCMD(PLCADC);
 8001d32:	f44f 60e3 	mov.w	r0, #1816	@ 0x718
 8001d36:	f7ff fa67 	bl	8001208 <transmitCMD>

	while ((counter < 200000) && (finished == 0))
 8001d3a:	e008      	b.n	8001d4e <ADBMS6830B_pollAdc+0x32>
	{
		//current_time = FEB_spi_read_byte(0xff);
		if (current_time > 0)
 8001d3c:	78bb      	ldrb	r3, [r7, #2]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <ADBMS6830B_pollAdc+0x2c>
		{
			finished = 1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	70fb      	strb	r3, [r7, #3]
 8001d46:	e002      	b.n	8001d4e <ADBMS6830B_pollAdc+0x32>
		}
		else
		{
			counter = counter + 10;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	330a      	adds	r3, #10
 8001d4c:	607b      	str	r3, [r7, #4]
	while ((counter < 200000) && (finished == 0))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a06      	ldr	r2, [pc, #24]	@ (8001d6c <ADBMS6830B_pollAdc+0x50>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d802      	bhi.n	8001d5c <ADBMS6830B_pollAdc+0x40>
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ef      	beq.n	8001d3c <ADBMS6830B_pollAdc+0x20>
		}
	}

	FEB_cs_high();
 8001d5c:	f000 f9a8 	bl	80020b0 <FEB_cs_high>

	return(counter);
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	00030d3f 	.word	0x00030d3f

08001d70 <ADBMS6830B_rdcv>:
and store the cell voltages in c_codes variable.
*/
uint8_t ADBMS6830B_rdcv(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
			} else {
				c_ic = total_ic - curr_ic - 1;
			}
			//pec_error += parse_cells(c_ic, CELL, cell_data, &ic[c_ic].cells.c_codes[0], &ic[c_ic].cells.pec_match[0]);
		}*/
	uint8_t TxSize = 34;
 8001d7c:	2322      	movs	r3, #34	@ 0x22
 8001d7e:	74fb      	strb	r3, [r7, #19]
	uint8_t*cell_data;
	cell_data=(uint8_t*)malloc(TxSize * total_ic * sizeof(uint8_t));
 8001d80:	7cfb      	ldrb	r3, [r7, #19]
 8001d82:	79fa      	ldrb	r2, [r7, #7]
 8001d84:	fb02 f303 	mul.w	r3, r2, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 f90d 	bl	8005fa8 <malloc>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	60fb      	str	r3, [r7, #12]
	transmitCMDR(RDCVALL,cell_data,34*total_ic);
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	461a      	mov	r2, r3
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	4413      	add	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	200c      	movs	r0, #12
 8001da4:	f7ff fa46 	bl	8001234 <transmitCMDR>
	for(int bank=0;bank<total_ic;bank++){
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e016      	b.n	8001ddc <ADBMS6830B_rdcv+0x6c>
		memcpy(&(ic[bank].cells.c_codes),cell_data+bank*TxSize,(size_t)34);
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001db4:	fb02 f303 	mul.w	r3, r2, r3
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f103 001e 	add.w	r0, r3, #30
 8001dc0:	7cfb      	ldrb	r3, [r7, #19]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	fb02 f303 	mul.w	r3, r2, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	2222      	movs	r2, #34	@ 0x22
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f004 ffb4 	bl	8006d3e <memcpy>
	for(int bank=0;bank<total_ic;bank++){
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dbe4      	blt.n	8001dae <ADBMS6830B_rdcv+0x3e>
	}
	uint16_t data_pec=pec10_calc(32,cell_data);
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	2020      	movs	r0, #32
 8001de8:	f7ff f8fa 	bl	8000fe0 <pec10_calc>
 8001dec:	4603      	mov	r3, r0
 8001dee:	817b      	strh	r3, [r7, #10]
	uint16_t rx_pec=*(uint16_t*)(cell_data+32);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8c1b      	ldrh	r3, [r3, #32]
 8001df4:	813b      	strh	r3, [r7, #8]
	transmitCMDR(RDSALL,cell_data,34*total_ic);
	for(int bank=0;bank<total_ic;bank++){
		memcpy(&(ic[bank].cells.s_codes),cell_data+bank*TxSize,(size_t)34);
	}
	*/
	free(cell_data);
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f004 f8de 	bl	8005fb8 <free>
	return(data_pec!=rx_pec);
 8001dfc:	897a      	ldrh	r2, [r7, #10]
 8001dfe:	893b      	ldrh	r3, [r7, #8]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <ADBMS6830B_wrcfga>:

/* Write the ADBMS6830B CFGRA */
void ADBMS6830B_wrcfga(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b0c4      	sub	sp, #272	@ 0x110
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e1e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e22:	6019      	str	r1, [r3, #0]
 8001e24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e28:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001e2c:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 8001e2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e32:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t c_ic = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8001e48:	e049      	b.n	8001ede <ADBMS6830B_wrcfga+0xcc>
	{
		if (ic->isospi_reverse == false)
 8001e4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e4e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8001e58:	f083 0301 	eor.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <ADBMS6830B_wrcfga+0x5a>
		{
			c_ic = current_ic;
 8001e62:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001e66:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8001e6a:	e00b      	b.n	8001e84 <ADBMS6830B_wrcfga+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8001e6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e70:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8001e8a:	e01f      	b.n	8001ecc <ADBMS6830B_wrcfga+0xba>
		{
			write_buffer[write_count] = ic[c_ic].configa.tx_data[data];
 8001e8c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001e90:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e9c:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	18d1      	adds	r1, r2, r3
 8001ea4:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8001ea8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001eac:	5c89      	ldrb	r1, [r1, r2]
 8001eae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001eb2:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001eb6:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8001eb8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		for (uint8_t data = 0; data<6; data++)
 8001ec2:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8001ecc:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d9db      	bls.n	8001e8c <ADBMS6830B_wrcfga+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8001ed4:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8001ede:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ee2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001ee6:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d3ac      	bcc.n	8001e4a <ADBMS6830B_wrcfga+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8001ef0:	f107 0208 	add.w	r2, r7, #8
 8001ef4:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8001ef8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001efc:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f8f6 	bl	80010f4 <write_68>
}
 8001f08:	bf00      	nop
 8001f0a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <ADBMS6830B_wrcfgb>:

/* Write the ADBMS6830B CFGRB */
void ADBMS6830B_wrcfgb(uint8_t total_ic, //The number of ICs being written to
                    cell_asic ic[] // A two dimensional array of the configuration data that will be written
                   )
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b0c4      	sub	sp, #272	@ 0x110
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f1e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f22:	6019      	str	r1, [r3, #0]
 8001f24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f28:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001f2c:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x24} ;
 8001f2e:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8001f32:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t c_ic = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8001f48:	e04a      	b.n	8001fe0 <ADBMS6830B_wrcfgb+0xce>
	{
		if (ic->isospi_reverse == false)
 8001f4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f4e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8001f58:	f083 0301 	eor.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d004      	beq.n	8001f6c <ADBMS6830B_wrcfgb+0x5a>
		{
			c_ic = current_ic;
 8001f62:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001f66:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8001f6a:	e00b      	b.n	8001f84 <ADBMS6830B_wrcfgb+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8001f6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f70:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8001f8a:	e020      	b.n	8001fce <ADBMS6830B_wrcfgb+0xbc>
		{
			write_buffer[write_count] = ic[c_ic].configb.tx_data[data];
 8001f8c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001f90:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001f9c:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	18d1      	adds	r1, r2, r3
 8001fa4:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8001fa8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001fac:	440a      	add	r2, r1
 8001fae:	7bd1      	ldrb	r1, [r2, #15]
 8001fb0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001fb4:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001fb8:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8001fba:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		for (uint8_t data = 0; data<6; data++)
 8001fc4:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8001fce:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d9da      	bls.n	8001f8c <ADBMS6830B_wrcfgb+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8001fd6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8001fe0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fe4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001fe8:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d3ab      	bcc.n	8001f4a <ADBMS6830B_wrcfgb+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8001ff2:	f107 0208 	add.w	r2, r7, #8
 8001ff6:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8001ffa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ffe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff f875 	bl	80010f4 <write_68>
}
 800200a:	bf00      	nop
 800200c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <wakeup_sleep>:
	return(pec_error);
}

/* Generic wakeup command to wake the ADBMS6830B from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < total_ic; i++) {
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e00f      	b.n	8002044 <wakeup_sleep+0x30>
	   FEB_cs_low();
 8002024:	f000 f838 	bl	8002098 <FEB_cs_low>
	   //FEB_delay_m(1); // Guarantees the ADBMS6830B will be in standby
	   FEB_cs_high();
 8002028:	f000 f842 	bl	80020b0 <FEB_cs_high>
	   int j=60;
 800202c:	233c      	movs	r3, #60	@ 0x3c
 800202e:	60bb      	str	r3, [r7, #8]
	   while(--j>0);
 8002030:	bf00      	nop
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3b01      	subs	r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	dcf9      	bgt.n	8002032 <wakeup_sleep+0x1e>
	for (int i = 0; i < total_ic; i++) {
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3301      	adds	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbeb      	blt.n	8002024 <wakeup_sleep+0x10>

	}
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <FEB_Config_Get_Cell_Min_Voltage_mV>:
	}
}

/* ******** Interface ******** */

uint16_t FEB_Config_Get_Cell_Min_Voltage_mV(void) {
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
	//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
	uint16_t value = cell_min_voltage_mV;
 800205e:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <FEB_Config_Get_Cell_Min_Voltage_mV+0x1c>)
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	80fb      	strh	r3, [r7, #6]
	//osMutexRelease(FEB_SM_LockHandle);
	return value;
 8002064:	88fb      	ldrh	r3, [r7, #6]
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	2000046e 	.word	0x2000046e

08002078 <FEB_Config_Get_Cell_Max_Voltage_mV>:

uint16_t FEB_Config_Get_Cell_Max_Voltage_mV(void) {
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
	//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
	uint16_t value = cell_max_voltage_mV;
 800207e:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <FEB_Config_Get_Cell_Max_Voltage_mV+0x1c>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	80fb      	strh	r3, [r7, #6]
	//osMutexRelease(FEB_SM_LockHandle);
	return value;
 8002084:	88fb      	ldrh	r3, [r7, #6]
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000470 	.word	0x20000470

08002098 <FEB_cs_low>:

void FEB_delay_m(uint16_t milli) {
	HAL_Delay(milli);
}

void FEB_cs_low() {
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800209c:	2200      	movs	r2, #0
 800209e:	2140      	movs	r1, #64	@ 0x40
 80020a0:	4802      	ldr	r0, [pc, #8]	@ (80020ac <FEB_cs_low+0x14>)
 80020a2:	f001 fb89 	bl	80037b8 <HAL_GPIO_WritePin>
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40020400 	.word	0x40020400

080020b0 <FEB_cs_high>:

void FEB_cs_high() {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80020b4:	2201      	movs	r2, #1
 80020b6:	2140      	movs	r1, #64	@ 0x40
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <FEB_cs_high+0x14>)
 80020ba:	f001 fb7d 	bl	80037b8 <HAL_GPIO_WritePin>
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40020400 	.word	0x40020400

080020c8 <FEB_spi_write_array>:
void FEB_spi_write_array(uint8_t len, uint8_t data[]) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY)!=HAL_OK){
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
 80020dc:	6839      	ldr	r1, [r7, #0]
 80020de:	4806      	ldr	r0, [pc, #24]	@ (80020f8 <FEB_spi_write_array+0x30>)
 80020e0:	f002 fb6b 	bl	80047ba <HAL_SPI_Transmit>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <FEB_spi_write_array+0x26>
		//catch error
		int i=0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
	}
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000638 	.word	0x20000638

080020fc <FEB_spi_write_read>:
		//catch error
	}
	return data;
}

void FEB_spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	461a      	mov	r2, r3
 8002108:	460b      	mov	r3, r1
 800210a:	72fb      	strb	r3, [r7, #11]
 800210c:	4613      	mov	r3, r2
 800210e:	72bb      	strb	r3, [r7, #10]
	if(HAL_SPI_Transmit(&hspi1,tx_Data,tx_len,HAL_MAX_DELAY) != HAL_OK){
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	b29a      	uxth	r2, r3
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	480e      	ldr	r0, [pc, #56]	@ (8002154 <FEB_spi_write_read+0x58>)
 800211c:	f002 fb4d 	bl	80047ba <HAL_SPI_Transmit>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <FEB_spi_write_read+0x30>
		//catch error
		*rx_data=0x696969;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2269      	movs	r2, #105	@ 0x69
 800212a:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_SPI_Receive(&hspi1,rx_data,rx_len,HAL_MAX_DELAY)!= HAL_OK){
 800212c:	7abb      	ldrb	r3, [r7, #10]
 800212e:	b29a      	uxth	r2, r3
 8002130:	f04f 33ff 	mov.w	r3, #4294967295
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4807      	ldr	r0, [pc, #28]	@ (8002154 <FEB_spi_write_read+0x58>)
 8002138:	f002 fc83 	bl	8004a42 <HAL_SPI_Receive>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <FEB_spi_write_read+0x4e>
		//catch error
		*rx_data=0x696969;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2269      	movs	r2, #105	@ 0x69
 8002146:	701a      	strb	r2, [r3, #0]
	}
	return;
 8002148:	bf00      	nop
 800214a:	bf00      	nop
}
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000638 	.word	0x20000638

08002158 <FEB_Main_Setup>:
#include "FEB_Main.h"


// ******************************** Functions ********************************

void FEB_Main_Setup() {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	//SM setup
	FEB_ADBMS_Init();
 800215c:	f7ff f8b6 	bl	80012cc <FEB_ADBMS_Init>
	//FEB_SM_Init();
	//FEB_CAN_Init();
	//IVT Setup
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}

08002164 <FEB_Task_ADBMS>:

void FEB_Task_ADBMS() {
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	FEB_ADBMS_Voltage_Process();
 8002168:	f7ff f8fe 	bl	8001368 <FEB_ADBMS_Voltage_Process>
	//FEB_ADBMS_Temperature_Process();
	//FEB_Cell_Balance_Process();
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}

08002170 <FEB_Task_SM>:

void FEB_Task_SM() {
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
	//FEB_SM_Process();
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <FEB_Task_Charge>:

void FEB_Task_Charge() {
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0

}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <FEB_Task_Balance>:

void FEB_Task_Balance() {
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <FEB_Task_IVT>:

void FEB_Task_IVT() {
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <FEB_Task_CAN>:

void FEB_Task_CAN() {
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <FEB_Task_UART>:

void FEB_Task_UART() {
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
	if(FEB_SM_ST_DEBUG){
		FEB_ADBMS_UART_Transmit();
 80021ba:	f000 f803 	bl	80021c4 <FEB_ADBMS_UART_Transmit>
		//FEB_SM_UART_Transmit();
	}
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <FEB_ADBMS_UART_Transmit>:

static uint8_t counter = 0;

// **************************************** Functions ****************************************

void FEB_ADBMS_UART_Transmit(void) {
 80021c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021c8:	b095      	sub	sp, #84	@ 0x54
 80021ca:	af00      	add	r7, sp, #0
	int NUMLINES=5;
 80021cc:	2305      	movs	r3, #5
 80021ce:	647b      	str	r3, [r7, #68]	@ 0x44
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80021d6:	e1cb      	b.n	8002570 <FEB_ADBMS_UART_Transmit+0x3ac>
 80021d8:	466b      	mov	r3, sp
 80021da:	461e      	mov	r6, r3
		char UART_line[NUMLINES][192];
 80021dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80021de:	1e4b      	subs	r3, r1, #1
 80021e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80021e2:	460a      	mov	r2, r1
 80021e4:	2300      	movs	r3, #0
 80021e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80021e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ea:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80021ee:	4622      	mov	r2, r4
 80021f0:	462b      	mov	r3, r5
 80021f2:	1890      	adds	r0, r2, r2
 80021f4:	60b8      	str	r0, [r7, #8]
 80021f6:	415b      	adcs	r3, r3
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021fe:	4620      	mov	r0, r4
 8002200:	eb12 0800 	adds.w	r8, r2, r0
 8002204:	4628      	mov	r0, r5
 8002206:	eb43 0900 	adc.w	r9, r3, r0
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002216:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800221a:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800221e:	4690      	mov	r8, r2
 8002220:	4699      	mov	r9, r3
 8002222:	460a      	mov	r2, r1
 8002224:	2300      	movs	r3, #0
 8002226:	623a      	str	r2, [r7, #32]
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
 800222a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800222e:	4622      	mov	r2, r4
 8002230:	462b      	mov	r3, r5
 8002232:	1890      	adds	r0, r2, r2
 8002234:	6038      	str	r0, [r7, #0]
 8002236:	415b      	adcs	r3, r3
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800223e:	4620      	mov	r0, r4
 8002240:	eb12 0a00 	adds.w	sl, r2, r0
 8002244:	4628      	mov	r0, r5
 8002246:	eb43 0b00 	adc.w	fp, r3, r0
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	ea4f 234b 	mov.w	r3, fp, lsl #9
 8002256:	ea43 53da 	orr.w	r3, r3, sl, lsr #23
 800225a:	ea4f 224a 	mov.w	r2, sl, lsl #9
 800225e:	4692      	mov	sl, r2
 8002260:	469b      	mov	fp, r3
 8002262:	460a      	mov	r2, r1
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	019b      	lsls	r3, r3, #6
 800226c:	3307      	adds	r3, #7
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	ebad 0d03 	sub.w	sp, sp, r3
 8002276:	466b      	mov	r3, sp
 8002278:	3300      	adds	r3, #0
 800227a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		int offset[NUMLINES];
 800227c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800227e:	1e4b      	subs	r3, r1, #1
 8002280:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002282:	460a      	mov	r2, r1
 8002284:	2300      	movs	r3, #0
 8002286:	61ba      	str	r2, [r7, #24]
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002296:	4628      	mov	r0, r5
 8002298:	0143      	lsls	r3, r0, #5
 800229a:	4620      	mov	r0, r4
 800229c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022a0:	4620      	mov	r0, r4
 80022a2:	0142      	lsls	r2, r0, #5
 80022a4:	460a      	mov	r2, r1
 80022a6:	2300      	movs	r3, #0
 80022a8:	613a      	str	r2, [r7, #16]
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80022b8:	4628      	mov	r0, r5
 80022ba:	0143      	lsls	r3, r0, #5
 80022bc:	4620      	mov	r0, r4
 80022be:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022c2:	4620      	mov	r0, r4
 80022c4:	0142      	lsls	r2, r0, #5
 80022c6:	460b      	mov	r3, r1
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	3307      	adds	r3, #7
 80022cc:	08db      	lsrs	r3, r3, #3
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	ebad 0d03 	sub.w	sp, sp, r3
 80022d4:	466b      	mov	r3, sp
 80022d6:	3303      	adds	r3, #3
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	637b      	str	r3, [r7, #52]	@ 0x34
		offset[0]=sprintf((char*)(UART_line[0]),"|Bnk %d|",bank);
 80022de:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80022e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80022e4:	461a      	mov	r2, r3
 80022e6:	49a8      	ldr	r1, [pc, #672]	@ (8002588 <FEB_ADBMS_UART_Transmit+0x3c4>)
 80022e8:	f004 fc36 	bl	8006b58 <siprintf>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f0:	601a      	str	r2, [r3, #0]
		offset[1]=sprintf((char*)(UART_line[1]),"|Vlt C|");
 80022f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f4:	33c0      	adds	r3, #192	@ 0xc0
 80022f6:	49a5      	ldr	r1, [pc, #660]	@ (800258c <FEB_ADBMS_UART_Transmit+0x3c8>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 fc2d 	bl	8006b58 <siprintf>
 80022fe:	4602      	mov	r2, r0
 8002300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002302:	605a      	str	r2, [r3, #4]
		offset[2]=sprintf((char*)(UART_line[2]),"|Vlt S|");
 8002304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002306:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800230a:	49a1      	ldr	r1, [pc, #644]	@ (8002590 <FEB_ADBMS_UART_Transmit+0x3cc>)
 800230c:	4618      	mov	r0, r3
 800230e:	f004 fc23 	bl	8006b58 <siprintf>
 8002312:	4602      	mov	r2, r0
 8002314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002316:	609a      	str	r2, [r3, #8]
		offset[3]=sprintf((char*)(UART_line[3]),"|Tmp 1|");
 8002318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800231a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800231e:	499d      	ldr	r1, [pc, #628]	@ (8002594 <FEB_ADBMS_UART_Transmit+0x3d0>)
 8002320:	4618      	mov	r0, r3
 8002322:	f004 fc19 	bl	8006b58 <siprintf>
 8002326:	4602      	mov	r2, r0
 8002328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232a:	60da      	str	r2, [r3, #12]
		offset[4]=sprintf((char*)(UART_line[4]),"|Tmp 2|");
 800232c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800232e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002332:	4999      	ldr	r1, [pc, #612]	@ (8002598 <FEB_ADBMS_UART_Transmit+0x3d4>)
 8002334:	4618      	mov	r0, r3
 8002336:	f004 fc0f 	bl	8006b58 <siprintf>
 800233a:	4602      	mov	r2, r0
 800233c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800233e:	611a      	str	r2, [r3, #16]

		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell++) {
 8002340:	2300      	movs	r3, #0
 8002342:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002346:	e0b2      	b.n	80024ae <FEB_ADBMS_UART_Transmit+0x2ea>
			offset[0]+=sprintf(((char*)(UART_line[0]) + offset[0]), (cell>=10)?"Cell  %d|":"Cell   %d|",cell);
 8002348:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800234a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	18d0      	adds	r0, r2, r3
 8002350:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002354:	2b09      	cmp	r3, #9
 8002356:	d901      	bls.n	800235c <FEB_ADBMS_UART_Transmit+0x198>
 8002358:	4990      	ldr	r1, [pc, #576]	@ (800259c <FEB_ADBMS_UART_Transmit+0x3d8>)
 800235a:	e000      	b.n	800235e <FEB_ADBMS_UART_Transmit+0x19a>
 800235c:	4990      	ldr	r1, [pc, #576]	@ (80025a0 <FEB_ADBMS_UART_Transmit+0x3dc>)
 800235e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002362:	461a      	mov	r2, r3
 8002364:	f004 fbf8 	bl	8006b58 <siprintf>
 8002368:	4602      	mov	r2, r0
 800236a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	441a      	add	r2, r3
 8002370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002372:	601a      	str	r2, [r3, #0]
			offset[1]+=sprintf(((char*)(UART_line[1]) + offset[1]), "%.6f|",FEB_ACC.banks[bank].cells[cell].voltage_V);
 8002374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002376:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 800237a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	18d4      	adds	r4, r2, r3
 8002380:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 8002384:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002388:	4886      	ldr	r0, [pc, #536]	@ (80025a4 <FEB_ADBMS_UART_Transmit+0x3e0>)
 800238a:	461a      	mov	r2, r3
 800238c:	0052      	lsls	r2, r2, #1
 800238e:	441a      	add	r2, r3
 8002390:	0093      	lsls	r3, r2, #2
 8002392:	461a      	mov	r2, r3
 8002394:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	4403      	add	r3, r0
 80023a0:	3388      	adds	r3, #136	@ 0x88
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8ef 	bl	8000588 <__aeabi_f2d>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	497e      	ldr	r1, [pc, #504]	@ (80025a8 <FEB_ADBMS_UART_Transmit+0x3e4>)
 80023b0:	4620      	mov	r0, r4
 80023b2:	f004 fbd1 	bl	8006b58 <siprintf>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	441a      	add	r2, r3
 80023be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c0:	605a      	str	r2, [r3, #4]
			offset[2]+=sprintf(((char*)(UART_line[2]) + offset[2]), "%.6f|",FEB_ACC.banks[bank].cells[cell].voltage_S);
 80023c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023c4:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
 80023c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	18d4      	adds	r4, r2, r3
 80023ce:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 80023d2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80023d6:	4873      	ldr	r0, [pc, #460]	@ (80025a4 <FEB_ADBMS_UART_Transmit+0x3e0>)
 80023d8:	461a      	mov	r2, r3
 80023da:	0052      	lsls	r2, r2, #1
 80023dc:	441a      	add	r2, r3
 80023de:	0093      	lsls	r3, r2, #2
 80023e0:	461a      	mov	r2, r3
 80023e2:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	4403      	add	r3, r0
 80023ee:	338c      	adds	r3, #140	@ 0x8c
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f8c8 	bl	8000588 <__aeabi_f2d>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	496a      	ldr	r1, [pc, #424]	@ (80025a8 <FEB_ADBMS_UART_Transmit+0x3e4>)
 80023fe:	4620      	mov	r0, r4
 8002400:	f004 fbaa 	bl	8006b58 <siprintf>
 8002404:	4602      	mov	r2, r0
 8002406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	441a      	add	r2, r3
 800240c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240e:	609a      	str	r2, [r3, #8]
			offset[3]+=sprintf(((char*)(UART_line[3]) + offset[3]), "%.6f|",FEB_ACC.banks[bank].temp_sensor_readings_V[cell]);
 8002410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002412:	f503 7210 	add.w	r2, r3, #576	@ 0x240
 8002416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	18d4      	adds	r4, r2, r3
 800241c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002420:	f897 104e 	ldrb.w	r1, [r7, #78]	@ 0x4e
 8002424:	485f      	ldr	r0, [pc, #380]	@ (80025a4 <FEB_ADBMS_UART_Transmit+0x3e0>)
 8002426:	461a      	mov	r2, r3
 8002428:	00d2      	lsls	r2, r2, #3
 800242a:	441a      	add	r2, r3
 800242c:	00d3      	lsls	r3, r2, #3
 800242e:	441a      	add	r2, r3
 8002430:	1853      	adds	r3, r2, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4403      	add	r3, r0
 8002436:	3308      	adds	r3, #8
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f8a4 	bl	8000588 <__aeabi_f2d>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4958      	ldr	r1, [pc, #352]	@ (80025a8 <FEB_ADBMS_UART_Transmit+0x3e4>)
 8002446:	4620      	mov	r0, r4
 8002448:	f004 fb86 	bl	8006b58 <siprintf>
 800244c:	4602      	mov	r2, r0
 800244e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	441a      	add	r2, r3
 8002454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002456:	60da      	str	r2, [r3, #12]
			offset[4]+=sprintf(((char*)(UART_line[4]) + offset[4]), "%.6f|",FEB_ACC.banks[bank].temp_sensor_readings_V[cell+16]);
 8002458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800245a:	f503 7240 	add.w	r2, r3, #768	@ 0x300
 800245e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	18d5      	adds	r5, r2, r3
 8002464:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 8002468:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800246c:	f103 0010 	add.w	r0, r3, #16
 8002470:	4c4c      	ldr	r4, [pc, #304]	@ (80025a4 <FEB_ADBMS_UART_Transmit+0x3e0>)
 8002472:	460a      	mov	r2, r1
 8002474:	00d2      	lsls	r2, r2, #3
 8002476:	440a      	add	r2, r1
 8002478:	00d3      	lsls	r3, r2, #3
 800247a:	441a      	add	r2, r3
 800247c:	1813      	adds	r3, r2, r0
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4423      	add	r3, r4
 8002482:	3308      	adds	r3, #8
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f87e 	bl	8000588 <__aeabi_f2d>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4945      	ldr	r1, [pc, #276]	@ (80025a8 <FEB_ADBMS_UART_Transmit+0x3e4>)
 8002492:	4628      	mov	r0, r5
 8002494:	f004 fb60 	bl	8006b58 <siprintf>
 8002498:	4602      	mov	r2, r0
 800249a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	441a      	add	r2, r3
 80024a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a2:	611a      	str	r2, [r3, #16]
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell++) {
 80024a4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80024a8:	3301      	adds	r3, #1
 80024aa:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80024ae:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	f67f af48 	bls.w	8002348 <FEB_ADBMS_UART_Transmit+0x184>
		}
		offset[NUMLINES-1]+=sprintf(((char*)(UART_line[NUMLINES-1]) + offset[NUMLINES-1]), "\n\r");
 80024b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ba:	3b01      	subs	r3, #1
 80024bc:	461a      	mov	r2, r3
 80024be:	0052      	lsls	r2, r2, #1
 80024c0:	441a      	add	r2, r3
 80024c2:	0193      	lsls	r3, r2, #6
 80024c4:	461a      	mov	r2, r3
 80024c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024c8:	1899      	adds	r1, r3, r2
 80024ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024cc:	1e5a      	subs	r2, r3, #1
 80024ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d4:	440b      	add	r3, r1
 80024d6:	4935      	ldr	r1, [pc, #212]	@ (80025ac <FEB_ADBMS_UART_Transmit+0x3e8>)
 80024d8:	4618      	mov	r0, r3
 80024da:	f004 fb3d 	bl	8006b58 <siprintf>
 80024de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ea:	1e59      	subs	r1, r3, #1
 80024ec:	4402      	add	r2, r0
 80024ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		for(int line=0;line<NUMLINES;line++){
 80024f4:	2300      	movs	r3, #0
 80024f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024f8:	e030      	b.n	800255c <FEB_ADBMS_UART_Transmit+0x398>
			offset[line]+=sprintf(((char*)(UART_line[line]) + offset[line]), "\n\r") ;
 80024fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024fc:	461a      	mov	r2, r3
 80024fe:	0052      	lsls	r2, r2, #1
 8002500:	441a      	add	r2, r3
 8002502:	0193      	lsls	r3, r2, #6
 8002504:	461a      	mov	r2, r3
 8002506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002508:	1899      	adds	r1, r3, r2
 800250a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800250c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	440b      	add	r3, r1
 8002514:	4925      	ldr	r1, [pc, #148]	@ (80025ac <FEB_ADBMS_UART_Transmit+0x3e8>)
 8002516:	4618      	mov	r0, r3
 8002518:	f004 fb1e 	bl	8006b58 <siprintf>
 800251c:	4601      	mov	r1, r0
 800251e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	4419      	add	r1, r3
 8002528:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800252a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800252c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_UART_Transmit(&huart2, (uint8_t*) UART_line[line], offset[line]+1, 100);
 8002530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002532:	461a      	mov	r2, r3
 8002534:	0052      	lsls	r2, r2, #1
 8002536:	441a      	add	r2, r3
 8002538:	0193      	lsls	r3, r2, #6
 800253a:	461a      	mov	r2, r3
 800253c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800253e:	1899      	adds	r1, r3, r2
 8002540:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	b29b      	uxth	r3, r3
 800254a:	3301      	adds	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	2364      	movs	r3, #100	@ 0x64
 8002550:	4817      	ldr	r0, [pc, #92]	@ (80025b0 <FEB_ADBMS_UART_Transmit+0x3ec>)
 8002552:	f003 f96d 	bl	8005830 <HAL_UART_Transmit>
		for(int line=0;line<NUMLINES;line++){
 8002556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002558:	3301      	adds	r3, #1
 800255a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800255c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800255e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002560:	429a      	cmp	r2, r3
 8002562:	dbca      	blt.n	80024fa <FEB_ADBMS_UART_Transmit+0x336>
 8002564:	46b5      	mov	sp, r6
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 8002566:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800256a:	3301      	adds	r3, #1
 800256c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002570:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002574:	2b00      	cmp	r3, #0
 8002576:	f43f ae2f 	beq.w	80021d8 <FEB_ADBMS_UART_Transmit+0x14>
		}

	}
}
 800257a:	bf00      	nop
 800257c:	bf00      	nop
 800257e:	3754      	adds	r7, #84	@ 0x54
 8002580:	46bd      	mov	sp, r7
 8002582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002586:	bf00      	nop
 8002588:	08008c60 	.word	0x08008c60
 800258c:	08008c6c 	.word	0x08008c6c
 8002590:	08008c74 	.word	0x08008c74
 8002594:	08008c7c 	.word	0x08008c7c
 8002598:	08008c84 	.word	0x08008c84
 800259c:	08008c8c 	.word	0x08008c8c
 80025a0:	08008c98 	.word	0x08008c98
 80025a4:	20000474 	.word	0x20000474
 80025a8:	08008ca4 	.word	0x08008ca4
 80025ac:	08008cac 	.word	0x08008cac
 80025b0:	20000690 	.word	0x20000690

080025b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b8:	f000 fd26 	bl	8003008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025bc:	f000 f820 	bl	8002600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c0:	f000 f94e 	bl	8002860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025c4:	f000 f922 	bl	800280c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80025c8:	f000 f8ea 	bl	80027a0 <MX_SPI1_Init>
  MX_CAN1_Init();
 80025cc:	f000 f886 	bl	80026dc <MX_CAN1_Init>
  MX_I2C1_Init();
 80025d0:	f000 f8b8 	bl	8002744 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  FEB_Main_Setup();
 80025d4:	f7ff fdc0 	bl	8002158 <FEB_Main_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FEB_Task_ADBMS();
 80025d8:	f7ff fdc4 	bl	8002164 <FEB_Task_ADBMS>
	  FEB_Task_UART();
 80025dc:	f7ff fdeb 	bl	80021b6 <FEB_Task_UART>
	  FEB_Task_SM();
 80025e0:	f7ff fdc6 	bl	8002170 <FEB_Task_SM>
	  FEB_Task_Charge();
 80025e4:	f7ff fdcb 	bl	800217e <FEB_Task_Charge>
	  FEB_Task_Balance();
 80025e8:	f7ff fdd0 	bl	800218c <FEB_Task_Balance>
	  FEB_Task_IVT();
 80025ec:	f7ff fdd5 	bl	800219a <FEB_Task_IVT>
	  FEB_Task_CAN();
 80025f0:	f7ff fdda 	bl	80021a8 <FEB_Task_CAN>
	  HAL_Delay(100);
 80025f4:	2064      	movs	r0, #100	@ 0x64
 80025f6:	f000 fd49 	bl	800308c <HAL_Delay>
	  FEB_Task_ADBMS();
 80025fa:	bf00      	nop
 80025fc:	e7ec      	b.n	80025d8 <main+0x24>
	...

08002600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b094      	sub	sp, #80	@ 0x50
 8002604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	2234      	movs	r2, #52	@ 0x34
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f004 fb05 	bl	8006c1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	4b2a      	ldr	r3, [pc, #168]	@ (80026d4 <SystemClock_Config+0xd4>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	4a29      	ldr	r2, [pc, #164]	@ (80026d4 <SystemClock_Config+0xd4>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002632:	6413      	str	r3, [r2, #64]	@ 0x40
 8002634:	4b27      	ldr	r3, [pc, #156]	@ (80026d4 <SystemClock_Config+0xd4>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002640:	2300      	movs	r3, #0
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	4b24      	ldr	r3, [pc, #144]	@ (80026d8 <SystemClock_Config+0xd8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800264c:	4a22      	ldr	r2, [pc, #136]	@ (80026d8 <SystemClock_Config+0xd8>)
 800264e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <SystemClock_Config+0xd8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002660:	2302      	movs	r3, #2
 8002662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002664:	2301      	movs	r3, #1
 8002666:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002668:	2310      	movs	r3, #16
 800266a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800266c:	2302      	movs	r3, #2
 800266e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002670:	2300      	movs	r3, #0
 8002672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002674:	2310      	movs	r3, #16
 8002676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002678:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800267c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800267e:	2304      	movs	r3, #4
 8002680:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002682:	2302      	movs	r3, #2
 8002684:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002686:	2302      	movs	r3, #2
 8002688:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	4618      	mov	r0, r3
 8002690:	f001 fd6c 	bl	800416c <HAL_RCC_OscConfig>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800269a:	f000 f9b9 	bl	8002a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800269e:	230f      	movs	r3, #15
 80026a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026a2:	2302      	movs	r3, #2
 80026a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026b4:	f107 0308 	add.w	r3, r7, #8
 80026b8:	2102      	movs	r1, #2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 f9da 	bl	8003a74 <HAL_RCC_ClockConfig>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80026c6:	f000 f9a3 	bl	8002a10 <Error_Handler>
  }
}
 80026ca:	bf00      	nop
 80026cc:	3750      	adds	r7, #80	@ 0x50
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40007000 	.word	0x40007000

080026dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80026e0:	4b16      	ldr	r3, [pc, #88]	@ (800273c <MX_CAN1_Init+0x60>)
 80026e2:	4a17      	ldr	r2, [pc, #92]	@ (8002740 <MX_CAN1_Init+0x64>)
 80026e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80026e6:	4b15      	ldr	r3, [pc, #84]	@ (800273c <MX_CAN1_Init+0x60>)
 80026e8:	2210      	movs	r2, #16
 80026ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80026ec:	4b13      	ldr	r3, [pc, #76]	@ (800273c <MX_CAN1_Init+0x60>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80026f2:	4b12      	ldr	r3, [pc, #72]	@ (800273c <MX_CAN1_Init+0x60>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80026f8:	4b10      	ldr	r3, [pc, #64]	@ (800273c <MX_CAN1_Init+0x60>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80026fe:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <MX_CAN1_Init+0x60>)
 8002700:	2200      	movs	r2, #0
 8002702:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002704:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <MX_CAN1_Init+0x60>)
 8002706:	2200      	movs	r2, #0
 8002708:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800270a:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <MX_CAN1_Init+0x60>)
 800270c:	2200      	movs	r2, #0
 800270e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002710:	4b0a      	ldr	r3, [pc, #40]	@ (800273c <MX_CAN1_Init+0x60>)
 8002712:	2200      	movs	r2, #0
 8002714:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002716:	4b09      	ldr	r3, [pc, #36]	@ (800273c <MX_CAN1_Init+0x60>)
 8002718:	2200      	movs	r2, #0
 800271a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800271c:	4b07      	ldr	r3, [pc, #28]	@ (800273c <MX_CAN1_Init+0x60>)
 800271e:	2200      	movs	r2, #0
 8002720:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002722:	4b06      	ldr	r3, [pc, #24]	@ (800273c <MX_CAN1_Init+0x60>)
 8002724:	2200      	movs	r2, #0
 8002726:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002728:	4804      	ldr	r0, [pc, #16]	@ (800273c <MX_CAN1_Init+0x60>)
 800272a:	f000 fcd3 	bl	80030d4 <HAL_CAN_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8002734:	f000 f96c 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200005bc 	.word	0x200005bc
 8002740:	40006400 	.word	0x40006400

08002744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002748:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <MX_I2C1_Init+0x50>)
 800274a:	4a13      	ldr	r2, [pc, #76]	@ (8002798 <MX_I2C1_Init+0x54>)
 800274c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800274e:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <MX_I2C1_Init+0x50>)
 8002750:	4a12      	ldr	r2, [pc, #72]	@ (800279c <MX_I2C1_Init+0x58>)
 8002752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002754:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <MX_I2C1_Init+0x50>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800275a:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <MX_I2C1_Init+0x50>)
 800275c:	2200      	movs	r2, #0
 800275e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002760:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <MX_I2C1_Init+0x50>)
 8002762:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002768:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <MX_I2C1_Init+0x50>)
 800276a:	2200      	movs	r2, #0
 800276c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800276e:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <MX_I2C1_Init+0x50>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002774:	4b07      	ldr	r3, [pc, #28]	@ (8002794 <MX_I2C1_Init+0x50>)
 8002776:	2200      	movs	r2, #0
 8002778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <MX_I2C1_Init+0x50>)
 800277c:	2200      	movs	r2, #0
 800277e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002780:	4804      	ldr	r0, [pc, #16]	@ (8002794 <MX_I2C1_Init+0x50>)
 8002782:	f001 f833 	bl	80037ec <HAL_I2C_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800278c:	f000 f940 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	200005e4 	.word	0x200005e4
 8002798:	40005400 	.word	0x40005400
 800279c:	000186a0 	.word	0x000186a0

080027a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027a4:	4b17      	ldr	r3, [pc, #92]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027a6:	4a18      	ldr	r2, [pc, #96]	@ (8002808 <MX_SPI1_Init+0x68>)
 80027a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027aa:	4b16      	ldr	r3, [pc, #88]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027b2:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b8:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027c0:	2202      	movs	r2, #2
 80027c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80027d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027d4:	2228      	movs	r2, #40	@ 0x28
 80027d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e4:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027ec:	220a      	movs	r2, #10
 80027ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027f0:	4804      	ldr	r0, [pc, #16]	@ (8002804 <MX_SPI1_Init+0x64>)
 80027f2:	f001 ff59 	bl	80046a8 <HAL_SPI_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027fc:	f000 f908 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000638 	.word	0x20000638
 8002808:	40013000 	.word	0x40013000

0800280c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <MX_USART2_UART_Init+0x4c>)
 8002812:	4a12      	ldr	r2, [pc, #72]	@ (800285c <MX_USART2_UART_Init+0x50>)
 8002814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002816:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <MX_USART2_UART_Init+0x4c>)
 8002818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800281c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800281e:	4b0e      	ldr	r3, [pc, #56]	@ (8002858 <MX_USART2_UART_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002824:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <MX_USART2_UART_Init+0x4c>)
 8002826:	2200      	movs	r2, #0
 8002828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800282a:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <MX_USART2_UART_Init+0x4c>)
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002830:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <MX_USART2_UART_Init+0x4c>)
 8002832:	220c      	movs	r2, #12
 8002834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002836:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <MX_USART2_UART_Init+0x4c>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800283c:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <MX_USART2_UART_Init+0x4c>)
 800283e:	2200      	movs	r2, #0
 8002840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002842:	4805      	ldr	r0, [pc, #20]	@ (8002858 <MX_USART2_UART_Init+0x4c>)
 8002844:	f002 ffa4 	bl	8005790 <HAL_UART_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800284e:	f000 f8df 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000690 	.word	0x20000690
 800285c:	40004400 	.word	0x40004400

08002860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	@ 0x28
 8002864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4b57      	ldr	r3, [pc, #348]	@ (80029d8 <MX_GPIO_Init+0x178>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	4a56      	ldr	r2, [pc, #344]	@ (80029d8 <MX_GPIO_Init+0x178>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6313      	str	r3, [r2, #48]	@ 0x30
 8002886:	4b54      	ldr	r3, [pc, #336]	@ (80029d8 <MX_GPIO_Init+0x178>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b50      	ldr	r3, [pc, #320]	@ (80029d8 <MX_GPIO_Init+0x178>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	4a4f      	ldr	r2, [pc, #316]	@ (80029d8 <MX_GPIO_Init+0x178>)
 800289c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a2:	4b4d      	ldr	r3, [pc, #308]	@ (80029d8 <MX_GPIO_Init+0x178>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	4b49      	ldr	r3, [pc, #292]	@ (80029d8 <MX_GPIO_Init+0x178>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4a48      	ldr	r2, [pc, #288]	@ (80029d8 <MX_GPIO_Init+0x178>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4b46      	ldr	r3, [pc, #280]	@ (80029d8 <MX_GPIO_Init+0x178>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	4b42      	ldr	r3, [pc, #264]	@ (80029d8 <MX_GPIO_Init+0x178>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a41      	ldr	r2, [pc, #260]	@ (80029d8 <MX_GPIO_Init+0x178>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b3f      	ldr	r3, [pc, #252]	@ (80029d8 <MX_GPIO_Init+0x178>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4b3b      	ldr	r3, [pc, #236]	@ (80029d8 <MX_GPIO_Init+0x178>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4a3a      	ldr	r2, [pc, #232]	@ (80029d8 <MX_GPIO_Init+0x178>)
 80028f0:	f043 0308 	orr.w	r3, r3, #8
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4b38      	ldr	r3, [pc, #224]	@ (80029d8 <MX_GPIO_Init+0x178>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INDICATOR_Pin|BMS_IND_Pin|BMS_A_Pin|PC_AIR_Pin
 8002902:	2200      	movs	r2, #0
 8002904:	f242 010f 	movw	r1, #8207	@ 0x200f
 8002908:	4834      	ldr	r0, [pc, #208]	@ (80029dc <MX_GPIO_Init+0x17c>)
 800290a:	f000 ff55 	bl	80037b8 <HAL_GPIO_WritePin>
                          |CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800290e:	2200      	movs	r2, #0
 8002910:	2101      	movs	r1, #1
 8002912:	4833      	ldr	r0, [pc, #204]	@ (80029e0 <MX_GPIO_Init+0x180>)
 8002914:	f000 ff50 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC_REL_GPIO_Port, PC_REL_Pin, GPIO_PIN_RESET);
 8002918:	2200      	movs	r2, #0
 800291a:	2104      	movs	r1, #4
 800291c:	4831      	ldr	r0, [pc, #196]	@ (80029e4 <MX_GPIO_Init+0x184>)
 800291e:	f000 ff4b 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002922:	2200      	movs	r2, #0
 8002924:	2140      	movs	r1, #64	@ 0x40
 8002926:	4830      	ldr	r0, [pc, #192]	@ (80029e8 <MX_GPIO_Init+0x188>)
 8002928:	f000 ff46 	bl	80037b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INDICATOR_Pin BMS_IND_Pin BMS_A_Pin PC_AIR_Pin
                           CS_Pin */
  GPIO_InitStruct.Pin = INDICATOR_Pin|BMS_IND_Pin|BMS_A_Pin|PC_AIR_Pin
 800292c:	f242 030f 	movw	r3, #8207	@ 0x200f
 8002930:	617b      	str	r3, [r7, #20]
                          |CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002932:	2301      	movs	r3, #1
 8002934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	4825      	ldr	r0, [pc, #148]	@ (80029dc <MX_GPIO_Init+0x17c>)
 8002946:	f000 fda3 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800294a:	2301      	movs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294e:	2301      	movs	r3, #1
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	481f      	ldr	r0, [pc, #124]	@ (80029e0 <MX_GPIO_Init+0x180>)
 8002962:	f000 fd95 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR__SENSE_Pin AIR__SENSEC5_Pin SHS_IMD_Pin SHS_TSMS_Pin
                           SHS_IN_Pin */
  GPIO_InitStruct.Pin = AIR__SENSE_Pin|AIR__SENSEC5_Pin|SHS_IMD_Pin|SHS_TSMS_Pin
 8002966:	f641 4330 	movw	r3, #7216	@ 0x1c30
 800296a:	617b      	str	r3, [r7, #20]
                          |SHS_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4619      	mov	r1, r3
 800297a:	4818      	ldr	r0, [pc, #96]	@ (80029dc <MX_GPIO_Init+0x17c>)
 800297c:	f000 fd88 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pins : WAKE_Pin INTR_Pin RST_Pin Alert_Pin */
  GPIO_InitStruct.Pin = WAKE_Pin|INTR_Pin|RST_Pin|Alert_Pin;
 8002980:	23a3      	movs	r3, #163	@ 0xa3
 8002982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4619      	mov	r1, r3
 8002992:	4815      	ldr	r0, [pc, #84]	@ (80029e8 <MX_GPIO_Init+0x188>)
 8002994:	f000 fd7c 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC_REL_Pin */
  GPIO_InitStruct.Pin = PC_REL_Pin;
 8002998:	2304      	movs	r3, #4
 800299a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299c:	2301      	movs	r3, #1
 800299e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PC_REL_GPIO_Port, &GPIO_InitStruct);
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	480d      	ldr	r0, [pc, #52]	@ (80029e4 <MX_GPIO_Init+0x184>)
 80029b0:	f000 fd6e 	bl	8003490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029b4:	2340      	movs	r3, #64	@ 0x40
 80029b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b8:	2301      	movs	r3, #1
 80029ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	4619      	mov	r1, r3
 80029ca:	4807      	ldr	r0, [pc, #28]	@ (80029e8 <MX_GPIO_Init+0x188>)
 80029cc:	f000 fd60 	bl	8003490 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029d0:	bf00      	nop
 80029d2:	3728      	adds	r7, #40	@ 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40020800 	.word	0x40020800
 80029e0:	40020000 	.word	0x40020000
 80029e4:	40020c00 	.word	0x40020c00
 80029e8:	40020400 	.word	0x40020400

080029ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a04      	ldr	r2, [pc, #16]	@ (8002a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029fe:	f000 fb25 	bl	800304c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000

08002a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a14:	b672      	cpsid	i
}
 8002a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a18:	bf00      	nop
 8002a1a:	e7fd      	b.n	8002a18 <Error_Handler+0x8>

08002a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <HAL_MspInit+0x4c>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a68 <HAL_MspInit+0x4c>)
 8002a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a32:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <HAL_MspInit+0x4c>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_MspInit+0x4c>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	4a08      	ldr	r2, [pc, #32]	@ (8002a68 <HAL_MspInit+0x4c>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4e:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <HAL_MspInit+0x4c>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800

08002a6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	@ 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a19      	ldr	r2, [pc, #100]	@ (8002af0 <HAL_CAN_MspInit+0x84>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d12c      	bne.n	8002ae8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b18      	ldr	r3, [pc, #96]	@ (8002af4 <HAL_CAN_MspInit+0x88>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	4a17      	ldr	r2, [pc, #92]	@ (8002af4 <HAL_CAN_MspInit+0x88>)
 8002a98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9e:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <HAL_CAN_MspInit+0x88>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <HAL_CAN_MspInit+0x88>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	4a10      	ldr	r2, [pc, #64]	@ (8002af4 <HAL_CAN_MspInit+0x88>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aba:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <HAL_CAN_MspInit+0x88>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ac6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002ad8:	2309      	movs	r3, #9
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4805      	ldr	r0, [pc, #20]	@ (8002af8 <HAL_CAN_MspInit+0x8c>)
 8002ae4:	f000 fcd4 	bl	8003490 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002ae8:	bf00      	nop
 8002aea:	3728      	adds	r7, #40	@ 0x28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40006400 	.word	0x40006400
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40020000 	.word	0x40020000

08002afc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a19      	ldr	r2, [pc, #100]	@ (8002b80 <HAL_I2C_MspInit+0x84>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d12c      	bne.n	8002b78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	4b18      	ldr	r3, [pc, #96]	@ (8002b84 <HAL_I2C_MspInit+0x88>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	4a17      	ldr	r2, [pc, #92]	@ (8002b84 <HAL_I2C_MspInit+0x88>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2e:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <HAL_I2C_MspInit+0x88>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b40:	2312      	movs	r3, #18
 8002b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4619      	mov	r1, r3
 8002b56:	480c      	ldr	r0, [pc, #48]	@ (8002b88 <HAL_I2C_MspInit+0x8c>)
 8002b58:	f000 fc9a 	bl	8003490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <HAL_I2C_MspInit+0x88>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	4a07      	ldr	r2, [pc, #28]	@ (8002b84 <HAL_I2C_MspInit+0x88>)
 8002b66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6c:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <HAL_I2C_MspInit+0x88>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002b78:	bf00      	nop
 8002b7a:	3728      	adds	r7, #40	@ 0x28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40005400 	.word	0x40005400
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40020400 	.word	0x40020400

08002b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	@ 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	@ (8002c10 <HAL_SPI_MspInit+0x84>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d12b      	bne.n	8002c06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <HAL_SPI_MspInit+0x88>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	4a17      	ldr	r2, [pc, #92]	@ (8002c14 <HAL_SPI_MspInit+0x88>)
 8002bb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_SPI_MspInit+0x88>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <HAL_SPI_MspInit+0x88>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	4a10      	ldr	r2, [pc, #64]	@ (8002c14 <HAL_SPI_MspInit+0x88>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bda:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <HAL_SPI_MspInit+0x88>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002be6:	23e0      	movs	r3, #224	@ 0xe0
 8002be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bf6:	2305      	movs	r3, #5
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 0314 	add.w	r3, r7, #20
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4805      	ldr	r0, [pc, #20]	@ (8002c18 <HAL_SPI_MspInit+0x8c>)
 8002c02:	f000 fc45 	bl	8003490 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002c06:	bf00      	nop
 8002c08:	3728      	adds	r7, #40	@ 0x28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40013000 	.word	0x40013000
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020000 	.word	0x40020000

08002c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a19      	ldr	r2, [pc, #100]	@ (8002ca0 <HAL_UART_MspInit+0x84>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d12b      	bne.n	8002c96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <HAL_UART_MspInit+0x88>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	4a17      	ldr	r2, [pc, #92]	@ (8002ca4 <HAL_UART_MspInit+0x88>)
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <HAL_UART_MspInit+0x88>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <HAL_UART_MspInit+0x88>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a10      	ldr	r2, [pc, #64]	@ (8002ca4 <HAL_UART_MspInit+0x88>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <HAL_UART_MspInit+0x88>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c76:	230c      	movs	r3, #12
 8002c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c82:	2303      	movs	r3, #3
 8002c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c86:	2307      	movs	r3, #7
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4805      	ldr	r0, [pc, #20]	@ (8002ca8 <HAL_UART_MspInit+0x8c>)
 8002c92:	f000 fbfd 	bl	8003490 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002c96:	bf00      	nop
 8002c98:	3728      	adds	r7, #40	@ 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40004400 	.word	0x40004400
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020000 	.word	0x40020000

08002cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	@ 0x30
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d7c <HAL_InitTick+0xd0>)
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d7c <HAL_InitTick+0xd0>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8002d7c <HAL_InitTick+0xd0>)
 8002cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cd8:	f107 020c 	add.w	r2, r7, #12
 8002cdc:	f107 0310 	add.w	r3, r7, #16
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 ffe0 	bl	8003ca8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002ce8:	f000 ffca 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8002cec:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf0:	4a23      	ldr	r2, [pc, #140]	@ (8002d80 <HAL_InitTick+0xd4>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	0c9b      	lsrs	r3, r3, #18
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002cfc:	4b21      	ldr	r3, [pc, #132]	@ (8002d84 <HAL_InitTick+0xd8>)
 8002cfe:	4a22      	ldr	r2, [pc, #136]	@ (8002d88 <HAL_InitTick+0xdc>)
 8002d00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002d02:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <HAL_InitTick+0xd8>)
 8002d04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002d84 <HAL_InitTick+0xd8>)
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002d10:	4b1c      	ldr	r3, [pc, #112]	@ (8002d84 <HAL_InitTick+0xd8>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d16:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_InitTick+0xd8>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <HAL_InitTick+0xd8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002d22:	4818      	ldr	r0, [pc, #96]	@ (8002d84 <HAL_InitTick+0xd8>)
 8002d24:	f002 fa92 	bl	800524c <HAL_TIM_Base_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11b      	bne.n	8002d6e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002d36:	4813      	ldr	r0, [pc, #76]	@ (8002d84 <HAL_InitTick+0xd8>)
 8002d38:	f002 fae2 	bl	8005300 <HAL_TIM_Base_Start_IT>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002d42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d111      	bne.n	8002d6e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d4a:	2019      	movs	r0, #25
 8002d4c:	f000 fb92 	bl	8003474 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b0f      	cmp	r3, #15
 8002d54:	d808      	bhi.n	8002d68 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002d56:	2200      	movs	r2, #0
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	2019      	movs	r0, #25
 8002d5c:	f000 fb6e 	bl	800343c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d60:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <HAL_InitTick+0xe0>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e002      	b.n	8002d6e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3730      	adds	r7, #48	@ 0x30
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	431bde83 	.word	0x431bde83
 8002d84:	200006d8 	.word	0x200006d8
 8002d88:	40010000 	.word	0x40010000
 8002d8c:	2000000c 	.word	0x2000000c

08002d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d94:	bf00      	nop
 8002d96:	e7fd      	b.n	8002d94 <NMI_Handler+0x4>

08002d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d9c:	bf00      	nop
 8002d9e:	e7fd      	b.n	8002d9c <HardFault_Handler+0x4>

08002da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <MemManage_Handler+0x4>

08002da8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <BusFault_Handler+0x4>

08002db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <UsageFault_Handler+0x4>

08002db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002df4:	4802      	ldr	r0, [pc, #8]	@ (8002e00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002df6:	f002 faf3 	bl	80053e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	200006d8 	.word	0x200006d8

08002e04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return 1;
 8002e08:	2301      	movs	r3, #1
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <_kill>:

int _kill(int pid, int sig)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e1e:	f003 ff61 	bl	8006ce4 <__errno>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2216      	movs	r2, #22
 8002e26:	601a      	str	r2, [r3, #0]
  return -1;
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_exit>:

void _exit (int status)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff ffe7 	bl	8002e14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e46:	bf00      	nop
 8002e48:	e7fd      	b.n	8002e46 <_exit+0x12>

08002e4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e00a      	b.n	8002e72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e5c:	f3af 8000 	nop.w
 8002e60:	4601      	mov	r1, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	60ba      	str	r2, [r7, #8]
 8002e68:	b2ca      	uxtb	r2, r1
 8002e6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	dbf0      	blt.n	8002e5c <_read+0x12>
  }

  return len;
 8002e7a:	687b      	ldr	r3, [r7, #4]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e009      	b.n	8002eaa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	60ba      	str	r2, [r7, #8]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	dbf1      	blt.n	8002e96 <_write+0x12>
  }
  return len;
 8002eb2:	687b      	ldr	r3, [r7, #4]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <_close>:

int _close(int file)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ee4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <_isatty>:

int _isatty(int file)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002efc:	2301      	movs	r3, #1
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b085      	sub	sp, #20
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f2c:	4a14      	ldr	r2, [pc, #80]	@ (8002f80 <_sbrk+0x5c>)
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <_sbrk+0x60>)
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f38:	4b13      	ldr	r3, [pc, #76]	@ (8002f88 <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f40:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <_sbrk+0x64>)
 8002f42:	4a12      	ldr	r2, [pc, #72]	@ (8002f8c <_sbrk+0x68>)
 8002f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f46:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <_sbrk+0x64>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d207      	bcs.n	8002f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f54:	f003 fec6 	bl	8006ce4 <__errno>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f62:	e009      	b.n	8002f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f64:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <_sbrk+0x64>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f6a:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <_sbrk+0x64>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	4a05      	ldr	r2, [pc, #20]	@ (8002f88 <_sbrk+0x64>)
 8002f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20020000 	.word	0x20020000
 8002f84:	00000400 	.word	0x00000400
 8002f88:	20000720 	.word	0x20000720
 8002f8c:	20000878 	.word	0x20000878

08002f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <SystemInit+0x20>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9a:	4a05      	ldr	r2, [pc, #20]	@ (8002fb0 <SystemInit+0x20>)
 8002f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fb8:	480d      	ldr	r0, [pc, #52]	@ (8002ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fba:	490e      	ldr	r1, [pc, #56]	@ (8002ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fbc:	4a0e      	ldr	r2, [pc, #56]	@ (8002ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc0:	e002      	b.n	8002fc8 <LoopCopyDataInit>

08002fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc6:	3304      	adds	r3, #4

08002fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fcc:	d3f9      	bcc.n	8002fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fce:	4a0b      	ldr	r2, [pc, #44]	@ (8002ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fd0:	4c0b      	ldr	r4, [pc, #44]	@ (8003000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd4:	e001      	b.n	8002fda <LoopFillZerobss>

08002fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd8:	3204      	adds	r2, #4

08002fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fdc:	d3fb      	bcc.n	8002fd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fde:	f7ff ffd7 	bl	8002f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fe2:	f003 fe85 	bl	8006cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fe6:	f7ff fae5 	bl	80025b4 <main>
  bx  lr    
 8002fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002ff8:	080095b0 	.word	0x080095b0
  ldr r2, =_sbss
 8002ffc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003000:	20000874 	.word	0x20000874

08003004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003004:	e7fe      	b.n	8003004 <ADC_IRQHandler>
	...

08003008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800300c:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <HAL_Init+0x40>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0d      	ldr	r2, [pc, #52]	@ (8003048 <HAL_Init+0x40>)
 8003012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003018:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <HAL_Init+0x40>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0a      	ldr	r2, [pc, #40]	@ (8003048 <HAL_Init+0x40>)
 800301e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003024:	4b08      	ldr	r3, [pc, #32]	@ (8003048 <HAL_Init+0x40>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a07      	ldr	r2, [pc, #28]	@ (8003048 <HAL_Init+0x40>)
 800302a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800302e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003030:	2003      	movs	r0, #3
 8003032:	f000 f9f8 	bl	8003426 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003036:	200f      	movs	r0, #15
 8003038:	f7ff fe38 	bl	8002cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800303c:	f7ff fcee 	bl	8002a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023c00 	.word	0x40023c00

0800304c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003050:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_IncTick+0x20>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <HAL_IncTick+0x24>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4413      	add	r3, r2
 800305c:	4a04      	ldr	r2, [pc, #16]	@ (8003070 <HAL_IncTick+0x24>)
 800305e:	6013      	str	r3, [r2, #0]
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000010 	.word	0x20000010
 8003070:	20000724 	.word	0x20000724

08003074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return uwTick;
 8003078:	4b03      	ldr	r3, [pc, #12]	@ (8003088 <HAL_GetTick+0x14>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000724 	.word	0x20000724

0800308c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003094:	f7ff ffee 	bl	8003074 <HAL_GetTick>
 8003098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d005      	beq.n	80030b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030a6:	4b0a      	ldr	r3, [pc, #40]	@ (80030d0 <HAL_Delay+0x44>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030b2:	bf00      	nop
 80030b4:	f7ff ffde 	bl	8003074 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d8f7      	bhi.n	80030b4 <HAL_Delay+0x28>
  {
  }
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000010 	.word	0x20000010

080030d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e0ed      	b.n	80032c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff fcba 	bl	8002a6c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003108:	f7ff ffb4 	bl	8003074 <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800310e:	e012      	b.n	8003136 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003110:	f7ff ffb0 	bl	8003074 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b0a      	cmp	r3, #10
 800311c:	d90b      	bls.n	8003136 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2205      	movs	r2, #5
 800312e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e0c5      	b.n	80032c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0e5      	beq.n	8003110 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0202 	bic.w	r2, r2, #2
 8003152:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003154:	f7ff ff8e 	bl	8003074 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800315a:	e012      	b.n	8003182 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800315c:	f7ff ff8a 	bl	8003074 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b0a      	cmp	r3, #10
 8003168:	d90b      	bls.n	8003182 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2205      	movs	r2, #5
 800317a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e09f      	b.n	80032c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e5      	bne.n	800315c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	7e1b      	ldrb	r3, [r3, #24]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d108      	bne.n	80031aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	e007      	b.n	80031ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	7e5b      	ldrb	r3, [r3, #25]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d108      	bne.n	80031d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	e007      	b.n	80031e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7e9b      	ldrb	r3, [r3, #26]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d108      	bne.n	80031fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0220 	orr.w	r2, r2, #32
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e007      	b.n	800320e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0220 	bic.w	r2, r2, #32
 800320c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	7edb      	ldrb	r3, [r3, #27]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d108      	bne.n	8003228 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0210 	bic.w	r2, r2, #16
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	e007      	b.n	8003238 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0210 	orr.w	r2, r2, #16
 8003236:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7f1b      	ldrb	r3, [r3, #28]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d108      	bne.n	8003252 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0208 	orr.w	r2, r2, #8
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	e007      	b.n	8003262 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0208 	bic.w	r2, r2, #8
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7f5b      	ldrb	r3, [r3, #29]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d108      	bne.n	800327c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0204 	orr.w	r2, r2, #4
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e007      	b.n	800328c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	ea42 0103 	orr.w	r1, r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	1e5a      	subs	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003310 <__NVIC_SetPriorityGrouping+0x44>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032e8:	4013      	ands	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032fe:	4a04      	ldr	r2, [pc, #16]	@ (8003310 <__NVIC_SetPriorityGrouping+0x44>)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	60d3      	str	r3, [r2, #12]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003318:	4b04      	ldr	r3, [pc, #16]	@ (800332c <__NVIC_GetPriorityGrouping+0x18>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	f003 0307 	and.w	r3, r3, #7
}
 8003322:	4618      	mov	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	2b00      	cmp	r3, #0
 8003340:	db0b      	blt.n	800335a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	f003 021f 	and.w	r2, r3, #31
 8003348:	4907      	ldr	r1, [pc, #28]	@ (8003368 <__NVIC_EnableIRQ+0x38>)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2001      	movs	r0, #1
 8003352:	fa00 f202 	lsl.w	r2, r0, r2
 8003356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000e100 	.word	0xe000e100

0800336c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	6039      	str	r1, [r7, #0]
 8003376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337c:	2b00      	cmp	r3, #0
 800337e:	db0a      	blt.n	8003396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	490c      	ldr	r1, [pc, #48]	@ (80033b8 <__NVIC_SetPriority+0x4c>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	0112      	lsls	r2, r2, #4
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	440b      	add	r3, r1
 8003390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003394:	e00a      	b.n	80033ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4908      	ldr	r1, [pc, #32]	@ (80033bc <__NVIC_SetPriority+0x50>)
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	3b04      	subs	r3, #4
 80033a4:	0112      	lsls	r2, r2, #4
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	440b      	add	r3, r1
 80033aa:	761a      	strb	r2, [r3, #24]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000e100 	.word	0xe000e100
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	@ 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f1c3 0307 	rsb	r3, r3, #7
 80033da:	2b04      	cmp	r3, #4
 80033dc:	bf28      	it	cs
 80033de:	2304      	movcs	r3, #4
 80033e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d902      	bls.n	80033f0 <NVIC_EncodePriority+0x30>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3b03      	subs	r3, #3
 80033ee:	e000      	b.n	80033f2 <NVIC_EncodePriority+0x32>
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	401a      	ands	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003408:	f04f 31ff 	mov.w	r1, #4294967295
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43d9      	mvns	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	4313      	orrs	r3, r2
         );
}
 800341a:	4618      	mov	r0, r3
 800341c:	3724      	adds	r7, #36	@ 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ff4c 	bl	80032cc <__NVIC_SetPriorityGrouping>
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800344e:	f7ff ff61 	bl	8003314 <__NVIC_GetPriorityGrouping>
 8003452:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	6978      	ldr	r0, [r7, #20]
 800345a:	f7ff ffb1 	bl	80033c0 <NVIC_EncodePriority>
 800345e:	4602      	mov	r2, r0
 8003460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ff80 	bl	800336c <__NVIC_SetPriority>
}
 800346c:	bf00      	nop
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff ff54 	bl	8003330 <__NVIC_EnableIRQ>
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003490:	b480      	push	{r7}
 8003492:	b089      	sub	sp, #36	@ 0x24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
 80034aa:	e165      	b.n	8003778 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034ac:	2201      	movs	r2, #1
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	f040 8154 	bne.w	8003772 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d005      	beq.n	80034e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d130      	bne.n	8003544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	2203      	movs	r2, #3
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003518:	2201      	movs	r2, #1
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 0201 	and.w	r2, r3, #1
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	2b03      	cmp	r3, #3
 800354e:	d017      	beq.n	8003580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	2203      	movs	r2, #3
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d123      	bne.n	80035d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	08da      	lsrs	r2, r3, #3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3208      	adds	r2, #8
 8003594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	220f      	movs	r2, #15
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	08da      	lsrs	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3208      	adds	r2, #8
 80035ce:	69b9      	ldr	r1, [r7, #24]
 80035d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0203 	and.w	r2, r3, #3
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80ae 	beq.w	8003772 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	4b5d      	ldr	r3, [pc, #372]	@ (8003790 <HAL_GPIO_Init+0x300>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	4a5c      	ldr	r2, [pc, #368]	@ (8003790 <HAL_GPIO_Init+0x300>)
 8003620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003624:	6453      	str	r3, [r2, #68]	@ 0x44
 8003626:	4b5a      	ldr	r3, [pc, #360]	@ (8003790 <HAL_GPIO_Init+0x300>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003632:	4a58      	ldr	r2, [pc, #352]	@ (8003794 <HAL_GPIO_Init+0x304>)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	089b      	lsrs	r3, r3, #2
 8003638:	3302      	adds	r3, #2
 800363a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	220f      	movs	r2, #15
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a4f      	ldr	r2, [pc, #316]	@ (8003798 <HAL_GPIO_Init+0x308>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d025      	beq.n	80036aa <HAL_GPIO_Init+0x21a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a4e      	ldr	r2, [pc, #312]	@ (800379c <HAL_GPIO_Init+0x30c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01f      	beq.n	80036a6 <HAL_GPIO_Init+0x216>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a4d      	ldr	r2, [pc, #308]	@ (80037a0 <HAL_GPIO_Init+0x310>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d019      	beq.n	80036a2 <HAL_GPIO_Init+0x212>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4c      	ldr	r2, [pc, #304]	@ (80037a4 <HAL_GPIO_Init+0x314>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <HAL_GPIO_Init+0x20e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4b      	ldr	r2, [pc, #300]	@ (80037a8 <HAL_GPIO_Init+0x318>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00d      	beq.n	800369a <HAL_GPIO_Init+0x20a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a4a      	ldr	r2, [pc, #296]	@ (80037ac <HAL_GPIO_Init+0x31c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <HAL_GPIO_Init+0x206>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a49      	ldr	r2, [pc, #292]	@ (80037b0 <HAL_GPIO_Init+0x320>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <HAL_GPIO_Init+0x202>
 800368e:	2306      	movs	r3, #6
 8003690:	e00c      	b.n	80036ac <HAL_GPIO_Init+0x21c>
 8003692:	2307      	movs	r3, #7
 8003694:	e00a      	b.n	80036ac <HAL_GPIO_Init+0x21c>
 8003696:	2305      	movs	r3, #5
 8003698:	e008      	b.n	80036ac <HAL_GPIO_Init+0x21c>
 800369a:	2304      	movs	r3, #4
 800369c:	e006      	b.n	80036ac <HAL_GPIO_Init+0x21c>
 800369e:	2303      	movs	r3, #3
 80036a0:	e004      	b.n	80036ac <HAL_GPIO_Init+0x21c>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e002      	b.n	80036ac <HAL_GPIO_Init+0x21c>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_GPIO_Init+0x21c>
 80036aa:	2300      	movs	r3, #0
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	f002 0203 	and.w	r2, r2, #3
 80036b2:	0092      	lsls	r2, r2, #2
 80036b4:	4093      	lsls	r3, r2
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036bc:	4935      	ldr	r1, [pc, #212]	@ (8003794 <HAL_GPIO_Init+0x304>)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	089b      	lsrs	r3, r3, #2
 80036c2:	3302      	adds	r3, #2
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ca:	4b3a      	ldr	r3, [pc, #232]	@ (80037b4 <HAL_GPIO_Init+0x324>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ee:	4a31      	ldr	r2, [pc, #196]	@ (80037b4 <HAL_GPIO_Init+0x324>)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036f4:	4b2f      	ldr	r3, [pc, #188]	@ (80037b4 <HAL_GPIO_Init+0x324>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003718:	4a26      	ldr	r2, [pc, #152]	@ (80037b4 <HAL_GPIO_Init+0x324>)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800371e:	4b25      	ldr	r3, [pc, #148]	@ (80037b4 <HAL_GPIO_Init+0x324>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003742:	4a1c      	ldr	r2, [pc, #112]	@ (80037b4 <HAL_GPIO_Init+0x324>)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003748:	4b1a      	ldr	r3, [pc, #104]	@ (80037b4 <HAL_GPIO_Init+0x324>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800376c:	4a11      	ldr	r2, [pc, #68]	@ (80037b4 <HAL_GPIO_Init+0x324>)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3301      	adds	r3, #1
 8003776:	61fb      	str	r3, [r7, #28]
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	2b0f      	cmp	r3, #15
 800377c:	f67f ae96 	bls.w	80034ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3724      	adds	r7, #36	@ 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	40013800 	.word	0x40013800
 8003798:	40020000 	.word	0x40020000
 800379c:	40020400 	.word	0x40020400
 80037a0:	40020800 	.word	0x40020800
 80037a4:	40020c00 	.word	0x40020c00
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40021400 	.word	0x40021400
 80037b0:	40021800 	.word	0x40021800
 80037b4:	40013c00 	.word	0x40013c00

080037b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	807b      	strh	r3, [r7, #2]
 80037c4:	4613      	mov	r3, r2
 80037c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c8:	787b      	ldrb	r3, [r7, #1]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037d4:	e003      	b.n	80037de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	041a      	lsls	r2, r3, #16
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	619a      	str	r2, [r3, #24]
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e12b      	b.n	8003a56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff f972 	bl	8002afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2224      	movs	r2, #36	@ 0x24
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800383e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800384e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003850:	f000 fa02 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8003854:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4a81      	ldr	r2, [pc, #516]	@ (8003a60 <HAL_I2C_Init+0x274>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d807      	bhi.n	8003870 <HAL_I2C_Init+0x84>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a80      	ldr	r2, [pc, #512]	@ (8003a64 <HAL_I2C_Init+0x278>)
 8003864:	4293      	cmp	r3, r2
 8003866:	bf94      	ite	ls
 8003868:	2301      	movls	r3, #1
 800386a:	2300      	movhi	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e006      	b.n	800387e <HAL_I2C_Init+0x92>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4a7d      	ldr	r2, [pc, #500]	@ (8003a68 <HAL_I2C_Init+0x27c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	bf94      	ite	ls
 8003878:	2301      	movls	r3, #1
 800387a:	2300      	movhi	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e0e7      	b.n	8003a56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4a78      	ldr	r2, [pc, #480]	@ (8003a6c <HAL_I2C_Init+0x280>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	0c9b      	lsrs	r3, r3, #18
 8003890:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a6a      	ldr	r2, [pc, #424]	@ (8003a60 <HAL_I2C_Init+0x274>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d802      	bhi.n	80038c0 <HAL_I2C_Init+0xd4>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	3301      	adds	r3, #1
 80038be:	e009      	b.n	80038d4 <HAL_I2C_Init+0xe8>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	4a69      	ldr	r2, [pc, #420]	@ (8003a70 <HAL_I2C_Init+0x284>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	099b      	lsrs	r3, r3, #6
 80038d2:	3301      	adds	r3, #1
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	430b      	orrs	r3, r1
 80038da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	495c      	ldr	r1, [pc, #368]	@ (8003a60 <HAL_I2C_Init+0x274>)
 80038f0:	428b      	cmp	r3, r1
 80038f2:	d819      	bhi.n	8003928 <HAL_I2C_Init+0x13c>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e59      	subs	r1, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003902:	1c59      	adds	r1, r3, #1
 8003904:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003908:	400b      	ands	r3, r1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_I2C_Init+0x138>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1e59      	subs	r1, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fbb1 f3f3 	udiv	r3, r1, r3
 800391c:	3301      	adds	r3, #1
 800391e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003922:	e051      	b.n	80039c8 <HAL_I2C_Init+0x1dc>
 8003924:	2304      	movs	r3, #4
 8003926:	e04f      	b.n	80039c8 <HAL_I2C_Init+0x1dc>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d111      	bne.n	8003954 <HAL_I2C_Init+0x168>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e58      	subs	r0, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	440b      	add	r3, r1
 800393e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003942:	3301      	adds	r3, #1
 8003944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	e012      	b.n	800397a <HAL_I2C_Init+0x18e>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e58      	subs	r0, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	0099      	lsls	r1, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Init+0x196>
 800397e:	2301      	movs	r3, #1
 8003980:	e022      	b.n	80039c8 <HAL_I2C_Init+0x1dc>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10e      	bne.n	80039a8 <HAL_I2C_Init+0x1bc>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1e58      	subs	r0, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6859      	ldr	r1, [r3, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	440b      	add	r3, r1
 8003998:	fbb0 f3f3 	udiv	r3, r0, r3
 800399c:	3301      	adds	r3, #1
 800399e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039a6:	e00f      	b.n	80039c8 <HAL_I2C_Init+0x1dc>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1e58      	subs	r0, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	0099      	lsls	r1, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80039be:	3301      	adds	r3, #1
 80039c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	6809      	ldr	r1, [r1, #0]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69da      	ldr	r2, [r3, #28]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6911      	ldr	r1, [r2, #16]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68d2      	ldr	r2, [r2, #12]
 8003a02:	4311      	orrs	r1, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	000186a0 	.word	0x000186a0
 8003a64:	001e847f 	.word	0x001e847f
 8003a68:	003d08ff 	.word	0x003d08ff
 8003a6c:	431bde83 	.word	0x431bde83
 8003a70:	10624dd3 	.word	0x10624dd3

08003a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0cc      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a88:	4b68      	ldr	r3, [pc, #416]	@ (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d90c      	bls.n	8003ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b65      	ldr	r3, [pc, #404]	@ (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b63      	ldr	r3, [pc, #396]	@ (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0b8      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d020      	beq.n	8003afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac8:	4b59      	ldr	r3, [pc, #356]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a58      	ldr	r2, [pc, #352]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ad2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae0:	4b53      	ldr	r3, [pc, #332]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4a52      	ldr	r2, [pc, #328]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aec:	4b50      	ldr	r3, [pc, #320]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	494d      	ldr	r1, [pc, #308]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d044      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	4b47      	ldr	r3, [pc, #284]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d119      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e07f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d003      	beq.n	8003b32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b32:	4b3f      	ldr	r3, [pc, #252]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e06f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b42:	4b3b      	ldr	r3, [pc, #236]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e067      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b52:	4b37      	ldr	r3, [pc, #220]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4934      	ldr	r1, [pc, #208]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b64:	f7ff fa86 	bl	8003074 <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7ff fa82 	bl	8003074 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e04f      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	4b2b      	ldr	r3, [pc, #172]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 020c 	and.w	r2, r3, #12
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d1eb      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b94:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d20c      	bcs.n	8003bbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b22      	ldr	r3, [pc, #136]	@ (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b20      	ldr	r3, [pc, #128]	@ (8003c2c <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e032      	b.n	8003c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc8:	4b19      	ldr	r3, [pc, #100]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4916      	ldr	r1, [pc, #88]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be6:	4b12      	ldr	r3, [pc, #72]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	490e      	ldr	r1, [pc, #56]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bfa:	f000 f887 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	490a      	ldr	r1, [pc, #40]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	5ccb      	ldrb	r3, [r1, r3]
 8003c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c12:	4a09      	ldr	r2, [pc, #36]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c16:	4b09      	ldr	r3, [pc, #36]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff f846 	bl	8002cac <HAL_InitTick>

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023c00 	.word	0x40023c00
 8003c30:	40023800 	.word	0x40023800
 8003c34:	08009214 	.word	0x08009214
 8003c38:	20000008 	.word	0x20000008
 8003c3c:	2000000c 	.word	0x2000000c

08003c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c44:	4b03      	ldr	r3, [pc, #12]	@ (8003c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000008 	.word	0x20000008

08003c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c5c:	f7ff fff0 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0a9b      	lsrs	r3, r3, #10
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	@ (8003c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	08009224 	.word	0x08009224

08003c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c84:	f7ff ffdc 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0b5b      	lsrs	r3, r3, #13
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4903      	ldr	r1, [pc, #12]	@ (8003ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	08009224 	.word	0x08009224

08003ca8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cb8:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <HAL_RCC_GetClockConfig+0x5c>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0203 	and.w	r2, r3, #3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d04 <HAL_RCC_GetClockConfig+0x5c>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <HAL_RCC_GetClockConfig+0x5c>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cdc:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <HAL_RCC_GetClockConfig+0x5c>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	08db      	lsrs	r3, r3, #3
 8003ce2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cea:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <HAL_RCC_GetClockConfig+0x60>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 020f 	and.w	r2, r3, #15
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	601a      	str	r2, [r3, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40023c00 	.word	0x40023c00

08003d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d10:	b0ae      	sub	sp, #184	@ 0xb8
 8003d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d32:	4bcb      	ldr	r3, [pc, #812]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b0c      	cmp	r3, #12
 8003d3c:	f200 8206 	bhi.w	800414c <HAL_RCC_GetSysClockFreq+0x440>
 8003d40:	a201      	add	r2, pc, #4	@ (adr r2, 8003d48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d7d 	.word	0x08003d7d
 8003d4c:	0800414d 	.word	0x0800414d
 8003d50:	0800414d 	.word	0x0800414d
 8003d54:	0800414d 	.word	0x0800414d
 8003d58:	08003d85 	.word	0x08003d85
 8003d5c:	0800414d 	.word	0x0800414d
 8003d60:	0800414d 	.word	0x0800414d
 8003d64:	0800414d 	.word	0x0800414d
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	0800414d 	.word	0x0800414d
 8003d70:	0800414d 	.word	0x0800414d
 8003d74:	0800414d 	.word	0x0800414d
 8003d78:	08003f7d 	.word	0x08003f7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d7c:	4bb9      	ldr	r3, [pc, #740]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d82:	e1e7      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d84:	4bb8      	ldr	r3, [pc, #736]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d8a:	e1e3      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d8c:	4bb4      	ldr	r3, [pc, #720]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d98:	4bb1      	ldr	r3, [pc, #708]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d071      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da4:	4bae      	ldr	r3, [pc, #696]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003db0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dca:	4622      	mov	r2, r4
 8003dcc:	462b      	mov	r3, r5
 8003dce:	f04f 0000 	mov.w	r0, #0
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	0159      	lsls	r1, r3, #5
 8003dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ddc:	0150      	lsls	r0, r2, #5
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4621      	mov	r1, r4
 8003de4:	1a51      	subs	r1, r2, r1
 8003de6:	6439      	str	r1, [r7, #64]	@ 0x40
 8003de8:	4629      	mov	r1, r5
 8003dea:	eb63 0301 	sbc.w	r3, r3, r1
 8003dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	018b      	lsls	r3, r1, #6
 8003e00:	4641      	mov	r1, r8
 8003e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e06:	4641      	mov	r1, r8
 8003e08:	018a      	lsls	r2, r1, #6
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	1a51      	subs	r1, r2, r1
 8003e0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e10:	4649      	mov	r1, r9
 8003e12:	eb63 0301 	sbc.w	r3, r3, r1
 8003e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003e24:	4649      	mov	r1, r9
 8003e26:	00cb      	lsls	r3, r1, #3
 8003e28:	4641      	mov	r1, r8
 8003e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e2e:	4641      	mov	r1, r8
 8003e30:	00ca      	lsls	r2, r1, #3
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	4622      	mov	r2, r4
 8003e3a:	189b      	adds	r3, r3, r2
 8003e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e3e:	462b      	mov	r3, r5
 8003e40:	460a      	mov	r2, r1
 8003e42:	eb42 0303 	adc.w	r3, r2, r3
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e54:	4629      	mov	r1, r5
 8003e56:	024b      	lsls	r3, r1, #9
 8003e58:	4621      	mov	r1, r4
 8003e5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e5e:	4621      	mov	r1, r4
 8003e60:	024a      	lsls	r2, r1, #9
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e78:	f7fc ff06 	bl	8000c88 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4613      	mov	r3, r2
 8003e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e86:	e067      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e88:	4b75      	ldr	r3, [pc, #468]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e94:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ea6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	f04f 0000 	mov.w	r0, #0
 8003eb2:	f04f 0100 	mov.w	r1, #0
 8003eb6:	0159      	lsls	r1, r3, #5
 8003eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ebc:	0150      	lsls	r0, r2, #5
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	1a51      	subs	r1, r2, r1
 8003ec6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003ec8:	4629      	mov	r1, r5
 8003eca:	eb63 0301 	sbc.w	r3, r3, r1
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003edc:	4649      	mov	r1, r9
 8003ede:	018b      	lsls	r3, r1, #6
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	018a      	lsls	r2, r1, #6
 8003eea:	4641      	mov	r1, r8
 8003eec:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f0a:	4692      	mov	sl, r2
 8003f0c:	469b      	mov	fp, r3
 8003f0e:	4623      	mov	r3, r4
 8003f10:	eb1a 0303 	adds.w	r3, sl, r3
 8003f14:	623b      	str	r3, [r7, #32]
 8003f16:	462b      	mov	r3, r5
 8003f18:	eb4b 0303 	adc.w	r3, fp, r3
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	028b      	lsls	r3, r1, #10
 8003f2e:	4621      	mov	r1, r4
 8003f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f34:	4621      	mov	r1, r4
 8003f36:	028a      	lsls	r2, r1, #10
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f40:	2200      	movs	r2, #0
 8003f42:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f44:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f4a:	f7fc fe9d 	bl	8000c88 <__aeabi_uldivmod>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4613      	mov	r3, r2
 8003f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f58:	4b41      	ldr	r3, [pc, #260]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	3301      	adds	r3, #1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f7a:	e0eb      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f7c:	4b38      	ldr	r3, [pc, #224]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f88:	4b35      	ldr	r3, [pc, #212]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d06b      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f94:	4b32      	ldr	r3, [pc, #200]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fa8:	2300      	movs	r3, #0
 8003faa:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003fb0:	4622      	mov	r2, r4
 8003fb2:	462b      	mov	r3, r5
 8003fb4:	f04f 0000 	mov.w	r0, #0
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	0159      	lsls	r1, r3, #5
 8003fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc2:	0150      	lsls	r0, r2, #5
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4621      	mov	r1, r4
 8003fca:	1a51      	subs	r1, r2, r1
 8003fcc:	61b9      	str	r1, [r7, #24]
 8003fce:	4629      	mov	r1, r5
 8003fd0:	eb63 0301 	sbc.w	r3, r3, r1
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fe2:	4659      	mov	r1, fp
 8003fe4:	018b      	lsls	r3, r1, #6
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fec:	4651      	mov	r1, sl
 8003fee:	018a      	lsls	r2, r1, #6
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	ebb2 0801 	subs.w	r8, r2, r1
 8003ff6:	4659      	mov	r1, fp
 8003ff8:	eb63 0901 	sbc.w	r9, r3, r1
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004008:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800400c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004010:	4690      	mov	r8, r2
 8004012:	4699      	mov	r9, r3
 8004014:	4623      	mov	r3, r4
 8004016:	eb18 0303 	adds.w	r3, r8, r3
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	462b      	mov	r3, r5
 800401e:	eb49 0303 	adc.w	r3, r9, r3
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004030:	4629      	mov	r1, r5
 8004032:	024b      	lsls	r3, r1, #9
 8004034:	4621      	mov	r1, r4
 8004036:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800403a:	4621      	mov	r1, r4
 800403c:	024a      	lsls	r2, r1, #9
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004046:	2200      	movs	r2, #0
 8004048:	65bb      	str	r3, [r7, #88]	@ 0x58
 800404a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800404c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004050:	f7fc fe1a 	bl	8000c88 <__aeabi_uldivmod>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4613      	mov	r3, r2
 800405a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800405e:	e065      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x420>
 8004060:	40023800 	.word	0x40023800
 8004064:	00f42400 	.word	0x00f42400
 8004068:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406c:	4b3d      	ldr	r3, [pc, #244]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x458>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	099b      	lsrs	r3, r3, #6
 8004072:	2200      	movs	r2, #0
 8004074:	4618      	mov	r0, r3
 8004076:	4611      	mov	r1, r2
 8004078:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800407c:	653b      	str	r3, [r7, #80]	@ 0x50
 800407e:	2300      	movs	r3, #0
 8004080:	657b      	str	r3, [r7, #84]	@ 0x54
 8004082:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004086:	4642      	mov	r2, r8
 8004088:	464b      	mov	r3, r9
 800408a:	f04f 0000 	mov.w	r0, #0
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	0159      	lsls	r1, r3, #5
 8004094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004098:	0150      	lsls	r0, r2, #5
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4641      	mov	r1, r8
 80040a0:	1a51      	subs	r1, r2, r1
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	4649      	mov	r1, r9
 80040a6:	eb63 0301 	sbc.w	r3, r3, r1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040b8:	4659      	mov	r1, fp
 80040ba:	018b      	lsls	r3, r1, #6
 80040bc:	4651      	mov	r1, sl
 80040be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c2:	4651      	mov	r1, sl
 80040c4:	018a      	lsls	r2, r1, #6
 80040c6:	4651      	mov	r1, sl
 80040c8:	1a54      	subs	r4, r2, r1
 80040ca:	4659      	mov	r1, fp
 80040cc:	eb63 0501 	sbc.w	r5, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	00eb      	lsls	r3, r5, #3
 80040da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040de:	00e2      	lsls	r2, r4, #3
 80040e0:	4614      	mov	r4, r2
 80040e2:	461d      	mov	r5, r3
 80040e4:	4643      	mov	r3, r8
 80040e6:	18e3      	adds	r3, r4, r3
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	464b      	mov	r3, r9
 80040ec:	eb45 0303 	adc.w	r3, r5, r3
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040fe:	4629      	mov	r1, r5
 8004100:	028b      	lsls	r3, r1, #10
 8004102:	4621      	mov	r1, r4
 8004104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004108:	4621      	mov	r1, r4
 800410a:	028a      	lsls	r2, r1, #10
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004114:	2200      	movs	r2, #0
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004118:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800411a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800411e:	f7fc fdb3 	bl	8000c88 <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4613      	mov	r3, r2
 8004128:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800412c:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x458>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	0f1b      	lsrs	r3, r3, #28
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800413a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800413e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800414a:	e003      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x45c>)
 800414e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004152:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004158:	4618      	mov	r0, r3
 800415a:	37b8      	adds	r7, #184	@ 0xb8
 800415c:	46bd      	mov	sp, r7
 800415e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	00f42400 	.word	0x00f42400

0800416c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e28d      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8083 	beq.w	8004292 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800418c:	4b94      	ldr	r3, [pc, #592]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	2b04      	cmp	r3, #4
 8004196:	d019      	beq.n	80041cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004198:	4b91      	ldr	r3, [pc, #580]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
        || \
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80041a4:	4b8e      	ldr	r3, [pc, #568]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041b0:	d00c      	beq.n	80041cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b2:	4b8b      	ldr	r3, [pc, #556]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d112      	bne.n	80041e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041be:	4b88      	ldr	r3, [pc, #544]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041ca:	d10b      	bne.n	80041e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041cc:	4b84      	ldr	r3, [pc, #528]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d05b      	beq.n	8004290 <HAL_RCC_OscConfig+0x124>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d157      	bne.n	8004290 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e25a      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ec:	d106      	bne.n	80041fc <HAL_RCC_OscConfig+0x90>
 80041ee:	4b7c      	ldr	r3, [pc, #496]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a7b      	ldr	r2, [pc, #492]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e01d      	b.n	8004238 <HAL_RCC_OscConfig+0xcc>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0xb4>
 8004206:	4b76      	ldr	r3, [pc, #472]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a75      	ldr	r2, [pc, #468]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800420c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b73      	ldr	r3, [pc, #460]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a72      	ldr	r2, [pc, #456]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0xcc>
 8004220:	4b6f      	ldr	r3, [pc, #444]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a6e      	ldr	r2, [pc, #440]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	4b6c      	ldr	r3, [pc, #432]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6b      	ldr	r2, [pc, #428]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fe ff18 	bl	8003074 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004248:	f7fe ff14 	bl	8003074 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b64      	cmp	r3, #100	@ 0x64
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e21f      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	4b61      	ldr	r3, [pc, #388]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0xdc>
 8004266:	e014      	b.n	8004292 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe ff04 	bl	8003074 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004270:	f7fe ff00 	bl	8003074 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	@ 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e20b      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	4b57      	ldr	r3, [pc, #348]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x104>
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d06f      	beq.n	800437e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800429e:	4b50      	ldr	r3, [pc, #320]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d017      	beq.n	80042da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042aa:	4b4d      	ldr	r3, [pc, #308]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d105      	bne.n	80042c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042b6:	4b4a      	ldr	r3, [pc, #296]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c2:	4b47      	ldr	r3, [pc, #284]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d11c      	bne.n	8004308 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ce:	4b44      	ldr	r3, [pc, #272]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d116      	bne.n	8004308 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	4b41      	ldr	r3, [pc, #260]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_RCC_OscConfig+0x186>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e1d3      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f2:	4b3b      	ldr	r3, [pc, #236]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4937      	ldr	r1, [pc, #220]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	e03a      	b.n	800437e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004310:	4b34      	ldr	r3, [pc, #208]	@ (80043e4 <HAL_RCC_OscConfig+0x278>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004316:	f7fe fead 	bl	8003074 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431e:	f7fe fea9 	bl	8003074 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e1b4      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	4b2b      	ldr	r3, [pc, #172]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433c:	4b28      	ldr	r3, [pc, #160]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4925      	ldr	r1, [pc, #148]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	e015      	b.n	800437e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004352:	4b24      	ldr	r3, [pc, #144]	@ (80043e4 <HAL_RCC_OscConfig+0x278>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fe fe8c 	bl	8003074 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004360:	f7fe fe88 	bl	8003074 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e193      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	4b1b      	ldr	r3, [pc, #108]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d036      	beq.n	80043f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d016      	beq.n	80043c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004392:	4b15      	ldr	r3, [pc, #84]	@ (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fe fe6c 	bl	8003074 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fe fe68 	bl	8003074 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e173      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b2:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80043b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x234>
 80043be:	e01b      	b.n	80043f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c0:	4b09      	ldr	r3, [pc, #36]	@ (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c6:	f7fe fe55 	bl	8003074 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	e00e      	b.n	80043ec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ce:	f7fe fe51 	bl	8003074 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d907      	bls.n	80043ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e15c      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
 80043e0:	40023800 	.word	0x40023800
 80043e4:	42470000 	.word	0x42470000
 80043e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	4b8a      	ldr	r3, [pc, #552]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80043ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1ea      	bne.n	80043ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8097 	beq.w	8004534 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440a:	4b83      	ldr	r3, [pc, #524]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	4b7f      	ldr	r3, [pc, #508]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	4a7e      	ldr	r2, [pc, #504]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004424:	6413      	str	r3, [r2, #64]	@ 0x40
 8004426:	4b7c      	ldr	r3, [pc, #496]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b79      	ldr	r3, [pc, #484]	@ (800461c <HAL_RCC_OscConfig+0x4b0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d118      	bne.n	8004474 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b76      	ldr	r3, [pc, #472]	@ (800461c <HAL_RCC_OscConfig+0x4b0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a75      	ldr	r2, [pc, #468]	@ (800461c <HAL_RCC_OscConfig+0x4b0>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800444c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444e:	f7fe fe11 	bl	8003074 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004456:	f7fe fe0d 	bl	8003074 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e118      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004468:	4b6c      	ldr	r3, [pc, #432]	@ (800461c <HAL_RCC_OscConfig+0x4b0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x31e>
 800447c:	4b66      	ldr	r3, [pc, #408]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004480:	4a65      	ldr	r2, [pc, #404]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6713      	str	r3, [r2, #112]	@ 0x70
 8004488:	e01c      	b.n	80044c4 <HAL_RCC_OscConfig+0x358>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b05      	cmp	r3, #5
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x340>
 8004492:	4b61      	ldr	r3, [pc, #388]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004496:	4a60      	ldr	r2, [pc, #384]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004498:	f043 0304 	orr.w	r3, r3, #4
 800449c:	6713      	str	r3, [r2, #112]	@ 0x70
 800449e:	4b5e      	ldr	r3, [pc, #376]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a2:	4a5d      	ldr	r2, [pc, #372]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0x358>
 80044ac:	4b5a      	ldr	r3, [pc, #360]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b0:	4a59      	ldr	r2, [pc, #356]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b8:	4b57      	ldr	r3, [pc, #348]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044bc:	4a56      	ldr	r2, [pc, #344]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044be:	f023 0304 	bic.w	r3, r3, #4
 80044c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d015      	beq.n	80044f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fe fdd2 	bl	8003074 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fe fdce 	bl	8003074 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0d7      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0ee      	beq.n	80044d4 <HAL_RCC_OscConfig+0x368>
 80044f6:	e014      	b.n	8004522 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fe fdbc 	bl	8003074 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fe fdb8 	bl	8003074 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0c1      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004516:	4b40      	ldr	r3, [pc, #256]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ee      	bne.n	8004500 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004528:	4b3b      	ldr	r3, [pc, #236]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	4a3a      	ldr	r2, [pc, #232]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800452e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004532:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80ad 	beq.w	8004698 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800453e:	4b36      	ldr	r3, [pc, #216]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b08      	cmp	r3, #8
 8004548:	d060      	beq.n	800460c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d145      	bne.n	80045de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004552:	4b33      	ldr	r3, [pc, #204]	@ (8004620 <HAL_RCC_OscConfig+0x4b4>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fe fd8c 	bl	8003074 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004560:	f7fe fd88 	bl	8003074 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e093      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004572:	4b29      	ldr	r3, [pc, #164]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	019b      	lsls	r3, r3, #6
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	3b01      	subs	r3, #1
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	061b      	lsls	r3, r3, #24
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	071b      	lsls	r3, r3, #28
 80045aa:	491b      	ldr	r1, [pc, #108]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <HAL_RCC_OscConfig+0x4b4>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b6:	f7fe fd5d 	bl	8003074 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045be:	f7fe fd59 	bl	8003074 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e064      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d0:	4b11      	ldr	r3, [pc, #68]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x452>
 80045dc:	e05c      	b.n	8004698 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045de:	4b10      	ldr	r3, [pc, #64]	@ (8004620 <HAL_RCC_OscConfig+0x4b4>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fe fd46 	bl	8003074 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fe fd42 	bl	8003074 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e04d      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	4b06      	ldr	r3, [pc, #24]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x480>
 800460a:	e045      	b.n	8004698 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d107      	bne.n	8004624 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e040      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
 8004618:	40023800 	.word	0x40023800
 800461c:	40007000 	.word	0x40007000
 8004620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004624:	4b1f      	ldr	r3, [pc, #124]	@ (80046a4 <HAL_RCC_OscConfig+0x538>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d030      	beq.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d129      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d122      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800465a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800465c:	4293      	cmp	r3, r2
 800465e:	d119      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	3b01      	subs	r3, #1
 800466e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d10f      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d107      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800

080046a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e07b      	b.n	80047b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d108      	bne.n	80046d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ca:	d009      	beq.n	80046e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]
 80046d2:	e005      	b.n	80046e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fe fa46 	bl	8002b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004764:	ea42 0103 	orr.w	r1, r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	f003 0104 	and.w	r1, r3, #4
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	f003 0210 	and.w	r2, r3, #16
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b088      	sub	sp, #32
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ca:	f7fe fc53 	bl	8003074 <HAL_GetTick>
 80047ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d001      	beq.n	80047e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
 80047e2:	e12a      	b.n	8004a3a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_SPI_Transmit+0x36>
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e122      	b.n	8004a3a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_SPI_Transmit+0x48>
 80047fe:	2302      	movs	r3, #2
 8004800:	e11b      	b.n	8004a3a <HAL_SPI_Transmit+0x280>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2203      	movs	r2, #3
 800480e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	88fa      	ldrh	r2, [r7, #6]
 8004828:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004850:	d10f      	bne.n	8004872 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004860:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004870:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487c:	2b40      	cmp	r3, #64	@ 0x40
 800487e:	d007      	beq.n	8004890 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800488e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004898:	d152      	bne.n	8004940 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <HAL_SPI_Transmit+0xee>
 80048a2:	8b7b      	ldrh	r3, [r7, #26]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d145      	bne.n	8004934 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ac:	881a      	ldrh	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b8:	1c9a      	adds	r2, r3, #2
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048cc:	e032      	b.n	8004934 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d112      	bne.n	8004902 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e0:	881a      	ldrh	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ec:	1c9a      	adds	r2, r3, #2
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004900:	e018      	b.n	8004934 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004902:	f7fe fbb7 	bl	8003074 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d803      	bhi.n	800491a <HAL_SPI_Transmit+0x160>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d102      	bne.n	8004920 <HAL_SPI_Transmit+0x166>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e082      	b.n	8004a3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1c7      	bne.n	80048ce <HAL_SPI_Transmit+0x114>
 800493e:	e053      	b.n	80049e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_SPI_Transmit+0x194>
 8004948:	8b7b      	ldrh	r3, [r7, #26]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d147      	bne.n	80049de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	7812      	ldrb	r2, [r2, #0]
 800495a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004974:	e033      	b.n	80049de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b02      	cmp	r3, #2
 8004982:	d113      	bne.n	80049ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	7812      	ldrb	r2, [r2, #0]
 8004990:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049aa:	e018      	b.n	80049de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ac:	f7fe fb62 	bl	8003074 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d803      	bhi.n	80049c4 <HAL_SPI_Transmit+0x20a>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d102      	bne.n	80049ca <HAL_SPI_Transmit+0x210>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e02d      	b.n	8004a3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1c6      	bne.n	8004976 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	6839      	ldr	r1, [r7, #0]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fbd9 	bl	80051a4 <SPI_EndRxTxTransaction>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004a38:	2300      	movs	r3, #0
  }
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b088      	sub	sp, #32
 8004a46:	af02      	add	r7, sp, #8
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d001      	beq.n	8004a62 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e104      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a6a:	d112      	bne.n	8004a92 <HAL_SPI_Receive+0x50>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10e      	bne.n	8004a92 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2204      	movs	r2, #4
 8004a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a7c:	88fa      	ldrh	r2, [r7, #6]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	4613      	mov	r3, r2
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f8f3 	bl	8004c74 <HAL_SPI_TransmitReceive>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	e0ec      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a92:	f7fe faef 	bl	8003074 <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <HAL_SPI_Receive+0x62>
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0e1      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_SPI_Receive+0x74>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0da      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	88fa      	ldrh	r2, [r7, #6]
 8004ad6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b04:	d10f      	bne.n	8004b26 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b40      	cmp	r3, #64	@ 0x40
 8004b32:	d007      	beq.n	8004b44 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d170      	bne.n	8004c2e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b4c:	e035      	b.n	8004bba <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d115      	bne.n	8004b88 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f103 020c 	add.w	r2, r3, #12
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	7812      	ldrb	r2, [r2, #0]
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b86:	e018      	b.n	8004bba <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b88:	f7fe fa74 	bl	8003074 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d803      	bhi.n	8004ba0 <HAL_SPI_Receive+0x15e>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9e:	d102      	bne.n	8004ba6 <HAL_SPI_Receive+0x164>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d109      	bne.n	8004bba <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e058      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1c4      	bne.n	8004b4e <HAL_SPI_Receive+0x10c>
 8004bc4:	e038      	b.n	8004c38 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d113      	bne.n	8004bfc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	b292      	uxth	r2, r2
 8004be0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	1c9a      	adds	r2, r3, #2
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bfa:	e018      	b.n	8004c2e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bfc:	f7fe fa3a 	bl	8003074 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d803      	bhi.n	8004c14 <HAL_SPI_Receive+0x1d2>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_Receive+0x1d8>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e01e      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1c6      	bne.n	8004bc6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fa4b 	bl	80050d8 <SPI_EndRxTransaction>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
  }
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	@ 0x28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c82:	2301      	movs	r3, #1
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c86:	f7fe f9f5 	bl	8003074 <HAL_GetTick>
 8004c8a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c92:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004c9a:	887b      	ldrh	r3, [r7, #2]
 8004c9c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d00c      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x4a>
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004caa:	d106      	bne.n	8004cba <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <HAL_SPI_TransmitReceive+0x46>
 8004cb4:	7ffb      	ldrb	r3, [r7, #31]
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d001      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e17f      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x5c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x5c>
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e174      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_SPI_TransmitReceive+0x6e>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e16d      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d003      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	887a      	ldrh	r2, [r7, #2]
 8004d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	887a      	ldrh	r2, [r7, #2]
 8004d26:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3e:	2b40      	cmp	r3, #64	@ 0x40
 8004d40:	d007      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d5a:	d17e      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0xf6>
 8004d64:	8afb      	ldrh	r3, [r7, #22]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d16c      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d8e:	e059      	b.n	8004e44 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d11b      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x162>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d016      	beq.n	8004dd6 <HAL_SPI_TransmitReceive+0x162>
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d113      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db2:	881a      	ldrh	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbe:	1c9a      	adds	r2, r3, #2
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d119      	bne.n	8004e18 <HAL_SPI_TransmitReceive+0x1a4>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d014      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df8:	b292      	uxth	r2, r2
 8004dfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e00:	1c9a      	adds	r2, r3, #2
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e14:	2301      	movs	r3, #1
 8004e16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e18:	f7fe f92c 	bl	8003074 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d80d      	bhi.n	8004e44 <HAL_SPI_TransmitReceive+0x1d0>
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d009      	beq.n	8004e44 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e0bc      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1a0      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x11c>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d19b      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x11c>
 8004e58:	e082      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_SPI_TransmitReceive+0x1f4>
 8004e62:	8afb      	ldrh	r3, [r7, #22]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d171      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	7812      	ldrb	r2, [r2, #0]
 8004e74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e8e:	e05d      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d11c      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x264>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d017      	beq.n	8004ed8 <HAL_SPI_TransmitReceive+0x264>
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d114      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	7812      	ldrb	r2, [r2, #0]
 8004eba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d119      	bne.n	8004f1a <HAL_SPI_TransmitReceive+0x2a6>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d014      	beq.n	8004f1a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f16:	2301      	movs	r3, #1
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f1a:	f7fe f8ab 	bl	8003074 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d803      	bhi.n	8004f32 <HAL_SPI_TransmitReceive+0x2be>
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f30:	d102      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x2c4>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d109      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e038      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d19c      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x21c>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d197      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f60:	6a3a      	ldr	r2, [r7, #32]
 8004f62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f91d 	bl	80051a4 <SPI_EndRxTxTransaction>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e01d      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3728      	adds	r7, #40	@ 0x28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fd8:	f7fe f84c 	bl	8003074 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fe8:	f7fe f844 	bl	8003074 <HAL_GetTick>
 8004fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fee:	4b39      	ldr	r3, [pc, #228]	@ (80050d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	015b      	lsls	r3, r3, #5
 8004ff4:	0d1b      	lsrs	r3, r3, #20
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ffe:	e054      	b.n	80050aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005006:	d050      	beq.n	80050aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005008:	f7fe f834 	bl	8003074 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	429a      	cmp	r2, r3
 8005016:	d902      	bls.n	800501e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d13d      	bne.n	800509a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800502c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005036:	d111      	bne.n	800505c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005040:	d004      	beq.n	800504c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504a:	d107      	bne.n	800505c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800505a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005064:	d10f      	bne.n	8005086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e017      	b.n	80050ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	bf0c      	ite	eq
 80050ba:	2301      	moveq	r3, #1
 80050bc:	2300      	movne	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d19b      	bne.n	8005000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000008 	.word	0x20000008

080050d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ec:	d111      	bne.n	8005112 <SPI_EndRxTransaction+0x3a>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050f6:	d004      	beq.n	8005102 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005100:	d107      	bne.n	8005112 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005110:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800511a:	d12a      	bne.n	8005172 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005124:	d012      	beq.n	800514c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2200      	movs	r2, #0
 800512e:	2180      	movs	r1, #128	@ 0x80
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff ff49 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d02d      	beq.n	8005198 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e026      	b.n	800519a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	2101      	movs	r1, #1
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f7ff ff36 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01a      	beq.n	8005198 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e013      	b.n	800519a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2200      	movs	r2, #0
 800517a:	2101      	movs	r1, #1
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff ff23 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e000      	b.n	800519a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2201      	movs	r2, #1
 80051b8:	2102      	movs	r1, #2
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7ff ff04 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ca:	f043 0220 	orr.w	r2, r3, #32
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e032      	b.n	800523c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005244 <SPI_EndRxTxTransaction+0xa0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1b      	ldr	r2, [pc, #108]	@ (8005248 <SPI_EndRxTxTransaction+0xa4>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	0d5b      	lsrs	r3, r3, #21
 80051e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051f4:	d112      	bne.n	800521c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2200      	movs	r2, #0
 80051fe:	2180      	movs	r1, #128	@ 0x80
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f7ff fee1 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d016      	beq.n	800523a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005210:	f043 0220 	orr.w	r2, r3, #32
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e00f      	b.n	800523c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	3b01      	subs	r3, #1
 8005226:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005232:	2b80      	cmp	r3, #128	@ 0x80
 8005234:	d0f2      	beq.n	800521c <SPI_EndRxTxTransaction+0x78>
 8005236:	e000      	b.n	800523a <SPI_EndRxTxTransaction+0x96>
        break;
 8005238:	bf00      	nop
  }

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000008 	.word	0x20000008
 8005248:	165e9f81 	.word	0x165e9f81

0800524c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e041      	b.n	80052e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f839 	bl	80052ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	4619      	mov	r1, r3
 800528a:	4610      	mov	r0, r2
 800528c:	f000 f9c0 	bl	8005610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	d001      	beq.n	8005318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e04e      	b.n	80053b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a23      	ldr	r2, [pc, #140]	@ (80053c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d022      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x80>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005342:	d01d      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x80>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a1f      	ldr	r2, [pc, #124]	@ (80053c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d018      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x80>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1e      	ldr	r2, [pc, #120]	@ (80053cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x80>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1c      	ldr	r2, [pc, #112]	@ (80053d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00e      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x80>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1b      	ldr	r2, [pc, #108]	@ (80053d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d009      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x80>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a19      	ldr	r2, [pc, #100]	@ (80053d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x80>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a18      	ldr	r2, [pc, #96]	@ (80053dc <HAL_TIM_Base_Start_IT+0xdc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d111      	bne.n	80053a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b06      	cmp	r3, #6
 8005390:	d010      	beq.n	80053b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0201 	orr.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a2:	e007      	b.n	80053b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40010000 	.word	0x40010000
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40000c00 	.word	0x40000c00
 80053d4:	40010400 	.word	0x40010400
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40001800 	.word	0x40001800

080053e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d020      	beq.n	8005444 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01b      	beq.n	8005444 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0202 	mvn.w	r2, #2
 8005414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f8d2 	bl	80055d4 <HAL_TIM_IC_CaptureCallback>
 8005430:	e005      	b.n	800543e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f8c4 	bl	80055c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f8d5 	bl	80055e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 0304 	and.w	r3, r3, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	d020      	beq.n	8005490 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01b      	beq.n	8005490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0204 	mvn.w	r2, #4
 8005460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2202      	movs	r2, #2
 8005466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8ac 	bl	80055d4 <HAL_TIM_IC_CaptureCallback>
 800547c:	e005      	b.n	800548a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f89e 	bl	80055c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f8af 	bl	80055e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d020      	beq.n	80054dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01b      	beq.n	80054dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0208 	mvn.w	r2, #8
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2204      	movs	r2, #4
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f886 	bl	80055d4 <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f878 	bl	80055c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f889 	bl	80055e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d020      	beq.n	8005528 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01b      	beq.n	8005528 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0210 	mvn.w	r2, #16
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2208      	movs	r2, #8
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f860 	bl	80055d4 <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f852 	bl	80055c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f863 	bl	80055e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00c      	beq.n	800554c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d007      	beq.n	800554c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0201 	mvn.w	r2, #1
 8005544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fd fa50 	bl	80029ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00c      	beq.n	8005570 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f906 	bl	800577c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00c      	beq.n	8005594 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800558c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f834 	bl	80055fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00c      	beq.n	80055b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f003 0320 	and.w	r3, r3, #32
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0220 	mvn.w	r2, #32
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f8d8 	bl	8005768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b8:	bf00      	nop
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a46      	ldr	r2, [pc, #280]	@ (800573c <TIM_Base_SetConfig+0x12c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d013      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562e:	d00f      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a43      	ldr	r2, [pc, #268]	@ (8005740 <TIM_Base_SetConfig+0x130>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a42      	ldr	r2, [pc, #264]	@ (8005744 <TIM_Base_SetConfig+0x134>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a41      	ldr	r2, [pc, #260]	@ (8005748 <TIM_Base_SetConfig+0x138>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a40      	ldr	r2, [pc, #256]	@ (800574c <TIM_Base_SetConfig+0x13c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d108      	bne.n	8005662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a35      	ldr	r2, [pc, #212]	@ (800573c <TIM_Base_SetConfig+0x12c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d02b      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005670:	d027      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a32      	ldr	r2, [pc, #200]	@ (8005740 <TIM_Base_SetConfig+0x130>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d023      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a31      	ldr	r2, [pc, #196]	@ (8005744 <TIM_Base_SetConfig+0x134>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d01f      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a30      	ldr	r2, [pc, #192]	@ (8005748 <TIM_Base_SetConfig+0x138>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01b      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2f      	ldr	r2, [pc, #188]	@ (800574c <TIM_Base_SetConfig+0x13c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d017      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2e      	ldr	r2, [pc, #184]	@ (8005750 <TIM_Base_SetConfig+0x140>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2d      	ldr	r2, [pc, #180]	@ (8005754 <TIM_Base_SetConfig+0x144>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00f      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005758 <TIM_Base_SetConfig+0x148>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00b      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2b      	ldr	r2, [pc, #172]	@ (800575c <TIM_Base_SetConfig+0x14c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005760 <TIM_Base_SetConfig+0x150>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a29      	ldr	r2, [pc, #164]	@ (8005764 <TIM_Base_SetConfig+0x154>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d108      	bne.n	80056d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a10      	ldr	r2, [pc, #64]	@ (800573c <TIM_Base_SetConfig+0x12c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_Base_SetConfig+0xf8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a12      	ldr	r2, [pc, #72]	@ (800574c <TIM_Base_SetConfig+0x13c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d103      	bne.n	8005710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	d105      	bne.n	800572e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f023 0201 	bic.w	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	611a      	str	r2, [r3, #16]
  }
}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40010000 	.word	0x40010000
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800
 8005748:	40000c00 	.word	0x40000c00
 800574c:	40010400 	.word	0x40010400
 8005750:	40014000 	.word	0x40014000
 8005754:	40014400 	.word	0x40014400
 8005758:	40014800 	.word	0x40014800
 800575c:	40001800 	.word	0x40001800
 8005760:	40001c00 	.word	0x40001c00
 8005764:	40002000 	.word	0x40002000

08005768 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e042      	b.n	8005828 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fd fa30 	bl	8002c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2224      	movs	r2, #36	@ 0x24
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f973 	bl	8005ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08a      	sub	sp, #40	@ 0x28
 8005834:	af02      	add	r7, sp, #8
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b20      	cmp	r3, #32
 800584e:	d175      	bne.n	800593c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_UART_Transmit+0x2c>
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e06e      	b.n	800593e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2221      	movs	r2, #33	@ 0x21
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800586e:	f7fd fc01 	bl	8003074 <HAL_GetTick>
 8005872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	88fa      	ldrh	r2, [r7, #6]
 8005878:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	88fa      	ldrh	r2, [r7, #6]
 800587e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005888:	d108      	bne.n	800589c <HAL_UART_Transmit+0x6c>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d104      	bne.n	800589c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	e003      	b.n	80058a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058a4:	e02e      	b.n	8005904 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2200      	movs	r2, #0
 80058ae:	2180      	movs	r1, #128	@ 0x80
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f848 	bl	8005946 <UART_WaitOnFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e03a      	b.n	800593e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	3302      	adds	r3, #2
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e007      	b.n	80058f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	781a      	ldrb	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	3301      	adds	r3, #1
 80058f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1cb      	bne.n	80058a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2200      	movs	r2, #0
 8005916:	2140      	movs	r1, #64	@ 0x40
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f814 	bl	8005946 <UART_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e006      	b.n	800593e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	e000      	b.n	800593e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800593c:	2302      	movs	r3, #2
  }
}
 800593e:	4618      	mov	r0, r3
 8005940:	3720      	adds	r7, #32
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b086      	sub	sp, #24
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	4613      	mov	r3, r2
 8005954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005956:	e03b      	b.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595e:	d037      	beq.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005960:	f7fd fb88 	bl	8003074 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	6a3a      	ldr	r2, [r7, #32]
 800596c:	429a      	cmp	r2, r3
 800596e:	d302      	bcc.n	8005976 <UART_WaitOnFlagUntilTimeout+0x30>
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e03a      	b.n	80059f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d023      	beq.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b80      	cmp	r3, #128	@ 0x80
 800598c:	d020      	beq.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b40      	cmp	r3, #64	@ 0x40
 8005992:	d01d      	beq.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d116      	bne.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 f81d 	bl	80059f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2208      	movs	r2, #8
 80059c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e00f      	b.n	80059f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4013      	ands	r3, r2
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	461a      	mov	r2, r3
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d0b4      	beq.n	8005958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b095      	sub	sp, #84	@ 0x54
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	330c      	adds	r3, #12
 8005a06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a20:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e5      	bne.n	8005a00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3314      	adds	r3, #20
 8005a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f023 0301 	bic.w	r3, r3, #1
 8005a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3314      	adds	r3, #20
 8005a52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e5      	bne.n	8005a34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d119      	bne.n	8005aa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f023 0310 	bic.w	r3, r3, #16
 8005a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a90:	61ba      	str	r2, [r7, #24]
 8005a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6979      	ldr	r1, [r7, #20]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e5      	bne.n	8005a70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ab2:	bf00      	nop
 8005ab4:	3754      	adds	r7, #84	@ 0x54
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac4:	b0c0      	sub	sp, #256	@ 0x100
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005adc:	68d9      	ldr	r1, [r3, #12]
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	ea40 0301 	orr.w	r3, r0, r1
 8005ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b18:	f021 010c 	bic.w	r1, r1, #12
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b26:	430b      	orrs	r3, r1
 8005b28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3a:	6999      	ldr	r1, [r3, #24]
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	ea40 0301 	orr.w	r3, r0, r1
 8005b46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b8f      	ldr	r3, [pc, #572]	@ (8005d8c <UART_SetConfig+0x2cc>)
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d005      	beq.n	8005b60 <UART_SetConfig+0xa0>
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8005d90 <UART_SetConfig+0x2d0>)
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d104      	bne.n	8005b6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b60:	f7fe f88e 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8005b64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b68:	e003      	b.n	8005b72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b6a:	f7fe f875 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8005b6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b7c:	f040 810c 	bne.w	8005d98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b92:	4622      	mov	r2, r4
 8005b94:	462b      	mov	r3, r5
 8005b96:	1891      	adds	r1, r2, r2
 8005b98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b9a:	415b      	adcs	r3, r3
 8005b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	eb12 0801 	adds.w	r8, r2, r1
 8005ba8:	4629      	mov	r1, r5
 8005baa:	eb43 0901 	adc.w	r9, r3, r1
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bc2:	4690      	mov	r8, r2
 8005bc4:	4699      	mov	r9, r3
 8005bc6:	4623      	mov	r3, r4
 8005bc8:	eb18 0303 	adds.w	r3, r8, r3
 8005bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	eb49 0303 	adc.w	r3, r9, r3
 8005bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005be6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005bea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bee:	460b      	mov	r3, r1
 8005bf0:	18db      	adds	r3, r3, r3
 8005bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	eb42 0303 	adc.w	r3, r2, r3
 8005bfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c04:	f7fb f840 	bl	8000c88 <__aeabi_uldivmod>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4b61      	ldr	r3, [pc, #388]	@ (8005d94 <UART_SetConfig+0x2d4>)
 8005c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	011c      	lsls	r4, r3, #4
 8005c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c28:	4642      	mov	r2, r8
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	1891      	adds	r1, r2, r2
 8005c2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c30:	415b      	adcs	r3, r3
 8005c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c38:	4641      	mov	r1, r8
 8005c3a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c3e:	4649      	mov	r1, r9
 8005c40:	eb43 0b01 	adc.w	fp, r3, r1
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c58:	4692      	mov	sl, r2
 8005c5a:	469b      	mov	fp, r3
 8005c5c:	4643      	mov	r3, r8
 8005c5e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c66:	464b      	mov	r3, r9
 8005c68:	eb4b 0303 	adc.w	r3, fp, r3
 8005c6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c84:	460b      	mov	r3, r1
 8005c86:	18db      	adds	r3, r3, r3
 8005c88:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	eb42 0303 	adc.w	r3, r2, r3
 8005c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c9a:	f7fa fff5 	bl	8000c88 <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8005d94 <UART_SetConfig+0x2d4>)
 8005ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	2264      	movs	r2, #100	@ 0x64
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	1acb      	subs	r3, r1, r3
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005cba:	4b36      	ldr	r3, [pc, #216]	@ (8005d94 <UART_SetConfig+0x2d4>)
 8005cbc:	fba3 2302 	umull	r2, r3, r3, r2
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cc8:	441c      	add	r4, r3
 8005cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005cdc:	4642      	mov	r2, r8
 8005cde:	464b      	mov	r3, r9
 8005ce0:	1891      	adds	r1, r2, r2
 8005ce2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ce4:	415b      	adcs	r3, r3
 8005ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005cec:	4641      	mov	r1, r8
 8005cee:	1851      	adds	r1, r2, r1
 8005cf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	414b      	adcs	r3, r1
 8005cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d04:	4659      	mov	r1, fp
 8005d06:	00cb      	lsls	r3, r1, #3
 8005d08:	4651      	mov	r1, sl
 8005d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d0e:	4651      	mov	r1, sl
 8005d10:	00ca      	lsls	r2, r1, #3
 8005d12:	4610      	mov	r0, r2
 8005d14:	4619      	mov	r1, r3
 8005d16:	4603      	mov	r3, r0
 8005d18:	4642      	mov	r2, r8
 8005d1a:	189b      	adds	r3, r3, r2
 8005d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d20:	464b      	mov	r3, r9
 8005d22:	460a      	mov	r2, r1
 8005d24:	eb42 0303 	adc.w	r3, r2, r3
 8005d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d40:	460b      	mov	r3, r1
 8005d42:	18db      	adds	r3, r3, r3
 8005d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d46:	4613      	mov	r3, r2
 8005d48:	eb42 0303 	adc.w	r3, r2, r3
 8005d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d56:	f7fa ff97 	bl	8000c88 <__aeabi_uldivmod>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d94 <UART_SetConfig+0x2d4>)
 8005d60:	fba3 1302 	umull	r1, r3, r3, r2
 8005d64:	095b      	lsrs	r3, r3, #5
 8005d66:	2164      	movs	r1, #100	@ 0x64
 8005d68:	fb01 f303 	mul.w	r3, r1, r3
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	3332      	adds	r3, #50	@ 0x32
 8005d72:	4a08      	ldr	r2, [pc, #32]	@ (8005d94 <UART_SetConfig+0x2d4>)
 8005d74:	fba2 2303 	umull	r2, r3, r2, r3
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	f003 0207 	and.w	r2, r3, #7
 8005d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4422      	add	r2, r4
 8005d86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d88:	e106      	b.n	8005f98 <UART_SetConfig+0x4d8>
 8005d8a:	bf00      	nop
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	40011400 	.word	0x40011400
 8005d94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005da2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005da6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005daa:	4642      	mov	r2, r8
 8005dac:	464b      	mov	r3, r9
 8005dae:	1891      	adds	r1, r2, r2
 8005db0:	6239      	str	r1, [r7, #32]
 8005db2:	415b      	adcs	r3, r3
 8005db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dba:	4641      	mov	r1, r8
 8005dbc:	1854      	adds	r4, r2, r1
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	eb43 0501 	adc.w	r5, r3, r1
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	00eb      	lsls	r3, r5, #3
 8005dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dd2:	00e2      	lsls	r2, r4, #3
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	461d      	mov	r5, r3
 8005dd8:	4643      	mov	r3, r8
 8005dda:	18e3      	adds	r3, r4, r3
 8005ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005de0:	464b      	mov	r3, r9
 8005de2:	eb45 0303 	adc.w	r3, r5, r3
 8005de6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005df6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e06:	4629      	mov	r1, r5
 8005e08:	008b      	lsls	r3, r1, #2
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e10:	4621      	mov	r1, r4
 8005e12:	008a      	lsls	r2, r1, #2
 8005e14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e18:	f7fa ff36 	bl	8000c88 <__aeabi_uldivmod>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4b60      	ldr	r3, [pc, #384]	@ (8005fa4 <UART_SetConfig+0x4e4>)
 8005e22:	fba3 2302 	umull	r2, r3, r3, r2
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	011c      	lsls	r4, r3, #4
 8005e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	464b      	mov	r3, r9
 8005e40:	1891      	adds	r1, r2, r2
 8005e42:	61b9      	str	r1, [r7, #24]
 8005e44:	415b      	adcs	r3, r3
 8005e46:	61fb      	str	r3, [r7, #28]
 8005e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e4c:	4641      	mov	r1, r8
 8005e4e:	1851      	adds	r1, r2, r1
 8005e50:	6139      	str	r1, [r7, #16]
 8005e52:	4649      	mov	r1, r9
 8005e54:	414b      	adcs	r3, r1
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e64:	4659      	mov	r1, fp
 8005e66:	00cb      	lsls	r3, r1, #3
 8005e68:	4651      	mov	r1, sl
 8005e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e6e:	4651      	mov	r1, sl
 8005e70:	00ca      	lsls	r2, r1, #3
 8005e72:	4610      	mov	r0, r2
 8005e74:	4619      	mov	r1, r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	4642      	mov	r2, r8
 8005e7a:	189b      	adds	r3, r3, r2
 8005e7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e80:	464b      	mov	r3, r9
 8005e82:	460a      	mov	r2, r1
 8005e84:	eb42 0303 	adc.w	r3, r2, r3
 8005e88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	008b      	lsls	r3, r1, #2
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eae:	4641      	mov	r1, r8
 8005eb0:	008a      	lsls	r2, r1, #2
 8005eb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005eb6:	f7fa fee7 	bl	8000c88 <__aeabi_uldivmod>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	4b38      	ldr	r3, [pc, #224]	@ (8005fa4 <UART_SetConfig+0x4e4>)
 8005ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	2264      	movs	r2, #100	@ 0x64
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	1acb      	subs	r3, r1, r3
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	3332      	adds	r3, #50	@ 0x32
 8005ed4:	4a33      	ldr	r2, [pc, #204]	@ (8005fa4 <UART_SetConfig+0x4e4>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ee0:	441c      	add	r4, r3
 8005ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005eea:	677a      	str	r2, [r7, #116]	@ 0x74
 8005eec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	1891      	adds	r1, r2, r2
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	415b      	adcs	r3, r3
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f00:	4641      	mov	r1, r8
 8005f02:	1851      	adds	r1, r2, r1
 8005f04:	6039      	str	r1, [r7, #0]
 8005f06:	4649      	mov	r1, r9
 8005f08:	414b      	adcs	r3, r1
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f18:	4659      	mov	r1, fp
 8005f1a:	00cb      	lsls	r3, r1, #3
 8005f1c:	4651      	mov	r1, sl
 8005f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f22:	4651      	mov	r1, sl
 8005f24:	00ca      	lsls	r2, r1, #3
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	189b      	adds	r3, r3, r2
 8005f30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f32:	464b      	mov	r3, r9
 8005f34:	460a      	mov	r2, r1
 8005f36:	eb42 0303 	adc.w	r3, r2, r3
 8005f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f46:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f54:	4649      	mov	r1, r9
 8005f56:	008b      	lsls	r3, r1, #2
 8005f58:	4641      	mov	r1, r8
 8005f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f5e:	4641      	mov	r1, r8
 8005f60:	008a      	lsls	r2, r1, #2
 8005f62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f66:	f7fa fe8f 	bl	8000c88 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <UART_SetConfig+0x4e4>)
 8005f70:	fba3 1302 	umull	r1, r3, r3, r2
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	2164      	movs	r1, #100	@ 0x64
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	3332      	adds	r3, #50	@ 0x32
 8005f82:	4a08      	ldr	r2, [pc, #32]	@ (8005fa4 <UART_SetConfig+0x4e4>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	f003 020f 	and.w	r2, r3, #15
 8005f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4422      	add	r2, r4
 8005f96:	609a      	str	r2, [r3, #8]
}
 8005f98:	bf00      	nop
 8005f9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fa4:	51eb851f 	.word	0x51eb851f

08005fa8 <malloc>:
 8005fa8:	4b02      	ldr	r3, [pc, #8]	@ (8005fb4 <malloc+0xc>)
 8005faa:	4601      	mov	r1, r0
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	f000 b82d 	b.w	800600c <_malloc_r>
 8005fb2:	bf00      	nop
 8005fb4:	20000020 	.word	0x20000020

08005fb8 <free>:
 8005fb8:	4b02      	ldr	r3, [pc, #8]	@ (8005fc4 <free+0xc>)
 8005fba:	4601      	mov	r1, r0
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	f001 bd1b 	b.w	80079f8 <_free_r>
 8005fc2:	bf00      	nop
 8005fc4:	20000020 	.word	0x20000020

08005fc8 <sbrk_aligned>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	4e0f      	ldr	r6, [pc, #60]	@ (8006008 <sbrk_aligned+0x40>)
 8005fcc:	460c      	mov	r4, r1
 8005fce:	6831      	ldr	r1, [r6, #0]
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	b911      	cbnz	r1, 8005fda <sbrk_aligned+0x12>
 8005fd4:	f000 fe64 	bl	8006ca0 <_sbrk_r>
 8005fd8:	6030      	str	r0, [r6, #0]
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 fe5f 	bl	8006ca0 <_sbrk_r>
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	d103      	bne.n	8005fee <sbrk_aligned+0x26>
 8005fe6:	f04f 34ff 	mov.w	r4, #4294967295
 8005fea:	4620      	mov	r0, r4
 8005fec:	bd70      	pop	{r4, r5, r6, pc}
 8005fee:	1cc4      	adds	r4, r0, #3
 8005ff0:	f024 0403 	bic.w	r4, r4, #3
 8005ff4:	42a0      	cmp	r0, r4
 8005ff6:	d0f8      	beq.n	8005fea <sbrk_aligned+0x22>
 8005ff8:	1a21      	subs	r1, r4, r0
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 fe50 	bl	8006ca0 <_sbrk_r>
 8006000:	3001      	adds	r0, #1
 8006002:	d1f2      	bne.n	8005fea <sbrk_aligned+0x22>
 8006004:	e7ef      	b.n	8005fe6 <sbrk_aligned+0x1e>
 8006006:	bf00      	nop
 8006008:	20000728 	.word	0x20000728

0800600c <_malloc_r>:
 800600c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006010:	1ccd      	adds	r5, r1, #3
 8006012:	f025 0503 	bic.w	r5, r5, #3
 8006016:	3508      	adds	r5, #8
 8006018:	2d0c      	cmp	r5, #12
 800601a:	bf38      	it	cc
 800601c:	250c      	movcc	r5, #12
 800601e:	2d00      	cmp	r5, #0
 8006020:	4606      	mov	r6, r0
 8006022:	db01      	blt.n	8006028 <_malloc_r+0x1c>
 8006024:	42a9      	cmp	r1, r5
 8006026:	d904      	bls.n	8006032 <_malloc_r+0x26>
 8006028:	230c      	movs	r3, #12
 800602a:	6033      	str	r3, [r6, #0]
 800602c:	2000      	movs	r0, #0
 800602e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006032:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006108 <_malloc_r+0xfc>
 8006036:	f000 f869 	bl	800610c <__malloc_lock>
 800603a:	f8d8 3000 	ldr.w	r3, [r8]
 800603e:	461c      	mov	r4, r3
 8006040:	bb44      	cbnz	r4, 8006094 <_malloc_r+0x88>
 8006042:	4629      	mov	r1, r5
 8006044:	4630      	mov	r0, r6
 8006046:	f7ff ffbf 	bl	8005fc8 <sbrk_aligned>
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	4604      	mov	r4, r0
 800604e:	d158      	bne.n	8006102 <_malloc_r+0xf6>
 8006050:	f8d8 4000 	ldr.w	r4, [r8]
 8006054:	4627      	mov	r7, r4
 8006056:	2f00      	cmp	r7, #0
 8006058:	d143      	bne.n	80060e2 <_malloc_r+0xd6>
 800605a:	2c00      	cmp	r4, #0
 800605c:	d04b      	beq.n	80060f6 <_malloc_r+0xea>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	4639      	mov	r1, r7
 8006062:	4630      	mov	r0, r6
 8006064:	eb04 0903 	add.w	r9, r4, r3
 8006068:	f000 fe1a 	bl	8006ca0 <_sbrk_r>
 800606c:	4581      	cmp	r9, r0
 800606e:	d142      	bne.n	80060f6 <_malloc_r+0xea>
 8006070:	6821      	ldr	r1, [r4, #0]
 8006072:	1a6d      	subs	r5, r5, r1
 8006074:	4629      	mov	r1, r5
 8006076:	4630      	mov	r0, r6
 8006078:	f7ff ffa6 	bl	8005fc8 <sbrk_aligned>
 800607c:	3001      	adds	r0, #1
 800607e:	d03a      	beq.n	80060f6 <_malloc_r+0xea>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	442b      	add	r3, r5
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	f8d8 3000 	ldr.w	r3, [r8]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	bb62      	cbnz	r2, 80060e8 <_malloc_r+0xdc>
 800608e:	f8c8 7000 	str.w	r7, [r8]
 8006092:	e00f      	b.n	80060b4 <_malloc_r+0xa8>
 8006094:	6822      	ldr	r2, [r4, #0]
 8006096:	1b52      	subs	r2, r2, r5
 8006098:	d420      	bmi.n	80060dc <_malloc_r+0xd0>
 800609a:	2a0b      	cmp	r2, #11
 800609c:	d917      	bls.n	80060ce <_malloc_r+0xc2>
 800609e:	1961      	adds	r1, r4, r5
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	6025      	str	r5, [r4, #0]
 80060a4:	bf18      	it	ne
 80060a6:	6059      	strne	r1, [r3, #4]
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	bf08      	it	eq
 80060ac:	f8c8 1000 	streq.w	r1, [r8]
 80060b0:	5162      	str	r2, [r4, r5]
 80060b2:	604b      	str	r3, [r1, #4]
 80060b4:	4630      	mov	r0, r6
 80060b6:	f000 f82f 	bl	8006118 <__malloc_unlock>
 80060ba:	f104 000b 	add.w	r0, r4, #11
 80060be:	1d23      	adds	r3, r4, #4
 80060c0:	f020 0007 	bic.w	r0, r0, #7
 80060c4:	1ac2      	subs	r2, r0, r3
 80060c6:	bf1c      	itt	ne
 80060c8:	1a1b      	subne	r3, r3, r0
 80060ca:	50a3      	strne	r3, [r4, r2]
 80060cc:	e7af      	b.n	800602e <_malloc_r+0x22>
 80060ce:	6862      	ldr	r2, [r4, #4]
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	bf0c      	ite	eq
 80060d4:	f8c8 2000 	streq.w	r2, [r8]
 80060d8:	605a      	strne	r2, [r3, #4]
 80060da:	e7eb      	b.n	80060b4 <_malloc_r+0xa8>
 80060dc:	4623      	mov	r3, r4
 80060de:	6864      	ldr	r4, [r4, #4]
 80060e0:	e7ae      	b.n	8006040 <_malloc_r+0x34>
 80060e2:	463c      	mov	r4, r7
 80060e4:	687f      	ldr	r7, [r7, #4]
 80060e6:	e7b6      	b.n	8006056 <_malloc_r+0x4a>
 80060e8:	461a      	mov	r2, r3
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	d1fb      	bne.n	80060e8 <_malloc_r+0xdc>
 80060f0:	2300      	movs	r3, #0
 80060f2:	6053      	str	r3, [r2, #4]
 80060f4:	e7de      	b.n	80060b4 <_malloc_r+0xa8>
 80060f6:	230c      	movs	r3, #12
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	4630      	mov	r0, r6
 80060fc:	f000 f80c 	bl	8006118 <__malloc_unlock>
 8006100:	e794      	b.n	800602c <_malloc_r+0x20>
 8006102:	6005      	str	r5, [r0, #0]
 8006104:	e7d6      	b.n	80060b4 <_malloc_r+0xa8>
 8006106:	bf00      	nop
 8006108:	2000072c 	.word	0x2000072c

0800610c <__malloc_lock>:
 800610c:	4801      	ldr	r0, [pc, #4]	@ (8006114 <__malloc_lock+0x8>)
 800610e:	f000 be14 	b.w	8006d3a <__retarget_lock_acquire_recursive>
 8006112:	bf00      	nop
 8006114:	20000870 	.word	0x20000870

08006118 <__malloc_unlock>:
 8006118:	4801      	ldr	r0, [pc, #4]	@ (8006120 <__malloc_unlock+0x8>)
 800611a:	f000 be0f 	b.w	8006d3c <__retarget_lock_release_recursive>
 800611e:	bf00      	nop
 8006120:	20000870 	.word	0x20000870

08006124 <__cvt>:
 8006124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006128:	ec57 6b10 	vmov	r6, r7, d0
 800612c:	2f00      	cmp	r7, #0
 800612e:	460c      	mov	r4, r1
 8006130:	4619      	mov	r1, r3
 8006132:	463b      	mov	r3, r7
 8006134:	bfbb      	ittet	lt
 8006136:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800613a:	461f      	movlt	r7, r3
 800613c:	2300      	movge	r3, #0
 800613e:	232d      	movlt	r3, #45	@ 0x2d
 8006140:	700b      	strb	r3, [r1, #0]
 8006142:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006144:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006148:	4691      	mov	r9, r2
 800614a:	f023 0820 	bic.w	r8, r3, #32
 800614e:	bfbc      	itt	lt
 8006150:	4632      	movlt	r2, r6
 8006152:	4616      	movlt	r6, r2
 8006154:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006158:	d005      	beq.n	8006166 <__cvt+0x42>
 800615a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800615e:	d100      	bne.n	8006162 <__cvt+0x3e>
 8006160:	3401      	adds	r4, #1
 8006162:	2102      	movs	r1, #2
 8006164:	e000      	b.n	8006168 <__cvt+0x44>
 8006166:	2103      	movs	r1, #3
 8006168:	ab03      	add	r3, sp, #12
 800616a:	9301      	str	r3, [sp, #4]
 800616c:	ab02      	add	r3, sp, #8
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	ec47 6b10 	vmov	d0, r6, r7
 8006174:	4653      	mov	r3, sl
 8006176:	4622      	mov	r2, r4
 8006178:	f000 fe7a 	bl	8006e70 <_dtoa_r>
 800617c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006180:	4605      	mov	r5, r0
 8006182:	d119      	bne.n	80061b8 <__cvt+0x94>
 8006184:	f019 0f01 	tst.w	r9, #1
 8006188:	d00e      	beq.n	80061a8 <__cvt+0x84>
 800618a:	eb00 0904 	add.w	r9, r0, r4
 800618e:	2200      	movs	r2, #0
 8006190:	2300      	movs	r3, #0
 8006192:	4630      	mov	r0, r6
 8006194:	4639      	mov	r1, r7
 8006196:	f7fa fcb7 	bl	8000b08 <__aeabi_dcmpeq>
 800619a:	b108      	cbz	r0, 80061a0 <__cvt+0x7c>
 800619c:	f8cd 900c 	str.w	r9, [sp, #12]
 80061a0:	2230      	movs	r2, #48	@ 0x30
 80061a2:	9b03      	ldr	r3, [sp, #12]
 80061a4:	454b      	cmp	r3, r9
 80061a6:	d31e      	bcc.n	80061e6 <__cvt+0xc2>
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061ac:	1b5b      	subs	r3, r3, r5
 80061ae:	4628      	mov	r0, r5
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	b004      	add	sp, #16
 80061b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061bc:	eb00 0904 	add.w	r9, r0, r4
 80061c0:	d1e5      	bne.n	800618e <__cvt+0x6a>
 80061c2:	7803      	ldrb	r3, [r0, #0]
 80061c4:	2b30      	cmp	r3, #48	@ 0x30
 80061c6:	d10a      	bne.n	80061de <__cvt+0xba>
 80061c8:	2200      	movs	r2, #0
 80061ca:	2300      	movs	r3, #0
 80061cc:	4630      	mov	r0, r6
 80061ce:	4639      	mov	r1, r7
 80061d0:	f7fa fc9a 	bl	8000b08 <__aeabi_dcmpeq>
 80061d4:	b918      	cbnz	r0, 80061de <__cvt+0xba>
 80061d6:	f1c4 0401 	rsb	r4, r4, #1
 80061da:	f8ca 4000 	str.w	r4, [sl]
 80061de:	f8da 3000 	ldr.w	r3, [sl]
 80061e2:	4499      	add	r9, r3
 80061e4:	e7d3      	b.n	800618e <__cvt+0x6a>
 80061e6:	1c59      	adds	r1, r3, #1
 80061e8:	9103      	str	r1, [sp, #12]
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	e7d9      	b.n	80061a2 <__cvt+0x7e>

080061ee <__exponent>:
 80061ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f0:	2900      	cmp	r1, #0
 80061f2:	bfba      	itte	lt
 80061f4:	4249      	neglt	r1, r1
 80061f6:	232d      	movlt	r3, #45	@ 0x2d
 80061f8:	232b      	movge	r3, #43	@ 0x2b
 80061fa:	2909      	cmp	r1, #9
 80061fc:	7002      	strb	r2, [r0, #0]
 80061fe:	7043      	strb	r3, [r0, #1]
 8006200:	dd29      	ble.n	8006256 <__exponent+0x68>
 8006202:	f10d 0307 	add.w	r3, sp, #7
 8006206:	461d      	mov	r5, r3
 8006208:	270a      	movs	r7, #10
 800620a:	461a      	mov	r2, r3
 800620c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006210:	fb07 1416 	mls	r4, r7, r6, r1
 8006214:	3430      	adds	r4, #48	@ 0x30
 8006216:	f802 4c01 	strb.w	r4, [r2, #-1]
 800621a:	460c      	mov	r4, r1
 800621c:	2c63      	cmp	r4, #99	@ 0x63
 800621e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006222:	4631      	mov	r1, r6
 8006224:	dcf1      	bgt.n	800620a <__exponent+0x1c>
 8006226:	3130      	adds	r1, #48	@ 0x30
 8006228:	1e94      	subs	r4, r2, #2
 800622a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800622e:	1c41      	adds	r1, r0, #1
 8006230:	4623      	mov	r3, r4
 8006232:	42ab      	cmp	r3, r5
 8006234:	d30a      	bcc.n	800624c <__exponent+0x5e>
 8006236:	f10d 0309 	add.w	r3, sp, #9
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	42ac      	cmp	r4, r5
 800623e:	bf88      	it	hi
 8006240:	2300      	movhi	r3, #0
 8006242:	3302      	adds	r3, #2
 8006244:	4403      	add	r3, r0
 8006246:	1a18      	subs	r0, r3, r0
 8006248:	b003      	add	sp, #12
 800624a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800624c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006250:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006254:	e7ed      	b.n	8006232 <__exponent+0x44>
 8006256:	2330      	movs	r3, #48	@ 0x30
 8006258:	3130      	adds	r1, #48	@ 0x30
 800625a:	7083      	strb	r3, [r0, #2]
 800625c:	70c1      	strb	r1, [r0, #3]
 800625e:	1d03      	adds	r3, r0, #4
 8006260:	e7f1      	b.n	8006246 <__exponent+0x58>
	...

08006264 <_printf_float>:
 8006264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	b08d      	sub	sp, #52	@ 0x34
 800626a:	460c      	mov	r4, r1
 800626c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006270:	4616      	mov	r6, r2
 8006272:	461f      	mov	r7, r3
 8006274:	4605      	mov	r5, r0
 8006276:	f000 fcdb 	bl	8006c30 <_localeconv_r>
 800627a:	6803      	ldr	r3, [r0, #0]
 800627c:	9304      	str	r3, [sp, #16]
 800627e:	4618      	mov	r0, r3
 8006280:	f7fa f816 	bl	80002b0 <strlen>
 8006284:	2300      	movs	r3, #0
 8006286:	930a      	str	r3, [sp, #40]	@ 0x28
 8006288:	f8d8 3000 	ldr.w	r3, [r8]
 800628c:	9005      	str	r0, [sp, #20]
 800628e:	3307      	adds	r3, #7
 8006290:	f023 0307 	bic.w	r3, r3, #7
 8006294:	f103 0208 	add.w	r2, r3, #8
 8006298:	f894 a018 	ldrb.w	sl, [r4, #24]
 800629c:	f8d4 b000 	ldr.w	fp, [r4]
 80062a0:	f8c8 2000 	str.w	r2, [r8]
 80062a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80062ac:	9307      	str	r3, [sp, #28]
 80062ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80062b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80062b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062ba:	4b9c      	ldr	r3, [pc, #624]	@ (800652c <_printf_float+0x2c8>)
 80062bc:	f04f 32ff 	mov.w	r2, #4294967295
 80062c0:	f7fa fc54 	bl	8000b6c <__aeabi_dcmpun>
 80062c4:	bb70      	cbnz	r0, 8006324 <_printf_float+0xc0>
 80062c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062ca:	4b98      	ldr	r3, [pc, #608]	@ (800652c <_printf_float+0x2c8>)
 80062cc:	f04f 32ff 	mov.w	r2, #4294967295
 80062d0:	f7fa fc2e 	bl	8000b30 <__aeabi_dcmple>
 80062d4:	bb30      	cbnz	r0, 8006324 <_printf_float+0xc0>
 80062d6:	2200      	movs	r2, #0
 80062d8:	2300      	movs	r3, #0
 80062da:	4640      	mov	r0, r8
 80062dc:	4649      	mov	r1, r9
 80062de:	f7fa fc1d 	bl	8000b1c <__aeabi_dcmplt>
 80062e2:	b110      	cbz	r0, 80062ea <_printf_float+0x86>
 80062e4:	232d      	movs	r3, #45	@ 0x2d
 80062e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062ea:	4a91      	ldr	r2, [pc, #580]	@ (8006530 <_printf_float+0x2cc>)
 80062ec:	4b91      	ldr	r3, [pc, #580]	@ (8006534 <_printf_float+0x2d0>)
 80062ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80062f2:	bf94      	ite	ls
 80062f4:	4690      	movls	r8, r2
 80062f6:	4698      	movhi	r8, r3
 80062f8:	2303      	movs	r3, #3
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	f02b 0304 	bic.w	r3, fp, #4
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	f04f 0900 	mov.w	r9, #0
 8006306:	9700      	str	r7, [sp, #0]
 8006308:	4633      	mov	r3, r6
 800630a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800630c:	4621      	mov	r1, r4
 800630e:	4628      	mov	r0, r5
 8006310:	f000 f9d2 	bl	80066b8 <_printf_common>
 8006314:	3001      	adds	r0, #1
 8006316:	f040 808d 	bne.w	8006434 <_printf_float+0x1d0>
 800631a:	f04f 30ff 	mov.w	r0, #4294967295
 800631e:	b00d      	add	sp, #52	@ 0x34
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	4640      	mov	r0, r8
 800632a:	4649      	mov	r1, r9
 800632c:	f7fa fc1e 	bl	8000b6c <__aeabi_dcmpun>
 8006330:	b140      	cbz	r0, 8006344 <_printf_float+0xe0>
 8006332:	464b      	mov	r3, r9
 8006334:	2b00      	cmp	r3, #0
 8006336:	bfbc      	itt	lt
 8006338:	232d      	movlt	r3, #45	@ 0x2d
 800633a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800633e:	4a7e      	ldr	r2, [pc, #504]	@ (8006538 <_printf_float+0x2d4>)
 8006340:	4b7e      	ldr	r3, [pc, #504]	@ (800653c <_printf_float+0x2d8>)
 8006342:	e7d4      	b.n	80062ee <_printf_float+0x8a>
 8006344:	6863      	ldr	r3, [r4, #4]
 8006346:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800634a:	9206      	str	r2, [sp, #24]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	d13b      	bne.n	80063c8 <_printf_float+0x164>
 8006350:	2306      	movs	r3, #6
 8006352:	6063      	str	r3, [r4, #4]
 8006354:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006358:	2300      	movs	r3, #0
 800635a:	6022      	str	r2, [r4, #0]
 800635c:	9303      	str	r3, [sp, #12]
 800635e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006360:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006364:	ab09      	add	r3, sp, #36	@ 0x24
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	6861      	ldr	r1, [r4, #4]
 800636a:	ec49 8b10 	vmov	d0, r8, r9
 800636e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006372:	4628      	mov	r0, r5
 8006374:	f7ff fed6 	bl	8006124 <__cvt>
 8006378:	9b06      	ldr	r3, [sp, #24]
 800637a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800637c:	2b47      	cmp	r3, #71	@ 0x47
 800637e:	4680      	mov	r8, r0
 8006380:	d129      	bne.n	80063d6 <_printf_float+0x172>
 8006382:	1cc8      	adds	r0, r1, #3
 8006384:	db02      	blt.n	800638c <_printf_float+0x128>
 8006386:	6863      	ldr	r3, [r4, #4]
 8006388:	4299      	cmp	r1, r3
 800638a:	dd41      	ble.n	8006410 <_printf_float+0x1ac>
 800638c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006390:	fa5f fa8a 	uxtb.w	sl, sl
 8006394:	3901      	subs	r1, #1
 8006396:	4652      	mov	r2, sl
 8006398:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800639c:	9109      	str	r1, [sp, #36]	@ 0x24
 800639e:	f7ff ff26 	bl	80061ee <__exponent>
 80063a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063a4:	1813      	adds	r3, r2, r0
 80063a6:	2a01      	cmp	r2, #1
 80063a8:	4681      	mov	r9, r0
 80063aa:	6123      	str	r3, [r4, #16]
 80063ac:	dc02      	bgt.n	80063b4 <_printf_float+0x150>
 80063ae:	6822      	ldr	r2, [r4, #0]
 80063b0:	07d2      	lsls	r2, r2, #31
 80063b2:	d501      	bpl.n	80063b8 <_printf_float+0x154>
 80063b4:	3301      	adds	r3, #1
 80063b6:	6123      	str	r3, [r4, #16]
 80063b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0a2      	beq.n	8006306 <_printf_float+0xa2>
 80063c0:	232d      	movs	r3, #45	@ 0x2d
 80063c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063c6:	e79e      	b.n	8006306 <_printf_float+0xa2>
 80063c8:	9a06      	ldr	r2, [sp, #24]
 80063ca:	2a47      	cmp	r2, #71	@ 0x47
 80063cc:	d1c2      	bne.n	8006354 <_printf_float+0xf0>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1c0      	bne.n	8006354 <_printf_float+0xf0>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e7bd      	b.n	8006352 <_printf_float+0xee>
 80063d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063da:	d9db      	bls.n	8006394 <_printf_float+0x130>
 80063dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80063e0:	d118      	bne.n	8006414 <_printf_float+0x1b0>
 80063e2:	2900      	cmp	r1, #0
 80063e4:	6863      	ldr	r3, [r4, #4]
 80063e6:	dd0b      	ble.n	8006400 <_printf_float+0x19c>
 80063e8:	6121      	str	r1, [r4, #16]
 80063ea:	b913      	cbnz	r3, 80063f2 <_printf_float+0x18e>
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	07d0      	lsls	r0, r2, #31
 80063f0:	d502      	bpl.n	80063f8 <_printf_float+0x194>
 80063f2:	3301      	adds	r3, #1
 80063f4:	440b      	add	r3, r1
 80063f6:	6123      	str	r3, [r4, #16]
 80063f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80063fa:	f04f 0900 	mov.w	r9, #0
 80063fe:	e7db      	b.n	80063b8 <_printf_float+0x154>
 8006400:	b913      	cbnz	r3, 8006408 <_printf_float+0x1a4>
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	07d2      	lsls	r2, r2, #31
 8006406:	d501      	bpl.n	800640c <_printf_float+0x1a8>
 8006408:	3302      	adds	r3, #2
 800640a:	e7f4      	b.n	80063f6 <_printf_float+0x192>
 800640c:	2301      	movs	r3, #1
 800640e:	e7f2      	b.n	80063f6 <_printf_float+0x192>
 8006410:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006416:	4299      	cmp	r1, r3
 8006418:	db05      	blt.n	8006426 <_printf_float+0x1c2>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	6121      	str	r1, [r4, #16]
 800641e:	07d8      	lsls	r0, r3, #31
 8006420:	d5ea      	bpl.n	80063f8 <_printf_float+0x194>
 8006422:	1c4b      	adds	r3, r1, #1
 8006424:	e7e7      	b.n	80063f6 <_printf_float+0x192>
 8006426:	2900      	cmp	r1, #0
 8006428:	bfd4      	ite	le
 800642a:	f1c1 0202 	rsble	r2, r1, #2
 800642e:	2201      	movgt	r2, #1
 8006430:	4413      	add	r3, r2
 8006432:	e7e0      	b.n	80063f6 <_printf_float+0x192>
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	055a      	lsls	r2, r3, #21
 8006438:	d407      	bmi.n	800644a <_printf_float+0x1e6>
 800643a:	6923      	ldr	r3, [r4, #16]
 800643c:	4642      	mov	r2, r8
 800643e:	4631      	mov	r1, r6
 8006440:	4628      	mov	r0, r5
 8006442:	47b8      	blx	r7
 8006444:	3001      	adds	r0, #1
 8006446:	d12b      	bne.n	80064a0 <_printf_float+0x23c>
 8006448:	e767      	b.n	800631a <_printf_float+0xb6>
 800644a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800644e:	f240 80dd 	bls.w	800660c <_printf_float+0x3a8>
 8006452:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006456:	2200      	movs	r2, #0
 8006458:	2300      	movs	r3, #0
 800645a:	f7fa fb55 	bl	8000b08 <__aeabi_dcmpeq>
 800645e:	2800      	cmp	r0, #0
 8006460:	d033      	beq.n	80064ca <_printf_float+0x266>
 8006462:	4a37      	ldr	r2, [pc, #220]	@ (8006540 <_printf_float+0x2dc>)
 8006464:	2301      	movs	r3, #1
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	f43f af54 	beq.w	800631a <_printf_float+0xb6>
 8006472:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006476:	4543      	cmp	r3, r8
 8006478:	db02      	blt.n	8006480 <_printf_float+0x21c>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	07d8      	lsls	r0, r3, #31
 800647e:	d50f      	bpl.n	80064a0 <_printf_float+0x23c>
 8006480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006484:	4631      	mov	r1, r6
 8006486:	4628      	mov	r0, r5
 8006488:	47b8      	blx	r7
 800648a:	3001      	adds	r0, #1
 800648c:	f43f af45 	beq.w	800631a <_printf_float+0xb6>
 8006490:	f04f 0900 	mov.w	r9, #0
 8006494:	f108 38ff 	add.w	r8, r8, #4294967295
 8006498:	f104 0a1a 	add.w	sl, r4, #26
 800649c:	45c8      	cmp	r8, r9
 800649e:	dc09      	bgt.n	80064b4 <_printf_float+0x250>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	079b      	lsls	r3, r3, #30
 80064a4:	f100 8103 	bmi.w	80066ae <_printf_float+0x44a>
 80064a8:	68e0      	ldr	r0, [r4, #12]
 80064aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064ac:	4298      	cmp	r0, r3
 80064ae:	bfb8      	it	lt
 80064b0:	4618      	movlt	r0, r3
 80064b2:	e734      	b.n	800631e <_printf_float+0xba>
 80064b4:	2301      	movs	r3, #1
 80064b6:	4652      	mov	r2, sl
 80064b8:	4631      	mov	r1, r6
 80064ba:	4628      	mov	r0, r5
 80064bc:	47b8      	blx	r7
 80064be:	3001      	adds	r0, #1
 80064c0:	f43f af2b 	beq.w	800631a <_printf_float+0xb6>
 80064c4:	f109 0901 	add.w	r9, r9, #1
 80064c8:	e7e8      	b.n	800649c <_printf_float+0x238>
 80064ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dc39      	bgt.n	8006544 <_printf_float+0x2e0>
 80064d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006540 <_printf_float+0x2dc>)
 80064d2:	2301      	movs	r3, #1
 80064d4:	4631      	mov	r1, r6
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b8      	blx	r7
 80064da:	3001      	adds	r0, #1
 80064dc:	f43f af1d 	beq.w	800631a <_printf_float+0xb6>
 80064e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80064e4:	ea59 0303 	orrs.w	r3, r9, r3
 80064e8:	d102      	bne.n	80064f0 <_printf_float+0x28c>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	07d9      	lsls	r1, r3, #31
 80064ee:	d5d7      	bpl.n	80064a0 <_printf_float+0x23c>
 80064f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064f4:	4631      	mov	r1, r6
 80064f6:	4628      	mov	r0, r5
 80064f8:	47b8      	blx	r7
 80064fa:	3001      	adds	r0, #1
 80064fc:	f43f af0d 	beq.w	800631a <_printf_float+0xb6>
 8006500:	f04f 0a00 	mov.w	sl, #0
 8006504:	f104 0b1a 	add.w	fp, r4, #26
 8006508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800650a:	425b      	negs	r3, r3
 800650c:	4553      	cmp	r3, sl
 800650e:	dc01      	bgt.n	8006514 <_printf_float+0x2b0>
 8006510:	464b      	mov	r3, r9
 8006512:	e793      	b.n	800643c <_printf_float+0x1d8>
 8006514:	2301      	movs	r3, #1
 8006516:	465a      	mov	r2, fp
 8006518:	4631      	mov	r1, r6
 800651a:	4628      	mov	r0, r5
 800651c:	47b8      	blx	r7
 800651e:	3001      	adds	r0, #1
 8006520:	f43f aefb 	beq.w	800631a <_printf_float+0xb6>
 8006524:	f10a 0a01 	add.w	sl, sl, #1
 8006528:	e7ee      	b.n	8006508 <_printf_float+0x2a4>
 800652a:	bf00      	nop
 800652c:	7fefffff 	.word	0x7fefffff
 8006530:	0800922c 	.word	0x0800922c
 8006534:	08009230 	.word	0x08009230
 8006538:	08009234 	.word	0x08009234
 800653c:	08009238 	.word	0x08009238
 8006540:	0800923c 	.word	0x0800923c
 8006544:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006546:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800654a:	4553      	cmp	r3, sl
 800654c:	bfa8      	it	ge
 800654e:	4653      	movge	r3, sl
 8006550:	2b00      	cmp	r3, #0
 8006552:	4699      	mov	r9, r3
 8006554:	dc36      	bgt.n	80065c4 <_printf_float+0x360>
 8006556:	f04f 0b00 	mov.w	fp, #0
 800655a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800655e:	f104 021a 	add.w	r2, r4, #26
 8006562:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006564:	9306      	str	r3, [sp, #24]
 8006566:	eba3 0309 	sub.w	r3, r3, r9
 800656a:	455b      	cmp	r3, fp
 800656c:	dc31      	bgt.n	80065d2 <_printf_float+0x36e>
 800656e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006570:	459a      	cmp	sl, r3
 8006572:	dc3a      	bgt.n	80065ea <_printf_float+0x386>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	07da      	lsls	r2, r3, #31
 8006578:	d437      	bmi.n	80065ea <_printf_float+0x386>
 800657a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800657c:	ebaa 0903 	sub.w	r9, sl, r3
 8006580:	9b06      	ldr	r3, [sp, #24]
 8006582:	ebaa 0303 	sub.w	r3, sl, r3
 8006586:	4599      	cmp	r9, r3
 8006588:	bfa8      	it	ge
 800658a:	4699      	movge	r9, r3
 800658c:	f1b9 0f00 	cmp.w	r9, #0
 8006590:	dc33      	bgt.n	80065fa <_printf_float+0x396>
 8006592:	f04f 0800 	mov.w	r8, #0
 8006596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800659a:	f104 0b1a 	add.w	fp, r4, #26
 800659e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a0:	ebaa 0303 	sub.w	r3, sl, r3
 80065a4:	eba3 0309 	sub.w	r3, r3, r9
 80065a8:	4543      	cmp	r3, r8
 80065aa:	f77f af79 	ble.w	80064a0 <_printf_float+0x23c>
 80065ae:	2301      	movs	r3, #1
 80065b0:	465a      	mov	r2, fp
 80065b2:	4631      	mov	r1, r6
 80065b4:	4628      	mov	r0, r5
 80065b6:	47b8      	blx	r7
 80065b8:	3001      	adds	r0, #1
 80065ba:	f43f aeae 	beq.w	800631a <_printf_float+0xb6>
 80065be:	f108 0801 	add.w	r8, r8, #1
 80065c2:	e7ec      	b.n	800659e <_printf_float+0x33a>
 80065c4:	4642      	mov	r2, r8
 80065c6:	4631      	mov	r1, r6
 80065c8:	4628      	mov	r0, r5
 80065ca:	47b8      	blx	r7
 80065cc:	3001      	adds	r0, #1
 80065ce:	d1c2      	bne.n	8006556 <_printf_float+0x2f2>
 80065d0:	e6a3      	b.n	800631a <_printf_float+0xb6>
 80065d2:	2301      	movs	r3, #1
 80065d4:	4631      	mov	r1, r6
 80065d6:	4628      	mov	r0, r5
 80065d8:	9206      	str	r2, [sp, #24]
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	f43f ae9c 	beq.w	800631a <_printf_float+0xb6>
 80065e2:	9a06      	ldr	r2, [sp, #24]
 80065e4:	f10b 0b01 	add.w	fp, fp, #1
 80065e8:	e7bb      	b.n	8006562 <_printf_float+0x2fe>
 80065ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ee:	4631      	mov	r1, r6
 80065f0:	4628      	mov	r0, r5
 80065f2:	47b8      	blx	r7
 80065f4:	3001      	adds	r0, #1
 80065f6:	d1c0      	bne.n	800657a <_printf_float+0x316>
 80065f8:	e68f      	b.n	800631a <_printf_float+0xb6>
 80065fa:	9a06      	ldr	r2, [sp, #24]
 80065fc:	464b      	mov	r3, r9
 80065fe:	4442      	add	r2, r8
 8006600:	4631      	mov	r1, r6
 8006602:	4628      	mov	r0, r5
 8006604:	47b8      	blx	r7
 8006606:	3001      	adds	r0, #1
 8006608:	d1c3      	bne.n	8006592 <_printf_float+0x32e>
 800660a:	e686      	b.n	800631a <_printf_float+0xb6>
 800660c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006610:	f1ba 0f01 	cmp.w	sl, #1
 8006614:	dc01      	bgt.n	800661a <_printf_float+0x3b6>
 8006616:	07db      	lsls	r3, r3, #31
 8006618:	d536      	bpl.n	8006688 <_printf_float+0x424>
 800661a:	2301      	movs	r3, #1
 800661c:	4642      	mov	r2, r8
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	f43f ae78 	beq.w	800631a <_printf_float+0xb6>
 800662a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800662e:	4631      	mov	r1, r6
 8006630:	4628      	mov	r0, r5
 8006632:	47b8      	blx	r7
 8006634:	3001      	adds	r0, #1
 8006636:	f43f ae70 	beq.w	800631a <_printf_float+0xb6>
 800663a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800663e:	2200      	movs	r2, #0
 8006640:	2300      	movs	r3, #0
 8006642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006646:	f7fa fa5f 	bl	8000b08 <__aeabi_dcmpeq>
 800664a:	b9c0      	cbnz	r0, 800667e <_printf_float+0x41a>
 800664c:	4653      	mov	r3, sl
 800664e:	f108 0201 	add.w	r2, r8, #1
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	d10c      	bne.n	8006676 <_printf_float+0x412>
 800665c:	e65d      	b.n	800631a <_printf_float+0xb6>
 800665e:	2301      	movs	r3, #1
 8006660:	465a      	mov	r2, fp
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	f43f ae56 	beq.w	800631a <_printf_float+0xb6>
 800666e:	f108 0801 	add.w	r8, r8, #1
 8006672:	45d0      	cmp	r8, sl
 8006674:	dbf3      	blt.n	800665e <_printf_float+0x3fa>
 8006676:	464b      	mov	r3, r9
 8006678:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800667c:	e6df      	b.n	800643e <_printf_float+0x1da>
 800667e:	f04f 0800 	mov.w	r8, #0
 8006682:	f104 0b1a 	add.w	fp, r4, #26
 8006686:	e7f4      	b.n	8006672 <_printf_float+0x40e>
 8006688:	2301      	movs	r3, #1
 800668a:	4642      	mov	r2, r8
 800668c:	e7e1      	b.n	8006652 <_printf_float+0x3ee>
 800668e:	2301      	movs	r3, #1
 8006690:	464a      	mov	r2, r9
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	f43f ae3e 	beq.w	800631a <_printf_float+0xb6>
 800669e:	f108 0801 	add.w	r8, r8, #1
 80066a2:	68e3      	ldr	r3, [r4, #12]
 80066a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066a6:	1a5b      	subs	r3, r3, r1
 80066a8:	4543      	cmp	r3, r8
 80066aa:	dcf0      	bgt.n	800668e <_printf_float+0x42a>
 80066ac:	e6fc      	b.n	80064a8 <_printf_float+0x244>
 80066ae:	f04f 0800 	mov.w	r8, #0
 80066b2:	f104 0919 	add.w	r9, r4, #25
 80066b6:	e7f4      	b.n	80066a2 <_printf_float+0x43e>

080066b8 <_printf_common>:
 80066b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	4616      	mov	r6, r2
 80066be:	4698      	mov	r8, r3
 80066c0:	688a      	ldr	r2, [r1, #8]
 80066c2:	690b      	ldr	r3, [r1, #16]
 80066c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066c8:	4293      	cmp	r3, r2
 80066ca:	bfb8      	it	lt
 80066cc:	4613      	movlt	r3, r2
 80066ce:	6033      	str	r3, [r6, #0]
 80066d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066d4:	4607      	mov	r7, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	b10a      	cbz	r2, 80066de <_printf_common+0x26>
 80066da:	3301      	adds	r3, #1
 80066dc:	6033      	str	r3, [r6, #0]
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	0699      	lsls	r1, r3, #26
 80066e2:	bf42      	ittt	mi
 80066e4:	6833      	ldrmi	r3, [r6, #0]
 80066e6:	3302      	addmi	r3, #2
 80066e8:	6033      	strmi	r3, [r6, #0]
 80066ea:	6825      	ldr	r5, [r4, #0]
 80066ec:	f015 0506 	ands.w	r5, r5, #6
 80066f0:	d106      	bne.n	8006700 <_printf_common+0x48>
 80066f2:	f104 0a19 	add.w	sl, r4, #25
 80066f6:	68e3      	ldr	r3, [r4, #12]
 80066f8:	6832      	ldr	r2, [r6, #0]
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	42ab      	cmp	r3, r5
 80066fe:	dc26      	bgt.n	800674e <_printf_common+0x96>
 8006700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006704:	6822      	ldr	r2, [r4, #0]
 8006706:	3b00      	subs	r3, #0
 8006708:	bf18      	it	ne
 800670a:	2301      	movne	r3, #1
 800670c:	0692      	lsls	r2, r2, #26
 800670e:	d42b      	bmi.n	8006768 <_printf_common+0xb0>
 8006710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006714:	4641      	mov	r1, r8
 8006716:	4638      	mov	r0, r7
 8006718:	47c8      	blx	r9
 800671a:	3001      	adds	r0, #1
 800671c:	d01e      	beq.n	800675c <_printf_common+0xa4>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	6922      	ldr	r2, [r4, #16]
 8006722:	f003 0306 	and.w	r3, r3, #6
 8006726:	2b04      	cmp	r3, #4
 8006728:	bf02      	ittt	eq
 800672a:	68e5      	ldreq	r5, [r4, #12]
 800672c:	6833      	ldreq	r3, [r6, #0]
 800672e:	1aed      	subeq	r5, r5, r3
 8006730:	68a3      	ldr	r3, [r4, #8]
 8006732:	bf0c      	ite	eq
 8006734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006738:	2500      	movne	r5, #0
 800673a:	4293      	cmp	r3, r2
 800673c:	bfc4      	itt	gt
 800673e:	1a9b      	subgt	r3, r3, r2
 8006740:	18ed      	addgt	r5, r5, r3
 8006742:	2600      	movs	r6, #0
 8006744:	341a      	adds	r4, #26
 8006746:	42b5      	cmp	r5, r6
 8006748:	d11a      	bne.n	8006780 <_printf_common+0xc8>
 800674a:	2000      	movs	r0, #0
 800674c:	e008      	b.n	8006760 <_printf_common+0xa8>
 800674e:	2301      	movs	r3, #1
 8006750:	4652      	mov	r2, sl
 8006752:	4641      	mov	r1, r8
 8006754:	4638      	mov	r0, r7
 8006756:	47c8      	blx	r9
 8006758:	3001      	adds	r0, #1
 800675a:	d103      	bne.n	8006764 <_printf_common+0xac>
 800675c:	f04f 30ff 	mov.w	r0, #4294967295
 8006760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006764:	3501      	adds	r5, #1
 8006766:	e7c6      	b.n	80066f6 <_printf_common+0x3e>
 8006768:	18e1      	adds	r1, r4, r3
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	2030      	movs	r0, #48	@ 0x30
 800676e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006772:	4422      	add	r2, r4
 8006774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800677c:	3302      	adds	r3, #2
 800677e:	e7c7      	b.n	8006710 <_printf_common+0x58>
 8006780:	2301      	movs	r3, #1
 8006782:	4622      	mov	r2, r4
 8006784:	4641      	mov	r1, r8
 8006786:	4638      	mov	r0, r7
 8006788:	47c8      	blx	r9
 800678a:	3001      	adds	r0, #1
 800678c:	d0e6      	beq.n	800675c <_printf_common+0xa4>
 800678e:	3601      	adds	r6, #1
 8006790:	e7d9      	b.n	8006746 <_printf_common+0x8e>
	...

08006794 <_printf_i>:
 8006794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006798:	7e0f      	ldrb	r7, [r1, #24]
 800679a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800679c:	2f78      	cmp	r7, #120	@ 0x78
 800679e:	4691      	mov	r9, r2
 80067a0:	4680      	mov	r8, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	469a      	mov	sl, r3
 80067a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067aa:	d807      	bhi.n	80067bc <_printf_i+0x28>
 80067ac:	2f62      	cmp	r7, #98	@ 0x62
 80067ae:	d80a      	bhi.n	80067c6 <_printf_i+0x32>
 80067b0:	2f00      	cmp	r7, #0
 80067b2:	f000 80d2 	beq.w	800695a <_printf_i+0x1c6>
 80067b6:	2f58      	cmp	r7, #88	@ 0x58
 80067b8:	f000 80b9 	beq.w	800692e <_printf_i+0x19a>
 80067bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067c4:	e03a      	b.n	800683c <_printf_i+0xa8>
 80067c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067ca:	2b15      	cmp	r3, #21
 80067cc:	d8f6      	bhi.n	80067bc <_printf_i+0x28>
 80067ce:	a101      	add	r1, pc, #4	@ (adr r1, 80067d4 <_printf_i+0x40>)
 80067d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067d4:	0800682d 	.word	0x0800682d
 80067d8:	08006841 	.word	0x08006841
 80067dc:	080067bd 	.word	0x080067bd
 80067e0:	080067bd 	.word	0x080067bd
 80067e4:	080067bd 	.word	0x080067bd
 80067e8:	080067bd 	.word	0x080067bd
 80067ec:	08006841 	.word	0x08006841
 80067f0:	080067bd 	.word	0x080067bd
 80067f4:	080067bd 	.word	0x080067bd
 80067f8:	080067bd 	.word	0x080067bd
 80067fc:	080067bd 	.word	0x080067bd
 8006800:	08006941 	.word	0x08006941
 8006804:	0800686b 	.word	0x0800686b
 8006808:	080068fb 	.word	0x080068fb
 800680c:	080067bd 	.word	0x080067bd
 8006810:	080067bd 	.word	0x080067bd
 8006814:	08006963 	.word	0x08006963
 8006818:	080067bd 	.word	0x080067bd
 800681c:	0800686b 	.word	0x0800686b
 8006820:	080067bd 	.word	0x080067bd
 8006824:	080067bd 	.word	0x080067bd
 8006828:	08006903 	.word	0x08006903
 800682c:	6833      	ldr	r3, [r6, #0]
 800682e:	1d1a      	adds	r2, r3, #4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6032      	str	r2, [r6, #0]
 8006834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800683c:	2301      	movs	r3, #1
 800683e:	e09d      	b.n	800697c <_printf_i+0x1e8>
 8006840:	6833      	ldr	r3, [r6, #0]
 8006842:	6820      	ldr	r0, [r4, #0]
 8006844:	1d19      	adds	r1, r3, #4
 8006846:	6031      	str	r1, [r6, #0]
 8006848:	0606      	lsls	r6, r0, #24
 800684a:	d501      	bpl.n	8006850 <_printf_i+0xbc>
 800684c:	681d      	ldr	r5, [r3, #0]
 800684e:	e003      	b.n	8006858 <_printf_i+0xc4>
 8006850:	0645      	lsls	r5, r0, #25
 8006852:	d5fb      	bpl.n	800684c <_printf_i+0xb8>
 8006854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006858:	2d00      	cmp	r5, #0
 800685a:	da03      	bge.n	8006864 <_printf_i+0xd0>
 800685c:	232d      	movs	r3, #45	@ 0x2d
 800685e:	426d      	negs	r5, r5
 8006860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006864:	4859      	ldr	r0, [pc, #356]	@ (80069cc <_printf_i+0x238>)
 8006866:	230a      	movs	r3, #10
 8006868:	e011      	b.n	800688e <_printf_i+0xfa>
 800686a:	6821      	ldr	r1, [r4, #0]
 800686c:	6833      	ldr	r3, [r6, #0]
 800686e:	0608      	lsls	r0, r1, #24
 8006870:	f853 5b04 	ldr.w	r5, [r3], #4
 8006874:	d402      	bmi.n	800687c <_printf_i+0xe8>
 8006876:	0649      	lsls	r1, r1, #25
 8006878:	bf48      	it	mi
 800687a:	b2ad      	uxthmi	r5, r5
 800687c:	2f6f      	cmp	r7, #111	@ 0x6f
 800687e:	4853      	ldr	r0, [pc, #332]	@ (80069cc <_printf_i+0x238>)
 8006880:	6033      	str	r3, [r6, #0]
 8006882:	bf14      	ite	ne
 8006884:	230a      	movne	r3, #10
 8006886:	2308      	moveq	r3, #8
 8006888:	2100      	movs	r1, #0
 800688a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800688e:	6866      	ldr	r6, [r4, #4]
 8006890:	60a6      	str	r6, [r4, #8]
 8006892:	2e00      	cmp	r6, #0
 8006894:	bfa2      	ittt	ge
 8006896:	6821      	ldrge	r1, [r4, #0]
 8006898:	f021 0104 	bicge.w	r1, r1, #4
 800689c:	6021      	strge	r1, [r4, #0]
 800689e:	b90d      	cbnz	r5, 80068a4 <_printf_i+0x110>
 80068a0:	2e00      	cmp	r6, #0
 80068a2:	d04b      	beq.n	800693c <_printf_i+0x1a8>
 80068a4:	4616      	mov	r6, r2
 80068a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80068aa:	fb03 5711 	mls	r7, r3, r1, r5
 80068ae:	5dc7      	ldrb	r7, [r0, r7]
 80068b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068b4:	462f      	mov	r7, r5
 80068b6:	42bb      	cmp	r3, r7
 80068b8:	460d      	mov	r5, r1
 80068ba:	d9f4      	bls.n	80068a6 <_printf_i+0x112>
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d10b      	bne.n	80068d8 <_printf_i+0x144>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	07df      	lsls	r7, r3, #31
 80068c4:	d508      	bpl.n	80068d8 <_printf_i+0x144>
 80068c6:	6923      	ldr	r3, [r4, #16]
 80068c8:	6861      	ldr	r1, [r4, #4]
 80068ca:	4299      	cmp	r1, r3
 80068cc:	bfde      	ittt	le
 80068ce:	2330      	movle	r3, #48	@ 0x30
 80068d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068d8:	1b92      	subs	r2, r2, r6
 80068da:	6122      	str	r2, [r4, #16]
 80068dc:	f8cd a000 	str.w	sl, [sp]
 80068e0:	464b      	mov	r3, r9
 80068e2:	aa03      	add	r2, sp, #12
 80068e4:	4621      	mov	r1, r4
 80068e6:	4640      	mov	r0, r8
 80068e8:	f7ff fee6 	bl	80066b8 <_printf_common>
 80068ec:	3001      	adds	r0, #1
 80068ee:	d14a      	bne.n	8006986 <_printf_i+0x1f2>
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	b004      	add	sp, #16
 80068f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	f043 0320 	orr.w	r3, r3, #32
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	4833      	ldr	r0, [pc, #204]	@ (80069d0 <_printf_i+0x23c>)
 8006904:	2778      	movs	r7, #120	@ 0x78
 8006906:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	6831      	ldr	r1, [r6, #0]
 800690e:	061f      	lsls	r7, r3, #24
 8006910:	f851 5b04 	ldr.w	r5, [r1], #4
 8006914:	d402      	bmi.n	800691c <_printf_i+0x188>
 8006916:	065f      	lsls	r7, r3, #25
 8006918:	bf48      	it	mi
 800691a:	b2ad      	uxthmi	r5, r5
 800691c:	6031      	str	r1, [r6, #0]
 800691e:	07d9      	lsls	r1, r3, #31
 8006920:	bf44      	itt	mi
 8006922:	f043 0320 	orrmi.w	r3, r3, #32
 8006926:	6023      	strmi	r3, [r4, #0]
 8006928:	b11d      	cbz	r5, 8006932 <_printf_i+0x19e>
 800692a:	2310      	movs	r3, #16
 800692c:	e7ac      	b.n	8006888 <_printf_i+0xf4>
 800692e:	4827      	ldr	r0, [pc, #156]	@ (80069cc <_printf_i+0x238>)
 8006930:	e7e9      	b.n	8006906 <_printf_i+0x172>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	f023 0320 	bic.w	r3, r3, #32
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	e7f6      	b.n	800692a <_printf_i+0x196>
 800693c:	4616      	mov	r6, r2
 800693e:	e7bd      	b.n	80068bc <_printf_i+0x128>
 8006940:	6833      	ldr	r3, [r6, #0]
 8006942:	6825      	ldr	r5, [r4, #0]
 8006944:	6961      	ldr	r1, [r4, #20]
 8006946:	1d18      	adds	r0, r3, #4
 8006948:	6030      	str	r0, [r6, #0]
 800694a:	062e      	lsls	r6, r5, #24
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	d501      	bpl.n	8006954 <_printf_i+0x1c0>
 8006950:	6019      	str	r1, [r3, #0]
 8006952:	e002      	b.n	800695a <_printf_i+0x1c6>
 8006954:	0668      	lsls	r0, r5, #25
 8006956:	d5fb      	bpl.n	8006950 <_printf_i+0x1bc>
 8006958:	8019      	strh	r1, [r3, #0]
 800695a:	2300      	movs	r3, #0
 800695c:	6123      	str	r3, [r4, #16]
 800695e:	4616      	mov	r6, r2
 8006960:	e7bc      	b.n	80068dc <_printf_i+0x148>
 8006962:	6833      	ldr	r3, [r6, #0]
 8006964:	1d1a      	adds	r2, r3, #4
 8006966:	6032      	str	r2, [r6, #0]
 8006968:	681e      	ldr	r6, [r3, #0]
 800696a:	6862      	ldr	r2, [r4, #4]
 800696c:	2100      	movs	r1, #0
 800696e:	4630      	mov	r0, r6
 8006970:	f7f9 fc4e 	bl	8000210 <memchr>
 8006974:	b108      	cbz	r0, 800697a <_printf_i+0x1e6>
 8006976:	1b80      	subs	r0, r0, r6
 8006978:	6060      	str	r0, [r4, #4]
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	6123      	str	r3, [r4, #16]
 800697e:	2300      	movs	r3, #0
 8006980:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006984:	e7aa      	b.n	80068dc <_printf_i+0x148>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	4632      	mov	r2, r6
 800698a:	4649      	mov	r1, r9
 800698c:	4640      	mov	r0, r8
 800698e:	47d0      	blx	sl
 8006990:	3001      	adds	r0, #1
 8006992:	d0ad      	beq.n	80068f0 <_printf_i+0x15c>
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	079b      	lsls	r3, r3, #30
 8006998:	d413      	bmi.n	80069c2 <_printf_i+0x22e>
 800699a:	68e0      	ldr	r0, [r4, #12]
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	4298      	cmp	r0, r3
 80069a0:	bfb8      	it	lt
 80069a2:	4618      	movlt	r0, r3
 80069a4:	e7a6      	b.n	80068f4 <_printf_i+0x160>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4632      	mov	r2, r6
 80069aa:	4649      	mov	r1, r9
 80069ac:	4640      	mov	r0, r8
 80069ae:	47d0      	blx	sl
 80069b0:	3001      	adds	r0, #1
 80069b2:	d09d      	beq.n	80068f0 <_printf_i+0x15c>
 80069b4:	3501      	adds	r5, #1
 80069b6:	68e3      	ldr	r3, [r4, #12]
 80069b8:	9903      	ldr	r1, [sp, #12]
 80069ba:	1a5b      	subs	r3, r3, r1
 80069bc:	42ab      	cmp	r3, r5
 80069be:	dcf2      	bgt.n	80069a6 <_printf_i+0x212>
 80069c0:	e7eb      	b.n	800699a <_printf_i+0x206>
 80069c2:	2500      	movs	r5, #0
 80069c4:	f104 0619 	add.w	r6, r4, #25
 80069c8:	e7f5      	b.n	80069b6 <_printf_i+0x222>
 80069ca:	bf00      	nop
 80069cc:	0800923e 	.word	0x0800923e
 80069d0:	0800924f 	.word	0x0800924f

080069d4 <std>:
 80069d4:	2300      	movs	r3, #0
 80069d6:	b510      	push	{r4, lr}
 80069d8:	4604      	mov	r4, r0
 80069da:	e9c0 3300 	strd	r3, r3, [r0]
 80069de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069e2:	6083      	str	r3, [r0, #8]
 80069e4:	8181      	strh	r1, [r0, #12]
 80069e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80069e8:	81c2      	strh	r2, [r0, #14]
 80069ea:	6183      	str	r3, [r0, #24]
 80069ec:	4619      	mov	r1, r3
 80069ee:	2208      	movs	r2, #8
 80069f0:	305c      	adds	r0, #92	@ 0x5c
 80069f2:	f000 f914 	bl	8006c1e <memset>
 80069f6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a2c <std+0x58>)
 80069f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80069fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006a30 <std+0x5c>)
 80069fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006a34 <std+0x60>)
 8006a00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a02:	4b0d      	ldr	r3, [pc, #52]	@ (8006a38 <std+0x64>)
 8006a04:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a06:	4b0d      	ldr	r3, [pc, #52]	@ (8006a3c <std+0x68>)
 8006a08:	6224      	str	r4, [r4, #32]
 8006a0a:	429c      	cmp	r4, r3
 8006a0c:	d006      	beq.n	8006a1c <std+0x48>
 8006a0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a12:	4294      	cmp	r4, r2
 8006a14:	d002      	beq.n	8006a1c <std+0x48>
 8006a16:	33d0      	adds	r3, #208	@ 0xd0
 8006a18:	429c      	cmp	r4, r3
 8006a1a:	d105      	bne.n	8006a28 <std+0x54>
 8006a1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a24:	f000 b988 	b.w	8006d38 <__retarget_lock_init_recursive>
 8006a28:	bd10      	pop	{r4, pc}
 8006a2a:	bf00      	nop
 8006a2c:	08006b99 	.word	0x08006b99
 8006a30:	08006bbb 	.word	0x08006bbb
 8006a34:	08006bf3 	.word	0x08006bf3
 8006a38:	08006c17 	.word	0x08006c17
 8006a3c:	20000730 	.word	0x20000730

08006a40 <stdio_exit_handler>:
 8006a40:	4a02      	ldr	r2, [pc, #8]	@ (8006a4c <stdio_exit_handler+0xc>)
 8006a42:	4903      	ldr	r1, [pc, #12]	@ (8006a50 <stdio_exit_handler+0x10>)
 8006a44:	4803      	ldr	r0, [pc, #12]	@ (8006a54 <stdio_exit_handler+0x14>)
 8006a46:	f000 b869 	b.w	8006b1c <_fwalk_sglue>
 8006a4a:	bf00      	nop
 8006a4c:	20000014 	.word	0x20000014
 8006a50:	08008549 	.word	0x08008549
 8006a54:	20000024 	.word	0x20000024

08006a58 <cleanup_stdio>:
 8006a58:	6841      	ldr	r1, [r0, #4]
 8006a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a8c <cleanup_stdio+0x34>)
 8006a5c:	4299      	cmp	r1, r3
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	4604      	mov	r4, r0
 8006a62:	d001      	beq.n	8006a68 <cleanup_stdio+0x10>
 8006a64:	f001 fd70 	bl	8008548 <_fflush_r>
 8006a68:	68a1      	ldr	r1, [r4, #8]
 8006a6a:	4b09      	ldr	r3, [pc, #36]	@ (8006a90 <cleanup_stdio+0x38>)
 8006a6c:	4299      	cmp	r1, r3
 8006a6e:	d002      	beq.n	8006a76 <cleanup_stdio+0x1e>
 8006a70:	4620      	mov	r0, r4
 8006a72:	f001 fd69 	bl	8008548 <_fflush_r>
 8006a76:	68e1      	ldr	r1, [r4, #12]
 8006a78:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <cleanup_stdio+0x3c>)
 8006a7a:	4299      	cmp	r1, r3
 8006a7c:	d004      	beq.n	8006a88 <cleanup_stdio+0x30>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a84:	f001 bd60 	b.w	8008548 <_fflush_r>
 8006a88:	bd10      	pop	{r4, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000730 	.word	0x20000730
 8006a90:	20000798 	.word	0x20000798
 8006a94:	20000800 	.word	0x20000800

08006a98 <global_stdio_init.part.0>:
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac8 <global_stdio_init.part.0+0x30>)
 8006a9c:	4c0b      	ldr	r4, [pc, #44]	@ (8006acc <global_stdio_init.part.0+0x34>)
 8006a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad0 <global_stdio_init.part.0+0x38>)
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2104      	movs	r1, #4
 8006aa8:	f7ff ff94 	bl	80069d4 <std>
 8006aac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	2109      	movs	r1, #9
 8006ab4:	f7ff ff8e 	bl	80069d4 <std>
 8006ab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006abc:	2202      	movs	r2, #2
 8006abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac2:	2112      	movs	r1, #18
 8006ac4:	f7ff bf86 	b.w	80069d4 <std>
 8006ac8:	20000868 	.word	0x20000868
 8006acc:	20000730 	.word	0x20000730
 8006ad0:	08006a41 	.word	0x08006a41

08006ad4 <__sfp_lock_acquire>:
 8006ad4:	4801      	ldr	r0, [pc, #4]	@ (8006adc <__sfp_lock_acquire+0x8>)
 8006ad6:	f000 b930 	b.w	8006d3a <__retarget_lock_acquire_recursive>
 8006ada:	bf00      	nop
 8006adc:	20000871 	.word	0x20000871

08006ae0 <__sfp_lock_release>:
 8006ae0:	4801      	ldr	r0, [pc, #4]	@ (8006ae8 <__sfp_lock_release+0x8>)
 8006ae2:	f000 b92b 	b.w	8006d3c <__retarget_lock_release_recursive>
 8006ae6:	bf00      	nop
 8006ae8:	20000871 	.word	0x20000871

08006aec <__sinit>:
 8006aec:	b510      	push	{r4, lr}
 8006aee:	4604      	mov	r4, r0
 8006af0:	f7ff fff0 	bl	8006ad4 <__sfp_lock_acquire>
 8006af4:	6a23      	ldr	r3, [r4, #32]
 8006af6:	b11b      	cbz	r3, 8006b00 <__sinit+0x14>
 8006af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006afc:	f7ff bff0 	b.w	8006ae0 <__sfp_lock_release>
 8006b00:	4b04      	ldr	r3, [pc, #16]	@ (8006b14 <__sinit+0x28>)
 8006b02:	6223      	str	r3, [r4, #32]
 8006b04:	4b04      	ldr	r3, [pc, #16]	@ (8006b18 <__sinit+0x2c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f5      	bne.n	8006af8 <__sinit+0xc>
 8006b0c:	f7ff ffc4 	bl	8006a98 <global_stdio_init.part.0>
 8006b10:	e7f2      	b.n	8006af8 <__sinit+0xc>
 8006b12:	bf00      	nop
 8006b14:	08006a59 	.word	0x08006a59
 8006b18:	20000868 	.word	0x20000868

08006b1c <_fwalk_sglue>:
 8006b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b20:	4607      	mov	r7, r0
 8006b22:	4688      	mov	r8, r1
 8006b24:	4614      	mov	r4, r2
 8006b26:	2600      	movs	r6, #0
 8006b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b30:	d505      	bpl.n	8006b3e <_fwalk_sglue+0x22>
 8006b32:	6824      	ldr	r4, [r4, #0]
 8006b34:	2c00      	cmp	r4, #0
 8006b36:	d1f7      	bne.n	8006b28 <_fwalk_sglue+0xc>
 8006b38:	4630      	mov	r0, r6
 8006b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3e:	89ab      	ldrh	r3, [r5, #12]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d907      	bls.n	8006b54 <_fwalk_sglue+0x38>
 8006b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	d003      	beq.n	8006b54 <_fwalk_sglue+0x38>
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	4638      	mov	r0, r7
 8006b50:	47c0      	blx	r8
 8006b52:	4306      	orrs	r6, r0
 8006b54:	3568      	adds	r5, #104	@ 0x68
 8006b56:	e7e9      	b.n	8006b2c <_fwalk_sglue+0x10>

08006b58 <siprintf>:
 8006b58:	b40e      	push	{r1, r2, r3}
 8006b5a:	b500      	push	{lr}
 8006b5c:	b09c      	sub	sp, #112	@ 0x70
 8006b5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b60:	9002      	str	r0, [sp, #8]
 8006b62:	9006      	str	r0, [sp, #24]
 8006b64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b68:	4809      	ldr	r0, [pc, #36]	@ (8006b90 <siprintf+0x38>)
 8006b6a:	9107      	str	r1, [sp, #28]
 8006b6c:	9104      	str	r1, [sp, #16]
 8006b6e:	4909      	ldr	r1, [pc, #36]	@ (8006b94 <siprintf+0x3c>)
 8006b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b74:	9105      	str	r1, [sp, #20]
 8006b76:	6800      	ldr	r0, [r0, #0]
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	a902      	add	r1, sp, #8
 8006b7c:	f001 fb64 	bl	8008248 <_svfiprintf_r>
 8006b80:	9b02      	ldr	r3, [sp, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	b01c      	add	sp, #112	@ 0x70
 8006b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b8c:	b003      	add	sp, #12
 8006b8e:	4770      	bx	lr
 8006b90:	20000020 	.word	0x20000020
 8006b94:	ffff0208 	.word	0xffff0208

08006b98 <__sread>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba0:	f000 f86c 	bl	8006c7c <_read_r>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	bfab      	itete	ge
 8006ba8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006baa:	89a3      	ldrhlt	r3, [r4, #12]
 8006bac:	181b      	addge	r3, r3, r0
 8006bae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bb2:	bfac      	ite	ge
 8006bb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bb6:	81a3      	strhlt	r3, [r4, #12]
 8006bb8:	bd10      	pop	{r4, pc}

08006bba <__swrite>:
 8006bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbe:	461f      	mov	r7, r3
 8006bc0:	898b      	ldrh	r3, [r1, #12]
 8006bc2:	05db      	lsls	r3, r3, #23
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	4616      	mov	r6, r2
 8006bca:	d505      	bpl.n	8006bd8 <__swrite+0x1e>
 8006bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f000 f840 	bl	8006c58 <_lseek_r>
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006be2:	81a3      	strh	r3, [r4, #12]
 8006be4:	4632      	mov	r2, r6
 8006be6:	463b      	mov	r3, r7
 8006be8:	4628      	mov	r0, r5
 8006bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bee:	f000 b867 	b.w	8006cc0 <_write_r>

08006bf2 <__sseek>:
 8006bf2:	b510      	push	{r4, lr}
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfa:	f000 f82d 	bl	8006c58 <_lseek_r>
 8006bfe:	1c43      	adds	r3, r0, #1
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	bf15      	itete	ne
 8006c04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c0e:	81a3      	strheq	r3, [r4, #12]
 8006c10:	bf18      	it	ne
 8006c12:	81a3      	strhne	r3, [r4, #12]
 8006c14:	bd10      	pop	{r4, pc}

08006c16 <__sclose>:
 8006c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1a:	f000 b80d 	b.w	8006c38 <_close_r>

08006c1e <memset>:
 8006c1e:	4402      	add	r2, r0
 8006c20:	4603      	mov	r3, r0
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d100      	bne.n	8006c28 <memset+0xa>
 8006c26:	4770      	bx	lr
 8006c28:	f803 1b01 	strb.w	r1, [r3], #1
 8006c2c:	e7f9      	b.n	8006c22 <memset+0x4>
	...

08006c30 <_localeconv_r>:
 8006c30:	4800      	ldr	r0, [pc, #0]	@ (8006c34 <_localeconv_r+0x4>)
 8006c32:	4770      	bx	lr
 8006c34:	20000160 	.word	0x20000160

08006c38 <_close_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4d06      	ldr	r5, [pc, #24]	@ (8006c54 <_close_r+0x1c>)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4604      	mov	r4, r0
 8006c40:	4608      	mov	r0, r1
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	f7fc f93a 	bl	8002ebc <_close>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d102      	bne.n	8006c52 <_close_r+0x1a>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	b103      	cbz	r3, 8006c52 <_close_r+0x1a>
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	2000086c 	.word	0x2000086c

08006c58 <_lseek_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4d07      	ldr	r5, [pc, #28]	@ (8006c78 <_lseek_r+0x20>)
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	4608      	mov	r0, r1
 8006c60:	4611      	mov	r1, r2
 8006c62:	2200      	movs	r2, #0
 8006c64:	602a      	str	r2, [r5, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	f7fc f94f 	bl	8002f0a <_lseek>
 8006c6c:	1c43      	adds	r3, r0, #1
 8006c6e:	d102      	bne.n	8006c76 <_lseek_r+0x1e>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	b103      	cbz	r3, 8006c76 <_lseek_r+0x1e>
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	bd38      	pop	{r3, r4, r5, pc}
 8006c78:	2000086c 	.word	0x2000086c

08006c7c <_read_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4d07      	ldr	r5, [pc, #28]	@ (8006c9c <_read_r+0x20>)
 8006c80:	4604      	mov	r4, r0
 8006c82:	4608      	mov	r0, r1
 8006c84:	4611      	mov	r1, r2
 8006c86:	2200      	movs	r2, #0
 8006c88:	602a      	str	r2, [r5, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f7fc f8dd 	bl	8002e4a <_read>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d102      	bne.n	8006c9a <_read_r+0x1e>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <_read_r+0x1e>
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	2000086c 	.word	0x2000086c

08006ca0 <_sbrk_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4d06      	ldr	r5, [pc, #24]	@ (8006cbc <_sbrk_r+0x1c>)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	f7fc f93a 	bl	8002f24 <_sbrk>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_sbrk_r+0x1a>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_sbrk_r+0x1a>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	2000086c 	.word	0x2000086c

08006cc0 <_write_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	4d07      	ldr	r5, [pc, #28]	@ (8006ce0 <_write_r+0x20>)
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	4611      	mov	r1, r2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	602a      	str	r2, [r5, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f7fc f8d8 	bl	8002e84 <_write>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d102      	bne.n	8006cde <_write_r+0x1e>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	b103      	cbz	r3, 8006cde <_write_r+0x1e>
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	2000086c 	.word	0x2000086c

08006ce4 <__errno>:
 8006ce4:	4b01      	ldr	r3, [pc, #4]	@ (8006cec <__errno+0x8>)
 8006ce6:	6818      	ldr	r0, [r3, #0]
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	20000020 	.word	0x20000020

08006cf0 <__libc_init_array>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	4d0d      	ldr	r5, [pc, #52]	@ (8006d28 <__libc_init_array+0x38>)
 8006cf4:	4c0d      	ldr	r4, [pc, #52]	@ (8006d2c <__libc_init_array+0x3c>)
 8006cf6:	1b64      	subs	r4, r4, r5
 8006cf8:	10a4      	asrs	r4, r4, #2
 8006cfa:	2600      	movs	r6, #0
 8006cfc:	42a6      	cmp	r6, r4
 8006cfe:	d109      	bne.n	8006d14 <__libc_init_array+0x24>
 8006d00:	4d0b      	ldr	r5, [pc, #44]	@ (8006d30 <__libc_init_array+0x40>)
 8006d02:	4c0c      	ldr	r4, [pc, #48]	@ (8006d34 <__libc_init_array+0x44>)
 8006d04:	f001 ffa0 	bl	8008c48 <_init>
 8006d08:	1b64      	subs	r4, r4, r5
 8006d0a:	10a4      	asrs	r4, r4, #2
 8006d0c:	2600      	movs	r6, #0
 8006d0e:	42a6      	cmp	r6, r4
 8006d10:	d105      	bne.n	8006d1e <__libc_init_array+0x2e>
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d18:	4798      	blx	r3
 8006d1a:	3601      	adds	r6, #1
 8006d1c:	e7ee      	b.n	8006cfc <__libc_init_array+0xc>
 8006d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d22:	4798      	blx	r3
 8006d24:	3601      	adds	r6, #1
 8006d26:	e7f2      	b.n	8006d0e <__libc_init_array+0x1e>
 8006d28:	080095a8 	.word	0x080095a8
 8006d2c:	080095a8 	.word	0x080095a8
 8006d30:	080095a8 	.word	0x080095a8
 8006d34:	080095ac 	.word	0x080095ac

08006d38 <__retarget_lock_init_recursive>:
 8006d38:	4770      	bx	lr

08006d3a <__retarget_lock_acquire_recursive>:
 8006d3a:	4770      	bx	lr

08006d3c <__retarget_lock_release_recursive>:
 8006d3c:	4770      	bx	lr

08006d3e <memcpy>:
 8006d3e:	440a      	add	r2, r1
 8006d40:	4291      	cmp	r1, r2
 8006d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d46:	d100      	bne.n	8006d4a <memcpy+0xc>
 8006d48:	4770      	bx	lr
 8006d4a:	b510      	push	{r4, lr}
 8006d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d54:	4291      	cmp	r1, r2
 8006d56:	d1f9      	bne.n	8006d4c <memcpy+0xe>
 8006d58:	bd10      	pop	{r4, pc}

08006d5a <quorem>:
 8006d5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5e:	6903      	ldr	r3, [r0, #16]
 8006d60:	690c      	ldr	r4, [r1, #16]
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	4607      	mov	r7, r0
 8006d66:	db7e      	blt.n	8006e66 <quorem+0x10c>
 8006d68:	3c01      	subs	r4, #1
 8006d6a:	f101 0814 	add.w	r8, r1, #20
 8006d6e:	00a3      	lsls	r3, r4, #2
 8006d70:	f100 0514 	add.w	r5, r0, #20
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d84:	3301      	adds	r3, #1
 8006d86:	429a      	cmp	r2, r3
 8006d88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d90:	d32e      	bcc.n	8006df0 <quorem+0x96>
 8006d92:	f04f 0a00 	mov.w	sl, #0
 8006d96:	46c4      	mov	ip, r8
 8006d98:	46ae      	mov	lr, r5
 8006d9a:	46d3      	mov	fp, sl
 8006d9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006da0:	b298      	uxth	r0, r3
 8006da2:	fb06 a000 	mla	r0, r6, r0, sl
 8006da6:	0c02      	lsrs	r2, r0, #16
 8006da8:	0c1b      	lsrs	r3, r3, #16
 8006daa:	fb06 2303 	mla	r3, r6, r3, r2
 8006dae:	f8de 2000 	ldr.w	r2, [lr]
 8006db2:	b280      	uxth	r0, r0
 8006db4:	b292      	uxth	r2, r2
 8006db6:	1a12      	subs	r2, r2, r0
 8006db8:	445a      	add	r2, fp
 8006dba:	f8de 0000 	ldr.w	r0, [lr]
 8006dbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006dc8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dd2:	45e1      	cmp	r9, ip
 8006dd4:	f84e 2b04 	str.w	r2, [lr], #4
 8006dd8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ddc:	d2de      	bcs.n	8006d9c <quorem+0x42>
 8006dde:	9b00      	ldr	r3, [sp, #0]
 8006de0:	58eb      	ldr	r3, [r5, r3]
 8006de2:	b92b      	cbnz	r3, 8006df0 <quorem+0x96>
 8006de4:	9b01      	ldr	r3, [sp, #4]
 8006de6:	3b04      	subs	r3, #4
 8006de8:	429d      	cmp	r5, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	d32f      	bcc.n	8006e4e <quorem+0xf4>
 8006dee:	613c      	str	r4, [r7, #16]
 8006df0:	4638      	mov	r0, r7
 8006df2:	f001 f8c5 	bl	8007f80 <__mcmp>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	db25      	blt.n	8006e46 <quorem+0xec>
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e02:	f8d1 c000 	ldr.w	ip, [r1]
 8006e06:	fa1f fe82 	uxth.w	lr, r2
 8006e0a:	fa1f f38c 	uxth.w	r3, ip
 8006e0e:	eba3 030e 	sub.w	r3, r3, lr
 8006e12:	4403      	add	r3, r0
 8006e14:	0c12      	lsrs	r2, r2, #16
 8006e16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e24:	45c1      	cmp	r9, r8
 8006e26:	f841 3b04 	str.w	r3, [r1], #4
 8006e2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e2e:	d2e6      	bcs.n	8006dfe <quorem+0xa4>
 8006e30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e38:	b922      	cbnz	r2, 8006e44 <quorem+0xea>
 8006e3a:	3b04      	subs	r3, #4
 8006e3c:	429d      	cmp	r5, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	d30b      	bcc.n	8006e5a <quorem+0x100>
 8006e42:	613c      	str	r4, [r7, #16]
 8006e44:	3601      	adds	r6, #1
 8006e46:	4630      	mov	r0, r6
 8006e48:	b003      	add	sp, #12
 8006e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4e:	6812      	ldr	r2, [r2, #0]
 8006e50:	3b04      	subs	r3, #4
 8006e52:	2a00      	cmp	r2, #0
 8006e54:	d1cb      	bne.n	8006dee <quorem+0x94>
 8006e56:	3c01      	subs	r4, #1
 8006e58:	e7c6      	b.n	8006de8 <quorem+0x8e>
 8006e5a:	6812      	ldr	r2, [r2, #0]
 8006e5c:	3b04      	subs	r3, #4
 8006e5e:	2a00      	cmp	r2, #0
 8006e60:	d1ef      	bne.n	8006e42 <quorem+0xe8>
 8006e62:	3c01      	subs	r4, #1
 8006e64:	e7ea      	b.n	8006e3c <quorem+0xe2>
 8006e66:	2000      	movs	r0, #0
 8006e68:	e7ee      	b.n	8006e48 <quorem+0xee>
 8006e6a:	0000      	movs	r0, r0
 8006e6c:	0000      	movs	r0, r0
	...

08006e70 <_dtoa_r>:
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	69c7      	ldr	r7, [r0, #28]
 8006e76:	b099      	sub	sp, #100	@ 0x64
 8006e78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e7c:	ec55 4b10 	vmov	r4, r5, d0
 8006e80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e82:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e84:	4683      	mov	fp, r0
 8006e86:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e8a:	b97f      	cbnz	r7, 8006eac <_dtoa_r+0x3c>
 8006e8c:	2010      	movs	r0, #16
 8006e8e:	f7ff f88b 	bl	8005fa8 <malloc>
 8006e92:	4602      	mov	r2, r0
 8006e94:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e98:	b920      	cbnz	r0, 8006ea4 <_dtoa_r+0x34>
 8006e9a:	4ba7      	ldr	r3, [pc, #668]	@ (8007138 <_dtoa_r+0x2c8>)
 8006e9c:	21ef      	movs	r1, #239	@ 0xef
 8006e9e:	48a7      	ldr	r0, [pc, #668]	@ (800713c <_dtoa_r+0x2cc>)
 8006ea0:	f001 fb94 	bl	80085cc <__assert_func>
 8006ea4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ea8:	6007      	str	r7, [r0, #0]
 8006eaa:	60c7      	str	r7, [r0, #12]
 8006eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006eb0:	6819      	ldr	r1, [r3, #0]
 8006eb2:	b159      	cbz	r1, 8006ecc <_dtoa_r+0x5c>
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	604a      	str	r2, [r1, #4]
 8006eb8:	2301      	movs	r3, #1
 8006eba:	4093      	lsls	r3, r2
 8006ebc:	608b      	str	r3, [r1, #8]
 8006ebe:	4658      	mov	r0, fp
 8006ec0:	f000 fe24 	bl	8007b0c <_Bfree>
 8006ec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	1e2b      	subs	r3, r5, #0
 8006ece:	bfb9      	ittee	lt
 8006ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ed4:	9303      	strlt	r3, [sp, #12]
 8006ed6:	2300      	movge	r3, #0
 8006ed8:	6033      	strge	r3, [r6, #0]
 8006eda:	9f03      	ldr	r7, [sp, #12]
 8006edc:	4b98      	ldr	r3, [pc, #608]	@ (8007140 <_dtoa_r+0x2d0>)
 8006ede:	bfbc      	itt	lt
 8006ee0:	2201      	movlt	r2, #1
 8006ee2:	6032      	strlt	r2, [r6, #0]
 8006ee4:	43bb      	bics	r3, r7
 8006ee6:	d112      	bne.n	8006f0e <_dtoa_r+0x9e>
 8006ee8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006eea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ef4:	4323      	orrs	r3, r4
 8006ef6:	f000 854d 	beq.w	8007994 <_dtoa_r+0xb24>
 8006efa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006efc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007154 <_dtoa_r+0x2e4>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 854f 	beq.w	80079a4 <_dtoa_r+0xb34>
 8006f06:	f10a 0303 	add.w	r3, sl, #3
 8006f0a:	f000 bd49 	b.w	80079a0 <_dtoa_r+0xb30>
 8006f0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	ec51 0b17 	vmov	r0, r1, d7
 8006f18:	2300      	movs	r3, #0
 8006f1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006f1e:	f7f9 fdf3 	bl	8000b08 <__aeabi_dcmpeq>
 8006f22:	4680      	mov	r8, r0
 8006f24:	b158      	cbz	r0, 8006f3e <_dtoa_r+0xce>
 8006f26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f28:	2301      	movs	r3, #1
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f2e:	b113      	cbz	r3, 8006f36 <_dtoa_r+0xc6>
 8006f30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f32:	4b84      	ldr	r3, [pc, #528]	@ (8007144 <_dtoa_r+0x2d4>)
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007158 <_dtoa_r+0x2e8>
 8006f3a:	f000 bd33 	b.w	80079a4 <_dtoa_r+0xb34>
 8006f3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f42:	aa16      	add	r2, sp, #88	@ 0x58
 8006f44:	a917      	add	r1, sp, #92	@ 0x5c
 8006f46:	4658      	mov	r0, fp
 8006f48:	f001 f8ca 	bl	80080e0 <__d2b>
 8006f4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f50:	4681      	mov	r9, r0
 8006f52:	2e00      	cmp	r6, #0
 8006f54:	d077      	beq.n	8007046 <_dtoa_r+0x1d6>
 8006f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f70:	4619      	mov	r1, r3
 8006f72:	2200      	movs	r2, #0
 8006f74:	4b74      	ldr	r3, [pc, #464]	@ (8007148 <_dtoa_r+0x2d8>)
 8006f76:	f7f9 f9a7 	bl	80002c8 <__aeabi_dsub>
 8006f7a:	a369      	add	r3, pc, #420	@ (adr r3, 8007120 <_dtoa_r+0x2b0>)
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f7f9 fb5a 	bl	8000638 <__aeabi_dmul>
 8006f84:	a368      	add	r3, pc, #416	@ (adr r3, 8007128 <_dtoa_r+0x2b8>)
 8006f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8a:	f7f9 f99f 	bl	80002cc <__adddf3>
 8006f8e:	4604      	mov	r4, r0
 8006f90:	4630      	mov	r0, r6
 8006f92:	460d      	mov	r5, r1
 8006f94:	f7f9 fae6 	bl	8000564 <__aeabi_i2d>
 8006f98:	a365      	add	r3, pc, #404	@ (adr r3, 8007130 <_dtoa_r+0x2c0>)
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	f7f9 fb4b 	bl	8000638 <__aeabi_dmul>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f7f9 f98f 	bl	80002cc <__adddf3>
 8006fae:	4604      	mov	r4, r0
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	f7f9 fdf1 	bl	8000b98 <__aeabi_d2iz>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4607      	mov	r7, r0
 8006fba:	2300      	movs	r3, #0
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	f7f9 fdac 	bl	8000b1c <__aeabi_dcmplt>
 8006fc4:	b140      	cbz	r0, 8006fd8 <_dtoa_r+0x168>
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	f7f9 facc 	bl	8000564 <__aeabi_i2d>
 8006fcc:	4622      	mov	r2, r4
 8006fce:	462b      	mov	r3, r5
 8006fd0:	f7f9 fd9a 	bl	8000b08 <__aeabi_dcmpeq>
 8006fd4:	b900      	cbnz	r0, 8006fd8 <_dtoa_r+0x168>
 8006fd6:	3f01      	subs	r7, #1
 8006fd8:	2f16      	cmp	r7, #22
 8006fda:	d851      	bhi.n	8007080 <_dtoa_r+0x210>
 8006fdc:	4b5b      	ldr	r3, [pc, #364]	@ (800714c <_dtoa_r+0x2dc>)
 8006fde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fea:	f7f9 fd97 	bl	8000b1c <__aeabi_dcmplt>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d048      	beq.n	8007084 <_dtoa_r+0x214>
 8006ff2:	3f01      	subs	r7, #1
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ff8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ffa:	1b9b      	subs	r3, r3, r6
 8006ffc:	1e5a      	subs	r2, r3, #1
 8006ffe:	bf44      	itt	mi
 8007000:	f1c3 0801 	rsbmi	r8, r3, #1
 8007004:	2300      	movmi	r3, #0
 8007006:	9208      	str	r2, [sp, #32]
 8007008:	bf54      	ite	pl
 800700a:	f04f 0800 	movpl.w	r8, #0
 800700e:	9308      	strmi	r3, [sp, #32]
 8007010:	2f00      	cmp	r7, #0
 8007012:	db39      	blt.n	8007088 <_dtoa_r+0x218>
 8007014:	9b08      	ldr	r3, [sp, #32]
 8007016:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007018:	443b      	add	r3, r7
 800701a:	9308      	str	r3, [sp, #32]
 800701c:	2300      	movs	r3, #0
 800701e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007022:	2b09      	cmp	r3, #9
 8007024:	d864      	bhi.n	80070f0 <_dtoa_r+0x280>
 8007026:	2b05      	cmp	r3, #5
 8007028:	bfc4      	itt	gt
 800702a:	3b04      	subgt	r3, #4
 800702c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800702e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007030:	f1a3 0302 	sub.w	r3, r3, #2
 8007034:	bfcc      	ite	gt
 8007036:	2400      	movgt	r4, #0
 8007038:	2401      	movle	r4, #1
 800703a:	2b03      	cmp	r3, #3
 800703c:	d863      	bhi.n	8007106 <_dtoa_r+0x296>
 800703e:	e8df f003 	tbb	[pc, r3]
 8007042:	372a      	.short	0x372a
 8007044:	5535      	.short	0x5535
 8007046:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800704a:	441e      	add	r6, r3
 800704c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007050:	2b20      	cmp	r3, #32
 8007052:	bfc1      	itttt	gt
 8007054:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007058:	409f      	lslgt	r7, r3
 800705a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800705e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007062:	bfd6      	itet	le
 8007064:	f1c3 0320 	rsble	r3, r3, #32
 8007068:	ea47 0003 	orrgt.w	r0, r7, r3
 800706c:	fa04 f003 	lslle.w	r0, r4, r3
 8007070:	f7f9 fa68 	bl	8000544 <__aeabi_ui2d>
 8007074:	2201      	movs	r2, #1
 8007076:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800707a:	3e01      	subs	r6, #1
 800707c:	9214      	str	r2, [sp, #80]	@ 0x50
 800707e:	e777      	b.n	8006f70 <_dtoa_r+0x100>
 8007080:	2301      	movs	r3, #1
 8007082:	e7b8      	b.n	8006ff6 <_dtoa_r+0x186>
 8007084:	9012      	str	r0, [sp, #72]	@ 0x48
 8007086:	e7b7      	b.n	8006ff8 <_dtoa_r+0x188>
 8007088:	427b      	negs	r3, r7
 800708a:	930a      	str	r3, [sp, #40]	@ 0x28
 800708c:	2300      	movs	r3, #0
 800708e:	eba8 0807 	sub.w	r8, r8, r7
 8007092:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007094:	e7c4      	b.n	8007020 <_dtoa_r+0x1b0>
 8007096:	2300      	movs	r3, #0
 8007098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800709a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	dc35      	bgt.n	800710c <_dtoa_r+0x29c>
 80070a0:	2301      	movs	r3, #1
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	9307      	str	r3, [sp, #28]
 80070a6:	461a      	mov	r2, r3
 80070a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80070aa:	e00b      	b.n	80070c4 <_dtoa_r+0x254>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e7f3      	b.n	8007098 <_dtoa_r+0x228>
 80070b0:	2300      	movs	r3, #0
 80070b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070b6:	18fb      	adds	r3, r7, r3
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	3301      	adds	r3, #1
 80070bc:	2b01      	cmp	r3, #1
 80070be:	9307      	str	r3, [sp, #28]
 80070c0:	bfb8      	it	lt
 80070c2:	2301      	movlt	r3, #1
 80070c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80070c8:	2100      	movs	r1, #0
 80070ca:	2204      	movs	r2, #4
 80070cc:	f102 0514 	add.w	r5, r2, #20
 80070d0:	429d      	cmp	r5, r3
 80070d2:	d91f      	bls.n	8007114 <_dtoa_r+0x2a4>
 80070d4:	6041      	str	r1, [r0, #4]
 80070d6:	4658      	mov	r0, fp
 80070d8:	f000 fcd8 	bl	8007a8c <_Balloc>
 80070dc:	4682      	mov	sl, r0
 80070de:	2800      	cmp	r0, #0
 80070e0:	d13c      	bne.n	800715c <_dtoa_r+0x2ec>
 80070e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007150 <_dtoa_r+0x2e0>)
 80070e4:	4602      	mov	r2, r0
 80070e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80070ea:	e6d8      	b.n	8006e9e <_dtoa_r+0x2e>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e7e0      	b.n	80070b2 <_dtoa_r+0x242>
 80070f0:	2401      	movs	r4, #1
 80070f2:	2300      	movs	r3, #0
 80070f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070f8:	f04f 33ff 	mov.w	r3, #4294967295
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	9307      	str	r3, [sp, #28]
 8007100:	2200      	movs	r2, #0
 8007102:	2312      	movs	r3, #18
 8007104:	e7d0      	b.n	80070a8 <_dtoa_r+0x238>
 8007106:	2301      	movs	r3, #1
 8007108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800710a:	e7f5      	b.n	80070f8 <_dtoa_r+0x288>
 800710c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	9307      	str	r3, [sp, #28]
 8007112:	e7d7      	b.n	80070c4 <_dtoa_r+0x254>
 8007114:	3101      	adds	r1, #1
 8007116:	0052      	lsls	r2, r2, #1
 8007118:	e7d8      	b.n	80070cc <_dtoa_r+0x25c>
 800711a:	bf00      	nop
 800711c:	f3af 8000 	nop.w
 8007120:	636f4361 	.word	0x636f4361
 8007124:	3fd287a7 	.word	0x3fd287a7
 8007128:	8b60c8b3 	.word	0x8b60c8b3
 800712c:	3fc68a28 	.word	0x3fc68a28
 8007130:	509f79fb 	.word	0x509f79fb
 8007134:	3fd34413 	.word	0x3fd34413
 8007138:	0800926d 	.word	0x0800926d
 800713c:	08009284 	.word	0x08009284
 8007140:	7ff00000 	.word	0x7ff00000
 8007144:	0800923d 	.word	0x0800923d
 8007148:	3ff80000 	.word	0x3ff80000
 800714c:	08009380 	.word	0x08009380
 8007150:	080092dc 	.word	0x080092dc
 8007154:	08009269 	.word	0x08009269
 8007158:	0800923c 	.word	0x0800923c
 800715c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007160:	6018      	str	r0, [r3, #0]
 8007162:	9b07      	ldr	r3, [sp, #28]
 8007164:	2b0e      	cmp	r3, #14
 8007166:	f200 80a4 	bhi.w	80072b2 <_dtoa_r+0x442>
 800716a:	2c00      	cmp	r4, #0
 800716c:	f000 80a1 	beq.w	80072b2 <_dtoa_r+0x442>
 8007170:	2f00      	cmp	r7, #0
 8007172:	dd33      	ble.n	80071dc <_dtoa_r+0x36c>
 8007174:	4bad      	ldr	r3, [pc, #692]	@ (800742c <_dtoa_r+0x5bc>)
 8007176:	f007 020f 	and.w	r2, r7, #15
 800717a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800717e:	ed93 7b00 	vldr	d7, [r3]
 8007182:	05f8      	lsls	r0, r7, #23
 8007184:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007188:	ea4f 1427 	mov.w	r4, r7, asr #4
 800718c:	d516      	bpl.n	80071bc <_dtoa_r+0x34c>
 800718e:	4ba8      	ldr	r3, [pc, #672]	@ (8007430 <_dtoa_r+0x5c0>)
 8007190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007198:	f7f9 fb78 	bl	800088c <__aeabi_ddiv>
 800719c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071a0:	f004 040f 	and.w	r4, r4, #15
 80071a4:	2603      	movs	r6, #3
 80071a6:	4da2      	ldr	r5, [pc, #648]	@ (8007430 <_dtoa_r+0x5c0>)
 80071a8:	b954      	cbnz	r4, 80071c0 <_dtoa_r+0x350>
 80071aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071b2:	f7f9 fb6b 	bl	800088c <__aeabi_ddiv>
 80071b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071ba:	e028      	b.n	800720e <_dtoa_r+0x39e>
 80071bc:	2602      	movs	r6, #2
 80071be:	e7f2      	b.n	80071a6 <_dtoa_r+0x336>
 80071c0:	07e1      	lsls	r1, r4, #31
 80071c2:	d508      	bpl.n	80071d6 <_dtoa_r+0x366>
 80071c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071cc:	f7f9 fa34 	bl	8000638 <__aeabi_dmul>
 80071d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071d4:	3601      	adds	r6, #1
 80071d6:	1064      	asrs	r4, r4, #1
 80071d8:	3508      	adds	r5, #8
 80071da:	e7e5      	b.n	80071a8 <_dtoa_r+0x338>
 80071dc:	f000 80d2 	beq.w	8007384 <_dtoa_r+0x514>
 80071e0:	427c      	negs	r4, r7
 80071e2:	4b92      	ldr	r3, [pc, #584]	@ (800742c <_dtoa_r+0x5bc>)
 80071e4:	4d92      	ldr	r5, [pc, #584]	@ (8007430 <_dtoa_r+0x5c0>)
 80071e6:	f004 020f 	and.w	r2, r4, #15
 80071ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071f6:	f7f9 fa1f 	bl	8000638 <__aeabi_dmul>
 80071fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071fe:	1124      	asrs	r4, r4, #4
 8007200:	2300      	movs	r3, #0
 8007202:	2602      	movs	r6, #2
 8007204:	2c00      	cmp	r4, #0
 8007206:	f040 80b2 	bne.w	800736e <_dtoa_r+0x4fe>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1d3      	bne.n	80071b6 <_dtoa_r+0x346>
 800720e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007210:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 80b7 	beq.w	8007388 <_dtoa_r+0x518>
 800721a:	4b86      	ldr	r3, [pc, #536]	@ (8007434 <_dtoa_r+0x5c4>)
 800721c:	2200      	movs	r2, #0
 800721e:	4620      	mov	r0, r4
 8007220:	4629      	mov	r1, r5
 8007222:	f7f9 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 8007226:	2800      	cmp	r0, #0
 8007228:	f000 80ae 	beq.w	8007388 <_dtoa_r+0x518>
 800722c:	9b07      	ldr	r3, [sp, #28]
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 80aa 	beq.w	8007388 <_dtoa_r+0x518>
 8007234:	9b00      	ldr	r3, [sp, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	dd37      	ble.n	80072aa <_dtoa_r+0x43a>
 800723a:	1e7b      	subs	r3, r7, #1
 800723c:	9304      	str	r3, [sp, #16]
 800723e:	4620      	mov	r0, r4
 8007240:	4b7d      	ldr	r3, [pc, #500]	@ (8007438 <_dtoa_r+0x5c8>)
 8007242:	2200      	movs	r2, #0
 8007244:	4629      	mov	r1, r5
 8007246:	f7f9 f9f7 	bl	8000638 <__aeabi_dmul>
 800724a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800724e:	9c00      	ldr	r4, [sp, #0]
 8007250:	3601      	adds	r6, #1
 8007252:	4630      	mov	r0, r6
 8007254:	f7f9 f986 	bl	8000564 <__aeabi_i2d>
 8007258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800725c:	f7f9 f9ec 	bl	8000638 <__aeabi_dmul>
 8007260:	4b76      	ldr	r3, [pc, #472]	@ (800743c <_dtoa_r+0x5cc>)
 8007262:	2200      	movs	r2, #0
 8007264:	f7f9 f832 	bl	80002cc <__adddf3>
 8007268:	4605      	mov	r5, r0
 800726a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800726e:	2c00      	cmp	r4, #0
 8007270:	f040 808d 	bne.w	800738e <_dtoa_r+0x51e>
 8007274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007278:	4b71      	ldr	r3, [pc, #452]	@ (8007440 <_dtoa_r+0x5d0>)
 800727a:	2200      	movs	r2, #0
 800727c:	f7f9 f824 	bl	80002c8 <__aeabi_dsub>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007288:	462a      	mov	r2, r5
 800728a:	4633      	mov	r3, r6
 800728c:	f7f9 fc64 	bl	8000b58 <__aeabi_dcmpgt>
 8007290:	2800      	cmp	r0, #0
 8007292:	f040 828b 	bne.w	80077ac <_dtoa_r+0x93c>
 8007296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800729a:	462a      	mov	r2, r5
 800729c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80072a0:	f7f9 fc3c 	bl	8000b1c <__aeabi_dcmplt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f040 8128 	bne.w	80074fa <_dtoa_r+0x68a>
 80072aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80072ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80072b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f2c0 815a 	blt.w	800756e <_dtoa_r+0x6fe>
 80072ba:	2f0e      	cmp	r7, #14
 80072bc:	f300 8157 	bgt.w	800756e <_dtoa_r+0x6fe>
 80072c0:	4b5a      	ldr	r3, [pc, #360]	@ (800742c <_dtoa_r+0x5bc>)
 80072c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072c6:	ed93 7b00 	vldr	d7, [r3]
 80072ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	ed8d 7b00 	vstr	d7, [sp]
 80072d2:	da03      	bge.n	80072dc <_dtoa_r+0x46c>
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f340 8101 	ble.w	80074de <_dtoa_r+0x66e>
 80072dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072e0:	4656      	mov	r6, sl
 80072e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072e6:	4620      	mov	r0, r4
 80072e8:	4629      	mov	r1, r5
 80072ea:	f7f9 facf 	bl	800088c <__aeabi_ddiv>
 80072ee:	f7f9 fc53 	bl	8000b98 <__aeabi_d2iz>
 80072f2:	4680      	mov	r8, r0
 80072f4:	f7f9 f936 	bl	8000564 <__aeabi_i2d>
 80072f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072fc:	f7f9 f99c 	bl	8000638 <__aeabi_dmul>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4620      	mov	r0, r4
 8007306:	4629      	mov	r1, r5
 8007308:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800730c:	f7f8 ffdc 	bl	80002c8 <__aeabi_dsub>
 8007310:	f806 4b01 	strb.w	r4, [r6], #1
 8007314:	9d07      	ldr	r5, [sp, #28]
 8007316:	eba6 040a 	sub.w	r4, r6, sl
 800731a:	42a5      	cmp	r5, r4
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	f040 8117 	bne.w	8007552 <_dtoa_r+0x6e2>
 8007324:	f7f8 ffd2 	bl	80002cc <__adddf3>
 8007328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800732c:	4604      	mov	r4, r0
 800732e:	460d      	mov	r5, r1
 8007330:	f7f9 fc12 	bl	8000b58 <__aeabi_dcmpgt>
 8007334:	2800      	cmp	r0, #0
 8007336:	f040 80f9 	bne.w	800752c <_dtoa_r+0x6bc>
 800733a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800733e:	4620      	mov	r0, r4
 8007340:	4629      	mov	r1, r5
 8007342:	f7f9 fbe1 	bl	8000b08 <__aeabi_dcmpeq>
 8007346:	b118      	cbz	r0, 8007350 <_dtoa_r+0x4e0>
 8007348:	f018 0f01 	tst.w	r8, #1
 800734c:	f040 80ee 	bne.w	800752c <_dtoa_r+0x6bc>
 8007350:	4649      	mov	r1, r9
 8007352:	4658      	mov	r0, fp
 8007354:	f000 fbda 	bl	8007b0c <_Bfree>
 8007358:	2300      	movs	r3, #0
 800735a:	7033      	strb	r3, [r6, #0]
 800735c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800735e:	3701      	adds	r7, #1
 8007360:	601f      	str	r7, [r3, #0]
 8007362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 831d 	beq.w	80079a4 <_dtoa_r+0xb34>
 800736a:	601e      	str	r6, [r3, #0]
 800736c:	e31a      	b.n	80079a4 <_dtoa_r+0xb34>
 800736e:	07e2      	lsls	r2, r4, #31
 8007370:	d505      	bpl.n	800737e <_dtoa_r+0x50e>
 8007372:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007376:	f7f9 f95f 	bl	8000638 <__aeabi_dmul>
 800737a:	3601      	adds	r6, #1
 800737c:	2301      	movs	r3, #1
 800737e:	1064      	asrs	r4, r4, #1
 8007380:	3508      	adds	r5, #8
 8007382:	e73f      	b.n	8007204 <_dtoa_r+0x394>
 8007384:	2602      	movs	r6, #2
 8007386:	e742      	b.n	800720e <_dtoa_r+0x39e>
 8007388:	9c07      	ldr	r4, [sp, #28]
 800738a:	9704      	str	r7, [sp, #16]
 800738c:	e761      	b.n	8007252 <_dtoa_r+0x3e2>
 800738e:	4b27      	ldr	r3, [pc, #156]	@ (800742c <_dtoa_r+0x5bc>)
 8007390:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007396:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800739a:	4454      	add	r4, sl
 800739c:	2900      	cmp	r1, #0
 800739e:	d053      	beq.n	8007448 <_dtoa_r+0x5d8>
 80073a0:	4928      	ldr	r1, [pc, #160]	@ (8007444 <_dtoa_r+0x5d4>)
 80073a2:	2000      	movs	r0, #0
 80073a4:	f7f9 fa72 	bl	800088c <__aeabi_ddiv>
 80073a8:	4633      	mov	r3, r6
 80073aa:	462a      	mov	r2, r5
 80073ac:	f7f8 ff8c 	bl	80002c8 <__aeabi_dsub>
 80073b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073b4:	4656      	mov	r6, sl
 80073b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ba:	f7f9 fbed 	bl	8000b98 <__aeabi_d2iz>
 80073be:	4605      	mov	r5, r0
 80073c0:	f7f9 f8d0 	bl	8000564 <__aeabi_i2d>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073cc:	f7f8 ff7c 	bl	80002c8 <__aeabi_dsub>
 80073d0:	3530      	adds	r5, #48	@ 0x30
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073da:	f806 5b01 	strb.w	r5, [r6], #1
 80073de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073e2:	f7f9 fb9b 	bl	8000b1c <__aeabi_dcmplt>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d171      	bne.n	80074ce <_dtoa_r+0x65e>
 80073ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073ee:	4911      	ldr	r1, [pc, #68]	@ (8007434 <_dtoa_r+0x5c4>)
 80073f0:	2000      	movs	r0, #0
 80073f2:	f7f8 ff69 	bl	80002c8 <__aeabi_dsub>
 80073f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073fa:	f7f9 fb8f 	bl	8000b1c <__aeabi_dcmplt>
 80073fe:	2800      	cmp	r0, #0
 8007400:	f040 8095 	bne.w	800752e <_dtoa_r+0x6be>
 8007404:	42a6      	cmp	r6, r4
 8007406:	f43f af50 	beq.w	80072aa <_dtoa_r+0x43a>
 800740a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800740e:	4b0a      	ldr	r3, [pc, #40]	@ (8007438 <_dtoa_r+0x5c8>)
 8007410:	2200      	movs	r2, #0
 8007412:	f7f9 f911 	bl	8000638 <__aeabi_dmul>
 8007416:	4b08      	ldr	r3, [pc, #32]	@ (8007438 <_dtoa_r+0x5c8>)
 8007418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800741c:	2200      	movs	r2, #0
 800741e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007422:	f7f9 f909 	bl	8000638 <__aeabi_dmul>
 8007426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800742a:	e7c4      	b.n	80073b6 <_dtoa_r+0x546>
 800742c:	08009380 	.word	0x08009380
 8007430:	08009358 	.word	0x08009358
 8007434:	3ff00000 	.word	0x3ff00000
 8007438:	40240000 	.word	0x40240000
 800743c:	401c0000 	.word	0x401c0000
 8007440:	40140000 	.word	0x40140000
 8007444:	3fe00000 	.word	0x3fe00000
 8007448:	4631      	mov	r1, r6
 800744a:	4628      	mov	r0, r5
 800744c:	f7f9 f8f4 	bl	8000638 <__aeabi_dmul>
 8007450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007454:	9415      	str	r4, [sp, #84]	@ 0x54
 8007456:	4656      	mov	r6, sl
 8007458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800745c:	f7f9 fb9c 	bl	8000b98 <__aeabi_d2iz>
 8007460:	4605      	mov	r5, r0
 8007462:	f7f9 f87f 	bl	8000564 <__aeabi_i2d>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800746e:	f7f8 ff2b 	bl	80002c8 <__aeabi_dsub>
 8007472:	3530      	adds	r5, #48	@ 0x30
 8007474:	f806 5b01 	strb.w	r5, [r6], #1
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	42a6      	cmp	r6, r4
 800747e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	d124      	bne.n	80074d2 <_dtoa_r+0x662>
 8007488:	4bac      	ldr	r3, [pc, #688]	@ (800773c <_dtoa_r+0x8cc>)
 800748a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800748e:	f7f8 ff1d 	bl	80002cc <__adddf3>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800749a:	f7f9 fb5d 	bl	8000b58 <__aeabi_dcmpgt>
 800749e:	2800      	cmp	r0, #0
 80074a0:	d145      	bne.n	800752e <_dtoa_r+0x6be>
 80074a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074a6:	49a5      	ldr	r1, [pc, #660]	@ (800773c <_dtoa_r+0x8cc>)
 80074a8:	2000      	movs	r0, #0
 80074aa:	f7f8 ff0d 	bl	80002c8 <__aeabi_dsub>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b6:	f7f9 fb31 	bl	8000b1c <__aeabi_dcmplt>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	f43f aef5 	beq.w	80072aa <_dtoa_r+0x43a>
 80074c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80074c2:	1e73      	subs	r3, r6, #1
 80074c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80074c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074ca:	2b30      	cmp	r3, #48	@ 0x30
 80074cc:	d0f8      	beq.n	80074c0 <_dtoa_r+0x650>
 80074ce:	9f04      	ldr	r7, [sp, #16]
 80074d0:	e73e      	b.n	8007350 <_dtoa_r+0x4e0>
 80074d2:	4b9b      	ldr	r3, [pc, #620]	@ (8007740 <_dtoa_r+0x8d0>)
 80074d4:	f7f9 f8b0 	bl	8000638 <__aeabi_dmul>
 80074d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074dc:	e7bc      	b.n	8007458 <_dtoa_r+0x5e8>
 80074de:	d10c      	bne.n	80074fa <_dtoa_r+0x68a>
 80074e0:	4b98      	ldr	r3, [pc, #608]	@ (8007744 <_dtoa_r+0x8d4>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074e8:	f7f9 f8a6 	bl	8000638 <__aeabi_dmul>
 80074ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074f0:	f7f9 fb28 	bl	8000b44 <__aeabi_dcmpge>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	f000 8157 	beq.w	80077a8 <_dtoa_r+0x938>
 80074fa:	2400      	movs	r4, #0
 80074fc:	4625      	mov	r5, r4
 80074fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007500:	43db      	mvns	r3, r3
 8007502:	9304      	str	r3, [sp, #16]
 8007504:	4656      	mov	r6, sl
 8007506:	2700      	movs	r7, #0
 8007508:	4621      	mov	r1, r4
 800750a:	4658      	mov	r0, fp
 800750c:	f000 fafe 	bl	8007b0c <_Bfree>
 8007510:	2d00      	cmp	r5, #0
 8007512:	d0dc      	beq.n	80074ce <_dtoa_r+0x65e>
 8007514:	b12f      	cbz	r7, 8007522 <_dtoa_r+0x6b2>
 8007516:	42af      	cmp	r7, r5
 8007518:	d003      	beq.n	8007522 <_dtoa_r+0x6b2>
 800751a:	4639      	mov	r1, r7
 800751c:	4658      	mov	r0, fp
 800751e:	f000 faf5 	bl	8007b0c <_Bfree>
 8007522:	4629      	mov	r1, r5
 8007524:	4658      	mov	r0, fp
 8007526:	f000 faf1 	bl	8007b0c <_Bfree>
 800752a:	e7d0      	b.n	80074ce <_dtoa_r+0x65e>
 800752c:	9704      	str	r7, [sp, #16]
 800752e:	4633      	mov	r3, r6
 8007530:	461e      	mov	r6, r3
 8007532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007536:	2a39      	cmp	r2, #57	@ 0x39
 8007538:	d107      	bne.n	800754a <_dtoa_r+0x6da>
 800753a:	459a      	cmp	sl, r3
 800753c:	d1f8      	bne.n	8007530 <_dtoa_r+0x6c0>
 800753e:	9a04      	ldr	r2, [sp, #16]
 8007540:	3201      	adds	r2, #1
 8007542:	9204      	str	r2, [sp, #16]
 8007544:	2230      	movs	r2, #48	@ 0x30
 8007546:	f88a 2000 	strb.w	r2, [sl]
 800754a:	781a      	ldrb	r2, [r3, #0]
 800754c:	3201      	adds	r2, #1
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	e7bd      	b.n	80074ce <_dtoa_r+0x65e>
 8007552:	4b7b      	ldr	r3, [pc, #492]	@ (8007740 <_dtoa_r+0x8d0>)
 8007554:	2200      	movs	r2, #0
 8007556:	f7f9 f86f 	bl	8000638 <__aeabi_dmul>
 800755a:	2200      	movs	r2, #0
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	460d      	mov	r5, r1
 8007562:	f7f9 fad1 	bl	8000b08 <__aeabi_dcmpeq>
 8007566:	2800      	cmp	r0, #0
 8007568:	f43f aebb 	beq.w	80072e2 <_dtoa_r+0x472>
 800756c:	e6f0      	b.n	8007350 <_dtoa_r+0x4e0>
 800756e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007570:	2a00      	cmp	r2, #0
 8007572:	f000 80db 	beq.w	800772c <_dtoa_r+0x8bc>
 8007576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007578:	2a01      	cmp	r2, #1
 800757a:	f300 80bf 	bgt.w	80076fc <_dtoa_r+0x88c>
 800757e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007580:	2a00      	cmp	r2, #0
 8007582:	f000 80b7 	beq.w	80076f4 <_dtoa_r+0x884>
 8007586:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800758a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800758c:	4646      	mov	r6, r8
 800758e:	9a08      	ldr	r2, [sp, #32]
 8007590:	2101      	movs	r1, #1
 8007592:	441a      	add	r2, r3
 8007594:	4658      	mov	r0, fp
 8007596:	4498      	add	r8, r3
 8007598:	9208      	str	r2, [sp, #32]
 800759a:	f000 fb6b 	bl	8007c74 <__i2b>
 800759e:	4605      	mov	r5, r0
 80075a0:	b15e      	cbz	r6, 80075ba <_dtoa_r+0x74a>
 80075a2:	9b08      	ldr	r3, [sp, #32]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dd08      	ble.n	80075ba <_dtoa_r+0x74a>
 80075a8:	42b3      	cmp	r3, r6
 80075aa:	9a08      	ldr	r2, [sp, #32]
 80075ac:	bfa8      	it	ge
 80075ae:	4633      	movge	r3, r6
 80075b0:	eba8 0803 	sub.w	r8, r8, r3
 80075b4:	1af6      	subs	r6, r6, r3
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	9308      	str	r3, [sp, #32]
 80075ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075bc:	b1f3      	cbz	r3, 80075fc <_dtoa_r+0x78c>
 80075be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 80b7 	beq.w	8007734 <_dtoa_r+0x8c4>
 80075c6:	b18c      	cbz	r4, 80075ec <_dtoa_r+0x77c>
 80075c8:	4629      	mov	r1, r5
 80075ca:	4622      	mov	r2, r4
 80075cc:	4658      	mov	r0, fp
 80075ce:	f000 fc11 	bl	8007df4 <__pow5mult>
 80075d2:	464a      	mov	r2, r9
 80075d4:	4601      	mov	r1, r0
 80075d6:	4605      	mov	r5, r0
 80075d8:	4658      	mov	r0, fp
 80075da:	f000 fb61 	bl	8007ca0 <__multiply>
 80075de:	4649      	mov	r1, r9
 80075e0:	9004      	str	r0, [sp, #16]
 80075e2:	4658      	mov	r0, fp
 80075e4:	f000 fa92 	bl	8007b0c <_Bfree>
 80075e8:	9b04      	ldr	r3, [sp, #16]
 80075ea:	4699      	mov	r9, r3
 80075ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075ee:	1b1a      	subs	r2, r3, r4
 80075f0:	d004      	beq.n	80075fc <_dtoa_r+0x78c>
 80075f2:	4649      	mov	r1, r9
 80075f4:	4658      	mov	r0, fp
 80075f6:	f000 fbfd 	bl	8007df4 <__pow5mult>
 80075fa:	4681      	mov	r9, r0
 80075fc:	2101      	movs	r1, #1
 80075fe:	4658      	mov	r0, fp
 8007600:	f000 fb38 	bl	8007c74 <__i2b>
 8007604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007606:	4604      	mov	r4, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 81cf 	beq.w	80079ac <_dtoa_r+0xb3c>
 800760e:	461a      	mov	r2, r3
 8007610:	4601      	mov	r1, r0
 8007612:	4658      	mov	r0, fp
 8007614:	f000 fbee 	bl	8007df4 <__pow5mult>
 8007618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800761a:	2b01      	cmp	r3, #1
 800761c:	4604      	mov	r4, r0
 800761e:	f300 8095 	bgt.w	800774c <_dtoa_r+0x8dc>
 8007622:	9b02      	ldr	r3, [sp, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 8087 	bne.w	8007738 <_dtoa_r+0x8c8>
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007630:	2b00      	cmp	r3, #0
 8007632:	f040 8089 	bne.w	8007748 <_dtoa_r+0x8d8>
 8007636:	9b03      	ldr	r3, [sp, #12]
 8007638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800763c:	0d1b      	lsrs	r3, r3, #20
 800763e:	051b      	lsls	r3, r3, #20
 8007640:	b12b      	cbz	r3, 800764e <_dtoa_r+0x7de>
 8007642:	9b08      	ldr	r3, [sp, #32]
 8007644:	3301      	adds	r3, #1
 8007646:	9308      	str	r3, [sp, #32]
 8007648:	f108 0801 	add.w	r8, r8, #1
 800764c:	2301      	movs	r3, #1
 800764e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 81b0 	beq.w	80079b8 <_dtoa_r+0xb48>
 8007658:	6923      	ldr	r3, [r4, #16]
 800765a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800765e:	6918      	ldr	r0, [r3, #16]
 8007660:	f000 fabc 	bl	8007bdc <__hi0bits>
 8007664:	f1c0 0020 	rsb	r0, r0, #32
 8007668:	9b08      	ldr	r3, [sp, #32]
 800766a:	4418      	add	r0, r3
 800766c:	f010 001f 	ands.w	r0, r0, #31
 8007670:	d077      	beq.n	8007762 <_dtoa_r+0x8f2>
 8007672:	f1c0 0320 	rsb	r3, r0, #32
 8007676:	2b04      	cmp	r3, #4
 8007678:	dd6b      	ble.n	8007752 <_dtoa_r+0x8e2>
 800767a:	9b08      	ldr	r3, [sp, #32]
 800767c:	f1c0 001c 	rsb	r0, r0, #28
 8007680:	4403      	add	r3, r0
 8007682:	4480      	add	r8, r0
 8007684:	4406      	add	r6, r0
 8007686:	9308      	str	r3, [sp, #32]
 8007688:	f1b8 0f00 	cmp.w	r8, #0
 800768c:	dd05      	ble.n	800769a <_dtoa_r+0x82a>
 800768e:	4649      	mov	r1, r9
 8007690:	4642      	mov	r2, r8
 8007692:	4658      	mov	r0, fp
 8007694:	f000 fc08 	bl	8007ea8 <__lshift>
 8007698:	4681      	mov	r9, r0
 800769a:	9b08      	ldr	r3, [sp, #32]
 800769c:	2b00      	cmp	r3, #0
 800769e:	dd05      	ble.n	80076ac <_dtoa_r+0x83c>
 80076a0:	4621      	mov	r1, r4
 80076a2:	461a      	mov	r2, r3
 80076a4:	4658      	mov	r0, fp
 80076a6:	f000 fbff 	bl	8007ea8 <__lshift>
 80076aa:	4604      	mov	r4, r0
 80076ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d059      	beq.n	8007766 <_dtoa_r+0x8f6>
 80076b2:	4621      	mov	r1, r4
 80076b4:	4648      	mov	r0, r9
 80076b6:	f000 fc63 	bl	8007f80 <__mcmp>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	da53      	bge.n	8007766 <_dtoa_r+0x8f6>
 80076be:	1e7b      	subs	r3, r7, #1
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	4649      	mov	r1, r9
 80076c4:	2300      	movs	r3, #0
 80076c6:	220a      	movs	r2, #10
 80076c8:	4658      	mov	r0, fp
 80076ca:	f000 fa41 	bl	8007b50 <__multadd>
 80076ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076d0:	4681      	mov	r9, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 8172 	beq.w	80079bc <_dtoa_r+0xb4c>
 80076d8:	2300      	movs	r3, #0
 80076da:	4629      	mov	r1, r5
 80076dc:	220a      	movs	r2, #10
 80076de:	4658      	mov	r0, fp
 80076e0:	f000 fa36 	bl	8007b50 <__multadd>
 80076e4:	9b00      	ldr	r3, [sp, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	4605      	mov	r5, r0
 80076ea:	dc67      	bgt.n	80077bc <_dtoa_r+0x94c>
 80076ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	dc41      	bgt.n	8007776 <_dtoa_r+0x906>
 80076f2:	e063      	b.n	80077bc <_dtoa_r+0x94c>
 80076f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076fa:	e746      	b.n	800758a <_dtoa_r+0x71a>
 80076fc:	9b07      	ldr	r3, [sp, #28]
 80076fe:	1e5c      	subs	r4, r3, #1
 8007700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007702:	42a3      	cmp	r3, r4
 8007704:	bfbf      	itttt	lt
 8007706:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007708:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800770a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800770c:	1ae3      	sublt	r3, r4, r3
 800770e:	bfb4      	ite	lt
 8007710:	18d2      	addlt	r2, r2, r3
 8007712:	1b1c      	subge	r4, r3, r4
 8007714:	9b07      	ldr	r3, [sp, #28]
 8007716:	bfbc      	itt	lt
 8007718:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800771a:	2400      	movlt	r4, #0
 800771c:	2b00      	cmp	r3, #0
 800771e:	bfb5      	itete	lt
 8007720:	eba8 0603 	sublt.w	r6, r8, r3
 8007724:	9b07      	ldrge	r3, [sp, #28]
 8007726:	2300      	movlt	r3, #0
 8007728:	4646      	movge	r6, r8
 800772a:	e730      	b.n	800758e <_dtoa_r+0x71e>
 800772c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800772e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007730:	4646      	mov	r6, r8
 8007732:	e735      	b.n	80075a0 <_dtoa_r+0x730>
 8007734:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007736:	e75c      	b.n	80075f2 <_dtoa_r+0x782>
 8007738:	2300      	movs	r3, #0
 800773a:	e788      	b.n	800764e <_dtoa_r+0x7de>
 800773c:	3fe00000 	.word	0x3fe00000
 8007740:	40240000 	.word	0x40240000
 8007744:	40140000 	.word	0x40140000
 8007748:	9b02      	ldr	r3, [sp, #8]
 800774a:	e780      	b.n	800764e <_dtoa_r+0x7de>
 800774c:	2300      	movs	r3, #0
 800774e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007750:	e782      	b.n	8007658 <_dtoa_r+0x7e8>
 8007752:	d099      	beq.n	8007688 <_dtoa_r+0x818>
 8007754:	9a08      	ldr	r2, [sp, #32]
 8007756:	331c      	adds	r3, #28
 8007758:	441a      	add	r2, r3
 800775a:	4498      	add	r8, r3
 800775c:	441e      	add	r6, r3
 800775e:	9208      	str	r2, [sp, #32]
 8007760:	e792      	b.n	8007688 <_dtoa_r+0x818>
 8007762:	4603      	mov	r3, r0
 8007764:	e7f6      	b.n	8007754 <_dtoa_r+0x8e4>
 8007766:	9b07      	ldr	r3, [sp, #28]
 8007768:	9704      	str	r7, [sp, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	dc20      	bgt.n	80077b0 <_dtoa_r+0x940>
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007772:	2b02      	cmp	r3, #2
 8007774:	dd1e      	ble.n	80077b4 <_dtoa_r+0x944>
 8007776:	9b00      	ldr	r3, [sp, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f47f aec0 	bne.w	80074fe <_dtoa_r+0x68e>
 800777e:	4621      	mov	r1, r4
 8007780:	2205      	movs	r2, #5
 8007782:	4658      	mov	r0, fp
 8007784:	f000 f9e4 	bl	8007b50 <__multadd>
 8007788:	4601      	mov	r1, r0
 800778a:	4604      	mov	r4, r0
 800778c:	4648      	mov	r0, r9
 800778e:	f000 fbf7 	bl	8007f80 <__mcmp>
 8007792:	2800      	cmp	r0, #0
 8007794:	f77f aeb3 	ble.w	80074fe <_dtoa_r+0x68e>
 8007798:	4656      	mov	r6, sl
 800779a:	2331      	movs	r3, #49	@ 0x31
 800779c:	f806 3b01 	strb.w	r3, [r6], #1
 80077a0:	9b04      	ldr	r3, [sp, #16]
 80077a2:	3301      	adds	r3, #1
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	e6ae      	b.n	8007506 <_dtoa_r+0x696>
 80077a8:	9c07      	ldr	r4, [sp, #28]
 80077aa:	9704      	str	r7, [sp, #16]
 80077ac:	4625      	mov	r5, r4
 80077ae:	e7f3      	b.n	8007798 <_dtoa_r+0x928>
 80077b0:	9b07      	ldr	r3, [sp, #28]
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 8104 	beq.w	80079c4 <_dtoa_r+0xb54>
 80077bc:	2e00      	cmp	r6, #0
 80077be:	dd05      	ble.n	80077cc <_dtoa_r+0x95c>
 80077c0:	4629      	mov	r1, r5
 80077c2:	4632      	mov	r2, r6
 80077c4:	4658      	mov	r0, fp
 80077c6:	f000 fb6f 	bl	8007ea8 <__lshift>
 80077ca:	4605      	mov	r5, r0
 80077cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d05a      	beq.n	8007888 <_dtoa_r+0xa18>
 80077d2:	6869      	ldr	r1, [r5, #4]
 80077d4:	4658      	mov	r0, fp
 80077d6:	f000 f959 	bl	8007a8c <_Balloc>
 80077da:	4606      	mov	r6, r0
 80077dc:	b928      	cbnz	r0, 80077ea <_dtoa_r+0x97a>
 80077de:	4b84      	ldr	r3, [pc, #528]	@ (80079f0 <_dtoa_r+0xb80>)
 80077e0:	4602      	mov	r2, r0
 80077e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077e6:	f7ff bb5a 	b.w	8006e9e <_dtoa_r+0x2e>
 80077ea:	692a      	ldr	r2, [r5, #16]
 80077ec:	3202      	adds	r2, #2
 80077ee:	0092      	lsls	r2, r2, #2
 80077f0:	f105 010c 	add.w	r1, r5, #12
 80077f4:	300c      	adds	r0, #12
 80077f6:	f7ff faa2 	bl	8006d3e <memcpy>
 80077fa:	2201      	movs	r2, #1
 80077fc:	4631      	mov	r1, r6
 80077fe:	4658      	mov	r0, fp
 8007800:	f000 fb52 	bl	8007ea8 <__lshift>
 8007804:	f10a 0301 	add.w	r3, sl, #1
 8007808:	9307      	str	r3, [sp, #28]
 800780a:	9b00      	ldr	r3, [sp, #0]
 800780c:	4453      	add	r3, sl
 800780e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007810:	9b02      	ldr	r3, [sp, #8]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	462f      	mov	r7, r5
 8007818:	930a      	str	r3, [sp, #40]	@ 0x28
 800781a:	4605      	mov	r5, r0
 800781c:	9b07      	ldr	r3, [sp, #28]
 800781e:	4621      	mov	r1, r4
 8007820:	3b01      	subs	r3, #1
 8007822:	4648      	mov	r0, r9
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	f7ff fa98 	bl	8006d5a <quorem>
 800782a:	4639      	mov	r1, r7
 800782c:	9002      	str	r0, [sp, #8]
 800782e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007832:	4648      	mov	r0, r9
 8007834:	f000 fba4 	bl	8007f80 <__mcmp>
 8007838:	462a      	mov	r2, r5
 800783a:	9008      	str	r0, [sp, #32]
 800783c:	4621      	mov	r1, r4
 800783e:	4658      	mov	r0, fp
 8007840:	f000 fbba 	bl	8007fb8 <__mdiff>
 8007844:	68c2      	ldr	r2, [r0, #12]
 8007846:	4606      	mov	r6, r0
 8007848:	bb02      	cbnz	r2, 800788c <_dtoa_r+0xa1c>
 800784a:	4601      	mov	r1, r0
 800784c:	4648      	mov	r0, r9
 800784e:	f000 fb97 	bl	8007f80 <__mcmp>
 8007852:	4602      	mov	r2, r0
 8007854:	4631      	mov	r1, r6
 8007856:	4658      	mov	r0, fp
 8007858:	920e      	str	r2, [sp, #56]	@ 0x38
 800785a:	f000 f957 	bl	8007b0c <_Bfree>
 800785e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007860:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007862:	9e07      	ldr	r6, [sp, #28]
 8007864:	ea43 0102 	orr.w	r1, r3, r2
 8007868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800786a:	4319      	orrs	r1, r3
 800786c:	d110      	bne.n	8007890 <_dtoa_r+0xa20>
 800786e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007872:	d029      	beq.n	80078c8 <_dtoa_r+0xa58>
 8007874:	9b08      	ldr	r3, [sp, #32]
 8007876:	2b00      	cmp	r3, #0
 8007878:	dd02      	ble.n	8007880 <_dtoa_r+0xa10>
 800787a:	9b02      	ldr	r3, [sp, #8]
 800787c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007880:	9b00      	ldr	r3, [sp, #0]
 8007882:	f883 8000 	strb.w	r8, [r3]
 8007886:	e63f      	b.n	8007508 <_dtoa_r+0x698>
 8007888:	4628      	mov	r0, r5
 800788a:	e7bb      	b.n	8007804 <_dtoa_r+0x994>
 800788c:	2201      	movs	r2, #1
 800788e:	e7e1      	b.n	8007854 <_dtoa_r+0x9e4>
 8007890:	9b08      	ldr	r3, [sp, #32]
 8007892:	2b00      	cmp	r3, #0
 8007894:	db04      	blt.n	80078a0 <_dtoa_r+0xa30>
 8007896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007898:	430b      	orrs	r3, r1
 800789a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800789c:	430b      	orrs	r3, r1
 800789e:	d120      	bne.n	80078e2 <_dtoa_r+0xa72>
 80078a0:	2a00      	cmp	r2, #0
 80078a2:	dded      	ble.n	8007880 <_dtoa_r+0xa10>
 80078a4:	4649      	mov	r1, r9
 80078a6:	2201      	movs	r2, #1
 80078a8:	4658      	mov	r0, fp
 80078aa:	f000 fafd 	bl	8007ea8 <__lshift>
 80078ae:	4621      	mov	r1, r4
 80078b0:	4681      	mov	r9, r0
 80078b2:	f000 fb65 	bl	8007f80 <__mcmp>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	dc03      	bgt.n	80078c2 <_dtoa_r+0xa52>
 80078ba:	d1e1      	bne.n	8007880 <_dtoa_r+0xa10>
 80078bc:	f018 0f01 	tst.w	r8, #1
 80078c0:	d0de      	beq.n	8007880 <_dtoa_r+0xa10>
 80078c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078c6:	d1d8      	bne.n	800787a <_dtoa_r+0xa0a>
 80078c8:	9a00      	ldr	r2, [sp, #0]
 80078ca:	2339      	movs	r3, #57	@ 0x39
 80078cc:	7013      	strb	r3, [r2, #0]
 80078ce:	4633      	mov	r3, r6
 80078d0:	461e      	mov	r6, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078d8:	2a39      	cmp	r2, #57	@ 0x39
 80078da:	d052      	beq.n	8007982 <_dtoa_r+0xb12>
 80078dc:	3201      	adds	r2, #1
 80078de:	701a      	strb	r2, [r3, #0]
 80078e0:	e612      	b.n	8007508 <_dtoa_r+0x698>
 80078e2:	2a00      	cmp	r2, #0
 80078e4:	dd07      	ble.n	80078f6 <_dtoa_r+0xa86>
 80078e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078ea:	d0ed      	beq.n	80078c8 <_dtoa_r+0xa58>
 80078ec:	9a00      	ldr	r2, [sp, #0]
 80078ee:	f108 0301 	add.w	r3, r8, #1
 80078f2:	7013      	strb	r3, [r2, #0]
 80078f4:	e608      	b.n	8007508 <_dtoa_r+0x698>
 80078f6:	9b07      	ldr	r3, [sp, #28]
 80078f8:	9a07      	ldr	r2, [sp, #28]
 80078fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80078fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007900:	4293      	cmp	r3, r2
 8007902:	d028      	beq.n	8007956 <_dtoa_r+0xae6>
 8007904:	4649      	mov	r1, r9
 8007906:	2300      	movs	r3, #0
 8007908:	220a      	movs	r2, #10
 800790a:	4658      	mov	r0, fp
 800790c:	f000 f920 	bl	8007b50 <__multadd>
 8007910:	42af      	cmp	r7, r5
 8007912:	4681      	mov	r9, r0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	f04f 020a 	mov.w	r2, #10
 800791c:	4639      	mov	r1, r7
 800791e:	4658      	mov	r0, fp
 8007920:	d107      	bne.n	8007932 <_dtoa_r+0xac2>
 8007922:	f000 f915 	bl	8007b50 <__multadd>
 8007926:	4607      	mov	r7, r0
 8007928:	4605      	mov	r5, r0
 800792a:	9b07      	ldr	r3, [sp, #28]
 800792c:	3301      	adds	r3, #1
 800792e:	9307      	str	r3, [sp, #28]
 8007930:	e774      	b.n	800781c <_dtoa_r+0x9ac>
 8007932:	f000 f90d 	bl	8007b50 <__multadd>
 8007936:	4629      	mov	r1, r5
 8007938:	4607      	mov	r7, r0
 800793a:	2300      	movs	r3, #0
 800793c:	220a      	movs	r2, #10
 800793e:	4658      	mov	r0, fp
 8007940:	f000 f906 	bl	8007b50 <__multadd>
 8007944:	4605      	mov	r5, r0
 8007946:	e7f0      	b.n	800792a <_dtoa_r+0xaba>
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	bfcc      	ite	gt
 800794e:	461e      	movgt	r6, r3
 8007950:	2601      	movle	r6, #1
 8007952:	4456      	add	r6, sl
 8007954:	2700      	movs	r7, #0
 8007956:	4649      	mov	r1, r9
 8007958:	2201      	movs	r2, #1
 800795a:	4658      	mov	r0, fp
 800795c:	f000 faa4 	bl	8007ea8 <__lshift>
 8007960:	4621      	mov	r1, r4
 8007962:	4681      	mov	r9, r0
 8007964:	f000 fb0c 	bl	8007f80 <__mcmp>
 8007968:	2800      	cmp	r0, #0
 800796a:	dcb0      	bgt.n	80078ce <_dtoa_r+0xa5e>
 800796c:	d102      	bne.n	8007974 <_dtoa_r+0xb04>
 800796e:	f018 0f01 	tst.w	r8, #1
 8007972:	d1ac      	bne.n	80078ce <_dtoa_r+0xa5e>
 8007974:	4633      	mov	r3, r6
 8007976:	461e      	mov	r6, r3
 8007978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800797c:	2a30      	cmp	r2, #48	@ 0x30
 800797e:	d0fa      	beq.n	8007976 <_dtoa_r+0xb06>
 8007980:	e5c2      	b.n	8007508 <_dtoa_r+0x698>
 8007982:	459a      	cmp	sl, r3
 8007984:	d1a4      	bne.n	80078d0 <_dtoa_r+0xa60>
 8007986:	9b04      	ldr	r3, [sp, #16]
 8007988:	3301      	adds	r3, #1
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	2331      	movs	r3, #49	@ 0x31
 800798e:	f88a 3000 	strb.w	r3, [sl]
 8007992:	e5b9      	b.n	8007508 <_dtoa_r+0x698>
 8007994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007996:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80079f4 <_dtoa_r+0xb84>
 800799a:	b11b      	cbz	r3, 80079a4 <_dtoa_r+0xb34>
 800799c:	f10a 0308 	add.w	r3, sl, #8
 80079a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	4650      	mov	r0, sl
 80079a6:	b019      	add	sp, #100	@ 0x64
 80079a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	f77f ae37 	ble.w	8007622 <_dtoa_r+0x7b2>
 80079b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079b8:	2001      	movs	r0, #1
 80079ba:	e655      	b.n	8007668 <_dtoa_r+0x7f8>
 80079bc:	9b00      	ldr	r3, [sp, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f77f aed6 	ble.w	8007770 <_dtoa_r+0x900>
 80079c4:	4656      	mov	r6, sl
 80079c6:	4621      	mov	r1, r4
 80079c8:	4648      	mov	r0, r9
 80079ca:	f7ff f9c6 	bl	8006d5a <quorem>
 80079ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079d2:	f806 8b01 	strb.w	r8, [r6], #1
 80079d6:	9b00      	ldr	r3, [sp, #0]
 80079d8:	eba6 020a 	sub.w	r2, r6, sl
 80079dc:	4293      	cmp	r3, r2
 80079de:	ddb3      	ble.n	8007948 <_dtoa_r+0xad8>
 80079e0:	4649      	mov	r1, r9
 80079e2:	2300      	movs	r3, #0
 80079e4:	220a      	movs	r2, #10
 80079e6:	4658      	mov	r0, fp
 80079e8:	f000 f8b2 	bl	8007b50 <__multadd>
 80079ec:	4681      	mov	r9, r0
 80079ee:	e7ea      	b.n	80079c6 <_dtoa_r+0xb56>
 80079f0:	080092dc 	.word	0x080092dc
 80079f4:	08009260 	.word	0x08009260

080079f8 <_free_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4605      	mov	r5, r0
 80079fc:	2900      	cmp	r1, #0
 80079fe:	d041      	beq.n	8007a84 <_free_r+0x8c>
 8007a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a04:	1f0c      	subs	r4, r1, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	bfb8      	it	lt
 8007a0a:	18e4      	addlt	r4, r4, r3
 8007a0c:	f7fe fb7e 	bl	800610c <__malloc_lock>
 8007a10:	4a1d      	ldr	r2, [pc, #116]	@ (8007a88 <_free_r+0x90>)
 8007a12:	6813      	ldr	r3, [r2, #0]
 8007a14:	b933      	cbnz	r3, 8007a24 <_free_r+0x2c>
 8007a16:	6063      	str	r3, [r4, #4]
 8007a18:	6014      	str	r4, [r2, #0]
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a20:	f7fe bb7a 	b.w	8006118 <__malloc_unlock>
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d908      	bls.n	8007a3a <_free_r+0x42>
 8007a28:	6820      	ldr	r0, [r4, #0]
 8007a2a:	1821      	adds	r1, r4, r0
 8007a2c:	428b      	cmp	r3, r1
 8007a2e:	bf01      	itttt	eq
 8007a30:	6819      	ldreq	r1, [r3, #0]
 8007a32:	685b      	ldreq	r3, [r3, #4]
 8007a34:	1809      	addeq	r1, r1, r0
 8007a36:	6021      	streq	r1, [r4, #0]
 8007a38:	e7ed      	b.n	8007a16 <_free_r+0x1e>
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	b10b      	cbz	r3, 8007a44 <_free_r+0x4c>
 8007a40:	42a3      	cmp	r3, r4
 8007a42:	d9fa      	bls.n	8007a3a <_free_r+0x42>
 8007a44:	6811      	ldr	r1, [r2, #0]
 8007a46:	1850      	adds	r0, r2, r1
 8007a48:	42a0      	cmp	r0, r4
 8007a4a:	d10b      	bne.n	8007a64 <_free_r+0x6c>
 8007a4c:	6820      	ldr	r0, [r4, #0]
 8007a4e:	4401      	add	r1, r0
 8007a50:	1850      	adds	r0, r2, r1
 8007a52:	4283      	cmp	r3, r0
 8007a54:	6011      	str	r1, [r2, #0]
 8007a56:	d1e0      	bne.n	8007a1a <_free_r+0x22>
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	6053      	str	r3, [r2, #4]
 8007a5e:	4408      	add	r0, r1
 8007a60:	6010      	str	r0, [r2, #0]
 8007a62:	e7da      	b.n	8007a1a <_free_r+0x22>
 8007a64:	d902      	bls.n	8007a6c <_free_r+0x74>
 8007a66:	230c      	movs	r3, #12
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	e7d6      	b.n	8007a1a <_free_r+0x22>
 8007a6c:	6820      	ldr	r0, [r4, #0]
 8007a6e:	1821      	adds	r1, r4, r0
 8007a70:	428b      	cmp	r3, r1
 8007a72:	bf04      	itt	eq
 8007a74:	6819      	ldreq	r1, [r3, #0]
 8007a76:	685b      	ldreq	r3, [r3, #4]
 8007a78:	6063      	str	r3, [r4, #4]
 8007a7a:	bf04      	itt	eq
 8007a7c:	1809      	addeq	r1, r1, r0
 8007a7e:	6021      	streq	r1, [r4, #0]
 8007a80:	6054      	str	r4, [r2, #4]
 8007a82:	e7ca      	b.n	8007a1a <_free_r+0x22>
 8007a84:	bd38      	pop	{r3, r4, r5, pc}
 8007a86:	bf00      	nop
 8007a88:	2000072c 	.word	0x2000072c

08007a8c <_Balloc>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	69c6      	ldr	r6, [r0, #28]
 8007a90:	4604      	mov	r4, r0
 8007a92:	460d      	mov	r5, r1
 8007a94:	b976      	cbnz	r6, 8007ab4 <_Balloc+0x28>
 8007a96:	2010      	movs	r0, #16
 8007a98:	f7fe fa86 	bl	8005fa8 <malloc>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	61e0      	str	r0, [r4, #28]
 8007aa0:	b920      	cbnz	r0, 8007aac <_Balloc+0x20>
 8007aa2:	4b18      	ldr	r3, [pc, #96]	@ (8007b04 <_Balloc+0x78>)
 8007aa4:	4818      	ldr	r0, [pc, #96]	@ (8007b08 <_Balloc+0x7c>)
 8007aa6:	216b      	movs	r1, #107	@ 0x6b
 8007aa8:	f000 fd90 	bl	80085cc <__assert_func>
 8007aac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ab0:	6006      	str	r6, [r0, #0]
 8007ab2:	60c6      	str	r6, [r0, #12]
 8007ab4:	69e6      	ldr	r6, [r4, #28]
 8007ab6:	68f3      	ldr	r3, [r6, #12]
 8007ab8:	b183      	cbz	r3, 8007adc <_Balloc+0x50>
 8007aba:	69e3      	ldr	r3, [r4, #28]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ac2:	b9b8      	cbnz	r0, 8007af4 <_Balloc+0x68>
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	fa01 f605 	lsl.w	r6, r1, r5
 8007aca:	1d72      	adds	r2, r6, #5
 8007acc:	0092      	lsls	r2, r2, #2
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 fd9a 	bl	8008608 <_calloc_r>
 8007ad4:	b160      	cbz	r0, 8007af0 <_Balloc+0x64>
 8007ad6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ada:	e00e      	b.n	8007afa <_Balloc+0x6e>
 8007adc:	2221      	movs	r2, #33	@ 0x21
 8007ade:	2104      	movs	r1, #4
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 fd91 	bl	8008608 <_calloc_r>
 8007ae6:	69e3      	ldr	r3, [r4, #28]
 8007ae8:	60f0      	str	r0, [r6, #12]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e4      	bne.n	8007aba <_Balloc+0x2e>
 8007af0:	2000      	movs	r0, #0
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	6802      	ldr	r2, [r0, #0]
 8007af6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007afa:	2300      	movs	r3, #0
 8007afc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b00:	e7f7      	b.n	8007af2 <_Balloc+0x66>
 8007b02:	bf00      	nop
 8007b04:	0800926d 	.word	0x0800926d
 8007b08:	080092ed 	.word	0x080092ed

08007b0c <_Bfree>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	69c6      	ldr	r6, [r0, #28]
 8007b10:	4605      	mov	r5, r0
 8007b12:	460c      	mov	r4, r1
 8007b14:	b976      	cbnz	r6, 8007b34 <_Bfree+0x28>
 8007b16:	2010      	movs	r0, #16
 8007b18:	f7fe fa46 	bl	8005fa8 <malloc>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	61e8      	str	r0, [r5, #28]
 8007b20:	b920      	cbnz	r0, 8007b2c <_Bfree+0x20>
 8007b22:	4b09      	ldr	r3, [pc, #36]	@ (8007b48 <_Bfree+0x3c>)
 8007b24:	4809      	ldr	r0, [pc, #36]	@ (8007b4c <_Bfree+0x40>)
 8007b26:	218f      	movs	r1, #143	@ 0x8f
 8007b28:	f000 fd50 	bl	80085cc <__assert_func>
 8007b2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b30:	6006      	str	r6, [r0, #0]
 8007b32:	60c6      	str	r6, [r0, #12]
 8007b34:	b13c      	cbz	r4, 8007b46 <_Bfree+0x3a>
 8007b36:	69eb      	ldr	r3, [r5, #28]
 8007b38:	6862      	ldr	r2, [r4, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b40:	6021      	str	r1, [r4, #0]
 8007b42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b46:	bd70      	pop	{r4, r5, r6, pc}
 8007b48:	0800926d 	.word	0x0800926d
 8007b4c:	080092ed 	.word	0x080092ed

08007b50 <__multadd>:
 8007b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b54:	690d      	ldr	r5, [r1, #16]
 8007b56:	4607      	mov	r7, r0
 8007b58:	460c      	mov	r4, r1
 8007b5a:	461e      	mov	r6, r3
 8007b5c:	f101 0c14 	add.w	ip, r1, #20
 8007b60:	2000      	movs	r0, #0
 8007b62:	f8dc 3000 	ldr.w	r3, [ip]
 8007b66:	b299      	uxth	r1, r3
 8007b68:	fb02 6101 	mla	r1, r2, r1, r6
 8007b6c:	0c1e      	lsrs	r6, r3, #16
 8007b6e:	0c0b      	lsrs	r3, r1, #16
 8007b70:	fb02 3306 	mla	r3, r2, r6, r3
 8007b74:	b289      	uxth	r1, r1
 8007b76:	3001      	adds	r0, #1
 8007b78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b7c:	4285      	cmp	r5, r0
 8007b7e:	f84c 1b04 	str.w	r1, [ip], #4
 8007b82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b86:	dcec      	bgt.n	8007b62 <__multadd+0x12>
 8007b88:	b30e      	cbz	r6, 8007bce <__multadd+0x7e>
 8007b8a:	68a3      	ldr	r3, [r4, #8]
 8007b8c:	42ab      	cmp	r3, r5
 8007b8e:	dc19      	bgt.n	8007bc4 <__multadd+0x74>
 8007b90:	6861      	ldr	r1, [r4, #4]
 8007b92:	4638      	mov	r0, r7
 8007b94:	3101      	adds	r1, #1
 8007b96:	f7ff ff79 	bl	8007a8c <_Balloc>
 8007b9a:	4680      	mov	r8, r0
 8007b9c:	b928      	cbnz	r0, 8007baa <__multadd+0x5a>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd4 <__multadd+0x84>)
 8007ba2:	480d      	ldr	r0, [pc, #52]	@ (8007bd8 <__multadd+0x88>)
 8007ba4:	21ba      	movs	r1, #186	@ 0xba
 8007ba6:	f000 fd11 	bl	80085cc <__assert_func>
 8007baa:	6922      	ldr	r2, [r4, #16]
 8007bac:	3202      	adds	r2, #2
 8007bae:	f104 010c 	add.w	r1, r4, #12
 8007bb2:	0092      	lsls	r2, r2, #2
 8007bb4:	300c      	adds	r0, #12
 8007bb6:	f7ff f8c2 	bl	8006d3e <memcpy>
 8007bba:	4621      	mov	r1, r4
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	f7ff ffa5 	bl	8007b0c <_Bfree>
 8007bc2:	4644      	mov	r4, r8
 8007bc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bc8:	3501      	adds	r5, #1
 8007bca:	615e      	str	r6, [r3, #20]
 8007bcc:	6125      	str	r5, [r4, #16]
 8007bce:	4620      	mov	r0, r4
 8007bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd4:	080092dc 	.word	0x080092dc
 8007bd8:	080092ed 	.word	0x080092ed

08007bdc <__hi0bits>:
 8007bdc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007be0:	4603      	mov	r3, r0
 8007be2:	bf36      	itet	cc
 8007be4:	0403      	lslcc	r3, r0, #16
 8007be6:	2000      	movcs	r0, #0
 8007be8:	2010      	movcc	r0, #16
 8007bea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bee:	bf3c      	itt	cc
 8007bf0:	021b      	lslcc	r3, r3, #8
 8007bf2:	3008      	addcc	r0, #8
 8007bf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bf8:	bf3c      	itt	cc
 8007bfa:	011b      	lslcc	r3, r3, #4
 8007bfc:	3004      	addcc	r0, #4
 8007bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c02:	bf3c      	itt	cc
 8007c04:	009b      	lslcc	r3, r3, #2
 8007c06:	3002      	addcc	r0, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	db05      	blt.n	8007c18 <__hi0bits+0x3c>
 8007c0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c10:	f100 0001 	add.w	r0, r0, #1
 8007c14:	bf08      	it	eq
 8007c16:	2020      	moveq	r0, #32
 8007c18:	4770      	bx	lr

08007c1a <__lo0bits>:
 8007c1a:	6803      	ldr	r3, [r0, #0]
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	f013 0007 	ands.w	r0, r3, #7
 8007c22:	d00b      	beq.n	8007c3c <__lo0bits+0x22>
 8007c24:	07d9      	lsls	r1, r3, #31
 8007c26:	d421      	bmi.n	8007c6c <__lo0bits+0x52>
 8007c28:	0798      	lsls	r0, r3, #30
 8007c2a:	bf49      	itett	mi
 8007c2c:	085b      	lsrmi	r3, r3, #1
 8007c2e:	089b      	lsrpl	r3, r3, #2
 8007c30:	2001      	movmi	r0, #1
 8007c32:	6013      	strmi	r3, [r2, #0]
 8007c34:	bf5c      	itt	pl
 8007c36:	6013      	strpl	r3, [r2, #0]
 8007c38:	2002      	movpl	r0, #2
 8007c3a:	4770      	bx	lr
 8007c3c:	b299      	uxth	r1, r3
 8007c3e:	b909      	cbnz	r1, 8007c44 <__lo0bits+0x2a>
 8007c40:	0c1b      	lsrs	r3, r3, #16
 8007c42:	2010      	movs	r0, #16
 8007c44:	b2d9      	uxtb	r1, r3
 8007c46:	b909      	cbnz	r1, 8007c4c <__lo0bits+0x32>
 8007c48:	3008      	adds	r0, #8
 8007c4a:	0a1b      	lsrs	r3, r3, #8
 8007c4c:	0719      	lsls	r1, r3, #28
 8007c4e:	bf04      	itt	eq
 8007c50:	091b      	lsreq	r3, r3, #4
 8007c52:	3004      	addeq	r0, #4
 8007c54:	0799      	lsls	r1, r3, #30
 8007c56:	bf04      	itt	eq
 8007c58:	089b      	lsreq	r3, r3, #2
 8007c5a:	3002      	addeq	r0, #2
 8007c5c:	07d9      	lsls	r1, r3, #31
 8007c5e:	d403      	bmi.n	8007c68 <__lo0bits+0x4e>
 8007c60:	085b      	lsrs	r3, r3, #1
 8007c62:	f100 0001 	add.w	r0, r0, #1
 8007c66:	d003      	beq.n	8007c70 <__lo0bits+0x56>
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	4770      	bx	lr
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	4770      	bx	lr
 8007c70:	2020      	movs	r0, #32
 8007c72:	4770      	bx	lr

08007c74 <__i2b>:
 8007c74:	b510      	push	{r4, lr}
 8007c76:	460c      	mov	r4, r1
 8007c78:	2101      	movs	r1, #1
 8007c7a:	f7ff ff07 	bl	8007a8c <_Balloc>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	b928      	cbnz	r0, 8007c8e <__i2b+0x1a>
 8007c82:	4b05      	ldr	r3, [pc, #20]	@ (8007c98 <__i2b+0x24>)
 8007c84:	4805      	ldr	r0, [pc, #20]	@ (8007c9c <__i2b+0x28>)
 8007c86:	f240 1145 	movw	r1, #325	@ 0x145
 8007c8a:	f000 fc9f 	bl	80085cc <__assert_func>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	6144      	str	r4, [r0, #20]
 8007c92:	6103      	str	r3, [r0, #16]
 8007c94:	bd10      	pop	{r4, pc}
 8007c96:	bf00      	nop
 8007c98:	080092dc 	.word	0x080092dc
 8007c9c:	080092ed 	.word	0x080092ed

08007ca0 <__multiply>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	4614      	mov	r4, r2
 8007ca6:	690a      	ldr	r2, [r1, #16]
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	bfa8      	it	ge
 8007cae:	4623      	movge	r3, r4
 8007cb0:	460f      	mov	r7, r1
 8007cb2:	bfa4      	itt	ge
 8007cb4:	460c      	movge	r4, r1
 8007cb6:	461f      	movge	r7, r3
 8007cb8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007cbc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007cc0:	68a3      	ldr	r3, [r4, #8]
 8007cc2:	6861      	ldr	r1, [r4, #4]
 8007cc4:	eb0a 0609 	add.w	r6, sl, r9
 8007cc8:	42b3      	cmp	r3, r6
 8007cca:	b085      	sub	sp, #20
 8007ccc:	bfb8      	it	lt
 8007cce:	3101      	addlt	r1, #1
 8007cd0:	f7ff fedc 	bl	8007a8c <_Balloc>
 8007cd4:	b930      	cbnz	r0, 8007ce4 <__multiply+0x44>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	4b44      	ldr	r3, [pc, #272]	@ (8007dec <__multiply+0x14c>)
 8007cda:	4845      	ldr	r0, [pc, #276]	@ (8007df0 <__multiply+0x150>)
 8007cdc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ce0:	f000 fc74 	bl	80085cc <__assert_func>
 8007ce4:	f100 0514 	add.w	r5, r0, #20
 8007ce8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cec:	462b      	mov	r3, r5
 8007cee:	2200      	movs	r2, #0
 8007cf0:	4543      	cmp	r3, r8
 8007cf2:	d321      	bcc.n	8007d38 <__multiply+0x98>
 8007cf4:	f107 0114 	add.w	r1, r7, #20
 8007cf8:	f104 0214 	add.w	r2, r4, #20
 8007cfc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d00:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d04:	9302      	str	r3, [sp, #8]
 8007d06:	1b13      	subs	r3, r2, r4
 8007d08:	3b15      	subs	r3, #21
 8007d0a:	f023 0303 	bic.w	r3, r3, #3
 8007d0e:	3304      	adds	r3, #4
 8007d10:	f104 0715 	add.w	r7, r4, #21
 8007d14:	42ba      	cmp	r2, r7
 8007d16:	bf38      	it	cc
 8007d18:	2304      	movcc	r3, #4
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	9b02      	ldr	r3, [sp, #8]
 8007d1e:	9103      	str	r1, [sp, #12]
 8007d20:	428b      	cmp	r3, r1
 8007d22:	d80c      	bhi.n	8007d3e <__multiply+0x9e>
 8007d24:	2e00      	cmp	r6, #0
 8007d26:	dd03      	ble.n	8007d30 <__multiply+0x90>
 8007d28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d05b      	beq.n	8007de8 <__multiply+0x148>
 8007d30:	6106      	str	r6, [r0, #16]
 8007d32:	b005      	add	sp, #20
 8007d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d38:	f843 2b04 	str.w	r2, [r3], #4
 8007d3c:	e7d8      	b.n	8007cf0 <__multiply+0x50>
 8007d3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007d42:	f1ba 0f00 	cmp.w	sl, #0
 8007d46:	d024      	beq.n	8007d92 <__multiply+0xf2>
 8007d48:	f104 0e14 	add.w	lr, r4, #20
 8007d4c:	46a9      	mov	r9, r5
 8007d4e:	f04f 0c00 	mov.w	ip, #0
 8007d52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d56:	f8d9 3000 	ldr.w	r3, [r9]
 8007d5a:	fa1f fb87 	uxth.w	fp, r7
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d64:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007d68:	f8d9 7000 	ldr.w	r7, [r9]
 8007d6c:	4463      	add	r3, ip
 8007d6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d72:	fb0a c70b 	mla	r7, sl, fp, ip
 8007d76:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d80:	4572      	cmp	r2, lr
 8007d82:	f849 3b04 	str.w	r3, [r9], #4
 8007d86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d8a:	d8e2      	bhi.n	8007d52 <__multiply+0xb2>
 8007d8c:	9b01      	ldr	r3, [sp, #4]
 8007d8e:	f845 c003 	str.w	ip, [r5, r3]
 8007d92:	9b03      	ldr	r3, [sp, #12]
 8007d94:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d98:	3104      	adds	r1, #4
 8007d9a:	f1b9 0f00 	cmp.w	r9, #0
 8007d9e:	d021      	beq.n	8007de4 <__multiply+0x144>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	f104 0c14 	add.w	ip, r4, #20
 8007da6:	46ae      	mov	lr, r5
 8007da8:	f04f 0a00 	mov.w	sl, #0
 8007dac:	f8bc b000 	ldrh.w	fp, [ip]
 8007db0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007db4:	fb09 770b 	mla	r7, r9, fp, r7
 8007db8:	4457      	add	r7, sl
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007dc0:	f84e 3b04 	str.w	r3, [lr], #4
 8007dc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007dc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dcc:	f8be 3000 	ldrh.w	r3, [lr]
 8007dd0:	fb09 330a 	mla	r3, r9, sl, r3
 8007dd4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007dd8:	4562      	cmp	r2, ip
 8007dda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dde:	d8e5      	bhi.n	8007dac <__multiply+0x10c>
 8007de0:	9f01      	ldr	r7, [sp, #4]
 8007de2:	51eb      	str	r3, [r5, r7]
 8007de4:	3504      	adds	r5, #4
 8007de6:	e799      	b.n	8007d1c <__multiply+0x7c>
 8007de8:	3e01      	subs	r6, #1
 8007dea:	e79b      	b.n	8007d24 <__multiply+0x84>
 8007dec:	080092dc 	.word	0x080092dc
 8007df0:	080092ed 	.word	0x080092ed

08007df4 <__pow5mult>:
 8007df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df8:	4615      	mov	r5, r2
 8007dfa:	f012 0203 	ands.w	r2, r2, #3
 8007dfe:	4607      	mov	r7, r0
 8007e00:	460e      	mov	r6, r1
 8007e02:	d007      	beq.n	8007e14 <__pow5mult+0x20>
 8007e04:	4c25      	ldr	r4, [pc, #148]	@ (8007e9c <__pow5mult+0xa8>)
 8007e06:	3a01      	subs	r2, #1
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e0e:	f7ff fe9f 	bl	8007b50 <__multadd>
 8007e12:	4606      	mov	r6, r0
 8007e14:	10ad      	asrs	r5, r5, #2
 8007e16:	d03d      	beq.n	8007e94 <__pow5mult+0xa0>
 8007e18:	69fc      	ldr	r4, [r7, #28]
 8007e1a:	b97c      	cbnz	r4, 8007e3c <__pow5mult+0x48>
 8007e1c:	2010      	movs	r0, #16
 8007e1e:	f7fe f8c3 	bl	8005fa8 <malloc>
 8007e22:	4602      	mov	r2, r0
 8007e24:	61f8      	str	r0, [r7, #28]
 8007e26:	b928      	cbnz	r0, 8007e34 <__pow5mult+0x40>
 8007e28:	4b1d      	ldr	r3, [pc, #116]	@ (8007ea0 <__pow5mult+0xac>)
 8007e2a:	481e      	ldr	r0, [pc, #120]	@ (8007ea4 <__pow5mult+0xb0>)
 8007e2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e30:	f000 fbcc 	bl	80085cc <__assert_func>
 8007e34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e38:	6004      	str	r4, [r0, #0]
 8007e3a:	60c4      	str	r4, [r0, #12]
 8007e3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007e40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e44:	b94c      	cbnz	r4, 8007e5a <__pow5mult+0x66>
 8007e46:	f240 2171 	movw	r1, #625	@ 0x271
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	f7ff ff12 	bl	8007c74 <__i2b>
 8007e50:	2300      	movs	r3, #0
 8007e52:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e56:	4604      	mov	r4, r0
 8007e58:	6003      	str	r3, [r0, #0]
 8007e5a:	f04f 0900 	mov.w	r9, #0
 8007e5e:	07eb      	lsls	r3, r5, #31
 8007e60:	d50a      	bpl.n	8007e78 <__pow5mult+0x84>
 8007e62:	4631      	mov	r1, r6
 8007e64:	4622      	mov	r2, r4
 8007e66:	4638      	mov	r0, r7
 8007e68:	f7ff ff1a 	bl	8007ca0 <__multiply>
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4680      	mov	r8, r0
 8007e70:	4638      	mov	r0, r7
 8007e72:	f7ff fe4b 	bl	8007b0c <_Bfree>
 8007e76:	4646      	mov	r6, r8
 8007e78:	106d      	asrs	r5, r5, #1
 8007e7a:	d00b      	beq.n	8007e94 <__pow5mult+0xa0>
 8007e7c:	6820      	ldr	r0, [r4, #0]
 8007e7e:	b938      	cbnz	r0, 8007e90 <__pow5mult+0x9c>
 8007e80:	4622      	mov	r2, r4
 8007e82:	4621      	mov	r1, r4
 8007e84:	4638      	mov	r0, r7
 8007e86:	f7ff ff0b 	bl	8007ca0 <__multiply>
 8007e8a:	6020      	str	r0, [r4, #0]
 8007e8c:	f8c0 9000 	str.w	r9, [r0]
 8007e90:	4604      	mov	r4, r0
 8007e92:	e7e4      	b.n	8007e5e <__pow5mult+0x6a>
 8007e94:	4630      	mov	r0, r6
 8007e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e9a:	bf00      	nop
 8007e9c:	08009348 	.word	0x08009348
 8007ea0:	0800926d 	.word	0x0800926d
 8007ea4:	080092ed 	.word	0x080092ed

08007ea8 <__lshift>:
 8007ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eac:	460c      	mov	r4, r1
 8007eae:	6849      	ldr	r1, [r1, #4]
 8007eb0:	6923      	ldr	r3, [r4, #16]
 8007eb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007eb6:	68a3      	ldr	r3, [r4, #8]
 8007eb8:	4607      	mov	r7, r0
 8007eba:	4691      	mov	r9, r2
 8007ebc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ec0:	f108 0601 	add.w	r6, r8, #1
 8007ec4:	42b3      	cmp	r3, r6
 8007ec6:	db0b      	blt.n	8007ee0 <__lshift+0x38>
 8007ec8:	4638      	mov	r0, r7
 8007eca:	f7ff fddf 	bl	8007a8c <_Balloc>
 8007ece:	4605      	mov	r5, r0
 8007ed0:	b948      	cbnz	r0, 8007ee6 <__lshift+0x3e>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	4b28      	ldr	r3, [pc, #160]	@ (8007f78 <__lshift+0xd0>)
 8007ed6:	4829      	ldr	r0, [pc, #164]	@ (8007f7c <__lshift+0xd4>)
 8007ed8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007edc:	f000 fb76 	bl	80085cc <__assert_func>
 8007ee0:	3101      	adds	r1, #1
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	e7ee      	b.n	8007ec4 <__lshift+0x1c>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f100 0114 	add.w	r1, r0, #20
 8007eec:	f100 0210 	add.w	r2, r0, #16
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	4553      	cmp	r3, sl
 8007ef4:	db33      	blt.n	8007f5e <__lshift+0xb6>
 8007ef6:	6920      	ldr	r0, [r4, #16]
 8007ef8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007efc:	f104 0314 	add.w	r3, r4, #20
 8007f00:	f019 091f 	ands.w	r9, r9, #31
 8007f04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f0c:	d02b      	beq.n	8007f66 <__lshift+0xbe>
 8007f0e:	f1c9 0e20 	rsb	lr, r9, #32
 8007f12:	468a      	mov	sl, r1
 8007f14:	2200      	movs	r2, #0
 8007f16:	6818      	ldr	r0, [r3, #0]
 8007f18:	fa00 f009 	lsl.w	r0, r0, r9
 8007f1c:	4310      	orrs	r0, r2
 8007f1e:	f84a 0b04 	str.w	r0, [sl], #4
 8007f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f26:	459c      	cmp	ip, r3
 8007f28:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f2c:	d8f3      	bhi.n	8007f16 <__lshift+0x6e>
 8007f2e:	ebac 0304 	sub.w	r3, ip, r4
 8007f32:	3b15      	subs	r3, #21
 8007f34:	f023 0303 	bic.w	r3, r3, #3
 8007f38:	3304      	adds	r3, #4
 8007f3a:	f104 0015 	add.w	r0, r4, #21
 8007f3e:	4584      	cmp	ip, r0
 8007f40:	bf38      	it	cc
 8007f42:	2304      	movcc	r3, #4
 8007f44:	50ca      	str	r2, [r1, r3]
 8007f46:	b10a      	cbz	r2, 8007f4c <__lshift+0xa4>
 8007f48:	f108 0602 	add.w	r6, r8, #2
 8007f4c:	3e01      	subs	r6, #1
 8007f4e:	4638      	mov	r0, r7
 8007f50:	612e      	str	r6, [r5, #16]
 8007f52:	4621      	mov	r1, r4
 8007f54:	f7ff fdda 	bl	8007b0c <_Bfree>
 8007f58:	4628      	mov	r0, r5
 8007f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f62:	3301      	adds	r3, #1
 8007f64:	e7c5      	b.n	8007ef2 <__lshift+0x4a>
 8007f66:	3904      	subs	r1, #4
 8007f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f70:	459c      	cmp	ip, r3
 8007f72:	d8f9      	bhi.n	8007f68 <__lshift+0xc0>
 8007f74:	e7ea      	b.n	8007f4c <__lshift+0xa4>
 8007f76:	bf00      	nop
 8007f78:	080092dc 	.word	0x080092dc
 8007f7c:	080092ed 	.word	0x080092ed

08007f80 <__mcmp>:
 8007f80:	690a      	ldr	r2, [r1, #16]
 8007f82:	4603      	mov	r3, r0
 8007f84:	6900      	ldr	r0, [r0, #16]
 8007f86:	1a80      	subs	r0, r0, r2
 8007f88:	b530      	push	{r4, r5, lr}
 8007f8a:	d10e      	bne.n	8007faa <__mcmp+0x2a>
 8007f8c:	3314      	adds	r3, #20
 8007f8e:	3114      	adds	r1, #20
 8007f90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fa0:	4295      	cmp	r5, r2
 8007fa2:	d003      	beq.n	8007fac <__mcmp+0x2c>
 8007fa4:	d205      	bcs.n	8007fb2 <__mcmp+0x32>
 8007fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8007faa:	bd30      	pop	{r4, r5, pc}
 8007fac:	42a3      	cmp	r3, r4
 8007fae:	d3f3      	bcc.n	8007f98 <__mcmp+0x18>
 8007fb0:	e7fb      	b.n	8007faa <__mcmp+0x2a>
 8007fb2:	2001      	movs	r0, #1
 8007fb4:	e7f9      	b.n	8007faa <__mcmp+0x2a>
	...

08007fb8 <__mdiff>:
 8007fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	4689      	mov	r9, r1
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	4648      	mov	r0, r9
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	f7ff ffdb 	bl	8007f80 <__mcmp>
 8007fca:	1e05      	subs	r5, r0, #0
 8007fcc:	d112      	bne.n	8007ff4 <__mdiff+0x3c>
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7ff fd5b 	bl	8007a8c <_Balloc>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	b928      	cbnz	r0, 8007fe6 <__mdiff+0x2e>
 8007fda:	4b3f      	ldr	r3, [pc, #252]	@ (80080d8 <__mdiff+0x120>)
 8007fdc:	f240 2137 	movw	r1, #567	@ 0x237
 8007fe0:	483e      	ldr	r0, [pc, #248]	@ (80080dc <__mdiff+0x124>)
 8007fe2:	f000 faf3 	bl	80085cc <__assert_func>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fec:	4610      	mov	r0, r2
 8007fee:	b003      	add	sp, #12
 8007ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff4:	bfbc      	itt	lt
 8007ff6:	464b      	movlt	r3, r9
 8007ff8:	46a1      	movlt	r9, r4
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008000:	bfba      	itte	lt
 8008002:	461c      	movlt	r4, r3
 8008004:	2501      	movlt	r5, #1
 8008006:	2500      	movge	r5, #0
 8008008:	f7ff fd40 	bl	8007a8c <_Balloc>
 800800c:	4602      	mov	r2, r0
 800800e:	b918      	cbnz	r0, 8008018 <__mdiff+0x60>
 8008010:	4b31      	ldr	r3, [pc, #196]	@ (80080d8 <__mdiff+0x120>)
 8008012:	f240 2145 	movw	r1, #581	@ 0x245
 8008016:	e7e3      	b.n	8007fe0 <__mdiff+0x28>
 8008018:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800801c:	6926      	ldr	r6, [r4, #16]
 800801e:	60c5      	str	r5, [r0, #12]
 8008020:	f109 0310 	add.w	r3, r9, #16
 8008024:	f109 0514 	add.w	r5, r9, #20
 8008028:	f104 0e14 	add.w	lr, r4, #20
 800802c:	f100 0b14 	add.w	fp, r0, #20
 8008030:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008034:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008038:	9301      	str	r3, [sp, #4]
 800803a:	46d9      	mov	r9, fp
 800803c:	f04f 0c00 	mov.w	ip, #0
 8008040:	9b01      	ldr	r3, [sp, #4]
 8008042:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008046:	f853 af04 	ldr.w	sl, [r3, #4]!
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	fa1f f38a 	uxth.w	r3, sl
 8008050:	4619      	mov	r1, r3
 8008052:	b283      	uxth	r3, r0
 8008054:	1acb      	subs	r3, r1, r3
 8008056:	0c00      	lsrs	r0, r0, #16
 8008058:	4463      	add	r3, ip
 800805a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800805e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008062:	b29b      	uxth	r3, r3
 8008064:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008068:	4576      	cmp	r6, lr
 800806a:	f849 3b04 	str.w	r3, [r9], #4
 800806e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008072:	d8e5      	bhi.n	8008040 <__mdiff+0x88>
 8008074:	1b33      	subs	r3, r6, r4
 8008076:	3b15      	subs	r3, #21
 8008078:	f023 0303 	bic.w	r3, r3, #3
 800807c:	3415      	adds	r4, #21
 800807e:	3304      	adds	r3, #4
 8008080:	42a6      	cmp	r6, r4
 8008082:	bf38      	it	cc
 8008084:	2304      	movcc	r3, #4
 8008086:	441d      	add	r5, r3
 8008088:	445b      	add	r3, fp
 800808a:	461e      	mov	r6, r3
 800808c:	462c      	mov	r4, r5
 800808e:	4544      	cmp	r4, r8
 8008090:	d30e      	bcc.n	80080b0 <__mdiff+0xf8>
 8008092:	f108 0103 	add.w	r1, r8, #3
 8008096:	1b49      	subs	r1, r1, r5
 8008098:	f021 0103 	bic.w	r1, r1, #3
 800809c:	3d03      	subs	r5, #3
 800809e:	45a8      	cmp	r8, r5
 80080a0:	bf38      	it	cc
 80080a2:	2100      	movcc	r1, #0
 80080a4:	440b      	add	r3, r1
 80080a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080aa:	b191      	cbz	r1, 80080d2 <__mdiff+0x11a>
 80080ac:	6117      	str	r7, [r2, #16]
 80080ae:	e79d      	b.n	8007fec <__mdiff+0x34>
 80080b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80080b4:	46e6      	mov	lr, ip
 80080b6:	0c08      	lsrs	r0, r1, #16
 80080b8:	fa1c fc81 	uxtah	ip, ip, r1
 80080bc:	4471      	add	r1, lr
 80080be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80080c2:	b289      	uxth	r1, r1
 80080c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80080c8:	f846 1b04 	str.w	r1, [r6], #4
 80080cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080d0:	e7dd      	b.n	800808e <__mdiff+0xd6>
 80080d2:	3f01      	subs	r7, #1
 80080d4:	e7e7      	b.n	80080a6 <__mdiff+0xee>
 80080d6:	bf00      	nop
 80080d8:	080092dc 	.word	0x080092dc
 80080dc:	080092ed 	.word	0x080092ed

080080e0 <__d2b>:
 80080e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080e4:	460f      	mov	r7, r1
 80080e6:	2101      	movs	r1, #1
 80080e8:	ec59 8b10 	vmov	r8, r9, d0
 80080ec:	4616      	mov	r6, r2
 80080ee:	f7ff fccd 	bl	8007a8c <_Balloc>
 80080f2:	4604      	mov	r4, r0
 80080f4:	b930      	cbnz	r0, 8008104 <__d2b+0x24>
 80080f6:	4602      	mov	r2, r0
 80080f8:	4b23      	ldr	r3, [pc, #140]	@ (8008188 <__d2b+0xa8>)
 80080fa:	4824      	ldr	r0, [pc, #144]	@ (800818c <__d2b+0xac>)
 80080fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8008100:	f000 fa64 	bl	80085cc <__assert_func>
 8008104:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008108:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800810c:	b10d      	cbz	r5, 8008112 <__d2b+0x32>
 800810e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	f1b8 0300 	subs.w	r3, r8, #0
 8008118:	d023      	beq.n	8008162 <__d2b+0x82>
 800811a:	4668      	mov	r0, sp
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	f7ff fd7c 	bl	8007c1a <__lo0bits>
 8008122:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008126:	b1d0      	cbz	r0, 800815e <__d2b+0x7e>
 8008128:	f1c0 0320 	rsb	r3, r0, #32
 800812c:	fa02 f303 	lsl.w	r3, r2, r3
 8008130:	430b      	orrs	r3, r1
 8008132:	40c2      	lsrs	r2, r0
 8008134:	6163      	str	r3, [r4, #20]
 8008136:	9201      	str	r2, [sp, #4]
 8008138:	9b01      	ldr	r3, [sp, #4]
 800813a:	61a3      	str	r3, [r4, #24]
 800813c:	2b00      	cmp	r3, #0
 800813e:	bf0c      	ite	eq
 8008140:	2201      	moveq	r2, #1
 8008142:	2202      	movne	r2, #2
 8008144:	6122      	str	r2, [r4, #16]
 8008146:	b1a5      	cbz	r5, 8008172 <__d2b+0x92>
 8008148:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800814c:	4405      	add	r5, r0
 800814e:	603d      	str	r5, [r7, #0]
 8008150:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008154:	6030      	str	r0, [r6, #0]
 8008156:	4620      	mov	r0, r4
 8008158:	b003      	add	sp, #12
 800815a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800815e:	6161      	str	r1, [r4, #20]
 8008160:	e7ea      	b.n	8008138 <__d2b+0x58>
 8008162:	a801      	add	r0, sp, #4
 8008164:	f7ff fd59 	bl	8007c1a <__lo0bits>
 8008168:	9b01      	ldr	r3, [sp, #4]
 800816a:	6163      	str	r3, [r4, #20]
 800816c:	3020      	adds	r0, #32
 800816e:	2201      	movs	r2, #1
 8008170:	e7e8      	b.n	8008144 <__d2b+0x64>
 8008172:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008176:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800817a:	6038      	str	r0, [r7, #0]
 800817c:	6918      	ldr	r0, [r3, #16]
 800817e:	f7ff fd2d 	bl	8007bdc <__hi0bits>
 8008182:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008186:	e7e5      	b.n	8008154 <__d2b+0x74>
 8008188:	080092dc 	.word	0x080092dc
 800818c:	080092ed 	.word	0x080092ed

08008190 <__ssputs_r>:
 8008190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008194:	688e      	ldr	r6, [r1, #8]
 8008196:	461f      	mov	r7, r3
 8008198:	42be      	cmp	r6, r7
 800819a:	680b      	ldr	r3, [r1, #0]
 800819c:	4682      	mov	sl, r0
 800819e:	460c      	mov	r4, r1
 80081a0:	4690      	mov	r8, r2
 80081a2:	d82d      	bhi.n	8008200 <__ssputs_r+0x70>
 80081a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80081ac:	d026      	beq.n	80081fc <__ssputs_r+0x6c>
 80081ae:	6965      	ldr	r5, [r4, #20]
 80081b0:	6909      	ldr	r1, [r1, #16]
 80081b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081b6:	eba3 0901 	sub.w	r9, r3, r1
 80081ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081be:	1c7b      	adds	r3, r7, #1
 80081c0:	444b      	add	r3, r9
 80081c2:	106d      	asrs	r5, r5, #1
 80081c4:	429d      	cmp	r5, r3
 80081c6:	bf38      	it	cc
 80081c8:	461d      	movcc	r5, r3
 80081ca:	0553      	lsls	r3, r2, #21
 80081cc:	d527      	bpl.n	800821e <__ssputs_r+0x8e>
 80081ce:	4629      	mov	r1, r5
 80081d0:	f7fd ff1c 	bl	800600c <_malloc_r>
 80081d4:	4606      	mov	r6, r0
 80081d6:	b360      	cbz	r0, 8008232 <__ssputs_r+0xa2>
 80081d8:	6921      	ldr	r1, [r4, #16]
 80081da:	464a      	mov	r2, r9
 80081dc:	f7fe fdaf 	bl	8006d3e <memcpy>
 80081e0:	89a3      	ldrh	r3, [r4, #12]
 80081e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80081e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	6126      	str	r6, [r4, #16]
 80081ee:	6165      	str	r5, [r4, #20]
 80081f0:	444e      	add	r6, r9
 80081f2:	eba5 0509 	sub.w	r5, r5, r9
 80081f6:	6026      	str	r6, [r4, #0]
 80081f8:	60a5      	str	r5, [r4, #8]
 80081fa:	463e      	mov	r6, r7
 80081fc:	42be      	cmp	r6, r7
 80081fe:	d900      	bls.n	8008202 <__ssputs_r+0x72>
 8008200:	463e      	mov	r6, r7
 8008202:	6820      	ldr	r0, [r4, #0]
 8008204:	4632      	mov	r2, r6
 8008206:	4641      	mov	r1, r8
 8008208:	f000 f9c6 	bl	8008598 <memmove>
 800820c:	68a3      	ldr	r3, [r4, #8]
 800820e:	1b9b      	subs	r3, r3, r6
 8008210:	60a3      	str	r3, [r4, #8]
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	4433      	add	r3, r6
 8008216:	6023      	str	r3, [r4, #0]
 8008218:	2000      	movs	r0, #0
 800821a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800821e:	462a      	mov	r2, r5
 8008220:	f000 fa18 	bl	8008654 <_realloc_r>
 8008224:	4606      	mov	r6, r0
 8008226:	2800      	cmp	r0, #0
 8008228:	d1e0      	bne.n	80081ec <__ssputs_r+0x5c>
 800822a:	6921      	ldr	r1, [r4, #16]
 800822c:	4650      	mov	r0, sl
 800822e:	f7ff fbe3 	bl	80079f8 <_free_r>
 8008232:	230c      	movs	r3, #12
 8008234:	f8ca 3000 	str.w	r3, [sl]
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	e7e9      	b.n	800821a <__ssputs_r+0x8a>
	...

08008248 <_svfiprintf_r>:
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	4698      	mov	r8, r3
 800824e:	898b      	ldrh	r3, [r1, #12]
 8008250:	061b      	lsls	r3, r3, #24
 8008252:	b09d      	sub	sp, #116	@ 0x74
 8008254:	4607      	mov	r7, r0
 8008256:	460d      	mov	r5, r1
 8008258:	4614      	mov	r4, r2
 800825a:	d510      	bpl.n	800827e <_svfiprintf_r+0x36>
 800825c:	690b      	ldr	r3, [r1, #16]
 800825e:	b973      	cbnz	r3, 800827e <_svfiprintf_r+0x36>
 8008260:	2140      	movs	r1, #64	@ 0x40
 8008262:	f7fd fed3 	bl	800600c <_malloc_r>
 8008266:	6028      	str	r0, [r5, #0]
 8008268:	6128      	str	r0, [r5, #16]
 800826a:	b930      	cbnz	r0, 800827a <_svfiprintf_r+0x32>
 800826c:	230c      	movs	r3, #12
 800826e:	603b      	str	r3, [r7, #0]
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	b01d      	add	sp, #116	@ 0x74
 8008276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827a:	2340      	movs	r3, #64	@ 0x40
 800827c:	616b      	str	r3, [r5, #20]
 800827e:	2300      	movs	r3, #0
 8008280:	9309      	str	r3, [sp, #36]	@ 0x24
 8008282:	2320      	movs	r3, #32
 8008284:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008288:	f8cd 800c 	str.w	r8, [sp, #12]
 800828c:	2330      	movs	r3, #48	@ 0x30
 800828e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800842c <_svfiprintf_r+0x1e4>
 8008292:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008296:	f04f 0901 	mov.w	r9, #1
 800829a:	4623      	mov	r3, r4
 800829c:	469a      	mov	sl, r3
 800829e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082a2:	b10a      	cbz	r2, 80082a8 <_svfiprintf_r+0x60>
 80082a4:	2a25      	cmp	r2, #37	@ 0x25
 80082a6:	d1f9      	bne.n	800829c <_svfiprintf_r+0x54>
 80082a8:	ebba 0b04 	subs.w	fp, sl, r4
 80082ac:	d00b      	beq.n	80082c6 <_svfiprintf_r+0x7e>
 80082ae:	465b      	mov	r3, fp
 80082b0:	4622      	mov	r2, r4
 80082b2:	4629      	mov	r1, r5
 80082b4:	4638      	mov	r0, r7
 80082b6:	f7ff ff6b 	bl	8008190 <__ssputs_r>
 80082ba:	3001      	adds	r0, #1
 80082bc:	f000 80a7 	beq.w	800840e <_svfiprintf_r+0x1c6>
 80082c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082c2:	445a      	add	r2, fp
 80082c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80082c6:	f89a 3000 	ldrb.w	r3, [sl]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 809f 	beq.w	800840e <_svfiprintf_r+0x1c6>
 80082d0:	2300      	movs	r3, #0
 80082d2:	f04f 32ff 	mov.w	r2, #4294967295
 80082d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082da:	f10a 0a01 	add.w	sl, sl, #1
 80082de:	9304      	str	r3, [sp, #16]
 80082e0:	9307      	str	r3, [sp, #28]
 80082e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80082e8:	4654      	mov	r4, sl
 80082ea:	2205      	movs	r2, #5
 80082ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082f0:	484e      	ldr	r0, [pc, #312]	@ (800842c <_svfiprintf_r+0x1e4>)
 80082f2:	f7f7 ff8d 	bl	8000210 <memchr>
 80082f6:	9a04      	ldr	r2, [sp, #16]
 80082f8:	b9d8      	cbnz	r0, 8008332 <_svfiprintf_r+0xea>
 80082fa:	06d0      	lsls	r0, r2, #27
 80082fc:	bf44      	itt	mi
 80082fe:	2320      	movmi	r3, #32
 8008300:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008304:	0711      	lsls	r1, r2, #28
 8008306:	bf44      	itt	mi
 8008308:	232b      	movmi	r3, #43	@ 0x2b
 800830a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800830e:	f89a 3000 	ldrb.w	r3, [sl]
 8008312:	2b2a      	cmp	r3, #42	@ 0x2a
 8008314:	d015      	beq.n	8008342 <_svfiprintf_r+0xfa>
 8008316:	9a07      	ldr	r2, [sp, #28]
 8008318:	4654      	mov	r4, sl
 800831a:	2000      	movs	r0, #0
 800831c:	f04f 0c0a 	mov.w	ip, #10
 8008320:	4621      	mov	r1, r4
 8008322:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008326:	3b30      	subs	r3, #48	@ 0x30
 8008328:	2b09      	cmp	r3, #9
 800832a:	d94b      	bls.n	80083c4 <_svfiprintf_r+0x17c>
 800832c:	b1b0      	cbz	r0, 800835c <_svfiprintf_r+0x114>
 800832e:	9207      	str	r2, [sp, #28]
 8008330:	e014      	b.n	800835c <_svfiprintf_r+0x114>
 8008332:	eba0 0308 	sub.w	r3, r0, r8
 8008336:	fa09 f303 	lsl.w	r3, r9, r3
 800833a:	4313      	orrs	r3, r2
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	46a2      	mov	sl, r4
 8008340:	e7d2      	b.n	80082e8 <_svfiprintf_r+0xa0>
 8008342:	9b03      	ldr	r3, [sp, #12]
 8008344:	1d19      	adds	r1, r3, #4
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	9103      	str	r1, [sp, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	bfbb      	ittet	lt
 800834e:	425b      	neglt	r3, r3
 8008350:	f042 0202 	orrlt.w	r2, r2, #2
 8008354:	9307      	strge	r3, [sp, #28]
 8008356:	9307      	strlt	r3, [sp, #28]
 8008358:	bfb8      	it	lt
 800835a:	9204      	strlt	r2, [sp, #16]
 800835c:	7823      	ldrb	r3, [r4, #0]
 800835e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008360:	d10a      	bne.n	8008378 <_svfiprintf_r+0x130>
 8008362:	7863      	ldrb	r3, [r4, #1]
 8008364:	2b2a      	cmp	r3, #42	@ 0x2a
 8008366:	d132      	bne.n	80083ce <_svfiprintf_r+0x186>
 8008368:	9b03      	ldr	r3, [sp, #12]
 800836a:	1d1a      	adds	r2, r3, #4
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	9203      	str	r2, [sp, #12]
 8008370:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008374:	3402      	adds	r4, #2
 8008376:	9305      	str	r3, [sp, #20]
 8008378:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800843c <_svfiprintf_r+0x1f4>
 800837c:	7821      	ldrb	r1, [r4, #0]
 800837e:	2203      	movs	r2, #3
 8008380:	4650      	mov	r0, sl
 8008382:	f7f7 ff45 	bl	8000210 <memchr>
 8008386:	b138      	cbz	r0, 8008398 <_svfiprintf_r+0x150>
 8008388:	9b04      	ldr	r3, [sp, #16]
 800838a:	eba0 000a 	sub.w	r0, r0, sl
 800838e:	2240      	movs	r2, #64	@ 0x40
 8008390:	4082      	lsls	r2, r0
 8008392:	4313      	orrs	r3, r2
 8008394:	3401      	adds	r4, #1
 8008396:	9304      	str	r3, [sp, #16]
 8008398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800839c:	4824      	ldr	r0, [pc, #144]	@ (8008430 <_svfiprintf_r+0x1e8>)
 800839e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083a2:	2206      	movs	r2, #6
 80083a4:	f7f7 ff34 	bl	8000210 <memchr>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d036      	beq.n	800841a <_svfiprintf_r+0x1d2>
 80083ac:	4b21      	ldr	r3, [pc, #132]	@ (8008434 <_svfiprintf_r+0x1ec>)
 80083ae:	bb1b      	cbnz	r3, 80083f8 <_svfiprintf_r+0x1b0>
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	3307      	adds	r3, #7
 80083b4:	f023 0307 	bic.w	r3, r3, #7
 80083b8:	3308      	adds	r3, #8
 80083ba:	9303      	str	r3, [sp, #12]
 80083bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083be:	4433      	add	r3, r6
 80083c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c2:	e76a      	b.n	800829a <_svfiprintf_r+0x52>
 80083c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80083c8:	460c      	mov	r4, r1
 80083ca:	2001      	movs	r0, #1
 80083cc:	e7a8      	b.n	8008320 <_svfiprintf_r+0xd8>
 80083ce:	2300      	movs	r3, #0
 80083d0:	3401      	adds	r4, #1
 80083d2:	9305      	str	r3, [sp, #20]
 80083d4:	4619      	mov	r1, r3
 80083d6:	f04f 0c0a 	mov.w	ip, #10
 80083da:	4620      	mov	r0, r4
 80083dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083e0:	3a30      	subs	r2, #48	@ 0x30
 80083e2:	2a09      	cmp	r2, #9
 80083e4:	d903      	bls.n	80083ee <_svfiprintf_r+0x1a6>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0c6      	beq.n	8008378 <_svfiprintf_r+0x130>
 80083ea:	9105      	str	r1, [sp, #20]
 80083ec:	e7c4      	b.n	8008378 <_svfiprintf_r+0x130>
 80083ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80083f2:	4604      	mov	r4, r0
 80083f4:	2301      	movs	r3, #1
 80083f6:	e7f0      	b.n	80083da <_svfiprintf_r+0x192>
 80083f8:	ab03      	add	r3, sp, #12
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	462a      	mov	r2, r5
 80083fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008438 <_svfiprintf_r+0x1f0>)
 8008400:	a904      	add	r1, sp, #16
 8008402:	4638      	mov	r0, r7
 8008404:	f7fd ff2e 	bl	8006264 <_printf_float>
 8008408:	1c42      	adds	r2, r0, #1
 800840a:	4606      	mov	r6, r0
 800840c:	d1d6      	bne.n	80083bc <_svfiprintf_r+0x174>
 800840e:	89ab      	ldrh	r3, [r5, #12]
 8008410:	065b      	lsls	r3, r3, #25
 8008412:	f53f af2d 	bmi.w	8008270 <_svfiprintf_r+0x28>
 8008416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008418:	e72c      	b.n	8008274 <_svfiprintf_r+0x2c>
 800841a:	ab03      	add	r3, sp, #12
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	462a      	mov	r2, r5
 8008420:	4b05      	ldr	r3, [pc, #20]	@ (8008438 <_svfiprintf_r+0x1f0>)
 8008422:	a904      	add	r1, sp, #16
 8008424:	4638      	mov	r0, r7
 8008426:	f7fe f9b5 	bl	8006794 <_printf_i>
 800842a:	e7ed      	b.n	8008408 <_svfiprintf_r+0x1c0>
 800842c:	08009448 	.word	0x08009448
 8008430:	08009452 	.word	0x08009452
 8008434:	08006265 	.word	0x08006265
 8008438:	08008191 	.word	0x08008191
 800843c:	0800944e 	.word	0x0800944e

08008440 <__sflush_r>:
 8008440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008448:	0716      	lsls	r6, r2, #28
 800844a:	4605      	mov	r5, r0
 800844c:	460c      	mov	r4, r1
 800844e:	d454      	bmi.n	80084fa <__sflush_r+0xba>
 8008450:	684b      	ldr	r3, [r1, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	dc02      	bgt.n	800845c <__sflush_r+0x1c>
 8008456:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008458:	2b00      	cmp	r3, #0
 800845a:	dd48      	ble.n	80084ee <__sflush_r+0xae>
 800845c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800845e:	2e00      	cmp	r6, #0
 8008460:	d045      	beq.n	80084ee <__sflush_r+0xae>
 8008462:	2300      	movs	r3, #0
 8008464:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008468:	682f      	ldr	r7, [r5, #0]
 800846a:	6a21      	ldr	r1, [r4, #32]
 800846c:	602b      	str	r3, [r5, #0]
 800846e:	d030      	beq.n	80084d2 <__sflush_r+0x92>
 8008470:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	0759      	lsls	r1, r3, #29
 8008476:	d505      	bpl.n	8008484 <__sflush_r+0x44>
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	1ad2      	subs	r2, r2, r3
 800847c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800847e:	b10b      	cbz	r3, 8008484 <__sflush_r+0x44>
 8008480:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008482:	1ad2      	subs	r2, r2, r3
 8008484:	2300      	movs	r3, #0
 8008486:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008488:	6a21      	ldr	r1, [r4, #32]
 800848a:	4628      	mov	r0, r5
 800848c:	47b0      	blx	r6
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	d106      	bne.n	80084a2 <__sflush_r+0x62>
 8008494:	6829      	ldr	r1, [r5, #0]
 8008496:	291d      	cmp	r1, #29
 8008498:	d82b      	bhi.n	80084f2 <__sflush_r+0xb2>
 800849a:	4a2a      	ldr	r2, [pc, #168]	@ (8008544 <__sflush_r+0x104>)
 800849c:	410a      	asrs	r2, r1
 800849e:	07d6      	lsls	r6, r2, #31
 80084a0:	d427      	bmi.n	80084f2 <__sflush_r+0xb2>
 80084a2:	2200      	movs	r2, #0
 80084a4:	6062      	str	r2, [r4, #4]
 80084a6:	04d9      	lsls	r1, r3, #19
 80084a8:	6922      	ldr	r2, [r4, #16]
 80084aa:	6022      	str	r2, [r4, #0]
 80084ac:	d504      	bpl.n	80084b8 <__sflush_r+0x78>
 80084ae:	1c42      	adds	r2, r0, #1
 80084b0:	d101      	bne.n	80084b6 <__sflush_r+0x76>
 80084b2:	682b      	ldr	r3, [r5, #0]
 80084b4:	b903      	cbnz	r3, 80084b8 <__sflush_r+0x78>
 80084b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80084b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084ba:	602f      	str	r7, [r5, #0]
 80084bc:	b1b9      	cbz	r1, 80084ee <__sflush_r+0xae>
 80084be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084c2:	4299      	cmp	r1, r3
 80084c4:	d002      	beq.n	80084cc <__sflush_r+0x8c>
 80084c6:	4628      	mov	r0, r5
 80084c8:	f7ff fa96 	bl	80079f8 <_free_r>
 80084cc:	2300      	movs	r3, #0
 80084ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80084d0:	e00d      	b.n	80084ee <__sflush_r+0xae>
 80084d2:	2301      	movs	r3, #1
 80084d4:	4628      	mov	r0, r5
 80084d6:	47b0      	blx	r6
 80084d8:	4602      	mov	r2, r0
 80084da:	1c50      	adds	r0, r2, #1
 80084dc:	d1c9      	bne.n	8008472 <__sflush_r+0x32>
 80084de:	682b      	ldr	r3, [r5, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d0c6      	beq.n	8008472 <__sflush_r+0x32>
 80084e4:	2b1d      	cmp	r3, #29
 80084e6:	d001      	beq.n	80084ec <__sflush_r+0xac>
 80084e8:	2b16      	cmp	r3, #22
 80084ea:	d11e      	bne.n	800852a <__sflush_r+0xea>
 80084ec:	602f      	str	r7, [r5, #0]
 80084ee:	2000      	movs	r0, #0
 80084f0:	e022      	b.n	8008538 <__sflush_r+0xf8>
 80084f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084f6:	b21b      	sxth	r3, r3
 80084f8:	e01b      	b.n	8008532 <__sflush_r+0xf2>
 80084fa:	690f      	ldr	r7, [r1, #16]
 80084fc:	2f00      	cmp	r7, #0
 80084fe:	d0f6      	beq.n	80084ee <__sflush_r+0xae>
 8008500:	0793      	lsls	r3, r2, #30
 8008502:	680e      	ldr	r6, [r1, #0]
 8008504:	bf08      	it	eq
 8008506:	694b      	ldreq	r3, [r1, #20]
 8008508:	600f      	str	r7, [r1, #0]
 800850a:	bf18      	it	ne
 800850c:	2300      	movne	r3, #0
 800850e:	eba6 0807 	sub.w	r8, r6, r7
 8008512:	608b      	str	r3, [r1, #8]
 8008514:	f1b8 0f00 	cmp.w	r8, #0
 8008518:	dde9      	ble.n	80084ee <__sflush_r+0xae>
 800851a:	6a21      	ldr	r1, [r4, #32]
 800851c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800851e:	4643      	mov	r3, r8
 8008520:	463a      	mov	r2, r7
 8008522:	4628      	mov	r0, r5
 8008524:	47b0      	blx	r6
 8008526:	2800      	cmp	r0, #0
 8008528:	dc08      	bgt.n	800853c <__sflush_r+0xfc>
 800852a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800852e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	f04f 30ff 	mov.w	r0, #4294967295
 8008538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800853c:	4407      	add	r7, r0
 800853e:	eba8 0800 	sub.w	r8, r8, r0
 8008542:	e7e7      	b.n	8008514 <__sflush_r+0xd4>
 8008544:	dfbffffe 	.word	0xdfbffffe

08008548 <_fflush_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	690b      	ldr	r3, [r1, #16]
 800854c:	4605      	mov	r5, r0
 800854e:	460c      	mov	r4, r1
 8008550:	b913      	cbnz	r3, 8008558 <_fflush_r+0x10>
 8008552:	2500      	movs	r5, #0
 8008554:	4628      	mov	r0, r5
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	b118      	cbz	r0, 8008562 <_fflush_r+0x1a>
 800855a:	6a03      	ldr	r3, [r0, #32]
 800855c:	b90b      	cbnz	r3, 8008562 <_fflush_r+0x1a>
 800855e:	f7fe fac5 	bl	8006aec <__sinit>
 8008562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d0f3      	beq.n	8008552 <_fflush_r+0xa>
 800856a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800856c:	07d0      	lsls	r0, r2, #31
 800856e:	d404      	bmi.n	800857a <_fflush_r+0x32>
 8008570:	0599      	lsls	r1, r3, #22
 8008572:	d402      	bmi.n	800857a <_fflush_r+0x32>
 8008574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008576:	f7fe fbe0 	bl	8006d3a <__retarget_lock_acquire_recursive>
 800857a:	4628      	mov	r0, r5
 800857c:	4621      	mov	r1, r4
 800857e:	f7ff ff5f 	bl	8008440 <__sflush_r>
 8008582:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008584:	07da      	lsls	r2, r3, #31
 8008586:	4605      	mov	r5, r0
 8008588:	d4e4      	bmi.n	8008554 <_fflush_r+0xc>
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	059b      	lsls	r3, r3, #22
 800858e:	d4e1      	bmi.n	8008554 <_fflush_r+0xc>
 8008590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008592:	f7fe fbd3 	bl	8006d3c <__retarget_lock_release_recursive>
 8008596:	e7dd      	b.n	8008554 <_fflush_r+0xc>

08008598 <memmove>:
 8008598:	4288      	cmp	r0, r1
 800859a:	b510      	push	{r4, lr}
 800859c:	eb01 0402 	add.w	r4, r1, r2
 80085a0:	d902      	bls.n	80085a8 <memmove+0x10>
 80085a2:	4284      	cmp	r4, r0
 80085a4:	4623      	mov	r3, r4
 80085a6:	d807      	bhi.n	80085b8 <memmove+0x20>
 80085a8:	1e43      	subs	r3, r0, #1
 80085aa:	42a1      	cmp	r1, r4
 80085ac:	d008      	beq.n	80085c0 <memmove+0x28>
 80085ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085b6:	e7f8      	b.n	80085aa <memmove+0x12>
 80085b8:	4402      	add	r2, r0
 80085ba:	4601      	mov	r1, r0
 80085bc:	428a      	cmp	r2, r1
 80085be:	d100      	bne.n	80085c2 <memmove+0x2a>
 80085c0:	bd10      	pop	{r4, pc}
 80085c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085ca:	e7f7      	b.n	80085bc <memmove+0x24>

080085cc <__assert_func>:
 80085cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085ce:	4614      	mov	r4, r2
 80085d0:	461a      	mov	r2, r3
 80085d2:	4b09      	ldr	r3, [pc, #36]	@ (80085f8 <__assert_func+0x2c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4605      	mov	r5, r0
 80085d8:	68d8      	ldr	r0, [r3, #12]
 80085da:	b954      	cbnz	r4, 80085f2 <__assert_func+0x26>
 80085dc:	4b07      	ldr	r3, [pc, #28]	@ (80085fc <__assert_func+0x30>)
 80085de:	461c      	mov	r4, r3
 80085e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085e4:	9100      	str	r1, [sp, #0]
 80085e6:	462b      	mov	r3, r5
 80085e8:	4905      	ldr	r1, [pc, #20]	@ (8008600 <__assert_func+0x34>)
 80085ea:	f000 f86f 	bl	80086cc <fiprintf>
 80085ee:	f000 f87f 	bl	80086f0 <abort>
 80085f2:	4b04      	ldr	r3, [pc, #16]	@ (8008604 <__assert_func+0x38>)
 80085f4:	e7f4      	b.n	80085e0 <__assert_func+0x14>
 80085f6:	bf00      	nop
 80085f8:	20000020 	.word	0x20000020
 80085fc:	0800949e 	.word	0x0800949e
 8008600:	08009470 	.word	0x08009470
 8008604:	08009463 	.word	0x08009463

08008608 <_calloc_r>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	fba1 5402 	umull	r5, r4, r1, r2
 800860e:	b93c      	cbnz	r4, 8008620 <_calloc_r+0x18>
 8008610:	4629      	mov	r1, r5
 8008612:	f7fd fcfb 	bl	800600c <_malloc_r>
 8008616:	4606      	mov	r6, r0
 8008618:	b928      	cbnz	r0, 8008626 <_calloc_r+0x1e>
 800861a:	2600      	movs	r6, #0
 800861c:	4630      	mov	r0, r6
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	220c      	movs	r2, #12
 8008622:	6002      	str	r2, [r0, #0]
 8008624:	e7f9      	b.n	800861a <_calloc_r+0x12>
 8008626:	462a      	mov	r2, r5
 8008628:	4621      	mov	r1, r4
 800862a:	f7fe faf8 	bl	8006c1e <memset>
 800862e:	e7f5      	b.n	800861c <_calloc_r+0x14>

08008630 <__ascii_mbtowc>:
 8008630:	b082      	sub	sp, #8
 8008632:	b901      	cbnz	r1, 8008636 <__ascii_mbtowc+0x6>
 8008634:	a901      	add	r1, sp, #4
 8008636:	b142      	cbz	r2, 800864a <__ascii_mbtowc+0x1a>
 8008638:	b14b      	cbz	r3, 800864e <__ascii_mbtowc+0x1e>
 800863a:	7813      	ldrb	r3, [r2, #0]
 800863c:	600b      	str	r3, [r1, #0]
 800863e:	7812      	ldrb	r2, [r2, #0]
 8008640:	1e10      	subs	r0, r2, #0
 8008642:	bf18      	it	ne
 8008644:	2001      	movne	r0, #1
 8008646:	b002      	add	sp, #8
 8008648:	4770      	bx	lr
 800864a:	4610      	mov	r0, r2
 800864c:	e7fb      	b.n	8008646 <__ascii_mbtowc+0x16>
 800864e:	f06f 0001 	mvn.w	r0, #1
 8008652:	e7f8      	b.n	8008646 <__ascii_mbtowc+0x16>

08008654 <_realloc_r>:
 8008654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008658:	4680      	mov	r8, r0
 800865a:	4615      	mov	r5, r2
 800865c:	460c      	mov	r4, r1
 800865e:	b921      	cbnz	r1, 800866a <_realloc_r+0x16>
 8008660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008664:	4611      	mov	r1, r2
 8008666:	f7fd bcd1 	b.w	800600c <_malloc_r>
 800866a:	b92a      	cbnz	r2, 8008678 <_realloc_r+0x24>
 800866c:	f7ff f9c4 	bl	80079f8 <_free_r>
 8008670:	2400      	movs	r4, #0
 8008672:	4620      	mov	r0, r4
 8008674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008678:	f000 f841 	bl	80086fe <_malloc_usable_size_r>
 800867c:	4285      	cmp	r5, r0
 800867e:	4606      	mov	r6, r0
 8008680:	d802      	bhi.n	8008688 <_realloc_r+0x34>
 8008682:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008686:	d8f4      	bhi.n	8008672 <_realloc_r+0x1e>
 8008688:	4629      	mov	r1, r5
 800868a:	4640      	mov	r0, r8
 800868c:	f7fd fcbe 	bl	800600c <_malloc_r>
 8008690:	4607      	mov	r7, r0
 8008692:	2800      	cmp	r0, #0
 8008694:	d0ec      	beq.n	8008670 <_realloc_r+0x1c>
 8008696:	42b5      	cmp	r5, r6
 8008698:	462a      	mov	r2, r5
 800869a:	4621      	mov	r1, r4
 800869c:	bf28      	it	cs
 800869e:	4632      	movcs	r2, r6
 80086a0:	f7fe fb4d 	bl	8006d3e <memcpy>
 80086a4:	4621      	mov	r1, r4
 80086a6:	4640      	mov	r0, r8
 80086a8:	f7ff f9a6 	bl	80079f8 <_free_r>
 80086ac:	463c      	mov	r4, r7
 80086ae:	e7e0      	b.n	8008672 <_realloc_r+0x1e>

080086b0 <__ascii_wctomb>:
 80086b0:	4603      	mov	r3, r0
 80086b2:	4608      	mov	r0, r1
 80086b4:	b141      	cbz	r1, 80086c8 <__ascii_wctomb+0x18>
 80086b6:	2aff      	cmp	r2, #255	@ 0xff
 80086b8:	d904      	bls.n	80086c4 <__ascii_wctomb+0x14>
 80086ba:	228a      	movs	r2, #138	@ 0x8a
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	f04f 30ff 	mov.w	r0, #4294967295
 80086c2:	4770      	bx	lr
 80086c4:	700a      	strb	r2, [r1, #0]
 80086c6:	2001      	movs	r0, #1
 80086c8:	4770      	bx	lr
	...

080086cc <fiprintf>:
 80086cc:	b40e      	push	{r1, r2, r3}
 80086ce:	b503      	push	{r0, r1, lr}
 80086d0:	4601      	mov	r1, r0
 80086d2:	ab03      	add	r3, sp, #12
 80086d4:	4805      	ldr	r0, [pc, #20]	@ (80086ec <fiprintf+0x20>)
 80086d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086da:	6800      	ldr	r0, [r0, #0]
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	f000 f83f 	bl	8008760 <_vfiprintf_r>
 80086e2:	b002      	add	sp, #8
 80086e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e8:	b003      	add	sp, #12
 80086ea:	4770      	bx	lr
 80086ec:	20000020 	.word	0x20000020

080086f0 <abort>:
 80086f0:	b508      	push	{r3, lr}
 80086f2:	2006      	movs	r0, #6
 80086f4:	f000 fa08 	bl	8008b08 <raise>
 80086f8:	2001      	movs	r0, #1
 80086fa:	f7fa fb9b 	bl	8002e34 <_exit>

080086fe <_malloc_usable_size_r>:
 80086fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008702:	1f18      	subs	r0, r3, #4
 8008704:	2b00      	cmp	r3, #0
 8008706:	bfbc      	itt	lt
 8008708:	580b      	ldrlt	r3, [r1, r0]
 800870a:	18c0      	addlt	r0, r0, r3
 800870c:	4770      	bx	lr

0800870e <__sfputc_r>:
 800870e:	6893      	ldr	r3, [r2, #8]
 8008710:	3b01      	subs	r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	b410      	push	{r4}
 8008716:	6093      	str	r3, [r2, #8]
 8008718:	da08      	bge.n	800872c <__sfputc_r+0x1e>
 800871a:	6994      	ldr	r4, [r2, #24]
 800871c:	42a3      	cmp	r3, r4
 800871e:	db01      	blt.n	8008724 <__sfputc_r+0x16>
 8008720:	290a      	cmp	r1, #10
 8008722:	d103      	bne.n	800872c <__sfputc_r+0x1e>
 8008724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008728:	f000 b932 	b.w	8008990 <__swbuf_r>
 800872c:	6813      	ldr	r3, [r2, #0]
 800872e:	1c58      	adds	r0, r3, #1
 8008730:	6010      	str	r0, [r2, #0]
 8008732:	7019      	strb	r1, [r3, #0]
 8008734:	4608      	mov	r0, r1
 8008736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800873a:	4770      	bx	lr

0800873c <__sfputs_r>:
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	4606      	mov	r6, r0
 8008740:	460f      	mov	r7, r1
 8008742:	4614      	mov	r4, r2
 8008744:	18d5      	adds	r5, r2, r3
 8008746:	42ac      	cmp	r4, r5
 8008748:	d101      	bne.n	800874e <__sfputs_r+0x12>
 800874a:	2000      	movs	r0, #0
 800874c:	e007      	b.n	800875e <__sfputs_r+0x22>
 800874e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008752:	463a      	mov	r2, r7
 8008754:	4630      	mov	r0, r6
 8008756:	f7ff ffda 	bl	800870e <__sfputc_r>
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	d1f3      	bne.n	8008746 <__sfputs_r+0xa>
 800875e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008760 <_vfiprintf_r>:
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008764:	460d      	mov	r5, r1
 8008766:	b09d      	sub	sp, #116	@ 0x74
 8008768:	4614      	mov	r4, r2
 800876a:	4698      	mov	r8, r3
 800876c:	4606      	mov	r6, r0
 800876e:	b118      	cbz	r0, 8008778 <_vfiprintf_r+0x18>
 8008770:	6a03      	ldr	r3, [r0, #32]
 8008772:	b90b      	cbnz	r3, 8008778 <_vfiprintf_r+0x18>
 8008774:	f7fe f9ba 	bl	8006aec <__sinit>
 8008778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800877a:	07d9      	lsls	r1, r3, #31
 800877c:	d405      	bmi.n	800878a <_vfiprintf_r+0x2a>
 800877e:	89ab      	ldrh	r3, [r5, #12]
 8008780:	059a      	lsls	r2, r3, #22
 8008782:	d402      	bmi.n	800878a <_vfiprintf_r+0x2a>
 8008784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008786:	f7fe fad8 	bl	8006d3a <__retarget_lock_acquire_recursive>
 800878a:	89ab      	ldrh	r3, [r5, #12]
 800878c:	071b      	lsls	r3, r3, #28
 800878e:	d501      	bpl.n	8008794 <_vfiprintf_r+0x34>
 8008790:	692b      	ldr	r3, [r5, #16]
 8008792:	b99b      	cbnz	r3, 80087bc <_vfiprintf_r+0x5c>
 8008794:	4629      	mov	r1, r5
 8008796:	4630      	mov	r0, r6
 8008798:	f000 f938 	bl	8008a0c <__swsetup_r>
 800879c:	b170      	cbz	r0, 80087bc <_vfiprintf_r+0x5c>
 800879e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087a0:	07dc      	lsls	r4, r3, #31
 80087a2:	d504      	bpl.n	80087ae <_vfiprintf_r+0x4e>
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	b01d      	add	sp, #116	@ 0x74
 80087aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ae:	89ab      	ldrh	r3, [r5, #12]
 80087b0:	0598      	lsls	r0, r3, #22
 80087b2:	d4f7      	bmi.n	80087a4 <_vfiprintf_r+0x44>
 80087b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087b6:	f7fe fac1 	bl	8006d3c <__retarget_lock_release_recursive>
 80087ba:	e7f3      	b.n	80087a4 <_vfiprintf_r+0x44>
 80087bc:	2300      	movs	r3, #0
 80087be:	9309      	str	r3, [sp, #36]	@ 0x24
 80087c0:	2320      	movs	r3, #32
 80087c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ca:	2330      	movs	r3, #48	@ 0x30
 80087cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800897c <_vfiprintf_r+0x21c>
 80087d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087d4:	f04f 0901 	mov.w	r9, #1
 80087d8:	4623      	mov	r3, r4
 80087da:	469a      	mov	sl, r3
 80087dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087e0:	b10a      	cbz	r2, 80087e6 <_vfiprintf_r+0x86>
 80087e2:	2a25      	cmp	r2, #37	@ 0x25
 80087e4:	d1f9      	bne.n	80087da <_vfiprintf_r+0x7a>
 80087e6:	ebba 0b04 	subs.w	fp, sl, r4
 80087ea:	d00b      	beq.n	8008804 <_vfiprintf_r+0xa4>
 80087ec:	465b      	mov	r3, fp
 80087ee:	4622      	mov	r2, r4
 80087f0:	4629      	mov	r1, r5
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7ff ffa2 	bl	800873c <__sfputs_r>
 80087f8:	3001      	adds	r0, #1
 80087fa:	f000 80a7 	beq.w	800894c <_vfiprintf_r+0x1ec>
 80087fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008800:	445a      	add	r2, fp
 8008802:	9209      	str	r2, [sp, #36]	@ 0x24
 8008804:	f89a 3000 	ldrb.w	r3, [sl]
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 809f 	beq.w	800894c <_vfiprintf_r+0x1ec>
 800880e:	2300      	movs	r3, #0
 8008810:	f04f 32ff 	mov.w	r2, #4294967295
 8008814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008818:	f10a 0a01 	add.w	sl, sl, #1
 800881c:	9304      	str	r3, [sp, #16]
 800881e:	9307      	str	r3, [sp, #28]
 8008820:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008824:	931a      	str	r3, [sp, #104]	@ 0x68
 8008826:	4654      	mov	r4, sl
 8008828:	2205      	movs	r2, #5
 800882a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882e:	4853      	ldr	r0, [pc, #332]	@ (800897c <_vfiprintf_r+0x21c>)
 8008830:	f7f7 fcee 	bl	8000210 <memchr>
 8008834:	9a04      	ldr	r2, [sp, #16]
 8008836:	b9d8      	cbnz	r0, 8008870 <_vfiprintf_r+0x110>
 8008838:	06d1      	lsls	r1, r2, #27
 800883a:	bf44      	itt	mi
 800883c:	2320      	movmi	r3, #32
 800883e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008842:	0713      	lsls	r3, r2, #28
 8008844:	bf44      	itt	mi
 8008846:	232b      	movmi	r3, #43	@ 0x2b
 8008848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800884c:	f89a 3000 	ldrb.w	r3, [sl]
 8008850:	2b2a      	cmp	r3, #42	@ 0x2a
 8008852:	d015      	beq.n	8008880 <_vfiprintf_r+0x120>
 8008854:	9a07      	ldr	r2, [sp, #28]
 8008856:	4654      	mov	r4, sl
 8008858:	2000      	movs	r0, #0
 800885a:	f04f 0c0a 	mov.w	ip, #10
 800885e:	4621      	mov	r1, r4
 8008860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008864:	3b30      	subs	r3, #48	@ 0x30
 8008866:	2b09      	cmp	r3, #9
 8008868:	d94b      	bls.n	8008902 <_vfiprintf_r+0x1a2>
 800886a:	b1b0      	cbz	r0, 800889a <_vfiprintf_r+0x13a>
 800886c:	9207      	str	r2, [sp, #28]
 800886e:	e014      	b.n	800889a <_vfiprintf_r+0x13a>
 8008870:	eba0 0308 	sub.w	r3, r0, r8
 8008874:	fa09 f303 	lsl.w	r3, r9, r3
 8008878:	4313      	orrs	r3, r2
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	46a2      	mov	sl, r4
 800887e:	e7d2      	b.n	8008826 <_vfiprintf_r+0xc6>
 8008880:	9b03      	ldr	r3, [sp, #12]
 8008882:	1d19      	adds	r1, r3, #4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	9103      	str	r1, [sp, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	bfbb      	ittet	lt
 800888c:	425b      	neglt	r3, r3
 800888e:	f042 0202 	orrlt.w	r2, r2, #2
 8008892:	9307      	strge	r3, [sp, #28]
 8008894:	9307      	strlt	r3, [sp, #28]
 8008896:	bfb8      	it	lt
 8008898:	9204      	strlt	r2, [sp, #16]
 800889a:	7823      	ldrb	r3, [r4, #0]
 800889c:	2b2e      	cmp	r3, #46	@ 0x2e
 800889e:	d10a      	bne.n	80088b6 <_vfiprintf_r+0x156>
 80088a0:	7863      	ldrb	r3, [r4, #1]
 80088a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80088a4:	d132      	bne.n	800890c <_vfiprintf_r+0x1ac>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	1d1a      	adds	r2, r3, #4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	9203      	str	r2, [sp, #12]
 80088ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088b2:	3402      	adds	r4, #2
 80088b4:	9305      	str	r3, [sp, #20]
 80088b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800898c <_vfiprintf_r+0x22c>
 80088ba:	7821      	ldrb	r1, [r4, #0]
 80088bc:	2203      	movs	r2, #3
 80088be:	4650      	mov	r0, sl
 80088c0:	f7f7 fca6 	bl	8000210 <memchr>
 80088c4:	b138      	cbz	r0, 80088d6 <_vfiprintf_r+0x176>
 80088c6:	9b04      	ldr	r3, [sp, #16]
 80088c8:	eba0 000a 	sub.w	r0, r0, sl
 80088cc:	2240      	movs	r2, #64	@ 0x40
 80088ce:	4082      	lsls	r2, r0
 80088d0:	4313      	orrs	r3, r2
 80088d2:	3401      	adds	r4, #1
 80088d4:	9304      	str	r3, [sp, #16]
 80088d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088da:	4829      	ldr	r0, [pc, #164]	@ (8008980 <_vfiprintf_r+0x220>)
 80088dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088e0:	2206      	movs	r2, #6
 80088e2:	f7f7 fc95 	bl	8000210 <memchr>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d03f      	beq.n	800896a <_vfiprintf_r+0x20a>
 80088ea:	4b26      	ldr	r3, [pc, #152]	@ (8008984 <_vfiprintf_r+0x224>)
 80088ec:	bb1b      	cbnz	r3, 8008936 <_vfiprintf_r+0x1d6>
 80088ee:	9b03      	ldr	r3, [sp, #12]
 80088f0:	3307      	adds	r3, #7
 80088f2:	f023 0307 	bic.w	r3, r3, #7
 80088f6:	3308      	adds	r3, #8
 80088f8:	9303      	str	r3, [sp, #12]
 80088fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088fc:	443b      	add	r3, r7
 80088fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008900:	e76a      	b.n	80087d8 <_vfiprintf_r+0x78>
 8008902:	fb0c 3202 	mla	r2, ip, r2, r3
 8008906:	460c      	mov	r4, r1
 8008908:	2001      	movs	r0, #1
 800890a:	e7a8      	b.n	800885e <_vfiprintf_r+0xfe>
 800890c:	2300      	movs	r3, #0
 800890e:	3401      	adds	r4, #1
 8008910:	9305      	str	r3, [sp, #20]
 8008912:	4619      	mov	r1, r3
 8008914:	f04f 0c0a 	mov.w	ip, #10
 8008918:	4620      	mov	r0, r4
 800891a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800891e:	3a30      	subs	r2, #48	@ 0x30
 8008920:	2a09      	cmp	r2, #9
 8008922:	d903      	bls.n	800892c <_vfiprintf_r+0x1cc>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0c6      	beq.n	80088b6 <_vfiprintf_r+0x156>
 8008928:	9105      	str	r1, [sp, #20]
 800892a:	e7c4      	b.n	80088b6 <_vfiprintf_r+0x156>
 800892c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008930:	4604      	mov	r4, r0
 8008932:	2301      	movs	r3, #1
 8008934:	e7f0      	b.n	8008918 <_vfiprintf_r+0x1b8>
 8008936:	ab03      	add	r3, sp, #12
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	462a      	mov	r2, r5
 800893c:	4b12      	ldr	r3, [pc, #72]	@ (8008988 <_vfiprintf_r+0x228>)
 800893e:	a904      	add	r1, sp, #16
 8008940:	4630      	mov	r0, r6
 8008942:	f7fd fc8f 	bl	8006264 <_printf_float>
 8008946:	4607      	mov	r7, r0
 8008948:	1c78      	adds	r0, r7, #1
 800894a:	d1d6      	bne.n	80088fa <_vfiprintf_r+0x19a>
 800894c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800894e:	07d9      	lsls	r1, r3, #31
 8008950:	d405      	bmi.n	800895e <_vfiprintf_r+0x1fe>
 8008952:	89ab      	ldrh	r3, [r5, #12]
 8008954:	059a      	lsls	r2, r3, #22
 8008956:	d402      	bmi.n	800895e <_vfiprintf_r+0x1fe>
 8008958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800895a:	f7fe f9ef 	bl	8006d3c <__retarget_lock_release_recursive>
 800895e:	89ab      	ldrh	r3, [r5, #12]
 8008960:	065b      	lsls	r3, r3, #25
 8008962:	f53f af1f 	bmi.w	80087a4 <_vfiprintf_r+0x44>
 8008966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008968:	e71e      	b.n	80087a8 <_vfiprintf_r+0x48>
 800896a:	ab03      	add	r3, sp, #12
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	462a      	mov	r2, r5
 8008970:	4b05      	ldr	r3, [pc, #20]	@ (8008988 <_vfiprintf_r+0x228>)
 8008972:	a904      	add	r1, sp, #16
 8008974:	4630      	mov	r0, r6
 8008976:	f7fd ff0d 	bl	8006794 <_printf_i>
 800897a:	e7e4      	b.n	8008946 <_vfiprintf_r+0x1e6>
 800897c:	08009448 	.word	0x08009448
 8008980:	08009452 	.word	0x08009452
 8008984:	08006265 	.word	0x08006265
 8008988:	0800873d 	.word	0x0800873d
 800898c:	0800944e 	.word	0x0800944e

08008990 <__swbuf_r>:
 8008990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008992:	460e      	mov	r6, r1
 8008994:	4614      	mov	r4, r2
 8008996:	4605      	mov	r5, r0
 8008998:	b118      	cbz	r0, 80089a2 <__swbuf_r+0x12>
 800899a:	6a03      	ldr	r3, [r0, #32]
 800899c:	b90b      	cbnz	r3, 80089a2 <__swbuf_r+0x12>
 800899e:	f7fe f8a5 	bl	8006aec <__sinit>
 80089a2:	69a3      	ldr	r3, [r4, #24]
 80089a4:	60a3      	str	r3, [r4, #8]
 80089a6:	89a3      	ldrh	r3, [r4, #12]
 80089a8:	071a      	lsls	r2, r3, #28
 80089aa:	d501      	bpl.n	80089b0 <__swbuf_r+0x20>
 80089ac:	6923      	ldr	r3, [r4, #16]
 80089ae:	b943      	cbnz	r3, 80089c2 <__swbuf_r+0x32>
 80089b0:	4621      	mov	r1, r4
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 f82a 	bl	8008a0c <__swsetup_r>
 80089b8:	b118      	cbz	r0, 80089c2 <__swbuf_r+0x32>
 80089ba:	f04f 37ff 	mov.w	r7, #4294967295
 80089be:	4638      	mov	r0, r7
 80089c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	6922      	ldr	r2, [r4, #16]
 80089c6:	1a98      	subs	r0, r3, r2
 80089c8:	6963      	ldr	r3, [r4, #20]
 80089ca:	b2f6      	uxtb	r6, r6
 80089cc:	4283      	cmp	r3, r0
 80089ce:	4637      	mov	r7, r6
 80089d0:	dc05      	bgt.n	80089de <__swbuf_r+0x4e>
 80089d2:	4621      	mov	r1, r4
 80089d4:	4628      	mov	r0, r5
 80089d6:	f7ff fdb7 	bl	8008548 <_fflush_r>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d1ed      	bne.n	80089ba <__swbuf_r+0x2a>
 80089de:	68a3      	ldr	r3, [r4, #8]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	60a3      	str	r3, [r4, #8]
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	1c5a      	adds	r2, r3, #1
 80089e8:	6022      	str	r2, [r4, #0]
 80089ea:	701e      	strb	r6, [r3, #0]
 80089ec:	6962      	ldr	r2, [r4, #20]
 80089ee:	1c43      	adds	r3, r0, #1
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d004      	beq.n	80089fe <__swbuf_r+0x6e>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	07db      	lsls	r3, r3, #31
 80089f8:	d5e1      	bpl.n	80089be <__swbuf_r+0x2e>
 80089fa:	2e0a      	cmp	r6, #10
 80089fc:	d1df      	bne.n	80089be <__swbuf_r+0x2e>
 80089fe:	4621      	mov	r1, r4
 8008a00:	4628      	mov	r0, r5
 8008a02:	f7ff fda1 	bl	8008548 <_fflush_r>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d0d9      	beq.n	80089be <__swbuf_r+0x2e>
 8008a0a:	e7d6      	b.n	80089ba <__swbuf_r+0x2a>

08008a0c <__swsetup_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4b29      	ldr	r3, [pc, #164]	@ (8008ab4 <__swsetup_r+0xa8>)
 8008a10:	4605      	mov	r5, r0
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	460c      	mov	r4, r1
 8008a16:	b118      	cbz	r0, 8008a20 <__swsetup_r+0x14>
 8008a18:	6a03      	ldr	r3, [r0, #32]
 8008a1a:	b90b      	cbnz	r3, 8008a20 <__swsetup_r+0x14>
 8008a1c:	f7fe f866 	bl	8006aec <__sinit>
 8008a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a24:	0719      	lsls	r1, r3, #28
 8008a26:	d422      	bmi.n	8008a6e <__swsetup_r+0x62>
 8008a28:	06da      	lsls	r2, r3, #27
 8008a2a:	d407      	bmi.n	8008a3c <__swsetup_r+0x30>
 8008a2c:	2209      	movs	r2, #9
 8008a2e:	602a      	str	r2, [r5, #0]
 8008a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3a:	e033      	b.n	8008aa4 <__swsetup_r+0x98>
 8008a3c:	0758      	lsls	r0, r3, #29
 8008a3e:	d512      	bpl.n	8008a66 <__swsetup_r+0x5a>
 8008a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a42:	b141      	cbz	r1, 8008a56 <__swsetup_r+0x4a>
 8008a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a48:	4299      	cmp	r1, r3
 8008a4a:	d002      	beq.n	8008a52 <__swsetup_r+0x46>
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f7fe ffd3 	bl	80079f8 <_free_r>
 8008a52:	2300      	movs	r3, #0
 8008a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a5c:	81a3      	strh	r3, [r4, #12]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	6063      	str	r3, [r4, #4]
 8008a62:	6923      	ldr	r3, [r4, #16]
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	f043 0308 	orr.w	r3, r3, #8
 8008a6c:	81a3      	strh	r3, [r4, #12]
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	b94b      	cbnz	r3, 8008a86 <__swsetup_r+0x7a>
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a7c:	d003      	beq.n	8008a86 <__swsetup_r+0x7a>
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4628      	mov	r0, r5
 8008a82:	f000 f883 	bl	8008b8c <__smakebuf_r>
 8008a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a8a:	f013 0201 	ands.w	r2, r3, #1
 8008a8e:	d00a      	beq.n	8008aa6 <__swsetup_r+0x9a>
 8008a90:	2200      	movs	r2, #0
 8008a92:	60a2      	str	r2, [r4, #8]
 8008a94:	6962      	ldr	r2, [r4, #20]
 8008a96:	4252      	negs	r2, r2
 8008a98:	61a2      	str	r2, [r4, #24]
 8008a9a:	6922      	ldr	r2, [r4, #16]
 8008a9c:	b942      	cbnz	r2, 8008ab0 <__swsetup_r+0xa4>
 8008a9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008aa2:	d1c5      	bne.n	8008a30 <__swsetup_r+0x24>
 8008aa4:	bd38      	pop	{r3, r4, r5, pc}
 8008aa6:	0799      	lsls	r1, r3, #30
 8008aa8:	bf58      	it	pl
 8008aaa:	6962      	ldrpl	r2, [r4, #20]
 8008aac:	60a2      	str	r2, [r4, #8]
 8008aae:	e7f4      	b.n	8008a9a <__swsetup_r+0x8e>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e7f7      	b.n	8008aa4 <__swsetup_r+0x98>
 8008ab4:	20000020 	.word	0x20000020

08008ab8 <_raise_r>:
 8008ab8:	291f      	cmp	r1, #31
 8008aba:	b538      	push	{r3, r4, r5, lr}
 8008abc:	4605      	mov	r5, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	d904      	bls.n	8008acc <_raise_r+0x14>
 8008ac2:	2316      	movs	r3, #22
 8008ac4:	6003      	str	r3, [r0, #0]
 8008ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ace:	b112      	cbz	r2, 8008ad6 <_raise_r+0x1e>
 8008ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ad4:	b94b      	cbnz	r3, 8008aea <_raise_r+0x32>
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f000 f830 	bl	8008b3c <_getpid_r>
 8008adc:	4622      	mov	r2, r4
 8008ade:	4601      	mov	r1, r0
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae6:	f000 b817 	b.w	8008b18 <_kill_r>
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d00a      	beq.n	8008b04 <_raise_r+0x4c>
 8008aee:	1c59      	adds	r1, r3, #1
 8008af0:	d103      	bne.n	8008afa <_raise_r+0x42>
 8008af2:	2316      	movs	r3, #22
 8008af4:	6003      	str	r3, [r0, #0]
 8008af6:	2001      	movs	r0, #1
 8008af8:	e7e7      	b.n	8008aca <_raise_r+0x12>
 8008afa:	2100      	movs	r1, #0
 8008afc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b00:	4620      	mov	r0, r4
 8008b02:	4798      	blx	r3
 8008b04:	2000      	movs	r0, #0
 8008b06:	e7e0      	b.n	8008aca <_raise_r+0x12>

08008b08 <raise>:
 8008b08:	4b02      	ldr	r3, [pc, #8]	@ (8008b14 <raise+0xc>)
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	f7ff bfd3 	b.w	8008ab8 <_raise_r>
 8008b12:	bf00      	nop
 8008b14:	20000020 	.word	0x20000020

08008b18 <_kill_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d07      	ldr	r5, [pc, #28]	@ (8008b38 <_kill_r+0x20>)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	f7fa f975 	bl	8002e14 <_kill>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	d102      	bne.n	8008b34 <_kill_r+0x1c>
 8008b2e:	682b      	ldr	r3, [r5, #0]
 8008b30:	b103      	cbz	r3, 8008b34 <_kill_r+0x1c>
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	bd38      	pop	{r3, r4, r5, pc}
 8008b36:	bf00      	nop
 8008b38:	2000086c 	.word	0x2000086c

08008b3c <_getpid_r>:
 8008b3c:	f7fa b962 	b.w	8002e04 <_getpid>

08008b40 <__swhatbuf_r>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	460c      	mov	r4, r1
 8008b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	b096      	sub	sp, #88	@ 0x58
 8008b4c:	4615      	mov	r5, r2
 8008b4e:	461e      	mov	r6, r3
 8008b50:	da0d      	bge.n	8008b6e <__swhatbuf_r+0x2e>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b58:	f04f 0100 	mov.w	r1, #0
 8008b5c:	bf14      	ite	ne
 8008b5e:	2340      	movne	r3, #64	@ 0x40
 8008b60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b64:	2000      	movs	r0, #0
 8008b66:	6031      	str	r1, [r6, #0]
 8008b68:	602b      	str	r3, [r5, #0]
 8008b6a:	b016      	add	sp, #88	@ 0x58
 8008b6c:	bd70      	pop	{r4, r5, r6, pc}
 8008b6e:	466a      	mov	r2, sp
 8008b70:	f000 f848 	bl	8008c04 <_fstat_r>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	dbec      	blt.n	8008b52 <__swhatbuf_r+0x12>
 8008b78:	9901      	ldr	r1, [sp, #4]
 8008b7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b82:	4259      	negs	r1, r3
 8008b84:	4159      	adcs	r1, r3
 8008b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b8a:	e7eb      	b.n	8008b64 <__swhatbuf_r+0x24>

08008b8c <__smakebuf_r>:
 8008b8c:	898b      	ldrh	r3, [r1, #12]
 8008b8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b90:	079d      	lsls	r5, r3, #30
 8008b92:	4606      	mov	r6, r0
 8008b94:	460c      	mov	r4, r1
 8008b96:	d507      	bpl.n	8008ba8 <__smakebuf_r+0x1c>
 8008b98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	6123      	str	r3, [r4, #16]
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	6163      	str	r3, [r4, #20]
 8008ba4:	b003      	add	sp, #12
 8008ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ba8:	ab01      	add	r3, sp, #4
 8008baa:	466a      	mov	r2, sp
 8008bac:	f7ff ffc8 	bl	8008b40 <__swhatbuf_r>
 8008bb0:	9f00      	ldr	r7, [sp, #0]
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	f7fd fa28 	bl	800600c <_malloc_r>
 8008bbc:	b948      	cbnz	r0, 8008bd2 <__smakebuf_r+0x46>
 8008bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc2:	059a      	lsls	r2, r3, #22
 8008bc4:	d4ee      	bmi.n	8008ba4 <__smakebuf_r+0x18>
 8008bc6:	f023 0303 	bic.w	r3, r3, #3
 8008bca:	f043 0302 	orr.w	r3, r3, #2
 8008bce:	81a3      	strh	r3, [r4, #12]
 8008bd0:	e7e2      	b.n	8008b98 <__smakebuf_r+0xc>
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	6020      	str	r0, [r4, #0]
 8008bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bda:	81a3      	strh	r3, [r4, #12]
 8008bdc:	9b01      	ldr	r3, [sp, #4]
 8008bde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008be2:	b15b      	cbz	r3, 8008bfc <__smakebuf_r+0x70>
 8008be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008be8:	4630      	mov	r0, r6
 8008bea:	f000 f81d 	bl	8008c28 <_isatty_r>
 8008bee:	b128      	cbz	r0, 8008bfc <__smakebuf_r+0x70>
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	f043 0301 	orr.w	r3, r3, #1
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	431d      	orrs	r5, r3
 8008c00:	81a5      	strh	r5, [r4, #12]
 8008c02:	e7cf      	b.n	8008ba4 <__smakebuf_r+0x18>

08008c04 <_fstat_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4d07      	ldr	r5, [pc, #28]	@ (8008c24 <_fstat_r+0x20>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	f7fa f95f 	bl	8002ed4 <_fstat>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d102      	bne.n	8008c20 <_fstat_r+0x1c>
 8008c1a:	682b      	ldr	r3, [r5, #0]
 8008c1c:	b103      	cbz	r3, 8008c20 <_fstat_r+0x1c>
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	bd38      	pop	{r3, r4, r5, pc}
 8008c22:	bf00      	nop
 8008c24:	2000086c 	.word	0x2000086c

08008c28 <_isatty_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d06      	ldr	r5, [pc, #24]	@ (8008c44 <_isatty_r+0x1c>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	f7fa f95e 	bl	8002ef4 <_isatty>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_isatty_r+0x1a>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_isatty_r+0x1a>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	2000086c 	.word	0x2000086c

08008c48 <_init>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	bf00      	nop
 8008c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4e:	bc08      	pop	{r3}
 8008c50:	469e      	mov	lr, r3
 8008c52:	4770      	bx	lr

08008c54 <_fini>:
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c56:	bf00      	nop
 8008c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5a:	bc08      	pop	{r3}
 8008c5c:	469e      	mov	lr, r3
 8008c5e:	4770      	bx	lr
