
BMS_SN4_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009530  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  08009700  08009700  0000a700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ec8  08009ec8  0000b218  2**0
                  CONTENTS
  4 .ARM          00000008  08009ec8  08009ec8  0000aec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ed0  08009ed0  0000b218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ed0  08009ed0  0000aed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ed4  08009ed4  0000aed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08009ed8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000218  0800a0f0  0000b218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  0800a0f0  0000b728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018135  00000000  00000000  0000b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f2  00000000  00000000  0002337d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  00026c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001201  00000000  00000000  00028378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261ca  00000000  00000000  00029579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d094  00000000  00000000  0004f743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbd03  00000000  00000000  0006c7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001484da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071a8  00000000  00000000  00148520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0014f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080096e8 	.word	0x080096e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	080096e8 	.word	0x080096e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <pec15_calc>:
// ****************** Error Correction *******************
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8000f84:	2310      	movs	r3, #16
 8000f86:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000f88:	2300      	movs	r3, #0
 8000f8a:	737b      	strb	r3, [r7, #13]
 8000f8c:	e018      	b.n	8000fc0 <pec15_calc+0x48>
	{
		addr = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	09db      	lsrs	r3, r3, #7
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	7b7a      	ldrb	r2, [r7, #13]
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	440a      	add	r2, r1
 8000f9a:	7812      	ldrb	r2, [r2, #0]
 8000f9c:	4053      	eors	r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	897b      	ldrh	r3, [r7, #10]
 8000fac:	490b      	ldr	r1, [pc, #44]	@ (8000fdc <pec15_calc+0x64>)
 8000fae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4053      	eors	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	737b      	strb	r3, [r7, #13]
 8000fc0:	7b7a      	ldrb	r2, [r7, #13]
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d3e2      	bcc.n	8000f8e <pec15_calc+0x16>
	}

	return(remainder * 2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	b29b      	uxth	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	08009740 	.word	0x08009740

08000fe0 <pec10_calc>:

/* Calculates  and returns the CRC10 */
uint16_t pec10_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8000fec:	2310      	movs	r3, #16
 8000fee:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	737b      	strb	r3, [r7, #13]
 8000ff4:	e01c      	b.n	8001030 <pec10_calc+0x50>
	{
		addr = ((remainder >> 2) ^ data[i]) & 0xff;//calculate PEC table address
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	7b7a      	ldrb	r2, [r7, #13]
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	440a      	add	r2, r1
 8001002:	7812      	ldrb	r2, [r2, #0]
 8001004:	4053      	eors	r3, r2
 8001006:	b29b      	uxth	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc10Table[addr];
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	897b      	ldrh	r3, [r7, #10]
 8001014:	490c      	ldr	r1, [pc, #48]	@ (8001048 <pec10_calc+0x68>)
 8001016:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4053      	eors	r3, r2
 800101e:	b21b      	sxth	r3, r3
 8001020:	81fb      	strh	r3, [r7, #14]
		remainder &= 0x3FF; //Ensure remainder stays within 10 bits
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001028:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 800102a:	7b7b      	ldrb	r3, [r7, #13]
 800102c:	3301      	adds	r3, #1
 800102e:	737b      	strb	r3, [r7, #13]
 8001030:	7b7a      	ldrb	r2, [r7, #13]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3de      	bcc.n	8000ff6 <pec10_calc+0x16>
	}

	return(remainder); // No 0 in LSB
 8001038:	89fb      	ldrh	r3, [r7, #14]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	08009940 	.word	0x08009940

0800104c <cmd_68>:
//***************** Read and Write to SPI ****************
/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	4619      	mov	r1, r3
 8001066:	2002      	movs	r0, #2
 8001068:	f7ff ff86 	bl	8000f78 <pec15_calc>
 800106c:	4603      	mov	r3, r0
 800106e:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001070:	89fb      	ldrh	r3, [r7, #14]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	72fb      	strb	r3, [r7, #11]

	FEB_cs_low();
 8001080:	f001 fc2e 	bl	80028e0 <FEB_cs_low>
	FEB_spi_write_array(4,cmd);
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	4619      	mov	r1, r3
 800108a:	2004      	movs	r0, #4
 800108c:	f001 fc40 	bl	8002910 <FEB_spi_write_array>
	FEB_cs_high();
 8001090:	f001 fc32 	bl	80028f8 <FEB_cs_high>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <cmd_68_r>:
void cmd_68_r(uint8_t tx_cmd[2],uint8_t* data, uint8_t len) //The command to be transmitted
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	4613      	mov	r3, r2
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	743b      	strb	r3, [r7, #16]
	cmd[1] =  tx_cmd[1];
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	747b      	strb	r3, [r7, #17]
	cmd_pec = pec15_calc(2, cmd);
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4619      	mov	r1, r3
 80010bc:	2002      	movs	r0, #2
 80010be:	f7ff ff5b 	bl	8000f78 <pec15_calc>
 80010c2:	4603      	mov	r3, r0
 80010c4:	82fb      	strh	r3, [r7, #22]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80010c6:	8afb      	ldrh	r3, [r7, #22]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t)(cmd_pec);
 80010d0:	8afb      	ldrh	r3, [r7, #22]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	74fb      	strb	r3, [r7, #19]

	FEB_cs_low();
 80010d6:	f001 fc03 	bl	80028e0 <FEB_cs_low>
	FEB_spi_write_read(cmd, 4, data, len);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f107 0010 	add.w	r0, r7, #16
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	2104      	movs	r1, #4
 80010e4:	f001 fc28 	bl	8002938 <FEB_spi_write_read>
	FEB_cs_high();
 80010e8:	f001 fc06 	bl	80028f8 <FEB_cs_high>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8001102:	2306      	movs	r3, #6
 8001104:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	3304      	adds	r3, #4
 800110e:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001110:	7efb      	ldrb	r3, [r7, #27]
 8001112:	4618      	mov	r0, r3
 8001114:	f005 fe60 	bl	8006dd8 <malloc>
 8001118:	4603      	mov	r3, r0
 800111a:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	7852      	ldrb	r2, [r2, #1]
 800112c:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 800112e:	6979      	ldr	r1, [r7, #20]
 8001130:	2002      	movs	r0, #2
 8001132:	f7ff ff21 	bl	8000f78 <pec15_calc>
 8001136:	4603      	mov	r3, r0
 8001138:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800113a:	8a7b      	ldrh	r3, [r7, #18]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b29a      	uxth	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3302      	adds	r3, #2
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3303      	adds	r3, #3
 800114c:	8a7a      	ldrh	r2, [r7, #18]
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8001152:	2304      	movs	r3, #4
 8001154:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each ADBMS630B, this loops starts with the last IC on the stack.
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	77bb      	strb	r3, [r7, #30]
 800115a:	e042      	b.n	80011e2 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800115c:	2300      	movs	r3, #0
 800115e:	777b      	strb	r3, [r7, #29]
 8001160:	e016      	b.n	8001190 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8001162:	7fbb      	ldrb	r3, [r7, #30]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	461a      	mov	r2, r3
 8001170:	7f7b      	ldrb	r3, [r7, #29]
 8001172:	4413      	add	r3, r2
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	441a      	add	r2, r3
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	6979      	ldr	r1, [r7, #20]
 800117e:	440b      	add	r3, r1
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8001184:	7ffb      	ldrb	r3, [r7, #31]
 8001186:	3301      	adds	r3, #1
 8001188:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800118a:	7f7b      	ldrb	r3, [r7, #29]
 800118c:	3301      	adds	r3, #1
 800118e:	777b      	strb	r3, [r7, #29]
 8001190:	7f7a      	ldrb	r2, [r7, #29]
 8001192:	7f3b      	ldrb	r3, [r7, #28]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3e4      	bcc.n	8001162 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec10_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 8001198:	7fbb      	ldrb	r3, [r7, #30]
 800119a:	1e5a      	subs	r2, r3, #1
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	461a      	mov	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	441a      	add	r2, r3
 80011aa:	7f3b      	ldrb	r3, [r7, #28]
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff16 	bl	8000fe0 <pec10_calc>
 80011b4:	4603      	mov	r3, r0
 80011b6:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 80011b8:	8a3b      	ldrh	r3, [r7, #16]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	b299      	uxth	r1, r3
 80011be:	7ffb      	ldrb	r3, [r7, #31]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	b2ca      	uxtb	r2, r1
 80011c6:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 80011c8:	7ffb      	ldrb	r3, [r7, #31]
 80011ca:	3301      	adds	r3, #1
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	4413      	add	r3, r2
 80011d0:	8a3a      	ldrh	r2, [r7, #16]
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	3302      	adds	r3, #2
 80011da:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each ADBMS630B, this loops starts with the last IC on the stack.
 80011dc:	7fbb      	ldrb	r3, [r7, #30]
 80011de:	3b01      	subs	r3, #1
 80011e0:	77bb      	strb	r3, [r7, #30]
 80011e2:	7fbb      	ldrb	r3, [r7, #30]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1b9      	bne.n	800115c <write_68+0x68>
	}

	FEB_cs_low();
 80011e8:	f001 fb7a 	bl	80028e0 <FEB_cs_low>
	FEB_spi_write_array(CMD_LEN, cmd);
 80011ec:	7efb      	ldrb	r3, [r7, #27]
 80011ee:	6979      	ldr	r1, [r7, #20]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fb8d 	bl	8002910 <FEB_spi_write_array>
	FEB_cs_high();
 80011f6:	f001 fb7f 	bl	80028f8 <FEB_cs_high>

	free(cmd);
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f005 fdf4 	bl	8006de8 <free>
}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <transmitCMD>:

//****************** CMD Translation ****************************
void transmitCMD(uint16_t cmdcode){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	b29b      	uxth	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	733b      	strb	r3, [r7, #12]
	cmd[1]=(cmdcode%0x100);//selects second byte
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	737b      	strb	r3, [r7, #13]
	cmd_68(cmd);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff10 	bl	800104c <cmd_68>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <transmitCMDR>:
void transmitCMDR(uint16_t cmdcode,uint8_t*data,uint8_t len){
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
 8001240:	4613      	mov	r3, r2
 8001242:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	b29b      	uxth	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	733b      	strb	r3, [r7, #12]
	cmd[1]=(cmdcode%0x100);//selects second byte
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	737b      	strb	r3, [r7, #13]
	cmd_68_r(cmd,data,len);
 8001254:	797a      	ldrb	r2, [r7, #5]
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	6839      	ldr	r1, [r7, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff1d 	bl	800109c <cmd_68_r>
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <get_gpio_pin>:


// ******************************** Helper Functions ********************************


static uint8_t get_gpio_pin(uint8_t mux) {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	if(mux<0||mux>3)return -1;
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b03      	cmp	r3, #3
 800127a:	d901      	bls.n	8001280 <get_gpio_pin+0x14>
 800127c:	23ff      	movs	r3, #255	@ 0xff
 800127e:	e002      	b.n	8001286 <get_gpio_pin+0x1a>

	return gpio_map[mux];
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <get_gpio_pin+0x28>)
 8001284:	5cd3      	ldrb	r3, [r2, r3]
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008

08001298 <get_sensor>:

static uint8_t get_sensor(uint8_t mux, uint8_t channel) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	return mux * 8 + channel;
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	4413      	add	r3, r2
 80012b2:	b2db      	uxtb	r3, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <convert_voltage>:

static float convert_voltage(int16_t raw_code) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
	return raw_code * 0.000150 + 1.5;
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f948 	bl	8000564 <__aeabi_i2d>
 80012d4:	a30f      	add	r3, pc, #60	@ (adr r3, 8001314 <convert_voltage+0x54>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7ff f9ad 	bl	8000638 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <convert_voltage+0x50>)
 80012ec:	f7fe ffee 	bl	80002cc <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc76 	bl	8000be8 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	ee07 3a90 	vmov	s15, r3
}
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	f3af 8000 	nop.w
 8001310:	3ff80000 	.word	0x3ff80000
 8001314:	30553261 	.word	0x30553261
 8001318:	3f23a92a 	.word	0x3f23a92a

0800131c <FEB_ADBMS_Init>:

// ******************************** Functions ********************************

void FEB_ADBMS_Init() {
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af06      	add	r7, sp, #24
	FEB_cs_high();
 8001322:	f001 fae9 	bl	80028f8 <FEB_cs_high>
	ADBMS6830B_init_cfg(FEB_NUM_IC, IC_Config);
 8001326:	4916      	ldr	r1, [pc, #88]	@ (8001380 <FEB_ADBMS_Init+0x64>)
 8001328:	2001      	movs	r0, #1
 800132a:	f000 f9c9 	bl	80016c0 <ADBMS6830B_init_cfg>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 800132e:	2300      	movs	r3, #0
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	e016      	b.n	8001362 <FEB_ADBMS_Init+0x46>
		ADBMS6830B_set_cfgr(ic, IC_Config, refon, cth_bits, gpio_bits, dcc_bits, dcto_bits, uv, ov);
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <FEB_ADBMS_Init+0x68>)
 8001336:	7819      	ldrb	r1, [r3, #0]
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <FEB_ADBMS_Init+0x6c>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	4a13      	ldr	r2, [pc, #76]	@ (800138c <FEB_ADBMS_Init+0x70>)
 800133e:	8812      	ldrh	r2, [r2, #0]
 8001340:	79f8      	ldrb	r0, [r7, #7]
 8001342:	9204      	str	r2, [sp, #16]
 8001344:	9303      	str	r3, [sp, #12]
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <FEB_ADBMS_Init+0x74>)
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <FEB_ADBMS_Init+0x78>)
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <FEB_ADBMS_Init+0x7c>)
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	4b12      	ldr	r3, [pc, #72]	@ (800139c <FEB_ADBMS_Init+0x80>)
 8001354:	460a      	mov	r2, r1
 8001356:	490a      	ldr	r1, [pc, #40]	@ (8001380 <FEB_ADBMS_Init+0x64>)
 8001358:	f000 fa56 	bl	8001808 <ADBMS6830B_set_cfgr>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	3301      	adds	r3, #1
 8001360:	71fb      	strb	r3, [r7, #7]
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0e5      	beq.n	8001334 <FEB_ADBMS_Init+0x18>
	}
	ADBMS6830B_reset_crc_count(FEB_NUM_IC, IC_Config);
 8001368:	4905      	ldr	r1, [pc, #20]	@ (8001380 <FEB_ADBMS_Init+0x64>)
 800136a:	2001      	movs	r0, #1
 800136c:	f000 f9df 	bl	800172e <ADBMS6830B_reset_crc_count>
	ADBMS6830B_init_reg_limits(FEB_NUM_IC, IC_Config);
 8001370:	4903      	ldr	r1, [pc, #12]	@ (8001380 <FEB_ADBMS_Init+0x64>)
 8001372:	2001      	movs	r0, #1
 8001374:	f000 fd1b 	bl	8001dae <ADBMS6830B_init_reg_limits>

}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000340 	.word	0x20000340
 8001384:	20000000 	.word	0x20000000
 8001388:	2000000c 	.word	0x2000000c
 800138c:	2000000e 	.word	0x2000000e
 8001390:	20000464 	.word	0x20000464
 8001394:	20000458 	.word	0x20000458
 8001398:	2000044c 	.word	0x2000044c
 800139c:	20000004 	.word	0x20000004

080013a0 <FEB_ADBMS_Voltage_Process>:

void FEB_ADBMS_Voltage_Process() {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	/* Voltage */
	start_adc_cell_voltage_measurements();
 80013a4:	f000 f823 	bl	80013ee <start_adc_cell_voltage_measurements>
	read_cell_voltages();
 80013a8:	f000 f834 	bl	8001414 <read_cell_voltages>
	store_cell_voltages();
 80013ac:	f000 f840 	bl	8001430 <store_cell_voltages>
	//validate_voltages();



}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <FEB_ADBMS_Temperature_Process>:

void FEB_ADBMS_Temperature_Process(){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
	/* Temperature */
	for (uint8_t channel = 0; channel < 8; channel++) {
 80013ba:	2300      	movs	r3, #0
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	e00e      	b.n	80013de <FEB_ADBMS_Temperature_Process+0x2a>
		configure_gpio_bits(channel);
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f8a2 	bl	800150c <configure_gpio_bits>
		start_aux_voltage_measurements();
 80013c8:	f000 f910 	bl	80015ec <start_aux_voltage_measurements>
		read_aux_voltages();
 80013cc:	f000 f91c 	bl	8001608 <read_aux_voltages>
		store_cell_temps(channel);
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f926 	bl	8001624 <store_cell_temps>
	for (uint8_t channel = 0; channel < 8; channel++) {
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	3301      	adds	r3, #1
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b07      	cmp	r3, #7
 80013e2:	d9ed      	bls.n	80013c0 <FEB_ADBMS_Temperature_Process+0xc>
	}
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <start_adc_cell_voltage_measurements>:

// ******************************** Voltage ********************************

void start_adc_cell_voltage_measurements() {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af02      	add	r7, sp, #8
	wakeup_sleep(FEB_NUM_IC);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f001 f80d 	bl	8002414 <wakeup_sleep>
	ADBMS6830B_adcv(RDVR, DCPVR, CONTVR, RSTFVR, OWVR);
 80013fa:	2300      	movs	r3, #0
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2300      	movs	r3, #0
 8001400:	2201      	movs	r2, #1
 8001402:	2100      	movs	r1, #0
 8001404:	2000      	movs	r0, #0
 8001406:	f000 fd25 	bl	8001e54 <ADBMS6830B_adcv>
	ADBMS6830B_pollAdc();
 800140a:	f000 fd55 	bl	8001eb8 <ADBMS6830B_pollAdc>
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <read_cell_voltages>:

void read_cell_voltages() {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 8001418:	2001      	movs	r0, #1
 800141a:	f000 fffb 	bl	8002414 <wakeup_sleep>
	ADBMS6830B_rdcv(FEB_NUM_IC, IC_Config);
 800141e:	4903      	ldr	r1, [pc, #12]	@ (800142c <read_cell_voltages+0x18>)
 8001420:	2001      	movs	r0, #1
 8001422:	f000 fd73 	bl	8001f0c <ADBMS6830B_rdcv>
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000340 	.word	0x20000340

08001430 <store_cell_voltages>:

void store_cell_voltages() {
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	FEB_ACC.total_voltage_V = 0;
 8001436:	4b33      	ldr	r3, [pc, #204]	@ (8001504 <store_cell_voltages+0xd4>)
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 800143e:	2300      	movs	r3, #0
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	e056      	b.n	80014f2 <store_cell_voltages+0xc2>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 8001444:	2300      	movs	r3, #0
 8001446:	71bb      	strb	r3, [r7, #6]
 8001448:	e04d      	b.n	80014e6 <store_cell_voltages+0xb6>
			uint8_t ic = bank;
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	717b      	strb	r3, [r7, #5]
			float CVoltage = convert_voltage(IC_Config[bank].cells.c_codes[ic]);
 800144e:	79fa      	ldrb	r2, [r7, #7]
 8001450:	797b      	ldrb	r3, [r7, #5]
 8001452:	492d      	ldr	r1, [pc, #180]	@ (8001508 <store_cell_voltages+0xd8>)
 8001454:	2086      	movs	r0, #134	@ 0x86
 8001456:	fb00 f202 	mul.w	r2, r0, r2
 800145a:	4413      	add	r3, r2
 800145c:	330c      	adds	r3, #12
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	440b      	add	r3, r1
 8001462:	88db      	ldrh	r3, [r3, #6]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff2a 	bl	80012c0 <convert_voltage>
 800146c:	ed87 0a00 	vstr	s0, [r7]
			FEB_ACC.banks[bank].cells[cell].voltage_V = CVoltage;
 8001470:	79fa      	ldrb	r2, [r7, #7]
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	4823      	ldr	r0, [pc, #140]	@ (8001504 <store_cell_voltages+0xd4>)
 8001476:	3310      	adds	r3, #16
 8001478:	00d9      	lsls	r1, r3, #3
 800147a:	4613      	mov	r3, r2
 800147c:	019b      	lsls	r3, r3, #6
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	4403      	add	r3, r0
 8001486:	330c      	adds	r3, #12
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	601a      	str	r2, [r3, #0]
			FEB_ACC.banks[bank].cells[cell].voltage_S = convert_voltage(IC_Config[bank].cells.s_codes[ic]);
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	797b      	ldrb	r3, [r7, #5]
 8001490:	491d      	ldr	r1, [pc, #116]	@ (8001508 <store_cell_voltages+0xd8>)
 8001492:	2086      	movs	r0, #134	@ 0x86
 8001494:	fb00 f202 	mul.w	r2, r0, r2
 8001498:	4413      	add	r3, r2
 800149a:	331c      	adds	r3, #28
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	440b      	add	r3, r1
 80014a0:	895b      	ldrh	r3, [r3, #10]
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	79fc      	ldrb	r4, [r7, #7]
 80014a6:	79bd      	ldrb	r5, [r7, #6]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff09 	bl	80012c0 <convert_voltage>
 80014ae:	eef0 7a40 	vmov.f32	s15, s0
 80014b2:	4914      	ldr	r1, [pc, #80]	@ (8001504 <store_cell_voltages+0xd4>)
 80014b4:	f105 0310 	add.w	r3, r5, #16
 80014b8:	00da      	lsls	r2, r3, #3
 80014ba:	4623      	mov	r3, r4
 80014bc:	019b      	lsls	r3, r3, #6
 80014be:	4423      	add	r3, r4
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	3310      	adds	r3, #16
 80014c8:	edc3 7a00 	vstr	s15, [r3]
			FEB_ACC.total_voltage_V+=CVoltage;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <store_cell_voltages+0xd4>)
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	edd7 7a00 	vldr	s15, [r7]
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <store_cell_voltages+0xd4>)
 80014dc:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	3301      	adds	r3, #1
 80014e4:	71bb      	strb	r3, [r7, #6]
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d9ae      	bls.n	800144a <store_cell_voltages+0x1a>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	3301      	adds	r3, #1
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0a5      	beq.n	8001444 <store_cell_voltages+0x14>
		}
	}
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bdb0      	pop	{r4, r5, r7, pc}
 8001502:	bf00      	nop
 8001504:	20000234 	.word	0x20000234
 8001508:	20000340 	.word	0x20000340

0800150c <configure_gpio_bits>:
		}
	}
}

// ******************************** Temperature ********************************
void configure_gpio_bits(uint8_t channel) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af06      	add	r7, sp, #24
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	gpio_bits[0] = 0b1; /* ADC Channel */
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <configure_gpio_bits+0xc0>)
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
	gpio_bits[1] = 0b1; /* ADC Channel */
 800151c:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <configure_gpio_bits+0xc0>)
 800151e:	2201      	movs	r2, #1
 8001520:	705a      	strb	r2, [r3, #1]
	gpio_bits[2] = (channel >> 0) & 0b1; /* MUX Sel 1 */
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf14      	ite	ne
 800152c:	2301      	movne	r3, #1
 800152e:	2300      	moveq	r3, #0
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <configure_gpio_bits+0xc0>)
 8001534:	709a      	strb	r2, [r3, #2]
	gpio_bits[3] = (channel >> 1) & 0b1; /* MUX Sel 1 */
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	085b      	lsrs	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf14      	ite	ne
 8001544:	2301      	movne	r3, #1
 8001546:	2300      	moveq	r3, #0
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <configure_gpio_bits+0xc0>)
 800154c:	70da      	strb	r2, [r3, #3]
	gpio_bits[4] = (channel >> 2) & 0b1; /* MUX Sel 1 */
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf14      	ite	ne
 800155c:	2301      	movne	r3, #1
 800155e:	2300      	moveq	r3, #0
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <configure_gpio_bits+0xc0>)
 8001564:	711a      	strb	r2, [r3, #4]
	gpio_bits[5] = 0b1; /* ADC Channel */
 8001566:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <configure_gpio_bits+0xc0>)
 8001568:	2201      	movs	r2, #1
 800156a:	715a      	strb	r2, [r3, #5]
	gpio_bits[6] = 0b1; /* ADC Channel */
 800156c:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <configure_gpio_bits+0xc0>)
 800156e:	2201      	movs	r2, #1
 8001570:	719a      	strb	r2, [r3, #6]
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	e016      	b.n	80015a6 <configure_gpio_bits+0x9a>
		ADBMS6830B_set_cfgr(ic, IC_Config, refon, cth_bits, gpio_bits, dcc_bits, dcto_bits, uv, ov);
 8001578:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <configure_gpio_bits+0xc4>)
 800157a:	7819      	ldrb	r1, [r3, #0]
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <configure_gpio_bits+0xc8>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	4a15      	ldr	r2, [pc, #84]	@ (80015d8 <configure_gpio_bits+0xcc>)
 8001582:	8812      	ldrh	r2, [r2, #0]
 8001584:	7bf8      	ldrb	r0, [r7, #15]
 8001586:	9204      	str	r2, [sp, #16]
 8001588:	9303      	str	r3, [sp, #12]
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <configure_gpio_bits+0xd0>)
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <configure_gpio_bits+0xd4>)
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <configure_gpio_bits+0xc0>)
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <configure_gpio_bits+0xd8>)
 8001598:	460a      	mov	r2, r1
 800159a:	4913      	ldr	r1, [pc, #76]	@ (80015e8 <configure_gpio_bits+0xdc>)
 800159c:	f000 f934 	bl	8001808 <ADBMS6830B_set_cfgr>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	3301      	adds	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0e5      	beq.n	8001578 <configure_gpio_bits+0x6c>
	}
	wakeup_sleep(FEB_NUM_IC);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f000 ff31 	bl	8002414 <wakeup_sleep>
	ADBMS6830B_wrcfga(FEB_NUM_IC, IC_Config);
 80015b2:	490d      	ldr	r1, [pc, #52]	@ (80015e8 <configure_gpio_bits+0xdc>)
 80015b4:	2001      	movs	r0, #1
 80015b6:	f000 fd56 	bl	8002066 <ADBMS6830B_wrcfga>
	ADBMS6830B_wrcfgb(FEB_NUM_IC, IC_Config);
 80015ba:	490b      	ldr	r1, [pc, #44]	@ (80015e8 <configure_gpio_bits+0xdc>)
 80015bc:	2001      	movs	r0, #1
 80015be:	f000 fdd2 	bl	8002166 <ADBMS6830B_wrcfgb>

}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000044c 	.word	0x2000044c
 80015d0:	20000000 	.word	0x20000000
 80015d4:	2000000c 	.word	0x2000000c
 80015d8:	2000000e 	.word	0x2000000e
 80015dc:	20000464 	.word	0x20000464
 80015e0:	20000458 	.word	0x20000458
 80015e4:	20000004 	.word	0x20000004
 80015e8:	20000340 	.word	0x20000340

080015ec <start_aux_voltage_measurements>:

void start_aux_voltage_measurements() {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f000 ff0f 	bl	8002414 <wakeup_sleep>
	ADBMS6830B_adax(AUX_OW_OFF, PUP_DOWN, AUX_ALL);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 fe34 	bl	8002268 <ADBMS6830B_adax>
	ADBMS6830B_pollAdc();
 8001600:	f000 fc5a 	bl	8001eb8 <ADBMS6830B_pollAdc>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <read_aux_voltages>:

void read_aux_voltages() {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 800160c:	2001      	movs	r0, #1
 800160e:	f000 ff01 	bl	8002414 <wakeup_sleep>
	ADBMS6830B_rdaux(FEB_NUM_IC, IC_Config);
 8001612:	4903      	ldr	r1, [pc, #12]	@ (8001620 <read_aux_voltages+0x18>)
 8001614:	2001      	movs	r0, #1
 8001616:	f000 fe51 	bl	80022bc <ADBMS6830B_rdaux>
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000340 	.word	0x20000340

08001624 <store_cell_temps>:

void store_cell_temps(uint8_t channel) {
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e039      	b.n	80016a8 <store_cell_temps+0x84>
		for (uint8_t mux = 0; mux < 4; mux++) {
 8001634:	2300      	movs	r3, #0
 8001636:	73bb      	strb	r3, [r7, #14]
 8001638:	e030      	b.n	800169c <store_cell_temps+0x78>
			uint8_t gpio = get_gpio_pin(mux);
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fe15 	bl	800126c <get_gpio_pin>
 8001642:	4603      	mov	r3, r0
 8001644:	737b      	strb	r3, [r7, #13]
			uint16_t raw_code = IC_Config[bank].aux.a_codes[gpio];
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	7b7b      	ldrb	r3, [r7, #13]
 800164a:	491b      	ldr	r1, [pc, #108]	@ (80016b8 <store_cell_temps+0x94>)
 800164c:	2086      	movs	r0, #134	@ 0x86
 800164e:	fb00 f202 	mul.w	r2, r0, r2
 8001652:	4413      	add	r3, r2
 8001654:	3334      	adds	r3, #52	@ 0x34
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	440b      	add	r3, r1
 800165a:	889b      	ldrh	r3, [r3, #4]
 800165c:	817b      	strh	r3, [r7, #10]
			uint8_t sensor = get_sensor(mux, channel);
 800165e:	79fa      	ldrb	r2, [r7, #7]
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fe17 	bl	8001298 <get_sensor>
 800166a:	4603      	mov	r3, r0
 800166c:	727b      	strb	r3, [r7, #9]
			FEB_ACC.banks[bank].temp_sensor_readings_V[sensor] = convert_voltage(raw_code);
 800166e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001672:	7bfc      	ldrb	r4, [r7, #15]
 8001674:	7a7d      	ldrb	r5, [r7, #9]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fe22 	bl	80012c0 <convert_voltage>
 800167c:	eef0 7a40 	vmov.f32	s15, s0
 8001680:	4a0e      	ldr	r2, [pc, #56]	@ (80016bc <store_cell_temps+0x98>)
 8001682:	4623      	mov	r3, r4
 8001684:	019b      	lsls	r3, r3, #6
 8001686:	4423      	add	r3, r4
 8001688:	442b      	add	r3, r5
 800168a:	3302      	adds	r3, #2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	3304      	adds	r3, #4
 8001692:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t mux = 0; mux < 4; mux++) {
 8001696:	7bbb      	ldrb	r3, [r7, #14]
 8001698:	3301      	adds	r3, #1
 800169a:	73bb      	strb	r3, [r7, #14]
 800169c:	7bbb      	ldrb	r3, [r7, #14]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d9cb      	bls.n	800163a <store_cell_temps+0x16>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	3301      	adds	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0c2      	beq.n	8001634 <store_cell_temps+0x10>
		}
	}
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bdb0      	pop	{r4, r5, r7, pc}
 80016b8:	20000340 	.word	0x20000340
 80016bc:	20000234 	.word	0x20000234

080016c0 <ADBMS6830B_init_cfg>:

/* Helper function to initialize CFG variables */
void ADBMS6830B_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e022      	b.n	8001718 <ADBMS6830B_init_cfg+0x58>
	{
		for (int j =0; j<6; j++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	e019      	b.n	800170c <ADBMS6830B_init_cfg+0x4c>
		{
		  ic[current_ic].configa.tx_data[j] = 0;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	441a      	add	r2, r3
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	4413      	add	r3, r2
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
          ic[current_ic].configb.tx_data[j] = 0;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80016f4:	fb02 f303 	mul.w	r3, r2, r3
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	441a      	add	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4413      	add	r3, r2
 8001700:	330f      	adds	r3, #15
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3301      	adds	r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b05      	cmp	r3, #5
 8001710:	dde2      	ble.n	80016d8 <ADBMS6830B_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	3301      	adds	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	429a      	cmp	r2, r3
 800171e:	d3d8      	bcc.n	80016d2 <ADBMS6830B_init_cfg+0x12>
		}
	}
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <ADBMS6830B_reset_crc_count>:

/* Helper Function to reset PEC counters */
void ADBMS6830B_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 800172e:	b480      	push	{r7}
 8001730:	b087      	sub	sp, #28
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	6039      	str	r1, [r7, #0]
 8001738:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	e058      	b.n	80017f2 <ADBMS6830B_reset_crc_count+0xc4>
	{
		ic[current_ic].crc_count.pec_count = 0;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	4413      	add	r3, r2
 800174e:	2200      	movs	r2, #0
 8001750:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
		ic[current_ic].crc_count.cfgr_pec = 0;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	4413      	add	r3, r2
 8001762:	2200      	movs	r2, #0
 8001764:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		for (int i=0; i<6; i++)
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	e00f      	b.n	800178e <ADBMS6830B_reset_crc_count+0x60>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	441a      	add	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	3370      	adds	r3, #112	@ 0x70
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	2200      	movs	r2, #0
 8001786:	815a      	strh	r2, [r3, #10]
		for (int i=0; i<6; i++)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	3301      	adds	r3, #1
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2b05      	cmp	r3, #5
 8001792:	ddec      	ble.n	800176e <ADBMS6830B_reset_crc_count+0x40>

		}
		for (int i=0; i<4; i++)
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	e00f      	b.n	80017ba <ADBMS6830B_reset_crc_count+0x8c>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	441a      	add	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3378      	adds	r3, #120	@ 0x78
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	2200      	movs	r2, #0
 80017b2:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<4; i++)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3301      	adds	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	ddec      	ble.n	800179a <ADBMS6830B_reset_crc_count+0x6c>
		}
		for (int i=0; i<2; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	e00f      	b.n	80017e6 <ADBMS6830B_reset_crc_count+0xb8>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80017cc:	fb02 f303 	mul.w	r3, r2, r3
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	441a      	add	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	337c      	adds	r3, #124	@ 0x7c
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	2200      	movs	r2, #0
 80017de:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<2; i++)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	3301      	adds	r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	ddec      	ble.n	80017c6 <ADBMS6830B_reset_crc_count+0x98>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dba2      	blt.n	8001740 <ADBMS6830B_reset_crc_count+0x12>
		}
	}
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <ADBMS6830B_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]
 8001816:	4613      	mov	r3, r2
 8001818:	73bb      	strb	r3, [r7, #14]
	ADBMS6830B_set_cfgr_refon(nIC,ic,refon);
 800181a:	7bba      	ldrb	r2, [r7, #14]
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f828 	bl	8001876 <ADBMS6830B_set_cfgr_refon>
	ADBMS6830B_set_cfgr_cth(nIC,ic,cth);
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f85a 	bl	80018e6 <ADBMS6830B_set_cfgr_cth>
	ADBMS6830B_set_cfgr_gpio(nIC,ic,gpio);
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f8a6 	bl	800198a <ADBMS6830B_set_cfgr_gpio>
	ADBMS6830B_set_cfgr_dis(nIC,ic,dcc);
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f937 	bl	8001ab8 <ADBMS6830B_set_cfgr_dis>
	ADBMS6830B_set_cfgr_dcto(nIC,ic,dcto);
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	6a3a      	ldr	r2, [r7, #32]
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f9c8 	bl	8001be6 <ADBMS6830B_set_cfgr_dcto>
	ADBMS6830B_set_cfgr_uv(nIC, ic, uv);
 8001856:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	68b9      	ldr	r1, [r7, #8]
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fa14 	bl	8001c8a <ADBMS6830B_set_cfgr_uv>
	ADBMS6830B_set_cfgr_ov(nIC, ic, ov);
 8001862:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 fa59 	bl	8001d20 <ADBMS6830B_set_cfgr_ov>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <ADBMS6830B_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void ADBMS6830B_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	6039      	str	r1, [r7, #0]
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	4613      	mov	r3, r2
 8001884:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]|0x80;
 8001886:	79bb      	ldrb	r3, [r7, #6]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <ADBMS6830B_set_cfgr_refon+0x3e>
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	4413      	add	r3, r2
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80018a2:	fb01 f303 	mul.w	r3, r1, r3
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	440b      	add	r3, r1
 80018aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]
	else ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]&0x7F;
}
 80018b2:	e012      	b.n	80018da <ADBMS6830B_set_cfgr_refon+0x64>
	else ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]&0x7F;
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	440b      	add	r3, r1
 80018d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <ADBMS6830B_set_cfgr_cth>:

/* Helper function to set CTH bits */
void ADBMS6830B_set_cfgr_cth(uint8_t nIC, cell_asic *ic, bool cth[3])
{
 80018e6:	b480      	push	{r7}
 80018e8:	b087      	sub	sp, #28
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 3; i++) {
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e03d      	b.n	8001976 <ADBMS6830B_set_cfgr_cth+0x90>
        if (cth[i]) {
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d019      	beq.n	800193a <ADBMS6830B_set_cfgr_cth+0x54>
            ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0] | (0b01 << i);
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b25a      	sxtb	r2, r3
 8001918:	2101      	movs	r1, #1
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	b25b      	sxtb	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b259      	sxtb	r1, r3
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	4413      	add	r3, r2
 8001934:	b2ca      	uxtb	r2, r1
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	e01a      	b.n	8001970 <ADBMS6830B_set_cfgr_cth+0x8a>
        } else {
            ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0] & ~(0b01 << i);
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b25a      	sxtb	r2, r3
 800194c:	2101      	movs	r1, #1
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	b25b      	sxtb	r3, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	b25b      	sxtb	r3, r3
 800195a:	4013      	ands	r3, r2
 800195c:	b259      	sxtb	r1, r3
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	4413      	add	r3, r2
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3301      	adds	r3, #1
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2b02      	cmp	r3, #2
 800197a:	ddbe      	ble.n	80018fa <ADBMS6830B_set_cfgr_cth+0x14>
        }
    }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <ADBMS6830B_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void ADBMS6830B_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[10])
{
 800198a:	b480      	push	{r7}
 800198c:	b087      	sub	sp, #28
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++) {
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e03d      	b.n	8001a1a <ADBMS6830B_set_cfgr_gpio+0x90>
		if (gpio[i]) {
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d019      	beq.n	80019de <ADBMS6830B_set_cfgr_gpio+0x54>
            ic[nIC].configa.tx_data[3] = ic[nIC].configa.tx_data[3] | (0b01 << i);
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	4413      	add	r3, r2
 80019b8:	78db      	ldrb	r3, [r3, #3]
 80019ba:	b25a      	sxtb	r2, r3
 80019bc:	2101      	movs	r1, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	4313      	orrs	r3, r2
 80019c8:	b259      	sxtb	r1, r3
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80019d0:	fb02 f303 	mul.w	r3, r2, r3
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	4413      	add	r3, r2
 80019d8:	b2ca      	uxtb	r2, r1
 80019da:	70da      	strb	r2, [r3, #3]
 80019dc:	e01a      	b.n	8001a14 <ADBMS6830B_set_cfgr_gpio+0x8a>
        } else {
             ic[nIC].configa.tx_data[3] = ic[nIC].configa.tx_data[3] & ~(0b01 << i);
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	4413      	add	r3, r2
 80019ec:	78db      	ldrb	r3, [r3, #3]
 80019ee:	b25a      	sxtb	r2, r3
 80019f0:	2101      	movs	r1, #1
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	4013      	ands	r3, r2
 8001a00:	b259      	sxtb	r1, r3
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b2ca      	uxtb	r2, r1
 8001a12:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < 8; i++) {
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b07      	cmp	r3, #7
 8001a1e:	ddbe      	ble.n	800199e <ADBMS6830B_set_cfgr_gpio+0x14>
        }
	}

    for (int i = 0; i < 2; i++) {
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	e03e      	b.n	8001aa4 <ADBMS6830B_set_cfgr_gpio+0x11a>
        if (gpio[i + 8]) {
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	3308      	adds	r3, #8
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d019      	beq.n	8001a68 <ADBMS6830B_set_cfgr_gpio+0xde>
            ic[nIC].configa.tx_data[4] = ic[nIC].configa.tx_data[4] | (0b01 << i);
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	4413      	add	r3, r2
 8001a42:	791b      	ldrb	r3, [r3, #4]
 8001a44:	b25a      	sxtb	r2, r3
 8001a46:	2101      	movs	r1, #1
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b259      	sxtb	r1, r3
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	4413      	add	r3, r2
 8001a62:	b2ca      	uxtb	r2, r1
 8001a64:	711a      	strb	r2, [r3, #4]
 8001a66:	e01a      	b.n	8001a9e <ADBMS6830B_set_cfgr_gpio+0x114>
        } else {
             ic[nIC].configa.tx_data[4] = ic[nIC].configa.tx_data[4] & ~(0b01 << i);
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	4413      	add	r3, r2
 8001a76:	791b      	ldrb	r3, [r3, #4]
 8001a78:	b25a      	sxtb	r2, r3
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	4013      	ands	r3, r2
 8001a8a:	b259      	sxtb	r1, r3
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	4413      	add	r3, r2
 8001a9a:	b2ca      	uxtb	r2, r1
 8001a9c:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < 2; i++) {
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	ddbd      	ble.n	8001a26 <ADBMS6830B_set_cfgr_gpio+0x9c>
        }
    }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <ADBMS6830B_set_cfgr_dis>:

/* Helper function to control discharge */
void ADBMS6830B_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++) {
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e03d      	b.n	8001b48 <ADBMS6830B_set_cfgr_dis+0x90>
		if (dcc[i]) {
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d019      	beq.n	8001b0c <ADBMS6830B_set_cfgr_dis+0x54>
            ic[nIC].configb.tx_data[4] = ic[nIC].configb.tx_data[4] | (0b01 << i);
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	7cdb      	ldrb	r3, [r3, #19]
 8001ae8:	b25a      	sxtb	r2, r3
 8001aea:	2101      	movs	r1, #1
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	b25b      	sxtb	r3, r3
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b259      	sxtb	r1, r3
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	4413      	add	r3, r2
 8001b06:	b2ca      	uxtb	r2, r1
 8001b08:	74da      	strb	r2, [r3, #19]
 8001b0a:	e01a      	b.n	8001b42 <ADBMS6830B_set_cfgr_dis+0x8a>
        } else {
             ic[nIC].configb.tx_data[4] = ic[nIC].configb.tx_data[4] & ~(0b01 << i);
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4413      	add	r3, r2
 8001b1a:	7cdb      	ldrb	r3, [r3, #19]
 8001b1c:	b25a      	sxtb	r2, r3
 8001b1e:	2101      	movs	r1, #1
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	b25b      	sxtb	r3, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	b259      	sxtb	r1, r3
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b36:	fb02 f303 	mul.w	r3, r2, r3
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b2ca      	uxtb	r2, r1
 8001b40:	74da      	strb	r2, [r3, #19]
	for (int i = 0; i < 8; i++) {
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2b07      	cmp	r3, #7
 8001b4c:	ddbe      	ble.n	8001acc <ADBMS6830B_set_cfgr_dis+0x14>
        }
	}

    for (int i = 0; i < 8; i++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	e03e      	b.n	8001bd2 <ADBMS6830B_set_cfgr_dis+0x11a>
        if (dcc[i + 8]) {
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	3308      	adds	r3, #8
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d019      	beq.n	8001b96 <ADBMS6830B_set_cfgr_dis+0xde>
            ic[nIC].configb.tx_data[5] = ic[nIC].configb.tx_data[5] | (0b01 << i);
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7d1b      	ldrb	r3, [r3, #20]
 8001b72:	b25a      	sxtb	r2, r3
 8001b74:	2101      	movs	r1, #1
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b259      	sxtb	r1, r3
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	4413      	add	r3, r2
 8001b90:	b2ca      	uxtb	r2, r1
 8001b92:	751a      	strb	r2, [r3, #20]
 8001b94:	e01a      	b.n	8001bcc <ADBMS6830B_set_cfgr_dis+0x114>
        } else {
             ic[nIC].configb.tx_data[5] = ic[nIC].configb.tx_data[5] & ~(0b01 << i);
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	7d1b      	ldrb	r3, [r3, #20]
 8001ba6:	b25a      	sxtb	r2, r3
 8001ba8:	2101      	movs	r1, #1
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	b259      	sxtb	r1, r3
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b2ca      	uxtb	r2, r1
 8001bca:	751a      	strb	r2, [r3, #20]
    for (int i = 0; i < 8; i++) {
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b07      	cmp	r3, #7
 8001bd6:	ddbd      	ble.n	8001b54 <ADBMS6830B_set_cfgr_dis+0x9c>
        }
    }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	371c      	adds	r7, #28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <ADBMS6830B_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void ADBMS6830B_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 8001be6:	b480      	push	{r7}
 8001be8:	b087      	sub	sp, #28
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 6; i++) {
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e03d      	b.n	8001c76 <ADBMS6830B_set_cfgr_dcto+0x90>
		if (dcto[i]) {
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d019      	beq.n	8001c3a <ADBMS6830B_set_cfgr_dcto+0x54>
            ic[nIC].configb.tx_data[3] = ic[nIC].configb.tx_data[3] | (0b01 << i);
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	4413      	add	r3, r2
 8001c14:	7c9b      	ldrb	r3, [r3, #18]
 8001c16:	b25a      	sxtb	r2, r3
 8001c18:	2101      	movs	r1, #1
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b259      	sxtb	r1, r3
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c2c:	fb02 f303 	mul.w	r3, r2, r3
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	4413      	add	r3, r2
 8001c34:	b2ca      	uxtb	r2, r1
 8001c36:	749a      	strb	r2, [r3, #18]
 8001c38:	e01a      	b.n	8001c70 <ADBMS6830B_set_cfgr_dcto+0x8a>
        } else {
             ic[nIC].configb.tx_data[3] = ic[nIC].configb.tx_data[3] & ~(0b01 << i);
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	4413      	add	r3, r2
 8001c48:	7c9b      	ldrb	r3, [r3, #18]
 8001c4a:	b25a      	sxtb	r2, r3
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	b25b      	sxtb	r3, r3
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	b259      	sxtb	r1, r3
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c64:	fb02 f303 	mul.w	r3, r2, r3
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b2ca      	uxtb	r2, r1
 8001c6e:	749a      	strb	r2, [r3, #18]
	for (int i = 0; i < 6; i++) {
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	ddbe      	ble.n	8001bfa <ADBMS6830B_set_cfgr_dcto+0x14>
        }
	}
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <ADBMS6830B_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void ADBMS6830B_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b085      	sub	sp, #20
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	6039      	str	r1, [r7, #0]
 8001c94:	71fb      	strb	r3, [r7, #7]
 8001c96:	4613      	mov	r3, r2
 8001c98:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv / 16) - 1;
 8001c9a:	88bb      	ldrh	r3, [r7, #4]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	81fb      	strh	r3, [r7, #14]
	ic[nIC].configb.tx_data[0] = 0x00FF & tmp;
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	89fa      	ldrh	r2, [r7, #14]
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	73da      	strb	r2, [r3, #15]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] & 0xF0;
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	7c1a      	ldrb	r2, [r3, #16]
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	440b      	add	r3, r1
 8001cd6:	f022 020f 	bic.w	r2, r2, #15
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	741a      	strb	r2, [r3, #16]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] | ((0x0F00 & tmp) >> 8);
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ce4:	fb02 f303 	mul.w	r3, r2, r3
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	7c1b      	ldrb	r3, [r3, #16]
 8001cee:	b25a      	sxtb	r2, r3
 8001cf0:	89fb      	ldrh	r3, [r7, #14]
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	b25b      	sxtb	r3, r3
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	b259      	sxtb	r1, r3
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b2ca      	uxtb	r2, r1
 8001d12:	741a      	strb	r2, [r3, #16]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <ADBMS6830B_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void ADBMS6830B_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov / 16);
 8001d30:	88bb      	ldrh	r3, [r7, #4]
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	81fb      	strh	r3, [r7, #14]
	ic[nIC].configb.tx_data[2] = 0x00FF & (tmp >> 4);
 8001d36:	89fb      	ldrh	r3, [r7, #14]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	b299      	uxth	r1, r3
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	4413      	add	r3, r2
 8001d4a:	b2ca      	uxtb	r2, r1
 8001d4c:	745a      	strb	r2, [r3, #17]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] & 0x0F;
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d54:	fb02 f303 	mul.w	r3, r2, r3
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	7c1a      	ldrb	r2, [r3, #16]
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	6839      	ldr	r1, [r7, #0]
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f002 020f 	and.w	r2, r2, #15
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	741a      	strb	r2, [r3, #16]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] | ((0x000F & tmp) << 4);
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	4413      	add	r3, r2
 8001d82:	7c1b      	ldrb	r3, [r3, #16]
 8001d84:	b25a      	sxtb	r2, r3
 8001d86:	89fb      	ldrh	r3, [r7, #14]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b259      	sxtb	r1, r3
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	741a      	strb	r2, [r3, #16]
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <ADBMS6830B_init_reg_limits>:

/* Initialize the Register limits */
void ADBMS6830B_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	6039      	str	r1, [r7, #0]
 8001db8:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	e03e      	b.n	8001e3e <ADBMS6830B_init_reg_limits+0x90>
    ic[cic].ic_reg.cell_channels = 20;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	2214      	movs	r2, #20
 8001dd0:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
    ic[cic].ic_reg.stat_channels = 4; //Doesn't matter?
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	4413      	add	r3, r2
 8001de2:	2204      	movs	r2, #4
 8001de4:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
    ic[cic].ic_reg.aux_channels = 6; //Doesn't matter?
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	2206      	movs	r2, #6
 8001df8:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    ic[cic].ic_reg.num_cv_reg = 6;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	4413      	add	r3, r2
 8001e0a:	2206      	movs	r2, #6
 8001e0c:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
    ic[cic].ic_reg.num_gpio_reg = 4;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2204      	movs	r2, #4
 8001e20:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
    ic[cic].ic_reg.num_stat_reg = 5;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	4413      	add	r3, r2
 8001e32:	2205      	movs	r2, #5
 8001e34:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d3bc      	bcc.n	8001dc0 <ADBMS6830B_init_reg_limits+0x12>
  }
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <ADBMS6830B_adcv>:
				   uint8_t DCP, //Discharge Permit
				   uint8_t CONT, //Cell Channels to be measured
				   uint8_t RSTF, //Reset Filter
				   uint8_t OW //Open-wire bits
                 )
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	4608      	mov	r0, r1
 8001e5e:	4611      	mov	r1, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	4623      	mov	r3, r4
 8001e64:	71fb      	strb	r3, [r7, #7]
 8001e66:	4603      	mov	r3, r0
 8001e68:	71bb      	strb	r3, [r7, #6]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	717b      	strb	r3, [r7, #5]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	713b      	strb	r3, [r7, #4]
	uint8_t cmd[2];

	cmd[0] = 0x02 + RD;
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	3302      	adds	r3, #2
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x60 | (CONT << 7) | (DCP << 4) | (RSTF << 2) | OW;
 8001e7a:	797b      	ldrb	r3, [r7, #5]
 8001e7c:	01db      	lsls	r3, r3, #7
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e84:	b25a      	sxtb	r2, r3
 8001e86:	79bb      	ldrb	r3, [r7, #6]
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b25a      	sxtb	r2, r3
 8001e90:	793b      	ldrb	r3, [r7, #4]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	b25b      	sxtb	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b25a      	sxtb	r2, r3
 8001e9a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	b25b      	sxtb	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f8ce 	bl	800104c <cmd_68>
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd90      	pop	{r4, r7, pc}

08001eb8 <ADBMS6830B_pollAdc>:

/* This function will block operation until the ADC has finished it's conversion */
uint32_t ADBMS6830B_pollAdc()
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
	uint8_t finished = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	70fb      	strb	r3, [r7, #3]
	uint8_t current_time = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	70bb      	strb	r3, [r7, #2]
	FEB_cs_low();
 8001eca:	f000 fd09 	bl	80028e0 <FEB_cs_low>
	transmitCMD(PLCADC);
 8001ece:	f44f 60e3 	mov.w	r0, #1816	@ 0x718
 8001ed2:	f7ff f999 	bl	8001208 <transmitCMD>

	while ((counter < 200000) && (finished == 0))
 8001ed6:	e008      	b.n	8001eea <ADBMS6830B_pollAdc+0x32>
	{
		//current_time = FEB_spi_read_byte(0xff);
		if (current_time > 0)
 8001ed8:	78bb      	ldrb	r3, [r7, #2]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <ADBMS6830B_pollAdc+0x2c>
		{
			finished = 1;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	70fb      	strb	r3, [r7, #3]
 8001ee2:	e002      	b.n	8001eea <ADBMS6830B_pollAdc+0x32>
		}
		else
		{
			counter = counter + 10;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	330a      	adds	r3, #10
 8001ee8:	607b      	str	r3, [r7, #4]
	while ((counter < 200000) && (finished == 0))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a06      	ldr	r2, [pc, #24]	@ (8001f08 <ADBMS6830B_pollAdc+0x50>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d802      	bhi.n	8001ef8 <ADBMS6830B_pollAdc+0x40>
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ef      	beq.n	8001ed8 <ADBMS6830B_pollAdc+0x20>
		}
	}

	FEB_cs_high();
 8001ef8:	f000 fcfe 	bl	80028f8 <FEB_cs_high>

	return(counter);
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	00030d3f 	.word	0x00030d3f

08001f0c <ADBMS6830B_rdcv>:
and store the cell voltages in c_codes variable.
*/
uint8_t ADBMS6830B_rdcv(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
				c_ic = total_ic - curr_ic - 1;
			}
			//pec_error += parse_cells(c_ic, CELL, cell_data, &ic[c_ic].cells.c_codes[0], &ic[c_ic].cells.pec_match[0]);
		}*/
	uint8_t *cell_data;
	cell_data = (uint8_t *) malloc(34 * sizeof(uint8_t));
 8001f18:	2022      	movs	r0, #34	@ 0x22
 8001f1a:	f004 ff5d 	bl	8006dd8 <malloc>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	60fb      	str	r3, [r7, #12]
	transmitCMDR(RDCVALL,cell_data,34);
 8001f22:	2222      	movs	r2, #34	@ 0x22
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	200c      	movs	r0, #12
 8001f28:	f7ff f984 	bl	8001234 <transmitCMDR>
	memcpy(&(ic->cells.c_codes),cell_data,(size_t)32);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	331e      	adds	r3, #30
 8001f30:	2220      	movs	r2, #32
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f005 fdfa 	bl	8007b2e <memcpy>
	uint16_t data_pec=pec10_calc(32,cell_data);
 8001f3a:	68f9      	ldr	r1, [r7, #12]
 8001f3c:	2020      	movs	r0, #32
 8001f3e:	f7ff f84f 	bl	8000fe0 <pec10_calc>
 8001f42:	4603      	mov	r3, r0
 8001f44:	817b      	strh	r3, [r7, #10]
	uint16_t rx_pec=*(uint16_t*)(cell_data+32);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8c1b      	ldrh	r3, [r3, #32]
 8001f4a:	813b      	strh	r3, [r7, #8]
	transmitCMDR(RDSALL,cell_data,34);
 8001f4c:	2222      	movs	r2, #34	@ 0x22
 8001f4e:	68f9      	ldr	r1, [r7, #12]
 8001f50:	2010      	movs	r0, #16
 8001f52:	f7ff f96f 	bl	8001234 <transmitCMDR>
	memcpy(&(ic->cells.s_codes),cell_data,(size_t)32);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3342      	adds	r3, #66	@ 0x42
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	68f9      	ldr	r1, [r7, #12]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f005 fde5 	bl	8007b2e <memcpy>
	free(cell_data);
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f004 ff3f 	bl	8006de8 <free>
	return(data_pec!=rx_pec);
 8001f6a:	897a      	ldrh	r2, [r7, #10]
 8001f6c:	893b      	ldrh	r3, [r7, #8]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60ba      	str	r2, [r7, #8]
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 8001f92:	2306      	movs	r3, #6
 8001f94:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 8001f96:	2303      	movs	r3, #3
 8001f98:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	777b      	strb	r3, [r7, #29]
 8001fa8:	e01f      	b.n	8001fea <parse_cells+0x6a>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 8001faa:	7fbb      	ldrb	r3, [r7, #30]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	4413      	add	r3, r2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	7fbb      	ldrb	r3, [r7, #30]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	4413      	add	r3, r2
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001fc6:	7f7a      	ldrb	r2, [r7, #29]
 8001fc8:	7bbb      	ldrb	r3, [r7, #14]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	7ef9      	ldrb	r1, [r7, #27]
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	8aba      	ldrh	r2, [r7, #20]
 8001fdc:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 8001fde:	7fbb      	ldrb	r3, [r7, #30]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8001fe4:	7f7b      	ldrb	r3, [r7, #29]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	777b      	strb	r3, [r7, #29]
 8001fea:	7f7a      	ldrb	r2, [r7, #29]
 8001fec:	7efb      	ldrb	r3, [r7, #27]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d3db      	bcc.n	8001faa <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = ((cell_data[data_counter] & 0x03) << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001ff2:	7fbb      	ldrb	r3, [r7, #30]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002002:	b21a      	sxth	r2, r3
 8002004:	7fbb      	ldrb	r3, [r7, #30]
 8002006:	3301      	adds	r3, #1
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	440b      	add	r3, r1
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b21b      	sxth	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b21b      	sxth	r3, r3
 8002014:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes. Command counter is first 6 bits of first byte, which we don't care bout, so we do & 0x03
	data_pec = pec10_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	461a      	mov	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	441a      	add	r2, r3
 8002020:	7f3b      	ldrb	r3, [r7, #28]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe ffdb 	bl	8000fe0 <pec10_calc>
 800202a:	4603      	mov	r3, r0
 800202c:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 800202e:	8b3a      	ldrh	r2, [r7, #24]
 8002030:	8afb      	ldrh	r3, [r7, #22]
 8002032:	429a      	cmp	r2, r3
 8002034:	d008      	beq.n	8002048 <parse_cells+0xc8>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8002036:	2301      	movs	r3, #1
 8002038:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 800203a:	7bbb      	ldrb	r3, [r7, #14]
 800203c:	3b01      	subs	r3, #1
 800203e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002040:	4413      	add	r3, r2
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e005      	b.n	8002054 <parse_cells+0xd4>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8002048:	7bbb      	ldrb	r3, [r7, #14]
 800204a:	3b01      	subs	r3, #1
 800204c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800204e:	4413      	add	r3, r2
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8002054:	7fbb      	ldrb	r3, [r7, #30]
 8002056:	3302      	adds	r3, #2
 8002058:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 800205a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <ADBMS6830B_wrcfga>:

/* Write the ADBMS6830B CFGRA */
void ADBMS6830B_wrcfga(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b0c4      	sub	sp, #272	@ 0x110
 800206a:	af00      	add	r7, sp, #0
 800206c:	4602      	mov	r2, r0
 800206e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002072:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002076:	6019      	str	r1, [r3, #0]
 8002078:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800207c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002080:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 8002082:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002086:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t c_ic = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002096:	2300      	movs	r3, #0
 8002098:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800209c:	e049      	b.n	8002132 <ADBMS6830B_wrcfga+0xcc>
	{
		if (ic->isospi_reverse == false)
 800209e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 80020ac:	f083 0301 	eor.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <ADBMS6830B_wrcfga+0x5a>
		{
			c_ic = current_ic;
 80020b6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80020ba:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80020be:	e00b      	b.n	80020d8 <ADBMS6830B_wrcfga+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 80020c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020c4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 80020d8:	2300      	movs	r3, #0
 80020da:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80020de:	e01f      	b.n	8002120 <ADBMS6830B_wrcfga+0xba>
		{
			write_buffer[write_count] = ic[c_ic].configa.tx_data[data];
 80020e0:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80020e4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80020f0:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	18d1      	adds	r1, r2, r3
 80020f8:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 80020fc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002100:	5c89      	ldrb	r1, [r1, r2]
 8002102:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002106:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800210a:	54d1      	strb	r1, [r2, r3]
			write_count++;
 800210c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002110:	3301      	adds	r3, #1
 8002112:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002116:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800211a:	3301      	adds	r3, #1
 800211c:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002120:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002124:	2b05      	cmp	r3, #5
 8002126:	d9db      	bls.n	80020e0 <ADBMS6830B_wrcfga+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002128:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800212c:	3301      	adds	r3, #1
 800212e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002132:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002136:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800213a:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d3ac      	bcc.n	800209e <ADBMS6830B_wrcfga+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002144:	f107 0208 	add.w	r2, r7, #8
 8002148:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800214c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002150:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe ffcc 	bl	80010f4 <write_68>
}
 800215c:	bf00      	nop
 800215e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <ADBMS6830B_wrcfgb>:

/* Write the ADBMS6830B CFGRB */
void ADBMS6830B_wrcfgb(uint8_t total_ic, //The number of ICs being written to
                    cell_asic ic[] // A two dimensional array of the configuration data that will be written
                   )
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b0c4      	sub	sp, #272	@ 0x110
 800216a:	af00      	add	r7, sp, #0
 800216c:	4602      	mov	r2, r0
 800216e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002172:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002176:	6019      	str	r1, [r3, #0]
 8002178:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800217c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002180:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x24} ;
 8002182:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8002186:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t c_ic = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002196:	2300      	movs	r3, #0
 8002198:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800219c:	e04a      	b.n	8002234 <ADBMS6830B_wrcfgb+0xce>
	{
		if (ic->isospi_reverse == false)
 800219e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021a2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 80021ac:	f083 0301 	eor.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d004      	beq.n	80021c0 <ADBMS6830B_wrcfgb+0x5a>
		{
			c_ic = current_ic;
 80021b6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80021ba:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80021be:	e00b      	b.n	80021d8 <ADBMS6830B_wrcfgb+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 80021c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021c4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80021de:	e020      	b.n	8002222 <ADBMS6830B_wrcfgb+0xbc>
		{
			write_buffer[write_count] = ic[c_ic].configb.tx_data[data];
 80021e0:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80021e4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80021f0:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	18d1      	adds	r1, r2, r3
 80021f8:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 80021fc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002200:	440a      	add	r2, r1
 8002202:	7bd1      	ldrb	r1, [r2, #15]
 8002204:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002208:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800220c:	54d1      	strb	r1, [r2, r3]
			write_count++;
 800220e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002212:	3301      	adds	r3, #1
 8002214:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002218:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800221c:	3301      	adds	r3, #1
 800221e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002222:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002226:	2b05      	cmp	r3, #5
 8002228:	d9da      	bls.n	80021e0 <ADBMS6830B_wrcfgb+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 800222a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800222e:	3301      	adds	r3, #1
 8002230:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002234:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002238:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800223c:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d3ab      	bcc.n	800219e <ADBMS6830B_wrcfgb+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002246:	f107 0208 	add.w	r2, r7, #8
 800224a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800224e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002252:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe ff4b 	bl	80010f4 <write_68>
}
 800225e:	bf00      	nop
 8002260:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <ADBMS6830B_adax>:
/* Start ADC Conversion for GPIO and Vref2  */
void ADBMS6830B_adax(uint8_t OW, //Open Wire Detection
				  uint8_t PUP, //Pull up/pull down current sources during measurement
				  uint8_t CH //GPIO Channels to be measured
				  )
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
 8002272:	460b      	mov	r3, r1
 8002274:	71bb      	strb	r3, [r7, #6]
 8002276:	4613      	mov	r3, r2
 8002278:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];

	cmd[0] = OW + 0x04;
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	3304      	adds	r3, #4
 800227e:	b2db      	uxtb	r3, r3
 8002280:	733b      	strb	r3, [r7, #12]
	cmd[1] = (PUP << 7) + ((CH & 0x10) << 2) + (CH & 0xF) + 0x10;
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	01db      	lsls	r3, r3, #7
 8002286:	b2da      	uxtb	r2, r3
 8002288:	797b      	ldrb	r3, [r7, #5]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4413      	add	r3, r2
 8002296:	b2da      	uxtb	r2, r3
 8002298:	797b      	ldrb	r3, [r7, #5]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3310      	adds	r3, #16
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 80022aa:	f107 030c 	add.w	r3, r7, #12
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fecc 	bl	800104c <cmd_68>
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <ADBMS6830B_rdaux>:
*/

uint8_t ADBMS6830B_rdaux(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b08b      	sub	sp, #44	@ 0x2c
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 80022c8:	2308      	movs	r3, #8
 80022ca:	75fb      	strb	r3, [r7, #23]

	int8_t pec_error = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	77fb      	strb	r3, [r7, #31]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	77bb      	strb	r3, [r7, #30]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4618      	mov	r0, r3
 80022da:	f004 fd7d 	bl	8006dd8 <malloc>
 80022de:	4603      	mov	r3, r0
 80022e0:	613b      	str	r3, [r7, #16]

	for (uint8_t cell_reg = 1; cell_reg <= ic[0].ic_reg.num_cv_reg; cell_reg++) {
 80022e2:	2301      	movs	r3, #1
 80022e4:	777b      	strb	r3, [r7, #29]
 80022e6:	e07f      	b.n	80023e8 <ADBMS6830B_rdaux+0x12c>
		uint8_t cmd[4];
		switch(cell_reg) {
 80022e8:	7f7b      	ldrb	r3, [r7, #29]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d81f      	bhi.n	8002330 <ADBMS6830B_rdaux+0x74>
 80022f0:	a201      	add	r2, pc, #4	@ (adr r2, 80022f8 <ADBMS6830B_rdaux+0x3c>)
 80022f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f6:	bf00      	nop
 80022f8:	08002309 	.word	0x08002309
 80022fc:	08002313 	.word	0x08002313
 8002300:	0800231d 	.word	0x0800231d
 8002304:	08002327 	.word	0x08002327
			case 1: //Reg A
				cmd[0] = 0x00;
 8002308:	2300      	movs	r3, #0
 800230a:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x19;
 800230c:	2319      	movs	r3, #25
 800230e:	727b      	strb	r3, [r7, #9]
				break;
 8002310:	e00e      	b.n	8002330 <ADBMS6830B_rdaux+0x74>
			case 2: //Reg B
				cmd[0] = 0x00;
 8002312:	2300      	movs	r3, #0
 8002314:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1A;
 8002316:	231a      	movs	r3, #26
 8002318:	727b      	strb	r3, [r7, #9]
				break;
 800231a:	e009      	b.n	8002330 <ADBMS6830B_rdaux+0x74>
			case 3: //Reg C
				cmd[0] = 0x00;
 800231c:	2300      	movs	r3, #0
 800231e:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1B;
 8002320:	231b      	movs	r3, #27
 8002322:	727b      	strb	r3, [r7, #9]
				break;
 8002324:	e004      	b.n	8002330 <ADBMS6830B_rdaux+0x74>
			case 4: //Reg D
				cmd[0] = 0x00;
 8002326:	2300      	movs	r3, #0
 8002328:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1F;
 800232a:	231f      	movs	r3, #31
 800232c:	727b      	strb	r3, [r7, #9]
				break;
 800232e:	bf00      	nop
		}
		uint16_t cmd_pec = pec15_calc(2, cmd);
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	4619      	mov	r1, r3
 8002336:	2002      	movs	r0, #2
 8002338:	f7fe fe1e 	bl	8000f78 <pec15_calc>
 800233c:	4603      	mov	r3, r0
 800233e:	81fb      	strh	r3, [r7, #14]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002340:	89fb      	ldrh	r3, [r7, #14]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	b29b      	uxth	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(cmd_pec);
 800234a:	89fb      	ldrh	r3, [r7, #14]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	72fb      	strb	r3, [r7, #11]
		FEB_cs_low();
 8002350:	f000 fac6 	bl	80028e0 <FEB_cs_low>
		FEB_spi_write_read(cmd, 4, cell_data, (REG_LEN * total_ic));
 8002354:	7dfa      	ldrb	r2, [r7, #23]
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	fb12 f303 	smulbb	r3, r2, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f107 0008 	add.w	r0, r7, #8
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	2104      	movs	r1, #4
 8002366:	f000 fae7 	bl	8002938 <FEB_spi_write_read>
		FEB_cs_high();
 800236a:	f000 fac5 	bl	80028f8 <FEB_cs_high>

		//parse data
		for (int curr_ic = 0; curr_ic < total_ic; curr_ic++) {
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	e032      	b.n	80023da <ADBMS6830B_rdaux+0x11e>
			if (ic->isospi_reverse == false) {
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 800237a:	f083 0301 	eor.w	r3, r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <ADBMS6830B_rdaux+0xce>
				c_ic = curr_ic;
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	77bb      	strb	r3, [r7, #30]
 8002388:	e006      	b.n	8002398 <ADBMS6830B_rdaux+0xdc>
			} else {
				c_ic = total_ic - curr_ic - 1;
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	79fa      	ldrb	r2, [r7, #7]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	77bb      	strb	r3, [r7, #30]
			}
			pec_error += parse_cells(c_ic, cell_reg, cell_data, &ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 8002398:	7fbb      	ldrb	r3, [r7, #30]
 800239a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 80023aa:	7fbb      	ldrb	r3, [r7, #30]
 80023ac:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	3380      	adds	r3, #128	@ 0x80
 80023ba:	7f79      	ldrb	r1, [r7, #29]
 80023bc:	7fb8      	ldrb	r0, [r7, #30]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	4623      	mov	r3, r4
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	f7ff fddc 	bl	8001f80 <parse_cells>
 80023c8:	4603      	mov	r3, r0
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	7ffb      	ldrb	r3, [r7, #31]
 80023ce:	4413      	add	r3, r2
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	77fb      	strb	r3, [r7, #31]
		for (int curr_ic = 0; curr_ic < total_ic; curr_ic++) {
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	3301      	adds	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	429a      	cmp	r2, r3
 80023e0:	dbc8      	blt.n	8002374 <ADBMS6830B_rdaux+0xb8>
	for (uint8_t cell_reg = 1; cell_reg <= ic[0].ic_reg.num_cv_reg; cell_reg++) {
 80023e2:	7f7b      	ldrb	r3, [r7, #29]
 80023e4:	3301      	adds	r3, #1
 80023e6:	777b      	strb	r3, [r7, #29]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80023ee:	7f7a      	ldrb	r2, [r7, #29]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f67f af79 	bls.w	80022e8 <ADBMS6830B_rdaux+0x2c>
		}
	}

	ADBMS6830B_check_pec(total_ic, CELL, ic);
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	2102      	movs	r1, #2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f827 	bl	8002450 <ADBMS6830B_check_pec>
	free(cell_data);
 8002402:	6938      	ldr	r0, [r7, #16]
 8002404:	f004 fcf0 	bl	8006de8 <free>
	return(pec_error);
 8002408:	7ffb      	ldrb	r3, [r7, #31]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd90      	pop	{r4, r7, pc}
 8002412:	bf00      	nop

08002414 <wakeup_sleep>:

/* Generic wakeup command to wake the ADBMS6830B from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < total_ic; i++) {
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	e00c      	b.n	800243e <wakeup_sleep+0x2a>
	   FEB_cs_low();
 8002424:	f000 fa5c 	bl	80028e0 <FEB_cs_low>
	   FEB_delay_m(1); // Guarantees the ADBMS6830B will be in standby
 8002428:	2001      	movs	r0, #1
 800242a:	f000 fa4b 	bl	80028c4 <FEB_delay_m>
	   FEB_cs_high();
 800242e:	f000 fa63 	bl	80028f8 <FEB_cs_high>
	   FEB_delay_m(1);
 8002432:	2001      	movs	r0, #1
 8002434:	f000 fa46 	bl	80028c4 <FEB_delay_m>
	for (int i = 0; i < total_ic; i++) {
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3301      	adds	r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	429a      	cmp	r2, r3
 8002444:	dbee      	blt.n	8002424 <wakeup_sleep+0x10>
	}
}
 8002446:	bf00      	nop
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <ADBMS6830B_check_pec>:

void ADBMS6830B_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 8002450:	b480      	push	{r7}
 8002452:	b08b      	sub	sp, #44	@ 0x2c
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	603a      	str	r2, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
 800245c:	460b      	mov	r3, r1
 800245e:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 8002460:	79bb      	ldrb	r3, [r7, #6]
 8002462:	2b04      	cmp	r3, #4
 8002464:	f200 81b5 	bhi.w	80027d2 <ADBMS6830B_check_pec+0x382>
 8002468:	a201      	add	r2, pc, #4	@ (adr r2, 8002470 <ADBMS6830B_check_pec+0x20>)
 800246a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246e:	bf00      	nop
 8002470:	08002485 	.word	0x08002485
 8002474:	0800250f 	.word	0x0800250f
 8002478:	08002599 	.word	0x08002599
 800247c:	08002657 	.word	0x08002657
 8002480:	08002715 	.word	0x08002715
	{
		case CFGRA:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
 8002488:	e03c      	b.n	8002504 <ADBMS6830B_check_pec+0xb4>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configa.rx_pec_match;
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	4413      	add	r3, r2
 8002498:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	6839      	ldr	r1, [r7, #0]
 80024a8:	440b      	add	r3, r1
 80024aa:	7b9b      	ldrb	r3, [r3, #14]
 80024ac:	4618      	mov	r0, r3
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	6839      	ldr	r1, [r7, #0]
 80024ba:	440b      	add	r3, r1
 80024bc:	4402      	add	r2, r0
 80024be:	b292      	uxth	r2, r2
 80024c0:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configa.rx_pec_match;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	@ 0xe8
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	6839      	ldr	r1, [r7, #0]
 80024e2:	440b      	add	r3, r1
 80024e4:	7b9b      	ldrb	r3, [r3, #14]
 80024e6:	4618      	mov	r0, r3
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	6839      	ldr	r1, [r7, #0]
 80024f4:	440b      	add	r3, r1
 80024f6:	4402      	add	r2, r0
 80024f8:	b292      	uxth	r2, r2
 80024fa:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	3301      	adds	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002508:	429a      	cmp	r2, r3
 800250a:	dbbe      	blt.n	800248a <ADBMS6830B_check_pec+0x3a>
		  }
		break;
 800250c:	e162      	b.n	80027d4 <ADBMS6830B_check_pec+0x384>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
 8002512:	e03c      	b.n	800258e <ADBMS6830B_check_pec+0x13e>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800251a:	fb02 f303 	mul.w	r3, r2, r3
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	4413      	add	r3, r2
 8002522:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	6839      	ldr	r1, [r7, #0]
 8002532:	440b      	add	r3, r1
 8002534:	7f5b      	ldrb	r3, [r3, #29]
 8002536:	4618      	mov	r0, r3
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	6839      	ldr	r1, [r7, #0]
 8002544:	440b      	add	r3, r1
 8002546:	4402      	add	r2, r0
 8002548:	b292      	uxth	r2, r2
 800254a:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	@ 0xe8
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	6839      	ldr	r1, [r7, #0]
 800256c:	440b      	add	r3, r1
 800256e:	7f5b      	ldrb	r3, [r3, #29]
 8002570:	4618      	mov	r0, r3
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	6839      	ldr	r1, [r7, #0]
 800257e:	440b      	add	r3, r1
 8002580:	4402      	add	r2, r0
 8002582:	b292      	uxth	r2, r2
 8002584:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	3301      	adds	r3, #1
 800258c:	623b      	str	r3, [r7, #32]
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	6a3a      	ldr	r2, [r7, #32]
 8002592:	429a      	cmp	r2, r3
 8002594:	dbbe      	blt.n	8002514 <ADBMS6830B_check_pec+0xc4>
		  }
		break;
 8002596:	e11d      	b.n	80027d4 <ADBMS6830B_check_pec+0x384>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	e056      	b.n	800264c <ADBMS6830B_check_pec+0x1fc>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e049      	b.n	8002638 <ADBMS6830B_check_pec+0x1e8>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	4419      	add	r1, r3
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	440b      	add	r3, r1
 80025c8:	3366      	adds	r3, #102	@ 0x66
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	6839      	ldr	r1, [r7, #0]
 80025da:	440b      	add	r3, r1
 80025dc:	4402      	add	r2, r0
 80025de:	b292      	uxth	r2, r2
 80025e0:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	441a      	add	r2, r3
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	3370      	adds	r3, #112	@ 0x70
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	895b      	ldrh	r3, [r3, #10]
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002602:	fb01 f202 	mul.w	r2, r1, r2
 8002606:	6839      	ldr	r1, [r7, #0]
 8002608:	4411      	add	r1, r2
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	440a      	add	r2, r1
 800260e:	3266      	adds	r2, #102	@ 0x66
 8002610:	7812      	ldrb	r2, [r2, #0]
 8002612:	4610      	mov	r0, r2
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800261a:	fb01 f202 	mul.w	r2, r1, r2
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	440a      	add	r2, r1
 8002622:	4403      	add	r3, r0
 8002624:	b299      	uxth	r1, r3
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	3370      	adds	r3, #112	@ 0x70
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	460a      	mov	r2, r1
 8002630:	815a      	strh	r2, [r3, #10]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	3301      	adds	r3, #1
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800263e:	461a      	mov	r2, r3
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4293      	cmp	r3, r2
 8002644:	dbae      	blt.n	80025a4 <ADBMS6830B_check_pec+0x154>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3301      	adds	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	429a      	cmp	r2, r3
 8002652:	dba4      	blt.n	800259e <ADBMS6830B_check_pec+0x14e>
			}
		  }
		break;
 8002654:	e0be      	b.n	80027d4 <ADBMS6830B_check_pec+0x384>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e056      	b.n	800270a <ADBMS6830B_check_pec+0x2ba>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e049      	b.n	80026f6 <ADBMS6830B_check_pec+0x2a6>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002668:	fb02 f303 	mul.w	r3, r2, r3
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	4413      	add	r3, r2
 8002670:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	6839      	ldr	r1, [r7, #0]
 8002680:	4419      	add	r1, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	440b      	add	r3, r1
 8002686:	3380      	adds	r3, #128	@ 0x80
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	6839      	ldr	r1, [r7, #0]
 8002698:	440b      	add	r3, r1
 800269a:	4402      	add	r2, r0
 800269c:	b292      	uxth	r2, r2
 800269e:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	441a      	add	r2, r3
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	3378      	adds	r3, #120	@ 0x78
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	88db      	ldrh	r3, [r3, #6]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80026c0:	fb01 f202 	mul.w	r2, r1, r2
 80026c4:	6839      	ldr	r1, [r7, #0]
 80026c6:	4411      	add	r1, r2
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	440a      	add	r2, r1
 80026cc:	3280      	adds	r2, #128	@ 0x80
 80026ce:	7812      	ldrb	r2, [r2, #0]
 80026d0:	4610      	mov	r0, r2
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80026d8:	fb01 f202 	mul.w	r2, r1, r2
 80026dc:	6839      	ldr	r1, [r7, #0]
 80026de:	440a      	add	r2, r1
 80026e0:	4403      	add	r3, r0
 80026e2:	b299      	uxth	r1, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	3378      	adds	r3, #120	@ 0x78
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	460a      	mov	r2, r1
 80026ee:	80da      	strh	r2, [r3, #6]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	3301      	adds	r3, #1
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80026fc:	461a      	mov	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4293      	cmp	r3, r2
 8002702:	dbae      	blt.n	8002662 <ADBMS6830B_check_pec+0x212>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3301      	adds	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	429a      	cmp	r2, r3
 8002710:	dba4      	blt.n	800265c <ADBMS6830B_check_pec+0x20c>
			}
		  }

		break;
 8002712:	e05f      	b.n	80027d4 <ADBMS6830B_check_pec+0x384>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	e056      	b.n	80027c8 <ADBMS6830B_check_pec+0x378>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	e049      	b.n	80027b4 <ADBMS6830B_check_pec+0x364>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	4413      	add	r3, r2
 800272e:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	6839      	ldr	r1, [r7, #0]
 800273e:	4419      	add	r1, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	440b      	add	r3, r1
 8002744:	3391      	adds	r3, #145	@ 0x91
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	440b      	add	r3, r1
 8002758:	4402      	add	r2, r0
 800275a:	b292      	uxth	r2, r2
 800275c:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	441a      	add	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	337c      	adds	r3, #124	@ 0x7c
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	88db      	ldrh	r3, [r3, #6]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800277e:	fb01 f202 	mul.w	r2, r1, r2
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	4411      	add	r1, r2
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	440a      	add	r2, r1
 800278a:	3291      	adds	r2, #145	@ 0x91
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	4610      	mov	r0, r2
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002796:	fb01 f202 	mul.w	r2, r1, r2
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	440a      	add	r2, r1
 800279e:	4403      	add	r3, r0
 80027a0:	b299      	uxth	r1, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	337c      	adds	r3, #124	@ 0x7c
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	460a      	mov	r2, r1
 80027ac:	80da      	strh	r2, [r3, #6]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3301      	adds	r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 80027ba:	3b01      	subs	r3, #1
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	429a      	cmp	r2, r3
 80027c0:	dbae      	blt.n	8002720 <ADBMS6830B_check_pec+0x2d0>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3301      	adds	r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	dba4      	blt.n	800271a <ADBMS6830B_check_pec+0x2ca>
			}
		  }
		break;
 80027d0:	e000      	b.n	80027d4 <ADBMS6830B_check_pec+0x384>
		default:
		break;
 80027d2:	bf00      	nop
	}
}
 80027d4:	bf00      	nop
 80027d6:	372c      	adds	r7, #44	@ 0x2c
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <FEB_CAN_Init>:
uint8_t FEB_CAN_PONGED;


// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 80027e4:	f000 f80c 	bl	8002800 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80027e8:	4804      	ldr	r0, [pc, #16]	@ (80027fc <FEB_CAN_Init+0x1c>)
 80027ea:	f001 fd4d 	bl	8004288 <HAL_CAN_Start>
        // Code Error - Shutdown
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80027ee:	2102      	movs	r1, #2
 80027f0:	4802      	ldr	r0, [pc, #8]	@ (80027fc <FEB_CAN_Init+0x1c>)
 80027f2:	f001 fd8d 	bl	8004310 <HAL_CAN_ActivateNotification>
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000470 	.word	0x20000470

08002800 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	71fb      	strb	r3, [r7, #7]
    if(FEB_CAN_PINGPONG_MODE) filter_bank =FEB_CAN_PINGPONG_Filter(&hcan1, CAN_RX_FIFO0, filter_bank);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	461a      	mov	r2, r3
 800280e:	2100      	movs	r1, #0
 8002810:	4804      	ldr	r0, [pc, #16]	@ (8002824 <FEB_CAN_Filter_Config+0x24>)
 8002812:	f000 f811 	bl	8002838 <FEB_CAN_PINGPONG_Filter>
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]

	// Assign Filter
    // filter_bank = Function(&hcan1, CAN_RX_FIFO0, filter_bank);
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000470 	.word	0x20000470

08002828 <FEB_SM_CAN_Transmit>:

	}
}


void FEB_SM_CAN_Transmit(void) {
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
		// FEB_SM_Set_Current_State(FEB_SM_ST_SHUTDOWN);
	}
	*/
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <FEB_CAN_PINGPONG_Filter>:

uint8_t FEB_CAN_GET_PONGED(void){
	return FEB_CAN_PONGED;
}

uint8_t FEB_CAN_PINGPONG_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank){
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	@ 0x30
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
 8002844:	4613      	mov	r3, r2
 8002846:	70bb      	strb	r3, [r7, #2]
    // For multiple filters, create array of filter IDs and loop over IDs.

	CAN_FilterTypeDef filter_config;

    // Standard CAN - 2.0A - 11 bit
    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8002848:	2301      	movs	r3, #1
 800284a:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter_config.FilterBank = filter_bank;
 800284c:	78bb      	ldrb	r3, [r7, #2]
 800284e:	61fb      	str	r3, [r7, #28]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	61bb      	str	r3, [r7, #24]
	filter_config.FilterIdHigh = 0xA0001;
 8002854:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <FEB_CAN_PINGPONG_Filter+0x88>)
 8002856:	60bb      	str	r3, [r7, #8]
	filter_config.FilterIdLow = 0xD1;
 8002858:	23d1      	movs	r3, #209	@ 0xd1
 800285a:	60fb      	str	r3, [r7, #12]
	filter_config.FilterMaskIdHigh = 0xFFE0;
 800285c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002860:	613b      	str	r3, [r7, #16]
	filter_config.FilterMaskIdLow = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8002866:	2300      	movs	r3, #0
 8002868:	623b      	str	r3, [r7, #32]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800286a:	2301      	movs	r3, #1
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
	filter_config.SlaveStartFilterBank = 27;
 800286e:	231b      	movs	r3, #27
 8002870:	62fb      	str	r3, [r7, #44]	@ 0x2c
    filter_bank++;
 8002872:	78bb      	ldrb	r3, [r7, #2]
 8002874:	3301      	adds	r3, #1
 8002876:	70bb      	strb	r3, [r7, #2]

    // Extended CAN - 2.0B - 29 bit
	filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8002878:	2301      	movs	r3, #1
 800287a:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter_config.FilterBank = filter_bank;
 800287c:	78bb      	ldrb	r3, [r7, #2]
 800287e:	61fb      	str	r3, [r7, #28]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	61bb      	str	r3, [r7, #24]
	filter_config.FilterIdHigh = /* ID */ 0 >> 13;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
	filter_config.FilterIdLow = (/* ID */ 0 & 0x1FFF) << 3;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
	filter_config.FilterMaskIdHigh = 0xFFFF;
 800288c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002890:	613b      	str	r3, [r7, #16]
	filter_config.FilterMaskIdLow = 0xFFF8;
 8002892:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8002896:	617b      	str	r3, [r7, #20]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800289c:	2301      	movs	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
	filter_config.SlaveStartFilterBank = 27;
 80028a0:	231b      	movs	r3, #27
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    filter_bank++;
 80028a4:	78bb      	ldrb	r3, [r7, #2]
 80028a6:	3301      	adds	r3, #1
 80028a8:	70bb      	strb	r3, [r7, #2]

	if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 80028aa:	f107 0308 	add.w	r3, r7, #8
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f001 fc09 	bl	80040c8 <HAL_CAN_ConfigFilter>
        // Code Error - Shutdown
	}

	return filter_bank;
 80028b6:	78bb      	ldrb	r3, [r7, #2]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3730      	adds	r7, #48	@ 0x30
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	000a0001 	.word	0x000a0001

080028c4 <FEB_delay_m>:
	int a=0;
	while(micro--)a=micro;
	a++;
}

void FEB_delay_m(uint16_t milli) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(milli);
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 fad9 	bl	8003e88 <HAL_Delay>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <FEB_cs_low>:

void FEB_cs_low() {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2140      	movs	r1, #64	@ 0x40
 80028e8:	4802      	ldr	r0, [pc, #8]	@ (80028f4 <FEB_cs_low+0x14>)
 80028ea:	f001 ffc5 	bl	8004878 <HAL_GPIO_WritePin>
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40020400 	.word	0x40020400

080028f8 <FEB_cs_high>:

void FEB_cs_high() {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80028fc:	2201      	movs	r2, #1
 80028fe:	2140      	movs	r1, #64	@ 0x40
 8002900:	4802      	ldr	r0, [pc, #8]	@ (800290c <FEB_cs_high+0x14>)
 8002902:	f001 ffb9 	bl	8004878 <HAL_GPIO_WritePin>
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40020400 	.word	0x40020400

08002910 <FEB_spi_write_array>:
void FEB_spi_write_array(uint8_t len, uint8_t data[]) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY)!=HAL_OK){
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	b29a      	uxth	r2, r3
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
 8002924:	6839      	ldr	r1, [r7, #0]
 8002926:	4803      	ldr	r0, [pc, #12]	@ (8002934 <FEB_spi_write_array+0x24>)
 8002928:	f002 ffa7 	bl	800587a <HAL_SPI_Transmit>
		//catch error
	}
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200004ec 	.word	0x200004ec

08002938 <FEB_spi_write_read>:
		//catch error
	}
	return data;
}

void FEB_spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	461a      	mov	r2, r3
 8002944:	460b      	mov	r3, r1
 8002946:	72fb      	strb	r3, [r7, #11]
 8002948:	4613      	mov	r3, r2
 800294a:	72bb      	strb	r3, [r7, #10]
	if(HAL_SPI_Transmit(&hspi1,tx_Data,tx_len,HAL_MAX_DELAY) != HAL_OK){
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	b29a      	uxth	r2, r3
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
 8002954:	68f9      	ldr	r1, [r7, #12]
 8002956:	4807      	ldr	r0, [pc, #28]	@ (8002974 <FEB_spi_write_read+0x3c>)
 8002958:	f002 ff8f 	bl	800587a <HAL_SPI_Transmit>
		//catch error
	}
	if(HAL_SPI_Receive(&hspi1,rx_data,rx_len,HAL_MAX_DELAY)!= HAL_OK){
 800295c:	7abb      	ldrb	r3, [r7, #10]
 800295e:	b29a      	uxth	r2, r3
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4803      	ldr	r0, [pc, #12]	@ (8002974 <FEB_spi_write_read+0x3c>)
 8002968:	f003 f8cb 	bl	8005b02 <HAL_SPI_Receive>
		//catch error
	}
	return;
 800296c:	bf00      	nop
}
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	200004ec 	.word	0x200004ec

08002978 <FEB_PIN_RST>:

// ******************************** Relay Control ********************************
void FEB_PIN_RST(FEB_GPIO PinOut){
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	463b      	mov	r3, r7
 8002980:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(PinOut.group, PinOut.pin, GPIO_PIN_RESET);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	88b9      	ldrh	r1, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f001 ff74 	bl	8004878 <HAL_GPIO_WritePin>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <FEB_PIN_SET>:
void FEB_PIN_SET(FEB_GPIO PinOut){
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	463b      	mov	r3, r7
 80029a0:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(PinOut.group, PinOut.pin, GPIO_PIN_SET);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	88b9      	ldrh	r1, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 ff64 	bl	8004878 <HAL_GPIO_WritePin>
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <FEB_PIN_RD>:
void FEB_PIN_TGL(FEB_GPIO PinOut){
	HAL_GPIO_TogglePin(PinOut.group, PinOut.pin);
}
FEB_Relay_State FEB_PIN_RD(FEB_GPIO PinOut){
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	463b      	mov	r3, r7
 80029c0:	e883 0003 	stmia.w	r3, {r0, r1}
	return (FEB_Relay_State)HAL_GPIO_ReadPin(PinOut.group, PinOut.pin);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	88ba      	ldrh	r2, [r7, #4]
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 ff3c 	bl	8004848 <HAL_GPIO_ReadPin>
 80029d0:	4603      	mov	r3, r0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <FEB_Main_Setup>:
#include "FEB_Main.h"


// ******************************** Functions ********************************

void FEB_Main_Setup() {
 80029da:	b580      	push	{r7, lr}
 80029dc:	af00      	add	r7, sp, #0
	//SM setup
	FEB_ADBMS_Init();
 80029de:	f7fe fc9d 	bl	800131c <FEB_ADBMS_Init>
	FEB_SM_Init();
 80029e2:	f000 f82f 	bl	8002a44 <FEB_SM_Init>
	FEB_CAN_Init();
 80029e6:	f7ff fefb 	bl	80027e0 <FEB_CAN_Init>
	//IVT Setup
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}

080029ee <FEB_Task_ADBMS>:

void FEB_Task_ADBMS() {
 80029ee:	b580      	push	{r7, lr}
 80029f0:	af00      	add	r7, sp, #0
	FEB_ADBMS_Voltage_Process();
 80029f2:	f7fe fcd5 	bl	80013a0 <FEB_ADBMS_Voltage_Process>
	FEB_ADBMS_Temperature_Process();
 80029f6:	f7fe fcdd 	bl	80013b4 <FEB_ADBMS_Temperature_Process>
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}

080029fe <FEB_Task_SM>:

void FEB_Task_SM() {
 80029fe:	b580      	push	{r7, lr}
 8002a00:	af00      	add	r7, sp, #0
	FEB_SM_Process();
 8002a02:	f000 f837 	bl	8002a74 <FEB_SM_Process>
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <FEB_Task_Charge>:

void FEB_Task_Charge() {
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0

}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <FEB_Task_Balance>:

void FEB_Task_Balance() {
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0

}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <FEB_Task_IVT>:

void FEB_Task_IVT() {
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0

}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <FEB_Task_CAN>:

void FEB_Task_CAN() {
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0

}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <FEB_SM_Init>:

/* ******** Interface ******** */

/* Function called from initial thread (no other threads created).
 * No synchronization needed. */
void FEB_SM_Init(void) {
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
	SM_Current_State=FEB_SM_ST_BOOT;
 8002a48:	4b03      	ldr	r3, [pc, #12]	@ (8002a58 <FEB_SM_Init+0x14>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
		FEB_Hw_Set_BMS_Shutdown_Relay(FEB_HW_RELAY_OPEN);
		return;
	}
	*/

}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	2000046e 	.word	0x2000046e

08002a5c <FEB_SM_Get_Current_State>:

/* Get current state of state machine. */
FEB_SM_ST_t FEB_SM_Get_Current_State(void) {
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
	//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
	//FEB_SM_ST_t state = SM_Current_State;
	//osMutexRelease(FEB_SM_LockHandle);
	return SM_Current_State;
 8002a60:	4b03      	ldr	r3, [pc, #12]	@ (8002a70 <FEB_SM_Get_Current_State+0x14>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	2000046e 	.word	0x2000046e

08002a74 <FEB_SM_Process>:
void FEB_SM_Transition(FEB_SM_ST_t next_state) {
	transition(next_state);
}

/* Check for conditions necessary for state transitions. */
void FEB_SM_Process(void) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0

	//TODO: Add task queue
	transitionVector[FEB_SM_Get_Current_State()](FEB_SM_ST_DEFAULT);
 8002a78:	f7ff fff0 	bl	8002a5c <FEB_SM_Get_Current_State>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <FEB_SM_Process+0x20>)
 8002a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a86:	200d      	movs	r0, #13
 8002a88:	4798      	blx	r3
	FEB_SM_CAN_Transmit();
 8002a8a:	f7ff fecd 	bl	8002828 <FEB_SM_CAN_Transmit>
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000010 	.word	0x20000010

08002a98 <fault>:

//FAULT HELPER FUNCTION
static void fault(FEB_SM_ST_t FAULT_TYPE) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08c      	sub	sp, #48	@ 0x30
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
	SM_Current_State = FAULT_TYPE;
 8002aa2:	4a24      	ldr	r2, [pc, #144]	@ (8002b34 <fault+0x9c>)
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	7013      	strb	r3, [r2, #0]
	//FEB_Config_Update(SM_Current_State);
	FEB_PIN_RST(P_PC1);//FEB_Hw_Set_BMS_Shutdown_Relay(FEB_RELAY_STATE_OPEN);
 8002aa8:	4a23      	ldr	r2, [pc, #140]	@ (8002b38 <fault+0xa0>)
 8002aaa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ab2:	e883 0003 	stmia.w	r3, {r0, r1}
 8002ab6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002abe:	f7ff ff5b 	bl	8002978 <FEB_PIN_RST>
	FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b3c <fault+0xa4>)
 8002ac4:	f107 0320 	add.w	r3, r7, #32
 8002ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002acc:	e883 0003 	stmia.w	r3, {r0, r1}
 8002ad0:	f107 0320 	add.w	r3, r7, #32
 8002ad4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ad8:	f7ff ff4e 	bl	8002978 <FEB_PIN_RST>
	FEB_PIN_RST(PN_PC_REL); //FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 8002adc:	4a18      	ldr	r2, [pc, #96]	@ (8002b40 <fault+0xa8>)
 8002ade:	f107 0318 	add.w	r3, r7, #24
 8002ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ae6:	e883 0003 	stmia.w	r3, {r0, r1}
 8002aea:	f107 0318 	add.w	r3, r7, #24
 8002aee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002af2:	f7ff ff41 	bl	8002978 <FEB_PIN_RST>
	FEB_PIN_SET(PN_BUZZER);
 8002af6:	4a13      	ldr	r2, [pc, #76]	@ (8002b44 <fault+0xac>)
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b00:	e883 0003 	stmia.w	r3, {r0, r1}
 8002b04:	f107 0310 	add.w	r3, r7, #16
 8002b08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b0c:	f7ff ff44 	bl	8002998 <FEB_PIN_SET>
	FEB_PIN_SET(PN_INDICATOR);
 8002b10:	4a0d      	ldr	r2, [pc, #52]	@ (8002b48 <fault+0xb0>)
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002b1e:	f107 0308 	add.w	r3, r7, #8
 8002b22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b26:	f7ff ff37 	bl	8002998 <FEB_PIN_SET>

}
 8002b2a:	bf00      	nop
 8002b2c:	3730      	adds	r7, #48	@ 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	2000046e 	.word	0x2000046e
 8002b38:	08009700 	.word	0x08009700
 8002b3c:	08009708 	.word	0x08009708
 8002b40:	08009710 	.word	0x08009710
 8002b44:	08009718 	.word	0x08009718
 8002b48:	08009720 	.word	0x08009720

08002b4c <updateStateProtected>:

/** Transition Functions **/
static FEB_SM_ST_t updateStateProtected(FEB_SM_ST_t next_state){
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
	//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
	if(SM_Current_State==FEB_SM_ST_FAULT_BMS)
 8002b56:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <updateStateProtected+0x2c>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b09      	cmp	r3, #9
 8002b5c:	d101      	bne.n	8002b62 <updateStateProtected+0x16>
		return FEB_SM_ST_FAULT_BMS;
 8002b5e:	2309      	movs	r3, #9
 8002b60:	e003      	b.n	8002b6a <updateStateProtected+0x1e>
	SM_Current_State=next_state;
 8002b62:	4a05      	ldr	r2, [pc, #20]	@ (8002b78 <updateStateProtected+0x2c>)
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	7013      	strb	r3, [r2, #0]
	//osMutexRelease(FEB_SM_LockHandle);
	return next_state;
 8002b68:	79fb      	ldrb	r3, [r7, #7]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	2000046e 	.word	0x2000046e

08002b7c <bootTransition>:

static void bootTransition(FEB_SM_ST_t next_state){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d009      	beq.n	8002ba0 <bootTransition+0x24>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	dd0b      	ble.n	8002ba8 <bootTransition+0x2c>
 8002b90:	3b09      	subs	r3, #9
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d808      	bhi.n	8002ba8 <bootTransition+0x2c>
	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
	case FEB_SM_ST_FAULT_BSPD:
		fault(next_state);
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff7d 	bl	8002a98 <fault>
		break;
 8002b9e:	e004      	b.n	8002baa <bootTransition+0x2e>

	case FEB_SM_ST_LV:
		updateStateProtected(FEB_SM_ST_LV);
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f7ff ffd3 	bl	8002b4c <updateStateProtected>
		break;
 8002ba6:	e000      	b.n	8002baa <bootTransition+0x2e>

	default:
		return;
 8002ba8:	bf00      	nop
	}

}
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <LVPowerTransition>:

static void LVPowerTransition(FEB_SM_ST_t next_state){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	3b02      	subs	r3, #2
 8002bbe:	2b0b      	cmp	r3, #11
 8002bc0:	d838      	bhi.n	8002c34 <LVPowerTransition+0x84>
 8002bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc8 <LVPowerTransition+0x18>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002c03 	.word	0x08002c03
 8002bcc:	08002c35 	.word	0x08002c35
 8002bd0:	08002c35 	.word	0x08002c35
 8002bd4:	08002c35 	.word	0x08002c35
 8002bd8:	08002c03 	.word	0x08002c03
 8002bdc:	08002c35 	.word	0x08002c35
 8002be0:	08002c35 	.word	0x08002c35
 8002be4:	08002bf9 	.word	0x08002bf9
 8002be8:	08002bf9 	.word	0x08002bf9
 8002bec:	08002bf9 	.word	0x08002bf9
 8002bf0:	08002c35 	.word	0x08002c35
 8002bf4:	08002c0d 	.word	0x08002c0d
	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
	case FEB_SM_ST_FAULT_BSPD:
		fault(next_state);
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ff4c 	bl	8002a98 <fault>
		break;
 8002c00:	e01b      	b.n	8002c3a <LVPowerTransition+0x8a>

	case FEB_SM_ST_ESC:
	case FEB_SM_ST_FREE:
		updateStateProtected(next_state);
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ffa1 	bl	8002b4c <updateStateProtected>
		break;
 8002c0a:	e016      	b.n	8002c3a <LVPowerTransition+0x8a>

	case FEB_SM_ST_DEFAULT:
		if(FEB_PIN_RD(PN_SHS_IN)==FEB_RELAY_STATE_CLOSE)
 8002c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8002c40 <LVPowerTransition+0x90>)
 8002c0e:	f107 0308 	add.w	r3, r7, #8
 8002c12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c16:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c1a:	f107 0308 	add.w	r3, r7, #8
 8002c1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c22:	f7ff fec9 	bl	80029b8 <FEB_PIN_RD>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d105      	bne.n	8002c38 <LVPowerTransition+0x88>
			LVPowerTransition(FEB_SM_ST_ESC);
 8002c2c:	2002      	movs	r0, #2
 8002c2e:	f7ff ffbf 	bl	8002bb0 <LVPowerTransition>
		if (0)//FEB_CAN_Charger_Received()
			LVPowerTransition(FEB_SM_ST_FREE);
		break;
 8002c32:	e001      	b.n	8002c38 <LVPowerTransition+0x88>

	default:
		return;
 8002c34:	bf00      	nop
 8002c36:	e000      	b.n	8002c3a <LVPowerTransition+0x8a>
		break;
 8002c38:	bf00      	nop
	}
}
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	08009728 	.word	0x08009728

08002c44 <ESCCompleteTransition>:

static void ESCCompleteTransition(FEB_SM_ST_t next_state){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08c      	sub	sp, #48	@ 0x30
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	d87d      	bhi.n	8002d52 <ESCCompleteTransition+0x10e>
 8002c56:	a201      	add	r2, pc, #4	@ (adr r2, 8002c5c <ESCCompleteTransition+0x18>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c9b 	.word	0x08002c9b
 8002c60:	08002d53 	.word	0x08002d53
 8002c64:	08002ca5 	.word	0x08002ca5
 8002c68:	08002d53 	.word	0x08002d53
 8002c6c:	08002d53 	.word	0x08002d53
 8002c70:	08002d53 	.word	0x08002d53
 8002c74:	08002d53 	.word	0x08002d53
 8002c78:	08002d53 	.word	0x08002d53
 8002c7c:	08002c91 	.word	0x08002c91
 8002c80:	08002c91 	.word	0x08002c91
 8002c84:	08002c91 	.word	0x08002c91
 8002c88:	08002d53 	.word	0x08002d53
 8002c8c:	08002ce3 	.word	0x08002ce3
	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
	case FEB_SM_ST_FAULT_BSPD:
		fault(next_state);
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ff00 	bl	8002a98 <fault>
		break;
 8002c98:	e05e      	b.n	8002d58 <ESCCompleteTransition+0x114>

	case FEB_SM_ST_LV:
		updateStateProtected(next_state);
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff55 	bl	8002b4c <updateStateProtected>
		break;
 8002ca2:	e059      	b.n	8002d58 <ESCCompleteTransition+0x114>

	case FEB_SM_ST_PRECHARGE:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 8002ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d60 <ESCCompleteTransition+0x11c>)
 8002ca6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cae:	e883 0003 	stmia.w	r3, {r0, r1}
 8002cb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002cba:	f7ff fe5d 	bl	8002978 <FEB_PIN_RST>
		FEB_PIN_SET(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_CLOSE);
 8002cbe:	4a29      	ldr	r2, [pc, #164]	@ (8002d64 <ESCCompleteTransition+0x120>)
 8002cc0:	f107 0320 	add.w	r3, r7, #32
 8002cc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002ccc:	f107 0320 	add.w	r3, r7, #32
 8002cd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002cd4:	f7ff fe60 	bl	8002998 <FEB_PIN_SET>
		updateStateProtected(next_state);
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ff36 	bl	8002b4c <updateStateProtected>
		break;
 8002ce0:	e03a      	b.n	8002d58 <ESCCompleteTransition+0x114>

	case FEB_SM_ST_DEFAULT:
		if(FEB_PIN_RD(PN_SHS_IN)==FEB_RELAY_STATE_OPEN)
 8002ce2:	4a21      	ldr	r2, [pc, #132]	@ (8002d68 <ESCCompleteTransition+0x124>)
 8002ce4:	f107 0318 	add.w	r3, r7, #24
 8002ce8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cec:	e883 0003 	stmia.w	r3, {r0, r1}
 8002cf0:	f107 0318 	add.w	r3, r7, #24
 8002cf4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002cf8:	f7ff fe5e 	bl	80029b8 <FEB_PIN_RD>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <ESCCompleteTransition+0xc6>
					ESCCompleteTransition(FEB_SM_ST_LV);
 8002d02:	2001      	movs	r0, #1
 8002d04:	f7ff ff9e 	bl	8002c44 <ESCCompleteTransition>
		else if(FEB_PIN_RD(PN_AIRM_SENSE) == FEB_RELAY_STATE_CLOSE &&
				FEB_PIN_RD(PN_AIRP_SENSE) == FEB_RELAY_STATE_OPEN
			//Precharge Sense????? FEB_PIN_RD() == FEB_RELAY_STATE_OPEN
			)
			ESCCompleteTransition(FEB_SM_ST_PRECHARGE);
		break;
 8002d08:	e025      	b.n	8002d56 <ESCCompleteTransition+0x112>
		else if(FEB_PIN_RD(PN_AIRM_SENSE) == FEB_RELAY_STATE_CLOSE &&
 8002d0a:	4a18      	ldr	r2, [pc, #96]	@ (8002d6c <ESCCompleteTransition+0x128>)
 8002d0c:	f107 0310 	add.w	r3, r7, #16
 8002d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d14:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d18:	f107 0310 	add.w	r3, r7, #16
 8002d1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d20:	f7ff fe4a 	bl	80029b8 <FEB_PIN_RD>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d115      	bne.n	8002d56 <ESCCompleteTransition+0x112>
				FEB_PIN_RD(PN_AIRP_SENSE) == FEB_RELAY_STATE_OPEN
 8002d2a:	4a11      	ldr	r2, [pc, #68]	@ (8002d70 <ESCCompleteTransition+0x12c>)
 8002d2c:	f107 0308 	add.w	r3, r7, #8
 8002d30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d34:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d38:	f107 0308 	add.w	r3, r7, #8
 8002d3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d40:	f7ff fe3a 	bl	80029b8 <FEB_PIN_RD>
 8002d44:	4603      	mov	r3, r0
		else if(FEB_PIN_RD(PN_AIRM_SENSE) == FEB_RELAY_STATE_CLOSE &&
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d105      	bne.n	8002d56 <ESCCompleteTransition+0x112>
			ESCCompleteTransition(FEB_SM_ST_PRECHARGE);
 8002d4a:	2003      	movs	r0, #3
 8002d4c:	f7ff ff7a 	bl	8002c44 <ESCCompleteTransition>
		break;
 8002d50:	e001      	b.n	8002d56 <ESCCompleteTransition+0x112>

	default:
		return;
 8002d52:	bf00      	nop
 8002d54:	e000      	b.n	8002d58 <ESCCompleteTransition+0x114>
		break;
 8002d56:	bf00      	nop
	}


}
 8002d58:	3730      	adds	r7, #48	@ 0x30
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	08009708 	.word	0x08009708
 8002d64:	08009710 	.word	0x08009710
 8002d68:	08009728 	.word	0x08009728
 8002d6c:	08009730 	.word	0x08009730
 8002d70:	08009738 	.word	0x08009738

08002d74 <PrechargeTransition>:

static void PrechargeTransition(FEB_SM_ST_t next_state){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b090      	sub	sp, #64	@ 0x40
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	f200 809b 	bhi.w	8002ebe <PrechargeTransition+0x14a>
 8002d88:	a201      	add	r2, pc, #4	@ (adr r2, 8002d90 <PrechargeTransition+0x1c>)
 8002d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8e:	bf00      	nop
 8002d90:	08002dcf 	.word	0x08002dcf
 8002d94:	08002dcf 	.word	0x08002dcf
 8002d98:	08002ebf 	.word	0x08002ebf
 8002d9c:	08002e0d 	.word	0x08002e0d
 8002da0:	08002ebf 	.word	0x08002ebf
 8002da4:	08002ebf 	.word	0x08002ebf
 8002da8:	08002ebf 	.word	0x08002ebf
 8002dac:	08002ebf 	.word	0x08002ebf
 8002db0:	08002dc5 	.word	0x08002dc5
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002dc5 	.word	0x08002dc5
 8002dbc:	08002ebf 	.word	0x08002ebf
 8002dc0:	08002e4f 	.word	0x08002e4f
	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
	case FEB_SM_ST_FAULT_BSPD:
		fault(next_state);
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fe66 	bl	8002a98 <fault>
		break;
 8002dcc:	e07a      	b.n	8002ec4 <PrechargeTransition+0x150>

	case FEB_SM_ST_LV:
	case FEB_SM_ST_ESC:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 8002dce:	4a3f      	ldr	r2, [pc, #252]	@ (8002ecc <PrechargeTransition+0x158>)
 8002dd0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dd8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002ddc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002de0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002de4:	f7ff fdc8 	bl	8002978 <FEB_PIN_RST>
		FEB_PIN_RST(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 8002de8:	4a39      	ldr	r2, [pc, #228]	@ (8002ed0 <PrechargeTransition+0x15c>)
 8002dea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002df2:	e883 0003 	stmia.w	r3, {r0, r1}
 8002df6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002dfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002dfe:	f7ff fdbb 	bl	8002978 <FEB_PIN_RST>
		updateStateProtected(next_state);
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fea1 	bl	8002b4c <updateStateProtected>
		break;
 8002e0a:	e05b      	b.n	8002ec4 <PrechargeTransition+0x150>

	case FEB_SM_ST_ENERGIZED:
		FEB_PIN_SET(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_CLOSE);
 8002e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002ecc <PrechargeTransition+0x158>)
 8002e0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e16:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e22:	f7ff fdb9 	bl	8002998 <FEB_PIN_SET>
		HAL_Delay(10);//osDelay(100);
 8002e26:	200a      	movs	r0, #10
 8002e28:	f001 f82e 	bl	8003e88 <HAL_Delay>
		FEB_PIN_RST(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 8002e2c:	4a28      	ldr	r2, [pc, #160]	@ (8002ed0 <PrechargeTransition+0x15c>)
 8002e2e:	f107 0320 	add.w	r3, r7, #32
 8002e32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e36:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e3a:	f107 0320 	add.w	r3, r7, #32
 8002e3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e42:	f7ff fd99 	bl	8002978 <FEB_PIN_RST>
		updateStateProtected(FEB_SM_ST_ENERGIZED);
 8002e46:	2004      	movs	r0, #4
 8002e48:	f7ff fe80 	bl	8002b4c <updateStateProtected>
		break;
 8002e4c:	e03a      	b.n	8002ec4 <PrechargeTransition+0x150>

	case FEB_SM_ST_DEFAULT:
		if( FEB_PIN_RD(PN_SHS_IN)==FEB_RELAY_STATE_OPEN ||
 8002e4e:	4a21      	ldr	r2, [pc, #132]	@ (8002ed4 <PrechargeTransition+0x160>)
 8002e50:	f107 0318 	add.w	r3, r7, #24
 8002e54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e58:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e5c:	f107 0318 	add.w	r3, r7, #24
 8002e60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e64:	f7ff fda8 	bl	80029b8 <FEB_PIN_RD>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00f      	beq.n	8002e8e <PrechargeTransition+0x11a>
			FEB_PIN_RD(PN_AIRM_SENSE)==FEB_RELAY_STATE_OPEN//FEB_Hw_AIR_Minus_Sense()==FEB_RELAY_STATE_OPEN
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed8 <PrechargeTransition+0x164>)
 8002e70:	f107 0310 	add.w	r3, r7, #16
 8002e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e78:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e7c:	f107 0310 	add.w	r3, r7, #16
 8002e80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e84:	f7ff fd98 	bl	80029b8 <FEB_PIN_RD>
 8002e88:	4603      	mov	r3, r0
		if( FEB_PIN_RD(PN_SHS_IN)==FEB_RELAY_STATE_OPEN ||
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <PrechargeTransition+0x122>
			)PrechargeTransition(FEB_SM_ST_LV);
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f7ff ff70 	bl	8002d74 <PrechargeTransition>
		else if(FEB_PIN_RD(PN_AIRP_SENSE)//FEB_Hw_Precharge_Sense()==FEB_RELAY_STATE_OPEN
				)PrechargeTransition(FEB_SM_ST_ESC);
		break;
 8002e94:	e015      	b.n	8002ec2 <PrechargeTransition+0x14e>
		else if(FEB_PIN_RD(PN_AIRP_SENSE)//FEB_Hw_Precharge_Sense()==FEB_RELAY_STATE_OPEN
 8002e96:	4a11      	ldr	r2, [pc, #68]	@ (8002edc <PrechargeTransition+0x168>)
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ea0:	e883 0003 	stmia.w	r3, {r0, r1}
 8002ea4:	f107 0308 	add.w	r3, r7, #8
 8002ea8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002eac:	f7ff fd84 	bl	80029b8 <FEB_PIN_RD>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <PrechargeTransition+0x14e>
				)PrechargeTransition(FEB_SM_ST_ESC);
 8002eb6:	2002      	movs	r0, #2
 8002eb8:	f7ff ff5c 	bl	8002d74 <PrechargeTransition>
		break;
 8002ebc:	e001      	b.n	8002ec2 <PrechargeTransition+0x14e>

	default:
		return;
 8002ebe:	bf00      	nop
 8002ec0:	e000      	b.n	8002ec4 <PrechargeTransition+0x150>
		break;
 8002ec2:	bf00      	nop
	}


}
 8002ec4:	3740      	adds	r7, #64	@ 0x40
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	08009708 	.word	0x08009708
 8002ed0:	08009710 	.word	0x08009710
 8002ed4:	08009728 	.word	0x08009728
 8002ed8:	08009730 	.word	0x08009730
 8002edc:	08009738 	.word	0x08009738

08002ee0 <EnergizedTransition>:

static void EnergizedTransition(FEB_SM_ST_t next_state){
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	@ 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d869      	bhi.n	8002fc6 <EnergizedTransition+0xe6>
 8002ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <EnergizedTransition+0x18>)
 8002ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef8:	08002f41 	.word	0x08002f41
 8002efc:	08002f41 	.word	0x08002f41
 8002f00:	08002fc7 	.word	0x08002fc7
 8002f04:	08002fc7 	.word	0x08002fc7
 8002f08:	08002f37 	.word	0x08002f37
 8002f0c:	08002fc7 	.word	0x08002fc7
 8002f10:	08002fc7 	.word	0x08002fc7
 8002f14:	08002fc7 	.word	0x08002fc7
 8002f18:	08002f2d 	.word	0x08002f2d
 8002f1c:	08002f2d 	.word	0x08002f2d
 8002f20:	08002f2d 	.word	0x08002f2d
 8002f24:	08002fc7 	.word	0x08002fc7
 8002f28:	08002f7f 	.word	0x08002f7f
	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
	case FEB_SM_ST_FAULT_BSPD:
		fault(next_state);
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fdb2 	bl	8002a98 <fault>
		break;
 8002f34:	e04a      	b.n	8002fcc <EnergizedTransition+0xec>

	case FEB_SM_ST_DRIVE:
		updateStateProtected(next_state);
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fe07 	bl	8002b4c <updateStateProtected>
		break;
 8002f3e:	e045      	b.n	8002fcc <EnergizedTransition+0xec>

	case FEB_SM_ST_LV:
	case FEB_SM_ST_ESC:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 8002f40:	4a24      	ldr	r2, [pc, #144]	@ (8002fd4 <EnergizedTransition+0xf4>)
 8002f42:	f107 0320 	add.w	r3, r7, #32
 8002f46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002f4e:	f107 0320 	add.w	r3, r7, #32
 8002f52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f56:	f7ff fd0f 	bl	8002978 <FEB_PIN_RST>
		FEB_PIN_RST(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 8002f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd8 <EnergizedTransition+0xf8>)
 8002f5c:	f107 0318 	add.w	r3, r7, #24
 8002f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f64:	e883 0003 	stmia.w	r3, {r0, r1}
 8002f68:	f107 0318 	add.w	r3, r7, #24
 8002f6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f70:	f7ff fd02 	bl	8002978 <FEB_PIN_RST>
		updateStateProtected(next_state);
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fde8 	bl	8002b4c <updateStateProtected>
		break;
 8002f7c:	e026      	b.n	8002fcc <EnergizedTransition+0xec>

	case FEB_SM_ST_DEFAULT:
		if( FEB_PIN_RD(PN_SHS_IN)==FEB_RELAY_STATE_OPEN||
 8002f7e:	4a17      	ldr	r2, [pc, #92]	@ (8002fdc <EnergizedTransition+0xfc>)
 8002f80:	f107 0310 	add.w	r3, r7, #16
 8002f84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f88:	e883 0003 	stmia.w	r3, {r0, r1}
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f94:	f7ff fd10 	bl	80029b8 <FEB_PIN_RD>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00f      	beq.n	8002fbe <EnergizedTransition+0xde>
			FEB_PIN_RD(PN_AIRM_SENSE)==FEB_RELAY_STATE_OPEN//FEB_Hw_AIR_Minus_Sense()==FEB_RELAY_STATE_OPEN
 8002f9e:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <EnergizedTransition+0x100>)
 8002fa0:	f107 0308 	add.w	r3, r7, #8
 8002fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fa8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002fac:	f107 0308 	add.w	r3, r7, #8
 8002fb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fb4:	f7ff fd00 	bl	80029b8 <FEB_PIN_RD>
 8002fb8:	4603      	mov	r3, r0
		if( FEB_PIN_RD(PN_SHS_IN)==FEB_RELAY_STATE_OPEN||
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d105      	bne.n	8002fca <EnergizedTransition+0xea>
			)EnergizedTransition(FEB_SM_ST_LV);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f7ff ff8e 	bl	8002ee0 <EnergizedTransition>
		else if(0
				//FEB_CAN_ICS_Ready_To_Drive()
				)
			EnergizedTransition(FEB_SM_ST_DRIVE);
		break;
 8002fc4:	e001      	b.n	8002fca <EnergizedTransition+0xea>

	default:
		return;
 8002fc6:	bf00      	nop
 8002fc8:	e000      	b.n	8002fcc <EnergizedTransition+0xec>
		break;
 8002fca:	bf00      	nop
	}

}
 8002fcc:	3728      	adds	r7, #40	@ 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	08009708 	.word	0x08009708
 8002fd8:	08009710 	.word	0x08009710
 8002fdc:	08009728 	.word	0x08009728
 8002fe0:	08009730 	.word	0x08009730

08002fe4 <DriveTransition>:

static void DriveTransition(FEB_SM_ST_t next_state){
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	@ 0x28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d868      	bhi.n	80030c8 <DriveTransition+0xe4>
 8002ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8002ffc <DriveTransition+0x18>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	0800303b 	.word	0x0800303b
 8003000:	0800303b 	.word	0x0800303b
 8003004:	080030c9 	.word	0x080030c9
 8003008:	08003079 	.word	0x08003079
 800300c:	080030c9 	.word	0x080030c9
 8003010:	080030c9 	.word	0x080030c9
 8003014:	080030c9 	.word	0x080030c9
 8003018:	080030c9 	.word	0x080030c9
 800301c:	08003031 	.word	0x08003031
 8003020:	08003031 	.word	0x08003031
 8003024:	08003031 	.word	0x08003031
 8003028:	080030c9 	.word	0x080030c9
 800302c:	08003081 	.word	0x08003081
	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
	case FEB_SM_ST_FAULT_BSPD:
		fault(next_state);
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fd30 	bl	8002a98 <fault>
		break;
 8003038:	e049      	b.n	80030ce <DriveTransition+0xea>

	case FEB_SM_ST_LV:
	case FEB_SM_ST_ESC:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 800303a:	4a26      	ldr	r2, [pc, #152]	@ (80030d4 <DriveTransition+0xf0>)
 800303c:	f107 0320 	add.w	r3, r7, #32
 8003040:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003044:	e883 0003 	stmia.w	r3, {r0, r1}
 8003048:	f107 0320 	add.w	r3, r7, #32
 800304c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003050:	f7ff fc92 	bl	8002978 <FEB_PIN_RST>
		FEB_PIN_RST(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 8003054:	4a20      	ldr	r2, [pc, #128]	@ (80030d8 <DriveTransition+0xf4>)
 8003056:	f107 0318 	add.w	r3, r7, #24
 800305a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800305e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003062:	f107 0318 	add.w	r3, r7, #24
 8003066:	e893 0003 	ldmia.w	r3, {r0, r1}
 800306a:	f7ff fc85 	bl	8002978 <FEB_PIN_RST>
		updateStateProtected(next_state);
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fd6b 	bl	8002b4c <updateStateProtected>
		break;
 8003076:	e02a      	b.n	80030ce <DriveTransition+0xea>

	case FEB_SM_ST_ENERGIZED:
		updateStateProtected(FEB_SM_ST_ENERGIZED);
 8003078:	2004      	movs	r0, #4
 800307a:	f7ff fd67 	bl	8002b4c <updateStateProtected>
		break;
 800307e:	e026      	b.n	80030ce <DriveTransition+0xea>

	case FEB_SM_ST_DEFAULT:
		if( FEB_PIN_RD(PN_SHS_IN)== FEB_RELAY_STATE_OPEN ||
 8003080:	4a16      	ldr	r2, [pc, #88]	@ (80030dc <DriveTransition+0xf8>)
 8003082:	f107 0310 	add.w	r3, r7, #16
 8003086:	e892 0003 	ldmia.w	r2, {r0, r1}
 800308a:	e883 0003 	stmia.w	r3, {r0, r1}
 800308e:	f107 0310 	add.w	r3, r7, #16
 8003092:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003096:	f7ff fc8f 	bl	80029b8 <FEB_PIN_RD>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00f      	beq.n	80030c0 <DriveTransition+0xdc>
			FEB_PIN_RD(PN_AIRM_SENSE) == FEB_RELAY_STATE_OPEN //FEB_Hw_AIR_Minus_Sense()==FEB_RELAY_STATE_OPEN
 80030a0:	4a0f      	ldr	r2, [pc, #60]	@ (80030e0 <DriveTransition+0xfc>)
 80030a2:	f107 0308 	add.w	r3, r7, #8
 80030a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80030ae:	f107 0308 	add.w	r3, r7, #8
 80030b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030b6:	f7ff fc7f 	bl	80029b8 <FEB_PIN_RD>
 80030ba:	4603      	mov	r3, r0
		if( FEB_PIN_RD(PN_SHS_IN)== FEB_RELAY_STATE_OPEN ||
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <DriveTransition+0xe8>
			)DriveTransition(FEB_SM_ST_LV);
 80030c0:	2001      	movs	r0, #1
 80030c2:	f7ff ff8f 	bl	8002fe4 <DriveTransition>
		else if(0
				//FEB_CAN_ICS_Ready_To_Drive()
				)
			DriveTransition(FEB_SM_ST_ENERGIZED);
		break;
 80030c6:	e001      	b.n	80030cc <DriveTransition+0xe8>

	default:
		return;
 80030c8:	bf00      	nop
 80030ca:	e000      	b.n	80030ce <DriveTransition+0xea>
		break;
 80030cc:	bf00      	nop
	}
}
 80030ce:	3728      	adds	r7, #40	@ 0x28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	08009708 	.word	0x08009708
 80030d8:	08009710 	.word	0x08009710
 80030dc:	08009728 	.word	0x08009728
 80030e0:	08009730 	.word	0x08009730

080030e4 <FreeTransition>:

static void FreeTransition(FEB_SM_ST_t next_state){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d85f      	bhi.n	80031b6 <FreeTransition+0xd2>
 80030f6:	a201      	add	r2, pc, #4	@ (adr r2, 80030fc <FreeTransition+0x18>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	08003139 	.word	0x08003139
 8003100:	080031b7 	.word	0x080031b7
 8003104:	080031b7 	.word	0x080031b7
 8003108:	080031b7 	.word	0x080031b7
 800310c:	080031b7 	.word	0x080031b7
 8003110:	08003139 	.word	0x08003139
 8003114:	0800315b 	.word	0x0800315b
 8003118:	08003185 	.word	0x08003185
 800311c:	08003131 	.word	0x08003131
 8003120:	080031b7 	.word	0x080031b7
 8003124:	08003131 	.word	0x08003131
 8003128:	080031b7 	.word	0x080031b7
 800312c:	0800318f 	.word	0x0800318f

	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
		fault(FEB_SM_ST_FAULT_CHARGING);
 8003130:	200c      	movs	r0, #12
 8003132:	f7ff fcb1 	bl	8002a98 <fault>
		break;
 8003136:	e03f      	b.n	80031b8 <FreeTransition+0xd4>

	case FEB_SM_ST_FREE:
	case FEB_SM_ST_LV:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 8003138:	4a21      	ldr	r2, [pc, #132]	@ (80031c0 <FreeTransition+0xdc>)
 800313a:	f107 0318 	add.w	r3, r7, #24
 800313e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003142:	e883 0003 	stmia.w	r3, {r0, r1}
 8003146:	f107 0318 	add.w	r3, r7, #24
 800314a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800314e:	f7ff fc13 	bl	8002978 <FEB_PIN_RST>
		updateStateProtected(FEB_SM_ST_FREE);
 8003152:	2006      	movs	r0, #6
 8003154:	f7ff fcfa 	bl	8002b4c <updateStateProtected>
		break;
 8003158:	e02e      	b.n	80031b8 <FreeTransition+0xd4>

	case FEB_SM_ST_CHARGING:
		HAL_Delay(10);//osDelay(100);
 800315a:	200a      	movs	r0, #10
 800315c:	f000 fe94 	bl	8003e88 <HAL_Delay>
		FEB_PIN_SET(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_CLOSE);
 8003160:	4a17      	ldr	r2, [pc, #92]	@ (80031c0 <FreeTransition+0xdc>)
 8003162:	f107 0310 	add.w	r3, r7, #16
 8003166:	e892 0003 	ldmia.w	r2, {r0, r1}
 800316a:	e883 0003 	stmia.w	r3, {r0, r1}
 800316e:	f107 0310 	add.w	r3, r7, #16
 8003172:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003176:	f7ff fc0f 	bl	8002998 <FEB_PIN_SET>
		updateStateProtected(next_state);
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fce5 	bl	8002b4c <updateStateProtected>
		break;
 8003182:	e019      	b.n	80031b8 <FreeTransition+0xd4>
	case FEB_SM_ST_BALANCE:
		updateStateProtected(next_state);
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fce0 	bl	8002b4c <updateStateProtected>
		break;
 800318c:	e014      	b.n	80031b8 <FreeTransition+0xd4>
	case FEB_SM_ST_DEFAULT:
		if( FEB_PIN_RD(PN_AIRM_SENSE)== FEB_RELAY_STATE_CLOSE //FEB_Hw_AIR_Minus_Sense()==FEB_RELAY_STATE_CLOSE &&
 800318e:	4a0d      	ldr	r2, [pc, #52]	@ (80031c4 <FreeTransition+0xe0>)
 8003190:	f107 0308 	add.w	r3, r7, #8
 8003194:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003198:	e883 0003 	stmia.w	r3, {r0, r1}
 800319c:	f107 0308 	add.w	r3, r7, #8
 80031a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031a4:	f7ff fc08 	bl	80029b8 <FEB_PIN_RD>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d103      	bne.n	80031b6 <FreeTransition+0xd2>
			//FEB_Hw_Charge_Sense()==FEB_RELAY_STATE_CLOSE
			//FEB_CAN_Charger_Received()
		) FreeTransition(FEB_SM_ST_CHARGING);
 80031ae:	2007      	movs	r0, #7
 80031b0:	f7ff ff98 	bl	80030e4 <FreeTransition>
 80031b4:	e000      	b.n	80031b8 <FreeTransition+0xd4>
	default:
		return;
 80031b6:	bf00      	nop
	}

}
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	08009708 	.word	0x08009708
 80031c4:	08009730 	.word	0x08009730

080031c8 <ChargingTransition>:

static void ChargingTransition(FEB_SM_ST_t next_state){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d851      	bhi.n	800327e <ChargingTransition+0xb6>
 80031da:	a201      	add	r2, pc, #4	@ (adr r2, 80031e0 <ChargingTransition+0x18>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	0800321d 	.word	0x0800321d
 80031e4:	0800327f 	.word	0x0800327f
 80031e8:	0800327f 	.word	0x0800327f
 80031ec:	0800327f 	.word	0x0800327f
 80031f0:	0800327f 	.word	0x0800327f
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	0800327f 	.word	0x0800327f
 80031fc:	0800327f 	.word	0x0800327f
 8003200:	08003215 	.word	0x08003215
 8003204:	0800327f 	.word	0x0800327f
 8003208:	08003215 	.word	0x08003215
 800320c:	0800327f 	.word	0x0800327f
 8003210:	08003259 	.word	0x08003259

	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
		fault(FEB_SM_ST_FAULT_CHARGING);
 8003214:	200c      	movs	r0, #12
 8003216:	f7ff fc3f 	bl	8002a98 <fault>
		break;
 800321a:	e031      	b.n	8003280 <ChargingTransition+0xb8>

	case FEB_SM_ST_LV:
	case FEB_SM_ST_FREE:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 800321c:	4a1a      	ldr	r2, [pc, #104]	@ (8003288 <ChargingTransition+0xc0>)
 800321e:	f107 0318 	add.w	r3, r7, #24
 8003222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003226:	e883 0003 	stmia.w	r3, {r0, r1}
 800322a:	f107 0318 	add.w	r3, r7, #24
 800322e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003232:	f7ff fba1 	bl	8002978 <FEB_PIN_RST>
		FEB_PIN_RST(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 8003236:	4a15      	ldr	r2, [pc, #84]	@ (800328c <ChargingTransition+0xc4>)
 8003238:	f107 0310 	add.w	r3, r7, #16
 800323c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003240:	e883 0003 	stmia.w	r3, {r0, r1}
 8003244:	f107 0310 	add.w	r3, r7, #16
 8003248:	e893 0003 	ldmia.w	r3, {r0, r1}
 800324c:	f7ff fb94 	bl	8002978 <FEB_PIN_RST>
		updateStateProtected(FEB_SM_ST_FREE);
 8003250:	2006      	movs	r0, #6
 8003252:	f7ff fc7b 	bl	8002b4c <updateStateProtected>
		break;
 8003256:	e013      	b.n	8003280 <ChargingTransition+0xb8>
;
	case FEB_SM_ST_DEFAULT:
		if(FEB_PIN_RD(PN_AIRM_SENSE)==FEB_RELAY_STATE_OPEN//FEB_Hw_AIR_Minus_Sense()==FEB_RELAY_STATE_OPEN
 8003258:	4a0d      	ldr	r2, [pc, #52]	@ (8003290 <ChargingTransition+0xc8>)
 800325a:	f107 0308 	add.w	r3, r7, #8
 800325e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003262:	e883 0003 	stmia.w	r3, {r0, r1}
 8003266:	f107 0308 	add.w	r3, r7, #8
 800326a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800326e:	f7ff fba3 	bl	80029b8 <FEB_PIN_RD>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <ChargingTransition+0xb6>
			)
			ChargingTransition(FEB_SM_ST_FREE);
 8003278:	2006      	movs	r0, #6
 800327a:	f7ff ffa5 	bl	80031c8 <ChargingTransition>
	default:
		break;
 800327e:	bf00      	nop
	}

}
 8003280:	bf00      	nop
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	08009708 	.word	0x08009708
 800328c:	08009710 	.word	0x08009710
 8003290:	08009730 	.word	0x08009730

08003294 <BalanceTransition>:

static void BalanceTransition(FEB_SM_ST_t next_state){
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d851      	bhi.n	800334a <BalanceTransition+0xb6>
 80032a6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <BalanceTransition+0x18>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080032e9 	.word	0x080032e9
 80032b0:	0800334b 	.word	0x0800334b
 80032b4:	0800334b 	.word	0x0800334b
 80032b8:	0800334b 	.word	0x0800334b
 80032bc:	0800334b 	.word	0x0800334b
 80032c0:	080032e9 	.word	0x080032e9
 80032c4:	0800334b 	.word	0x0800334b
 80032c8:	0800334b 	.word	0x0800334b
 80032cc:	080032e1 	.word	0x080032e1
 80032d0:	0800334b 	.word	0x0800334b
 80032d4:	080032e1 	.word	0x080032e1
 80032d8:	0800334b 	.word	0x0800334b
 80032dc:	08003325 	.word	0x08003325

	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
		fault(FEB_SM_ST_FAULT_CHARGING);
 80032e0:	200c      	movs	r0, #12
 80032e2:	f7ff fbd9 	bl	8002a98 <fault>
		//osMutexRelease(FEB_SM_LockHandle);
		//TODO: REPLACE FOR BALANCING
		//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
		break;
 80032e6:	e031      	b.n	800334c <BalanceTransition+0xb8>

	case FEB_SM_ST_LV:
	case FEB_SM_ST_FREE:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 80032e8:	4a1a      	ldr	r2, [pc, #104]	@ (8003354 <BalanceTransition+0xc0>)
 80032ea:	f107 0318 	add.w	r3, r7, #24
 80032ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80032f6:	f107 0318 	add.w	r3, r7, #24
 80032fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032fe:	f7ff fb3b 	bl	8002978 <FEB_PIN_RST>
		FEB_PIN_RST(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 8003302:	4a15      	ldr	r2, [pc, #84]	@ (8003358 <BalanceTransition+0xc4>)
 8003304:	f107 0310 	add.w	r3, r7, #16
 8003308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800330c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003310:	f107 0310 	add.w	r3, r7, #16
 8003314:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003318:	f7ff fb2e 	bl	8002978 <FEB_PIN_RST>
		//osMutexRelease(FEB_SM_LockHandle);
		//FEB_LTC6811_Stop_Balance();
		updateStateProtected(FEB_SM_ST_FREE);
 800331c:	2006      	movs	r0, #6
 800331e:	f7ff fc15 	bl	8002b4c <updateStateProtected>
		break;
 8003322:	e013      	b.n	800334c <BalanceTransition+0xb8>

	case FEB_SM_ST_DEFAULT:
		if(FEB_PIN_RD(PN_AIRM_SENSE)==FEB_RELAY_STATE_OPEN//FEB_Hw_AIR_Minus_Sense()==FEB_RELAY_STATE_OPEN
 8003324:	4a0d      	ldr	r2, [pc, #52]	@ (800335c <BalanceTransition+0xc8>)
 8003326:	f107 0308 	add.w	r3, r7, #8
 800332a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800332e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003332:	f107 0308 	add.w	r3, r7, #8
 8003336:	e893 0003 	ldmia.w	r3, {r0, r1}
 800333a:	f7ff fb3d 	bl	80029b8 <FEB_PIN_RD>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <BalanceTransition+0xb6>
			)
			BalanceTransition(FEB_SM_ST_FREE);
 8003344:	2006      	movs	r0, #6
 8003346:	f7ff ffa5 	bl	8003294 <BalanceTransition>

	default:
		break;
 800334a:	bf00      	nop

	}
}
 800334c:	bf00      	nop
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	08009708 	.word	0x08009708
 8003358:	08009710 	.word	0x08009710
 800335c:	08009730 	.word	0x08009730

08003360 <BMSFaultTransition>:

/** Hard Fault Functions **/
static void BMSFaultTransition(FEB_SM_ST_t next_state){
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
	fault(SM_Current_State);
 800336a:	4b04      	ldr	r3, [pc, #16]	@ (800337c <BMSFaultTransition+0x1c>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fb92 	bl	8002a98 <fault>
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	2000046e 	.word	0x2000046e

08003380 <BSPDFaultTransition>:
static void BSPDFaultTransition(FEB_SM_ST_t next_state){
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
	fault(SM_Current_State);
 800338a:	4b04      	ldr	r3, [pc, #16]	@ (800339c <BSPDFaultTransition+0x1c>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fb82 	bl	8002a98 <fault>
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	2000046e 	.word	0x2000046e

080033a0 <IMDFaultTransition>:
static void IMDFaultTransition(FEB_SM_ST_t next_state){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
	fault(SM_Current_State);
 80033aa:	4b04      	ldr	r3, [pc, #16]	@ (80033bc <IMDFaultTransition+0x1c>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fb72 	bl	8002a98 <fault>
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	2000046e 	.word	0x2000046e

080033c0 <ChargingFaultTransition>:
static void ChargingFaultTransition(FEB_SM_ST_t next_state){
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
	fault(SM_Current_State);
 80033ca:	4b04      	ldr	r3, [pc, #16]	@ (80033dc <ChargingFaultTransition+0x1c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fb62 	bl	8002a98 <fault>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	2000046e 	.word	0x2000046e

080033e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033e4:	f000 fd0e 	bl	8003e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033e8:	f000 f81a 	bl	8003420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ec:	f000 f948 	bl	8003680 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80033f0:	f000 f91c 	bl	800362c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80033f4:	f000 f8e4 	bl	80035c0 <MX_SPI1_Init>
  MX_CAN1_Init();
 80033f8:	f000 f880 	bl	80034fc <MX_CAN1_Init>
  MX_I2C1_Init();
 80033fc:	f000 f8b2 	bl	8003564 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  FEB_Main_Setup();
 8003400:	f7ff faeb 	bl	80029da <FEB_Main_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FEB_Task_ADBMS();
 8003404:	f7ff faf3 	bl	80029ee <FEB_Task_ADBMS>
	  FEB_Task_SM();
 8003408:	f7ff faf9 	bl	80029fe <FEB_Task_SM>
	  FEB_Task_Charge();
 800340c:	f7ff fafd 	bl	8002a0a <FEB_Task_Charge>
	  FEB_Task_Balance();
 8003410:	f7ff fb02 	bl	8002a18 <FEB_Task_Balance>
	  FEB_Task_IVT();
 8003414:	f7ff fb07 	bl	8002a26 <FEB_Task_IVT>
	  FEB_Task_CAN();
 8003418:	f7ff fb0c 	bl	8002a34 <FEB_Task_CAN>
	  FEB_Task_ADBMS();
 800341c:	bf00      	nop
 800341e:	e7f1      	b.n	8003404 <main+0x24>

08003420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b094      	sub	sp, #80	@ 0x50
 8003424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003426:	f107 031c 	add.w	r3, r7, #28
 800342a:	2234      	movs	r2, #52	@ 0x34
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f004 faed 	bl	8007a0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	4b2a      	ldr	r3, [pc, #168]	@ (80034f4 <SystemClock_Config+0xd4>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	4a29      	ldr	r2, [pc, #164]	@ (80034f4 <SystemClock_Config+0xd4>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003452:	6413      	str	r3, [r2, #64]	@ 0x40
 8003454:	4b27      	ldr	r3, [pc, #156]	@ (80034f4 <SystemClock_Config+0xd4>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003460:	2300      	movs	r3, #0
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	4b24      	ldr	r3, [pc, #144]	@ (80034f8 <SystemClock_Config+0xd8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800346c:	4a22      	ldr	r2, [pc, #136]	@ (80034f8 <SystemClock_Config+0xd8>)
 800346e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b20      	ldr	r3, [pc, #128]	@ (80034f8 <SystemClock_Config+0xd8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003480:	2302      	movs	r3, #2
 8003482:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003484:	2301      	movs	r3, #1
 8003486:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003488:	2310      	movs	r3, #16
 800348a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800348c:	2302      	movs	r3, #2
 800348e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003490:	2300      	movs	r3, #0
 8003492:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003494:	2310      	movs	r3, #16
 8003496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003498:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800349c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800349e:	2304      	movs	r3, #4
 80034a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80034a2:	2302      	movs	r3, #2
 80034a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80034a6:	2302      	movs	r3, #2
 80034a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034aa:	f107 031c 	add.w	r3, r7, #28
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 febc 	bl	800522c <HAL_RCC_OscConfig>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80034ba:	f000 f9a7 	bl	800380c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034be:	230f      	movs	r3, #15
 80034c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034c2:	2302      	movs	r3, #2
 80034c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034d4:	f107 0308 	add.w	r3, r7, #8
 80034d8:	2102      	movs	r1, #2
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 fb2a 	bl	8004b34 <HAL_RCC_ClockConfig>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80034e6:	f000 f991 	bl	800380c <Error_Handler>
  }
}
 80034ea:	bf00      	nop
 80034ec:	3750      	adds	r7, #80	@ 0x50
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40007000 	.word	0x40007000

080034fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003500:	4b16      	ldr	r3, [pc, #88]	@ (800355c <MX_CAN1_Init+0x60>)
 8003502:	4a17      	ldr	r2, [pc, #92]	@ (8003560 <MX_CAN1_Init+0x64>)
 8003504:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003506:	4b15      	ldr	r3, [pc, #84]	@ (800355c <MX_CAN1_Init+0x60>)
 8003508:	2210      	movs	r2, #16
 800350a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <MX_CAN1_Init+0x60>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003512:	4b12      	ldr	r3, [pc, #72]	@ (800355c <MX_CAN1_Init+0x60>)
 8003514:	2200      	movs	r2, #0
 8003516:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003518:	4b10      	ldr	r3, [pc, #64]	@ (800355c <MX_CAN1_Init+0x60>)
 800351a:	2200      	movs	r2, #0
 800351c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800351e:	4b0f      	ldr	r3, [pc, #60]	@ (800355c <MX_CAN1_Init+0x60>)
 8003520:	2200      	movs	r2, #0
 8003522:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003524:	4b0d      	ldr	r3, [pc, #52]	@ (800355c <MX_CAN1_Init+0x60>)
 8003526:	2200      	movs	r2, #0
 8003528:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800352a:	4b0c      	ldr	r3, [pc, #48]	@ (800355c <MX_CAN1_Init+0x60>)
 800352c:	2200      	movs	r2, #0
 800352e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003530:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <MX_CAN1_Init+0x60>)
 8003532:	2200      	movs	r2, #0
 8003534:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003536:	4b09      	ldr	r3, [pc, #36]	@ (800355c <MX_CAN1_Init+0x60>)
 8003538:	2200      	movs	r2, #0
 800353a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800353c:	4b07      	ldr	r3, [pc, #28]	@ (800355c <MX_CAN1_Init+0x60>)
 800353e:	2200      	movs	r2, #0
 8003540:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <MX_CAN1_Init+0x60>)
 8003544:	2200      	movs	r2, #0
 8003546:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003548:	4804      	ldr	r0, [pc, #16]	@ (800355c <MX_CAN1_Init+0x60>)
 800354a:	f000 fcc1 	bl	8003ed0 <HAL_CAN_Init>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8003554:	f000 f95a 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000470 	.word	0x20000470
 8003560:	40006400 	.word	0x40006400

08003564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003568:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <MX_I2C1_Init+0x50>)
 800356a:	4a13      	ldr	r2, [pc, #76]	@ (80035b8 <MX_I2C1_Init+0x54>)
 800356c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800356e:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <MX_I2C1_Init+0x50>)
 8003570:	4a12      	ldr	r2, [pc, #72]	@ (80035bc <MX_I2C1_Init+0x58>)
 8003572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003574:	4b0f      	ldr	r3, [pc, #60]	@ (80035b4 <MX_I2C1_Init+0x50>)
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800357a:	4b0e      	ldr	r3, [pc, #56]	@ (80035b4 <MX_I2C1_Init+0x50>)
 800357c:	2200      	movs	r2, #0
 800357e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <MX_I2C1_Init+0x50>)
 8003582:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003586:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003588:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <MX_I2C1_Init+0x50>)
 800358a:	2200      	movs	r2, #0
 800358c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800358e:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <MX_I2C1_Init+0x50>)
 8003590:	2200      	movs	r2, #0
 8003592:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003594:	4b07      	ldr	r3, [pc, #28]	@ (80035b4 <MX_I2C1_Init+0x50>)
 8003596:	2200      	movs	r2, #0
 8003598:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800359a:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <MX_I2C1_Init+0x50>)
 800359c:	2200      	movs	r2, #0
 800359e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035a0:	4804      	ldr	r0, [pc, #16]	@ (80035b4 <MX_I2C1_Init+0x50>)
 80035a2:	f001 f983 	bl	80048ac <HAL_I2C_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80035ac:	f000 f92e 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035b0:	bf00      	nop
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000498 	.word	0x20000498
 80035b8:	40005400 	.word	0x40005400
 80035bc:	000186a0 	.word	0x000186a0

080035c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035c4:	4b17      	ldr	r3, [pc, #92]	@ (8003624 <MX_SPI1_Init+0x64>)
 80035c6:	4a18      	ldr	r2, [pc, #96]	@ (8003628 <MX_SPI1_Init+0x68>)
 80035c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035ca:	4b16      	ldr	r3, [pc, #88]	@ (8003624 <MX_SPI1_Init+0x64>)
 80035cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035d2:	4b14      	ldr	r3, [pc, #80]	@ (8003624 <MX_SPI1_Init+0x64>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035d8:	4b12      	ldr	r3, [pc, #72]	@ (8003624 <MX_SPI1_Init+0x64>)
 80035da:	2200      	movs	r2, #0
 80035dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035de:	4b11      	ldr	r3, [pc, #68]	@ (8003624 <MX_SPI1_Init+0x64>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003624 <MX_SPI1_Init+0x64>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003624 <MX_SPI1_Init+0x64>)
 80035ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80035f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003624 <MX_SPI1_Init+0x64>)
 80035f4:	2228      	movs	r2, #40	@ 0x28
 80035f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <MX_SPI1_Init+0x64>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035fe:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <MX_SPI1_Init+0x64>)
 8003600:	2200      	movs	r2, #0
 8003602:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003604:	4b07      	ldr	r3, [pc, #28]	@ (8003624 <MX_SPI1_Init+0x64>)
 8003606:	2200      	movs	r2, #0
 8003608:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <MX_SPI1_Init+0x64>)
 800360c:	220a      	movs	r2, #10
 800360e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003610:	4804      	ldr	r0, [pc, #16]	@ (8003624 <MX_SPI1_Init+0x64>)
 8003612:	f002 f8a9 	bl	8005768 <HAL_SPI_Init>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800361c:	f000 f8f6 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003620:	bf00      	nop
 8003622:	bd80      	pop	{r7, pc}
 8003624:	200004ec 	.word	0x200004ec
 8003628:	40013000 	.word	0x40013000

0800362c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003630:	4b11      	ldr	r3, [pc, #68]	@ (8003678 <MX_USART2_UART_Init+0x4c>)
 8003632:	4a12      	ldr	r2, [pc, #72]	@ (800367c <MX_USART2_UART_Init+0x50>)
 8003634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003636:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <MX_USART2_UART_Init+0x4c>)
 8003638:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800363c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800363e:	4b0e      	ldr	r3, [pc, #56]	@ (8003678 <MX_USART2_UART_Init+0x4c>)
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003644:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <MX_USART2_UART_Init+0x4c>)
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800364a:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <MX_USART2_UART_Init+0x4c>)
 800364c:	2200      	movs	r2, #0
 800364e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003650:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <MX_USART2_UART_Init+0x4c>)
 8003652:	220c      	movs	r2, #12
 8003654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003656:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <MX_USART2_UART_Init+0x4c>)
 8003658:	2200      	movs	r2, #0
 800365a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <MX_USART2_UART_Init+0x4c>)
 800365e:	2200      	movs	r2, #0
 8003660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003662:	4805      	ldr	r0, [pc, #20]	@ (8003678 <MX_USART2_UART_Init+0x4c>)
 8003664:	f003 f8f4 	bl	8006850 <HAL_UART_Init>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800366e:	f000 f8cd 	bl	800380c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000544 	.word	0x20000544
 800367c:	40004400 	.word	0x40004400

08003680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	@ 0x28
 8003684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003686:	f107 0314 	add.w	r3, r7, #20
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	4b4e      	ldr	r3, [pc, #312]	@ (80037d4 <MX_GPIO_Init+0x154>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	4a4d      	ldr	r2, [pc, #308]	@ (80037d4 <MX_GPIO_Init+0x154>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036a6:	4b4b      	ldr	r3, [pc, #300]	@ (80037d4 <MX_GPIO_Init+0x154>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b47      	ldr	r3, [pc, #284]	@ (80037d4 <MX_GPIO_Init+0x154>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	4a46      	ldr	r2, [pc, #280]	@ (80037d4 <MX_GPIO_Init+0x154>)
 80036bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c2:	4b44      	ldr	r3, [pc, #272]	@ (80037d4 <MX_GPIO_Init+0x154>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	4b40      	ldr	r3, [pc, #256]	@ (80037d4 <MX_GPIO_Init+0x154>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d6:	4a3f      	ldr	r2, [pc, #252]	@ (80037d4 <MX_GPIO_Init+0x154>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036de:	4b3d      	ldr	r3, [pc, #244]	@ (80037d4 <MX_GPIO_Init+0x154>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <MX_GPIO_Init+0x154>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	4a38      	ldr	r2, [pc, #224]	@ (80037d4 <MX_GPIO_Init+0x154>)
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036fa:	4b36      	ldr	r3, [pc, #216]	@ (80037d4 <MX_GPIO_Init+0x154>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	607b      	str	r3, [r7, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	4b32      	ldr	r3, [pc, #200]	@ (80037d4 <MX_GPIO_Init+0x154>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	4a31      	ldr	r2, [pc, #196]	@ (80037d4 <MX_GPIO_Init+0x154>)
 8003710:	f043 0308 	orr.w	r3, r3, #8
 8003714:	6313      	str	r3, [r2, #48]	@ 0x30
 8003716:	4b2f      	ldr	r3, [pc, #188]	@ (80037d4 <MX_GPIO_Init+0x154>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INDICATOR_Pin|BMS_IND_Pin|BMS_A_Pin|PC_AIR_Pin
 8003722:	2200      	movs	r2, #0
 8003724:	f242 010f 	movw	r1, #8207	@ 0x200f
 8003728:	482b      	ldr	r0, [pc, #172]	@ (80037d8 <MX_GPIO_Init+0x158>)
 800372a:	f001 f8a5 	bl	8004878 <HAL_GPIO_WritePin>
                          |CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800372e:	2200      	movs	r2, #0
 8003730:	2101      	movs	r1, #1
 8003732:	482a      	ldr	r0, [pc, #168]	@ (80037dc <MX_GPIO_Init+0x15c>)
 8003734:	f001 f8a0 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC_REL_GPIO_Port, PC_REL_Pin, GPIO_PIN_RESET);
 8003738:	2200      	movs	r2, #0
 800373a:	2104      	movs	r1, #4
 800373c:	4828      	ldr	r0, [pc, #160]	@ (80037e0 <MX_GPIO_Init+0x160>)
 800373e:	f001 f89b 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INDICATOR_Pin BMS_IND_Pin BMS_A_Pin PC_AIR_Pin
                           CS_Pin */
  GPIO_InitStruct.Pin = INDICATOR_Pin|BMS_IND_Pin|BMS_A_Pin|PC_AIR_Pin
 8003742:	f242 030f 	movw	r3, #8207	@ 0x200f
 8003746:	617b      	str	r3, [r7, #20]
                          |CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003748:	2301      	movs	r3, #1
 800374a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003750:	2300      	movs	r3, #0
 8003752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4619      	mov	r1, r3
 800375a:	481f      	ldr	r0, [pc, #124]	@ (80037d8 <MX_GPIO_Init+0x158>)
 800375c:	f000 fee0 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8003760:	2301      	movs	r3, #1
 8003762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003764:	2301      	movs	r3, #1
 8003766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376c:	2300      	movs	r3, #0
 800376e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	4619      	mov	r1, r3
 8003776:	4819      	ldr	r0, [pc, #100]	@ (80037dc <MX_GPIO_Init+0x15c>)
 8003778:	f000 fed2 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR__SENSE_Pin AIR__SENSEC5_Pin SHS_IMD_Pin SHS_TSMS_Pin
                           SHS_IN_Pin */
  GPIO_InitStruct.Pin = AIR__SENSE_Pin|AIR__SENSEC5_Pin|SHS_IMD_Pin|SHS_TSMS_Pin
 800377c:	f641 4330 	movw	r3, #7216	@ 0x1c30
 8003780:	617b      	str	r3, [r7, #20]
                          |SHS_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800378a:	f107 0314 	add.w	r3, r7, #20
 800378e:	4619      	mov	r1, r3
 8003790:	4811      	ldr	r0, [pc, #68]	@ (80037d8 <MX_GPIO_Init+0x158>)
 8003792:	f000 fec5 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : WAKE_Pin INTR_Pin RST_Pin PG_Pin
                           Alert_Pin */
  GPIO_InitStruct.Pin = WAKE_Pin|INTR_Pin|RST_Pin|PG_Pin
 8003796:	23e3      	movs	r3, #227	@ 0xe3
 8003798:	617b      	str	r3, [r7, #20]
                          |Alert_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a2:	f107 0314 	add.w	r3, r7, #20
 80037a6:	4619      	mov	r1, r3
 80037a8:	480e      	ldr	r0, [pc, #56]	@ (80037e4 <MX_GPIO_Init+0x164>)
 80037aa:	f000 feb9 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC_REL_Pin */
  GPIO_InitStruct.Pin = PC_REL_Pin;
 80037ae:	2304      	movs	r3, #4
 80037b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b2:	2301      	movs	r3, #1
 80037b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ba:	2300      	movs	r3, #0
 80037bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PC_REL_GPIO_Port, &GPIO_InitStruct);
 80037be:	f107 0314 	add.w	r3, r7, #20
 80037c2:	4619      	mov	r1, r3
 80037c4:	4806      	ldr	r0, [pc, #24]	@ (80037e0 <MX_GPIO_Init+0x160>)
 80037c6:	f000 feab 	bl	8004520 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80037ca:	bf00      	nop
 80037cc:	3728      	adds	r7, #40	@ 0x28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40020800 	.word	0x40020800
 80037dc:	40020000 	.word	0x40020000
 80037e0:	40020c00 	.word	0x40020c00
 80037e4:	40020400 	.word	0x40020400

080037e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a04      	ldr	r2, [pc, #16]	@ (8003808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80037fa:	f000 fb25 	bl	8003e48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000

0800380c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003810:	b672      	cpsid	i
}
 8003812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <Error_Handler+0x8>

08003818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	4b10      	ldr	r3, [pc, #64]	@ (8003864 <HAL_MspInit+0x4c>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	4a0f      	ldr	r2, [pc, #60]	@ (8003864 <HAL_MspInit+0x4c>)
 8003828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800382c:	6453      	str	r3, [r2, #68]	@ 0x44
 800382e:	4b0d      	ldr	r3, [pc, #52]	@ (8003864 <HAL_MspInit+0x4c>)
 8003830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003836:	607b      	str	r3, [r7, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <HAL_MspInit+0x4c>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	4a08      	ldr	r2, [pc, #32]	@ (8003864 <HAL_MspInit+0x4c>)
 8003844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	@ 0x40
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_MspInit+0x4c>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800

08003868 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	@ 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a19      	ldr	r2, [pc, #100]	@ (80038ec <HAL_CAN_MspInit+0x84>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d12c      	bne.n	80038e4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	4b18      	ldr	r3, [pc, #96]	@ (80038f0 <HAL_CAN_MspInit+0x88>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	4a17      	ldr	r2, [pc, #92]	@ (80038f0 <HAL_CAN_MspInit+0x88>)
 8003894:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003898:	6413      	str	r3, [r2, #64]	@ 0x40
 800389a:	4b15      	ldr	r3, [pc, #84]	@ (80038f0 <HAL_CAN_MspInit+0x88>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <HAL_CAN_MspInit+0x88>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	4a10      	ldr	r2, [pc, #64]	@ (80038f0 <HAL_CAN_MspInit+0x88>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038b6:	4b0e      	ldr	r3, [pc, #56]	@ (80038f0 <HAL_CAN_MspInit+0x88>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80038c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80038c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c8:	2302      	movs	r3, #2
 80038ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d0:	2303      	movs	r3, #3
 80038d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80038d4:	2309      	movs	r3, #9
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	4619      	mov	r1, r3
 80038de:	4805      	ldr	r0, [pc, #20]	@ (80038f4 <HAL_CAN_MspInit+0x8c>)
 80038e0:	f000 fe1e 	bl	8004520 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80038e4:	bf00      	nop
 80038e6:	3728      	adds	r7, #40	@ 0x28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40006400 	.word	0x40006400
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40020000 	.word	0x40020000

080038f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	@ 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 0314 	add.w	r3, r7, #20
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a19      	ldr	r2, [pc, #100]	@ (800397c <HAL_I2C_MspInit+0x84>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d12c      	bne.n	8003974 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	4b18      	ldr	r3, [pc, #96]	@ (8003980 <HAL_I2C_MspInit+0x88>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	4a17      	ldr	r2, [pc, #92]	@ (8003980 <HAL_I2C_MspInit+0x88>)
 8003924:	f043 0302 	orr.w	r3, r3, #2
 8003928:	6313      	str	r3, [r2, #48]	@ 0x30
 800392a:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <HAL_I2C_MspInit+0x88>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003936:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800393a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800393c:	2312      	movs	r3, #18
 800393e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003944:	2303      	movs	r3, #3
 8003946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003948:	2304      	movs	r3, #4
 800394a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	4619      	mov	r1, r3
 8003952:	480c      	ldr	r0, [pc, #48]	@ (8003984 <HAL_I2C_MspInit+0x8c>)
 8003954:	f000 fde4 	bl	8004520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	4b08      	ldr	r3, [pc, #32]	@ (8003980 <HAL_I2C_MspInit+0x88>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	4a07      	ldr	r2, [pc, #28]	@ (8003980 <HAL_I2C_MspInit+0x88>)
 8003962:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003966:	6413      	str	r3, [r2, #64]	@ 0x40
 8003968:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_I2C_MspInit+0x88>)
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003974:	bf00      	nop
 8003976:	3728      	adds	r7, #40	@ 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40005400 	.word	0x40005400
 8003980:	40023800 	.word	0x40023800
 8003984:	40020400 	.word	0x40020400

08003988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	@ 0x28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a19      	ldr	r2, [pc, #100]	@ (8003a0c <HAL_SPI_MspInit+0x84>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d12b      	bne.n	8003a02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	4b18      	ldr	r3, [pc, #96]	@ (8003a10 <HAL_SPI_MspInit+0x88>)
 80039b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b2:	4a17      	ldr	r2, [pc, #92]	@ (8003a10 <HAL_SPI_MspInit+0x88>)
 80039b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ba:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <HAL_SPI_MspInit+0x88>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <HAL_SPI_MspInit+0x88>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	4a10      	ldr	r2, [pc, #64]	@ (8003a10 <HAL_SPI_MspInit+0x88>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a10 <HAL_SPI_MspInit+0x88>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039e2:	23e0      	movs	r3, #224	@ 0xe0
 80039e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e6:	2302      	movs	r3, #2
 80039e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ee:	2303      	movs	r3, #3
 80039f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039f2:	2305      	movs	r3, #5
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f6:	f107 0314 	add.w	r3, r7, #20
 80039fa:	4619      	mov	r1, r3
 80039fc:	4805      	ldr	r0, [pc, #20]	@ (8003a14 <HAL_SPI_MspInit+0x8c>)
 80039fe:	f000 fd8f 	bl	8004520 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003a02:	bf00      	nop
 8003a04:	3728      	adds	r7, #40	@ 0x28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40013000 	.word	0x40013000
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40020000 	.word	0x40020000

08003a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	@ 0x28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a20:	f107 0314 	add.w	r3, r7, #20
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a19      	ldr	r2, [pc, #100]	@ (8003a9c <HAL_UART_MspInit+0x84>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d12b      	bne.n	8003a92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	4b18      	ldr	r3, [pc, #96]	@ (8003aa0 <HAL_UART_MspInit+0x88>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	4a17      	ldr	r2, [pc, #92]	@ (8003aa0 <HAL_UART_MspInit+0x88>)
 8003a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a4a:	4b15      	ldr	r3, [pc, #84]	@ (8003aa0 <HAL_UART_MspInit+0x88>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	4b11      	ldr	r3, [pc, #68]	@ (8003aa0 <HAL_UART_MspInit+0x88>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5e:	4a10      	ldr	r2, [pc, #64]	@ (8003aa0 <HAL_UART_MspInit+0x88>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a66:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa0 <HAL_UART_MspInit+0x88>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a72:	230c      	movs	r3, #12
 8003a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	2302      	movs	r3, #2
 8003a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a82:	2307      	movs	r3, #7
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a86:	f107 0314 	add.w	r3, r7, #20
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4805      	ldr	r0, [pc, #20]	@ (8003aa4 <HAL_UART_MspInit+0x8c>)
 8003a8e:	f000 fd47 	bl	8004520 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003a92:	bf00      	nop
 8003a94:	3728      	adds	r7, #40	@ 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40004400 	.word	0x40004400
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40020000 	.word	0x40020000

08003aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08c      	sub	sp, #48	@ 0x30
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	4b2e      	ldr	r3, [pc, #184]	@ (8003b78 <HAL_InitTick+0xd0>)
 8003abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b78 <HAL_InitTick+0xd0>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b78 <HAL_InitTick+0xd0>)
 8003aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ad4:	f107 020c 	add.w	r2, r7, #12
 8003ad8:	f107 0310 	add.w	r3, r7, #16
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 f942 	bl	8004d68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003ae4:	f001 f92c 	bl	8004d40 <HAL_RCC_GetPCLK2Freq>
 8003ae8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aec:	4a23      	ldr	r2, [pc, #140]	@ (8003b7c <HAL_InitTick+0xd4>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0c9b      	lsrs	r3, r3, #18
 8003af4:	3b01      	subs	r3, #1
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003af8:	4b21      	ldr	r3, [pc, #132]	@ (8003b80 <HAL_InitTick+0xd8>)
 8003afa:	4a22      	ldr	r2, [pc, #136]	@ (8003b84 <HAL_InitTick+0xdc>)
 8003afc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003afe:	4b20      	ldr	r3, [pc, #128]	@ (8003b80 <HAL_InitTick+0xd8>)
 8003b00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b06:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <HAL_InitTick+0xd8>)
 8003b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003b80 <HAL_InitTick+0xd8>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b12:	4b1b      	ldr	r3, [pc, #108]	@ (8003b80 <HAL_InitTick+0xd8>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b18:	4b19      	ldr	r3, [pc, #100]	@ (8003b80 <HAL_InitTick+0xd8>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003b1e:	4818      	ldr	r0, [pc, #96]	@ (8003b80 <HAL_InitTick+0xd8>)
 8003b20:	f002 fbf4 	bl	800630c <HAL_TIM_Base_Init>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d11b      	bne.n	8003b6a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003b32:	4813      	ldr	r0, [pc, #76]	@ (8003b80 <HAL_InitTick+0xd8>)
 8003b34:	f002 fc44 	bl	80063c0 <HAL_TIM_Base_Start_IT>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d111      	bne.n	8003b6a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b46:	2019      	movs	r0, #25
 8003b48:	f000 fcdc 	bl	8004504 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	d808      	bhi.n	8003b64 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003b52:	2200      	movs	r2, #0
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	2019      	movs	r0, #25
 8003b58:	f000 fcb8 	bl	80044cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b88 <HAL_InitTick+0xe0>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e002      	b.n	8003b6a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3730      	adds	r7, #48	@ 0x30
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	431bde83 	.word	0x431bde83
 8003b80:	2000058c 	.word	0x2000058c
 8003b84:	40010000 	.word	0x40010000
 8003b88:	20000048 	.word	0x20000048

08003b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b90:	bf00      	nop
 8003b92:	e7fd      	b.n	8003b90 <NMI_Handler+0x4>

08003b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <HardFault_Handler+0x4>

08003b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <MemManage_Handler+0x4>

08003ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ba8:	bf00      	nop
 8003baa:	e7fd      	b.n	8003ba8 <BusFault_Handler+0x4>

08003bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bb0:	bf00      	nop
 8003bb2:	e7fd      	b.n	8003bb0 <UsageFault_Handler+0x4>

08003bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bf0:	4802      	ldr	r0, [pc, #8]	@ (8003bfc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003bf2:	f002 fc55 	bl	80064a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	2000058c 	.word	0x2000058c

08003c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return 1;
 8003c04:	2301      	movs	r3, #1
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <_kill>:

int _kill(int pid, int sig)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c1a:	f003 ff5b 	bl	8007ad4 <__errno>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2216      	movs	r2, #22
 8003c22:	601a      	str	r2, [r3, #0]
  return -1;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_exit>:

void _exit (int status)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c38:	f04f 31ff 	mov.w	r1, #4294967295
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ffe7 	bl	8003c10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c42:	bf00      	nop
 8003c44:	e7fd      	b.n	8003c42 <_exit+0x12>

08003c46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b086      	sub	sp, #24
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	e00a      	b.n	8003c6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c58:	f3af 8000 	nop.w
 8003c5c:	4601      	mov	r1, r0
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	60ba      	str	r2, [r7, #8]
 8003c64:	b2ca      	uxtb	r2, r1
 8003c66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	dbf0      	blt.n	8003c58 <_read+0x12>
  }

  return len;
 8003c76:	687b      	ldr	r3, [r7, #4]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e009      	b.n	8003ca6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	60ba      	str	r2, [r7, #8]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	dbf1      	blt.n	8003c92 <_write+0x12>
  }
  return len;
 8003cae:	687b      	ldr	r3, [r7, #4]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <_close>:

int _close(int file)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ce0:	605a      	str	r2, [r3, #4]
  return 0;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <_isatty>:

int _isatty(int file)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cf8:	2301      	movs	r3, #1
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b085      	sub	sp, #20
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d28:	4a14      	ldr	r2, [pc, #80]	@ (8003d7c <_sbrk+0x5c>)
 8003d2a:	4b15      	ldr	r3, [pc, #84]	@ (8003d80 <_sbrk+0x60>)
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d34:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <_sbrk+0x64>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d3c:	4b11      	ldr	r3, [pc, #68]	@ (8003d84 <_sbrk+0x64>)
 8003d3e:	4a12      	ldr	r2, [pc, #72]	@ (8003d88 <_sbrk+0x68>)
 8003d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d42:	4b10      	ldr	r3, [pc, #64]	@ (8003d84 <_sbrk+0x64>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d207      	bcs.n	8003d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d50:	f003 fec0 	bl	8007ad4 <__errno>
 8003d54:	4603      	mov	r3, r0
 8003d56:	220c      	movs	r2, #12
 8003d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5e:	e009      	b.n	8003d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d60:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <_sbrk+0x64>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d66:	4b07      	ldr	r3, [pc, #28]	@ (8003d84 <_sbrk+0x64>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	4a05      	ldr	r2, [pc, #20]	@ (8003d84 <_sbrk+0x64>)
 8003d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d72:	68fb      	ldr	r3, [r7, #12]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20020000 	.word	0x20020000
 8003d80:	00000400 	.word	0x00000400
 8003d84:	200005d4 	.word	0x200005d4
 8003d88:	20000728 	.word	0x20000728

08003d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d90:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <SystemInit+0x20>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	4a05      	ldr	r2, [pc, #20]	@ (8003dac <SystemInit+0x20>)
 8003d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003db0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003de8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003db4:	480d      	ldr	r0, [pc, #52]	@ (8003dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003db6:	490e      	ldr	r1, [pc, #56]	@ (8003df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003db8:	4a0e      	ldr	r2, [pc, #56]	@ (8003df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dbc:	e002      	b.n	8003dc4 <LoopCopyDataInit>

08003dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dc2:	3304      	adds	r3, #4

08003dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dc8:	d3f9      	bcc.n	8003dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dca:	4a0b      	ldr	r2, [pc, #44]	@ (8003df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003dcc:	4c0b      	ldr	r4, [pc, #44]	@ (8003dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dd0:	e001      	b.n	8003dd6 <LoopFillZerobss>

08003dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dd4:	3204      	adds	r2, #4

08003dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dd8:	d3fb      	bcc.n	8003dd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003dda:	f7ff ffd7 	bl	8003d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dde:	f003 fe7f 	bl	8007ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003de2:	f7ff fafd 	bl	80033e0 <main>
  bx  lr    
 8003de6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003df0:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003df4:	08009ed8 	.word	0x08009ed8
  ldr r2, =_sbss
 8003df8:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003dfc:	20000728 	.word	0x20000728

08003e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e00:	e7fe      	b.n	8003e00 <ADC_IRQHandler>
	...

08003e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e08:	4b0e      	ldr	r3, [pc, #56]	@ (8003e44 <HAL_Init+0x40>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e44 <HAL_Init+0x40>)
 8003e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e14:	4b0b      	ldr	r3, [pc, #44]	@ (8003e44 <HAL_Init+0x40>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a0a      	ldr	r2, [pc, #40]	@ (8003e44 <HAL_Init+0x40>)
 8003e1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e20:	4b08      	ldr	r3, [pc, #32]	@ (8003e44 <HAL_Init+0x40>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a07      	ldr	r2, [pc, #28]	@ (8003e44 <HAL_Init+0x40>)
 8003e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e2c:	2003      	movs	r0, #3
 8003e2e:	f000 fb42 	bl	80044b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e32:	200f      	movs	r0, #15
 8003e34:	f7ff fe38 	bl	8003aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e38:	f7ff fcee 	bl	8003818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023c00 	.word	0x40023c00

08003e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e4c:	4b06      	ldr	r3, [pc, #24]	@ (8003e68 <HAL_IncTick+0x20>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <HAL_IncTick+0x24>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4413      	add	r3, r2
 8003e58:	4a04      	ldr	r2, [pc, #16]	@ (8003e6c <HAL_IncTick+0x24>)
 8003e5a:	6013      	str	r3, [r2, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	2000004c 	.word	0x2000004c
 8003e6c:	200005d8 	.word	0x200005d8

08003e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return uwTick;
 8003e74:	4b03      	ldr	r3, [pc, #12]	@ (8003e84 <HAL_GetTick+0x14>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	200005d8 	.word	0x200005d8

08003e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e90:	f7ff ffee 	bl	8003e70 <HAL_GetTick>
 8003e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d005      	beq.n	8003eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <HAL_Delay+0x44>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003eae:	bf00      	nop
 8003eb0:	f7ff ffde 	bl	8003e70 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d8f7      	bhi.n	8003eb0 <HAL_Delay+0x28>
  {
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	2000004c 	.word	0x2000004c

08003ed0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0ed      	b.n	80040be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fcba 	bl	8003868 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f04:	f7ff ffb4 	bl	8003e70 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f0a:	e012      	b.n	8003f32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f0c:	f7ff ffb0 	bl	8003e70 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b0a      	cmp	r3, #10
 8003f18:	d90b      	bls.n	8003f32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2205      	movs	r2, #5
 8003f2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0c5      	b.n	80040be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0e5      	beq.n	8003f0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0202 	bic.w	r2, r2, #2
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f50:	f7ff ff8e 	bl	8003e70 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f56:	e012      	b.n	8003f7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f58:	f7ff ff8a 	bl	8003e70 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b0a      	cmp	r3, #10
 8003f64:	d90b      	bls.n	8003f7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2205      	movs	r2, #5
 8003f76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e09f      	b.n	80040be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	7e1b      	ldrb	r3, [r3, #24]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d108      	bne.n	8003fa6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e007      	b.n	8003fb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	7e5b      	ldrb	r3, [r3, #25]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d108      	bne.n	8003fd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e007      	b.n	8003fe0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	7e9b      	ldrb	r3, [r3, #26]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d108      	bne.n	8003ffa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0220 	orr.w	r2, r2, #32
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e007      	b.n	800400a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0220 	bic.w	r2, r2, #32
 8004008:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7edb      	ldrb	r3, [r3, #27]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d108      	bne.n	8004024 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0210 	bic.w	r2, r2, #16
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e007      	b.n	8004034 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0210 	orr.w	r2, r2, #16
 8004032:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	7f1b      	ldrb	r3, [r3, #28]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d108      	bne.n	800404e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0208 	orr.w	r2, r2, #8
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e007      	b.n	800405e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0208 	bic.w	r2, r2, #8
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	7f5b      	ldrb	r3, [r3, #29]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d108      	bne.n	8004078 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0204 	orr.w	r2, r2, #4
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e007      	b.n	8004088 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	ea42 0103 	orr.w	r1, r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	1e5a      	subs	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d003      	beq.n	80040ee <HAL_CAN_ConfigFilter+0x26>
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	f040 80be 	bne.w	800426a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80040ee:	4b65      	ldr	r3, [pc, #404]	@ (8004284 <HAL_CAN_ConfigFilter+0x1bc>)
 80040f0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80040f8:	f043 0201 	orr.w	r2, r3, #1
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004108:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	431a      	orrs	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	2201      	movs	r2, #1
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	43db      	mvns	r3, r3
 8004140:	401a      	ands	r2, r3
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d123      	bne.n	8004198 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43db      	mvns	r3, r3
 800415a:	401a      	ands	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004172:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	3248      	adds	r2, #72	@ 0x48
 8004178:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800418c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800418e:	6979      	ldr	r1, [r7, #20]
 8004190:	3348      	adds	r3, #72	@ 0x48
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	440b      	add	r3, r1
 8004196:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d122      	bne.n	80041e6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80041c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	3248      	adds	r2, #72	@ 0x48
 80041c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041dc:	6979      	ldr	r1, [r7, #20]
 80041de:	3348      	adds	r3, #72	@ 0x48
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	440b      	add	r3, r1
 80041e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	401a      	ands	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004200:	e007      	b.n	8004212 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	431a      	orrs	r2, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	43db      	mvns	r3, r3
 8004224:	401a      	ands	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800422c:	e007      	b.n	800423e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	431a      	orrs	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d107      	bne.n	8004256 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	431a      	orrs	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800425c:	f023 0201 	bic.w	r2, r3, #1
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	e006      	b.n	8004278 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40006400 	.word	0x40006400

08004288 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d12e      	bne.n	80042fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042b4:	f7ff fddc 	bl	8003e70 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80042ba:	e012      	b.n	80042e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042bc:	f7ff fdd8 	bl	8003e70 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b0a      	cmp	r3, #10
 80042c8:	d90b      	bls.n	80042e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2205      	movs	r2, #5
 80042da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e012      	b.n	8004308 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e5      	bne.n	80042bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	e006      	b.n	8004308 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
  }
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004320:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d002      	beq.n	800432e <HAL_CAN_ActivateNotification+0x1e>
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d109      	bne.n	8004342 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6959      	ldr	r1, [r3, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e006      	b.n	8004350 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
  }
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <__NVIC_SetPriorityGrouping+0x44>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004378:	4013      	ands	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004384:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800438c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800438e:	4a04      	ldr	r2, [pc, #16]	@ (80043a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	60d3      	str	r3, [r2, #12]
}
 8004394:	bf00      	nop
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043a8:	4b04      	ldr	r3, [pc, #16]	@ (80043bc <__NVIC_GetPriorityGrouping+0x18>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	0a1b      	lsrs	r3, r3, #8
 80043ae:	f003 0307 	and.w	r3, r3, #7
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	db0b      	blt.n	80043ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	f003 021f 	and.w	r2, r3, #31
 80043d8:	4907      	ldr	r1, [pc, #28]	@ (80043f8 <__NVIC_EnableIRQ+0x38>)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2001      	movs	r0, #1
 80043e2:	fa00 f202 	lsl.w	r2, r0, r2
 80043e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	e000e100 	.word	0xe000e100

080043fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	6039      	str	r1, [r7, #0]
 8004406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440c:	2b00      	cmp	r3, #0
 800440e:	db0a      	blt.n	8004426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	490c      	ldr	r1, [pc, #48]	@ (8004448 <__NVIC_SetPriority+0x4c>)
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	0112      	lsls	r2, r2, #4
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	440b      	add	r3, r1
 8004420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004424:	e00a      	b.n	800443c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	4908      	ldr	r1, [pc, #32]	@ (800444c <__NVIC_SetPriority+0x50>)
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	3b04      	subs	r3, #4
 8004434:	0112      	lsls	r2, r2, #4
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	440b      	add	r3, r1
 800443a:	761a      	strb	r2, [r3, #24]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	e000e100 	.word	0xe000e100
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	@ 0x24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f1c3 0307 	rsb	r3, r3, #7
 800446a:	2b04      	cmp	r3, #4
 800446c:	bf28      	it	cs
 800446e:	2304      	movcs	r3, #4
 8004470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3304      	adds	r3, #4
 8004476:	2b06      	cmp	r3, #6
 8004478:	d902      	bls.n	8004480 <NVIC_EncodePriority+0x30>
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3b03      	subs	r3, #3
 800447e:	e000      	b.n	8004482 <NVIC_EncodePriority+0x32>
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004484:	f04f 32ff 	mov.w	r2, #4294967295
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43da      	mvns	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	401a      	ands	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004498:	f04f 31ff 	mov.w	r1, #4294967295
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	43d9      	mvns	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a8:	4313      	orrs	r3, r2
         );
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	@ 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff ff4c 	bl	800435c <__NVIC_SetPriorityGrouping>
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044de:	f7ff ff61 	bl	80043a4 <__NVIC_GetPriorityGrouping>
 80044e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	6978      	ldr	r0, [r7, #20]
 80044ea:	f7ff ffb1 	bl	8004450 <NVIC_EncodePriority>
 80044ee:	4602      	mov	r2, r0
 80044f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ff80 	bl	80043fc <__NVIC_SetPriority>
}
 80044fc:	bf00      	nop
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff54 	bl	80043c0 <__NVIC_EnableIRQ>
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	@ 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	e165      	b.n	8004808 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800453c:	2201      	movs	r2, #1
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	429a      	cmp	r2, r3
 8004556:	f040 8154 	bne.w	8004802 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d005      	beq.n	8004572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800456e:	2b02      	cmp	r3, #2
 8004570:	d130      	bne.n	80045d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	2203      	movs	r2, #3
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4013      	ands	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045a8:	2201      	movs	r2, #1
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 0201 	and.w	r2, r3, #1
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d017      	beq.n	8004610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	2203      	movs	r2, #3
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d123      	bne.n	8004664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	08da      	lsrs	r2, r3, #3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3208      	adds	r2, #8
 8004624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	220f      	movs	r2, #15
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4313      	orrs	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	08da      	lsrs	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3208      	adds	r2, #8
 800465e:	69b9      	ldr	r1, [r7, #24]
 8004660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	2203      	movs	r2, #3
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 0203 	and.w	r2, r3, #3
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80ae 	beq.w	8004802 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004820 <HAL_GPIO_Init+0x300>)
 80046ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004820 <HAL_GPIO_Init+0x300>)
 80046b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80046b6:	4b5a      	ldr	r3, [pc, #360]	@ (8004820 <HAL_GPIO_Init+0x300>)
 80046b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046c2:	4a58      	ldr	r2, [pc, #352]	@ (8004824 <HAL_GPIO_Init+0x304>)
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	3302      	adds	r3, #2
 80046ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	220f      	movs	r2, #15
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004828 <HAL_GPIO_Init+0x308>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d025      	beq.n	800473a <HAL_GPIO_Init+0x21a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4e      	ldr	r2, [pc, #312]	@ (800482c <HAL_GPIO_Init+0x30c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01f      	beq.n	8004736 <HAL_GPIO_Init+0x216>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004830 <HAL_GPIO_Init+0x310>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d019      	beq.n	8004732 <HAL_GPIO_Init+0x212>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a4c      	ldr	r2, [pc, #304]	@ (8004834 <HAL_GPIO_Init+0x314>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d013      	beq.n	800472e <HAL_GPIO_Init+0x20e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a4b      	ldr	r2, [pc, #300]	@ (8004838 <HAL_GPIO_Init+0x318>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00d      	beq.n	800472a <HAL_GPIO_Init+0x20a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a4a      	ldr	r2, [pc, #296]	@ (800483c <HAL_GPIO_Init+0x31c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <HAL_GPIO_Init+0x206>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a49      	ldr	r2, [pc, #292]	@ (8004840 <HAL_GPIO_Init+0x320>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d101      	bne.n	8004722 <HAL_GPIO_Init+0x202>
 800471e:	2306      	movs	r3, #6
 8004720:	e00c      	b.n	800473c <HAL_GPIO_Init+0x21c>
 8004722:	2307      	movs	r3, #7
 8004724:	e00a      	b.n	800473c <HAL_GPIO_Init+0x21c>
 8004726:	2305      	movs	r3, #5
 8004728:	e008      	b.n	800473c <HAL_GPIO_Init+0x21c>
 800472a:	2304      	movs	r3, #4
 800472c:	e006      	b.n	800473c <HAL_GPIO_Init+0x21c>
 800472e:	2303      	movs	r3, #3
 8004730:	e004      	b.n	800473c <HAL_GPIO_Init+0x21c>
 8004732:	2302      	movs	r3, #2
 8004734:	e002      	b.n	800473c <HAL_GPIO_Init+0x21c>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_GPIO_Init+0x21c>
 800473a:	2300      	movs	r3, #0
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	f002 0203 	and.w	r2, r2, #3
 8004742:	0092      	lsls	r2, r2, #2
 8004744:	4093      	lsls	r3, r2
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800474c:	4935      	ldr	r1, [pc, #212]	@ (8004824 <HAL_GPIO_Init+0x304>)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	089b      	lsrs	r3, r3, #2
 8004752:	3302      	adds	r3, #2
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800475a:	4b3a      	ldr	r3, [pc, #232]	@ (8004844 <HAL_GPIO_Init+0x324>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800477e:	4a31      	ldr	r2, [pc, #196]	@ (8004844 <HAL_GPIO_Init+0x324>)
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004784:	4b2f      	ldr	r3, [pc, #188]	@ (8004844 <HAL_GPIO_Init+0x324>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047a8:	4a26      	ldr	r2, [pc, #152]	@ (8004844 <HAL_GPIO_Init+0x324>)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047ae:	4b25      	ldr	r3, [pc, #148]	@ (8004844 <HAL_GPIO_Init+0x324>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004844 <HAL_GPIO_Init+0x324>)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004844 <HAL_GPIO_Init+0x324>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047fc:	4a11      	ldr	r2, [pc, #68]	@ (8004844 <HAL_GPIO_Init+0x324>)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3301      	adds	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	2b0f      	cmp	r3, #15
 800480c:	f67f ae96 	bls.w	800453c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	3724      	adds	r7, #36	@ 0x24
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
 8004824:	40013800 	.word	0x40013800
 8004828:	40020000 	.word	0x40020000
 800482c:	40020400 	.word	0x40020400
 8004830:	40020800 	.word	0x40020800
 8004834:	40020c00 	.word	0x40020c00
 8004838:	40021000 	.word	0x40021000
 800483c:	40021400 	.word	0x40021400
 8004840:	40021800 	.word	0x40021800
 8004844:	40013c00 	.word	0x40013c00

08004848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	4013      	ands	r3, r2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
 8004864:	e001      	b.n	800486a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	807b      	strh	r3, [r7, #2]
 8004884:	4613      	mov	r3, r2
 8004886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004888:	787b      	ldrb	r3, [r7, #1]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004894:	e003      	b.n	800489e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004896:	887b      	ldrh	r3, [r7, #2]
 8004898:	041a      	lsls	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	619a      	str	r2, [r3, #24]
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e12b      	b.n	8004b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff f810 	bl	80038f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2224      	movs	r2, #36	@ 0x24
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0201 	bic.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800490e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004910:	f000 fa02 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 8004914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4a81      	ldr	r2, [pc, #516]	@ (8004b20 <HAL_I2C_Init+0x274>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d807      	bhi.n	8004930 <HAL_I2C_Init+0x84>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4a80      	ldr	r2, [pc, #512]	@ (8004b24 <HAL_I2C_Init+0x278>)
 8004924:	4293      	cmp	r3, r2
 8004926:	bf94      	ite	ls
 8004928:	2301      	movls	r3, #1
 800492a:	2300      	movhi	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	e006      	b.n	800493e <HAL_I2C_Init+0x92>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a7d      	ldr	r2, [pc, #500]	@ (8004b28 <HAL_I2C_Init+0x27c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	bf94      	ite	ls
 8004938:	2301      	movls	r3, #1
 800493a:	2300      	movhi	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e0e7      	b.n	8004b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a78      	ldr	r2, [pc, #480]	@ (8004b2c <HAL_I2C_Init+0x280>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	0c9b      	lsrs	r3, r3, #18
 8004950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a6a      	ldr	r2, [pc, #424]	@ (8004b20 <HAL_I2C_Init+0x274>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d802      	bhi.n	8004980 <HAL_I2C_Init+0xd4>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	3301      	adds	r3, #1
 800497e:	e009      	b.n	8004994 <HAL_I2C_Init+0xe8>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	4a69      	ldr	r2, [pc, #420]	@ (8004b30 <HAL_I2C_Init+0x284>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	099b      	lsrs	r3, r3, #6
 8004992:	3301      	adds	r3, #1
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	430b      	orrs	r3, r1
 800499a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80049a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	495c      	ldr	r1, [pc, #368]	@ (8004b20 <HAL_I2C_Init+0x274>)
 80049b0:	428b      	cmp	r3, r1
 80049b2:	d819      	bhi.n	80049e8 <HAL_I2C_Init+0x13c>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1e59      	subs	r1, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	fbb1 f3f3 	udiv	r3, r1, r3
 80049c2:	1c59      	adds	r1, r3, #1
 80049c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049c8:	400b      	ands	r3, r1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_I2C_Init+0x138>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1e59      	subs	r1, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80049dc:	3301      	adds	r3, #1
 80049de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e2:	e051      	b.n	8004a88 <HAL_I2C_Init+0x1dc>
 80049e4:	2304      	movs	r3, #4
 80049e6:	e04f      	b.n	8004a88 <HAL_I2C_Init+0x1dc>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d111      	bne.n	8004a14 <HAL_I2C_Init+0x168>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e58      	subs	r0, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	440b      	add	r3, r1
 80049fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf0c      	ite	eq
 8004a0c:	2301      	moveq	r3, #1
 8004a0e:	2300      	movne	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	e012      	b.n	8004a3a <HAL_I2C_Init+0x18e>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	1e58      	subs	r0, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	0099      	lsls	r1, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_I2C_Init+0x196>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e022      	b.n	8004a88 <HAL_I2C_Init+0x1dc>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10e      	bne.n	8004a68 <HAL_I2C_Init+0x1bc>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1e58      	subs	r0, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	440b      	add	r3, r1
 8004a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a66:	e00f      	b.n	8004a88 <HAL_I2C_Init+0x1dc>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1e58      	subs	r0, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6859      	ldr	r1, [r3, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	0099      	lsls	r1, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	6809      	ldr	r1, [r1, #0]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69da      	ldr	r2, [r3, #28]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ab6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6911      	ldr	r1, [r2, #16]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68d2      	ldr	r2, [r2, #12]
 8004ac2:	4311      	orrs	r1, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	000186a0 	.word	0x000186a0
 8004b24:	001e847f 	.word	0x001e847f
 8004b28:	003d08ff 	.word	0x003d08ff
 8004b2c:	431bde83 	.word	0x431bde83
 8004b30:	10624dd3 	.word	0x10624dd3

08004b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0cc      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b48:	4b68      	ldr	r3, [pc, #416]	@ (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d90c      	bls.n	8004b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b65      	ldr	r3, [pc, #404]	@ (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b63      	ldr	r3, [pc, #396]	@ (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0b8      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d020      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b88:	4b59      	ldr	r3, [pc, #356]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4a58      	ldr	r2, [pc, #352]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba0:	4b53      	ldr	r3, [pc, #332]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4a52      	ldr	r2, [pc, #328]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bac:	4b50      	ldr	r3, [pc, #320]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	494d      	ldr	r1, [pc, #308]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d044      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	4b47      	ldr	r3, [pc, #284]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d119      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e07f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d003      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e06f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c02:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e067      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c12:	4b37      	ldr	r3, [pc, #220]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f023 0203 	bic.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	4934      	ldr	r1, [pc, #208]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c24:	f7ff f924 	bl	8003e70 <HAL_GetTick>
 8004c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c2c:	f7ff f920 	bl	8003e70 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e04f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c42:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 020c 	and.w	r2, r3, #12
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d1eb      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c54:	4b25      	ldr	r3, [pc, #148]	@ (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d20c      	bcs.n	8004c7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b22      	ldr	r3, [pc, #136]	@ (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6a:	4b20      	ldr	r3, [pc, #128]	@ (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e032      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c88:	4b19      	ldr	r3, [pc, #100]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	4916      	ldr	r1, [pc, #88]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca6:	4b12      	ldr	r3, [pc, #72]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	490e      	ldr	r1, [pc, #56]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cba:	f000 f887 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	490a      	ldr	r1, [pc, #40]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004ccc:	5ccb      	ldrb	r3, [r1, r3]
 8004cce:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd2:	4a09      	ldr	r2, [pc, #36]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cd6:	4b09      	ldr	r3, [pc, #36]	@ (8004cfc <HAL_RCC_ClockConfig+0x1c8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe fee4 	bl	8003aa8 <HAL_InitTick>

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40023c00 	.word	0x40023c00
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	08009b40 	.word	0x08009b40
 8004cf8:	20000044 	.word	0x20000044
 8004cfc:	20000048 	.word	0x20000048

08004d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d04:	4b03      	ldr	r3, [pc, #12]	@ (8004d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d06:	681b      	ldr	r3, [r3, #0]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000044 	.word	0x20000044

08004d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d1c:	f7ff fff0 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b05      	ldr	r3, [pc, #20]	@ (8004d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	0a9b      	lsrs	r3, r3, #10
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	4903      	ldr	r1, [pc, #12]	@ (8004d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d2e:	5ccb      	ldrb	r3, [r1, r3]
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	08009b50 	.word	0x08009b50

08004d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d44:	f7ff ffdc 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	0b5b      	lsrs	r3, r3, #13
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	4903      	ldr	r1, [pc, #12]	@ (8004d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d56:	5ccb      	ldrb	r3, [r1, r3]
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40023800 	.word	0x40023800
 8004d64:	08009b50 	.word	0x08009b50

08004d68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	220f      	movs	r2, #15
 8004d76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d78:	4b12      	ldr	r3, [pc, #72]	@ (8004dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 0203 	and.w	r2, r3, #3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d84:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d90:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d9c:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	08db      	lsrs	r3, r3, #3
 8004da2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004daa:	4b07      	ldr	r3, [pc, #28]	@ (8004dc8 <HAL_RCC_GetClockConfig+0x60>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 020f 	and.w	r2, r3, #15
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	601a      	str	r2, [r3, #0]
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40023c00 	.word	0x40023c00

08004dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd0:	b0ae      	sub	sp, #184	@ 0xb8
 8004dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df2:	4bcb      	ldr	r3, [pc, #812]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x354>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b0c      	cmp	r3, #12
 8004dfc:	f200 8206 	bhi.w	800520c <HAL_RCC_GetSysClockFreq+0x440>
 8004e00:	a201      	add	r2, pc, #4	@ (adr r2, 8004e08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004e3d 	.word	0x08004e3d
 8004e0c:	0800520d 	.word	0x0800520d
 8004e10:	0800520d 	.word	0x0800520d
 8004e14:	0800520d 	.word	0x0800520d
 8004e18:	08004e45 	.word	0x08004e45
 8004e1c:	0800520d 	.word	0x0800520d
 8004e20:	0800520d 	.word	0x0800520d
 8004e24:	0800520d 	.word	0x0800520d
 8004e28:	08004e4d 	.word	0x08004e4d
 8004e2c:	0800520d 	.word	0x0800520d
 8004e30:	0800520d 	.word	0x0800520d
 8004e34:	0800520d 	.word	0x0800520d
 8004e38:	0800503d 	.word	0x0800503d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e3c:	4bb9      	ldr	r3, [pc, #740]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e42:	e1e7      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e44:	4bb8      	ldr	r3, [pc, #736]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e4a:	e1e3      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e4c:	4bb4      	ldr	r3, [pc, #720]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e58:	4bb1      	ldr	r3, [pc, #708]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d071      	beq.n	8004f48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e64:	4bae      	ldr	r3, [pc, #696]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	099b      	lsrs	r3, r3, #6
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e70:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e8a:	4622      	mov	r2, r4
 8004e8c:	462b      	mov	r3, r5
 8004e8e:	f04f 0000 	mov.w	r0, #0
 8004e92:	f04f 0100 	mov.w	r1, #0
 8004e96:	0159      	lsls	r1, r3, #5
 8004e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e9c:	0150      	lsls	r0, r2, #5
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	1a51      	subs	r1, r2, r1
 8004ea6:	6439      	str	r1, [r7, #64]	@ 0x40
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8004eae:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	018b      	lsls	r3, r1, #6
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	018a      	lsls	r2, r1, #6
 8004eca:	4641      	mov	r1, r8
 8004ecc:	1a51      	subs	r1, r2, r1
 8004ece:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	00cb      	lsls	r3, r1, #3
 8004ee8:	4641      	mov	r1, r8
 8004eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eee:	4641      	mov	r1, r8
 8004ef0:	00ca      	lsls	r2, r1, #3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4622      	mov	r2, r4
 8004efa:	189b      	adds	r3, r3, r2
 8004efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004efe:	462b      	mov	r3, r5
 8004f00:	460a      	mov	r2, r1
 8004f02:	eb42 0303 	adc.w	r3, r2, r3
 8004f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f14:	4629      	mov	r1, r5
 8004f16:	024b      	lsls	r3, r1, #9
 8004f18:	4621      	mov	r1, r4
 8004f1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f1e:	4621      	mov	r1, r4
 8004f20:	024a      	lsls	r2, r1, #9
 8004f22:	4610      	mov	r0, r2
 8004f24:	4619      	mov	r1, r3
 8004f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004f38:	f7fb fea6 	bl	8000c88 <__aeabi_uldivmod>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4613      	mov	r3, r2
 8004f42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f46:	e067      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f48:	4b75      	ldr	r3, [pc, #468]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	099b      	lsrs	r3, r3, #6
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f54:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f62:	2300      	movs	r3, #0
 8004f64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	462b      	mov	r3, r5
 8004f6e:	f04f 0000 	mov.w	r0, #0
 8004f72:	f04f 0100 	mov.w	r1, #0
 8004f76:	0159      	lsls	r1, r3, #5
 8004f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f7c:	0150      	lsls	r0, r2, #5
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4621      	mov	r1, r4
 8004f84:	1a51      	subs	r1, r2, r1
 8004f86:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f88:	4629      	mov	r1, r5
 8004f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	018b      	lsls	r3, r1, #6
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	018a      	lsls	r2, r1, #6
 8004faa:	4641      	mov	r1, r8
 8004fac:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fc2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fca:	4692      	mov	sl, r2
 8004fcc:	469b      	mov	fp, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	eb1a 0303 	adds.w	r3, sl, r3
 8004fd4:	623b      	str	r3, [r7, #32]
 8004fd6:	462b      	mov	r3, r5
 8004fd8:	eb4b 0303 	adc.w	r3, fp, r3
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004fea:	4629      	mov	r1, r5
 8004fec:	028b      	lsls	r3, r1, #10
 8004fee:	4621      	mov	r1, r4
 8004ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	028a      	lsls	r2, r1, #10
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005000:	2200      	movs	r2, #0
 8005002:	673b      	str	r3, [r7, #112]	@ 0x70
 8005004:	677a      	str	r2, [r7, #116]	@ 0x74
 8005006:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800500a:	f7fb fe3d 	bl	8000c88 <__aeabi_uldivmod>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4613      	mov	r3, r2
 8005014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005018:	4b41      	ldr	r3, [pc, #260]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x354>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	3301      	adds	r3, #1
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800502a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800502e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005032:	fbb2 f3f3 	udiv	r3, r2, r3
 8005036:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800503a:	e0eb      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800503c:	4b38      	ldr	r3, [pc, #224]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x354>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005044:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005048:	4b35      	ldr	r3, [pc, #212]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x354>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d06b      	beq.n	800512c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005054:	4b32      	ldr	r3, [pc, #200]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x354>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	099b      	lsrs	r3, r3, #6
 800505a:	2200      	movs	r2, #0
 800505c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800505e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005060:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005066:	663b      	str	r3, [r7, #96]	@ 0x60
 8005068:	2300      	movs	r3, #0
 800506a:	667b      	str	r3, [r7, #100]	@ 0x64
 800506c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005070:	4622      	mov	r2, r4
 8005072:	462b      	mov	r3, r5
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	0159      	lsls	r1, r3, #5
 800507e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005082:	0150      	lsls	r0, r2, #5
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4621      	mov	r1, r4
 800508a:	1a51      	subs	r1, r2, r1
 800508c:	61b9      	str	r1, [r7, #24]
 800508e:	4629      	mov	r1, r5
 8005090:	eb63 0301 	sbc.w	r3, r3, r1
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80050a2:	4659      	mov	r1, fp
 80050a4:	018b      	lsls	r3, r1, #6
 80050a6:	4651      	mov	r1, sl
 80050a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050ac:	4651      	mov	r1, sl
 80050ae:	018a      	lsls	r2, r1, #6
 80050b0:	4651      	mov	r1, sl
 80050b2:	ebb2 0801 	subs.w	r8, r2, r1
 80050b6:	4659      	mov	r1, fp
 80050b8:	eb63 0901 	sbc.w	r9, r3, r1
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050d0:	4690      	mov	r8, r2
 80050d2:	4699      	mov	r9, r3
 80050d4:	4623      	mov	r3, r4
 80050d6:	eb18 0303 	adds.w	r3, r8, r3
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	462b      	mov	r3, r5
 80050de:	eb49 0303 	adc.w	r3, r9, r3
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80050f0:	4629      	mov	r1, r5
 80050f2:	024b      	lsls	r3, r1, #9
 80050f4:	4621      	mov	r1, r4
 80050f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050fa:	4621      	mov	r1, r4
 80050fc:	024a      	lsls	r2, r1, #9
 80050fe:	4610      	mov	r0, r2
 8005100:	4619      	mov	r1, r3
 8005102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005106:	2200      	movs	r2, #0
 8005108:	65bb      	str	r3, [r7, #88]	@ 0x58
 800510a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800510c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005110:	f7fb fdba 	bl	8000c88 <__aeabi_uldivmod>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4613      	mov	r3, r2
 800511a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800511e:	e065      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x420>
 8005120:	40023800 	.word	0x40023800
 8005124:	00f42400 	.word	0x00f42400
 8005128:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800512c:	4b3d      	ldr	r3, [pc, #244]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x458>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	099b      	lsrs	r3, r3, #6
 8005132:	2200      	movs	r2, #0
 8005134:	4618      	mov	r0, r3
 8005136:	4611      	mov	r1, r2
 8005138:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800513c:	653b      	str	r3, [r7, #80]	@ 0x50
 800513e:	2300      	movs	r3, #0
 8005140:	657b      	str	r3, [r7, #84]	@ 0x54
 8005142:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005146:	4642      	mov	r2, r8
 8005148:	464b      	mov	r3, r9
 800514a:	f04f 0000 	mov.w	r0, #0
 800514e:	f04f 0100 	mov.w	r1, #0
 8005152:	0159      	lsls	r1, r3, #5
 8005154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005158:	0150      	lsls	r0, r2, #5
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4641      	mov	r1, r8
 8005160:	1a51      	subs	r1, r2, r1
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	4649      	mov	r1, r9
 8005166:	eb63 0301 	sbc.w	r3, r3, r1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005178:	4659      	mov	r1, fp
 800517a:	018b      	lsls	r3, r1, #6
 800517c:	4651      	mov	r1, sl
 800517e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005182:	4651      	mov	r1, sl
 8005184:	018a      	lsls	r2, r1, #6
 8005186:	4651      	mov	r1, sl
 8005188:	1a54      	subs	r4, r2, r1
 800518a:	4659      	mov	r1, fp
 800518c:	eb63 0501 	sbc.w	r5, r3, r1
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	00eb      	lsls	r3, r5, #3
 800519a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800519e:	00e2      	lsls	r2, r4, #3
 80051a0:	4614      	mov	r4, r2
 80051a2:	461d      	mov	r5, r3
 80051a4:	4643      	mov	r3, r8
 80051a6:	18e3      	adds	r3, r4, r3
 80051a8:	603b      	str	r3, [r7, #0]
 80051aa:	464b      	mov	r3, r9
 80051ac:	eb45 0303 	adc.w	r3, r5, r3
 80051b0:	607b      	str	r3, [r7, #4]
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051be:	4629      	mov	r1, r5
 80051c0:	028b      	lsls	r3, r1, #10
 80051c2:	4621      	mov	r1, r4
 80051c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051c8:	4621      	mov	r1, r4
 80051ca:	028a      	lsls	r2, r1, #10
 80051cc:	4610      	mov	r0, r2
 80051ce:	4619      	mov	r1, r3
 80051d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051d4:	2200      	movs	r2, #0
 80051d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051d8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80051da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051de:	f7fb fd53 	bl	8000c88 <__aeabi_uldivmod>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4613      	mov	r3, r2
 80051e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80051ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <HAL_RCC_GetSysClockFreq+0x458>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	0f1b      	lsrs	r3, r3, #28
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80051fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005202:	fbb2 f3f3 	udiv	r3, r2, r3
 8005206:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800520a:	e003      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x45c>)
 800520e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005212:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005218:	4618      	mov	r0, r3
 800521a:	37b8      	adds	r7, #184	@ 0xb8
 800521c:	46bd      	mov	sp, r7
 800521e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800
 8005228:	00f42400 	.word	0x00f42400

0800522c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e28d      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8083 	beq.w	8005352 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800524c:	4b94      	ldr	r3, [pc, #592]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 030c 	and.w	r3, r3, #12
 8005254:	2b04      	cmp	r3, #4
 8005256:	d019      	beq.n	800528c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005258:	4b91      	ldr	r3, [pc, #580]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005260:	2b08      	cmp	r3, #8
 8005262:	d106      	bne.n	8005272 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005264:	4b8e      	ldr	r3, [pc, #568]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800526c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005270:	d00c      	beq.n	800528c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005272:	4b8b      	ldr	r3, [pc, #556]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800527a:	2b0c      	cmp	r3, #12
 800527c:	d112      	bne.n	80052a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800527e:	4b88      	ldr	r3, [pc, #544]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800528a:	d10b      	bne.n	80052a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528c:	4b84      	ldr	r3, [pc, #528]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d05b      	beq.n	8005350 <HAL_RCC_OscConfig+0x124>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d157      	bne.n	8005350 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e25a      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ac:	d106      	bne.n	80052bc <HAL_RCC_OscConfig+0x90>
 80052ae:	4b7c      	ldr	r3, [pc, #496]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a7b      	ldr	r2, [pc, #492]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80052b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	e01d      	b.n	80052f8 <HAL_RCC_OscConfig+0xcc>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCC_OscConfig+0xb4>
 80052c6:	4b76      	ldr	r3, [pc, #472]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a75      	ldr	r2, [pc, #468]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80052cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	4b73      	ldr	r3, [pc, #460]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a72      	ldr	r2, [pc, #456]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80052d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	e00b      	b.n	80052f8 <HAL_RCC_OscConfig+0xcc>
 80052e0:	4b6f      	ldr	r3, [pc, #444]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a6e      	ldr	r2, [pc, #440]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80052e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	4b6c      	ldr	r3, [pc, #432]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a6b      	ldr	r2, [pc, #428]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80052f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d013      	beq.n	8005328 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fe fdb6 	bl	8003e70 <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005308:	f7fe fdb2 	bl	8003e70 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b64      	cmp	r3, #100	@ 0x64
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e21f      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531a:	4b61      	ldr	r3, [pc, #388]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCC_OscConfig+0xdc>
 8005326:	e014      	b.n	8005352 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fe fda2 	bl	8003e70 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005330:	f7fe fd9e 	bl	8003e70 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	@ 0x64
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e20b      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005342:	4b57      	ldr	r3, [pc, #348]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0x104>
 800534e:	e000      	b.n	8005352 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d06f      	beq.n	800543e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800535e:	4b50      	ldr	r3, [pc, #320]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 030c 	and.w	r3, r3, #12
 8005366:	2b00      	cmp	r3, #0
 8005368:	d017      	beq.n	800539a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800536a:	4b4d      	ldr	r3, [pc, #308]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005372:	2b08      	cmp	r3, #8
 8005374:	d105      	bne.n	8005382 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005376:	4b4a      	ldr	r3, [pc, #296]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005382:	4b47      	ldr	r3, [pc, #284]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800538a:	2b0c      	cmp	r3, #12
 800538c:	d11c      	bne.n	80053c8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538e:	4b44      	ldr	r3, [pc, #272]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d116      	bne.n	80053c8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800539a:	4b41      	ldr	r3, [pc, #260]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <HAL_RCC_OscConfig+0x186>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d001      	beq.n	80053b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e1d3      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b2:	4b3b      	ldr	r3, [pc, #236]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4937      	ldr	r1, [pc, #220]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c6:	e03a      	b.n	800543e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d020      	beq.n	8005412 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d0:	4b34      	ldr	r3, [pc, #208]	@ (80054a4 <HAL_RCC_OscConfig+0x278>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d6:	f7fe fd4b 	bl	8003e70 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053de:	f7fe fd47 	bl	8003e70 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e1b4      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f0:	4b2b      	ldr	r3, [pc, #172]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053fc:	4b28      	ldr	r3, [pc, #160]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4925      	ldr	r1, [pc, #148]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 800540c:	4313      	orrs	r3, r2
 800540e:	600b      	str	r3, [r1, #0]
 8005410:	e015      	b.n	800543e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005412:	4b24      	ldr	r3, [pc, #144]	@ (80054a4 <HAL_RCC_OscConfig+0x278>)
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fe fd2a 	bl	8003e70 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005420:	f7fe fd26 	bl	8003e70 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e193      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005432:	4b1b      	ldr	r3, [pc, #108]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f0      	bne.n	8005420 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d036      	beq.n	80054b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d016      	beq.n	8005480 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005452:	4b15      	ldr	r3, [pc, #84]	@ (80054a8 <HAL_RCC_OscConfig+0x27c>)
 8005454:	2201      	movs	r2, #1
 8005456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005458:	f7fe fd0a 	bl	8003e70 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005460:	f7fe fd06 	bl	8003e70 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e173      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005472:	4b0b      	ldr	r3, [pc, #44]	@ (80054a0 <HAL_RCC_OscConfig+0x274>)
 8005474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCC_OscConfig+0x234>
 800547e:	e01b      	b.n	80054b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005480:	4b09      	ldr	r3, [pc, #36]	@ (80054a8 <HAL_RCC_OscConfig+0x27c>)
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005486:	f7fe fcf3 	bl	8003e70 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800548c:	e00e      	b.n	80054ac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800548e:	f7fe fcef 	bl	8003e70 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d907      	bls.n	80054ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e15c      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
 80054a0:	40023800 	.word	0x40023800
 80054a4:	42470000 	.word	0x42470000
 80054a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054ac:	4b8a      	ldr	r3, [pc, #552]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 80054ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1ea      	bne.n	800548e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8097 	beq.w	80055f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ca:	4b83      	ldr	r3, [pc, #524]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10f      	bne.n	80054f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d6:	2300      	movs	r3, #0
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	4b7f      	ldr	r3, [pc, #508]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	4a7e      	ldr	r2, [pc, #504]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 80054e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80054e6:	4b7c      	ldr	r3, [pc, #496]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ee:	60bb      	str	r3, [r7, #8]
 80054f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f2:	2301      	movs	r3, #1
 80054f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f6:	4b79      	ldr	r3, [pc, #484]	@ (80056dc <HAL_RCC_OscConfig+0x4b0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d118      	bne.n	8005534 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005502:	4b76      	ldr	r3, [pc, #472]	@ (80056dc <HAL_RCC_OscConfig+0x4b0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a75      	ldr	r2, [pc, #468]	@ (80056dc <HAL_RCC_OscConfig+0x4b0>)
 8005508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800550c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800550e:	f7fe fcaf 	bl	8003e70 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005514:	e008      	b.n	8005528 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005516:	f7fe fcab 	bl	8003e70 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e118      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005528:	4b6c      	ldr	r3, [pc, #432]	@ (80056dc <HAL_RCC_OscConfig+0x4b0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f0      	beq.n	8005516 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d106      	bne.n	800554a <HAL_RCC_OscConfig+0x31e>
 800553c:	4b66      	ldr	r3, [pc, #408]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 800553e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005540:	4a65      	ldr	r2, [pc, #404]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	6713      	str	r3, [r2, #112]	@ 0x70
 8005548:	e01c      	b.n	8005584 <HAL_RCC_OscConfig+0x358>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2b05      	cmp	r3, #5
 8005550:	d10c      	bne.n	800556c <HAL_RCC_OscConfig+0x340>
 8005552:	4b61      	ldr	r3, [pc, #388]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 8005554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005556:	4a60      	ldr	r2, [pc, #384]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 8005558:	f043 0304 	orr.w	r3, r3, #4
 800555c:	6713      	str	r3, [r2, #112]	@ 0x70
 800555e:	4b5e      	ldr	r3, [pc, #376]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 8005560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005562:	4a5d      	ldr	r2, [pc, #372]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	6713      	str	r3, [r2, #112]	@ 0x70
 800556a:	e00b      	b.n	8005584 <HAL_RCC_OscConfig+0x358>
 800556c:	4b5a      	ldr	r3, [pc, #360]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 800556e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005570:	4a59      	ldr	r2, [pc, #356]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 8005572:	f023 0301 	bic.w	r3, r3, #1
 8005576:	6713      	str	r3, [r2, #112]	@ 0x70
 8005578:	4b57      	ldr	r3, [pc, #348]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 800557a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557c:	4a56      	ldr	r2, [pc, #344]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 800557e:	f023 0304 	bic.w	r3, r3, #4
 8005582:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d015      	beq.n	80055b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558c:	f7fe fc70 	bl	8003e70 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005592:	e00a      	b.n	80055aa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005594:	f7fe fc6c 	bl	8003e70 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e0d7      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055aa:	4b4b      	ldr	r3, [pc, #300]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 80055ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0ee      	beq.n	8005594 <HAL_RCC_OscConfig+0x368>
 80055b6:	e014      	b.n	80055e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fe fc5a 	bl	8003e70 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055be:	e00a      	b.n	80055d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c0:	f7fe fc56 	bl	8003e70 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e0c1      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d6:	4b40      	ldr	r3, [pc, #256]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 80055d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1ee      	bne.n	80055c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d105      	bne.n	80055f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e8:	4b3b      	ldr	r3, [pc, #236]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 80055ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ec:	4a3a      	ldr	r2, [pc, #232]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 80055ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 80ad 	beq.w	8005758 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055fe:	4b36      	ldr	r3, [pc, #216]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 030c 	and.w	r3, r3, #12
 8005606:	2b08      	cmp	r3, #8
 8005608:	d060      	beq.n	80056cc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d145      	bne.n	800569e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005612:	4b33      	ldr	r3, [pc, #204]	@ (80056e0 <HAL_RCC_OscConfig+0x4b4>)
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005618:	f7fe fc2a 	bl	8003e70 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005620:	f7fe fc26 	bl	8003e70 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e093      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005632:	4b29      	ldr	r3, [pc, #164]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f0      	bne.n	8005620 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69da      	ldr	r2, [r3, #28]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564c:	019b      	lsls	r3, r3, #6
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	085b      	lsrs	r3, r3, #1
 8005656:	3b01      	subs	r3, #1
 8005658:	041b      	lsls	r3, r3, #16
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005660:	061b      	lsls	r3, r3, #24
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005668:	071b      	lsls	r3, r3, #28
 800566a:	491b      	ldr	r1, [pc, #108]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 800566c:	4313      	orrs	r3, r2
 800566e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005670:	4b1b      	ldr	r3, [pc, #108]	@ (80056e0 <HAL_RCC_OscConfig+0x4b4>)
 8005672:	2201      	movs	r2, #1
 8005674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005676:	f7fe fbfb 	bl	8003e70 <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567e:	f7fe fbf7 	bl	8003e70 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e064      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005690:	4b11      	ldr	r3, [pc, #68]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f0      	beq.n	800567e <HAL_RCC_OscConfig+0x452>
 800569c:	e05c      	b.n	8005758 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569e:	4b10      	ldr	r3, [pc, #64]	@ (80056e0 <HAL_RCC_OscConfig+0x4b4>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a4:	f7fe fbe4 	bl	8003e70 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ac:	f7fe fbe0 	bl	8003e70 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e04d      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056be:	4b06      	ldr	r3, [pc, #24]	@ (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f0      	bne.n	80056ac <HAL_RCC_OscConfig+0x480>
 80056ca:	e045      	b.n	8005758 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d107      	bne.n	80056e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e040      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
 80056d8:	40023800 	.word	0x40023800
 80056dc:	40007000 	.word	0x40007000
 80056e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005764 <HAL_RCC_OscConfig+0x538>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d030      	beq.n	8005754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d129      	bne.n	8005754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570a:	429a      	cmp	r2, r3
 800570c:	d122      	bne.n	8005754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005714:	4013      	ands	r3, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800571a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800571c:	4293      	cmp	r3, r2
 800571e:	d119      	bne.n	8005754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	085b      	lsrs	r3, r3, #1
 800572c:	3b01      	subs	r3, #1
 800572e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005730:	429a      	cmp	r2, r3
 8005732:	d10f      	bne.n	8005754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005740:	429a      	cmp	r2, r3
 8005742:	d107      	bne.n	8005754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005750:	429a      	cmp	r2, r3
 8005752:	d001      	beq.n	8005758 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40023800 	.word	0x40023800

08005768 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e07b      	b.n	8005872 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577e:	2b00      	cmp	r3, #0
 8005780:	d108      	bne.n	8005794 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800578a:	d009      	beq.n	80057a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	61da      	str	r2, [r3, #28]
 8005792:	e005      	b.n	80057a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fe f8e4 	bl	8003988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005824:	ea42 0103 	orr.w	r1, r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	f003 0104 	and.w	r1, r3, #4
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	f003 0210 	and.w	r2, r3, #16
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005860:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b088      	sub	sp, #32
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	4613      	mov	r3, r2
 8005888:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800588a:	f7fe faf1 	bl	8003e70 <HAL_GetTick>
 800588e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d001      	beq.n	80058a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80058a0:	2302      	movs	r3, #2
 80058a2:	e12a      	b.n	8005afa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <HAL_SPI_Transmit+0x36>
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e122      	b.n	8005afa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_SPI_Transmit+0x48>
 80058be:	2302      	movs	r3, #2
 80058c0:	e11b      	b.n	8005afa <HAL_SPI_Transmit+0x280>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2203      	movs	r2, #3
 80058ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	88fa      	ldrh	r2, [r7, #6]
 80058e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005910:	d10f      	bne.n	8005932 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005920:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005930:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593c:	2b40      	cmp	r3, #64	@ 0x40
 800593e:	d007      	beq.n	8005950 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800594e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005958:	d152      	bne.n	8005a00 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_SPI_Transmit+0xee>
 8005962:	8b7b      	ldrh	r3, [r7, #26]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d145      	bne.n	80059f4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596c:	881a      	ldrh	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005978:	1c9a      	adds	r2, r3, #2
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800598c:	e032      	b.n	80059f4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b02      	cmp	r3, #2
 800599a:	d112      	bne.n	80059c2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a0:	881a      	ldrh	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ac:	1c9a      	adds	r2, r3, #2
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80059c0:	e018      	b.n	80059f4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c2:	f7fe fa55 	bl	8003e70 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d803      	bhi.n	80059da <HAL_SPI_Transmit+0x160>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d102      	bne.n	80059e0 <HAL_SPI_Transmit+0x166>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e082      	b.n	8005afa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1c7      	bne.n	800598e <HAL_SPI_Transmit+0x114>
 80059fe:	e053      	b.n	8005aa8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <HAL_SPI_Transmit+0x194>
 8005a08:	8b7b      	ldrh	r3, [r7, #26]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d147      	bne.n	8005a9e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	330c      	adds	r3, #12
 8005a18:	7812      	ldrb	r2, [r2, #0]
 8005a1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a34:	e033      	b.n	8005a9e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d113      	bne.n	8005a6c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	330c      	adds	r3, #12
 8005a4e:	7812      	ldrb	r2, [r2, #0]
 8005a50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a6a:	e018      	b.n	8005a9e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a6c:	f7fe fa00 	bl	8003e70 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d803      	bhi.n	8005a84 <HAL_SPI_Transmit+0x20a>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d102      	bne.n	8005a8a <HAL_SPI_Transmit+0x210>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e02d      	b.n	8005afa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1c6      	bne.n	8005a36 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fbd9 	bl	8006264 <SPI_EndRxTxTransaction>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10a      	bne.n	8005adc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005af8:	2300      	movs	r3, #0
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b088      	sub	sp, #32
 8005b06:	af02      	add	r7, sp, #8
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	603b      	str	r3, [r7, #0]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d001      	beq.n	8005b22 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e104      	b.n	8005d2c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b2a:	d112      	bne.n	8005b52 <HAL_SPI_Receive+0x50>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10e      	bne.n	8005b52 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2204      	movs	r2, #4
 8005b38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b3c:	88fa      	ldrh	r2, [r7, #6]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	4613      	mov	r3, r2
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f8f3 	bl	8005d34 <HAL_SPI_TransmitReceive>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	e0ec      	b.n	8005d2c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b52:	f7fe f98d 	bl	8003e70 <HAL_GetTick>
 8005b56:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_SPI_Receive+0x62>
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0e1      	b.n	8005d2c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_SPI_Receive+0x74>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e0da      	b.n	8005d2c <HAL_SPI_Receive+0x22a>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2204      	movs	r2, #4
 8005b82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	88fa      	ldrh	r2, [r7, #6]
 8005b96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bc4:	d10f      	bne.n	8005be6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005be4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf0:	2b40      	cmp	r3, #64	@ 0x40
 8005bf2:	d007      	beq.n	8005c04 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d170      	bne.n	8005cee <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c0c:	e035      	b.n	8005c7a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d115      	bne.n	8005c48 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f103 020c 	add.w	r2, r3, #12
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c28:	7812      	ldrb	r2, [r2, #0]
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c46:	e018      	b.n	8005c7a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c48:	f7fe f912 	bl	8003e70 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d803      	bhi.n	8005c60 <HAL_SPI_Receive+0x15e>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5e:	d102      	bne.n	8005c66 <HAL_SPI_Receive+0x164>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e058      	b.n	8005d2c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1c4      	bne.n	8005c0e <HAL_SPI_Receive+0x10c>
 8005c84:	e038      	b.n	8005cf8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d113      	bne.n	8005cbc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9e:	b292      	uxth	r2, r2
 8005ca0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca6:	1c9a      	adds	r2, r3, #2
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cba:	e018      	b.n	8005cee <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cbc:	f7fe f8d8 	bl	8003e70 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d803      	bhi.n	8005cd4 <HAL_SPI_Receive+0x1d2>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d102      	bne.n	8005cda <HAL_SPI_Receive+0x1d8>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e01e      	b.n	8005d2c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1c6      	bne.n	8005c86 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 fa4b 	bl	8006198 <SPI_EndRxTransaction>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
  }
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08a      	sub	sp, #40	@ 0x28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d42:	2301      	movs	r3, #1
 8005d44:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d46:	f7fe f893 	bl	8003e70 <HAL_GetTick>
 8005d4a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d52:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005d5a:	887b      	ldrh	r3, [r7, #2]
 8005d5c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d5e:	7ffb      	ldrb	r3, [r7, #31]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d00c      	beq.n	8005d7e <HAL_SPI_TransmitReceive+0x4a>
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d6a:	d106      	bne.n	8005d7a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <HAL_SPI_TransmitReceive+0x46>
 8005d74:	7ffb      	ldrb	r3, [r7, #31]
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d001      	beq.n	8005d7e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e17f      	b.n	800607e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_SPI_TransmitReceive+0x5c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <HAL_SPI_TransmitReceive+0x5c>
 8005d8a:	887b      	ldrh	r3, [r7, #2]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e174      	b.n	800607e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <HAL_SPI_TransmitReceive+0x6e>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e16d      	b.n	800607e <HAL_SPI_TransmitReceive+0x34a>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d003      	beq.n	8005dbe <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2205      	movs	r2, #5
 8005dba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	887a      	ldrh	r2, [r7, #2]
 8005dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	887a      	ldrh	r2, [r7, #2]
 8005dd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	887a      	ldrh	r2, [r7, #2]
 8005de0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	887a      	ldrh	r2, [r7, #2]
 8005de6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dfe:	2b40      	cmp	r3, #64	@ 0x40
 8005e00:	d007      	beq.n	8005e12 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e1a:	d17e      	bne.n	8005f1a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_SPI_TransmitReceive+0xf6>
 8005e24:	8afb      	ldrh	r3, [r7, #22]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d16c      	bne.n	8005f04 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2e:	881a      	ldrh	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3a:	1c9a      	adds	r2, r3, #2
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e4e:	e059      	b.n	8005f04 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d11b      	bne.n	8005e96 <HAL_SPI_TransmitReceive+0x162>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d016      	beq.n	8005e96 <HAL_SPI_TransmitReceive+0x162>
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d113      	bne.n	8005e96 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e72:	881a      	ldrh	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7e:	1c9a      	adds	r2, r3, #2
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d119      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0x1a4>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d014      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb8:	b292      	uxth	r2, r2
 8005eba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec0:	1c9a      	adds	r2, r3, #2
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ed8:	f7fd ffca 	bl	8003e70 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d80d      	bhi.n	8005f04 <HAL_SPI_TransmitReceive+0x1d0>
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d009      	beq.n	8005f04 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e0bc      	b.n	800607e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1a0      	bne.n	8005e50 <HAL_SPI_TransmitReceive+0x11c>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d19b      	bne.n	8005e50 <HAL_SPI_TransmitReceive+0x11c>
 8005f18:	e082      	b.n	8006020 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_SPI_TransmitReceive+0x1f4>
 8005f22:	8afb      	ldrh	r3, [r7, #22]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d171      	bne.n	800600c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	330c      	adds	r3, #12
 8005f32:	7812      	ldrb	r2, [r2, #0]
 8005f34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f4e:	e05d      	b.n	800600c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d11c      	bne.n	8005f98 <HAL_SPI_TransmitReceive+0x264>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d017      	beq.n	8005f98 <HAL_SPI_TransmitReceive+0x264>
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d114      	bne.n	8005f98 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	7812      	ldrb	r2, [r2, #0]
 8005f7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d119      	bne.n	8005fda <HAL_SPI_TransmitReceive+0x2a6>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d014      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fda:	f7fd ff49 	bl	8003e70 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d803      	bhi.n	8005ff2 <HAL_SPI_TransmitReceive+0x2be>
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d102      	bne.n	8005ff8 <HAL_SPI_TransmitReceive+0x2c4>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d109      	bne.n	800600c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e038      	b.n	800607e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d19c      	bne.n	8005f50 <HAL_SPI_TransmitReceive+0x21c>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d197      	bne.n	8005f50 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006020:	6a3a      	ldr	r2, [r7, #32]
 8006022:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f91d 	bl	8006264 <SPI_EndRxTxTransaction>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d008      	beq.n	8006042 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e01d      	b.n	800607e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800604a:	2300      	movs	r3, #0
 800604c:	613b      	str	r3, [r7, #16]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800607c:	2300      	movs	r3, #0
  }
}
 800607e:	4618      	mov	r0, r3
 8006080:	3728      	adds	r7, #40	@ 0x28
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006098:	f7fd feea 	bl	8003e70 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	4413      	add	r3, r2
 80060a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060a8:	f7fd fee2 	bl	8003e70 <HAL_GetTick>
 80060ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060ae:	4b39      	ldr	r3, [pc, #228]	@ (8006194 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	015b      	lsls	r3, r3, #5
 80060b4:	0d1b      	lsrs	r3, r3, #20
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	fb02 f303 	mul.w	r3, r2, r3
 80060bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060be:	e054      	b.n	800616a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d050      	beq.n	800616a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060c8:	f7fd fed2 	bl	8003e70 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d902      	bls.n	80060de <SPI_WaitFlagStateUntilTimeout+0x56>
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d13d      	bne.n	800615a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060f6:	d111      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0x94>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006100:	d004      	beq.n	800610c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800610a:	d107      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800611a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006124:	d10f      	bne.n	8006146 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e017      	b.n	800618a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	3b01      	subs	r3, #1
 8006168:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	429a      	cmp	r2, r3
 8006178:	bf0c      	ite	eq
 800617a:	2301      	moveq	r3, #1
 800617c:	2300      	movne	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	429a      	cmp	r2, r3
 8006186:	d19b      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3720      	adds	r7, #32
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000044 	.word	0x20000044

08006198 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061ac:	d111      	bne.n	80061d2 <SPI_EndRxTransaction+0x3a>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061b6:	d004      	beq.n	80061c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c0:	d107      	bne.n	80061d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061da:	d12a      	bne.n	8006232 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061e4:	d012      	beq.n	800620c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2200      	movs	r2, #0
 80061ee:	2180      	movs	r1, #128	@ 0x80
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff ff49 	bl	8006088 <SPI_WaitFlagStateUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d02d      	beq.n	8006258 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006200:	f043 0220 	orr.w	r2, r3, #32
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e026      	b.n	800625a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2200      	movs	r2, #0
 8006214:	2101      	movs	r1, #1
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff ff36 	bl	8006088 <SPI_WaitFlagStateUntilTimeout>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01a      	beq.n	8006258 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006226:	f043 0220 	orr.w	r2, r3, #32
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e013      	b.n	800625a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2200      	movs	r2, #0
 800623a:	2101      	movs	r1, #1
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f7ff ff23 	bl	8006088 <SPI_WaitFlagStateUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800624c:	f043 0220 	orr.w	r2, r3, #32
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e000      	b.n	800625a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2201      	movs	r2, #1
 8006278:	2102      	movs	r1, #2
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff ff04 	bl	8006088 <SPI_WaitFlagStateUntilTimeout>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628a:	f043 0220 	orr.w	r2, r3, #32
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e032      	b.n	80062fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006296:	4b1b      	ldr	r3, [pc, #108]	@ (8006304 <SPI_EndRxTxTransaction+0xa0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1b      	ldr	r2, [pc, #108]	@ (8006308 <SPI_EndRxTxTransaction+0xa4>)
 800629c:	fba2 2303 	umull	r2, r3, r2, r3
 80062a0:	0d5b      	lsrs	r3, r3, #21
 80062a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80062a6:	fb02 f303 	mul.w	r3, r2, r3
 80062aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062b4:	d112      	bne.n	80062dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2200      	movs	r2, #0
 80062be:	2180      	movs	r1, #128	@ 0x80
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff fee1 	bl	8006088 <SPI_WaitFlagStateUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d016      	beq.n	80062fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d0:	f043 0220 	orr.w	r2, r3, #32
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e00f      	b.n	80062fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f2:	2b80      	cmp	r3, #128	@ 0x80
 80062f4:	d0f2      	beq.n	80062dc <SPI_EndRxTxTransaction+0x78>
 80062f6:	e000      	b.n	80062fa <SPI_EndRxTxTransaction+0x96>
        break;
 80062f8:	bf00      	nop
  }

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	20000044 	.word	0x20000044
 8006308:	165e9f81 	.word	0x165e9f81

0800630c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e041      	b.n	80063a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f839 	bl	80063aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	4619      	mov	r1, r3
 800634a:	4610      	mov	r0, r2
 800634c:	f000 f9c0 	bl	80066d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
	...

080063c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d001      	beq.n	80063d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e04e      	b.n	8006476 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0201 	orr.w	r2, r2, #1
 80063ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a23      	ldr	r2, [pc, #140]	@ (8006484 <HAL_TIM_Base_Start_IT+0xc4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d022      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006402:	d01d      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1f      	ldr	r2, [pc, #124]	@ (8006488 <HAL_TIM_Base_Start_IT+0xc8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d018      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1e      	ldr	r2, [pc, #120]	@ (800648c <HAL_TIM_Base_Start_IT+0xcc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d013      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a1c      	ldr	r2, [pc, #112]	@ (8006490 <HAL_TIM_Base_Start_IT+0xd0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00e      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1b      	ldr	r2, [pc, #108]	@ (8006494 <HAL_TIM_Base_Start_IT+0xd4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a19      	ldr	r2, [pc, #100]	@ (8006498 <HAL_TIM_Base_Start_IT+0xd8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_TIM_Base_Start_IT+0x80>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a18      	ldr	r2, [pc, #96]	@ (800649c <HAL_TIM_Base_Start_IT+0xdc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d111      	bne.n	8006464 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b06      	cmp	r3, #6
 8006450:	d010      	beq.n	8006474 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0201 	orr.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006462:	e007      	b.n	8006474 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40010000 	.word	0x40010000
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40010400 	.word	0x40010400
 8006498:	40014000 	.word	0x40014000
 800649c:	40001800 	.word	0x40001800

080064a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d020      	beq.n	8006504 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01b      	beq.n	8006504 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0202 	mvn.w	r2, #2
 80064d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f8d2 	bl	8006694 <HAL_TIM_IC_CaptureCallback>
 80064f0:	e005      	b.n	80064fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f8c4 	bl	8006680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f8d5 	bl	80066a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	d020      	beq.n	8006550 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01b      	beq.n	8006550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f06f 0204 	mvn.w	r2, #4
 8006520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f8ac 	bl	8006694 <HAL_TIM_IC_CaptureCallback>
 800653c:	e005      	b.n	800654a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f89e 	bl	8006680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f8af 	bl	80066a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d020      	beq.n	800659c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01b      	beq.n	800659c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0208 	mvn.w	r2, #8
 800656c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2204      	movs	r2, #4
 8006572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f886 	bl	8006694 <HAL_TIM_IC_CaptureCallback>
 8006588:	e005      	b.n	8006596 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f878 	bl	8006680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f889 	bl	80066a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d020      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01b      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0210 	mvn.w	r2, #16
 80065b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2208      	movs	r2, #8
 80065be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f860 	bl	8006694 <HAL_TIM_IC_CaptureCallback>
 80065d4:	e005      	b.n	80065e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f852 	bl	8006680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f863 	bl	80066a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0201 	mvn.w	r2, #1
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fd f8ee 	bl	80037e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00c      	beq.n	8006630 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f906 	bl	800683c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800664c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f834 	bl	80066bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d007      	beq.n	8006678 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0220 	mvn.w	r2, #32
 8006670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f8d8 	bl	8006828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a46      	ldr	r2, [pc, #280]	@ (80067fc <TIM_Base_SetConfig+0x12c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d013      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ee:	d00f      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a43      	ldr	r2, [pc, #268]	@ (8006800 <TIM_Base_SetConfig+0x130>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00b      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a42      	ldr	r2, [pc, #264]	@ (8006804 <TIM_Base_SetConfig+0x134>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a41      	ldr	r2, [pc, #260]	@ (8006808 <TIM_Base_SetConfig+0x138>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a40      	ldr	r2, [pc, #256]	@ (800680c <TIM_Base_SetConfig+0x13c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d108      	bne.n	8006722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a35      	ldr	r2, [pc, #212]	@ (80067fc <TIM_Base_SetConfig+0x12c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d02b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006730:	d027      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a32      	ldr	r2, [pc, #200]	@ (8006800 <TIM_Base_SetConfig+0x130>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d023      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a31      	ldr	r2, [pc, #196]	@ (8006804 <TIM_Base_SetConfig+0x134>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01f      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a30      	ldr	r2, [pc, #192]	@ (8006808 <TIM_Base_SetConfig+0x138>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d01b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2f      	ldr	r2, [pc, #188]	@ (800680c <TIM_Base_SetConfig+0x13c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d017      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a2e      	ldr	r2, [pc, #184]	@ (8006810 <TIM_Base_SetConfig+0x140>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a2d      	ldr	r2, [pc, #180]	@ (8006814 <TIM_Base_SetConfig+0x144>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00f      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2c      	ldr	r2, [pc, #176]	@ (8006818 <TIM_Base_SetConfig+0x148>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2b      	ldr	r2, [pc, #172]	@ (800681c <TIM_Base_SetConfig+0x14c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d007      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2a      	ldr	r2, [pc, #168]	@ (8006820 <TIM_Base_SetConfig+0x150>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d003      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a29      	ldr	r2, [pc, #164]	@ (8006824 <TIM_Base_SetConfig+0x154>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d108      	bne.n	8006794 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a10      	ldr	r2, [pc, #64]	@ (80067fc <TIM_Base_SetConfig+0x12c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_Base_SetConfig+0xf8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a12      	ldr	r2, [pc, #72]	@ (800680c <TIM_Base_SetConfig+0x13c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d103      	bne.n	80067d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d105      	bne.n	80067ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f023 0201 	bic.w	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	611a      	str	r2, [r3, #16]
  }
}
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40010000 	.word	0x40010000
 8006800:	40000400 	.word	0x40000400
 8006804:	40000800 	.word	0x40000800
 8006808:	40000c00 	.word	0x40000c00
 800680c:	40010400 	.word	0x40010400
 8006810:	40014000 	.word	0x40014000
 8006814:	40014400 	.word	0x40014400
 8006818:	40014800 	.word	0x40014800
 800681c:	40001800 	.word	0x40001800
 8006820:	40001c00 	.word	0x40001c00
 8006824:	40002000 	.word	0x40002000

08006828 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e042      	b.n	80068e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fd f8ce 	bl	8003a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2224      	movs	r2, #36	@ 0x24
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f82b 	bl	80068f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695a      	ldr	r2, [r3, #20]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f4:	b0c0      	sub	sp, #256	@ 0x100
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800690c:	68d9      	ldr	r1, [r3, #12]
 800690e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	ea40 0301 	orr.w	r3, r0, r1
 8006918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800691a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	431a      	orrs	r2, r3
 8006928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	431a      	orrs	r2, r3
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	4313      	orrs	r3, r2
 8006938:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006948:	f021 010c 	bic.w	r1, r1, #12
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006956:	430b      	orrs	r3, r1
 8006958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800695a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696a:	6999      	ldr	r1, [r3, #24]
 800696c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	ea40 0301 	orr.w	r3, r0, r1
 8006976:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b8f      	ldr	r3, [pc, #572]	@ (8006bbc <UART_SetConfig+0x2cc>)
 8006980:	429a      	cmp	r2, r3
 8006982:	d005      	beq.n	8006990 <UART_SetConfig+0xa0>
 8006984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	4b8d      	ldr	r3, [pc, #564]	@ (8006bc0 <UART_SetConfig+0x2d0>)
 800698c:	429a      	cmp	r2, r3
 800698e:	d104      	bne.n	800699a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006990:	f7fe f9d6 	bl	8004d40 <HAL_RCC_GetPCLK2Freq>
 8006994:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006998:	e003      	b.n	80069a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800699a:	f7fe f9bd 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 800699e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ac:	f040 810c 	bne.w	8006bc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069b4:	2200      	movs	r2, #0
 80069b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80069be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80069c2:	4622      	mov	r2, r4
 80069c4:	462b      	mov	r3, r5
 80069c6:	1891      	adds	r1, r2, r2
 80069c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80069ca:	415b      	adcs	r3, r3
 80069cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80069d2:	4621      	mov	r1, r4
 80069d4:	eb12 0801 	adds.w	r8, r2, r1
 80069d8:	4629      	mov	r1, r5
 80069da:	eb43 0901 	adc.w	r9, r3, r1
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069f2:	4690      	mov	r8, r2
 80069f4:	4699      	mov	r9, r3
 80069f6:	4623      	mov	r3, r4
 80069f8:	eb18 0303 	adds.w	r3, r8, r3
 80069fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a00:	462b      	mov	r3, r5
 8006a02:	eb49 0303 	adc.w	r3, r9, r3
 8006a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a1e:	460b      	mov	r3, r1
 8006a20:	18db      	adds	r3, r3, r3
 8006a22:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a24:	4613      	mov	r3, r2
 8006a26:	eb42 0303 	adc.w	r3, r2, r3
 8006a2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a34:	f7fa f928 	bl	8000c88 <__aeabi_uldivmod>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4b61      	ldr	r3, [pc, #388]	@ (8006bc4 <UART_SetConfig+0x2d4>)
 8006a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	011c      	lsls	r4, r3, #4
 8006a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	1891      	adds	r1, r2, r2
 8006a5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006a60:	415b      	adcs	r3, r3
 8006a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a68:	4641      	mov	r1, r8
 8006a6a:	eb12 0a01 	adds.w	sl, r2, r1
 8006a6e:	4649      	mov	r1, r9
 8006a70:	eb43 0b01 	adc.w	fp, r3, r1
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a88:	4692      	mov	sl, r2
 8006a8a:	469b      	mov	fp, r3
 8006a8c:	4643      	mov	r3, r8
 8006a8e:	eb1a 0303 	adds.w	r3, sl, r3
 8006a92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a96:	464b      	mov	r3, r9
 8006a98:	eb4b 0303 	adc.w	r3, fp, r3
 8006a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006aac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	18db      	adds	r3, r3, r3
 8006ab8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006aba:	4613      	mov	r3, r2
 8006abc:	eb42 0303 	adc.w	r3, r2, r3
 8006ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006aca:	f7fa f8dd 	bl	8000c88 <__aeabi_uldivmod>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8006bc4 <UART_SetConfig+0x2d4>)
 8006ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	2264      	movs	r2, #100	@ 0x64
 8006ade:	fb02 f303 	mul.w	r3, r2, r3
 8006ae2:	1acb      	subs	r3, r1, r3
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006aea:	4b36      	ldr	r3, [pc, #216]	@ (8006bc4 <UART_SetConfig+0x2d4>)
 8006aec:	fba3 2302 	umull	r2, r3, r3, r2
 8006af0:	095b      	lsrs	r3, r3, #5
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006af8:	441c      	add	r4, r3
 8006afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	1891      	adds	r1, r2, r2
 8006b12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b14:	415b      	adcs	r3, r3
 8006b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	1851      	adds	r1, r2, r1
 8006b20:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b22:	4649      	mov	r1, r9
 8006b24:	414b      	adcs	r3, r1
 8006b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b34:	4659      	mov	r1, fp
 8006b36:	00cb      	lsls	r3, r1, #3
 8006b38:	4651      	mov	r1, sl
 8006b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b3e:	4651      	mov	r1, sl
 8006b40:	00ca      	lsls	r2, r1, #3
 8006b42:	4610      	mov	r0, r2
 8006b44:	4619      	mov	r1, r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	4642      	mov	r2, r8
 8006b4a:	189b      	adds	r3, r3, r2
 8006b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b50:	464b      	mov	r3, r9
 8006b52:	460a      	mov	r2, r1
 8006b54:	eb42 0303 	adc.w	r3, r2, r3
 8006b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006b6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b70:	460b      	mov	r3, r1
 8006b72:	18db      	adds	r3, r3, r3
 8006b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b76:	4613      	mov	r3, r2
 8006b78:	eb42 0303 	adc.w	r3, r2, r3
 8006b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006b86:	f7fa f87f 	bl	8000c88 <__aeabi_uldivmod>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc4 <UART_SetConfig+0x2d4>)
 8006b90:	fba3 1302 	umull	r1, r3, r3, r2
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	2164      	movs	r1, #100	@ 0x64
 8006b98:	fb01 f303 	mul.w	r3, r1, r3
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	3332      	adds	r3, #50	@ 0x32
 8006ba2:	4a08      	ldr	r2, [pc, #32]	@ (8006bc4 <UART_SetConfig+0x2d4>)
 8006ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	f003 0207 	and.w	r2, r3, #7
 8006bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4422      	add	r2, r4
 8006bb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bb8:	e106      	b.n	8006dc8 <UART_SetConfig+0x4d8>
 8006bba:	bf00      	nop
 8006bbc:	40011000 	.word	0x40011000
 8006bc0:	40011400 	.word	0x40011400
 8006bc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006bd2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006bd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006bda:	4642      	mov	r2, r8
 8006bdc:	464b      	mov	r3, r9
 8006bde:	1891      	adds	r1, r2, r2
 8006be0:	6239      	str	r1, [r7, #32]
 8006be2:	415b      	adcs	r3, r3
 8006be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bea:	4641      	mov	r1, r8
 8006bec:	1854      	adds	r4, r2, r1
 8006bee:	4649      	mov	r1, r9
 8006bf0:	eb43 0501 	adc.w	r5, r3, r1
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	00eb      	lsls	r3, r5, #3
 8006bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c02:	00e2      	lsls	r2, r4, #3
 8006c04:	4614      	mov	r4, r2
 8006c06:	461d      	mov	r5, r3
 8006c08:	4643      	mov	r3, r8
 8006c0a:	18e3      	adds	r3, r4, r3
 8006c0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c10:	464b      	mov	r3, r9
 8006c12:	eb45 0303 	adc.w	r3, r5, r3
 8006c16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c36:	4629      	mov	r1, r5
 8006c38:	008b      	lsls	r3, r1, #2
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c40:	4621      	mov	r1, r4
 8006c42:	008a      	lsls	r2, r1, #2
 8006c44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c48:	f7fa f81e 	bl	8000c88 <__aeabi_uldivmod>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4b60      	ldr	r3, [pc, #384]	@ (8006dd4 <UART_SetConfig+0x4e4>)
 8006c52:	fba3 2302 	umull	r2, r3, r3, r2
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	011c      	lsls	r4, r3, #4
 8006c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	464b      	mov	r3, r9
 8006c70:	1891      	adds	r1, r2, r2
 8006c72:	61b9      	str	r1, [r7, #24]
 8006c74:	415b      	adcs	r3, r3
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	1851      	adds	r1, r2, r1
 8006c80:	6139      	str	r1, [r7, #16]
 8006c82:	4649      	mov	r1, r9
 8006c84:	414b      	adcs	r3, r1
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c94:	4659      	mov	r1, fp
 8006c96:	00cb      	lsls	r3, r1, #3
 8006c98:	4651      	mov	r1, sl
 8006c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c9e:	4651      	mov	r1, sl
 8006ca0:	00ca      	lsls	r2, r1, #3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4642      	mov	r2, r8
 8006caa:	189b      	adds	r3, r3, r2
 8006cac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	460a      	mov	r2, r1
 8006cb4:	eb42 0303 	adc.w	r3, r2, r3
 8006cb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	008b      	lsls	r3, r1, #2
 8006cd8:	4641      	mov	r1, r8
 8006cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cde:	4641      	mov	r1, r8
 8006ce0:	008a      	lsls	r2, r1, #2
 8006ce2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ce6:	f7f9 ffcf 	bl	8000c88 <__aeabi_uldivmod>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4b38      	ldr	r3, [pc, #224]	@ (8006dd4 <UART_SetConfig+0x4e4>)
 8006cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	2264      	movs	r2, #100	@ 0x64
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	1acb      	subs	r3, r1, r3
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	3332      	adds	r3, #50	@ 0x32
 8006d04:	4a33      	ldr	r2, [pc, #204]	@ (8006dd4 <UART_SetConfig+0x4e4>)
 8006d06:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d10:	441c      	add	r4, r3
 8006d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d16:	2200      	movs	r2, #0
 8006d18:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d20:	4642      	mov	r2, r8
 8006d22:	464b      	mov	r3, r9
 8006d24:	1891      	adds	r1, r2, r2
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	415b      	adcs	r3, r3
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d30:	4641      	mov	r1, r8
 8006d32:	1851      	adds	r1, r2, r1
 8006d34:	6039      	str	r1, [r7, #0]
 8006d36:	4649      	mov	r1, r9
 8006d38:	414b      	adcs	r3, r1
 8006d3a:	607b      	str	r3, [r7, #4]
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d48:	4659      	mov	r1, fp
 8006d4a:	00cb      	lsls	r3, r1, #3
 8006d4c:	4651      	mov	r1, sl
 8006d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d52:	4651      	mov	r1, sl
 8006d54:	00ca      	lsls	r2, r1, #3
 8006d56:	4610      	mov	r0, r2
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	189b      	adds	r3, r3, r2
 8006d60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d62:	464b      	mov	r3, r9
 8006d64:	460a      	mov	r2, r1
 8006d66:	eb42 0303 	adc.w	r3, r2, r3
 8006d6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d76:	667a      	str	r2, [r7, #100]	@ 0x64
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d84:	4649      	mov	r1, r9
 8006d86:	008b      	lsls	r3, r1, #2
 8006d88:	4641      	mov	r1, r8
 8006d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d8e:	4641      	mov	r1, r8
 8006d90:	008a      	lsls	r2, r1, #2
 8006d92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d96:	f7f9 ff77 	bl	8000c88 <__aeabi_uldivmod>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd4 <UART_SetConfig+0x4e4>)
 8006da0:	fba3 1302 	umull	r1, r3, r3, r2
 8006da4:	095b      	lsrs	r3, r3, #5
 8006da6:	2164      	movs	r1, #100	@ 0x64
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	3332      	adds	r3, #50	@ 0x32
 8006db2:	4a08      	ldr	r2, [pc, #32]	@ (8006dd4 <UART_SetConfig+0x4e4>)
 8006db4:	fba2 2303 	umull	r2, r3, r2, r3
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	f003 020f 	and.w	r2, r3, #15
 8006dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4422      	add	r2, r4
 8006dc6:	609a      	str	r2, [r3, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dd4:	51eb851f 	.word	0x51eb851f

08006dd8 <malloc>:
 8006dd8:	4b02      	ldr	r3, [pc, #8]	@ (8006de4 <malloc+0xc>)
 8006dda:	4601      	mov	r1, r0
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	f000 b82d 	b.w	8006e3c <_malloc_r>
 8006de2:	bf00      	nop
 8006de4:	2000005c 	.word	0x2000005c

08006de8 <free>:
 8006de8:	4b02      	ldr	r3, [pc, #8]	@ (8006df4 <free+0xc>)
 8006dea:	4601      	mov	r1, r0
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	f001 bcfb 	b.w	80087e8 <_free_r>
 8006df2:	bf00      	nop
 8006df4:	2000005c 	.word	0x2000005c

08006df8 <sbrk_aligned>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8006e38 <sbrk_aligned+0x40>)
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	6831      	ldr	r1, [r6, #0]
 8006e00:	4605      	mov	r5, r0
 8006e02:	b911      	cbnz	r1, 8006e0a <sbrk_aligned+0x12>
 8006e04:	f000 fe44 	bl	8007a90 <_sbrk_r>
 8006e08:	6030      	str	r0, [r6, #0]
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f000 fe3f 	bl	8007a90 <_sbrk_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	d103      	bne.n	8006e1e <sbrk_aligned+0x26>
 8006e16:	f04f 34ff 	mov.w	r4, #4294967295
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
 8006e1e:	1cc4      	adds	r4, r0, #3
 8006e20:	f024 0403 	bic.w	r4, r4, #3
 8006e24:	42a0      	cmp	r0, r4
 8006e26:	d0f8      	beq.n	8006e1a <sbrk_aligned+0x22>
 8006e28:	1a21      	subs	r1, r4, r0
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f000 fe30 	bl	8007a90 <_sbrk_r>
 8006e30:	3001      	adds	r0, #1
 8006e32:	d1f2      	bne.n	8006e1a <sbrk_aligned+0x22>
 8006e34:	e7ef      	b.n	8006e16 <sbrk_aligned+0x1e>
 8006e36:	bf00      	nop
 8006e38:	200005dc 	.word	0x200005dc

08006e3c <_malloc_r>:
 8006e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	1ccd      	adds	r5, r1, #3
 8006e42:	f025 0503 	bic.w	r5, r5, #3
 8006e46:	3508      	adds	r5, #8
 8006e48:	2d0c      	cmp	r5, #12
 8006e4a:	bf38      	it	cc
 8006e4c:	250c      	movcc	r5, #12
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	4606      	mov	r6, r0
 8006e52:	db01      	blt.n	8006e58 <_malloc_r+0x1c>
 8006e54:	42a9      	cmp	r1, r5
 8006e56:	d904      	bls.n	8006e62 <_malloc_r+0x26>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f38 <_malloc_r+0xfc>
 8006e66:	f000 f869 	bl	8006f3c <__malloc_lock>
 8006e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e6e:	461c      	mov	r4, r3
 8006e70:	bb44      	cbnz	r4, 8006ec4 <_malloc_r+0x88>
 8006e72:	4629      	mov	r1, r5
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7ff ffbf 	bl	8006df8 <sbrk_aligned>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	d158      	bne.n	8006f32 <_malloc_r+0xf6>
 8006e80:	f8d8 4000 	ldr.w	r4, [r8]
 8006e84:	4627      	mov	r7, r4
 8006e86:	2f00      	cmp	r7, #0
 8006e88:	d143      	bne.n	8006f12 <_malloc_r+0xd6>
 8006e8a:	2c00      	cmp	r4, #0
 8006e8c:	d04b      	beq.n	8006f26 <_malloc_r+0xea>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	4639      	mov	r1, r7
 8006e92:	4630      	mov	r0, r6
 8006e94:	eb04 0903 	add.w	r9, r4, r3
 8006e98:	f000 fdfa 	bl	8007a90 <_sbrk_r>
 8006e9c:	4581      	cmp	r9, r0
 8006e9e:	d142      	bne.n	8006f26 <_malloc_r+0xea>
 8006ea0:	6821      	ldr	r1, [r4, #0]
 8006ea2:	1a6d      	subs	r5, r5, r1
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f7ff ffa6 	bl	8006df8 <sbrk_aligned>
 8006eac:	3001      	adds	r0, #1
 8006eae:	d03a      	beq.n	8006f26 <_malloc_r+0xea>
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	442b      	add	r3, r5
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	bb62      	cbnz	r2, 8006f18 <_malloc_r+0xdc>
 8006ebe:	f8c8 7000 	str.w	r7, [r8]
 8006ec2:	e00f      	b.n	8006ee4 <_malloc_r+0xa8>
 8006ec4:	6822      	ldr	r2, [r4, #0]
 8006ec6:	1b52      	subs	r2, r2, r5
 8006ec8:	d420      	bmi.n	8006f0c <_malloc_r+0xd0>
 8006eca:	2a0b      	cmp	r2, #11
 8006ecc:	d917      	bls.n	8006efe <_malloc_r+0xc2>
 8006ece:	1961      	adds	r1, r4, r5
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	6025      	str	r5, [r4, #0]
 8006ed4:	bf18      	it	ne
 8006ed6:	6059      	strne	r1, [r3, #4]
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	bf08      	it	eq
 8006edc:	f8c8 1000 	streq.w	r1, [r8]
 8006ee0:	5162      	str	r2, [r4, r5]
 8006ee2:	604b      	str	r3, [r1, #4]
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f000 f82f 	bl	8006f48 <__malloc_unlock>
 8006eea:	f104 000b 	add.w	r0, r4, #11
 8006eee:	1d23      	adds	r3, r4, #4
 8006ef0:	f020 0007 	bic.w	r0, r0, #7
 8006ef4:	1ac2      	subs	r2, r0, r3
 8006ef6:	bf1c      	itt	ne
 8006ef8:	1a1b      	subne	r3, r3, r0
 8006efa:	50a3      	strne	r3, [r4, r2]
 8006efc:	e7af      	b.n	8006e5e <_malloc_r+0x22>
 8006efe:	6862      	ldr	r2, [r4, #4]
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	bf0c      	ite	eq
 8006f04:	f8c8 2000 	streq.w	r2, [r8]
 8006f08:	605a      	strne	r2, [r3, #4]
 8006f0a:	e7eb      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	6864      	ldr	r4, [r4, #4]
 8006f10:	e7ae      	b.n	8006e70 <_malloc_r+0x34>
 8006f12:	463c      	mov	r4, r7
 8006f14:	687f      	ldr	r7, [r7, #4]
 8006f16:	e7b6      	b.n	8006e86 <_malloc_r+0x4a>
 8006f18:	461a      	mov	r2, r3
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	d1fb      	bne.n	8006f18 <_malloc_r+0xdc>
 8006f20:	2300      	movs	r3, #0
 8006f22:	6053      	str	r3, [r2, #4]
 8006f24:	e7de      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f26:	230c      	movs	r3, #12
 8006f28:	6033      	str	r3, [r6, #0]
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f000 f80c 	bl	8006f48 <__malloc_unlock>
 8006f30:	e794      	b.n	8006e5c <_malloc_r+0x20>
 8006f32:	6005      	str	r5, [r0, #0]
 8006f34:	e7d6      	b.n	8006ee4 <_malloc_r+0xa8>
 8006f36:	bf00      	nop
 8006f38:	200005e0 	.word	0x200005e0

08006f3c <__malloc_lock>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	@ (8006f44 <__malloc_lock+0x8>)
 8006f3e:	f000 bdf4 	b.w	8007b2a <__retarget_lock_acquire_recursive>
 8006f42:	bf00      	nop
 8006f44:	20000724 	.word	0x20000724

08006f48 <__malloc_unlock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	@ (8006f50 <__malloc_unlock+0x8>)
 8006f4a:	f000 bdef 	b.w	8007b2c <__retarget_lock_release_recursive>
 8006f4e:	bf00      	nop
 8006f50:	20000724 	.word	0x20000724

08006f54 <__cvt>:
 8006f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f58:	ec57 6b10 	vmov	r6, r7, d0
 8006f5c:	2f00      	cmp	r7, #0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	4619      	mov	r1, r3
 8006f62:	463b      	mov	r3, r7
 8006f64:	bfbb      	ittet	lt
 8006f66:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f6a:	461f      	movlt	r7, r3
 8006f6c:	2300      	movge	r3, #0
 8006f6e:	232d      	movlt	r3, #45	@ 0x2d
 8006f70:	700b      	strb	r3, [r1, #0]
 8006f72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f74:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006f78:	4691      	mov	r9, r2
 8006f7a:	f023 0820 	bic.w	r8, r3, #32
 8006f7e:	bfbc      	itt	lt
 8006f80:	4632      	movlt	r2, r6
 8006f82:	4616      	movlt	r6, r2
 8006f84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f88:	d005      	beq.n	8006f96 <__cvt+0x42>
 8006f8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f8e:	d100      	bne.n	8006f92 <__cvt+0x3e>
 8006f90:	3401      	adds	r4, #1
 8006f92:	2102      	movs	r1, #2
 8006f94:	e000      	b.n	8006f98 <__cvt+0x44>
 8006f96:	2103      	movs	r1, #3
 8006f98:	ab03      	add	r3, sp, #12
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	ab02      	add	r3, sp, #8
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	ec47 6b10 	vmov	d0, r6, r7
 8006fa4:	4653      	mov	r3, sl
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	f000 fe5a 	bl	8007c60 <_dtoa_r>
 8006fac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	d119      	bne.n	8006fe8 <__cvt+0x94>
 8006fb4:	f019 0f01 	tst.w	r9, #1
 8006fb8:	d00e      	beq.n	8006fd8 <__cvt+0x84>
 8006fba:	eb00 0904 	add.w	r9, r0, r4
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	4639      	mov	r1, r7
 8006fc6:	f7f9 fd9f 	bl	8000b08 <__aeabi_dcmpeq>
 8006fca:	b108      	cbz	r0, 8006fd0 <__cvt+0x7c>
 8006fcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fd0:	2230      	movs	r2, #48	@ 0x30
 8006fd2:	9b03      	ldr	r3, [sp, #12]
 8006fd4:	454b      	cmp	r3, r9
 8006fd6:	d31e      	bcc.n	8007016 <__cvt+0xc2>
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fdc:	1b5b      	subs	r3, r3, r5
 8006fde:	4628      	mov	r0, r5
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	b004      	add	sp, #16
 8006fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fec:	eb00 0904 	add.w	r9, r0, r4
 8006ff0:	d1e5      	bne.n	8006fbe <__cvt+0x6a>
 8006ff2:	7803      	ldrb	r3, [r0, #0]
 8006ff4:	2b30      	cmp	r3, #48	@ 0x30
 8006ff6:	d10a      	bne.n	800700e <__cvt+0xba>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	4639      	mov	r1, r7
 8007000:	f7f9 fd82 	bl	8000b08 <__aeabi_dcmpeq>
 8007004:	b918      	cbnz	r0, 800700e <__cvt+0xba>
 8007006:	f1c4 0401 	rsb	r4, r4, #1
 800700a:	f8ca 4000 	str.w	r4, [sl]
 800700e:	f8da 3000 	ldr.w	r3, [sl]
 8007012:	4499      	add	r9, r3
 8007014:	e7d3      	b.n	8006fbe <__cvt+0x6a>
 8007016:	1c59      	adds	r1, r3, #1
 8007018:	9103      	str	r1, [sp, #12]
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	e7d9      	b.n	8006fd2 <__cvt+0x7e>

0800701e <__exponent>:
 800701e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007020:	2900      	cmp	r1, #0
 8007022:	bfba      	itte	lt
 8007024:	4249      	neglt	r1, r1
 8007026:	232d      	movlt	r3, #45	@ 0x2d
 8007028:	232b      	movge	r3, #43	@ 0x2b
 800702a:	2909      	cmp	r1, #9
 800702c:	7002      	strb	r2, [r0, #0]
 800702e:	7043      	strb	r3, [r0, #1]
 8007030:	dd29      	ble.n	8007086 <__exponent+0x68>
 8007032:	f10d 0307 	add.w	r3, sp, #7
 8007036:	461d      	mov	r5, r3
 8007038:	270a      	movs	r7, #10
 800703a:	461a      	mov	r2, r3
 800703c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007040:	fb07 1416 	mls	r4, r7, r6, r1
 8007044:	3430      	adds	r4, #48	@ 0x30
 8007046:	f802 4c01 	strb.w	r4, [r2, #-1]
 800704a:	460c      	mov	r4, r1
 800704c:	2c63      	cmp	r4, #99	@ 0x63
 800704e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007052:	4631      	mov	r1, r6
 8007054:	dcf1      	bgt.n	800703a <__exponent+0x1c>
 8007056:	3130      	adds	r1, #48	@ 0x30
 8007058:	1e94      	subs	r4, r2, #2
 800705a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800705e:	1c41      	adds	r1, r0, #1
 8007060:	4623      	mov	r3, r4
 8007062:	42ab      	cmp	r3, r5
 8007064:	d30a      	bcc.n	800707c <__exponent+0x5e>
 8007066:	f10d 0309 	add.w	r3, sp, #9
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	42ac      	cmp	r4, r5
 800706e:	bf88      	it	hi
 8007070:	2300      	movhi	r3, #0
 8007072:	3302      	adds	r3, #2
 8007074:	4403      	add	r3, r0
 8007076:	1a18      	subs	r0, r3, r0
 8007078:	b003      	add	sp, #12
 800707a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800707c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007080:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007084:	e7ed      	b.n	8007062 <__exponent+0x44>
 8007086:	2330      	movs	r3, #48	@ 0x30
 8007088:	3130      	adds	r1, #48	@ 0x30
 800708a:	7083      	strb	r3, [r0, #2]
 800708c:	70c1      	strb	r1, [r0, #3]
 800708e:	1d03      	adds	r3, r0, #4
 8007090:	e7f1      	b.n	8007076 <__exponent+0x58>
	...

08007094 <_printf_float>:
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	b08d      	sub	sp, #52	@ 0x34
 800709a:	460c      	mov	r4, r1
 800709c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80070a0:	4616      	mov	r6, r2
 80070a2:	461f      	mov	r7, r3
 80070a4:	4605      	mov	r5, r0
 80070a6:	f000 fcbb 	bl	8007a20 <_localeconv_r>
 80070aa:	6803      	ldr	r3, [r0, #0]
 80070ac:	9304      	str	r3, [sp, #16]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7f9 f8fe 	bl	80002b0 <strlen>
 80070b4:	2300      	movs	r3, #0
 80070b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070b8:	f8d8 3000 	ldr.w	r3, [r8]
 80070bc:	9005      	str	r0, [sp, #20]
 80070be:	3307      	adds	r3, #7
 80070c0:	f023 0307 	bic.w	r3, r3, #7
 80070c4:	f103 0208 	add.w	r2, r3, #8
 80070c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070cc:	f8d4 b000 	ldr.w	fp, [r4]
 80070d0:	f8c8 2000 	str.w	r2, [r8]
 80070d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80070dc:	9307      	str	r3, [sp, #28]
 80070de:	f8cd 8018 	str.w	r8, [sp, #24]
 80070e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80070e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ea:	4b9c      	ldr	r3, [pc, #624]	@ (800735c <_printf_float+0x2c8>)
 80070ec:	f04f 32ff 	mov.w	r2, #4294967295
 80070f0:	f7f9 fd3c 	bl	8000b6c <__aeabi_dcmpun>
 80070f4:	bb70      	cbnz	r0, 8007154 <_printf_float+0xc0>
 80070f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070fa:	4b98      	ldr	r3, [pc, #608]	@ (800735c <_printf_float+0x2c8>)
 80070fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007100:	f7f9 fd16 	bl	8000b30 <__aeabi_dcmple>
 8007104:	bb30      	cbnz	r0, 8007154 <_printf_float+0xc0>
 8007106:	2200      	movs	r2, #0
 8007108:	2300      	movs	r3, #0
 800710a:	4640      	mov	r0, r8
 800710c:	4649      	mov	r1, r9
 800710e:	f7f9 fd05 	bl	8000b1c <__aeabi_dcmplt>
 8007112:	b110      	cbz	r0, 800711a <_printf_float+0x86>
 8007114:	232d      	movs	r3, #45	@ 0x2d
 8007116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800711a:	4a91      	ldr	r2, [pc, #580]	@ (8007360 <_printf_float+0x2cc>)
 800711c:	4b91      	ldr	r3, [pc, #580]	@ (8007364 <_printf_float+0x2d0>)
 800711e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007122:	bf94      	ite	ls
 8007124:	4690      	movls	r8, r2
 8007126:	4698      	movhi	r8, r3
 8007128:	2303      	movs	r3, #3
 800712a:	6123      	str	r3, [r4, #16]
 800712c:	f02b 0304 	bic.w	r3, fp, #4
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	f04f 0900 	mov.w	r9, #0
 8007136:	9700      	str	r7, [sp, #0]
 8007138:	4633      	mov	r3, r6
 800713a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800713c:	4621      	mov	r1, r4
 800713e:	4628      	mov	r0, r5
 8007140:	f000 f9d2 	bl	80074e8 <_printf_common>
 8007144:	3001      	adds	r0, #1
 8007146:	f040 808d 	bne.w	8007264 <_printf_float+0x1d0>
 800714a:	f04f 30ff 	mov.w	r0, #4294967295
 800714e:	b00d      	add	sp, #52	@ 0x34
 8007150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007154:	4642      	mov	r2, r8
 8007156:	464b      	mov	r3, r9
 8007158:	4640      	mov	r0, r8
 800715a:	4649      	mov	r1, r9
 800715c:	f7f9 fd06 	bl	8000b6c <__aeabi_dcmpun>
 8007160:	b140      	cbz	r0, 8007174 <_printf_float+0xe0>
 8007162:	464b      	mov	r3, r9
 8007164:	2b00      	cmp	r3, #0
 8007166:	bfbc      	itt	lt
 8007168:	232d      	movlt	r3, #45	@ 0x2d
 800716a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800716e:	4a7e      	ldr	r2, [pc, #504]	@ (8007368 <_printf_float+0x2d4>)
 8007170:	4b7e      	ldr	r3, [pc, #504]	@ (800736c <_printf_float+0x2d8>)
 8007172:	e7d4      	b.n	800711e <_printf_float+0x8a>
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800717a:	9206      	str	r2, [sp, #24]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	d13b      	bne.n	80071f8 <_printf_float+0x164>
 8007180:	2306      	movs	r3, #6
 8007182:	6063      	str	r3, [r4, #4]
 8007184:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007188:	2300      	movs	r3, #0
 800718a:	6022      	str	r2, [r4, #0]
 800718c:	9303      	str	r3, [sp, #12]
 800718e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007190:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007194:	ab09      	add	r3, sp, #36	@ 0x24
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	6861      	ldr	r1, [r4, #4]
 800719a:	ec49 8b10 	vmov	d0, r8, r9
 800719e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80071a2:	4628      	mov	r0, r5
 80071a4:	f7ff fed6 	bl	8006f54 <__cvt>
 80071a8:	9b06      	ldr	r3, [sp, #24]
 80071aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071ac:	2b47      	cmp	r3, #71	@ 0x47
 80071ae:	4680      	mov	r8, r0
 80071b0:	d129      	bne.n	8007206 <_printf_float+0x172>
 80071b2:	1cc8      	adds	r0, r1, #3
 80071b4:	db02      	blt.n	80071bc <_printf_float+0x128>
 80071b6:	6863      	ldr	r3, [r4, #4]
 80071b8:	4299      	cmp	r1, r3
 80071ba:	dd41      	ble.n	8007240 <_printf_float+0x1ac>
 80071bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80071c0:	fa5f fa8a 	uxtb.w	sl, sl
 80071c4:	3901      	subs	r1, #1
 80071c6:	4652      	mov	r2, sl
 80071c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80071ce:	f7ff ff26 	bl	800701e <__exponent>
 80071d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071d4:	1813      	adds	r3, r2, r0
 80071d6:	2a01      	cmp	r2, #1
 80071d8:	4681      	mov	r9, r0
 80071da:	6123      	str	r3, [r4, #16]
 80071dc:	dc02      	bgt.n	80071e4 <_printf_float+0x150>
 80071de:	6822      	ldr	r2, [r4, #0]
 80071e0:	07d2      	lsls	r2, r2, #31
 80071e2:	d501      	bpl.n	80071e8 <_printf_float+0x154>
 80071e4:	3301      	adds	r3, #1
 80071e6:	6123      	str	r3, [r4, #16]
 80071e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0a2      	beq.n	8007136 <_printf_float+0xa2>
 80071f0:	232d      	movs	r3, #45	@ 0x2d
 80071f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071f6:	e79e      	b.n	8007136 <_printf_float+0xa2>
 80071f8:	9a06      	ldr	r2, [sp, #24]
 80071fa:	2a47      	cmp	r2, #71	@ 0x47
 80071fc:	d1c2      	bne.n	8007184 <_printf_float+0xf0>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1c0      	bne.n	8007184 <_printf_float+0xf0>
 8007202:	2301      	movs	r3, #1
 8007204:	e7bd      	b.n	8007182 <_printf_float+0xee>
 8007206:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800720a:	d9db      	bls.n	80071c4 <_printf_float+0x130>
 800720c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007210:	d118      	bne.n	8007244 <_printf_float+0x1b0>
 8007212:	2900      	cmp	r1, #0
 8007214:	6863      	ldr	r3, [r4, #4]
 8007216:	dd0b      	ble.n	8007230 <_printf_float+0x19c>
 8007218:	6121      	str	r1, [r4, #16]
 800721a:	b913      	cbnz	r3, 8007222 <_printf_float+0x18e>
 800721c:	6822      	ldr	r2, [r4, #0]
 800721e:	07d0      	lsls	r0, r2, #31
 8007220:	d502      	bpl.n	8007228 <_printf_float+0x194>
 8007222:	3301      	adds	r3, #1
 8007224:	440b      	add	r3, r1
 8007226:	6123      	str	r3, [r4, #16]
 8007228:	65a1      	str	r1, [r4, #88]	@ 0x58
 800722a:	f04f 0900 	mov.w	r9, #0
 800722e:	e7db      	b.n	80071e8 <_printf_float+0x154>
 8007230:	b913      	cbnz	r3, 8007238 <_printf_float+0x1a4>
 8007232:	6822      	ldr	r2, [r4, #0]
 8007234:	07d2      	lsls	r2, r2, #31
 8007236:	d501      	bpl.n	800723c <_printf_float+0x1a8>
 8007238:	3302      	adds	r3, #2
 800723a:	e7f4      	b.n	8007226 <_printf_float+0x192>
 800723c:	2301      	movs	r3, #1
 800723e:	e7f2      	b.n	8007226 <_printf_float+0x192>
 8007240:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007246:	4299      	cmp	r1, r3
 8007248:	db05      	blt.n	8007256 <_printf_float+0x1c2>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	6121      	str	r1, [r4, #16]
 800724e:	07d8      	lsls	r0, r3, #31
 8007250:	d5ea      	bpl.n	8007228 <_printf_float+0x194>
 8007252:	1c4b      	adds	r3, r1, #1
 8007254:	e7e7      	b.n	8007226 <_printf_float+0x192>
 8007256:	2900      	cmp	r1, #0
 8007258:	bfd4      	ite	le
 800725a:	f1c1 0202 	rsble	r2, r1, #2
 800725e:	2201      	movgt	r2, #1
 8007260:	4413      	add	r3, r2
 8007262:	e7e0      	b.n	8007226 <_printf_float+0x192>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	055a      	lsls	r2, r3, #21
 8007268:	d407      	bmi.n	800727a <_printf_float+0x1e6>
 800726a:	6923      	ldr	r3, [r4, #16]
 800726c:	4642      	mov	r2, r8
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	47b8      	blx	r7
 8007274:	3001      	adds	r0, #1
 8007276:	d12b      	bne.n	80072d0 <_printf_float+0x23c>
 8007278:	e767      	b.n	800714a <_printf_float+0xb6>
 800727a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800727e:	f240 80dd 	bls.w	800743c <_printf_float+0x3a8>
 8007282:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007286:	2200      	movs	r2, #0
 8007288:	2300      	movs	r3, #0
 800728a:	f7f9 fc3d 	bl	8000b08 <__aeabi_dcmpeq>
 800728e:	2800      	cmp	r0, #0
 8007290:	d033      	beq.n	80072fa <_printf_float+0x266>
 8007292:	4a37      	ldr	r2, [pc, #220]	@ (8007370 <_printf_float+0x2dc>)
 8007294:	2301      	movs	r3, #1
 8007296:	4631      	mov	r1, r6
 8007298:	4628      	mov	r0, r5
 800729a:	47b8      	blx	r7
 800729c:	3001      	adds	r0, #1
 800729e:	f43f af54 	beq.w	800714a <_printf_float+0xb6>
 80072a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80072a6:	4543      	cmp	r3, r8
 80072a8:	db02      	blt.n	80072b0 <_printf_float+0x21c>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	07d8      	lsls	r0, r3, #31
 80072ae:	d50f      	bpl.n	80072d0 <_printf_float+0x23c>
 80072b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072b4:	4631      	mov	r1, r6
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b8      	blx	r7
 80072ba:	3001      	adds	r0, #1
 80072bc:	f43f af45 	beq.w	800714a <_printf_float+0xb6>
 80072c0:	f04f 0900 	mov.w	r9, #0
 80072c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80072c8:	f104 0a1a 	add.w	sl, r4, #26
 80072cc:	45c8      	cmp	r8, r9
 80072ce:	dc09      	bgt.n	80072e4 <_printf_float+0x250>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	079b      	lsls	r3, r3, #30
 80072d4:	f100 8103 	bmi.w	80074de <_printf_float+0x44a>
 80072d8:	68e0      	ldr	r0, [r4, #12]
 80072da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072dc:	4298      	cmp	r0, r3
 80072de:	bfb8      	it	lt
 80072e0:	4618      	movlt	r0, r3
 80072e2:	e734      	b.n	800714e <_printf_float+0xba>
 80072e4:	2301      	movs	r3, #1
 80072e6:	4652      	mov	r2, sl
 80072e8:	4631      	mov	r1, r6
 80072ea:	4628      	mov	r0, r5
 80072ec:	47b8      	blx	r7
 80072ee:	3001      	adds	r0, #1
 80072f0:	f43f af2b 	beq.w	800714a <_printf_float+0xb6>
 80072f4:	f109 0901 	add.w	r9, r9, #1
 80072f8:	e7e8      	b.n	80072cc <_printf_float+0x238>
 80072fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	dc39      	bgt.n	8007374 <_printf_float+0x2e0>
 8007300:	4a1b      	ldr	r2, [pc, #108]	@ (8007370 <_printf_float+0x2dc>)
 8007302:	2301      	movs	r3, #1
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	f43f af1d 	beq.w	800714a <_printf_float+0xb6>
 8007310:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007314:	ea59 0303 	orrs.w	r3, r9, r3
 8007318:	d102      	bne.n	8007320 <_printf_float+0x28c>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	07d9      	lsls	r1, r3, #31
 800731e:	d5d7      	bpl.n	80072d0 <_printf_float+0x23c>
 8007320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007324:	4631      	mov	r1, r6
 8007326:	4628      	mov	r0, r5
 8007328:	47b8      	blx	r7
 800732a:	3001      	adds	r0, #1
 800732c:	f43f af0d 	beq.w	800714a <_printf_float+0xb6>
 8007330:	f04f 0a00 	mov.w	sl, #0
 8007334:	f104 0b1a 	add.w	fp, r4, #26
 8007338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800733a:	425b      	negs	r3, r3
 800733c:	4553      	cmp	r3, sl
 800733e:	dc01      	bgt.n	8007344 <_printf_float+0x2b0>
 8007340:	464b      	mov	r3, r9
 8007342:	e793      	b.n	800726c <_printf_float+0x1d8>
 8007344:	2301      	movs	r3, #1
 8007346:	465a      	mov	r2, fp
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	f43f aefb 	beq.w	800714a <_printf_float+0xb6>
 8007354:	f10a 0a01 	add.w	sl, sl, #1
 8007358:	e7ee      	b.n	8007338 <_printf_float+0x2a4>
 800735a:	bf00      	nop
 800735c:	7fefffff 	.word	0x7fefffff
 8007360:	08009b58 	.word	0x08009b58
 8007364:	08009b5c 	.word	0x08009b5c
 8007368:	08009b60 	.word	0x08009b60
 800736c:	08009b64 	.word	0x08009b64
 8007370:	08009b68 	.word	0x08009b68
 8007374:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007376:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800737a:	4553      	cmp	r3, sl
 800737c:	bfa8      	it	ge
 800737e:	4653      	movge	r3, sl
 8007380:	2b00      	cmp	r3, #0
 8007382:	4699      	mov	r9, r3
 8007384:	dc36      	bgt.n	80073f4 <_printf_float+0x360>
 8007386:	f04f 0b00 	mov.w	fp, #0
 800738a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800738e:	f104 021a 	add.w	r2, r4, #26
 8007392:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007394:	9306      	str	r3, [sp, #24]
 8007396:	eba3 0309 	sub.w	r3, r3, r9
 800739a:	455b      	cmp	r3, fp
 800739c:	dc31      	bgt.n	8007402 <_printf_float+0x36e>
 800739e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a0:	459a      	cmp	sl, r3
 80073a2:	dc3a      	bgt.n	800741a <_printf_float+0x386>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	07da      	lsls	r2, r3, #31
 80073a8:	d437      	bmi.n	800741a <_printf_float+0x386>
 80073aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ac:	ebaa 0903 	sub.w	r9, sl, r3
 80073b0:	9b06      	ldr	r3, [sp, #24]
 80073b2:	ebaa 0303 	sub.w	r3, sl, r3
 80073b6:	4599      	cmp	r9, r3
 80073b8:	bfa8      	it	ge
 80073ba:	4699      	movge	r9, r3
 80073bc:	f1b9 0f00 	cmp.w	r9, #0
 80073c0:	dc33      	bgt.n	800742a <_printf_float+0x396>
 80073c2:	f04f 0800 	mov.w	r8, #0
 80073c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ca:	f104 0b1a 	add.w	fp, r4, #26
 80073ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d0:	ebaa 0303 	sub.w	r3, sl, r3
 80073d4:	eba3 0309 	sub.w	r3, r3, r9
 80073d8:	4543      	cmp	r3, r8
 80073da:	f77f af79 	ble.w	80072d0 <_printf_float+0x23c>
 80073de:	2301      	movs	r3, #1
 80073e0:	465a      	mov	r2, fp
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	f43f aeae 	beq.w	800714a <_printf_float+0xb6>
 80073ee:	f108 0801 	add.w	r8, r8, #1
 80073f2:	e7ec      	b.n	80073ce <_printf_float+0x33a>
 80073f4:	4642      	mov	r2, r8
 80073f6:	4631      	mov	r1, r6
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b8      	blx	r7
 80073fc:	3001      	adds	r0, #1
 80073fe:	d1c2      	bne.n	8007386 <_printf_float+0x2f2>
 8007400:	e6a3      	b.n	800714a <_printf_float+0xb6>
 8007402:	2301      	movs	r3, #1
 8007404:	4631      	mov	r1, r6
 8007406:	4628      	mov	r0, r5
 8007408:	9206      	str	r2, [sp, #24]
 800740a:	47b8      	blx	r7
 800740c:	3001      	adds	r0, #1
 800740e:	f43f ae9c 	beq.w	800714a <_printf_float+0xb6>
 8007412:	9a06      	ldr	r2, [sp, #24]
 8007414:	f10b 0b01 	add.w	fp, fp, #1
 8007418:	e7bb      	b.n	8007392 <_printf_float+0x2fe>
 800741a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	d1c0      	bne.n	80073aa <_printf_float+0x316>
 8007428:	e68f      	b.n	800714a <_printf_float+0xb6>
 800742a:	9a06      	ldr	r2, [sp, #24]
 800742c:	464b      	mov	r3, r9
 800742e:	4442      	add	r2, r8
 8007430:	4631      	mov	r1, r6
 8007432:	4628      	mov	r0, r5
 8007434:	47b8      	blx	r7
 8007436:	3001      	adds	r0, #1
 8007438:	d1c3      	bne.n	80073c2 <_printf_float+0x32e>
 800743a:	e686      	b.n	800714a <_printf_float+0xb6>
 800743c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007440:	f1ba 0f01 	cmp.w	sl, #1
 8007444:	dc01      	bgt.n	800744a <_printf_float+0x3b6>
 8007446:	07db      	lsls	r3, r3, #31
 8007448:	d536      	bpl.n	80074b8 <_printf_float+0x424>
 800744a:	2301      	movs	r3, #1
 800744c:	4642      	mov	r2, r8
 800744e:	4631      	mov	r1, r6
 8007450:	4628      	mov	r0, r5
 8007452:	47b8      	blx	r7
 8007454:	3001      	adds	r0, #1
 8007456:	f43f ae78 	beq.w	800714a <_printf_float+0xb6>
 800745a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800745e:	4631      	mov	r1, r6
 8007460:	4628      	mov	r0, r5
 8007462:	47b8      	blx	r7
 8007464:	3001      	adds	r0, #1
 8007466:	f43f ae70 	beq.w	800714a <_printf_float+0xb6>
 800746a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800746e:	2200      	movs	r2, #0
 8007470:	2300      	movs	r3, #0
 8007472:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007476:	f7f9 fb47 	bl	8000b08 <__aeabi_dcmpeq>
 800747a:	b9c0      	cbnz	r0, 80074ae <_printf_float+0x41a>
 800747c:	4653      	mov	r3, sl
 800747e:	f108 0201 	add.w	r2, r8, #1
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	d10c      	bne.n	80074a6 <_printf_float+0x412>
 800748c:	e65d      	b.n	800714a <_printf_float+0xb6>
 800748e:	2301      	movs	r3, #1
 8007490:	465a      	mov	r2, fp
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	f43f ae56 	beq.w	800714a <_printf_float+0xb6>
 800749e:	f108 0801 	add.w	r8, r8, #1
 80074a2:	45d0      	cmp	r8, sl
 80074a4:	dbf3      	blt.n	800748e <_printf_float+0x3fa>
 80074a6:	464b      	mov	r3, r9
 80074a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80074ac:	e6df      	b.n	800726e <_printf_float+0x1da>
 80074ae:	f04f 0800 	mov.w	r8, #0
 80074b2:	f104 0b1a 	add.w	fp, r4, #26
 80074b6:	e7f4      	b.n	80074a2 <_printf_float+0x40e>
 80074b8:	2301      	movs	r3, #1
 80074ba:	4642      	mov	r2, r8
 80074bc:	e7e1      	b.n	8007482 <_printf_float+0x3ee>
 80074be:	2301      	movs	r3, #1
 80074c0:	464a      	mov	r2, r9
 80074c2:	4631      	mov	r1, r6
 80074c4:	4628      	mov	r0, r5
 80074c6:	47b8      	blx	r7
 80074c8:	3001      	adds	r0, #1
 80074ca:	f43f ae3e 	beq.w	800714a <_printf_float+0xb6>
 80074ce:	f108 0801 	add.w	r8, r8, #1
 80074d2:	68e3      	ldr	r3, [r4, #12]
 80074d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074d6:	1a5b      	subs	r3, r3, r1
 80074d8:	4543      	cmp	r3, r8
 80074da:	dcf0      	bgt.n	80074be <_printf_float+0x42a>
 80074dc:	e6fc      	b.n	80072d8 <_printf_float+0x244>
 80074de:	f04f 0800 	mov.w	r8, #0
 80074e2:	f104 0919 	add.w	r9, r4, #25
 80074e6:	e7f4      	b.n	80074d2 <_printf_float+0x43e>

080074e8 <_printf_common>:
 80074e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ec:	4616      	mov	r6, r2
 80074ee:	4698      	mov	r8, r3
 80074f0:	688a      	ldr	r2, [r1, #8]
 80074f2:	690b      	ldr	r3, [r1, #16]
 80074f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074f8:	4293      	cmp	r3, r2
 80074fa:	bfb8      	it	lt
 80074fc:	4613      	movlt	r3, r2
 80074fe:	6033      	str	r3, [r6, #0]
 8007500:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007504:	4607      	mov	r7, r0
 8007506:	460c      	mov	r4, r1
 8007508:	b10a      	cbz	r2, 800750e <_printf_common+0x26>
 800750a:	3301      	adds	r3, #1
 800750c:	6033      	str	r3, [r6, #0]
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	0699      	lsls	r1, r3, #26
 8007512:	bf42      	ittt	mi
 8007514:	6833      	ldrmi	r3, [r6, #0]
 8007516:	3302      	addmi	r3, #2
 8007518:	6033      	strmi	r3, [r6, #0]
 800751a:	6825      	ldr	r5, [r4, #0]
 800751c:	f015 0506 	ands.w	r5, r5, #6
 8007520:	d106      	bne.n	8007530 <_printf_common+0x48>
 8007522:	f104 0a19 	add.w	sl, r4, #25
 8007526:	68e3      	ldr	r3, [r4, #12]
 8007528:	6832      	ldr	r2, [r6, #0]
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	42ab      	cmp	r3, r5
 800752e:	dc26      	bgt.n	800757e <_printf_common+0x96>
 8007530:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007534:	6822      	ldr	r2, [r4, #0]
 8007536:	3b00      	subs	r3, #0
 8007538:	bf18      	it	ne
 800753a:	2301      	movne	r3, #1
 800753c:	0692      	lsls	r2, r2, #26
 800753e:	d42b      	bmi.n	8007598 <_printf_common+0xb0>
 8007540:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007544:	4641      	mov	r1, r8
 8007546:	4638      	mov	r0, r7
 8007548:	47c8      	blx	r9
 800754a:	3001      	adds	r0, #1
 800754c:	d01e      	beq.n	800758c <_printf_common+0xa4>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	6922      	ldr	r2, [r4, #16]
 8007552:	f003 0306 	and.w	r3, r3, #6
 8007556:	2b04      	cmp	r3, #4
 8007558:	bf02      	ittt	eq
 800755a:	68e5      	ldreq	r5, [r4, #12]
 800755c:	6833      	ldreq	r3, [r6, #0]
 800755e:	1aed      	subeq	r5, r5, r3
 8007560:	68a3      	ldr	r3, [r4, #8]
 8007562:	bf0c      	ite	eq
 8007564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007568:	2500      	movne	r5, #0
 800756a:	4293      	cmp	r3, r2
 800756c:	bfc4      	itt	gt
 800756e:	1a9b      	subgt	r3, r3, r2
 8007570:	18ed      	addgt	r5, r5, r3
 8007572:	2600      	movs	r6, #0
 8007574:	341a      	adds	r4, #26
 8007576:	42b5      	cmp	r5, r6
 8007578:	d11a      	bne.n	80075b0 <_printf_common+0xc8>
 800757a:	2000      	movs	r0, #0
 800757c:	e008      	b.n	8007590 <_printf_common+0xa8>
 800757e:	2301      	movs	r3, #1
 8007580:	4652      	mov	r2, sl
 8007582:	4641      	mov	r1, r8
 8007584:	4638      	mov	r0, r7
 8007586:	47c8      	blx	r9
 8007588:	3001      	adds	r0, #1
 800758a:	d103      	bne.n	8007594 <_printf_common+0xac>
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007594:	3501      	adds	r5, #1
 8007596:	e7c6      	b.n	8007526 <_printf_common+0x3e>
 8007598:	18e1      	adds	r1, r4, r3
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	2030      	movs	r0, #48	@ 0x30
 800759e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075a2:	4422      	add	r2, r4
 80075a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075ac:	3302      	adds	r3, #2
 80075ae:	e7c7      	b.n	8007540 <_printf_common+0x58>
 80075b0:	2301      	movs	r3, #1
 80075b2:	4622      	mov	r2, r4
 80075b4:	4641      	mov	r1, r8
 80075b6:	4638      	mov	r0, r7
 80075b8:	47c8      	blx	r9
 80075ba:	3001      	adds	r0, #1
 80075bc:	d0e6      	beq.n	800758c <_printf_common+0xa4>
 80075be:	3601      	adds	r6, #1
 80075c0:	e7d9      	b.n	8007576 <_printf_common+0x8e>
	...

080075c4 <_printf_i>:
 80075c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	7e0f      	ldrb	r7, [r1, #24]
 80075ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075cc:	2f78      	cmp	r7, #120	@ 0x78
 80075ce:	4691      	mov	r9, r2
 80075d0:	4680      	mov	r8, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	469a      	mov	sl, r3
 80075d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075da:	d807      	bhi.n	80075ec <_printf_i+0x28>
 80075dc:	2f62      	cmp	r7, #98	@ 0x62
 80075de:	d80a      	bhi.n	80075f6 <_printf_i+0x32>
 80075e0:	2f00      	cmp	r7, #0
 80075e2:	f000 80d2 	beq.w	800778a <_printf_i+0x1c6>
 80075e6:	2f58      	cmp	r7, #88	@ 0x58
 80075e8:	f000 80b9 	beq.w	800775e <_printf_i+0x19a>
 80075ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075f4:	e03a      	b.n	800766c <_printf_i+0xa8>
 80075f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075fa:	2b15      	cmp	r3, #21
 80075fc:	d8f6      	bhi.n	80075ec <_printf_i+0x28>
 80075fe:	a101      	add	r1, pc, #4	@ (adr r1, 8007604 <_printf_i+0x40>)
 8007600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007604:	0800765d 	.word	0x0800765d
 8007608:	08007671 	.word	0x08007671
 800760c:	080075ed 	.word	0x080075ed
 8007610:	080075ed 	.word	0x080075ed
 8007614:	080075ed 	.word	0x080075ed
 8007618:	080075ed 	.word	0x080075ed
 800761c:	08007671 	.word	0x08007671
 8007620:	080075ed 	.word	0x080075ed
 8007624:	080075ed 	.word	0x080075ed
 8007628:	080075ed 	.word	0x080075ed
 800762c:	080075ed 	.word	0x080075ed
 8007630:	08007771 	.word	0x08007771
 8007634:	0800769b 	.word	0x0800769b
 8007638:	0800772b 	.word	0x0800772b
 800763c:	080075ed 	.word	0x080075ed
 8007640:	080075ed 	.word	0x080075ed
 8007644:	08007793 	.word	0x08007793
 8007648:	080075ed 	.word	0x080075ed
 800764c:	0800769b 	.word	0x0800769b
 8007650:	080075ed 	.word	0x080075ed
 8007654:	080075ed 	.word	0x080075ed
 8007658:	08007733 	.word	0x08007733
 800765c:	6833      	ldr	r3, [r6, #0]
 800765e:	1d1a      	adds	r2, r3, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6032      	str	r2, [r6, #0]
 8007664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007668:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800766c:	2301      	movs	r3, #1
 800766e:	e09d      	b.n	80077ac <_printf_i+0x1e8>
 8007670:	6833      	ldr	r3, [r6, #0]
 8007672:	6820      	ldr	r0, [r4, #0]
 8007674:	1d19      	adds	r1, r3, #4
 8007676:	6031      	str	r1, [r6, #0]
 8007678:	0606      	lsls	r6, r0, #24
 800767a:	d501      	bpl.n	8007680 <_printf_i+0xbc>
 800767c:	681d      	ldr	r5, [r3, #0]
 800767e:	e003      	b.n	8007688 <_printf_i+0xc4>
 8007680:	0645      	lsls	r5, r0, #25
 8007682:	d5fb      	bpl.n	800767c <_printf_i+0xb8>
 8007684:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007688:	2d00      	cmp	r5, #0
 800768a:	da03      	bge.n	8007694 <_printf_i+0xd0>
 800768c:	232d      	movs	r3, #45	@ 0x2d
 800768e:	426d      	negs	r5, r5
 8007690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007694:	4859      	ldr	r0, [pc, #356]	@ (80077fc <_printf_i+0x238>)
 8007696:	230a      	movs	r3, #10
 8007698:	e011      	b.n	80076be <_printf_i+0xfa>
 800769a:	6821      	ldr	r1, [r4, #0]
 800769c:	6833      	ldr	r3, [r6, #0]
 800769e:	0608      	lsls	r0, r1, #24
 80076a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80076a4:	d402      	bmi.n	80076ac <_printf_i+0xe8>
 80076a6:	0649      	lsls	r1, r1, #25
 80076a8:	bf48      	it	mi
 80076aa:	b2ad      	uxthmi	r5, r5
 80076ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80076ae:	4853      	ldr	r0, [pc, #332]	@ (80077fc <_printf_i+0x238>)
 80076b0:	6033      	str	r3, [r6, #0]
 80076b2:	bf14      	ite	ne
 80076b4:	230a      	movne	r3, #10
 80076b6:	2308      	moveq	r3, #8
 80076b8:	2100      	movs	r1, #0
 80076ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076be:	6866      	ldr	r6, [r4, #4]
 80076c0:	60a6      	str	r6, [r4, #8]
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	bfa2      	ittt	ge
 80076c6:	6821      	ldrge	r1, [r4, #0]
 80076c8:	f021 0104 	bicge.w	r1, r1, #4
 80076cc:	6021      	strge	r1, [r4, #0]
 80076ce:	b90d      	cbnz	r5, 80076d4 <_printf_i+0x110>
 80076d0:	2e00      	cmp	r6, #0
 80076d2:	d04b      	beq.n	800776c <_printf_i+0x1a8>
 80076d4:	4616      	mov	r6, r2
 80076d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80076da:	fb03 5711 	mls	r7, r3, r1, r5
 80076de:	5dc7      	ldrb	r7, [r0, r7]
 80076e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076e4:	462f      	mov	r7, r5
 80076e6:	42bb      	cmp	r3, r7
 80076e8:	460d      	mov	r5, r1
 80076ea:	d9f4      	bls.n	80076d6 <_printf_i+0x112>
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d10b      	bne.n	8007708 <_printf_i+0x144>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	07df      	lsls	r7, r3, #31
 80076f4:	d508      	bpl.n	8007708 <_printf_i+0x144>
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	6861      	ldr	r1, [r4, #4]
 80076fa:	4299      	cmp	r1, r3
 80076fc:	bfde      	ittt	le
 80076fe:	2330      	movle	r3, #48	@ 0x30
 8007700:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007704:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007708:	1b92      	subs	r2, r2, r6
 800770a:	6122      	str	r2, [r4, #16]
 800770c:	f8cd a000 	str.w	sl, [sp]
 8007710:	464b      	mov	r3, r9
 8007712:	aa03      	add	r2, sp, #12
 8007714:	4621      	mov	r1, r4
 8007716:	4640      	mov	r0, r8
 8007718:	f7ff fee6 	bl	80074e8 <_printf_common>
 800771c:	3001      	adds	r0, #1
 800771e:	d14a      	bne.n	80077b6 <_printf_i+0x1f2>
 8007720:	f04f 30ff 	mov.w	r0, #4294967295
 8007724:	b004      	add	sp, #16
 8007726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	f043 0320 	orr.w	r3, r3, #32
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	4833      	ldr	r0, [pc, #204]	@ (8007800 <_printf_i+0x23c>)
 8007734:	2778      	movs	r7, #120	@ 0x78
 8007736:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	6831      	ldr	r1, [r6, #0]
 800773e:	061f      	lsls	r7, r3, #24
 8007740:	f851 5b04 	ldr.w	r5, [r1], #4
 8007744:	d402      	bmi.n	800774c <_printf_i+0x188>
 8007746:	065f      	lsls	r7, r3, #25
 8007748:	bf48      	it	mi
 800774a:	b2ad      	uxthmi	r5, r5
 800774c:	6031      	str	r1, [r6, #0]
 800774e:	07d9      	lsls	r1, r3, #31
 8007750:	bf44      	itt	mi
 8007752:	f043 0320 	orrmi.w	r3, r3, #32
 8007756:	6023      	strmi	r3, [r4, #0]
 8007758:	b11d      	cbz	r5, 8007762 <_printf_i+0x19e>
 800775a:	2310      	movs	r3, #16
 800775c:	e7ac      	b.n	80076b8 <_printf_i+0xf4>
 800775e:	4827      	ldr	r0, [pc, #156]	@ (80077fc <_printf_i+0x238>)
 8007760:	e7e9      	b.n	8007736 <_printf_i+0x172>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f023 0320 	bic.w	r3, r3, #32
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	e7f6      	b.n	800775a <_printf_i+0x196>
 800776c:	4616      	mov	r6, r2
 800776e:	e7bd      	b.n	80076ec <_printf_i+0x128>
 8007770:	6833      	ldr	r3, [r6, #0]
 8007772:	6825      	ldr	r5, [r4, #0]
 8007774:	6961      	ldr	r1, [r4, #20]
 8007776:	1d18      	adds	r0, r3, #4
 8007778:	6030      	str	r0, [r6, #0]
 800777a:	062e      	lsls	r6, r5, #24
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	d501      	bpl.n	8007784 <_printf_i+0x1c0>
 8007780:	6019      	str	r1, [r3, #0]
 8007782:	e002      	b.n	800778a <_printf_i+0x1c6>
 8007784:	0668      	lsls	r0, r5, #25
 8007786:	d5fb      	bpl.n	8007780 <_printf_i+0x1bc>
 8007788:	8019      	strh	r1, [r3, #0]
 800778a:	2300      	movs	r3, #0
 800778c:	6123      	str	r3, [r4, #16]
 800778e:	4616      	mov	r6, r2
 8007790:	e7bc      	b.n	800770c <_printf_i+0x148>
 8007792:	6833      	ldr	r3, [r6, #0]
 8007794:	1d1a      	adds	r2, r3, #4
 8007796:	6032      	str	r2, [r6, #0]
 8007798:	681e      	ldr	r6, [r3, #0]
 800779a:	6862      	ldr	r2, [r4, #4]
 800779c:	2100      	movs	r1, #0
 800779e:	4630      	mov	r0, r6
 80077a0:	f7f8 fd36 	bl	8000210 <memchr>
 80077a4:	b108      	cbz	r0, 80077aa <_printf_i+0x1e6>
 80077a6:	1b80      	subs	r0, r0, r6
 80077a8:	6060      	str	r0, [r4, #4]
 80077aa:	6863      	ldr	r3, [r4, #4]
 80077ac:	6123      	str	r3, [r4, #16]
 80077ae:	2300      	movs	r3, #0
 80077b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077b4:	e7aa      	b.n	800770c <_printf_i+0x148>
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	4632      	mov	r2, r6
 80077ba:	4649      	mov	r1, r9
 80077bc:	4640      	mov	r0, r8
 80077be:	47d0      	blx	sl
 80077c0:	3001      	adds	r0, #1
 80077c2:	d0ad      	beq.n	8007720 <_printf_i+0x15c>
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	079b      	lsls	r3, r3, #30
 80077c8:	d413      	bmi.n	80077f2 <_printf_i+0x22e>
 80077ca:	68e0      	ldr	r0, [r4, #12]
 80077cc:	9b03      	ldr	r3, [sp, #12]
 80077ce:	4298      	cmp	r0, r3
 80077d0:	bfb8      	it	lt
 80077d2:	4618      	movlt	r0, r3
 80077d4:	e7a6      	b.n	8007724 <_printf_i+0x160>
 80077d6:	2301      	movs	r3, #1
 80077d8:	4632      	mov	r2, r6
 80077da:	4649      	mov	r1, r9
 80077dc:	4640      	mov	r0, r8
 80077de:	47d0      	blx	sl
 80077e0:	3001      	adds	r0, #1
 80077e2:	d09d      	beq.n	8007720 <_printf_i+0x15c>
 80077e4:	3501      	adds	r5, #1
 80077e6:	68e3      	ldr	r3, [r4, #12]
 80077e8:	9903      	ldr	r1, [sp, #12]
 80077ea:	1a5b      	subs	r3, r3, r1
 80077ec:	42ab      	cmp	r3, r5
 80077ee:	dcf2      	bgt.n	80077d6 <_printf_i+0x212>
 80077f0:	e7eb      	b.n	80077ca <_printf_i+0x206>
 80077f2:	2500      	movs	r5, #0
 80077f4:	f104 0619 	add.w	r6, r4, #25
 80077f8:	e7f5      	b.n	80077e6 <_printf_i+0x222>
 80077fa:	bf00      	nop
 80077fc:	08009b6a 	.word	0x08009b6a
 8007800:	08009b7b 	.word	0x08009b7b

08007804 <std>:
 8007804:	2300      	movs	r3, #0
 8007806:	b510      	push	{r4, lr}
 8007808:	4604      	mov	r4, r0
 800780a:	e9c0 3300 	strd	r3, r3, [r0]
 800780e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007812:	6083      	str	r3, [r0, #8]
 8007814:	8181      	strh	r1, [r0, #12]
 8007816:	6643      	str	r3, [r0, #100]	@ 0x64
 8007818:	81c2      	strh	r2, [r0, #14]
 800781a:	6183      	str	r3, [r0, #24]
 800781c:	4619      	mov	r1, r3
 800781e:	2208      	movs	r2, #8
 8007820:	305c      	adds	r0, #92	@ 0x5c
 8007822:	f000 f8f4 	bl	8007a0e <memset>
 8007826:	4b0d      	ldr	r3, [pc, #52]	@ (800785c <std+0x58>)
 8007828:	6263      	str	r3, [r4, #36]	@ 0x24
 800782a:	4b0d      	ldr	r3, [pc, #52]	@ (8007860 <std+0x5c>)
 800782c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800782e:	4b0d      	ldr	r3, [pc, #52]	@ (8007864 <std+0x60>)
 8007830:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007832:	4b0d      	ldr	r3, [pc, #52]	@ (8007868 <std+0x64>)
 8007834:	6323      	str	r3, [r4, #48]	@ 0x30
 8007836:	4b0d      	ldr	r3, [pc, #52]	@ (800786c <std+0x68>)
 8007838:	6224      	str	r4, [r4, #32]
 800783a:	429c      	cmp	r4, r3
 800783c:	d006      	beq.n	800784c <std+0x48>
 800783e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007842:	4294      	cmp	r4, r2
 8007844:	d002      	beq.n	800784c <std+0x48>
 8007846:	33d0      	adds	r3, #208	@ 0xd0
 8007848:	429c      	cmp	r4, r3
 800784a:	d105      	bne.n	8007858 <std+0x54>
 800784c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007854:	f000 b968 	b.w	8007b28 <__retarget_lock_init_recursive>
 8007858:	bd10      	pop	{r4, pc}
 800785a:	bf00      	nop
 800785c:	08007989 	.word	0x08007989
 8007860:	080079ab 	.word	0x080079ab
 8007864:	080079e3 	.word	0x080079e3
 8007868:	08007a07 	.word	0x08007a07
 800786c:	200005e4 	.word	0x200005e4

08007870 <stdio_exit_handler>:
 8007870:	4a02      	ldr	r2, [pc, #8]	@ (800787c <stdio_exit_handler+0xc>)
 8007872:	4903      	ldr	r1, [pc, #12]	@ (8007880 <stdio_exit_handler+0x10>)
 8007874:	4803      	ldr	r0, [pc, #12]	@ (8007884 <stdio_exit_handler+0x14>)
 8007876:	f000 b869 	b.w	800794c <_fwalk_sglue>
 800787a:	bf00      	nop
 800787c:	20000050 	.word	0x20000050
 8007880:	08009089 	.word	0x08009089
 8007884:	20000060 	.word	0x20000060

08007888 <cleanup_stdio>:
 8007888:	6841      	ldr	r1, [r0, #4]
 800788a:	4b0c      	ldr	r3, [pc, #48]	@ (80078bc <cleanup_stdio+0x34>)
 800788c:	4299      	cmp	r1, r3
 800788e:	b510      	push	{r4, lr}
 8007890:	4604      	mov	r4, r0
 8007892:	d001      	beq.n	8007898 <cleanup_stdio+0x10>
 8007894:	f001 fbf8 	bl	8009088 <_fflush_r>
 8007898:	68a1      	ldr	r1, [r4, #8]
 800789a:	4b09      	ldr	r3, [pc, #36]	@ (80078c0 <cleanup_stdio+0x38>)
 800789c:	4299      	cmp	r1, r3
 800789e:	d002      	beq.n	80078a6 <cleanup_stdio+0x1e>
 80078a0:	4620      	mov	r0, r4
 80078a2:	f001 fbf1 	bl	8009088 <_fflush_r>
 80078a6:	68e1      	ldr	r1, [r4, #12]
 80078a8:	4b06      	ldr	r3, [pc, #24]	@ (80078c4 <cleanup_stdio+0x3c>)
 80078aa:	4299      	cmp	r1, r3
 80078ac:	d004      	beq.n	80078b8 <cleanup_stdio+0x30>
 80078ae:	4620      	mov	r0, r4
 80078b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b4:	f001 bbe8 	b.w	8009088 <_fflush_r>
 80078b8:	bd10      	pop	{r4, pc}
 80078ba:	bf00      	nop
 80078bc:	200005e4 	.word	0x200005e4
 80078c0:	2000064c 	.word	0x2000064c
 80078c4:	200006b4 	.word	0x200006b4

080078c8 <global_stdio_init.part.0>:
 80078c8:	b510      	push	{r4, lr}
 80078ca:	4b0b      	ldr	r3, [pc, #44]	@ (80078f8 <global_stdio_init.part.0+0x30>)
 80078cc:	4c0b      	ldr	r4, [pc, #44]	@ (80078fc <global_stdio_init.part.0+0x34>)
 80078ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007900 <global_stdio_init.part.0+0x38>)
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	4620      	mov	r0, r4
 80078d4:	2200      	movs	r2, #0
 80078d6:	2104      	movs	r1, #4
 80078d8:	f7ff ff94 	bl	8007804 <std>
 80078dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078e0:	2201      	movs	r2, #1
 80078e2:	2109      	movs	r1, #9
 80078e4:	f7ff ff8e 	bl	8007804 <std>
 80078e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078ec:	2202      	movs	r2, #2
 80078ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078f2:	2112      	movs	r1, #18
 80078f4:	f7ff bf86 	b.w	8007804 <std>
 80078f8:	2000071c 	.word	0x2000071c
 80078fc:	200005e4 	.word	0x200005e4
 8007900:	08007871 	.word	0x08007871

08007904 <__sfp_lock_acquire>:
 8007904:	4801      	ldr	r0, [pc, #4]	@ (800790c <__sfp_lock_acquire+0x8>)
 8007906:	f000 b910 	b.w	8007b2a <__retarget_lock_acquire_recursive>
 800790a:	bf00      	nop
 800790c:	20000725 	.word	0x20000725

08007910 <__sfp_lock_release>:
 8007910:	4801      	ldr	r0, [pc, #4]	@ (8007918 <__sfp_lock_release+0x8>)
 8007912:	f000 b90b 	b.w	8007b2c <__retarget_lock_release_recursive>
 8007916:	bf00      	nop
 8007918:	20000725 	.word	0x20000725

0800791c <__sinit>:
 800791c:	b510      	push	{r4, lr}
 800791e:	4604      	mov	r4, r0
 8007920:	f7ff fff0 	bl	8007904 <__sfp_lock_acquire>
 8007924:	6a23      	ldr	r3, [r4, #32]
 8007926:	b11b      	cbz	r3, 8007930 <__sinit+0x14>
 8007928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800792c:	f7ff bff0 	b.w	8007910 <__sfp_lock_release>
 8007930:	4b04      	ldr	r3, [pc, #16]	@ (8007944 <__sinit+0x28>)
 8007932:	6223      	str	r3, [r4, #32]
 8007934:	4b04      	ldr	r3, [pc, #16]	@ (8007948 <__sinit+0x2c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f5      	bne.n	8007928 <__sinit+0xc>
 800793c:	f7ff ffc4 	bl	80078c8 <global_stdio_init.part.0>
 8007940:	e7f2      	b.n	8007928 <__sinit+0xc>
 8007942:	bf00      	nop
 8007944:	08007889 	.word	0x08007889
 8007948:	2000071c 	.word	0x2000071c

0800794c <_fwalk_sglue>:
 800794c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007950:	4607      	mov	r7, r0
 8007952:	4688      	mov	r8, r1
 8007954:	4614      	mov	r4, r2
 8007956:	2600      	movs	r6, #0
 8007958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800795c:	f1b9 0901 	subs.w	r9, r9, #1
 8007960:	d505      	bpl.n	800796e <_fwalk_sglue+0x22>
 8007962:	6824      	ldr	r4, [r4, #0]
 8007964:	2c00      	cmp	r4, #0
 8007966:	d1f7      	bne.n	8007958 <_fwalk_sglue+0xc>
 8007968:	4630      	mov	r0, r6
 800796a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800796e:	89ab      	ldrh	r3, [r5, #12]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d907      	bls.n	8007984 <_fwalk_sglue+0x38>
 8007974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007978:	3301      	adds	r3, #1
 800797a:	d003      	beq.n	8007984 <_fwalk_sglue+0x38>
 800797c:	4629      	mov	r1, r5
 800797e:	4638      	mov	r0, r7
 8007980:	47c0      	blx	r8
 8007982:	4306      	orrs	r6, r0
 8007984:	3568      	adds	r5, #104	@ 0x68
 8007986:	e7e9      	b.n	800795c <_fwalk_sglue+0x10>

08007988 <__sread>:
 8007988:	b510      	push	{r4, lr}
 800798a:	460c      	mov	r4, r1
 800798c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007990:	f000 f86c 	bl	8007a6c <_read_r>
 8007994:	2800      	cmp	r0, #0
 8007996:	bfab      	itete	ge
 8007998:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800799a:	89a3      	ldrhlt	r3, [r4, #12]
 800799c:	181b      	addge	r3, r3, r0
 800799e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079a2:	bfac      	ite	ge
 80079a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079a6:	81a3      	strhlt	r3, [r4, #12]
 80079a8:	bd10      	pop	{r4, pc}

080079aa <__swrite>:
 80079aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ae:	461f      	mov	r7, r3
 80079b0:	898b      	ldrh	r3, [r1, #12]
 80079b2:	05db      	lsls	r3, r3, #23
 80079b4:	4605      	mov	r5, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	4616      	mov	r6, r2
 80079ba:	d505      	bpl.n	80079c8 <__swrite+0x1e>
 80079bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c0:	2302      	movs	r3, #2
 80079c2:	2200      	movs	r2, #0
 80079c4:	f000 f840 	bl	8007a48 <_lseek_r>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079d2:	81a3      	strh	r3, [r4, #12]
 80079d4:	4632      	mov	r2, r6
 80079d6:	463b      	mov	r3, r7
 80079d8:	4628      	mov	r0, r5
 80079da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079de:	f000 b867 	b.w	8007ab0 <_write_r>

080079e2 <__sseek>:
 80079e2:	b510      	push	{r4, lr}
 80079e4:	460c      	mov	r4, r1
 80079e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ea:	f000 f82d 	bl	8007a48 <_lseek_r>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	bf15      	itete	ne
 80079f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079fe:	81a3      	strheq	r3, [r4, #12]
 8007a00:	bf18      	it	ne
 8007a02:	81a3      	strhne	r3, [r4, #12]
 8007a04:	bd10      	pop	{r4, pc}

08007a06 <__sclose>:
 8007a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0a:	f000 b80d 	b.w	8007a28 <_close_r>

08007a0e <memset>:
 8007a0e:	4402      	add	r2, r0
 8007a10:	4603      	mov	r3, r0
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d100      	bne.n	8007a18 <memset+0xa>
 8007a16:	4770      	bx	lr
 8007a18:	f803 1b01 	strb.w	r1, [r3], #1
 8007a1c:	e7f9      	b.n	8007a12 <memset+0x4>
	...

08007a20 <_localeconv_r>:
 8007a20:	4800      	ldr	r0, [pc, #0]	@ (8007a24 <_localeconv_r+0x4>)
 8007a22:	4770      	bx	lr
 8007a24:	2000019c 	.word	0x2000019c

08007a28 <_close_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d06      	ldr	r5, [pc, #24]	@ (8007a44 <_close_r+0x1c>)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	f7fc f940 	bl	8003cb8 <_close>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_close_r+0x1a>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_close_r+0x1a>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	20000720 	.word	0x20000720

08007a48 <_lseek_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4d07      	ldr	r5, [pc, #28]	@ (8007a68 <_lseek_r+0x20>)
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	4608      	mov	r0, r1
 8007a50:	4611      	mov	r1, r2
 8007a52:	2200      	movs	r2, #0
 8007a54:	602a      	str	r2, [r5, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	f7fc f955 	bl	8003d06 <_lseek>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_lseek_r+0x1e>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_lseek_r+0x1e>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	20000720 	.word	0x20000720

08007a6c <_read_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d07      	ldr	r5, [pc, #28]	@ (8007a8c <_read_r+0x20>)
 8007a70:	4604      	mov	r4, r0
 8007a72:	4608      	mov	r0, r1
 8007a74:	4611      	mov	r1, r2
 8007a76:	2200      	movs	r2, #0
 8007a78:	602a      	str	r2, [r5, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f7fc f8e3 	bl	8003c46 <_read>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_read_r+0x1e>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_read_r+0x1e>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	20000720 	.word	0x20000720

08007a90 <_sbrk_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d06      	ldr	r5, [pc, #24]	@ (8007aac <_sbrk_r+0x1c>)
 8007a94:	2300      	movs	r3, #0
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	f7fc f940 	bl	8003d20 <_sbrk>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_sbrk_r+0x1a>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_sbrk_r+0x1a>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	20000720 	.word	0x20000720

08007ab0 <_write_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d07      	ldr	r5, [pc, #28]	@ (8007ad0 <_write_r+0x20>)
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	4608      	mov	r0, r1
 8007ab8:	4611      	mov	r1, r2
 8007aba:	2200      	movs	r2, #0
 8007abc:	602a      	str	r2, [r5, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f7fc f8de 	bl	8003c80 <_write>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_write_r+0x1e>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_write_r+0x1e>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	20000720 	.word	0x20000720

08007ad4 <__errno>:
 8007ad4:	4b01      	ldr	r3, [pc, #4]	@ (8007adc <__errno+0x8>)
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	2000005c 	.word	0x2000005c

08007ae0 <__libc_init_array>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8007b18 <__libc_init_array+0x38>)
 8007ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8007b1c <__libc_init_array+0x3c>)
 8007ae6:	1b64      	subs	r4, r4, r5
 8007ae8:	10a4      	asrs	r4, r4, #2
 8007aea:	2600      	movs	r6, #0
 8007aec:	42a6      	cmp	r6, r4
 8007aee:	d109      	bne.n	8007b04 <__libc_init_array+0x24>
 8007af0:	4d0b      	ldr	r5, [pc, #44]	@ (8007b20 <__libc_init_array+0x40>)
 8007af2:	4c0c      	ldr	r4, [pc, #48]	@ (8007b24 <__libc_init_array+0x44>)
 8007af4:	f001 fdf8 	bl	80096e8 <_init>
 8007af8:	1b64      	subs	r4, r4, r5
 8007afa:	10a4      	asrs	r4, r4, #2
 8007afc:	2600      	movs	r6, #0
 8007afe:	42a6      	cmp	r6, r4
 8007b00:	d105      	bne.n	8007b0e <__libc_init_array+0x2e>
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b08:	4798      	blx	r3
 8007b0a:	3601      	adds	r6, #1
 8007b0c:	e7ee      	b.n	8007aec <__libc_init_array+0xc>
 8007b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b12:	4798      	blx	r3
 8007b14:	3601      	adds	r6, #1
 8007b16:	e7f2      	b.n	8007afe <__libc_init_array+0x1e>
 8007b18:	08009ed0 	.word	0x08009ed0
 8007b1c:	08009ed0 	.word	0x08009ed0
 8007b20:	08009ed0 	.word	0x08009ed0
 8007b24:	08009ed4 	.word	0x08009ed4

08007b28 <__retarget_lock_init_recursive>:
 8007b28:	4770      	bx	lr

08007b2a <__retarget_lock_acquire_recursive>:
 8007b2a:	4770      	bx	lr

08007b2c <__retarget_lock_release_recursive>:
 8007b2c:	4770      	bx	lr

08007b2e <memcpy>:
 8007b2e:	440a      	add	r2, r1
 8007b30:	4291      	cmp	r1, r2
 8007b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b36:	d100      	bne.n	8007b3a <memcpy+0xc>
 8007b38:	4770      	bx	lr
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b44:	4291      	cmp	r1, r2
 8007b46:	d1f9      	bne.n	8007b3c <memcpy+0xe>
 8007b48:	bd10      	pop	{r4, pc}

08007b4a <quorem>:
 8007b4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4e:	6903      	ldr	r3, [r0, #16]
 8007b50:	690c      	ldr	r4, [r1, #16]
 8007b52:	42a3      	cmp	r3, r4
 8007b54:	4607      	mov	r7, r0
 8007b56:	db7e      	blt.n	8007c56 <quorem+0x10c>
 8007b58:	3c01      	subs	r4, #1
 8007b5a:	f101 0814 	add.w	r8, r1, #20
 8007b5e:	00a3      	lsls	r3, r4, #2
 8007b60:	f100 0514 	add.w	r5, r0, #20
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b74:	3301      	adds	r3, #1
 8007b76:	429a      	cmp	r2, r3
 8007b78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b80:	d32e      	bcc.n	8007be0 <quorem+0x96>
 8007b82:	f04f 0a00 	mov.w	sl, #0
 8007b86:	46c4      	mov	ip, r8
 8007b88:	46ae      	mov	lr, r5
 8007b8a:	46d3      	mov	fp, sl
 8007b8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b90:	b298      	uxth	r0, r3
 8007b92:	fb06 a000 	mla	r0, r6, r0, sl
 8007b96:	0c02      	lsrs	r2, r0, #16
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	fb06 2303 	mla	r3, r6, r3, r2
 8007b9e:	f8de 2000 	ldr.w	r2, [lr]
 8007ba2:	b280      	uxth	r0, r0
 8007ba4:	b292      	uxth	r2, r2
 8007ba6:	1a12      	subs	r2, r2, r0
 8007ba8:	445a      	add	r2, fp
 8007baa:	f8de 0000 	ldr.w	r0, [lr]
 8007bae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007bb8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007bbc:	b292      	uxth	r2, r2
 8007bbe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007bc2:	45e1      	cmp	r9, ip
 8007bc4:	f84e 2b04 	str.w	r2, [lr], #4
 8007bc8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007bcc:	d2de      	bcs.n	8007b8c <quorem+0x42>
 8007bce:	9b00      	ldr	r3, [sp, #0]
 8007bd0:	58eb      	ldr	r3, [r5, r3]
 8007bd2:	b92b      	cbnz	r3, 8007be0 <quorem+0x96>
 8007bd4:	9b01      	ldr	r3, [sp, #4]
 8007bd6:	3b04      	subs	r3, #4
 8007bd8:	429d      	cmp	r5, r3
 8007bda:	461a      	mov	r2, r3
 8007bdc:	d32f      	bcc.n	8007c3e <quorem+0xf4>
 8007bde:	613c      	str	r4, [r7, #16]
 8007be0:	4638      	mov	r0, r7
 8007be2:	f001 f8c5 	bl	8008d70 <__mcmp>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	db25      	blt.n	8007c36 <quorem+0xec>
 8007bea:	4629      	mov	r1, r5
 8007bec:	2000      	movs	r0, #0
 8007bee:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bf2:	f8d1 c000 	ldr.w	ip, [r1]
 8007bf6:	fa1f fe82 	uxth.w	lr, r2
 8007bfa:	fa1f f38c 	uxth.w	r3, ip
 8007bfe:	eba3 030e 	sub.w	r3, r3, lr
 8007c02:	4403      	add	r3, r0
 8007c04:	0c12      	lsrs	r2, r2, #16
 8007c06:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c0a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c14:	45c1      	cmp	r9, r8
 8007c16:	f841 3b04 	str.w	r3, [r1], #4
 8007c1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c1e:	d2e6      	bcs.n	8007bee <quorem+0xa4>
 8007c20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c28:	b922      	cbnz	r2, 8007c34 <quorem+0xea>
 8007c2a:	3b04      	subs	r3, #4
 8007c2c:	429d      	cmp	r5, r3
 8007c2e:	461a      	mov	r2, r3
 8007c30:	d30b      	bcc.n	8007c4a <quorem+0x100>
 8007c32:	613c      	str	r4, [r7, #16]
 8007c34:	3601      	adds	r6, #1
 8007c36:	4630      	mov	r0, r6
 8007c38:	b003      	add	sp, #12
 8007c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3e:	6812      	ldr	r2, [r2, #0]
 8007c40:	3b04      	subs	r3, #4
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	d1cb      	bne.n	8007bde <quorem+0x94>
 8007c46:	3c01      	subs	r4, #1
 8007c48:	e7c6      	b.n	8007bd8 <quorem+0x8e>
 8007c4a:	6812      	ldr	r2, [r2, #0]
 8007c4c:	3b04      	subs	r3, #4
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	d1ef      	bne.n	8007c32 <quorem+0xe8>
 8007c52:	3c01      	subs	r4, #1
 8007c54:	e7ea      	b.n	8007c2c <quorem+0xe2>
 8007c56:	2000      	movs	r0, #0
 8007c58:	e7ee      	b.n	8007c38 <quorem+0xee>
 8007c5a:	0000      	movs	r0, r0
 8007c5c:	0000      	movs	r0, r0
	...

08007c60 <_dtoa_r>:
 8007c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c64:	69c7      	ldr	r7, [r0, #28]
 8007c66:	b099      	sub	sp, #100	@ 0x64
 8007c68:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c6c:	ec55 4b10 	vmov	r4, r5, d0
 8007c70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007c72:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c74:	4683      	mov	fp, r0
 8007c76:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c7a:	b97f      	cbnz	r7, 8007c9c <_dtoa_r+0x3c>
 8007c7c:	2010      	movs	r0, #16
 8007c7e:	f7ff f8ab 	bl	8006dd8 <malloc>
 8007c82:	4602      	mov	r2, r0
 8007c84:	f8cb 001c 	str.w	r0, [fp, #28]
 8007c88:	b920      	cbnz	r0, 8007c94 <_dtoa_r+0x34>
 8007c8a:	4ba7      	ldr	r3, [pc, #668]	@ (8007f28 <_dtoa_r+0x2c8>)
 8007c8c:	21ef      	movs	r1, #239	@ 0xef
 8007c8e:	48a7      	ldr	r0, [pc, #668]	@ (8007f2c <_dtoa_r+0x2cc>)
 8007c90:	f001 fa22 	bl	80090d8 <__assert_func>
 8007c94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c98:	6007      	str	r7, [r0, #0]
 8007c9a:	60c7      	str	r7, [r0, #12]
 8007c9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ca0:	6819      	ldr	r1, [r3, #0]
 8007ca2:	b159      	cbz	r1, 8007cbc <_dtoa_r+0x5c>
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	604a      	str	r2, [r1, #4]
 8007ca8:	2301      	movs	r3, #1
 8007caa:	4093      	lsls	r3, r2
 8007cac:	608b      	str	r3, [r1, #8]
 8007cae:	4658      	mov	r0, fp
 8007cb0:	f000 fe24 	bl	80088fc <_Bfree>
 8007cb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	1e2b      	subs	r3, r5, #0
 8007cbe:	bfb9      	ittee	lt
 8007cc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007cc4:	9303      	strlt	r3, [sp, #12]
 8007cc6:	2300      	movge	r3, #0
 8007cc8:	6033      	strge	r3, [r6, #0]
 8007cca:	9f03      	ldr	r7, [sp, #12]
 8007ccc:	4b98      	ldr	r3, [pc, #608]	@ (8007f30 <_dtoa_r+0x2d0>)
 8007cce:	bfbc      	itt	lt
 8007cd0:	2201      	movlt	r2, #1
 8007cd2:	6032      	strlt	r2, [r6, #0]
 8007cd4:	43bb      	bics	r3, r7
 8007cd6:	d112      	bne.n	8007cfe <_dtoa_r+0x9e>
 8007cd8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007cda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ce4:	4323      	orrs	r3, r4
 8007ce6:	f000 854d 	beq.w	8008784 <_dtoa_r+0xb24>
 8007cea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f44 <_dtoa_r+0x2e4>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 854f 	beq.w	8008794 <_dtoa_r+0xb34>
 8007cf6:	f10a 0303 	add.w	r3, sl, #3
 8007cfa:	f000 bd49 	b.w	8008790 <_dtoa_r+0xb30>
 8007cfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d02:	2200      	movs	r2, #0
 8007d04:	ec51 0b17 	vmov	r0, r1, d7
 8007d08:	2300      	movs	r3, #0
 8007d0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007d0e:	f7f8 fefb 	bl	8000b08 <__aeabi_dcmpeq>
 8007d12:	4680      	mov	r8, r0
 8007d14:	b158      	cbz	r0, 8007d2e <_dtoa_r+0xce>
 8007d16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d18:	2301      	movs	r3, #1
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d1e:	b113      	cbz	r3, 8007d26 <_dtoa_r+0xc6>
 8007d20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d22:	4b84      	ldr	r3, [pc, #528]	@ (8007f34 <_dtoa_r+0x2d4>)
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007f48 <_dtoa_r+0x2e8>
 8007d2a:	f000 bd33 	b.w	8008794 <_dtoa_r+0xb34>
 8007d2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d32:	aa16      	add	r2, sp, #88	@ 0x58
 8007d34:	a917      	add	r1, sp, #92	@ 0x5c
 8007d36:	4658      	mov	r0, fp
 8007d38:	f001 f8ca 	bl	8008ed0 <__d2b>
 8007d3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d40:	4681      	mov	r9, r0
 8007d42:	2e00      	cmp	r6, #0
 8007d44:	d077      	beq.n	8007e36 <_dtoa_r+0x1d6>
 8007d46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d60:	4619      	mov	r1, r3
 8007d62:	2200      	movs	r2, #0
 8007d64:	4b74      	ldr	r3, [pc, #464]	@ (8007f38 <_dtoa_r+0x2d8>)
 8007d66:	f7f8 faaf 	bl	80002c8 <__aeabi_dsub>
 8007d6a:	a369      	add	r3, pc, #420	@ (adr r3, 8007f10 <_dtoa_r+0x2b0>)
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	f7f8 fc62 	bl	8000638 <__aeabi_dmul>
 8007d74:	a368      	add	r3, pc, #416	@ (adr r3, 8007f18 <_dtoa_r+0x2b8>)
 8007d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7a:	f7f8 faa7 	bl	80002cc <__adddf3>
 8007d7e:	4604      	mov	r4, r0
 8007d80:	4630      	mov	r0, r6
 8007d82:	460d      	mov	r5, r1
 8007d84:	f7f8 fbee 	bl	8000564 <__aeabi_i2d>
 8007d88:	a365      	add	r3, pc, #404	@ (adr r3, 8007f20 <_dtoa_r+0x2c0>)
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	f7f8 fc53 	bl	8000638 <__aeabi_dmul>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4620      	mov	r0, r4
 8007d98:	4629      	mov	r1, r5
 8007d9a:	f7f8 fa97 	bl	80002cc <__adddf3>
 8007d9e:	4604      	mov	r4, r0
 8007da0:	460d      	mov	r5, r1
 8007da2:	f7f8 fef9 	bl	8000b98 <__aeabi_d2iz>
 8007da6:	2200      	movs	r2, #0
 8007da8:	4607      	mov	r7, r0
 8007daa:	2300      	movs	r3, #0
 8007dac:	4620      	mov	r0, r4
 8007dae:	4629      	mov	r1, r5
 8007db0:	f7f8 feb4 	bl	8000b1c <__aeabi_dcmplt>
 8007db4:	b140      	cbz	r0, 8007dc8 <_dtoa_r+0x168>
 8007db6:	4638      	mov	r0, r7
 8007db8:	f7f8 fbd4 	bl	8000564 <__aeabi_i2d>
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	462b      	mov	r3, r5
 8007dc0:	f7f8 fea2 	bl	8000b08 <__aeabi_dcmpeq>
 8007dc4:	b900      	cbnz	r0, 8007dc8 <_dtoa_r+0x168>
 8007dc6:	3f01      	subs	r7, #1
 8007dc8:	2f16      	cmp	r7, #22
 8007dca:	d851      	bhi.n	8007e70 <_dtoa_r+0x210>
 8007dcc:	4b5b      	ldr	r3, [pc, #364]	@ (8007f3c <_dtoa_r+0x2dc>)
 8007dce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dda:	f7f8 fe9f 	bl	8000b1c <__aeabi_dcmplt>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	d048      	beq.n	8007e74 <_dtoa_r+0x214>
 8007de2:	3f01      	subs	r7, #1
 8007de4:	2300      	movs	r3, #0
 8007de6:	9312      	str	r3, [sp, #72]	@ 0x48
 8007de8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007dea:	1b9b      	subs	r3, r3, r6
 8007dec:	1e5a      	subs	r2, r3, #1
 8007dee:	bf44      	itt	mi
 8007df0:	f1c3 0801 	rsbmi	r8, r3, #1
 8007df4:	2300      	movmi	r3, #0
 8007df6:	9208      	str	r2, [sp, #32]
 8007df8:	bf54      	ite	pl
 8007dfa:	f04f 0800 	movpl.w	r8, #0
 8007dfe:	9308      	strmi	r3, [sp, #32]
 8007e00:	2f00      	cmp	r7, #0
 8007e02:	db39      	blt.n	8007e78 <_dtoa_r+0x218>
 8007e04:	9b08      	ldr	r3, [sp, #32]
 8007e06:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007e08:	443b      	add	r3, r7
 8007e0a:	9308      	str	r3, [sp, #32]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e12:	2b09      	cmp	r3, #9
 8007e14:	d864      	bhi.n	8007ee0 <_dtoa_r+0x280>
 8007e16:	2b05      	cmp	r3, #5
 8007e18:	bfc4      	itt	gt
 8007e1a:	3b04      	subgt	r3, #4
 8007e1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e20:	f1a3 0302 	sub.w	r3, r3, #2
 8007e24:	bfcc      	ite	gt
 8007e26:	2400      	movgt	r4, #0
 8007e28:	2401      	movle	r4, #1
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d863      	bhi.n	8007ef6 <_dtoa_r+0x296>
 8007e2e:	e8df f003 	tbb	[pc, r3]
 8007e32:	372a      	.short	0x372a
 8007e34:	5535      	.short	0x5535
 8007e36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007e3a:	441e      	add	r6, r3
 8007e3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e40:	2b20      	cmp	r3, #32
 8007e42:	bfc1      	itttt	gt
 8007e44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e48:	409f      	lslgt	r7, r3
 8007e4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e52:	bfd6      	itet	le
 8007e54:	f1c3 0320 	rsble	r3, r3, #32
 8007e58:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e5c:	fa04 f003 	lslle.w	r0, r4, r3
 8007e60:	f7f8 fb70 	bl	8000544 <__aeabi_ui2d>
 8007e64:	2201      	movs	r2, #1
 8007e66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e6a:	3e01      	subs	r6, #1
 8007e6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007e6e:	e777      	b.n	8007d60 <_dtoa_r+0x100>
 8007e70:	2301      	movs	r3, #1
 8007e72:	e7b8      	b.n	8007de6 <_dtoa_r+0x186>
 8007e74:	9012      	str	r0, [sp, #72]	@ 0x48
 8007e76:	e7b7      	b.n	8007de8 <_dtoa_r+0x188>
 8007e78:	427b      	negs	r3, r7
 8007e7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	eba8 0807 	sub.w	r8, r8, r7
 8007e82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e84:	e7c4      	b.n	8007e10 <_dtoa_r+0x1b0>
 8007e86:	2300      	movs	r3, #0
 8007e88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	dc35      	bgt.n	8007efc <_dtoa_r+0x29c>
 8007e90:	2301      	movs	r3, #1
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	9307      	str	r3, [sp, #28]
 8007e96:	461a      	mov	r2, r3
 8007e98:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e9a:	e00b      	b.n	8007eb4 <_dtoa_r+0x254>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e7f3      	b.n	8007e88 <_dtoa_r+0x228>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ea4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ea6:	18fb      	adds	r3, r7, r3
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	9307      	str	r3, [sp, #28]
 8007eb0:	bfb8      	it	lt
 8007eb2:	2301      	movlt	r3, #1
 8007eb4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007eb8:	2100      	movs	r1, #0
 8007eba:	2204      	movs	r2, #4
 8007ebc:	f102 0514 	add.w	r5, r2, #20
 8007ec0:	429d      	cmp	r5, r3
 8007ec2:	d91f      	bls.n	8007f04 <_dtoa_r+0x2a4>
 8007ec4:	6041      	str	r1, [r0, #4]
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	f000 fcd8 	bl	800887c <_Balloc>
 8007ecc:	4682      	mov	sl, r0
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d13c      	bne.n	8007f4c <_dtoa_r+0x2ec>
 8007ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f40 <_dtoa_r+0x2e0>)
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007eda:	e6d8      	b.n	8007c8e <_dtoa_r+0x2e>
 8007edc:	2301      	movs	r3, #1
 8007ede:	e7e0      	b.n	8007ea2 <_dtoa_r+0x242>
 8007ee0:	2401      	movs	r4, #1
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ee6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	9307      	str	r3, [sp, #28]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2312      	movs	r3, #18
 8007ef4:	e7d0      	b.n	8007e98 <_dtoa_r+0x238>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007efa:	e7f5      	b.n	8007ee8 <_dtoa_r+0x288>
 8007efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	9307      	str	r3, [sp, #28]
 8007f02:	e7d7      	b.n	8007eb4 <_dtoa_r+0x254>
 8007f04:	3101      	adds	r1, #1
 8007f06:	0052      	lsls	r2, r2, #1
 8007f08:	e7d8      	b.n	8007ebc <_dtoa_r+0x25c>
 8007f0a:	bf00      	nop
 8007f0c:	f3af 8000 	nop.w
 8007f10:	636f4361 	.word	0x636f4361
 8007f14:	3fd287a7 	.word	0x3fd287a7
 8007f18:	8b60c8b3 	.word	0x8b60c8b3
 8007f1c:	3fc68a28 	.word	0x3fc68a28
 8007f20:	509f79fb 	.word	0x509f79fb
 8007f24:	3fd34413 	.word	0x3fd34413
 8007f28:	08009b99 	.word	0x08009b99
 8007f2c:	08009bb0 	.word	0x08009bb0
 8007f30:	7ff00000 	.word	0x7ff00000
 8007f34:	08009b69 	.word	0x08009b69
 8007f38:	3ff80000 	.word	0x3ff80000
 8007f3c:	08009ca8 	.word	0x08009ca8
 8007f40:	08009c08 	.word	0x08009c08
 8007f44:	08009b95 	.word	0x08009b95
 8007f48:	08009b68 	.word	0x08009b68
 8007f4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f50:	6018      	str	r0, [r3, #0]
 8007f52:	9b07      	ldr	r3, [sp, #28]
 8007f54:	2b0e      	cmp	r3, #14
 8007f56:	f200 80a4 	bhi.w	80080a2 <_dtoa_r+0x442>
 8007f5a:	2c00      	cmp	r4, #0
 8007f5c:	f000 80a1 	beq.w	80080a2 <_dtoa_r+0x442>
 8007f60:	2f00      	cmp	r7, #0
 8007f62:	dd33      	ble.n	8007fcc <_dtoa_r+0x36c>
 8007f64:	4bad      	ldr	r3, [pc, #692]	@ (800821c <_dtoa_r+0x5bc>)
 8007f66:	f007 020f 	and.w	r2, r7, #15
 8007f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f6e:	ed93 7b00 	vldr	d7, [r3]
 8007f72:	05f8      	lsls	r0, r7, #23
 8007f74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007f78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f7c:	d516      	bpl.n	8007fac <_dtoa_r+0x34c>
 8007f7e:	4ba8      	ldr	r3, [pc, #672]	@ (8008220 <_dtoa_r+0x5c0>)
 8007f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f88:	f7f8 fc80 	bl	800088c <__aeabi_ddiv>
 8007f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f90:	f004 040f 	and.w	r4, r4, #15
 8007f94:	2603      	movs	r6, #3
 8007f96:	4da2      	ldr	r5, [pc, #648]	@ (8008220 <_dtoa_r+0x5c0>)
 8007f98:	b954      	cbnz	r4, 8007fb0 <_dtoa_r+0x350>
 8007f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa2:	f7f8 fc73 	bl	800088c <__aeabi_ddiv>
 8007fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007faa:	e028      	b.n	8007ffe <_dtoa_r+0x39e>
 8007fac:	2602      	movs	r6, #2
 8007fae:	e7f2      	b.n	8007f96 <_dtoa_r+0x336>
 8007fb0:	07e1      	lsls	r1, r4, #31
 8007fb2:	d508      	bpl.n	8007fc6 <_dtoa_r+0x366>
 8007fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fbc:	f7f8 fb3c 	bl	8000638 <__aeabi_dmul>
 8007fc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fc4:	3601      	adds	r6, #1
 8007fc6:	1064      	asrs	r4, r4, #1
 8007fc8:	3508      	adds	r5, #8
 8007fca:	e7e5      	b.n	8007f98 <_dtoa_r+0x338>
 8007fcc:	f000 80d2 	beq.w	8008174 <_dtoa_r+0x514>
 8007fd0:	427c      	negs	r4, r7
 8007fd2:	4b92      	ldr	r3, [pc, #584]	@ (800821c <_dtoa_r+0x5bc>)
 8007fd4:	4d92      	ldr	r5, [pc, #584]	@ (8008220 <_dtoa_r+0x5c0>)
 8007fd6:	f004 020f 	and.w	r2, r4, #15
 8007fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fe6:	f7f8 fb27 	bl	8000638 <__aeabi_dmul>
 8007fea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fee:	1124      	asrs	r4, r4, #4
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2602      	movs	r6, #2
 8007ff4:	2c00      	cmp	r4, #0
 8007ff6:	f040 80b2 	bne.w	800815e <_dtoa_r+0x4fe>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1d3      	bne.n	8007fa6 <_dtoa_r+0x346>
 8007ffe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008000:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 80b7 	beq.w	8008178 <_dtoa_r+0x518>
 800800a:	4b86      	ldr	r3, [pc, #536]	@ (8008224 <_dtoa_r+0x5c4>)
 800800c:	2200      	movs	r2, #0
 800800e:	4620      	mov	r0, r4
 8008010:	4629      	mov	r1, r5
 8008012:	f7f8 fd83 	bl	8000b1c <__aeabi_dcmplt>
 8008016:	2800      	cmp	r0, #0
 8008018:	f000 80ae 	beq.w	8008178 <_dtoa_r+0x518>
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 80aa 	beq.w	8008178 <_dtoa_r+0x518>
 8008024:	9b00      	ldr	r3, [sp, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	dd37      	ble.n	800809a <_dtoa_r+0x43a>
 800802a:	1e7b      	subs	r3, r7, #1
 800802c:	9304      	str	r3, [sp, #16]
 800802e:	4620      	mov	r0, r4
 8008030:	4b7d      	ldr	r3, [pc, #500]	@ (8008228 <_dtoa_r+0x5c8>)
 8008032:	2200      	movs	r2, #0
 8008034:	4629      	mov	r1, r5
 8008036:	f7f8 faff 	bl	8000638 <__aeabi_dmul>
 800803a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800803e:	9c00      	ldr	r4, [sp, #0]
 8008040:	3601      	adds	r6, #1
 8008042:	4630      	mov	r0, r6
 8008044:	f7f8 fa8e 	bl	8000564 <__aeabi_i2d>
 8008048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800804c:	f7f8 faf4 	bl	8000638 <__aeabi_dmul>
 8008050:	4b76      	ldr	r3, [pc, #472]	@ (800822c <_dtoa_r+0x5cc>)
 8008052:	2200      	movs	r2, #0
 8008054:	f7f8 f93a 	bl	80002cc <__adddf3>
 8008058:	4605      	mov	r5, r0
 800805a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800805e:	2c00      	cmp	r4, #0
 8008060:	f040 808d 	bne.w	800817e <_dtoa_r+0x51e>
 8008064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008068:	4b71      	ldr	r3, [pc, #452]	@ (8008230 <_dtoa_r+0x5d0>)
 800806a:	2200      	movs	r2, #0
 800806c:	f7f8 f92c 	bl	80002c8 <__aeabi_dsub>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008078:	462a      	mov	r2, r5
 800807a:	4633      	mov	r3, r6
 800807c:	f7f8 fd6c 	bl	8000b58 <__aeabi_dcmpgt>
 8008080:	2800      	cmp	r0, #0
 8008082:	f040 828b 	bne.w	800859c <_dtoa_r+0x93c>
 8008086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800808a:	462a      	mov	r2, r5
 800808c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008090:	f7f8 fd44 	bl	8000b1c <__aeabi_dcmplt>
 8008094:	2800      	cmp	r0, #0
 8008096:	f040 8128 	bne.w	80082ea <_dtoa_r+0x68a>
 800809a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800809e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f2c0 815a 	blt.w	800835e <_dtoa_r+0x6fe>
 80080aa:	2f0e      	cmp	r7, #14
 80080ac:	f300 8157 	bgt.w	800835e <_dtoa_r+0x6fe>
 80080b0:	4b5a      	ldr	r3, [pc, #360]	@ (800821c <_dtoa_r+0x5bc>)
 80080b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080b6:	ed93 7b00 	vldr	d7, [r3]
 80080ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080bc:	2b00      	cmp	r3, #0
 80080be:	ed8d 7b00 	vstr	d7, [sp]
 80080c2:	da03      	bge.n	80080cc <_dtoa_r+0x46c>
 80080c4:	9b07      	ldr	r3, [sp, #28]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f340 8101 	ble.w	80082ce <_dtoa_r+0x66e>
 80080cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80080d0:	4656      	mov	r6, sl
 80080d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080d6:	4620      	mov	r0, r4
 80080d8:	4629      	mov	r1, r5
 80080da:	f7f8 fbd7 	bl	800088c <__aeabi_ddiv>
 80080de:	f7f8 fd5b 	bl	8000b98 <__aeabi_d2iz>
 80080e2:	4680      	mov	r8, r0
 80080e4:	f7f8 fa3e 	bl	8000564 <__aeabi_i2d>
 80080e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ec:	f7f8 faa4 	bl	8000638 <__aeabi_dmul>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4620      	mov	r0, r4
 80080f6:	4629      	mov	r1, r5
 80080f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80080fc:	f7f8 f8e4 	bl	80002c8 <__aeabi_dsub>
 8008100:	f806 4b01 	strb.w	r4, [r6], #1
 8008104:	9d07      	ldr	r5, [sp, #28]
 8008106:	eba6 040a 	sub.w	r4, r6, sl
 800810a:	42a5      	cmp	r5, r4
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	f040 8117 	bne.w	8008342 <_dtoa_r+0x6e2>
 8008114:	f7f8 f8da 	bl	80002cc <__adddf3>
 8008118:	e9dd 2300 	ldrd	r2, r3, [sp]
 800811c:	4604      	mov	r4, r0
 800811e:	460d      	mov	r5, r1
 8008120:	f7f8 fd1a 	bl	8000b58 <__aeabi_dcmpgt>
 8008124:	2800      	cmp	r0, #0
 8008126:	f040 80f9 	bne.w	800831c <_dtoa_r+0x6bc>
 800812a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	f7f8 fce9 	bl	8000b08 <__aeabi_dcmpeq>
 8008136:	b118      	cbz	r0, 8008140 <_dtoa_r+0x4e0>
 8008138:	f018 0f01 	tst.w	r8, #1
 800813c:	f040 80ee 	bne.w	800831c <_dtoa_r+0x6bc>
 8008140:	4649      	mov	r1, r9
 8008142:	4658      	mov	r0, fp
 8008144:	f000 fbda 	bl	80088fc <_Bfree>
 8008148:	2300      	movs	r3, #0
 800814a:	7033      	strb	r3, [r6, #0]
 800814c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800814e:	3701      	adds	r7, #1
 8008150:	601f      	str	r7, [r3, #0]
 8008152:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 831d 	beq.w	8008794 <_dtoa_r+0xb34>
 800815a:	601e      	str	r6, [r3, #0]
 800815c:	e31a      	b.n	8008794 <_dtoa_r+0xb34>
 800815e:	07e2      	lsls	r2, r4, #31
 8008160:	d505      	bpl.n	800816e <_dtoa_r+0x50e>
 8008162:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008166:	f7f8 fa67 	bl	8000638 <__aeabi_dmul>
 800816a:	3601      	adds	r6, #1
 800816c:	2301      	movs	r3, #1
 800816e:	1064      	asrs	r4, r4, #1
 8008170:	3508      	adds	r5, #8
 8008172:	e73f      	b.n	8007ff4 <_dtoa_r+0x394>
 8008174:	2602      	movs	r6, #2
 8008176:	e742      	b.n	8007ffe <_dtoa_r+0x39e>
 8008178:	9c07      	ldr	r4, [sp, #28]
 800817a:	9704      	str	r7, [sp, #16]
 800817c:	e761      	b.n	8008042 <_dtoa_r+0x3e2>
 800817e:	4b27      	ldr	r3, [pc, #156]	@ (800821c <_dtoa_r+0x5bc>)
 8008180:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008182:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008186:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800818a:	4454      	add	r4, sl
 800818c:	2900      	cmp	r1, #0
 800818e:	d053      	beq.n	8008238 <_dtoa_r+0x5d8>
 8008190:	4928      	ldr	r1, [pc, #160]	@ (8008234 <_dtoa_r+0x5d4>)
 8008192:	2000      	movs	r0, #0
 8008194:	f7f8 fb7a 	bl	800088c <__aeabi_ddiv>
 8008198:	4633      	mov	r3, r6
 800819a:	462a      	mov	r2, r5
 800819c:	f7f8 f894 	bl	80002c8 <__aeabi_dsub>
 80081a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081a4:	4656      	mov	r6, sl
 80081a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081aa:	f7f8 fcf5 	bl	8000b98 <__aeabi_d2iz>
 80081ae:	4605      	mov	r5, r0
 80081b0:	f7f8 f9d8 	bl	8000564 <__aeabi_i2d>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081bc:	f7f8 f884 	bl	80002c8 <__aeabi_dsub>
 80081c0:	3530      	adds	r5, #48	@ 0x30
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081ca:	f806 5b01 	strb.w	r5, [r6], #1
 80081ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081d2:	f7f8 fca3 	bl	8000b1c <__aeabi_dcmplt>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d171      	bne.n	80082be <_dtoa_r+0x65e>
 80081da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081de:	4911      	ldr	r1, [pc, #68]	@ (8008224 <_dtoa_r+0x5c4>)
 80081e0:	2000      	movs	r0, #0
 80081e2:	f7f8 f871 	bl	80002c8 <__aeabi_dsub>
 80081e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081ea:	f7f8 fc97 	bl	8000b1c <__aeabi_dcmplt>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	f040 8095 	bne.w	800831e <_dtoa_r+0x6be>
 80081f4:	42a6      	cmp	r6, r4
 80081f6:	f43f af50 	beq.w	800809a <_dtoa_r+0x43a>
 80081fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008228 <_dtoa_r+0x5c8>)
 8008200:	2200      	movs	r2, #0
 8008202:	f7f8 fa19 	bl	8000638 <__aeabi_dmul>
 8008206:	4b08      	ldr	r3, [pc, #32]	@ (8008228 <_dtoa_r+0x5c8>)
 8008208:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800820c:	2200      	movs	r2, #0
 800820e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008212:	f7f8 fa11 	bl	8000638 <__aeabi_dmul>
 8008216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800821a:	e7c4      	b.n	80081a6 <_dtoa_r+0x546>
 800821c:	08009ca8 	.word	0x08009ca8
 8008220:	08009c80 	.word	0x08009c80
 8008224:	3ff00000 	.word	0x3ff00000
 8008228:	40240000 	.word	0x40240000
 800822c:	401c0000 	.word	0x401c0000
 8008230:	40140000 	.word	0x40140000
 8008234:	3fe00000 	.word	0x3fe00000
 8008238:	4631      	mov	r1, r6
 800823a:	4628      	mov	r0, r5
 800823c:	f7f8 f9fc 	bl	8000638 <__aeabi_dmul>
 8008240:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008244:	9415      	str	r4, [sp, #84]	@ 0x54
 8008246:	4656      	mov	r6, sl
 8008248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800824c:	f7f8 fca4 	bl	8000b98 <__aeabi_d2iz>
 8008250:	4605      	mov	r5, r0
 8008252:	f7f8 f987 	bl	8000564 <__aeabi_i2d>
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800825e:	f7f8 f833 	bl	80002c8 <__aeabi_dsub>
 8008262:	3530      	adds	r5, #48	@ 0x30
 8008264:	f806 5b01 	strb.w	r5, [r6], #1
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	42a6      	cmp	r6, r4
 800826e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008272:	f04f 0200 	mov.w	r2, #0
 8008276:	d124      	bne.n	80082c2 <_dtoa_r+0x662>
 8008278:	4bac      	ldr	r3, [pc, #688]	@ (800852c <_dtoa_r+0x8cc>)
 800827a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800827e:	f7f8 f825 	bl	80002cc <__adddf3>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800828a:	f7f8 fc65 	bl	8000b58 <__aeabi_dcmpgt>
 800828e:	2800      	cmp	r0, #0
 8008290:	d145      	bne.n	800831e <_dtoa_r+0x6be>
 8008292:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008296:	49a5      	ldr	r1, [pc, #660]	@ (800852c <_dtoa_r+0x8cc>)
 8008298:	2000      	movs	r0, #0
 800829a:	f7f8 f815 	bl	80002c8 <__aeabi_dsub>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a6:	f7f8 fc39 	bl	8000b1c <__aeabi_dcmplt>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	f43f aef5 	beq.w	800809a <_dtoa_r+0x43a>
 80082b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80082b2:	1e73      	subs	r3, r6, #1
 80082b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80082b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082ba:	2b30      	cmp	r3, #48	@ 0x30
 80082bc:	d0f8      	beq.n	80082b0 <_dtoa_r+0x650>
 80082be:	9f04      	ldr	r7, [sp, #16]
 80082c0:	e73e      	b.n	8008140 <_dtoa_r+0x4e0>
 80082c2:	4b9b      	ldr	r3, [pc, #620]	@ (8008530 <_dtoa_r+0x8d0>)
 80082c4:	f7f8 f9b8 	bl	8000638 <__aeabi_dmul>
 80082c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082cc:	e7bc      	b.n	8008248 <_dtoa_r+0x5e8>
 80082ce:	d10c      	bne.n	80082ea <_dtoa_r+0x68a>
 80082d0:	4b98      	ldr	r3, [pc, #608]	@ (8008534 <_dtoa_r+0x8d4>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082d8:	f7f8 f9ae 	bl	8000638 <__aeabi_dmul>
 80082dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082e0:	f7f8 fc30 	bl	8000b44 <__aeabi_dcmpge>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	f000 8157 	beq.w	8008598 <_dtoa_r+0x938>
 80082ea:	2400      	movs	r4, #0
 80082ec:	4625      	mov	r5, r4
 80082ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082f0:	43db      	mvns	r3, r3
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	4656      	mov	r6, sl
 80082f6:	2700      	movs	r7, #0
 80082f8:	4621      	mov	r1, r4
 80082fa:	4658      	mov	r0, fp
 80082fc:	f000 fafe 	bl	80088fc <_Bfree>
 8008300:	2d00      	cmp	r5, #0
 8008302:	d0dc      	beq.n	80082be <_dtoa_r+0x65e>
 8008304:	b12f      	cbz	r7, 8008312 <_dtoa_r+0x6b2>
 8008306:	42af      	cmp	r7, r5
 8008308:	d003      	beq.n	8008312 <_dtoa_r+0x6b2>
 800830a:	4639      	mov	r1, r7
 800830c:	4658      	mov	r0, fp
 800830e:	f000 faf5 	bl	80088fc <_Bfree>
 8008312:	4629      	mov	r1, r5
 8008314:	4658      	mov	r0, fp
 8008316:	f000 faf1 	bl	80088fc <_Bfree>
 800831a:	e7d0      	b.n	80082be <_dtoa_r+0x65e>
 800831c:	9704      	str	r7, [sp, #16]
 800831e:	4633      	mov	r3, r6
 8008320:	461e      	mov	r6, r3
 8008322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008326:	2a39      	cmp	r2, #57	@ 0x39
 8008328:	d107      	bne.n	800833a <_dtoa_r+0x6da>
 800832a:	459a      	cmp	sl, r3
 800832c:	d1f8      	bne.n	8008320 <_dtoa_r+0x6c0>
 800832e:	9a04      	ldr	r2, [sp, #16]
 8008330:	3201      	adds	r2, #1
 8008332:	9204      	str	r2, [sp, #16]
 8008334:	2230      	movs	r2, #48	@ 0x30
 8008336:	f88a 2000 	strb.w	r2, [sl]
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	3201      	adds	r2, #1
 800833e:	701a      	strb	r2, [r3, #0]
 8008340:	e7bd      	b.n	80082be <_dtoa_r+0x65e>
 8008342:	4b7b      	ldr	r3, [pc, #492]	@ (8008530 <_dtoa_r+0x8d0>)
 8008344:	2200      	movs	r2, #0
 8008346:	f7f8 f977 	bl	8000638 <__aeabi_dmul>
 800834a:	2200      	movs	r2, #0
 800834c:	2300      	movs	r3, #0
 800834e:	4604      	mov	r4, r0
 8008350:	460d      	mov	r5, r1
 8008352:	f7f8 fbd9 	bl	8000b08 <__aeabi_dcmpeq>
 8008356:	2800      	cmp	r0, #0
 8008358:	f43f aebb 	beq.w	80080d2 <_dtoa_r+0x472>
 800835c:	e6f0      	b.n	8008140 <_dtoa_r+0x4e0>
 800835e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008360:	2a00      	cmp	r2, #0
 8008362:	f000 80db 	beq.w	800851c <_dtoa_r+0x8bc>
 8008366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008368:	2a01      	cmp	r2, #1
 800836a:	f300 80bf 	bgt.w	80084ec <_dtoa_r+0x88c>
 800836e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008370:	2a00      	cmp	r2, #0
 8008372:	f000 80b7 	beq.w	80084e4 <_dtoa_r+0x884>
 8008376:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800837a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800837c:	4646      	mov	r6, r8
 800837e:	9a08      	ldr	r2, [sp, #32]
 8008380:	2101      	movs	r1, #1
 8008382:	441a      	add	r2, r3
 8008384:	4658      	mov	r0, fp
 8008386:	4498      	add	r8, r3
 8008388:	9208      	str	r2, [sp, #32]
 800838a:	f000 fb6b 	bl	8008a64 <__i2b>
 800838e:	4605      	mov	r5, r0
 8008390:	b15e      	cbz	r6, 80083aa <_dtoa_r+0x74a>
 8008392:	9b08      	ldr	r3, [sp, #32]
 8008394:	2b00      	cmp	r3, #0
 8008396:	dd08      	ble.n	80083aa <_dtoa_r+0x74a>
 8008398:	42b3      	cmp	r3, r6
 800839a:	9a08      	ldr	r2, [sp, #32]
 800839c:	bfa8      	it	ge
 800839e:	4633      	movge	r3, r6
 80083a0:	eba8 0803 	sub.w	r8, r8, r3
 80083a4:	1af6      	subs	r6, r6, r3
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	9308      	str	r3, [sp, #32]
 80083aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ac:	b1f3      	cbz	r3, 80083ec <_dtoa_r+0x78c>
 80083ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 80b7 	beq.w	8008524 <_dtoa_r+0x8c4>
 80083b6:	b18c      	cbz	r4, 80083dc <_dtoa_r+0x77c>
 80083b8:	4629      	mov	r1, r5
 80083ba:	4622      	mov	r2, r4
 80083bc:	4658      	mov	r0, fp
 80083be:	f000 fc11 	bl	8008be4 <__pow5mult>
 80083c2:	464a      	mov	r2, r9
 80083c4:	4601      	mov	r1, r0
 80083c6:	4605      	mov	r5, r0
 80083c8:	4658      	mov	r0, fp
 80083ca:	f000 fb61 	bl	8008a90 <__multiply>
 80083ce:	4649      	mov	r1, r9
 80083d0:	9004      	str	r0, [sp, #16]
 80083d2:	4658      	mov	r0, fp
 80083d4:	f000 fa92 	bl	80088fc <_Bfree>
 80083d8:	9b04      	ldr	r3, [sp, #16]
 80083da:	4699      	mov	r9, r3
 80083dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083de:	1b1a      	subs	r2, r3, r4
 80083e0:	d004      	beq.n	80083ec <_dtoa_r+0x78c>
 80083e2:	4649      	mov	r1, r9
 80083e4:	4658      	mov	r0, fp
 80083e6:	f000 fbfd 	bl	8008be4 <__pow5mult>
 80083ea:	4681      	mov	r9, r0
 80083ec:	2101      	movs	r1, #1
 80083ee:	4658      	mov	r0, fp
 80083f0:	f000 fb38 	bl	8008a64 <__i2b>
 80083f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083f6:	4604      	mov	r4, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 81cf 	beq.w	800879c <_dtoa_r+0xb3c>
 80083fe:	461a      	mov	r2, r3
 8008400:	4601      	mov	r1, r0
 8008402:	4658      	mov	r0, fp
 8008404:	f000 fbee 	bl	8008be4 <__pow5mult>
 8008408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800840a:	2b01      	cmp	r3, #1
 800840c:	4604      	mov	r4, r0
 800840e:	f300 8095 	bgt.w	800853c <_dtoa_r+0x8dc>
 8008412:	9b02      	ldr	r3, [sp, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	f040 8087 	bne.w	8008528 <_dtoa_r+0x8c8>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008420:	2b00      	cmp	r3, #0
 8008422:	f040 8089 	bne.w	8008538 <_dtoa_r+0x8d8>
 8008426:	9b03      	ldr	r3, [sp, #12]
 8008428:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800842c:	0d1b      	lsrs	r3, r3, #20
 800842e:	051b      	lsls	r3, r3, #20
 8008430:	b12b      	cbz	r3, 800843e <_dtoa_r+0x7de>
 8008432:	9b08      	ldr	r3, [sp, #32]
 8008434:	3301      	adds	r3, #1
 8008436:	9308      	str	r3, [sp, #32]
 8008438:	f108 0801 	add.w	r8, r8, #1
 800843c:	2301      	movs	r3, #1
 800843e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 81b0 	beq.w	80087a8 <_dtoa_r+0xb48>
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800844e:	6918      	ldr	r0, [r3, #16]
 8008450:	f000 fabc 	bl	80089cc <__hi0bits>
 8008454:	f1c0 0020 	rsb	r0, r0, #32
 8008458:	9b08      	ldr	r3, [sp, #32]
 800845a:	4418      	add	r0, r3
 800845c:	f010 001f 	ands.w	r0, r0, #31
 8008460:	d077      	beq.n	8008552 <_dtoa_r+0x8f2>
 8008462:	f1c0 0320 	rsb	r3, r0, #32
 8008466:	2b04      	cmp	r3, #4
 8008468:	dd6b      	ble.n	8008542 <_dtoa_r+0x8e2>
 800846a:	9b08      	ldr	r3, [sp, #32]
 800846c:	f1c0 001c 	rsb	r0, r0, #28
 8008470:	4403      	add	r3, r0
 8008472:	4480      	add	r8, r0
 8008474:	4406      	add	r6, r0
 8008476:	9308      	str	r3, [sp, #32]
 8008478:	f1b8 0f00 	cmp.w	r8, #0
 800847c:	dd05      	ble.n	800848a <_dtoa_r+0x82a>
 800847e:	4649      	mov	r1, r9
 8008480:	4642      	mov	r2, r8
 8008482:	4658      	mov	r0, fp
 8008484:	f000 fc08 	bl	8008c98 <__lshift>
 8008488:	4681      	mov	r9, r0
 800848a:	9b08      	ldr	r3, [sp, #32]
 800848c:	2b00      	cmp	r3, #0
 800848e:	dd05      	ble.n	800849c <_dtoa_r+0x83c>
 8008490:	4621      	mov	r1, r4
 8008492:	461a      	mov	r2, r3
 8008494:	4658      	mov	r0, fp
 8008496:	f000 fbff 	bl	8008c98 <__lshift>
 800849a:	4604      	mov	r4, r0
 800849c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d059      	beq.n	8008556 <_dtoa_r+0x8f6>
 80084a2:	4621      	mov	r1, r4
 80084a4:	4648      	mov	r0, r9
 80084a6:	f000 fc63 	bl	8008d70 <__mcmp>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	da53      	bge.n	8008556 <_dtoa_r+0x8f6>
 80084ae:	1e7b      	subs	r3, r7, #1
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	4649      	mov	r1, r9
 80084b4:	2300      	movs	r3, #0
 80084b6:	220a      	movs	r2, #10
 80084b8:	4658      	mov	r0, fp
 80084ba:	f000 fa41 	bl	8008940 <__multadd>
 80084be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084c0:	4681      	mov	r9, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 8172 	beq.w	80087ac <_dtoa_r+0xb4c>
 80084c8:	2300      	movs	r3, #0
 80084ca:	4629      	mov	r1, r5
 80084cc:	220a      	movs	r2, #10
 80084ce:	4658      	mov	r0, fp
 80084d0:	f000 fa36 	bl	8008940 <__multadd>
 80084d4:	9b00      	ldr	r3, [sp, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	4605      	mov	r5, r0
 80084da:	dc67      	bgt.n	80085ac <_dtoa_r+0x94c>
 80084dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084de:	2b02      	cmp	r3, #2
 80084e0:	dc41      	bgt.n	8008566 <_dtoa_r+0x906>
 80084e2:	e063      	b.n	80085ac <_dtoa_r+0x94c>
 80084e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80084e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80084ea:	e746      	b.n	800837a <_dtoa_r+0x71a>
 80084ec:	9b07      	ldr	r3, [sp, #28]
 80084ee:	1e5c      	subs	r4, r3, #1
 80084f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084f2:	42a3      	cmp	r3, r4
 80084f4:	bfbf      	itttt	lt
 80084f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80084f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80084fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80084fc:	1ae3      	sublt	r3, r4, r3
 80084fe:	bfb4      	ite	lt
 8008500:	18d2      	addlt	r2, r2, r3
 8008502:	1b1c      	subge	r4, r3, r4
 8008504:	9b07      	ldr	r3, [sp, #28]
 8008506:	bfbc      	itt	lt
 8008508:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800850a:	2400      	movlt	r4, #0
 800850c:	2b00      	cmp	r3, #0
 800850e:	bfb5      	itete	lt
 8008510:	eba8 0603 	sublt.w	r6, r8, r3
 8008514:	9b07      	ldrge	r3, [sp, #28]
 8008516:	2300      	movlt	r3, #0
 8008518:	4646      	movge	r6, r8
 800851a:	e730      	b.n	800837e <_dtoa_r+0x71e>
 800851c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800851e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008520:	4646      	mov	r6, r8
 8008522:	e735      	b.n	8008390 <_dtoa_r+0x730>
 8008524:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008526:	e75c      	b.n	80083e2 <_dtoa_r+0x782>
 8008528:	2300      	movs	r3, #0
 800852a:	e788      	b.n	800843e <_dtoa_r+0x7de>
 800852c:	3fe00000 	.word	0x3fe00000
 8008530:	40240000 	.word	0x40240000
 8008534:	40140000 	.word	0x40140000
 8008538:	9b02      	ldr	r3, [sp, #8]
 800853a:	e780      	b.n	800843e <_dtoa_r+0x7de>
 800853c:	2300      	movs	r3, #0
 800853e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008540:	e782      	b.n	8008448 <_dtoa_r+0x7e8>
 8008542:	d099      	beq.n	8008478 <_dtoa_r+0x818>
 8008544:	9a08      	ldr	r2, [sp, #32]
 8008546:	331c      	adds	r3, #28
 8008548:	441a      	add	r2, r3
 800854a:	4498      	add	r8, r3
 800854c:	441e      	add	r6, r3
 800854e:	9208      	str	r2, [sp, #32]
 8008550:	e792      	b.n	8008478 <_dtoa_r+0x818>
 8008552:	4603      	mov	r3, r0
 8008554:	e7f6      	b.n	8008544 <_dtoa_r+0x8e4>
 8008556:	9b07      	ldr	r3, [sp, #28]
 8008558:	9704      	str	r7, [sp, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	dc20      	bgt.n	80085a0 <_dtoa_r+0x940>
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008562:	2b02      	cmp	r3, #2
 8008564:	dd1e      	ble.n	80085a4 <_dtoa_r+0x944>
 8008566:	9b00      	ldr	r3, [sp, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f47f aec0 	bne.w	80082ee <_dtoa_r+0x68e>
 800856e:	4621      	mov	r1, r4
 8008570:	2205      	movs	r2, #5
 8008572:	4658      	mov	r0, fp
 8008574:	f000 f9e4 	bl	8008940 <__multadd>
 8008578:	4601      	mov	r1, r0
 800857a:	4604      	mov	r4, r0
 800857c:	4648      	mov	r0, r9
 800857e:	f000 fbf7 	bl	8008d70 <__mcmp>
 8008582:	2800      	cmp	r0, #0
 8008584:	f77f aeb3 	ble.w	80082ee <_dtoa_r+0x68e>
 8008588:	4656      	mov	r6, sl
 800858a:	2331      	movs	r3, #49	@ 0x31
 800858c:	f806 3b01 	strb.w	r3, [r6], #1
 8008590:	9b04      	ldr	r3, [sp, #16]
 8008592:	3301      	adds	r3, #1
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	e6ae      	b.n	80082f6 <_dtoa_r+0x696>
 8008598:	9c07      	ldr	r4, [sp, #28]
 800859a:	9704      	str	r7, [sp, #16]
 800859c:	4625      	mov	r5, r4
 800859e:	e7f3      	b.n	8008588 <_dtoa_r+0x928>
 80085a0:	9b07      	ldr	r3, [sp, #28]
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 8104 	beq.w	80087b4 <_dtoa_r+0xb54>
 80085ac:	2e00      	cmp	r6, #0
 80085ae:	dd05      	ble.n	80085bc <_dtoa_r+0x95c>
 80085b0:	4629      	mov	r1, r5
 80085b2:	4632      	mov	r2, r6
 80085b4:	4658      	mov	r0, fp
 80085b6:	f000 fb6f 	bl	8008c98 <__lshift>
 80085ba:	4605      	mov	r5, r0
 80085bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d05a      	beq.n	8008678 <_dtoa_r+0xa18>
 80085c2:	6869      	ldr	r1, [r5, #4]
 80085c4:	4658      	mov	r0, fp
 80085c6:	f000 f959 	bl	800887c <_Balloc>
 80085ca:	4606      	mov	r6, r0
 80085cc:	b928      	cbnz	r0, 80085da <_dtoa_r+0x97a>
 80085ce:	4b84      	ldr	r3, [pc, #528]	@ (80087e0 <_dtoa_r+0xb80>)
 80085d0:	4602      	mov	r2, r0
 80085d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80085d6:	f7ff bb5a 	b.w	8007c8e <_dtoa_r+0x2e>
 80085da:	692a      	ldr	r2, [r5, #16]
 80085dc:	3202      	adds	r2, #2
 80085de:	0092      	lsls	r2, r2, #2
 80085e0:	f105 010c 	add.w	r1, r5, #12
 80085e4:	300c      	adds	r0, #12
 80085e6:	f7ff faa2 	bl	8007b2e <memcpy>
 80085ea:	2201      	movs	r2, #1
 80085ec:	4631      	mov	r1, r6
 80085ee:	4658      	mov	r0, fp
 80085f0:	f000 fb52 	bl	8008c98 <__lshift>
 80085f4:	f10a 0301 	add.w	r3, sl, #1
 80085f8:	9307      	str	r3, [sp, #28]
 80085fa:	9b00      	ldr	r3, [sp, #0]
 80085fc:	4453      	add	r3, sl
 80085fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008600:	9b02      	ldr	r3, [sp, #8]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	462f      	mov	r7, r5
 8008608:	930a      	str	r3, [sp, #40]	@ 0x28
 800860a:	4605      	mov	r5, r0
 800860c:	9b07      	ldr	r3, [sp, #28]
 800860e:	4621      	mov	r1, r4
 8008610:	3b01      	subs	r3, #1
 8008612:	4648      	mov	r0, r9
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	f7ff fa98 	bl	8007b4a <quorem>
 800861a:	4639      	mov	r1, r7
 800861c:	9002      	str	r0, [sp, #8]
 800861e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008622:	4648      	mov	r0, r9
 8008624:	f000 fba4 	bl	8008d70 <__mcmp>
 8008628:	462a      	mov	r2, r5
 800862a:	9008      	str	r0, [sp, #32]
 800862c:	4621      	mov	r1, r4
 800862e:	4658      	mov	r0, fp
 8008630:	f000 fbba 	bl	8008da8 <__mdiff>
 8008634:	68c2      	ldr	r2, [r0, #12]
 8008636:	4606      	mov	r6, r0
 8008638:	bb02      	cbnz	r2, 800867c <_dtoa_r+0xa1c>
 800863a:	4601      	mov	r1, r0
 800863c:	4648      	mov	r0, r9
 800863e:	f000 fb97 	bl	8008d70 <__mcmp>
 8008642:	4602      	mov	r2, r0
 8008644:	4631      	mov	r1, r6
 8008646:	4658      	mov	r0, fp
 8008648:	920e      	str	r2, [sp, #56]	@ 0x38
 800864a:	f000 f957 	bl	80088fc <_Bfree>
 800864e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008650:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008652:	9e07      	ldr	r6, [sp, #28]
 8008654:	ea43 0102 	orr.w	r1, r3, r2
 8008658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800865a:	4319      	orrs	r1, r3
 800865c:	d110      	bne.n	8008680 <_dtoa_r+0xa20>
 800865e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008662:	d029      	beq.n	80086b8 <_dtoa_r+0xa58>
 8008664:	9b08      	ldr	r3, [sp, #32]
 8008666:	2b00      	cmp	r3, #0
 8008668:	dd02      	ble.n	8008670 <_dtoa_r+0xa10>
 800866a:	9b02      	ldr	r3, [sp, #8]
 800866c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008670:	9b00      	ldr	r3, [sp, #0]
 8008672:	f883 8000 	strb.w	r8, [r3]
 8008676:	e63f      	b.n	80082f8 <_dtoa_r+0x698>
 8008678:	4628      	mov	r0, r5
 800867a:	e7bb      	b.n	80085f4 <_dtoa_r+0x994>
 800867c:	2201      	movs	r2, #1
 800867e:	e7e1      	b.n	8008644 <_dtoa_r+0x9e4>
 8008680:	9b08      	ldr	r3, [sp, #32]
 8008682:	2b00      	cmp	r3, #0
 8008684:	db04      	blt.n	8008690 <_dtoa_r+0xa30>
 8008686:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008688:	430b      	orrs	r3, r1
 800868a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800868c:	430b      	orrs	r3, r1
 800868e:	d120      	bne.n	80086d2 <_dtoa_r+0xa72>
 8008690:	2a00      	cmp	r2, #0
 8008692:	dded      	ble.n	8008670 <_dtoa_r+0xa10>
 8008694:	4649      	mov	r1, r9
 8008696:	2201      	movs	r2, #1
 8008698:	4658      	mov	r0, fp
 800869a:	f000 fafd 	bl	8008c98 <__lshift>
 800869e:	4621      	mov	r1, r4
 80086a0:	4681      	mov	r9, r0
 80086a2:	f000 fb65 	bl	8008d70 <__mcmp>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	dc03      	bgt.n	80086b2 <_dtoa_r+0xa52>
 80086aa:	d1e1      	bne.n	8008670 <_dtoa_r+0xa10>
 80086ac:	f018 0f01 	tst.w	r8, #1
 80086b0:	d0de      	beq.n	8008670 <_dtoa_r+0xa10>
 80086b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086b6:	d1d8      	bne.n	800866a <_dtoa_r+0xa0a>
 80086b8:	9a00      	ldr	r2, [sp, #0]
 80086ba:	2339      	movs	r3, #57	@ 0x39
 80086bc:	7013      	strb	r3, [r2, #0]
 80086be:	4633      	mov	r3, r6
 80086c0:	461e      	mov	r6, r3
 80086c2:	3b01      	subs	r3, #1
 80086c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80086c8:	2a39      	cmp	r2, #57	@ 0x39
 80086ca:	d052      	beq.n	8008772 <_dtoa_r+0xb12>
 80086cc:	3201      	adds	r2, #1
 80086ce:	701a      	strb	r2, [r3, #0]
 80086d0:	e612      	b.n	80082f8 <_dtoa_r+0x698>
 80086d2:	2a00      	cmp	r2, #0
 80086d4:	dd07      	ble.n	80086e6 <_dtoa_r+0xa86>
 80086d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086da:	d0ed      	beq.n	80086b8 <_dtoa_r+0xa58>
 80086dc:	9a00      	ldr	r2, [sp, #0]
 80086de:	f108 0301 	add.w	r3, r8, #1
 80086e2:	7013      	strb	r3, [r2, #0]
 80086e4:	e608      	b.n	80082f8 <_dtoa_r+0x698>
 80086e6:	9b07      	ldr	r3, [sp, #28]
 80086e8:	9a07      	ldr	r2, [sp, #28]
 80086ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80086ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d028      	beq.n	8008746 <_dtoa_r+0xae6>
 80086f4:	4649      	mov	r1, r9
 80086f6:	2300      	movs	r3, #0
 80086f8:	220a      	movs	r2, #10
 80086fa:	4658      	mov	r0, fp
 80086fc:	f000 f920 	bl	8008940 <__multadd>
 8008700:	42af      	cmp	r7, r5
 8008702:	4681      	mov	r9, r0
 8008704:	f04f 0300 	mov.w	r3, #0
 8008708:	f04f 020a 	mov.w	r2, #10
 800870c:	4639      	mov	r1, r7
 800870e:	4658      	mov	r0, fp
 8008710:	d107      	bne.n	8008722 <_dtoa_r+0xac2>
 8008712:	f000 f915 	bl	8008940 <__multadd>
 8008716:	4607      	mov	r7, r0
 8008718:	4605      	mov	r5, r0
 800871a:	9b07      	ldr	r3, [sp, #28]
 800871c:	3301      	adds	r3, #1
 800871e:	9307      	str	r3, [sp, #28]
 8008720:	e774      	b.n	800860c <_dtoa_r+0x9ac>
 8008722:	f000 f90d 	bl	8008940 <__multadd>
 8008726:	4629      	mov	r1, r5
 8008728:	4607      	mov	r7, r0
 800872a:	2300      	movs	r3, #0
 800872c:	220a      	movs	r2, #10
 800872e:	4658      	mov	r0, fp
 8008730:	f000 f906 	bl	8008940 <__multadd>
 8008734:	4605      	mov	r5, r0
 8008736:	e7f0      	b.n	800871a <_dtoa_r+0xaba>
 8008738:	9b00      	ldr	r3, [sp, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	bfcc      	ite	gt
 800873e:	461e      	movgt	r6, r3
 8008740:	2601      	movle	r6, #1
 8008742:	4456      	add	r6, sl
 8008744:	2700      	movs	r7, #0
 8008746:	4649      	mov	r1, r9
 8008748:	2201      	movs	r2, #1
 800874a:	4658      	mov	r0, fp
 800874c:	f000 faa4 	bl	8008c98 <__lshift>
 8008750:	4621      	mov	r1, r4
 8008752:	4681      	mov	r9, r0
 8008754:	f000 fb0c 	bl	8008d70 <__mcmp>
 8008758:	2800      	cmp	r0, #0
 800875a:	dcb0      	bgt.n	80086be <_dtoa_r+0xa5e>
 800875c:	d102      	bne.n	8008764 <_dtoa_r+0xb04>
 800875e:	f018 0f01 	tst.w	r8, #1
 8008762:	d1ac      	bne.n	80086be <_dtoa_r+0xa5e>
 8008764:	4633      	mov	r3, r6
 8008766:	461e      	mov	r6, r3
 8008768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800876c:	2a30      	cmp	r2, #48	@ 0x30
 800876e:	d0fa      	beq.n	8008766 <_dtoa_r+0xb06>
 8008770:	e5c2      	b.n	80082f8 <_dtoa_r+0x698>
 8008772:	459a      	cmp	sl, r3
 8008774:	d1a4      	bne.n	80086c0 <_dtoa_r+0xa60>
 8008776:	9b04      	ldr	r3, [sp, #16]
 8008778:	3301      	adds	r3, #1
 800877a:	9304      	str	r3, [sp, #16]
 800877c:	2331      	movs	r3, #49	@ 0x31
 800877e:	f88a 3000 	strb.w	r3, [sl]
 8008782:	e5b9      	b.n	80082f8 <_dtoa_r+0x698>
 8008784:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008786:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80087e4 <_dtoa_r+0xb84>
 800878a:	b11b      	cbz	r3, 8008794 <_dtoa_r+0xb34>
 800878c:	f10a 0308 	add.w	r3, sl, #8
 8008790:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008792:	6013      	str	r3, [r2, #0]
 8008794:	4650      	mov	r0, sl
 8008796:	b019      	add	sp, #100	@ 0x64
 8008798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879e:	2b01      	cmp	r3, #1
 80087a0:	f77f ae37 	ble.w	8008412 <_dtoa_r+0x7b2>
 80087a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087a8:	2001      	movs	r0, #1
 80087aa:	e655      	b.n	8008458 <_dtoa_r+0x7f8>
 80087ac:	9b00      	ldr	r3, [sp, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f77f aed6 	ble.w	8008560 <_dtoa_r+0x900>
 80087b4:	4656      	mov	r6, sl
 80087b6:	4621      	mov	r1, r4
 80087b8:	4648      	mov	r0, r9
 80087ba:	f7ff f9c6 	bl	8007b4a <quorem>
 80087be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087c2:	f806 8b01 	strb.w	r8, [r6], #1
 80087c6:	9b00      	ldr	r3, [sp, #0]
 80087c8:	eba6 020a 	sub.w	r2, r6, sl
 80087cc:	4293      	cmp	r3, r2
 80087ce:	ddb3      	ble.n	8008738 <_dtoa_r+0xad8>
 80087d0:	4649      	mov	r1, r9
 80087d2:	2300      	movs	r3, #0
 80087d4:	220a      	movs	r2, #10
 80087d6:	4658      	mov	r0, fp
 80087d8:	f000 f8b2 	bl	8008940 <__multadd>
 80087dc:	4681      	mov	r9, r0
 80087de:	e7ea      	b.n	80087b6 <_dtoa_r+0xb56>
 80087e0:	08009c08 	.word	0x08009c08
 80087e4:	08009b8c 	.word	0x08009b8c

080087e8 <_free_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4605      	mov	r5, r0
 80087ec:	2900      	cmp	r1, #0
 80087ee:	d041      	beq.n	8008874 <_free_r+0x8c>
 80087f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087f4:	1f0c      	subs	r4, r1, #4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bfb8      	it	lt
 80087fa:	18e4      	addlt	r4, r4, r3
 80087fc:	f7fe fb9e 	bl	8006f3c <__malloc_lock>
 8008800:	4a1d      	ldr	r2, [pc, #116]	@ (8008878 <_free_r+0x90>)
 8008802:	6813      	ldr	r3, [r2, #0]
 8008804:	b933      	cbnz	r3, 8008814 <_free_r+0x2c>
 8008806:	6063      	str	r3, [r4, #4]
 8008808:	6014      	str	r4, [r2, #0]
 800880a:	4628      	mov	r0, r5
 800880c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008810:	f7fe bb9a 	b.w	8006f48 <__malloc_unlock>
 8008814:	42a3      	cmp	r3, r4
 8008816:	d908      	bls.n	800882a <_free_r+0x42>
 8008818:	6820      	ldr	r0, [r4, #0]
 800881a:	1821      	adds	r1, r4, r0
 800881c:	428b      	cmp	r3, r1
 800881e:	bf01      	itttt	eq
 8008820:	6819      	ldreq	r1, [r3, #0]
 8008822:	685b      	ldreq	r3, [r3, #4]
 8008824:	1809      	addeq	r1, r1, r0
 8008826:	6021      	streq	r1, [r4, #0]
 8008828:	e7ed      	b.n	8008806 <_free_r+0x1e>
 800882a:	461a      	mov	r2, r3
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	b10b      	cbz	r3, 8008834 <_free_r+0x4c>
 8008830:	42a3      	cmp	r3, r4
 8008832:	d9fa      	bls.n	800882a <_free_r+0x42>
 8008834:	6811      	ldr	r1, [r2, #0]
 8008836:	1850      	adds	r0, r2, r1
 8008838:	42a0      	cmp	r0, r4
 800883a:	d10b      	bne.n	8008854 <_free_r+0x6c>
 800883c:	6820      	ldr	r0, [r4, #0]
 800883e:	4401      	add	r1, r0
 8008840:	1850      	adds	r0, r2, r1
 8008842:	4283      	cmp	r3, r0
 8008844:	6011      	str	r1, [r2, #0]
 8008846:	d1e0      	bne.n	800880a <_free_r+0x22>
 8008848:	6818      	ldr	r0, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	6053      	str	r3, [r2, #4]
 800884e:	4408      	add	r0, r1
 8008850:	6010      	str	r0, [r2, #0]
 8008852:	e7da      	b.n	800880a <_free_r+0x22>
 8008854:	d902      	bls.n	800885c <_free_r+0x74>
 8008856:	230c      	movs	r3, #12
 8008858:	602b      	str	r3, [r5, #0]
 800885a:	e7d6      	b.n	800880a <_free_r+0x22>
 800885c:	6820      	ldr	r0, [r4, #0]
 800885e:	1821      	adds	r1, r4, r0
 8008860:	428b      	cmp	r3, r1
 8008862:	bf04      	itt	eq
 8008864:	6819      	ldreq	r1, [r3, #0]
 8008866:	685b      	ldreq	r3, [r3, #4]
 8008868:	6063      	str	r3, [r4, #4]
 800886a:	bf04      	itt	eq
 800886c:	1809      	addeq	r1, r1, r0
 800886e:	6021      	streq	r1, [r4, #0]
 8008870:	6054      	str	r4, [r2, #4]
 8008872:	e7ca      	b.n	800880a <_free_r+0x22>
 8008874:	bd38      	pop	{r3, r4, r5, pc}
 8008876:	bf00      	nop
 8008878:	200005e0 	.word	0x200005e0

0800887c <_Balloc>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	69c6      	ldr	r6, [r0, #28]
 8008880:	4604      	mov	r4, r0
 8008882:	460d      	mov	r5, r1
 8008884:	b976      	cbnz	r6, 80088a4 <_Balloc+0x28>
 8008886:	2010      	movs	r0, #16
 8008888:	f7fe faa6 	bl	8006dd8 <malloc>
 800888c:	4602      	mov	r2, r0
 800888e:	61e0      	str	r0, [r4, #28]
 8008890:	b920      	cbnz	r0, 800889c <_Balloc+0x20>
 8008892:	4b18      	ldr	r3, [pc, #96]	@ (80088f4 <_Balloc+0x78>)
 8008894:	4818      	ldr	r0, [pc, #96]	@ (80088f8 <_Balloc+0x7c>)
 8008896:	216b      	movs	r1, #107	@ 0x6b
 8008898:	f000 fc1e 	bl	80090d8 <__assert_func>
 800889c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088a0:	6006      	str	r6, [r0, #0]
 80088a2:	60c6      	str	r6, [r0, #12]
 80088a4:	69e6      	ldr	r6, [r4, #28]
 80088a6:	68f3      	ldr	r3, [r6, #12]
 80088a8:	b183      	cbz	r3, 80088cc <_Balloc+0x50>
 80088aa:	69e3      	ldr	r3, [r4, #28]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088b2:	b9b8      	cbnz	r0, 80088e4 <_Balloc+0x68>
 80088b4:	2101      	movs	r1, #1
 80088b6:	fa01 f605 	lsl.w	r6, r1, r5
 80088ba:	1d72      	adds	r2, r6, #5
 80088bc:	0092      	lsls	r2, r2, #2
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 fc28 	bl	8009114 <_calloc_r>
 80088c4:	b160      	cbz	r0, 80088e0 <_Balloc+0x64>
 80088c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088ca:	e00e      	b.n	80088ea <_Balloc+0x6e>
 80088cc:	2221      	movs	r2, #33	@ 0x21
 80088ce:	2104      	movs	r1, #4
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 fc1f 	bl	8009114 <_calloc_r>
 80088d6:	69e3      	ldr	r3, [r4, #28]
 80088d8:	60f0      	str	r0, [r6, #12]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1e4      	bne.n	80088aa <_Balloc+0x2e>
 80088e0:	2000      	movs	r0, #0
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	6802      	ldr	r2, [r0, #0]
 80088e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088ea:	2300      	movs	r3, #0
 80088ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088f0:	e7f7      	b.n	80088e2 <_Balloc+0x66>
 80088f2:	bf00      	nop
 80088f4:	08009b99 	.word	0x08009b99
 80088f8:	08009c19 	.word	0x08009c19

080088fc <_Bfree>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	69c6      	ldr	r6, [r0, #28]
 8008900:	4605      	mov	r5, r0
 8008902:	460c      	mov	r4, r1
 8008904:	b976      	cbnz	r6, 8008924 <_Bfree+0x28>
 8008906:	2010      	movs	r0, #16
 8008908:	f7fe fa66 	bl	8006dd8 <malloc>
 800890c:	4602      	mov	r2, r0
 800890e:	61e8      	str	r0, [r5, #28]
 8008910:	b920      	cbnz	r0, 800891c <_Bfree+0x20>
 8008912:	4b09      	ldr	r3, [pc, #36]	@ (8008938 <_Bfree+0x3c>)
 8008914:	4809      	ldr	r0, [pc, #36]	@ (800893c <_Bfree+0x40>)
 8008916:	218f      	movs	r1, #143	@ 0x8f
 8008918:	f000 fbde 	bl	80090d8 <__assert_func>
 800891c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008920:	6006      	str	r6, [r0, #0]
 8008922:	60c6      	str	r6, [r0, #12]
 8008924:	b13c      	cbz	r4, 8008936 <_Bfree+0x3a>
 8008926:	69eb      	ldr	r3, [r5, #28]
 8008928:	6862      	ldr	r2, [r4, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008930:	6021      	str	r1, [r4, #0]
 8008932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008936:	bd70      	pop	{r4, r5, r6, pc}
 8008938:	08009b99 	.word	0x08009b99
 800893c:	08009c19 	.word	0x08009c19

08008940 <__multadd>:
 8008940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008944:	690d      	ldr	r5, [r1, #16]
 8008946:	4607      	mov	r7, r0
 8008948:	460c      	mov	r4, r1
 800894a:	461e      	mov	r6, r3
 800894c:	f101 0c14 	add.w	ip, r1, #20
 8008950:	2000      	movs	r0, #0
 8008952:	f8dc 3000 	ldr.w	r3, [ip]
 8008956:	b299      	uxth	r1, r3
 8008958:	fb02 6101 	mla	r1, r2, r1, r6
 800895c:	0c1e      	lsrs	r6, r3, #16
 800895e:	0c0b      	lsrs	r3, r1, #16
 8008960:	fb02 3306 	mla	r3, r2, r6, r3
 8008964:	b289      	uxth	r1, r1
 8008966:	3001      	adds	r0, #1
 8008968:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800896c:	4285      	cmp	r5, r0
 800896e:	f84c 1b04 	str.w	r1, [ip], #4
 8008972:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008976:	dcec      	bgt.n	8008952 <__multadd+0x12>
 8008978:	b30e      	cbz	r6, 80089be <__multadd+0x7e>
 800897a:	68a3      	ldr	r3, [r4, #8]
 800897c:	42ab      	cmp	r3, r5
 800897e:	dc19      	bgt.n	80089b4 <__multadd+0x74>
 8008980:	6861      	ldr	r1, [r4, #4]
 8008982:	4638      	mov	r0, r7
 8008984:	3101      	adds	r1, #1
 8008986:	f7ff ff79 	bl	800887c <_Balloc>
 800898a:	4680      	mov	r8, r0
 800898c:	b928      	cbnz	r0, 800899a <__multadd+0x5a>
 800898e:	4602      	mov	r2, r0
 8008990:	4b0c      	ldr	r3, [pc, #48]	@ (80089c4 <__multadd+0x84>)
 8008992:	480d      	ldr	r0, [pc, #52]	@ (80089c8 <__multadd+0x88>)
 8008994:	21ba      	movs	r1, #186	@ 0xba
 8008996:	f000 fb9f 	bl	80090d8 <__assert_func>
 800899a:	6922      	ldr	r2, [r4, #16]
 800899c:	3202      	adds	r2, #2
 800899e:	f104 010c 	add.w	r1, r4, #12
 80089a2:	0092      	lsls	r2, r2, #2
 80089a4:	300c      	adds	r0, #12
 80089a6:	f7ff f8c2 	bl	8007b2e <memcpy>
 80089aa:	4621      	mov	r1, r4
 80089ac:	4638      	mov	r0, r7
 80089ae:	f7ff ffa5 	bl	80088fc <_Bfree>
 80089b2:	4644      	mov	r4, r8
 80089b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089b8:	3501      	adds	r5, #1
 80089ba:	615e      	str	r6, [r3, #20]
 80089bc:	6125      	str	r5, [r4, #16]
 80089be:	4620      	mov	r0, r4
 80089c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c4:	08009c08 	.word	0x08009c08
 80089c8:	08009c19 	.word	0x08009c19

080089cc <__hi0bits>:
 80089cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089d0:	4603      	mov	r3, r0
 80089d2:	bf36      	itet	cc
 80089d4:	0403      	lslcc	r3, r0, #16
 80089d6:	2000      	movcs	r0, #0
 80089d8:	2010      	movcc	r0, #16
 80089da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089de:	bf3c      	itt	cc
 80089e0:	021b      	lslcc	r3, r3, #8
 80089e2:	3008      	addcc	r0, #8
 80089e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089e8:	bf3c      	itt	cc
 80089ea:	011b      	lslcc	r3, r3, #4
 80089ec:	3004      	addcc	r0, #4
 80089ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089f2:	bf3c      	itt	cc
 80089f4:	009b      	lslcc	r3, r3, #2
 80089f6:	3002      	addcc	r0, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	db05      	blt.n	8008a08 <__hi0bits+0x3c>
 80089fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a00:	f100 0001 	add.w	r0, r0, #1
 8008a04:	bf08      	it	eq
 8008a06:	2020      	moveq	r0, #32
 8008a08:	4770      	bx	lr

08008a0a <__lo0bits>:
 8008a0a:	6803      	ldr	r3, [r0, #0]
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	f013 0007 	ands.w	r0, r3, #7
 8008a12:	d00b      	beq.n	8008a2c <__lo0bits+0x22>
 8008a14:	07d9      	lsls	r1, r3, #31
 8008a16:	d421      	bmi.n	8008a5c <__lo0bits+0x52>
 8008a18:	0798      	lsls	r0, r3, #30
 8008a1a:	bf49      	itett	mi
 8008a1c:	085b      	lsrmi	r3, r3, #1
 8008a1e:	089b      	lsrpl	r3, r3, #2
 8008a20:	2001      	movmi	r0, #1
 8008a22:	6013      	strmi	r3, [r2, #0]
 8008a24:	bf5c      	itt	pl
 8008a26:	6013      	strpl	r3, [r2, #0]
 8008a28:	2002      	movpl	r0, #2
 8008a2a:	4770      	bx	lr
 8008a2c:	b299      	uxth	r1, r3
 8008a2e:	b909      	cbnz	r1, 8008a34 <__lo0bits+0x2a>
 8008a30:	0c1b      	lsrs	r3, r3, #16
 8008a32:	2010      	movs	r0, #16
 8008a34:	b2d9      	uxtb	r1, r3
 8008a36:	b909      	cbnz	r1, 8008a3c <__lo0bits+0x32>
 8008a38:	3008      	adds	r0, #8
 8008a3a:	0a1b      	lsrs	r3, r3, #8
 8008a3c:	0719      	lsls	r1, r3, #28
 8008a3e:	bf04      	itt	eq
 8008a40:	091b      	lsreq	r3, r3, #4
 8008a42:	3004      	addeq	r0, #4
 8008a44:	0799      	lsls	r1, r3, #30
 8008a46:	bf04      	itt	eq
 8008a48:	089b      	lsreq	r3, r3, #2
 8008a4a:	3002      	addeq	r0, #2
 8008a4c:	07d9      	lsls	r1, r3, #31
 8008a4e:	d403      	bmi.n	8008a58 <__lo0bits+0x4e>
 8008a50:	085b      	lsrs	r3, r3, #1
 8008a52:	f100 0001 	add.w	r0, r0, #1
 8008a56:	d003      	beq.n	8008a60 <__lo0bits+0x56>
 8008a58:	6013      	str	r3, [r2, #0]
 8008a5a:	4770      	bx	lr
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	4770      	bx	lr
 8008a60:	2020      	movs	r0, #32
 8008a62:	4770      	bx	lr

08008a64 <__i2b>:
 8008a64:	b510      	push	{r4, lr}
 8008a66:	460c      	mov	r4, r1
 8008a68:	2101      	movs	r1, #1
 8008a6a:	f7ff ff07 	bl	800887c <_Balloc>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	b928      	cbnz	r0, 8008a7e <__i2b+0x1a>
 8008a72:	4b05      	ldr	r3, [pc, #20]	@ (8008a88 <__i2b+0x24>)
 8008a74:	4805      	ldr	r0, [pc, #20]	@ (8008a8c <__i2b+0x28>)
 8008a76:	f240 1145 	movw	r1, #325	@ 0x145
 8008a7a:	f000 fb2d 	bl	80090d8 <__assert_func>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	6144      	str	r4, [r0, #20]
 8008a82:	6103      	str	r3, [r0, #16]
 8008a84:	bd10      	pop	{r4, pc}
 8008a86:	bf00      	nop
 8008a88:	08009c08 	.word	0x08009c08
 8008a8c:	08009c19 	.word	0x08009c19

08008a90 <__multiply>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	4614      	mov	r4, r2
 8008a96:	690a      	ldr	r2, [r1, #16]
 8008a98:	6923      	ldr	r3, [r4, #16]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	bfa8      	it	ge
 8008a9e:	4623      	movge	r3, r4
 8008aa0:	460f      	mov	r7, r1
 8008aa2:	bfa4      	itt	ge
 8008aa4:	460c      	movge	r4, r1
 8008aa6:	461f      	movge	r7, r3
 8008aa8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008aac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008ab0:	68a3      	ldr	r3, [r4, #8]
 8008ab2:	6861      	ldr	r1, [r4, #4]
 8008ab4:	eb0a 0609 	add.w	r6, sl, r9
 8008ab8:	42b3      	cmp	r3, r6
 8008aba:	b085      	sub	sp, #20
 8008abc:	bfb8      	it	lt
 8008abe:	3101      	addlt	r1, #1
 8008ac0:	f7ff fedc 	bl	800887c <_Balloc>
 8008ac4:	b930      	cbnz	r0, 8008ad4 <__multiply+0x44>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	4b44      	ldr	r3, [pc, #272]	@ (8008bdc <__multiply+0x14c>)
 8008aca:	4845      	ldr	r0, [pc, #276]	@ (8008be0 <__multiply+0x150>)
 8008acc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ad0:	f000 fb02 	bl	80090d8 <__assert_func>
 8008ad4:	f100 0514 	add.w	r5, r0, #20
 8008ad8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008adc:	462b      	mov	r3, r5
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4543      	cmp	r3, r8
 8008ae2:	d321      	bcc.n	8008b28 <__multiply+0x98>
 8008ae4:	f107 0114 	add.w	r1, r7, #20
 8008ae8:	f104 0214 	add.w	r2, r4, #20
 8008aec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008af0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008af4:	9302      	str	r3, [sp, #8]
 8008af6:	1b13      	subs	r3, r2, r4
 8008af8:	3b15      	subs	r3, #21
 8008afa:	f023 0303 	bic.w	r3, r3, #3
 8008afe:	3304      	adds	r3, #4
 8008b00:	f104 0715 	add.w	r7, r4, #21
 8008b04:	42ba      	cmp	r2, r7
 8008b06:	bf38      	it	cc
 8008b08:	2304      	movcc	r3, #4
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	9b02      	ldr	r3, [sp, #8]
 8008b0e:	9103      	str	r1, [sp, #12]
 8008b10:	428b      	cmp	r3, r1
 8008b12:	d80c      	bhi.n	8008b2e <__multiply+0x9e>
 8008b14:	2e00      	cmp	r6, #0
 8008b16:	dd03      	ble.n	8008b20 <__multiply+0x90>
 8008b18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d05b      	beq.n	8008bd8 <__multiply+0x148>
 8008b20:	6106      	str	r6, [r0, #16]
 8008b22:	b005      	add	sp, #20
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	f843 2b04 	str.w	r2, [r3], #4
 8008b2c:	e7d8      	b.n	8008ae0 <__multiply+0x50>
 8008b2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b32:	f1ba 0f00 	cmp.w	sl, #0
 8008b36:	d024      	beq.n	8008b82 <__multiply+0xf2>
 8008b38:	f104 0e14 	add.w	lr, r4, #20
 8008b3c:	46a9      	mov	r9, r5
 8008b3e:	f04f 0c00 	mov.w	ip, #0
 8008b42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b46:	f8d9 3000 	ldr.w	r3, [r9]
 8008b4a:	fa1f fb87 	uxth.w	fp, r7
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008b58:	f8d9 7000 	ldr.w	r7, [r9]
 8008b5c:	4463      	add	r3, ip
 8008b5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b62:	fb0a c70b 	mla	r7, sl, fp, ip
 8008b66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b70:	4572      	cmp	r2, lr
 8008b72:	f849 3b04 	str.w	r3, [r9], #4
 8008b76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b7a:	d8e2      	bhi.n	8008b42 <__multiply+0xb2>
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	f845 c003 	str.w	ip, [r5, r3]
 8008b82:	9b03      	ldr	r3, [sp, #12]
 8008b84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b88:	3104      	adds	r1, #4
 8008b8a:	f1b9 0f00 	cmp.w	r9, #0
 8008b8e:	d021      	beq.n	8008bd4 <__multiply+0x144>
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	f104 0c14 	add.w	ip, r4, #20
 8008b96:	46ae      	mov	lr, r5
 8008b98:	f04f 0a00 	mov.w	sl, #0
 8008b9c:	f8bc b000 	ldrh.w	fp, [ip]
 8008ba0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008ba4:	fb09 770b 	mla	r7, r9, fp, r7
 8008ba8:	4457      	add	r7, sl
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008bb0:	f84e 3b04 	str.w	r3, [lr], #4
 8008bb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008bb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bbc:	f8be 3000 	ldrh.w	r3, [lr]
 8008bc0:	fb09 330a 	mla	r3, r9, sl, r3
 8008bc4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008bc8:	4562      	cmp	r2, ip
 8008bca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bce:	d8e5      	bhi.n	8008b9c <__multiply+0x10c>
 8008bd0:	9f01      	ldr	r7, [sp, #4]
 8008bd2:	51eb      	str	r3, [r5, r7]
 8008bd4:	3504      	adds	r5, #4
 8008bd6:	e799      	b.n	8008b0c <__multiply+0x7c>
 8008bd8:	3e01      	subs	r6, #1
 8008bda:	e79b      	b.n	8008b14 <__multiply+0x84>
 8008bdc:	08009c08 	.word	0x08009c08
 8008be0:	08009c19 	.word	0x08009c19

08008be4 <__pow5mult>:
 8008be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be8:	4615      	mov	r5, r2
 8008bea:	f012 0203 	ands.w	r2, r2, #3
 8008bee:	4607      	mov	r7, r0
 8008bf0:	460e      	mov	r6, r1
 8008bf2:	d007      	beq.n	8008c04 <__pow5mult+0x20>
 8008bf4:	4c25      	ldr	r4, [pc, #148]	@ (8008c8c <__pow5mult+0xa8>)
 8008bf6:	3a01      	subs	r2, #1
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bfe:	f7ff fe9f 	bl	8008940 <__multadd>
 8008c02:	4606      	mov	r6, r0
 8008c04:	10ad      	asrs	r5, r5, #2
 8008c06:	d03d      	beq.n	8008c84 <__pow5mult+0xa0>
 8008c08:	69fc      	ldr	r4, [r7, #28]
 8008c0a:	b97c      	cbnz	r4, 8008c2c <__pow5mult+0x48>
 8008c0c:	2010      	movs	r0, #16
 8008c0e:	f7fe f8e3 	bl	8006dd8 <malloc>
 8008c12:	4602      	mov	r2, r0
 8008c14:	61f8      	str	r0, [r7, #28]
 8008c16:	b928      	cbnz	r0, 8008c24 <__pow5mult+0x40>
 8008c18:	4b1d      	ldr	r3, [pc, #116]	@ (8008c90 <__pow5mult+0xac>)
 8008c1a:	481e      	ldr	r0, [pc, #120]	@ (8008c94 <__pow5mult+0xb0>)
 8008c1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c20:	f000 fa5a 	bl	80090d8 <__assert_func>
 8008c24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c28:	6004      	str	r4, [r0, #0]
 8008c2a:	60c4      	str	r4, [r0, #12]
 8008c2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c34:	b94c      	cbnz	r4, 8008c4a <__pow5mult+0x66>
 8008c36:	f240 2171 	movw	r1, #625	@ 0x271
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	f7ff ff12 	bl	8008a64 <__i2b>
 8008c40:	2300      	movs	r3, #0
 8008c42:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c46:	4604      	mov	r4, r0
 8008c48:	6003      	str	r3, [r0, #0]
 8008c4a:	f04f 0900 	mov.w	r9, #0
 8008c4e:	07eb      	lsls	r3, r5, #31
 8008c50:	d50a      	bpl.n	8008c68 <__pow5mult+0x84>
 8008c52:	4631      	mov	r1, r6
 8008c54:	4622      	mov	r2, r4
 8008c56:	4638      	mov	r0, r7
 8008c58:	f7ff ff1a 	bl	8008a90 <__multiply>
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	4680      	mov	r8, r0
 8008c60:	4638      	mov	r0, r7
 8008c62:	f7ff fe4b 	bl	80088fc <_Bfree>
 8008c66:	4646      	mov	r6, r8
 8008c68:	106d      	asrs	r5, r5, #1
 8008c6a:	d00b      	beq.n	8008c84 <__pow5mult+0xa0>
 8008c6c:	6820      	ldr	r0, [r4, #0]
 8008c6e:	b938      	cbnz	r0, 8008c80 <__pow5mult+0x9c>
 8008c70:	4622      	mov	r2, r4
 8008c72:	4621      	mov	r1, r4
 8008c74:	4638      	mov	r0, r7
 8008c76:	f7ff ff0b 	bl	8008a90 <__multiply>
 8008c7a:	6020      	str	r0, [r4, #0]
 8008c7c:	f8c0 9000 	str.w	r9, [r0]
 8008c80:	4604      	mov	r4, r0
 8008c82:	e7e4      	b.n	8008c4e <__pow5mult+0x6a>
 8008c84:	4630      	mov	r0, r6
 8008c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c8a:	bf00      	nop
 8008c8c:	08009c74 	.word	0x08009c74
 8008c90:	08009b99 	.word	0x08009b99
 8008c94:	08009c19 	.word	0x08009c19

08008c98 <__lshift>:
 8008c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	6849      	ldr	r1, [r1, #4]
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ca6:	68a3      	ldr	r3, [r4, #8]
 8008ca8:	4607      	mov	r7, r0
 8008caa:	4691      	mov	r9, r2
 8008cac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cb0:	f108 0601 	add.w	r6, r8, #1
 8008cb4:	42b3      	cmp	r3, r6
 8008cb6:	db0b      	blt.n	8008cd0 <__lshift+0x38>
 8008cb8:	4638      	mov	r0, r7
 8008cba:	f7ff fddf 	bl	800887c <_Balloc>
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	b948      	cbnz	r0, 8008cd6 <__lshift+0x3e>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	4b28      	ldr	r3, [pc, #160]	@ (8008d68 <__lshift+0xd0>)
 8008cc6:	4829      	ldr	r0, [pc, #164]	@ (8008d6c <__lshift+0xd4>)
 8008cc8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ccc:	f000 fa04 	bl	80090d8 <__assert_func>
 8008cd0:	3101      	adds	r1, #1
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	e7ee      	b.n	8008cb4 <__lshift+0x1c>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f100 0114 	add.w	r1, r0, #20
 8008cdc:	f100 0210 	add.w	r2, r0, #16
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	4553      	cmp	r3, sl
 8008ce4:	db33      	blt.n	8008d4e <__lshift+0xb6>
 8008ce6:	6920      	ldr	r0, [r4, #16]
 8008ce8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cec:	f104 0314 	add.w	r3, r4, #20
 8008cf0:	f019 091f 	ands.w	r9, r9, #31
 8008cf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cfc:	d02b      	beq.n	8008d56 <__lshift+0xbe>
 8008cfe:	f1c9 0e20 	rsb	lr, r9, #32
 8008d02:	468a      	mov	sl, r1
 8008d04:	2200      	movs	r2, #0
 8008d06:	6818      	ldr	r0, [r3, #0]
 8008d08:	fa00 f009 	lsl.w	r0, r0, r9
 8008d0c:	4310      	orrs	r0, r2
 8008d0e:	f84a 0b04 	str.w	r0, [sl], #4
 8008d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d16:	459c      	cmp	ip, r3
 8008d18:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d1c:	d8f3      	bhi.n	8008d06 <__lshift+0x6e>
 8008d1e:	ebac 0304 	sub.w	r3, ip, r4
 8008d22:	3b15      	subs	r3, #21
 8008d24:	f023 0303 	bic.w	r3, r3, #3
 8008d28:	3304      	adds	r3, #4
 8008d2a:	f104 0015 	add.w	r0, r4, #21
 8008d2e:	4584      	cmp	ip, r0
 8008d30:	bf38      	it	cc
 8008d32:	2304      	movcc	r3, #4
 8008d34:	50ca      	str	r2, [r1, r3]
 8008d36:	b10a      	cbz	r2, 8008d3c <__lshift+0xa4>
 8008d38:	f108 0602 	add.w	r6, r8, #2
 8008d3c:	3e01      	subs	r6, #1
 8008d3e:	4638      	mov	r0, r7
 8008d40:	612e      	str	r6, [r5, #16]
 8008d42:	4621      	mov	r1, r4
 8008d44:	f7ff fdda 	bl	80088fc <_Bfree>
 8008d48:	4628      	mov	r0, r5
 8008d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d52:	3301      	adds	r3, #1
 8008d54:	e7c5      	b.n	8008ce2 <__lshift+0x4a>
 8008d56:	3904      	subs	r1, #4
 8008d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d60:	459c      	cmp	ip, r3
 8008d62:	d8f9      	bhi.n	8008d58 <__lshift+0xc0>
 8008d64:	e7ea      	b.n	8008d3c <__lshift+0xa4>
 8008d66:	bf00      	nop
 8008d68:	08009c08 	.word	0x08009c08
 8008d6c:	08009c19 	.word	0x08009c19

08008d70 <__mcmp>:
 8008d70:	690a      	ldr	r2, [r1, #16]
 8008d72:	4603      	mov	r3, r0
 8008d74:	6900      	ldr	r0, [r0, #16]
 8008d76:	1a80      	subs	r0, r0, r2
 8008d78:	b530      	push	{r4, r5, lr}
 8008d7a:	d10e      	bne.n	8008d9a <__mcmp+0x2a>
 8008d7c:	3314      	adds	r3, #20
 8008d7e:	3114      	adds	r1, #20
 8008d80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d90:	4295      	cmp	r5, r2
 8008d92:	d003      	beq.n	8008d9c <__mcmp+0x2c>
 8008d94:	d205      	bcs.n	8008da2 <__mcmp+0x32>
 8008d96:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9a:	bd30      	pop	{r4, r5, pc}
 8008d9c:	42a3      	cmp	r3, r4
 8008d9e:	d3f3      	bcc.n	8008d88 <__mcmp+0x18>
 8008da0:	e7fb      	b.n	8008d9a <__mcmp+0x2a>
 8008da2:	2001      	movs	r0, #1
 8008da4:	e7f9      	b.n	8008d9a <__mcmp+0x2a>
	...

08008da8 <__mdiff>:
 8008da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	4689      	mov	r9, r1
 8008dae:	4606      	mov	r6, r0
 8008db0:	4611      	mov	r1, r2
 8008db2:	4648      	mov	r0, r9
 8008db4:	4614      	mov	r4, r2
 8008db6:	f7ff ffdb 	bl	8008d70 <__mcmp>
 8008dba:	1e05      	subs	r5, r0, #0
 8008dbc:	d112      	bne.n	8008de4 <__mdiff+0x3c>
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f7ff fd5b 	bl	800887c <_Balloc>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	b928      	cbnz	r0, 8008dd6 <__mdiff+0x2e>
 8008dca:	4b3f      	ldr	r3, [pc, #252]	@ (8008ec8 <__mdiff+0x120>)
 8008dcc:	f240 2137 	movw	r1, #567	@ 0x237
 8008dd0:	483e      	ldr	r0, [pc, #248]	@ (8008ecc <__mdiff+0x124>)
 8008dd2:	f000 f981 	bl	80090d8 <__assert_func>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ddc:	4610      	mov	r0, r2
 8008dde:	b003      	add	sp, #12
 8008de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de4:	bfbc      	itt	lt
 8008de6:	464b      	movlt	r3, r9
 8008de8:	46a1      	movlt	r9, r4
 8008dea:	4630      	mov	r0, r6
 8008dec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008df0:	bfba      	itte	lt
 8008df2:	461c      	movlt	r4, r3
 8008df4:	2501      	movlt	r5, #1
 8008df6:	2500      	movge	r5, #0
 8008df8:	f7ff fd40 	bl	800887c <_Balloc>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	b918      	cbnz	r0, 8008e08 <__mdiff+0x60>
 8008e00:	4b31      	ldr	r3, [pc, #196]	@ (8008ec8 <__mdiff+0x120>)
 8008e02:	f240 2145 	movw	r1, #581	@ 0x245
 8008e06:	e7e3      	b.n	8008dd0 <__mdiff+0x28>
 8008e08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e0c:	6926      	ldr	r6, [r4, #16]
 8008e0e:	60c5      	str	r5, [r0, #12]
 8008e10:	f109 0310 	add.w	r3, r9, #16
 8008e14:	f109 0514 	add.w	r5, r9, #20
 8008e18:	f104 0e14 	add.w	lr, r4, #20
 8008e1c:	f100 0b14 	add.w	fp, r0, #20
 8008e20:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e24:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	46d9      	mov	r9, fp
 8008e2c:	f04f 0c00 	mov.w	ip, #0
 8008e30:	9b01      	ldr	r3, [sp, #4]
 8008e32:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e36:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e3a:	9301      	str	r3, [sp, #4]
 8008e3c:	fa1f f38a 	uxth.w	r3, sl
 8008e40:	4619      	mov	r1, r3
 8008e42:	b283      	uxth	r3, r0
 8008e44:	1acb      	subs	r3, r1, r3
 8008e46:	0c00      	lsrs	r0, r0, #16
 8008e48:	4463      	add	r3, ip
 8008e4a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e58:	4576      	cmp	r6, lr
 8008e5a:	f849 3b04 	str.w	r3, [r9], #4
 8008e5e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e62:	d8e5      	bhi.n	8008e30 <__mdiff+0x88>
 8008e64:	1b33      	subs	r3, r6, r4
 8008e66:	3b15      	subs	r3, #21
 8008e68:	f023 0303 	bic.w	r3, r3, #3
 8008e6c:	3415      	adds	r4, #21
 8008e6e:	3304      	adds	r3, #4
 8008e70:	42a6      	cmp	r6, r4
 8008e72:	bf38      	it	cc
 8008e74:	2304      	movcc	r3, #4
 8008e76:	441d      	add	r5, r3
 8008e78:	445b      	add	r3, fp
 8008e7a:	461e      	mov	r6, r3
 8008e7c:	462c      	mov	r4, r5
 8008e7e:	4544      	cmp	r4, r8
 8008e80:	d30e      	bcc.n	8008ea0 <__mdiff+0xf8>
 8008e82:	f108 0103 	add.w	r1, r8, #3
 8008e86:	1b49      	subs	r1, r1, r5
 8008e88:	f021 0103 	bic.w	r1, r1, #3
 8008e8c:	3d03      	subs	r5, #3
 8008e8e:	45a8      	cmp	r8, r5
 8008e90:	bf38      	it	cc
 8008e92:	2100      	movcc	r1, #0
 8008e94:	440b      	add	r3, r1
 8008e96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e9a:	b191      	cbz	r1, 8008ec2 <__mdiff+0x11a>
 8008e9c:	6117      	str	r7, [r2, #16]
 8008e9e:	e79d      	b.n	8008ddc <__mdiff+0x34>
 8008ea0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ea4:	46e6      	mov	lr, ip
 8008ea6:	0c08      	lsrs	r0, r1, #16
 8008ea8:	fa1c fc81 	uxtah	ip, ip, r1
 8008eac:	4471      	add	r1, lr
 8008eae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008eb2:	b289      	uxth	r1, r1
 8008eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008eb8:	f846 1b04 	str.w	r1, [r6], #4
 8008ebc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ec0:	e7dd      	b.n	8008e7e <__mdiff+0xd6>
 8008ec2:	3f01      	subs	r7, #1
 8008ec4:	e7e7      	b.n	8008e96 <__mdiff+0xee>
 8008ec6:	bf00      	nop
 8008ec8:	08009c08 	.word	0x08009c08
 8008ecc:	08009c19 	.word	0x08009c19

08008ed0 <__d2b>:
 8008ed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ed4:	460f      	mov	r7, r1
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	ec59 8b10 	vmov	r8, r9, d0
 8008edc:	4616      	mov	r6, r2
 8008ede:	f7ff fccd 	bl	800887c <_Balloc>
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	b930      	cbnz	r0, 8008ef4 <__d2b+0x24>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	4b23      	ldr	r3, [pc, #140]	@ (8008f78 <__d2b+0xa8>)
 8008eea:	4824      	ldr	r0, [pc, #144]	@ (8008f7c <__d2b+0xac>)
 8008eec:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ef0:	f000 f8f2 	bl	80090d8 <__assert_func>
 8008ef4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008efc:	b10d      	cbz	r5, 8008f02 <__d2b+0x32>
 8008efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f02:	9301      	str	r3, [sp, #4]
 8008f04:	f1b8 0300 	subs.w	r3, r8, #0
 8008f08:	d023      	beq.n	8008f52 <__d2b+0x82>
 8008f0a:	4668      	mov	r0, sp
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	f7ff fd7c 	bl	8008a0a <__lo0bits>
 8008f12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f16:	b1d0      	cbz	r0, 8008f4e <__d2b+0x7e>
 8008f18:	f1c0 0320 	rsb	r3, r0, #32
 8008f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f20:	430b      	orrs	r3, r1
 8008f22:	40c2      	lsrs	r2, r0
 8008f24:	6163      	str	r3, [r4, #20]
 8008f26:	9201      	str	r2, [sp, #4]
 8008f28:	9b01      	ldr	r3, [sp, #4]
 8008f2a:	61a3      	str	r3, [r4, #24]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bf0c      	ite	eq
 8008f30:	2201      	moveq	r2, #1
 8008f32:	2202      	movne	r2, #2
 8008f34:	6122      	str	r2, [r4, #16]
 8008f36:	b1a5      	cbz	r5, 8008f62 <__d2b+0x92>
 8008f38:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f3c:	4405      	add	r5, r0
 8008f3e:	603d      	str	r5, [r7, #0]
 8008f40:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f44:	6030      	str	r0, [r6, #0]
 8008f46:	4620      	mov	r0, r4
 8008f48:	b003      	add	sp, #12
 8008f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f4e:	6161      	str	r1, [r4, #20]
 8008f50:	e7ea      	b.n	8008f28 <__d2b+0x58>
 8008f52:	a801      	add	r0, sp, #4
 8008f54:	f7ff fd59 	bl	8008a0a <__lo0bits>
 8008f58:	9b01      	ldr	r3, [sp, #4]
 8008f5a:	6163      	str	r3, [r4, #20]
 8008f5c:	3020      	adds	r0, #32
 8008f5e:	2201      	movs	r2, #1
 8008f60:	e7e8      	b.n	8008f34 <__d2b+0x64>
 8008f62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f6a:	6038      	str	r0, [r7, #0]
 8008f6c:	6918      	ldr	r0, [r3, #16]
 8008f6e:	f7ff fd2d 	bl	80089cc <__hi0bits>
 8008f72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f76:	e7e5      	b.n	8008f44 <__d2b+0x74>
 8008f78:	08009c08 	.word	0x08009c08
 8008f7c:	08009c19 	.word	0x08009c19

08008f80 <__sflush_r>:
 8008f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f88:	0716      	lsls	r6, r2, #28
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	d454      	bmi.n	800903a <__sflush_r+0xba>
 8008f90:	684b      	ldr	r3, [r1, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	dc02      	bgt.n	8008f9c <__sflush_r+0x1c>
 8008f96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	dd48      	ble.n	800902e <__sflush_r+0xae>
 8008f9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f9e:	2e00      	cmp	r6, #0
 8008fa0:	d045      	beq.n	800902e <__sflush_r+0xae>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fa8:	682f      	ldr	r7, [r5, #0]
 8008faa:	6a21      	ldr	r1, [r4, #32]
 8008fac:	602b      	str	r3, [r5, #0]
 8008fae:	d030      	beq.n	8009012 <__sflush_r+0x92>
 8008fb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	0759      	lsls	r1, r3, #29
 8008fb6:	d505      	bpl.n	8008fc4 <__sflush_r+0x44>
 8008fb8:	6863      	ldr	r3, [r4, #4]
 8008fba:	1ad2      	subs	r2, r2, r3
 8008fbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fbe:	b10b      	cbz	r3, 8008fc4 <__sflush_r+0x44>
 8008fc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fc2:	1ad2      	subs	r2, r2, r3
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fc8:	6a21      	ldr	r1, [r4, #32]
 8008fca:	4628      	mov	r0, r5
 8008fcc:	47b0      	blx	r6
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	d106      	bne.n	8008fe2 <__sflush_r+0x62>
 8008fd4:	6829      	ldr	r1, [r5, #0]
 8008fd6:	291d      	cmp	r1, #29
 8008fd8:	d82b      	bhi.n	8009032 <__sflush_r+0xb2>
 8008fda:	4a2a      	ldr	r2, [pc, #168]	@ (8009084 <__sflush_r+0x104>)
 8008fdc:	410a      	asrs	r2, r1
 8008fde:	07d6      	lsls	r6, r2, #31
 8008fe0:	d427      	bmi.n	8009032 <__sflush_r+0xb2>
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	6062      	str	r2, [r4, #4]
 8008fe6:	04d9      	lsls	r1, r3, #19
 8008fe8:	6922      	ldr	r2, [r4, #16]
 8008fea:	6022      	str	r2, [r4, #0]
 8008fec:	d504      	bpl.n	8008ff8 <__sflush_r+0x78>
 8008fee:	1c42      	adds	r2, r0, #1
 8008ff0:	d101      	bne.n	8008ff6 <__sflush_r+0x76>
 8008ff2:	682b      	ldr	r3, [r5, #0]
 8008ff4:	b903      	cbnz	r3, 8008ff8 <__sflush_r+0x78>
 8008ff6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ff8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ffa:	602f      	str	r7, [r5, #0]
 8008ffc:	b1b9      	cbz	r1, 800902e <__sflush_r+0xae>
 8008ffe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009002:	4299      	cmp	r1, r3
 8009004:	d002      	beq.n	800900c <__sflush_r+0x8c>
 8009006:	4628      	mov	r0, r5
 8009008:	f7ff fbee 	bl	80087e8 <_free_r>
 800900c:	2300      	movs	r3, #0
 800900e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009010:	e00d      	b.n	800902e <__sflush_r+0xae>
 8009012:	2301      	movs	r3, #1
 8009014:	4628      	mov	r0, r5
 8009016:	47b0      	blx	r6
 8009018:	4602      	mov	r2, r0
 800901a:	1c50      	adds	r0, r2, #1
 800901c:	d1c9      	bne.n	8008fb2 <__sflush_r+0x32>
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d0c6      	beq.n	8008fb2 <__sflush_r+0x32>
 8009024:	2b1d      	cmp	r3, #29
 8009026:	d001      	beq.n	800902c <__sflush_r+0xac>
 8009028:	2b16      	cmp	r3, #22
 800902a:	d11e      	bne.n	800906a <__sflush_r+0xea>
 800902c:	602f      	str	r7, [r5, #0]
 800902e:	2000      	movs	r0, #0
 8009030:	e022      	b.n	8009078 <__sflush_r+0xf8>
 8009032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009036:	b21b      	sxth	r3, r3
 8009038:	e01b      	b.n	8009072 <__sflush_r+0xf2>
 800903a:	690f      	ldr	r7, [r1, #16]
 800903c:	2f00      	cmp	r7, #0
 800903e:	d0f6      	beq.n	800902e <__sflush_r+0xae>
 8009040:	0793      	lsls	r3, r2, #30
 8009042:	680e      	ldr	r6, [r1, #0]
 8009044:	bf08      	it	eq
 8009046:	694b      	ldreq	r3, [r1, #20]
 8009048:	600f      	str	r7, [r1, #0]
 800904a:	bf18      	it	ne
 800904c:	2300      	movne	r3, #0
 800904e:	eba6 0807 	sub.w	r8, r6, r7
 8009052:	608b      	str	r3, [r1, #8]
 8009054:	f1b8 0f00 	cmp.w	r8, #0
 8009058:	dde9      	ble.n	800902e <__sflush_r+0xae>
 800905a:	6a21      	ldr	r1, [r4, #32]
 800905c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800905e:	4643      	mov	r3, r8
 8009060:	463a      	mov	r2, r7
 8009062:	4628      	mov	r0, r5
 8009064:	47b0      	blx	r6
 8009066:	2800      	cmp	r0, #0
 8009068:	dc08      	bgt.n	800907c <__sflush_r+0xfc>
 800906a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800906e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009072:	81a3      	strh	r3, [r4, #12]
 8009074:	f04f 30ff 	mov.w	r0, #4294967295
 8009078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800907c:	4407      	add	r7, r0
 800907e:	eba8 0800 	sub.w	r8, r8, r0
 8009082:	e7e7      	b.n	8009054 <__sflush_r+0xd4>
 8009084:	dfbffffe 	.word	0xdfbffffe

08009088 <_fflush_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	690b      	ldr	r3, [r1, #16]
 800908c:	4605      	mov	r5, r0
 800908e:	460c      	mov	r4, r1
 8009090:	b913      	cbnz	r3, 8009098 <_fflush_r+0x10>
 8009092:	2500      	movs	r5, #0
 8009094:	4628      	mov	r0, r5
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	b118      	cbz	r0, 80090a2 <_fflush_r+0x1a>
 800909a:	6a03      	ldr	r3, [r0, #32]
 800909c:	b90b      	cbnz	r3, 80090a2 <_fflush_r+0x1a>
 800909e:	f7fe fc3d 	bl	800791c <__sinit>
 80090a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d0f3      	beq.n	8009092 <_fflush_r+0xa>
 80090aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090ac:	07d0      	lsls	r0, r2, #31
 80090ae:	d404      	bmi.n	80090ba <_fflush_r+0x32>
 80090b0:	0599      	lsls	r1, r3, #22
 80090b2:	d402      	bmi.n	80090ba <_fflush_r+0x32>
 80090b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090b6:	f7fe fd38 	bl	8007b2a <__retarget_lock_acquire_recursive>
 80090ba:	4628      	mov	r0, r5
 80090bc:	4621      	mov	r1, r4
 80090be:	f7ff ff5f 	bl	8008f80 <__sflush_r>
 80090c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090c4:	07da      	lsls	r2, r3, #31
 80090c6:	4605      	mov	r5, r0
 80090c8:	d4e4      	bmi.n	8009094 <_fflush_r+0xc>
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	059b      	lsls	r3, r3, #22
 80090ce:	d4e1      	bmi.n	8009094 <_fflush_r+0xc>
 80090d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090d2:	f7fe fd2b 	bl	8007b2c <__retarget_lock_release_recursive>
 80090d6:	e7dd      	b.n	8009094 <_fflush_r+0xc>

080090d8 <__assert_func>:
 80090d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090da:	4614      	mov	r4, r2
 80090dc:	461a      	mov	r2, r3
 80090de:	4b09      	ldr	r3, [pc, #36]	@ (8009104 <__assert_func+0x2c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4605      	mov	r5, r0
 80090e4:	68d8      	ldr	r0, [r3, #12]
 80090e6:	b954      	cbnz	r4, 80090fe <__assert_func+0x26>
 80090e8:	4b07      	ldr	r3, [pc, #28]	@ (8009108 <__assert_func+0x30>)
 80090ea:	461c      	mov	r4, r3
 80090ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090f0:	9100      	str	r1, [sp, #0]
 80090f2:	462b      	mov	r3, r5
 80090f4:	4905      	ldr	r1, [pc, #20]	@ (800910c <__assert_func+0x34>)
 80090f6:	f000 f841 	bl	800917c <fiprintf>
 80090fa:	f000 f851 	bl	80091a0 <abort>
 80090fe:	4b04      	ldr	r3, [pc, #16]	@ (8009110 <__assert_func+0x38>)
 8009100:	e7f4      	b.n	80090ec <__assert_func+0x14>
 8009102:	bf00      	nop
 8009104:	2000005c 	.word	0x2000005c
 8009108:	08009db5 	.word	0x08009db5
 800910c:	08009d87 	.word	0x08009d87
 8009110:	08009d7a 	.word	0x08009d7a

08009114 <_calloc_r>:
 8009114:	b570      	push	{r4, r5, r6, lr}
 8009116:	fba1 5402 	umull	r5, r4, r1, r2
 800911a:	b93c      	cbnz	r4, 800912c <_calloc_r+0x18>
 800911c:	4629      	mov	r1, r5
 800911e:	f7fd fe8d 	bl	8006e3c <_malloc_r>
 8009122:	4606      	mov	r6, r0
 8009124:	b928      	cbnz	r0, 8009132 <_calloc_r+0x1e>
 8009126:	2600      	movs	r6, #0
 8009128:	4630      	mov	r0, r6
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	220c      	movs	r2, #12
 800912e:	6002      	str	r2, [r0, #0]
 8009130:	e7f9      	b.n	8009126 <_calloc_r+0x12>
 8009132:	462a      	mov	r2, r5
 8009134:	4621      	mov	r1, r4
 8009136:	f7fe fc6a 	bl	8007a0e <memset>
 800913a:	e7f5      	b.n	8009128 <_calloc_r+0x14>

0800913c <__ascii_mbtowc>:
 800913c:	b082      	sub	sp, #8
 800913e:	b901      	cbnz	r1, 8009142 <__ascii_mbtowc+0x6>
 8009140:	a901      	add	r1, sp, #4
 8009142:	b142      	cbz	r2, 8009156 <__ascii_mbtowc+0x1a>
 8009144:	b14b      	cbz	r3, 800915a <__ascii_mbtowc+0x1e>
 8009146:	7813      	ldrb	r3, [r2, #0]
 8009148:	600b      	str	r3, [r1, #0]
 800914a:	7812      	ldrb	r2, [r2, #0]
 800914c:	1e10      	subs	r0, r2, #0
 800914e:	bf18      	it	ne
 8009150:	2001      	movne	r0, #1
 8009152:	b002      	add	sp, #8
 8009154:	4770      	bx	lr
 8009156:	4610      	mov	r0, r2
 8009158:	e7fb      	b.n	8009152 <__ascii_mbtowc+0x16>
 800915a:	f06f 0001 	mvn.w	r0, #1
 800915e:	e7f8      	b.n	8009152 <__ascii_mbtowc+0x16>

08009160 <__ascii_wctomb>:
 8009160:	4603      	mov	r3, r0
 8009162:	4608      	mov	r0, r1
 8009164:	b141      	cbz	r1, 8009178 <__ascii_wctomb+0x18>
 8009166:	2aff      	cmp	r2, #255	@ 0xff
 8009168:	d904      	bls.n	8009174 <__ascii_wctomb+0x14>
 800916a:	228a      	movs	r2, #138	@ 0x8a
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	f04f 30ff 	mov.w	r0, #4294967295
 8009172:	4770      	bx	lr
 8009174:	700a      	strb	r2, [r1, #0]
 8009176:	2001      	movs	r0, #1
 8009178:	4770      	bx	lr
	...

0800917c <fiprintf>:
 800917c:	b40e      	push	{r1, r2, r3}
 800917e:	b503      	push	{r0, r1, lr}
 8009180:	4601      	mov	r1, r0
 8009182:	ab03      	add	r3, sp, #12
 8009184:	4805      	ldr	r0, [pc, #20]	@ (800919c <fiprintf+0x20>)
 8009186:	f853 2b04 	ldr.w	r2, [r3], #4
 800918a:	6800      	ldr	r0, [r0, #0]
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	f000 f837 	bl	8009200 <_vfiprintf_r>
 8009192:	b002      	add	sp, #8
 8009194:	f85d eb04 	ldr.w	lr, [sp], #4
 8009198:	b003      	add	sp, #12
 800919a:	4770      	bx	lr
 800919c:	2000005c 	.word	0x2000005c

080091a0 <abort>:
 80091a0:	b508      	push	{r3, lr}
 80091a2:	2006      	movs	r0, #6
 80091a4:	f000 fa00 	bl	80095a8 <raise>
 80091a8:	2001      	movs	r0, #1
 80091aa:	f7fa fd41 	bl	8003c30 <_exit>

080091ae <__sfputc_r>:
 80091ae:	6893      	ldr	r3, [r2, #8]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	b410      	push	{r4}
 80091b6:	6093      	str	r3, [r2, #8]
 80091b8:	da08      	bge.n	80091cc <__sfputc_r+0x1e>
 80091ba:	6994      	ldr	r4, [r2, #24]
 80091bc:	42a3      	cmp	r3, r4
 80091be:	db01      	blt.n	80091c4 <__sfputc_r+0x16>
 80091c0:	290a      	cmp	r1, #10
 80091c2:	d103      	bne.n	80091cc <__sfputc_r+0x1e>
 80091c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091c8:	f000 b932 	b.w	8009430 <__swbuf_r>
 80091cc:	6813      	ldr	r3, [r2, #0]
 80091ce:	1c58      	adds	r0, r3, #1
 80091d0:	6010      	str	r0, [r2, #0]
 80091d2:	7019      	strb	r1, [r3, #0]
 80091d4:	4608      	mov	r0, r1
 80091d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091da:	4770      	bx	lr

080091dc <__sfputs_r>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	4606      	mov	r6, r0
 80091e0:	460f      	mov	r7, r1
 80091e2:	4614      	mov	r4, r2
 80091e4:	18d5      	adds	r5, r2, r3
 80091e6:	42ac      	cmp	r4, r5
 80091e8:	d101      	bne.n	80091ee <__sfputs_r+0x12>
 80091ea:	2000      	movs	r0, #0
 80091ec:	e007      	b.n	80091fe <__sfputs_r+0x22>
 80091ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f2:	463a      	mov	r2, r7
 80091f4:	4630      	mov	r0, r6
 80091f6:	f7ff ffda 	bl	80091ae <__sfputc_r>
 80091fa:	1c43      	adds	r3, r0, #1
 80091fc:	d1f3      	bne.n	80091e6 <__sfputs_r+0xa>
 80091fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009200 <_vfiprintf_r>:
 8009200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	460d      	mov	r5, r1
 8009206:	b09d      	sub	sp, #116	@ 0x74
 8009208:	4614      	mov	r4, r2
 800920a:	4698      	mov	r8, r3
 800920c:	4606      	mov	r6, r0
 800920e:	b118      	cbz	r0, 8009218 <_vfiprintf_r+0x18>
 8009210:	6a03      	ldr	r3, [r0, #32]
 8009212:	b90b      	cbnz	r3, 8009218 <_vfiprintf_r+0x18>
 8009214:	f7fe fb82 	bl	800791c <__sinit>
 8009218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800921a:	07d9      	lsls	r1, r3, #31
 800921c:	d405      	bmi.n	800922a <_vfiprintf_r+0x2a>
 800921e:	89ab      	ldrh	r3, [r5, #12]
 8009220:	059a      	lsls	r2, r3, #22
 8009222:	d402      	bmi.n	800922a <_vfiprintf_r+0x2a>
 8009224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009226:	f7fe fc80 	bl	8007b2a <__retarget_lock_acquire_recursive>
 800922a:	89ab      	ldrh	r3, [r5, #12]
 800922c:	071b      	lsls	r3, r3, #28
 800922e:	d501      	bpl.n	8009234 <_vfiprintf_r+0x34>
 8009230:	692b      	ldr	r3, [r5, #16]
 8009232:	b99b      	cbnz	r3, 800925c <_vfiprintf_r+0x5c>
 8009234:	4629      	mov	r1, r5
 8009236:	4630      	mov	r0, r6
 8009238:	f000 f938 	bl	80094ac <__swsetup_r>
 800923c:	b170      	cbz	r0, 800925c <_vfiprintf_r+0x5c>
 800923e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009240:	07dc      	lsls	r4, r3, #31
 8009242:	d504      	bpl.n	800924e <_vfiprintf_r+0x4e>
 8009244:	f04f 30ff 	mov.w	r0, #4294967295
 8009248:	b01d      	add	sp, #116	@ 0x74
 800924a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924e:	89ab      	ldrh	r3, [r5, #12]
 8009250:	0598      	lsls	r0, r3, #22
 8009252:	d4f7      	bmi.n	8009244 <_vfiprintf_r+0x44>
 8009254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009256:	f7fe fc69 	bl	8007b2c <__retarget_lock_release_recursive>
 800925a:	e7f3      	b.n	8009244 <_vfiprintf_r+0x44>
 800925c:	2300      	movs	r3, #0
 800925e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009260:	2320      	movs	r3, #32
 8009262:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009266:	f8cd 800c 	str.w	r8, [sp, #12]
 800926a:	2330      	movs	r3, #48	@ 0x30
 800926c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800941c <_vfiprintf_r+0x21c>
 8009270:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009274:	f04f 0901 	mov.w	r9, #1
 8009278:	4623      	mov	r3, r4
 800927a:	469a      	mov	sl, r3
 800927c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009280:	b10a      	cbz	r2, 8009286 <_vfiprintf_r+0x86>
 8009282:	2a25      	cmp	r2, #37	@ 0x25
 8009284:	d1f9      	bne.n	800927a <_vfiprintf_r+0x7a>
 8009286:	ebba 0b04 	subs.w	fp, sl, r4
 800928a:	d00b      	beq.n	80092a4 <_vfiprintf_r+0xa4>
 800928c:	465b      	mov	r3, fp
 800928e:	4622      	mov	r2, r4
 8009290:	4629      	mov	r1, r5
 8009292:	4630      	mov	r0, r6
 8009294:	f7ff ffa2 	bl	80091dc <__sfputs_r>
 8009298:	3001      	adds	r0, #1
 800929a:	f000 80a7 	beq.w	80093ec <_vfiprintf_r+0x1ec>
 800929e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092a0:	445a      	add	r2, fp
 80092a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80092a4:	f89a 3000 	ldrb.w	r3, [sl]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 809f 	beq.w	80093ec <_vfiprintf_r+0x1ec>
 80092ae:	2300      	movs	r3, #0
 80092b0:	f04f 32ff 	mov.w	r2, #4294967295
 80092b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092b8:	f10a 0a01 	add.w	sl, sl, #1
 80092bc:	9304      	str	r3, [sp, #16]
 80092be:	9307      	str	r3, [sp, #28]
 80092c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80092c6:	4654      	mov	r4, sl
 80092c8:	2205      	movs	r2, #5
 80092ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ce:	4853      	ldr	r0, [pc, #332]	@ (800941c <_vfiprintf_r+0x21c>)
 80092d0:	f7f6 ff9e 	bl	8000210 <memchr>
 80092d4:	9a04      	ldr	r2, [sp, #16]
 80092d6:	b9d8      	cbnz	r0, 8009310 <_vfiprintf_r+0x110>
 80092d8:	06d1      	lsls	r1, r2, #27
 80092da:	bf44      	itt	mi
 80092dc:	2320      	movmi	r3, #32
 80092de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092e2:	0713      	lsls	r3, r2, #28
 80092e4:	bf44      	itt	mi
 80092e6:	232b      	movmi	r3, #43	@ 0x2b
 80092e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092ec:	f89a 3000 	ldrb.w	r3, [sl]
 80092f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092f2:	d015      	beq.n	8009320 <_vfiprintf_r+0x120>
 80092f4:	9a07      	ldr	r2, [sp, #28]
 80092f6:	4654      	mov	r4, sl
 80092f8:	2000      	movs	r0, #0
 80092fa:	f04f 0c0a 	mov.w	ip, #10
 80092fe:	4621      	mov	r1, r4
 8009300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009304:	3b30      	subs	r3, #48	@ 0x30
 8009306:	2b09      	cmp	r3, #9
 8009308:	d94b      	bls.n	80093a2 <_vfiprintf_r+0x1a2>
 800930a:	b1b0      	cbz	r0, 800933a <_vfiprintf_r+0x13a>
 800930c:	9207      	str	r2, [sp, #28]
 800930e:	e014      	b.n	800933a <_vfiprintf_r+0x13a>
 8009310:	eba0 0308 	sub.w	r3, r0, r8
 8009314:	fa09 f303 	lsl.w	r3, r9, r3
 8009318:	4313      	orrs	r3, r2
 800931a:	9304      	str	r3, [sp, #16]
 800931c:	46a2      	mov	sl, r4
 800931e:	e7d2      	b.n	80092c6 <_vfiprintf_r+0xc6>
 8009320:	9b03      	ldr	r3, [sp, #12]
 8009322:	1d19      	adds	r1, r3, #4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	9103      	str	r1, [sp, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	bfbb      	ittet	lt
 800932c:	425b      	neglt	r3, r3
 800932e:	f042 0202 	orrlt.w	r2, r2, #2
 8009332:	9307      	strge	r3, [sp, #28]
 8009334:	9307      	strlt	r3, [sp, #28]
 8009336:	bfb8      	it	lt
 8009338:	9204      	strlt	r2, [sp, #16]
 800933a:	7823      	ldrb	r3, [r4, #0]
 800933c:	2b2e      	cmp	r3, #46	@ 0x2e
 800933e:	d10a      	bne.n	8009356 <_vfiprintf_r+0x156>
 8009340:	7863      	ldrb	r3, [r4, #1]
 8009342:	2b2a      	cmp	r3, #42	@ 0x2a
 8009344:	d132      	bne.n	80093ac <_vfiprintf_r+0x1ac>
 8009346:	9b03      	ldr	r3, [sp, #12]
 8009348:	1d1a      	adds	r2, r3, #4
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	9203      	str	r2, [sp, #12]
 800934e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009352:	3402      	adds	r4, #2
 8009354:	9305      	str	r3, [sp, #20]
 8009356:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800942c <_vfiprintf_r+0x22c>
 800935a:	7821      	ldrb	r1, [r4, #0]
 800935c:	2203      	movs	r2, #3
 800935e:	4650      	mov	r0, sl
 8009360:	f7f6 ff56 	bl	8000210 <memchr>
 8009364:	b138      	cbz	r0, 8009376 <_vfiprintf_r+0x176>
 8009366:	9b04      	ldr	r3, [sp, #16]
 8009368:	eba0 000a 	sub.w	r0, r0, sl
 800936c:	2240      	movs	r2, #64	@ 0x40
 800936e:	4082      	lsls	r2, r0
 8009370:	4313      	orrs	r3, r2
 8009372:	3401      	adds	r4, #1
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800937a:	4829      	ldr	r0, [pc, #164]	@ (8009420 <_vfiprintf_r+0x220>)
 800937c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009380:	2206      	movs	r2, #6
 8009382:	f7f6 ff45 	bl	8000210 <memchr>
 8009386:	2800      	cmp	r0, #0
 8009388:	d03f      	beq.n	800940a <_vfiprintf_r+0x20a>
 800938a:	4b26      	ldr	r3, [pc, #152]	@ (8009424 <_vfiprintf_r+0x224>)
 800938c:	bb1b      	cbnz	r3, 80093d6 <_vfiprintf_r+0x1d6>
 800938e:	9b03      	ldr	r3, [sp, #12]
 8009390:	3307      	adds	r3, #7
 8009392:	f023 0307 	bic.w	r3, r3, #7
 8009396:	3308      	adds	r3, #8
 8009398:	9303      	str	r3, [sp, #12]
 800939a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800939c:	443b      	add	r3, r7
 800939e:	9309      	str	r3, [sp, #36]	@ 0x24
 80093a0:	e76a      	b.n	8009278 <_vfiprintf_r+0x78>
 80093a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80093a6:	460c      	mov	r4, r1
 80093a8:	2001      	movs	r0, #1
 80093aa:	e7a8      	b.n	80092fe <_vfiprintf_r+0xfe>
 80093ac:	2300      	movs	r3, #0
 80093ae:	3401      	adds	r4, #1
 80093b0:	9305      	str	r3, [sp, #20]
 80093b2:	4619      	mov	r1, r3
 80093b4:	f04f 0c0a 	mov.w	ip, #10
 80093b8:	4620      	mov	r0, r4
 80093ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093be:	3a30      	subs	r2, #48	@ 0x30
 80093c0:	2a09      	cmp	r2, #9
 80093c2:	d903      	bls.n	80093cc <_vfiprintf_r+0x1cc>
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0c6      	beq.n	8009356 <_vfiprintf_r+0x156>
 80093c8:	9105      	str	r1, [sp, #20]
 80093ca:	e7c4      	b.n	8009356 <_vfiprintf_r+0x156>
 80093cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80093d0:	4604      	mov	r4, r0
 80093d2:	2301      	movs	r3, #1
 80093d4:	e7f0      	b.n	80093b8 <_vfiprintf_r+0x1b8>
 80093d6:	ab03      	add	r3, sp, #12
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	462a      	mov	r2, r5
 80093dc:	4b12      	ldr	r3, [pc, #72]	@ (8009428 <_vfiprintf_r+0x228>)
 80093de:	a904      	add	r1, sp, #16
 80093e0:	4630      	mov	r0, r6
 80093e2:	f7fd fe57 	bl	8007094 <_printf_float>
 80093e6:	4607      	mov	r7, r0
 80093e8:	1c78      	adds	r0, r7, #1
 80093ea:	d1d6      	bne.n	800939a <_vfiprintf_r+0x19a>
 80093ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093ee:	07d9      	lsls	r1, r3, #31
 80093f0:	d405      	bmi.n	80093fe <_vfiprintf_r+0x1fe>
 80093f2:	89ab      	ldrh	r3, [r5, #12]
 80093f4:	059a      	lsls	r2, r3, #22
 80093f6:	d402      	bmi.n	80093fe <_vfiprintf_r+0x1fe>
 80093f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093fa:	f7fe fb97 	bl	8007b2c <__retarget_lock_release_recursive>
 80093fe:	89ab      	ldrh	r3, [r5, #12]
 8009400:	065b      	lsls	r3, r3, #25
 8009402:	f53f af1f 	bmi.w	8009244 <_vfiprintf_r+0x44>
 8009406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009408:	e71e      	b.n	8009248 <_vfiprintf_r+0x48>
 800940a:	ab03      	add	r3, sp, #12
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	462a      	mov	r2, r5
 8009410:	4b05      	ldr	r3, [pc, #20]	@ (8009428 <_vfiprintf_r+0x228>)
 8009412:	a904      	add	r1, sp, #16
 8009414:	4630      	mov	r0, r6
 8009416:	f7fe f8d5 	bl	80075c4 <_printf_i>
 800941a:	e7e4      	b.n	80093e6 <_vfiprintf_r+0x1e6>
 800941c:	08009eb7 	.word	0x08009eb7
 8009420:	08009ec1 	.word	0x08009ec1
 8009424:	08007095 	.word	0x08007095
 8009428:	080091dd 	.word	0x080091dd
 800942c:	08009ebd 	.word	0x08009ebd

08009430 <__swbuf_r>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	460e      	mov	r6, r1
 8009434:	4614      	mov	r4, r2
 8009436:	4605      	mov	r5, r0
 8009438:	b118      	cbz	r0, 8009442 <__swbuf_r+0x12>
 800943a:	6a03      	ldr	r3, [r0, #32]
 800943c:	b90b      	cbnz	r3, 8009442 <__swbuf_r+0x12>
 800943e:	f7fe fa6d 	bl	800791c <__sinit>
 8009442:	69a3      	ldr	r3, [r4, #24]
 8009444:	60a3      	str	r3, [r4, #8]
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	071a      	lsls	r2, r3, #28
 800944a:	d501      	bpl.n	8009450 <__swbuf_r+0x20>
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	b943      	cbnz	r3, 8009462 <__swbuf_r+0x32>
 8009450:	4621      	mov	r1, r4
 8009452:	4628      	mov	r0, r5
 8009454:	f000 f82a 	bl	80094ac <__swsetup_r>
 8009458:	b118      	cbz	r0, 8009462 <__swbuf_r+0x32>
 800945a:	f04f 37ff 	mov.w	r7, #4294967295
 800945e:	4638      	mov	r0, r7
 8009460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	6922      	ldr	r2, [r4, #16]
 8009466:	1a98      	subs	r0, r3, r2
 8009468:	6963      	ldr	r3, [r4, #20]
 800946a:	b2f6      	uxtb	r6, r6
 800946c:	4283      	cmp	r3, r0
 800946e:	4637      	mov	r7, r6
 8009470:	dc05      	bgt.n	800947e <__swbuf_r+0x4e>
 8009472:	4621      	mov	r1, r4
 8009474:	4628      	mov	r0, r5
 8009476:	f7ff fe07 	bl	8009088 <_fflush_r>
 800947a:	2800      	cmp	r0, #0
 800947c:	d1ed      	bne.n	800945a <__swbuf_r+0x2a>
 800947e:	68a3      	ldr	r3, [r4, #8]
 8009480:	3b01      	subs	r3, #1
 8009482:	60a3      	str	r3, [r4, #8]
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	6022      	str	r2, [r4, #0]
 800948a:	701e      	strb	r6, [r3, #0]
 800948c:	6962      	ldr	r2, [r4, #20]
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	429a      	cmp	r2, r3
 8009492:	d004      	beq.n	800949e <__swbuf_r+0x6e>
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	07db      	lsls	r3, r3, #31
 8009498:	d5e1      	bpl.n	800945e <__swbuf_r+0x2e>
 800949a:	2e0a      	cmp	r6, #10
 800949c:	d1df      	bne.n	800945e <__swbuf_r+0x2e>
 800949e:	4621      	mov	r1, r4
 80094a0:	4628      	mov	r0, r5
 80094a2:	f7ff fdf1 	bl	8009088 <_fflush_r>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d0d9      	beq.n	800945e <__swbuf_r+0x2e>
 80094aa:	e7d6      	b.n	800945a <__swbuf_r+0x2a>

080094ac <__swsetup_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4b29      	ldr	r3, [pc, #164]	@ (8009554 <__swsetup_r+0xa8>)
 80094b0:	4605      	mov	r5, r0
 80094b2:	6818      	ldr	r0, [r3, #0]
 80094b4:	460c      	mov	r4, r1
 80094b6:	b118      	cbz	r0, 80094c0 <__swsetup_r+0x14>
 80094b8:	6a03      	ldr	r3, [r0, #32]
 80094ba:	b90b      	cbnz	r3, 80094c0 <__swsetup_r+0x14>
 80094bc:	f7fe fa2e 	bl	800791c <__sinit>
 80094c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094c4:	0719      	lsls	r1, r3, #28
 80094c6:	d422      	bmi.n	800950e <__swsetup_r+0x62>
 80094c8:	06da      	lsls	r2, r3, #27
 80094ca:	d407      	bmi.n	80094dc <__swsetup_r+0x30>
 80094cc:	2209      	movs	r2, #9
 80094ce:	602a      	str	r2, [r5, #0]
 80094d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094d4:	81a3      	strh	r3, [r4, #12]
 80094d6:	f04f 30ff 	mov.w	r0, #4294967295
 80094da:	e033      	b.n	8009544 <__swsetup_r+0x98>
 80094dc:	0758      	lsls	r0, r3, #29
 80094de:	d512      	bpl.n	8009506 <__swsetup_r+0x5a>
 80094e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094e2:	b141      	cbz	r1, 80094f6 <__swsetup_r+0x4a>
 80094e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094e8:	4299      	cmp	r1, r3
 80094ea:	d002      	beq.n	80094f2 <__swsetup_r+0x46>
 80094ec:	4628      	mov	r0, r5
 80094ee:	f7ff f97b 	bl	80087e8 <_free_r>
 80094f2:	2300      	movs	r3, #0
 80094f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094fc:	81a3      	strh	r3, [r4, #12]
 80094fe:	2300      	movs	r3, #0
 8009500:	6063      	str	r3, [r4, #4]
 8009502:	6923      	ldr	r3, [r4, #16]
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	f043 0308 	orr.w	r3, r3, #8
 800950c:	81a3      	strh	r3, [r4, #12]
 800950e:	6923      	ldr	r3, [r4, #16]
 8009510:	b94b      	cbnz	r3, 8009526 <__swsetup_r+0x7a>
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800951c:	d003      	beq.n	8009526 <__swsetup_r+0x7a>
 800951e:	4621      	mov	r1, r4
 8009520:	4628      	mov	r0, r5
 8009522:	f000 f883 	bl	800962c <__smakebuf_r>
 8009526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800952a:	f013 0201 	ands.w	r2, r3, #1
 800952e:	d00a      	beq.n	8009546 <__swsetup_r+0x9a>
 8009530:	2200      	movs	r2, #0
 8009532:	60a2      	str	r2, [r4, #8]
 8009534:	6962      	ldr	r2, [r4, #20]
 8009536:	4252      	negs	r2, r2
 8009538:	61a2      	str	r2, [r4, #24]
 800953a:	6922      	ldr	r2, [r4, #16]
 800953c:	b942      	cbnz	r2, 8009550 <__swsetup_r+0xa4>
 800953e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009542:	d1c5      	bne.n	80094d0 <__swsetup_r+0x24>
 8009544:	bd38      	pop	{r3, r4, r5, pc}
 8009546:	0799      	lsls	r1, r3, #30
 8009548:	bf58      	it	pl
 800954a:	6962      	ldrpl	r2, [r4, #20]
 800954c:	60a2      	str	r2, [r4, #8]
 800954e:	e7f4      	b.n	800953a <__swsetup_r+0x8e>
 8009550:	2000      	movs	r0, #0
 8009552:	e7f7      	b.n	8009544 <__swsetup_r+0x98>
 8009554:	2000005c 	.word	0x2000005c

08009558 <_raise_r>:
 8009558:	291f      	cmp	r1, #31
 800955a:	b538      	push	{r3, r4, r5, lr}
 800955c:	4605      	mov	r5, r0
 800955e:	460c      	mov	r4, r1
 8009560:	d904      	bls.n	800956c <_raise_r+0x14>
 8009562:	2316      	movs	r3, #22
 8009564:	6003      	str	r3, [r0, #0]
 8009566:	f04f 30ff 	mov.w	r0, #4294967295
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800956e:	b112      	cbz	r2, 8009576 <_raise_r+0x1e>
 8009570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009574:	b94b      	cbnz	r3, 800958a <_raise_r+0x32>
 8009576:	4628      	mov	r0, r5
 8009578:	f000 f830 	bl	80095dc <_getpid_r>
 800957c:	4622      	mov	r2, r4
 800957e:	4601      	mov	r1, r0
 8009580:	4628      	mov	r0, r5
 8009582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009586:	f000 b817 	b.w	80095b8 <_kill_r>
 800958a:	2b01      	cmp	r3, #1
 800958c:	d00a      	beq.n	80095a4 <_raise_r+0x4c>
 800958e:	1c59      	adds	r1, r3, #1
 8009590:	d103      	bne.n	800959a <_raise_r+0x42>
 8009592:	2316      	movs	r3, #22
 8009594:	6003      	str	r3, [r0, #0]
 8009596:	2001      	movs	r0, #1
 8009598:	e7e7      	b.n	800956a <_raise_r+0x12>
 800959a:	2100      	movs	r1, #0
 800959c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095a0:	4620      	mov	r0, r4
 80095a2:	4798      	blx	r3
 80095a4:	2000      	movs	r0, #0
 80095a6:	e7e0      	b.n	800956a <_raise_r+0x12>

080095a8 <raise>:
 80095a8:	4b02      	ldr	r3, [pc, #8]	@ (80095b4 <raise+0xc>)
 80095aa:	4601      	mov	r1, r0
 80095ac:	6818      	ldr	r0, [r3, #0]
 80095ae:	f7ff bfd3 	b.w	8009558 <_raise_r>
 80095b2:	bf00      	nop
 80095b4:	2000005c 	.word	0x2000005c

080095b8 <_kill_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4d07      	ldr	r5, [pc, #28]	@ (80095d8 <_kill_r+0x20>)
 80095bc:	2300      	movs	r3, #0
 80095be:	4604      	mov	r4, r0
 80095c0:	4608      	mov	r0, r1
 80095c2:	4611      	mov	r1, r2
 80095c4:	602b      	str	r3, [r5, #0]
 80095c6:	f7fa fb23 	bl	8003c10 <_kill>
 80095ca:	1c43      	adds	r3, r0, #1
 80095cc:	d102      	bne.n	80095d4 <_kill_r+0x1c>
 80095ce:	682b      	ldr	r3, [r5, #0]
 80095d0:	b103      	cbz	r3, 80095d4 <_kill_r+0x1c>
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	bf00      	nop
 80095d8:	20000720 	.word	0x20000720

080095dc <_getpid_r>:
 80095dc:	f7fa bb10 	b.w	8003c00 <_getpid>

080095e0 <__swhatbuf_r>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	460c      	mov	r4, r1
 80095e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e8:	2900      	cmp	r1, #0
 80095ea:	b096      	sub	sp, #88	@ 0x58
 80095ec:	4615      	mov	r5, r2
 80095ee:	461e      	mov	r6, r3
 80095f0:	da0d      	bge.n	800960e <__swhatbuf_r+0x2e>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095f8:	f04f 0100 	mov.w	r1, #0
 80095fc:	bf14      	ite	ne
 80095fe:	2340      	movne	r3, #64	@ 0x40
 8009600:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009604:	2000      	movs	r0, #0
 8009606:	6031      	str	r1, [r6, #0]
 8009608:	602b      	str	r3, [r5, #0]
 800960a:	b016      	add	sp, #88	@ 0x58
 800960c:	bd70      	pop	{r4, r5, r6, pc}
 800960e:	466a      	mov	r2, sp
 8009610:	f000 f848 	bl	80096a4 <_fstat_r>
 8009614:	2800      	cmp	r0, #0
 8009616:	dbec      	blt.n	80095f2 <__swhatbuf_r+0x12>
 8009618:	9901      	ldr	r1, [sp, #4]
 800961a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800961e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009622:	4259      	negs	r1, r3
 8009624:	4159      	adcs	r1, r3
 8009626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800962a:	e7eb      	b.n	8009604 <__swhatbuf_r+0x24>

0800962c <__smakebuf_r>:
 800962c:	898b      	ldrh	r3, [r1, #12]
 800962e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009630:	079d      	lsls	r5, r3, #30
 8009632:	4606      	mov	r6, r0
 8009634:	460c      	mov	r4, r1
 8009636:	d507      	bpl.n	8009648 <__smakebuf_r+0x1c>
 8009638:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	6123      	str	r3, [r4, #16]
 8009640:	2301      	movs	r3, #1
 8009642:	6163      	str	r3, [r4, #20]
 8009644:	b003      	add	sp, #12
 8009646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009648:	ab01      	add	r3, sp, #4
 800964a:	466a      	mov	r2, sp
 800964c:	f7ff ffc8 	bl	80095e0 <__swhatbuf_r>
 8009650:	9f00      	ldr	r7, [sp, #0]
 8009652:	4605      	mov	r5, r0
 8009654:	4639      	mov	r1, r7
 8009656:	4630      	mov	r0, r6
 8009658:	f7fd fbf0 	bl	8006e3c <_malloc_r>
 800965c:	b948      	cbnz	r0, 8009672 <__smakebuf_r+0x46>
 800965e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009662:	059a      	lsls	r2, r3, #22
 8009664:	d4ee      	bmi.n	8009644 <__smakebuf_r+0x18>
 8009666:	f023 0303 	bic.w	r3, r3, #3
 800966a:	f043 0302 	orr.w	r3, r3, #2
 800966e:	81a3      	strh	r3, [r4, #12]
 8009670:	e7e2      	b.n	8009638 <__smakebuf_r+0xc>
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	6020      	str	r0, [r4, #0]
 8009676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800967a:	81a3      	strh	r3, [r4, #12]
 800967c:	9b01      	ldr	r3, [sp, #4]
 800967e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009682:	b15b      	cbz	r3, 800969c <__smakebuf_r+0x70>
 8009684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009688:	4630      	mov	r0, r6
 800968a:	f000 f81d 	bl	80096c8 <_isatty_r>
 800968e:	b128      	cbz	r0, 800969c <__smakebuf_r+0x70>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	f023 0303 	bic.w	r3, r3, #3
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	431d      	orrs	r5, r3
 80096a0:	81a5      	strh	r5, [r4, #12]
 80096a2:	e7cf      	b.n	8009644 <__smakebuf_r+0x18>

080096a4 <_fstat_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4d07      	ldr	r5, [pc, #28]	@ (80096c4 <_fstat_r+0x20>)
 80096a8:	2300      	movs	r3, #0
 80096aa:	4604      	mov	r4, r0
 80096ac:	4608      	mov	r0, r1
 80096ae:	4611      	mov	r1, r2
 80096b0:	602b      	str	r3, [r5, #0]
 80096b2:	f7fa fb0d 	bl	8003cd0 <_fstat>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	d102      	bne.n	80096c0 <_fstat_r+0x1c>
 80096ba:	682b      	ldr	r3, [r5, #0]
 80096bc:	b103      	cbz	r3, 80096c0 <_fstat_r+0x1c>
 80096be:	6023      	str	r3, [r4, #0]
 80096c0:	bd38      	pop	{r3, r4, r5, pc}
 80096c2:	bf00      	nop
 80096c4:	20000720 	.word	0x20000720

080096c8 <_isatty_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4d06      	ldr	r5, [pc, #24]	@ (80096e4 <_isatty_r+0x1c>)
 80096cc:	2300      	movs	r3, #0
 80096ce:	4604      	mov	r4, r0
 80096d0:	4608      	mov	r0, r1
 80096d2:	602b      	str	r3, [r5, #0]
 80096d4:	f7fa fb0c 	bl	8003cf0 <_isatty>
 80096d8:	1c43      	adds	r3, r0, #1
 80096da:	d102      	bne.n	80096e2 <_isatty_r+0x1a>
 80096dc:	682b      	ldr	r3, [r5, #0]
 80096de:	b103      	cbz	r3, 80096e2 <_isatty_r+0x1a>
 80096e0:	6023      	str	r3, [r4, #0]
 80096e2:	bd38      	pop	{r3, r4, r5, pc}
 80096e4:	20000720 	.word	0x20000720

080096e8 <_init>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	bf00      	nop
 80096ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ee:	bc08      	pop	{r3}
 80096f0:	469e      	mov	lr, r3
 80096f2:	4770      	bx	lr

080096f4 <_fini>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	bf00      	nop
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr
