
BMS_SN4_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08008980  08008980  00009980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009150  08009150  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009150  08009150  0000a150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009158  08009158  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009158  08009158  0000a158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800915c  0800915c  0000a15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009160  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  200001e4  08009344  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  08009344  0000b674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121ab  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb3  00000000  00000000  0001d3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001ff78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d53  00000000  00000000  000210a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244a1  00000000  00000000  00021dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015680  00000000  00000000  0004629c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5710  00000000  00000000  0005b91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013102c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b8  00000000  00000000  00131070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00136928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008968 	.word	0x08008968

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08008968 	.word	0x08008968

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <pec15_calc>:
// ****************** Error Correction *******************
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8000f84:	2310      	movs	r3, #16
 8000f86:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000f88:	2300      	movs	r3, #0
 8000f8a:	737b      	strb	r3, [r7, #13]
 8000f8c:	e018      	b.n	8000fc0 <pec15_calc+0x48>
	{
		addr = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	09db      	lsrs	r3, r3, #7
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	7b7a      	ldrb	r2, [r7, #13]
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	440a      	add	r2, r1
 8000f9a:	7812      	ldrb	r2, [r2, #0]
 8000f9c:	4053      	eors	r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	897b      	ldrh	r3, [r7, #10]
 8000fac:	490b      	ldr	r1, [pc, #44]	@ (8000fdc <pec15_calc+0x64>)
 8000fae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4053      	eors	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	737b      	strb	r3, [r7, #13]
 8000fc0:	7b7a      	ldrb	r2, [r7, #13]
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d3e2      	bcc.n	8000f8e <pec15_calc+0x16>
	}

	return(remainder * 2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	b29b      	uxth	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	080089c8 	.word	0x080089c8

08000fe0 <pec10_calc>:

/* Calculates  and returns the CRC10 */
uint16_t pec10_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8000fec:	2310      	movs	r3, #16
 8000fee:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	737b      	strb	r3, [r7, #13]
 8000ff4:	e01c      	b.n	8001030 <pec10_calc+0x50>
	{
		addr = ((remainder >> 2) ^ data[i]) & 0xff;//calculate PEC table address
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	7b7a      	ldrb	r2, [r7, #13]
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	440a      	add	r2, r1
 8001002:	7812      	ldrb	r2, [r2, #0]
 8001004:	4053      	eors	r3, r2
 8001006:	b29b      	uxth	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc10Table[addr];
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	897b      	ldrh	r3, [r7, #10]
 8001014:	490c      	ldr	r1, [pc, #48]	@ (8001048 <pec10_calc+0x68>)
 8001016:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4053      	eors	r3, r2
 800101e:	b21b      	sxth	r3, r3
 8001020:	81fb      	strh	r3, [r7, #14]
		remainder &= 0x3FF; //Ensure remainder stays within 10 bits
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001028:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 800102a:	7b7b      	ldrb	r3, [r7, #13]
 800102c:	3301      	adds	r3, #1
 800102e:	737b      	strb	r3, [r7, #13]
 8001030:	7b7a      	ldrb	r2, [r7, #13]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3de      	bcc.n	8000ff6 <pec10_calc+0x16>
	}

	return(remainder); // No 0 in LSB
 8001038:	89fb      	ldrh	r3, [r7, #14]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	08008bc8 	.word	0x08008bc8

0800104c <cmd_68>:
//***************** Read and Write to SPI ****************
/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	4619      	mov	r1, r3
 8001066:	2002      	movs	r0, #2
 8001068:	f7ff ff86 	bl	8000f78 <pec15_calc>
 800106c:	4603      	mov	r3, r0
 800106e:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001070:	89fb      	ldrh	r3, [r7, #14]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	72fb      	strb	r3, [r7, #11]

	FEB_cs_low();
 8001080:	f001 fca0 	bl	80029c4 <FEB_cs_low>
	FEB_spi_write_array(4,cmd);
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	4619      	mov	r1, r3
 800108a:	2004      	movs	r0, #4
 800108c:	f001 fcb2 	bl	80029f4 <FEB_spi_write_array>
	FEB_cs_high();
 8001090:	f001 fca4 	bl	80029dc <FEB_cs_high>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <cmd_68_r>:
void cmd_68_r(uint8_t tx_cmd[2],uint8_t* data, uint8_t len) //The command to be transmitted
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	4613      	mov	r3, r2
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	743b      	strb	r3, [r7, #16]
	cmd[1] =  tx_cmd[1];
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	747b      	strb	r3, [r7, #17]
	cmd_pec = pec15_calc(2, cmd);
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4619      	mov	r1, r3
 80010bc:	2002      	movs	r0, #2
 80010be:	f7ff ff5b 	bl	8000f78 <pec15_calc>
 80010c2:	4603      	mov	r3, r0
 80010c4:	82fb      	strh	r3, [r7, #22]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80010c6:	8afb      	ldrh	r3, [r7, #22]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t)(cmd_pec);
 80010d0:	8afb      	ldrh	r3, [r7, #22]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	74fb      	strb	r3, [r7, #19]

	FEB_cs_low();
 80010d6:	f001 fc75 	bl	80029c4 <FEB_cs_low>
	FEB_spi_write_read(cmd, 4, data, len);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f107 0010 	add.w	r0, r7, #16
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	2104      	movs	r1, #4
 80010e4:	f001 fc9a 	bl	8002a1c <FEB_spi_write_read>
	FEB_cs_high();
 80010e8:	f001 fc78 	bl	80029dc <FEB_cs_high>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8001102:	2306      	movs	r3, #6
 8001104:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	3304      	adds	r3, #4
 800110e:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001110:	7efb      	ldrb	r3, [r7, #27]
 8001112:	4618      	mov	r0, r3
 8001114:	f004 fdda 	bl	8005ccc <malloc>
 8001118:	4603      	mov	r3, r0
 800111a:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	7852      	ldrb	r2, [r2, #1]
 800112c:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 800112e:	6979      	ldr	r1, [r7, #20]
 8001130:	2002      	movs	r0, #2
 8001132:	f7ff ff21 	bl	8000f78 <pec15_calc>
 8001136:	4603      	mov	r3, r0
 8001138:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800113a:	8a7b      	ldrh	r3, [r7, #18]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b29a      	uxth	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3302      	adds	r3, #2
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3303      	adds	r3, #3
 800114c:	8a7a      	ldrh	r2, [r7, #18]
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8001152:	2304      	movs	r3, #4
 8001154:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each ADBMS630B, this loops starts with the last IC on the stack.
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	77bb      	strb	r3, [r7, #30]
 800115a:	e042      	b.n	80011e2 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800115c:	2300      	movs	r3, #0
 800115e:	777b      	strb	r3, [r7, #29]
 8001160:	e016      	b.n	8001190 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8001162:	7fbb      	ldrb	r3, [r7, #30]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	461a      	mov	r2, r3
 8001170:	7f7b      	ldrb	r3, [r7, #29]
 8001172:	4413      	add	r3, r2
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	441a      	add	r2, r3
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	6979      	ldr	r1, [r7, #20]
 800117e:	440b      	add	r3, r1
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8001184:	7ffb      	ldrb	r3, [r7, #31]
 8001186:	3301      	adds	r3, #1
 8001188:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800118a:	7f7b      	ldrb	r3, [r7, #29]
 800118c:	3301      	adds	r3, #1
 800118e:	777b      	strb	r3, [r7, #29]
 8001190:	7f7a      	ldrb	r2, [r7, #29]
 8001192:	7f3b      	ldrb	r3, [r7, #28]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3e4      	bcc.n	8001162 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec10_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 8001198:	7fbb      	ldrb	r3, [r7, #30]
 800119a:	1e5a      	subs	r2, r3, #1
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	461a      	mov	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	441a      	add	r2, r3
 80011aa:	7f3b      	ldrb	r3, [r7, #28]
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff16 	bl	8000fe0 <pec10_calc>
 80011b4:	4603      	mov	r3, r0
 80011b6:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 80011b8:	8a3b      	ldrh	r3, [r7, #16]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	b299      	uxth	r1, r3
 80011be:	7ffb      	ldrb	r3, [r7, #31]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	b2ca      	uxtb	r2, r1
 80011c6:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 80011c8:	7ffb      	ldrb	r3, [r7, #31]
 80011ca:	3301      	adds	r3, #1
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	4413      	add	r3, r2
 80011d0:	8a3a      	ldrh	r2, [r7, #16]
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	3302      	adds	r3, #2
 80011da:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each ADBMS630B, this loops starts with the last IC on the stack.
 80011dc:	7fbb      	ldrb	r3, [r7, #30]
 80011de:	3b01      	subs	r3, #1
 80011e0:	77bb      	strb	r3, [r7, #30]
 80011e2:	7fbb      	ldrb	r3, [r7, #30]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1b9      	bne.n	800115c <write_68+0x68>
	}

	FEB_cs_low();
 80011e8:	f001 fbec 	bl	80029c4 <FEB_cs_low>
	FEB_spi_write_array(CMD_LEN, cmd);
 80011ec:	7efb      	ldrb	r3, [r7, #27]
 80011ee:	6979      	ldr	r1, [r7, #20]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fbff 	bl	80029f4 <FEB_spi_write_array>
	FEB_cs_high();
 80011f6:	f001 fbf1 	bl	80029dc <FEB_cs_high>

	free(cmd);
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f004 fd6e 	bl	8005cdc <free>
}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <transmitCMDR>:
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
	cmd[1]=(cmdcode%0x100);//selects second byte
	cmd_68(cmd);
}
void transmitCMDR(uint16_t cmdcode,uint8_t*data,uint8_t len){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	80fb      	strh	r3, [r7, #6]
 8001214:	4613      	mov	r3, r2
 8001216:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	b29b      	uxth	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	733b      	strb	r3, [r7, #12]
	cmd[1]=(cmdcode%0x100);//selects second byte
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	737b      	strb	r3, [r7, #13]
	cmd_68_r(cmd,data,len);
 8001228:	797a      	ldrb	r2, [r7, #5]
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff33 	bl	800109c <cmd_68_r>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <get_gpio_pin>:


// ******************************** Helper Functions ********************************


static uint8_t get_gpio_pin(uint8_t mux) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	if(mux<0||mux>3)return -1;
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d901      	bls.n	8001254 <get_gpio_pin+0x14>
 8001250:	23ff      	movs	r3, #255	@ 0xff
 8001252:	e002      	b.n	800125a <get_gpio_pin+0x1a>

	return gpio_map[mux];
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <get_gpio_pin+0x28>)
 8001258:	5cd3      	ldrb	r3, [r2, r3]
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008

0800126c <get_sensor>:

static uint8_t get_sensor(uint8_t mux, uint8_t channel) {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
	return mux * 8 + channel;
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	b2da      	uxtb	r2, r3
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	4413      	add	r3, r2
 8001286:	b2db      	uxtb	r3, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	0000      	movs	r0, r0
	...

08001298 <convert_voltage>:

static float convert_voltage(int16_t raw_code) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
	return raw_code * 0.000150 + 1.5;
 80012a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f95c 	bl	8000564 <__aeabi_i2d>
 80012ac:	a30f      	add	r3, pc, #60	@ (adr r3, 80012ec <convert_voltage+0x54>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff f9c1 	bl	8000638 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <convert_voltage+0x50>)
 80012c4:	f7ff f802 	bl	80002cc <__adddf3>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fc8a 	bl	8000be8 <__aeabi_d2f>
 80012d4:	4603      	mov	r3, r0
 80012d6:	ee07 3a90 	vmov	s15, r3
}
 80012da:	eeb0 0a67 	vmov.f32	s0, s15
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	f3af 8000 	nop.w
 80012e8:	3ff80000 	.word	0x3ff80000
 80012ec:	30553261 	.word	0x30553261
 80012f0:	3f23a92a 	.word	0x3f23a92a

080012f4 <FEB_ADBMS_Init>:

// ******************************** Functions ********************************

void FEB_ADBMS_Init() {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af06      	add	r7, sp, #24
	FEB_cs_high();
 80012fa:	f001 fb6f 	bl	80029dc <FEB_cs_high>
	ADBMS6830B_init_cfg(FEB_NUM_IC, accumulator.IC_Config);
 80012fe:	4916      	ldr	r1, [pc, #88]	@ (8001358 <FEB_ADBMS_Init+0x64>)
 8001300:	2001      	movs	r0, #1
 8001302:	f000 fabb 	bl	800187c <ADBMS6830B_init_cfg>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 8001306:	2300      	movs	r3, #0
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	e016      	b.n	800133a <FEB_ADBMS_Init+0x46>
		ADBMS6830B_set_cfgr(ic, accumulator.IC_Config, refon, cth_bits, gpio_bits, dcc_bits, dcto_bits, uv, ov);
 800130c:	4b13      	ldr	r3, [pc, #76]	@ (800135c <FEB_ADBMS_Init+0x68>)
 800130e:	7819      	ldrb	r1, [r3, #0]
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <FEB_ADBMS_Init+0x6c>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <FEB_ADBMS_Init+0x70>)
 8001316:	8812      	ldrh	r2, [r2, #0]
 8001318:	79f8      	ldrb	r0, [r7, #7]
 800131a:	9204      	str	r2, [sp, #16]
 800131c:	9303      	str	r3, [sp, #12]
 800131e:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <FEB_ADBMS_Init+0x74>)
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <FEB_ADBMS_Init+0x78>)
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <FEB_ADBMS_Init+0x7c>)
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <FEB_ADBMS_Init+0x80>)
 800132c:	460a      	mov	r2, r1
 800132e:	490a      	ldr	r1, [pc, #40]	@ (8001358 <FEB_ADBMS_Init+0x64>)
 8001330:	f000 fb48 	bl	80019c4 <ADBMS6830B_set_cfgr>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	3301      	adds	r3, #1
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0e5      	beq.n	800130c <FEB_ADBMS_Init+0x18>
	}
	ADBMS6830B_reset_crc_count(FEB_NUM_IC, accumulator.IC_Config);
 8001340:	4905      	ldr	r1, [pc, #20]	@ (8001358 <FEB_ADBMS_Init+0x64>)
 8001342:	2001      	movs	r0, #1
 8001344:	f000 fad1 	bl	80018ea <ADBMS6830B_reset_crc_count>
	ADBMS6830B_init_reg_limits(FEB_NUM_IC, accumulator.IC_Config);
 8001348:	4903      	ldr	r1, [pc, #12]	@ (8001358 <FEB_ADBMS_Init+0x64>)
 800134a:	2001      	movs	r0, #1
 800134c:	f000 fe0d 	bl	8001f6a <ADBMS6830B_init_reg_limits>

}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000030c 	.word	0x2000030c
 800135c:	20000000 	.word	0x20000000
 8001360:	2000000c 	.word	0x2000000c
 8001364:	2000000e 	.word	0x2000000e
 8001368:	20000430 	.word	0x20000430
 800136c:	20000424 	.word	0x20000424
 8001370:	20000418 	.word	0x20000418
 8001374:	20000004 	.word	0x20000004

08001378 <FEB_ADBMS_AcquireData>:

void FEB_ADBMS_AcquireData() {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0

	/* Voltage */
	start_adc_cell_voltage_measurements();
 800137e:	f000 f81e 	bl	80013be <start_adc_cell_voltage_measurements>
	read_cell_voltages();
 8001382:	f000 f82f 	bl	80013e4 <read_cell_voltages>
	store_cell_voltages();
 8001386:	f000 f83b 	bl	8001400 <store_cell_voltages>
	//validate_voltages();

	/* Temperature */
	for (uint8_t channel = 0; channel < 8; channel++) {
 800138a:	2300      	movs	r3, #0
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	e00e      	b.n	80013ae <FEB_ADBMS_AcquireData+0x36>
		configure_gpio_bits(channel);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f896 	bl	80014c4 <configure_gpio_bits>
		start_aux_voltage_measurements();
 8001398:	f000 f904 	bl	80015a4 <start_aux_voltage_measurements>
		read_aux_voltages();
 800139c:	f000 f910 	bl	80015c0 <read_aux_voltages>
		store_cell_temps(channel);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f91a 	bl	80015dc <store_cell_temps>
	for (uint8_t channel = 0; channel < 8; channel++) {
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	3301      	adds	r3, #1
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b07      	cmp	r3, #7
 80013b2:	d9ed      	bls.n	8001390 <FEB_ADBMS_AcquireData+0x18>
	}

}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <start_adc_cell_voltage_measurements>:

// ******************************** Voltage ********************************

void start_adc_cell_voltage_measurements() {
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af02      	add	r7, sp, #8
	wakeup_sleep(FEB_NUM_IC);
 80013c4:	2001      	movs	r0, #1
 80013c6:	f001 f909 	bl	80025dc <wakeup_sleep>
	ADBMS6830B_adcv(RDVR, DCPVR, CONTVR, RSTFVR, OWVR);
 80013ca:	2300      	movs	r3, #0
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2300      	movs	r3, #0
 80013d0:	2201      	movs	r2, #1
 80013d2:	2100      	movs	r1, #0
 80013d4:	2001      	movs	r0, #1
 80013d6:	f000 fe1b 	bl	8002010 <ADBMS6830B_adcv>
	ADBMS6830B_pollAdc();
 80013da:	f000 fe4b 	bl	8002074 <ADBMS6830B_pollAdc>
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <read_cell_voltages>:

void read_cell_voltages() {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f001 f8f7 	bl	80025dc <wakeup_sleep>
	ADBMS6830B_rdcv(FEB_NUM_IC, accumulator.IC_Config);
 80013ee:	4903      	ldr	r1, [pc, #12]	@ (80013fc <read_cell_voltages+0x18>)
 80013f0:	2001      	movs	r0, #1
 80013f2:	f000 fe6f 	bl	80020d4 <ADBMS6830B_rdcv>
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000030c 	.word	0x2000030c

08001400 <store_cell_voltages>:

void store_cell_voltages() {
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
	accumulator.total_voltage_V = 0;
 8001406:	4b2e      	ldr	r3, [pc, #184]	@ (80014c0 <store_cell_voltages+0xc0>)
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 800140e:	2300      	movs	r3, #0
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	e04c      	b.n	80014ae <store_cell_voltages+0xae>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 8001414:	2300      	movs	r3, #0
 8001416:	71bb      	strb	r3, [r7, #6]
 8001418:	e043      	b.n	80014a2 <store_cell_voltages+0xa2>
			uint8_t ic = bank;
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	717b      	strb	r3, [r7, #5]
			float actual_voltage = convert_voltage(accumulator.IC_Config[bank].cells.c_codes[ic]);
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	797b      	ldrb	r3, [r7, #5]
 8001422:	4927      	ldr	r1, [pc, #156]	@ (80014c0 <store_cell_voltages+0xc0>)
 8001424:	2086      	movs	r0, #134	@ 0x86
 8001426:	fb00 f202 	mul.w	r2, r0, r2
 800142a:	4413      	add	r3, r2
 800142c:	3390      	adds	r3, #144	@ 0x90
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	440b      	add	r3, r1
 8001432:	895b      	ldrh	r3, [r3, #10]
 8001434:	b21b      	sxth	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff2e 	bl	8001298 <convert_voltage>
 800143c:	ed87 0a00 	vstr	s0, [r7]
			accumulator.banks[bank].cells[cell].voltage_V = actual_voltage;
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	79bb      	ldrb	r3, [r7, #6]
 8001444:	481e      	ldr	r0, [pc, #120]	@ (80014c0 <store_cell_voltages+0xc0>)
 8001446:	3310      	adds	r3, #16
 8001448:	00d9      	lsls	r1, r3, #3
 800144a:	4613      	mov	r3, r2
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	4403      	add	r3, r0
 8001456:	330c      	adds	r3, #12
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	601a      	str	r2, [r3, #0]
			accumulator.banks[bank].cells[cell].voltage_S = convert_voltage(accumulator.IC_Config[bank].cells.s_codes[ic]);
 800145c:	79fa      	ldrb	r2, [r7, #7]
 800145e:	797b      	ldrb	r3, [r7, #5]
 8001460:	4917      	ldr	r1, [pc, #92]	@ (80014c0 <store_cell_voltages+0xc0>)
 8001462:	2086      	movs	r0, #134	@ 0x86
 8001464:	fb00 f202 	mul.w	r2, r0, r2
 8001468:	4413      	add	r3, r2
 800146a:	33a0      	adds	r3, #160	@ 0xa0
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	440b      	add	r3, r1
 8001470:	89db      	ldrh	r3, [r3, #14]
 8001472:	b21b      	sxth	r3, r3
 8001474:	79fc      	ldrb	r4, [r7, #7]
 8001476:	79bd      	ldrb	r5, [r7, #6]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff0d 	bl	8001298 <convert_voltage>
 800147e:	eef0 7a40 	vmov.f32	s15, s0
 8001482:	490f      	ldr	r1, [pc, #60]	@ (80014c0 <store_cell_voltages+0xc0>)
 8001484:	f105 0310 	add.w	r3, r5, #16
 8001488:	00da      	lsls	r2, r3, #3
 800148a:	4623      	mov	r3, r4
 800148c:	019b      	lsls	r3, r3, #6
 800148e:	4423      	add	r3, r4
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	440b      	add	r3, r1
 8001496:	3310      	adds	r3, #16
 8001498:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	3301      	adds	r3, #1
 80014a0:	71bb      	strb	r3, [r7, #6]
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d9b8      	bls.n	800141a <store_cell_voltages+0x1a>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	3301      	adds	r3, #1
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0af      	beq.n	8001414 <store_cell_voltages+0x14>
		}
	}
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bdb0      	pop	{r4, r5, r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000200 	.word	0x20000200

080014c4 <configure_gpio_bits>:

// ******************************** Temperature ********************************



void configure_gpio_bits(uint8_t channel) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af06      	add	r7, sp, #24
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
	gpio_bits[0] = 0b1; /* ADC Channel */
 80014ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <configure_gpio_bits+0xc0>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
	gpio_bits[1] = 0b1; /* ADC Channel */
 80014d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001584 <configure_gpio_bits+0xc0>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	705a      	strb	r2, [r3, #1]
	gpio_bits[2] = (channel >> 0) & 0b1; /* MUX Sel 1 */
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf14      	ite	ne
 80014e4:	2301      	movne	r3, #1
 80014e6:	2300      	moveq	r3, #0
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <configure_gpio_bits+0xc0>)
 80014ec:	709a      	strb	r2, [r3, #2]
	gpio_bits[3] = (channel >> 1) & 0b1; /* MUX Sel 1 */
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	bf14      	ite	ne
 80014fc:	2301      	movne	r3, #1
 80014fe:	2300      	moveq	r3, #0
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <configure_gpio_bits+0xc0>)
 8001504:	70da      	strb	r2, [r3, #3]
	gpio_bits[4] = (channel >> 2) & 0b1; /* MUX Sel 1 */
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	b2db      	uxtb	r3, r3
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <configure_gpio_bits+0xc0>)
 800151c:	711a      	strb	r2, [r3, #4]
	gpio_bits[5] = 0b1; /* ADC Channel */
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <configure_gpio_bits+0xc0>)
 8001520:	2201      	movs	r2, #1
 8001522:	715a      	strb	r2, [r3, #5]
	gpio_bits[6] = 0b1; /* ADC Channel */
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <configure_gpio_bits+0xc0>)
 8001526:	2201      	movs	r2, #1
 8001528:	719a      	strb	r2, [r3, #6]
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e016      	b.n	800155e <configure_gpio_bits+0x9a>
		ADBMS6830B_set_cfgr(ic, accumulator.IC_Config, refon, cth_bits, gpio_bits, dcc_bits, dcto_bits, uv, ov);
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <configure_gpio_bits+0xc4>)
 8001532:	7819      	ldrb	r1, [r3, #0]
 8001534:	4b15      	ldr	r3, [pc, #84]	@ (800158c <configure_gpio_bits+0xc8>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	4a15      	ldr	r2, [pc, #84]	@ (8001590 <configure_gpio_bits+0xcc>)
 800153a:	8812      	ldrh	r2, [r2, #0]
 800153c:	7bf8      	ldrb	r0, [r7, #15]
 800153e:	9204      	str	r2, [sp, #16]
 8001540:	9303      	str	r3, [sp, #12]
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <configure_gpio_bits+0xd0>)
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <configure_gpio_bits+0xd4>)
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <configure_gpio_bits+0xc0>)
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4b13      	ldr	r3, [pc, #76]	@ (800159c <configure_gpio_bits+0xd8>)
 8001550:	460a      	mov	r2, r1
 8001552:	4913      	ldr	r1, [pc, #76]	@ (80015a0 <configure_gpio_bits+0xdc>)
 8001554:	f000 fa36 	bl	80019c4 <ADBMS6830B_set_cfgr>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	3301      	adds	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0e5      	beq.n	8001530 <configure_gpio_bits+0x6c>
	}
	wakeup_sleep(FEB_NUM_IC);
 8001564:	2001      	movs	r0, #1
 8001566:	f001 f839 	bl	80025dc <wakeup_sleep>
	ADBMS6830B_wrcfga(FEB_NUM_IC, accumulator.IC_Config);
 800156a:	490d      	ldr	r1, [pc, #52]	@ (80015a0 <configure_gpio_bits+0xdc>)
 800156c:	2001      	movs	r0, #1
 800156e:	f000 fe5e 	bl	800222e <ADBMS6830B_wrcfga>
	ADBMS6830B_wrcfgb(FEB_NUM_IC, accumulator.IC_Config);
 8001572:	490b      	ldr	r1, [pc, #44]	@ (80015a0 <configure_gpio_bits+0xdc>)
 8001574:	2001      	movs	r0, #1
 8001576:	f000 feda 	bl	800232e <ADBMS6830B_wrcfgb>

}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000418 	.word	0x20000418
 8001588:	20000000 	.word	0x20000000
 800158c:	2000000c 	.word	0x2000000c
 8001590:	2000000e 	.word	0x2000000e
 8001594:	20000430 	.word	0x20000430
 8001598:	20000424 	.word	0x20000424
 800159c:	20000004 	.word	0x20000004
 80015a0:	2000030c 	.word	0x2000030c

080015a4 <start_aux_voltage_measurements>:

void start_aux_voltage_measurements() {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 80015a8:	2001      	movs	r0, #1
 80015aa:	f001 f817 	bl	80025dc <wakeup_sleep>
	ADBMS6830B_adax(AUX_OW_OFF, PUP_DOWN, AUX_ALL);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2000      	movs	r0, #0
 80015b4:	f000 ff3c 	bl	8002430 <ADBMS6830B_adax>
	ADBMS6830B_pollAdc();
 80015b8:	f000 fd5c 	bl	8002074 <ADBMS6830B_pollAdc>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <read_aux_voltages>:

void read_aux_voltages() {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f001 f809 	bl	80025dc <wakeup_sleep>
	ADBMS6830B_rdaux(FEB_NUM_IC, accumulator.IC_Config);
 80015ca:	4903      	ldr	r1, [pc, #12]	@ (80015d8 <read_aux_voltages+0x18>)
 80015cc:	2001      	movs	r0, #1
 80015ce:	f000 ff59 	bl	8002484 <ADBMS6830B_rdaux>
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000030c 	.word	0x2000030c

080015dc <store_cell_temps>:

void store_cell_temps(uint8_t channel) {
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e039      	b.n	8001660 <store_cell_temps+0x84>
		for (uint8_t mux = 0; mux < 4; mux++) {
 80015ec:	2300      	movs	r3, #0
 80015ee:	73bb      	strb	r3, [r7, #14]
 80015f0:	e030      	b.n	8001654 <store_cell_temps+0x78>
			uint8_t gpio = get_gpio_pin(mux);
 80015f2:	7bbb      	ldrb	r3, [r7, #14]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fe23 	bl	8001240 <get_gpio_pin>
 80015fa:	4603      	mov	r3, r0
 80015fc:	737b      	strb	r3, [r7, #13]
			uint16_t raw_code = accumulator.IC_Config[bank].aux.a_codes[gpio];
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	7b7b      	ldrb	r3, [r7, #13]
 8001602:	491b      	ldr	r1, [pc, #108]	@ (8001670 <store_cell_temps+0x94>)
 8001604:	2086      	movs	r0, #134	@ 0x86
 8001606:	fb00 f202 	mul.w	r2, r0, r2
 800160a:	4413      	add	r3, r2
 800160c:	33b8      	adds	r3, #184	@ 0xb8
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	440b      	add	r3, r1
 8001612:	891b      	ldrh	r3, [r3, #8]
 8001614:	817b      	strh	r3, [r7, #10]
			uint8_t sensor = get_sensor(mux, channel);
 8001616:	79fa      	ldrb	r2, [r7, #7]
 8001618:	7bbb      	ldrb	r3, [r7, #14]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fe25 	bl	800126c <get_sensor>
 8001622:	4603      	mov	r3, r0
 8001624:	727b      	strb	r3, [r7, #9]
			accumulator.banks[bank].temp_sensor_readings_V[sensor] = convert_voltage(raw_code);
 8001626:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800162a:	7bfc      	ldrb	r4, [r7, #15]
 800162c:	7a7d      	ldrb	r5, [r7, #9]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fe32 	bl	8001298 <convert_voltage>
 8001634:	eef0 7a40 	vmov.f32	s15, s0
 8001638:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <store_cell_temps+0x94>)
 800163a:	4623      	mov	r3, r4
 800163c:	019b      	lsls	r3, r3, #6
 800163e:	4423      	add	r3, r4
 8001640:	442b      	add	r3, r5
 8001642:	3302      	adds	r3, #2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t mux = 0; mux < 4; mux++) {
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	3301      	adds	r3, #1
 8001652:	73bb      	strb	r3, [r7, #14]
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d9cb      	bls.n	80015f2 <store_cell_temps+0x16>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	3301      	adds	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0c2      	beq.n	80015ec <store_cell_temps+0x10>
		}
	}
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bdb0      	pop	{r4, r5, r7, pc}
 8001670:	20000200 	.word	0x20000200

08001674 <FEB_ADBMS_UART_Transmit>:

void FEB_ADBMS_UART_Transmit() {
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	f5ad 7d45 	sub.w	sp, sp, #788	@ 0x314
 800167a:	af00      	add	r7, sp, #0
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 800167c:	2300      	movs	r3, #0
 800167e:	f887 330f 	strb.w	r3, [r7, #783]	@ 0x30f
 8001682:	e0db      	b.n	800183c <FEB_ADBMS_UART_Transmit+0x1c8>
		char UART_head[256];
		char UART_str[256];
		char UART_temp[256];
		int offset[3];
		offset[0]=sprintf((char*)UART_head,"|Bnk %d|",bank);
 8001684:	f897 230f 	ldrb.w	r2, [r7, #783]	@ 0x30f
 8001688:	463b      	mov	r3, r7
 800168a:	4972      	ldr	r1, [pc, #456]	@ (8001854 <FEB_ADBMS_UART_Transmit+0x1e0>)
 800168c:	4618      	mov	r0, r3
 800168e:	f005 f8f5 	bl	800687c <siprintf>
 8001692:	4603      	mov	r3, r0
 8001694:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
		offset[1]=sprintf((char*)UART_str,"|Vlt  |");
 8001698:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800169c:	496e      	ldr	r1, [pc, #440]	@ (8001858 <FEB_ADBMS_UART_Transmit+0x1e4>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f005 f8ec 	bl	800687c <siprintf>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
		offset[2]=sprintf((char*)UART_temp,"|Temp |");
 80016aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ae:	496b      	ldr	r1, [pc, #428]	@ (800185c <FEB_ADBMS_UART_Transmit+0x1e8>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f005 f8e3 	bl	800687c <siprintf>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308


		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell++) {
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 330e 	strb.w	r3, [r7, #782]	@ 0x30e
 80016c2:	e063      	b.n	800178c <FEB_ADBMS_UART_Transmit+0x118>
			offset[0]+=sprintf((char*)(UART_head + offset[0]), (cell>=10)?"Cell  %d|":"Cell   %d|",cell);
 80016c4:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 80016c8:	461a      	mov	r2, r3
 80016ca:	463b      	mov	r3, r7
 80016cc:	1898      	adds	r0, r3, r2
 80016ce:	f897 330e 	ldrb.w	r3, [r7, #782]	@ 0x30e
 80016d2:	2b09      	cmp	r3, #9
 80016d4:	d901      	bls.n	80016da <FEB_ADBMS_UART_Transmit+0x66>
 80016d6:	4b62      	ldr	r3, [pc, #392]	@ (8001860 <FEB_ADBMS_UART_Transmit+0x1ec>)
 80016d8:	e000      	b.n	80016dc <FEB_ADBMS_UART_Transmit+0x68>
 80016da:	4b62      	ldr	r3, [pc, #392]	@ (8001864 <FEB_ADBMS_UART_Transmit+0x1f0>)
 80016dc:	f897 230e 	ldrb.w	r2, [r7, #782]	@ 0x30e
 80016e0:	4619      	mov	r1, r3
 80016e2:	f005 f8cb 	bl	800687c <siprintf>
 80016e6:	4602      	mov	r2, r0
 80016e8:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 80016ec:	4413      	add	r3, r2
 80016ee:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
			offset[1]+=sprintf((char*)(UART_str + offset[1]), "%.6f|",accumulator.banks[bank].cells[cell].voltage_V);
 80016f2:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 80016f6:	461a      	mov	r2, r3
 80016f8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80016fc:	189c      	adds	r4, r3, r2
 80016fe:	f897 230f 	ldrb.w	r2, [r7, #783]	@ 0x30f
 8001702:	f897 330e 	ldrb.w	r3, [r7, #782]	@ 0x30e
 8001706:	4858      	ldr	r0, [pc, #352]	@ (8001868 <FEB_ADBMS_UART_Transmit+0x1f4>)
 8001708:	3310      	adds	r3, #16
 800170a:	00d9      	lsls	r1, r3, #3
 800170c:	4613      	mov	r3, r2
 800170e:	019b      	lsls	r3, r3, #6
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	4403      	add	r3, r0
 8001718:	330c      	adds	r3, #12
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff33 	bl	8000588 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4951      	ldr	r1, [pc, #324]	@ (800186c <FEB_ADBMS_UART_Transmit+0x1f8>)
 8001728:	4620      	mov	r0, r4
 800172a:	f005 f8a7 	bl	800687c <siprintf>
 800172e:	4602      	mov	r2, r0
 8001730:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8001734:	4413      	add	r3, r2
 8001736:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
			offset[2]+=sprintf((char*)(UART_temp + offset[2]), "%.6f|",accumulator.banks[bank].cells[cell].voltage_S);
 800173a:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 800173e:	461a      	mov	r2, r3
 8001740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001744:	189c      	adds	r4, r3, r2
 8001746:	f897 230f 	ldrb.w	r2, [r7, #783]	@ 0x30f
 800174a:	f897 330e 	ldrb.w	r3, [r7, #782]	@ 0x30e
 800174e:	4846      	ldr	r0, [pc, #280]	@ (8001868 <FEB_ADBMS_UART_Transmit+0x1f4>)
 8001750:	3310      	adds	r3, #16
 8001752:	00d9      	lsls	r1, r3, #3
 8001754:	4613      	mov	r3, r2
 8001756:	019b      	lsls	r3, r3, #6
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	4403      	add	r3, r0
 8001760:	3310      	adds	r3, #16
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe ff0f 	bl	8000588 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	493f      	ldr	r1, [pc, #252]	@ (800186c <FEB_ADBMS_UART_Transmit+0x1f8>)
 8001770:	4620      	mov	r0, r4
 8001772:	f005 f883 	bl	800687c <siprintf>
 8001776:	4602      	mov	r2, r0
 8001778:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 800177c:	4413      	add	r3, r2
 800177e:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell++) {
 8001782:	f897 330e 	ldrb.w	r3, [r7, #782]	@ 0x30e
 8001786:	3301      	adds	r3, #1
 8001788:	f887 330e 	strb.w	r3, [r7, #782]	@ 0x30e
 800178c:	f897 330e 	ldrb.w	r3, [r7, #782]	@ 0x30e
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d997      	bls.n	80016c4 <FEB_ADBMS_UART_Transmit+0x50>
		}
		offset[0]+=sprintf((char*)(UART_head + offset[0]), "\n\r");
 8001794:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8001798:	461a      	mov	r2, r3
 800179a:	463b      	mov	r3, r7
 800179c:	4413      	add	r3, r2
 800179e:	4934      	ldr	r1, [pc, #208]	@ (8001870 <FEB_ADBMS_UART_Transmit+0x1fc>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 f86b 	bl	800687c <siprintf>
 80017a6:	4602      	mov	r2, r0
 80017a8:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 80017ac:	4413      	add	r3, r2
 80017ae:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
		offset[1]+=sprintf((char*)(UART_str + offset[1]), "\n\r");
 80017b2:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 80017b6:	461a      	mov	r2, r3
 80017b8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80017bc:	4413      	add	r3, r2
 80017be:	492c      	ldr	r1, [pc, #176]	@ (8001870 <FEB_ADBMS_UART_Transmit+0x1fc>)
 80017c0:	4618      	mov	r0, r3
 80017c2:	f005 f85b 	bl	800687c <siprintf>
 80017c6:	4602      	mov	r2, r0
 80017c8:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 80017cc:	4413      	add	r3, r2
 80017ce:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
		offset[2]+=sprintf((char*)(UART_temp + offset[2]), "\n\r\n\r\n\r");
 80017d2:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80017d6:	461a      	mov	r2, r3
 80017d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017dc:	4413      	add	r3, r2
 80017de:	4925      	ldr	r1, [pc, #148]	@ (8001874 <FEB_ADBMS_UART_Transmit+0x200>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f005 f84b 	bl	800687c <siprintf>
 80017e6:	4602      	mov	r2, r0
 80017e8:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80017ec:	4413      	add	r3, r2
 80017ee:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_head, offset[0]+1, 100);
 80017f2:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4639      	mov	r1, r7
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	481d      	ldr	r0, [pc, #116]	@ (8001878 <FEB_ADBMS_UART_Transmit+0x204>)
 8001802:	f003 feee 	bl	80055e2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, offset[1]+1, 100);
 8001806:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 800180a:	b29b      	uxth	r3, r3
 800180c:	3301      	adds	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8001814:	2364      	movs	r3, #100	@ 0x64
 8001816:	4818      	ldr	r0, [pc, #96]	@ (8001878 <FEB_ADBMS_UART_Transmit+0x204>)
 8001818:	f003 fee3 	bl	80055e2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) UART_temp, offset[2]+1, 100);
 800181c:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8001820:	b29b      	uxth	r3, r3
 8001822:	3301      	adds	r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 800182a:	2364      	movs	r3, #100	@ 0x64
 800182c:	4812      	ldr	r0, [pc, #72]	@ (8001878 <FEB_ADBMS_UART_Transmit+0x204>)
 800182e:	f003 fed8 	bl	80055e2 <HAL_UART_Transmit>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 8001832:	f897 330f 	ldrb.w	r3, [r7, #783]	@ 0x30f
 8001836:	3301      	adds	r3, #1
 8001838:	f887 330f 	strb.w	r3, [r7, #783]	@ 0x30f
 800183c:	f897 330f 	ldrb.w	r3, [r7, #783]	@ 0x30f
 8001840:	2b00      	cmp	r3, #0
 8001842:	f43f af1f 	beq.w	8001684 <FEB_ADBMS_UART_Transmit+0x10>
	}
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	f507 7745 	add.w	r7, r7, #788	@ 0x314
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	bf00      	nop
 8001854:	08008980 	.word	0x08008980
 8001858:	0800898c 	.word	0x0800898c
 800185c:	08008994 	.word	0x08008994
 8001860:	0800899c 	.word	0x0800899c
 8001864:	080089a8 	.word	0x080089a8
 8001868:	20000200 	.word	0x20000200
 800186c:	080089b4 	.word	0x080089b4
 8001870:	080089bc 	.word	0x080089bc
 8001874:	080089c0 	.word	0x080089c0
 8001878:	20000494 	.word	0x20000494

0800187c <ADBMS6830B_init_cfg>:

/* Helper function to initialize CFG variables */
void ADBMS6830B_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e022      	b.n	80018d4 <ADBMS6830B_init_cfg+0x58>
	{
		for (int j =0; j<6; j++)
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	e019      	b.n	80018c8 <ADBMS6830B_init_cfg+0x4c>
		{
		  ic[current_ic].configa.tx_data[j] = 0;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800189a:	fb02 f303 	mul.w	r3, r2, r3
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	441a      	add	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	4413      	add	r3, r2
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
          ic[current_ic].configb.tx_data[j] = 0;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	441a      	add	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4413      	add	r3, r2
 80018bc:	330f      	adds	r3, #15
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3301      	adds	r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	dde2      	ble.n	8001894 <ADBMS6830B_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	3301      	adds	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d3d8      	bcc.n	800188e <ADBMS6830B_init_cfg+0x12>
		}
	}
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <ADBMS6830B_reset_crc_count>:

/* Helper Function to reset PEC counters */
void ADBMS6830B_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 80018ea:	b480      	push	{r7}
 80018ec:	b087      	sub	sp, #28
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	6039      	str	r1, [r7, #0]
 80018f4:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e058      	b.n	80019ae <ADBMS6830B_reset_crc_count+0xc4>
	{
		ic[current_ic].crc_count.pec_count = 0;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	2200      	movs	r2, #0
 800190c:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
		ic[current_ic].crc_count.cfgr_pec = 0;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	4413      	add	r3, r2
 800191e:	2200      	movs	r2, #0
 8001920:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		for (int i=0; i<6; i++)
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	e00f      	b.n	800194a <ADBMS6830B_reset_crc_count+0x60>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	441a      	add	r2, r3
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	3370      	adds	r3, #112	@ 0x70
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	2200      	movs	r2, #0
 8001942:	815a      	strh	r2, [r3, #10]
		for (int i=0; i<6; i++)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	3301      	adds	r3, #1
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b05      	cmp	r3, #5
 800194e:	ddec      	ble.n	800192a <ADBMS6830B_reset_crc_count+0x40>

		}
		for (int i=0; i<4; i++)
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e00f      	b.n	8001976 <ADBMS6830B_reset_crc_count+0x8c>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	441a      	add	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3378      	adds	r3, #120	@ 0x78
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	2200      	movs	r2, #0
 800196e:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<4; i++)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3301      	adds	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2b03      	cmp	r3, #3
 800197a:	ddec      	ble.n	8001956 <ADBMS6830B_reset_crc_count+0x6c>
		}
		for (int i=0; i<2; i++)
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	e00f      	b.n	80019a2 <ADBMS6830B_reset_crc_count+0xb8>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	441a      	add	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	337c      	adds	r3, #124	@ 0x7c
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	2200      	movs	r2, #0
 800199a:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<2; i++)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3301      	adds	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	ddec      	ble.n	8001982 <ADBMS6830B_reset_crc_count+0x98>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dba2      	blt.n	80018fc <ADBMS6830B_reset_crc_count+0x12>
		}
	}
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <ADBMS6830B_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4603      	mov	r3, r0
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	4613      	mov	r3, r2
 80019d4:	73bb      	strb	r3, [r7, #14]
	ADBMS6830B_set_cfgr_refon(nIC,ic,refon);
 80019d6:	7bba      	ldrb	r2, [r7, #14]
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 f828 	bl	8001a32 <ADBMS6830B_set_cfgr_refon>
	ADBMS6830B_set_cfgr_cth(nIC,ic,cth);
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f85a 	bl	8001aa2 <ADBMS6830B_set_cfgr_cth>
	ADBMS6830B_set_cfgr_gpio(nIC,ic,gpio);
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 f8a6 	bl	8001b46 <ADBMS6830B_set_cfgr_gpio>
	ADBMS6830B_set_cfgr_dis(nIC,ic,dcc);
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f937 	bl	8001c74 <ADBMS6830B_set_cfgr_dis>
	ADBMS6830B_set_cfgr_dcto(nIC,ic,dcto);
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	6a3a      	ldr	r2, [r7, #32]
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f9c8 	bl	8001da2 <ADBMS6830B_set_cfgr_dcto>
	ADBMS6830B_set_cfgr_uv(nIC, ic, uv);
 8001a12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fa14 	bl	8001e46 <ADBMS6830B_set_cfgr_uv>
	ADBMS6830B_set_cfgr_ov(nIC, ic, ov);
 8001a1e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	68b9      	ldr	r1, [r7, #8]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fa59 	bl	8001edc <ADBMS6830B_set_cfgr_ov>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <ADBMS6830B_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void ADBMS6830B_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	6039      	str	r1, [r7, #0]
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]|0x80;
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d013      	beq.n	8001a70 <ADBMS6830B_set_cfgr_refon+0x3e>
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	6839      	ldr	r1, [r7, #0]
 8001a64:	440b      	add	r3, r1
 8001a66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	701a      	strb	r2, [r3, #0]
	else ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]&0x7F;
}
 8001a6e:	e012      	b.n	8001a96 <ADBMS6830B_set_cfgr_refon+0x64>
	else ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]&0x7F;
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	440b      	add	r3, r1
 8001a8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <ADBMS6830B_set_cfgr_cth>:

/* Helper function to set CTH bits */
void ADBMS6830B_set_cfgr_cth(uint8_t nIC, cell_asic *ic, bool cth[3])
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b087      	sub	sp, #28
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 3; i++) {
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e03d      	b.n	8001b32 <ADBMS6830B_set_cfgr_cth+0x90>
        if (cth[i]) {
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d019      	beq.n	8001af6 <ADBMS6830B_set_cfgr_cth+0x54>
            ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0] | (0b01 << i);
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b25a      	sxtb	r2, r3
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	b25b      	sxtb	r3, r3
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b259      	sxtb	r1, r3
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ae8:	fb02 f303 	mul.w	r3, r2, r3
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	4413      	add	r3, r2
 8001af0:	b2ca      	uxtb	r2, r1
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e01a      	b.n	8001b2c <ADBMS6830B_set_cfgr_cth+0x8a>
        } else {
            ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0] & ~(0b01 << i);
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b25a      	sxtb	r2, r3
 8001b08:	2101      	movs	r1, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	4013      	ands	r3, r2
 8001b18:	b259      	sxtb	r1, r3
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b20:	fb02 f303 	mul.w	r3, r2, r3
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	4413      	add	r3, r2
 8001b28:	b2ca      	uxtb	r2, r1
 8001b2a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	ddbe      	ble.n	8001ab6 <ADBMS6830B_set_cfgr_cth+0x14>
        }
    }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <ADBMS6830B_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void ADBMS6830B_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[10])
{
 8001b46:	b480      	push	{r7}
 8001b48:	b087      	sub	sp, #28
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++) {
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e03d      	b.n	8001bd6 <ADBMS6830B_set_cfgr_gpio+0x90>
		if (gpio[i]) {
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d019      	beq.n	8001b9a <ADBMS6830B_set_cfgr_gpio+0x54>
            ic[nIC].configa.tx_data[3] = ic[nIC].configa.tx_data[3] | (0b01 << i);
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	4413      	add	r3, r2
 8001b74:	78db      	ldrb	r3, [r3, #3]
 8001b76:	b25a      	sxtb	r2, r3
 8001b78:	2101      	movs	r1, #1
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	b25b      	sxtb	r3, r3
 8001b82:	4313      	orrs	r3, r2
 8001b84:	b259      	sxtb	r1, r3
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	4413      	add	r3, r2
 8001b94:	b2ca      	uxtb	r2, r1
 8001b96:	70da      	strb	r2, [r3, #3]
 8001b98:	e01a      	b.n	8001bd0 <ADBMS6830B_set_cfgr_gpio+0x8a>
        } else {
             ic[nIC].configa.tx_data[3] = ic[nIC].configa.tx_data[3] & ~(0b01 << i);
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	78db      	ldrb	r3, [r3, #3]
 8001baa:	b25a      	sxtb	r2, r3
 8001bac:	2101      	movs	r1, #1
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	b25b      	sxtb	r3, r3
 8001bba:	4013      	ands	r3, r2
 8001bbc:	b259      	sxtb	r1, r3
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b2ca      	uxtb	r2, r1
 8001bce:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < 8; i++) {
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b07      	cmp	r3, #7
 8001bda:	ddbe      	ble.n	8001b5a <ADBMS6830B_set_cfgr_gpio+0x14>
        }
	}

    for (int i = 0; i < 2; i++) {
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e03e      	b.n	8001c60 <ADBMS6830B_set_cfgr_gpio+0x11a>
        if (gpio[i + 8]) {
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	3308      	adds	r3, #8
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d019      	beq.n	8001c24 <ADBMS6830B_set_cfgr_gpio+0xde>
            ic[nIC].configa.tx_data[4] = ic[nIC].configa.tx_data[4] | (0b01 << i);
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	791b      	ldrb	r3, [r3, #4]
 8001c00:	b25a      	sxtb	r2, r3
 8001c02:	2101      	movs	r1, #1
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	b259      	sxtb	r1, r3
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b2ca      	uxtb	r2, r1
 8001c20:	711a      	strb	r2, [r3, #4]
 8001c22:	e01a      	b.n	8001c5a <ADBMS6830B_set_cfgr_gpio+0x114>
        } else {
             ic[nIC].configa.tx_data[4] = ic[nIC].configa.tx_data[4] & ~(0b01 << i);
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	4413      	add	r3, r2
 8001c32:	791b      	ldrb	r3, [r3, #4]
 8001c34:	b25a      	sxtb	r2, r3
 8001c36:	2101      	movs	r1, #1
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	b25b      	sxtb	r3, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	4013      	ands	r3, r2
 8001c46:	b259      	sxtb	r1, r3
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	4413      	add	r3, r2
 8001c56:	b2ca      	uxtb	r2, r1
 8001c58:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < 2; i++) {
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	ddbd      	ble.n	8001be2 <ADBMS6830B_set_cfgr_gpio+0x9c>
        }
    }
}
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <ADBMS6830B_set_cfgr_dis>:

/* Helper function to control discharge */
void ADBMS6830B_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e03d      	b.n	8001d04 <ADBMS6830B_set_cfgr_dis+0x90>
		if (dcc[i]) {
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d019      	beq.n	8001cc8 <ADBMS6830B_set_cfgr_dis+0x54>
            ic[nIC].configb.tx_data[4] = ic[nIC].configb.tx_data[4] | (0b01 << i);
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	7cdb      	ldrb	r3, [r3, #19]
 8001ca4:	b25a      	sxtb	r2, r3
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b259      	sxtb	r1, r3
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b2ca      	uxtb	r2, r1
 8001cc4:	74da      	strb	r2, [r3, #19]
 8001cc6:	e01a      	b.n	8001cfe <ADBMS6830B_set_cfgr_dis+0x8a>
        } else {
             ic[nIC].configb.tx_data[4] = ic[nIC].configb.tx_data[4] & ~(0b01 << i);
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	7cdb      	ldrb	r3, [r3, #19]
 8001cd8:	b25a      	sxtb	r2, r3
 8001cda:	2101      	movs	r1, #1
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	4013      	ands	r3, r2
 8001cea:	b259      	sxtb	r1, r3
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	74da      	strb	r2, [r3, #19]
	for (int i = 0; i < 8; i++) {
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b07      	cmp	r3, #7
 8001d08:	ddbe      	ble.n	8001c88 <ADBMS6830B_set_cfgr_dis+0x14>
        }
	}

    for (int i = 0; i < 8; i++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	e03e      	b.n	8001d8e <ADBMS6830B_set_cfgr_dis+0x11a>
        if (dcc[i + 8]) {
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	3308      	adds	r3, #8
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d019      	beq.n	8001d52 <ADBMS6830B_set_cfgr_dis+0xde>
            ic[nIC].configb.tx_data[5] = ic[nIC].configb.tx_data[5] | (0b01 << i);
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	7d1b      	ldrb	r3, [r3, #20]
 8001d2e:	b25a      	sxtb	r2, r3
 8001d30:	2101      	movs	r1, #1
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b259      	sxtb	r1, r3
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	b2ca      	uxtb	r2, r1
 8001d4e:	751a      	strb	r2, [r3, #20]
 8001d50:	e01a      	b.n	8001d88 <ADBMS6830B_set_cfgr_dis+0x114>
        } else {
             ic[nIC].configb.tx_data[5] = ic[nIC].configb.tx_data[5] & ~(0b01 << i);
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	4413      	add	r3, r2
 8001d60:	7d1b      	ldrb	r3, [r3, #20]
 8001d62:	b25a      	sxtb	r2, r3
 8001d64:	2101      	movs	r1, #1
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	b25b      	sxtb	r3, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	4013      	ands	r3, r2
 8001d74:	b259      	sxtb	r1, r3
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	4413      	add	r3, r2
 8001d84:	b2ca      	uxtb	r2, r1
 8001d86:	751a      	strb	r2, [r3, #20]
    for (int i = 0; i < 8; i++) {
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2b07      	cmp	r3, #7
 8001d92:	ddbd      	ble.n	8001d10 <ADBMS6830B_set_cfgr_dis+0x9c>
        }
    }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <ADBMS6830B_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void ADBMS6830B_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 8001da2:	b480      	push	{r7}
 8001da4:	b087      	sub	sp, #28
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 6; i++) {
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	e03d      	b.n	8001e32 <ADBMS6830B_set_cfgr_dcto+0x90>
		if (dcto[i]) {
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	4413      	add	r3, r2
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d019      	beq.n	8001df6 <ADBMS6830B_set_cfgr_dcto+0x54>
            ic[nIC].configb.tx_data[3] = ic[nIC].configb.tx_data[3] | (0b01 << i);
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	4413      	add	r3, r2
 8001dd0:	7c9b      	ldrb	r3, [r3, #18]
 8001dd2:	b25a      	sxtb	r2, r3
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b259      	sxtb	r1, r3
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	4413      	add	r3, r2
 8001df0:	b2ca      	uxtb	r2, r1
 8001df2:	749a      	strb	r2, [r3, #18]
 8001df4:	e01a      	b.n	8001e2c <ADBMS6830B_set_cfgr_dcto+0x8a>
        } else {
             ic[nIC].configb.tx_data[3] = ic[nIC].configb.tx_data[3] & ~(0b01 << i);
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	4413      	add	r3, r2
 8001e04:	7c9b      	ldrb	r3, [r3, #18]
 8001e06:	b25a      	sxtb	r2, r3
 8001e08:	2101      	movs	r1, #1
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	4013      	ands	r3, r2
 8001e18:	b259      	sxtb	r1, r3
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	4413      	add	r3, r2
 8001e28:	b2ca      	uxtb	r2, r1
 8001e2a:	749a      	strb	r2, [r3, #18]
	for (int i = 0; i < 6; i++) {
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	ddbe      	ble.n	8001db6 <ADBMS6830B_set_cfgr_dcto+0x14>
        }
	}
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <ADBMS6830B_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void ADBMS6830B_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	6039      	str	r1, [r7, #0]
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	4613      	mov	r3, r2
 8001e54:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv / 16) - 1;
 8001e56:	88bb      	ldrh	r3, [r7, #4]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	81fb      	strh	r3, [r7, #14]
	ic[nIC].configb.tx_data[0] = 0x00FF & tmp;
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	89fa      	ldrh	r2, [r7, #14]
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	73da      	strb	r2, [r3, #15]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] & 0xF0;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	7c1a      	ldrb	r2, [r3, #16]
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	440b      	add	r3, r1
 8001e92:	f022 020f 	bic.w	r2, r2, #15
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	741a      	strb	r2, [r3, #16]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] | ((0x0F00 & tmp) >> 8);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	7c1b      	ldrb	r3, [r3, #16]
 8001eaa:	b25a      	sxtb	r2, r3
 8001eac:	89fb      	ldrh	r3, [r7, #14]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	b25b      	sxtb	r3, r3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b259      	sxtb	r1, r3
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b2ca      	uxtb	r2, r1
 8001ece:	741a      	strb	r2, [r3, #16]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <ADBMS6830B_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void ADBMS6830B_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov / 16);
 8001eec:	88bb      	ldrh	r3, [r7, #4]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	81fb      	strh	r3, [r7, #14]
	ic[nIC].configb.tx_data[2] = 0x00FF & (tmp >> 4);
 8001ef2:	89fb      	ldrh	r3, [r7, #14]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	b299      	uxth	r1, r3
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	b2ca      	uxtb	r2, r1
 8001f08:	745a      	strb	r2, [r3, #17]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] & 0x0F;
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	7c1a      	ldrb	r2, [r3, #16]
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	6839      	ldr	r1, [r7, #0]
 8001f26:	440b      	add	r3, r1
 8001f28:	f002 020f 	and.w	r2, r2, #15
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	741a      	strb	r2, [r3, #16]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] | ((0x000F & tmp) << 4);
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	7c1b      	ldrb	r3, [r3, #16]
 8001f40:	b25a      	sxtb	r2, r3
 8001f42:	89fb      	ldrh	r3, [r7, #14]
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	b25b      	sxtb	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b259      	sxtb	r1, r3
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	b2ca      	uxtb	r2, r1
 8001f5c:	741a      	strb	r2, [r3, #16]
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <ADBMS6830B_init_reg_limits>:

/* Initialize the Register limits */
void ADBMS6830B_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	6039      	str	r1, [r7, #0]
 8001f74:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	e03e      	b.n	8001ffa <ADBMS6830B_init_reg_limits+0x90>
    ic[cic].ic_reg.cell_channels = 20;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	4413      	add	r3, r2
 8001f8a:	2214      	movs	r2, #20
 8001f8c:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
    ic[cic].ic_reg.stat_channels = 4; //Doesn't matter?
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
    ic[cic].ic_reg.aux_channels = 6; //Doesn't matter?
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001faa:	fb02 f303 	mul.w	r3, r2, r3
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	2206      	movs	r2, #6
 8001fb4:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    ic[cic].ic_reg.num_cv_reg = 6;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	2206      	movs	r2, #6
 8001fc8:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
    ic[cic].ic_reg.num_gpio_reg = 4;
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	2204      	movs	r2, #4
 8001fdc:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
    ic[cic].ic_reg.num_stat_reg = 5;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	2205      	movs	r2, #5
 8001ff0:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d3bc      	bcc.n	8001f7c <ADBMS6830B_init_reg_limits+0x12>
  }
}
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <ADBMS6830B_adcv>:
				   uint8_t DCP, //Discharge Permit
				   uint8_t CONT, //Cell Channels to be measured
				   uint8_t RSTF, //Reset Filter
				   uint8_t OW //Open-wire bits
                 )
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4604      	mov	r4, r0
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	461a      	mov	r2, r3
 800201e:	4623      	mov	r3, r4
 8002020:	71fb      	strb	r3, [r7, #7]
 8002022:	4603      	mov	r3, r0
 8002024:	71bb      	strb	r3, [r7, #6]
 8002026:	460b      	mov	r3, r1
 8002028:	717b      	strb	r3, [r7, #5]
 800202a:	4613      	mov	r3, r2
 800202c:	713b      	strb	r3, [r7, #4]
	uint8_t cmd[2];

	cmd[0] = 0x02 + RD;
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	3302      	adds	r3, #2
 8002032:	b2db      	uxtb	r3, r3
 8002034:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x60 | (CONT << 7) | (DCP << 4) | (RSTF << 2) | OW;
 8002036:	797b      	ldrb	r3, [r7, #5]
 8002038:	01db      	lsls	r3, r3, #7
 800203a:	b25b      	sxtb	r3, r3
 800203c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002040:	b25a      	sxtb	r2, r3
 8002042:	79bb      	ldrb	r3, [r7, #6]
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	b25b      	sxtb	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b25a      	sxtb	r2, r3
 800204c:	793b      	ldrb	r3, [r7, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	b25b      	sxtb	r3, r3
 8002052:	4313      	orrs	r3, r2
 8002054:	b25a      	sxtb	r2, r3
 8002056:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800205a:	4313      	orrs	r3, r2
 800205c:	b25b      	sxtb	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fff0 	bl	800104c <cmd_68>
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	bd90      	pop	{r4, r7, pc}

08002074 <ADBMS6830B_pollAdc>:

/* This function will block operation until the ADC has finished it's conversion */
uint32_t ADBMS6830B_pollAdc()
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	72bb      	strb	r3, [r7, #10]
	cmd[1] = 0x18;
	cmd_pec = pec15_calc(2, cmd);
	cmd[2] = (uint8_t) (cmd_pec >> 8);
	cmd[3] = (uint8_t) (cmd_pec);
	*/
	FEB_cs_low();
 8002086:	f000 fc9d 	bl	80029c4 <FEB_cs_low>
	FEB_spi_write_array(4, cmd);
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	4619      	mov	r1, r3
 800208e:	2004      	movs	r0, #4
 8002090:	f000 fcb0 	bl	80029f4 <FEB_spi_write_array>

	while ((counter < 200000) && (finished == 0))
 8002094:	e00d      	b.n	80020b2 <ADBMS6830B_pollAdc+0x3e>
	{
		current_time = FEB_spi_read_byte(0xff);
 8002096:	20ff      	movs	r0, #255	@ 0xff
 8002098:	f000 fce0 	bl	8002a5c <FEB_spi_read_byte>
 800209c:	4603      	mov	r3, r0
 800209e:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0)
 80020a0:	7abb      	ldrb	r3, [r7, #10]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <ADBMS6830B_pollAdc+0x38>
		{
			finished = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	72fb      	strb	r3, [r7, #11]
 80020aa:	e002      	b.n	80020b2 <ADBMS6830B_pollAdc+0x3e>
		}
		else
		{
			counter = counter + 10;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	330a      	adds	r3, #10
 80020b0:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4a06      	ldr	r2, [pc, #24]	@ (80020d0 <ADBMS6830B_pollAdc+0x5c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d802      	bhi.n	80020c0 <ADBMS6830B_pollAdc+0x4c>
 80020ba:	7afb      	ldrb	r3, [r7, #11]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ea      	beq.n	8002096 <ADBMS6830B_pollAdc+0x22>
		}
	}

	FEB_cs_high();
 80020c0:	f000 fc8c 	bl	80029dc <FEB_cs_high>

	return(counter);
 80020c4:	68fb      	ldr	r3, [r7, #12]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	00030d3f 	.word	0x00030d3f

080020d4 <ADBMS6830B_rdcv>:
and store the cell voltages in c_codes variable.
*/
uint8_t ADBMS6830B_rdcv(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
				c_ic = total_ic - curr_ic - 1;
			}
			//pec_error += parse_cells(c_ic, CELL, cell_data, &ic[c_ic].cells.c_codes[0], &ic[c_ic].cells.pec_match[0]);
		}*/
	uint8_t *cell_data;
	cell_data = (uint8_t *) malloc(34 * sizeof(uint8_t));
 80020e0:	2022      	movs	r0, #34	@ 0x22
 80020e2:	f003 fdf3 	bl	8005ccc <malloc>
 80020e6:	4603      	mov	r3, r0
 80020e8:	60fb      	str	r3, [r7, #12]
	transmitCMDR(RDCVALL,cell_data,34);
 80020ea:	2222      	movs	r2, #34	@ 0x22
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	200c      	movs	r0, #12
 80020f0:	f7ff f88a 	bl	8001208 <transmitCMDR>
	memcpy(&(ic->cells.c_codes),cell_data,(size_t)32);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	331e      	adds	r3, #30
 80020f8:	2220      	movs	r2, #32
 80020fa:	68f9      	ldr	r1, [r7, #12]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f004 fcb0 	bl	8006a62 <memcpy>
	uint16_t data_pec=pec10_calc(32,cell_data);
 8002102:	68f9      	ldr	r1, [r7, #12]
 8002104:	2020      	movs	r0, #32
 8002106:	f7fe ff6b 	bl	8000fe0 <pec10_calc>
 800210a:	4603      	mov	r3, r0
 800210c:	817b      	strh	r3, [r7, #10]
	uint16_t rx_pec=*(uint16_t*)(cell_data+32);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8c1b      	ldrh	r3, [r3, #32]
 8002112:	813b      	strh	r3, [r7, #8]
	transmitCMDR(RDSALL,cell_data,34);
 8002114:	2222      	movs	r2, #34	@ 0x22
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	2010      	movs	r0, #16
 800211a:	f7ff f875 	bl	8001208 <transmitCMDR>
	memcpy(&(ic->cells.s_codes),cell_data,(size_t)32);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	3342      	adds	r3, #66	@ 0x42
 8002122:	2220      	movs	r2, #32
 8002124:	68f9      	ldr	r1, [r7, #12]
 8002126:	4618      	mov	r0, r3
 8002128:	f004 fc9b 	bl	8006a62 <memcpy>
	free(cell_data);
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f003 fdd5 	bl	8005cdc <free>
	return(data_pec!=rx_pec);
 8002132:	897a      	ldrh	r2, [r7, #10]
 8002134:	893b      	ldrh	r3, [r7, #8]
 8002136:	429a      	cmp	r2, r3
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	60ba      	str	r2, [r7, #8]
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4603      	mov	r3, r0
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	460b      	mov	r3, r1
 8002158:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 800215a:	2306      	movs	r3, #6
 800215c:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 800215e:	2303      	movs	r3, #3
 8002160:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 800216c:	2300      	movs	r3, #0
 800216e:	777b      	strb	r3, [r7, #29]
 8002170:	e01f      	b.n	80021b2 <parse_cells+0x6a>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 8002172:	7fbb      	ldrb	r3, [r7, #30]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	4619      	mov	r1, r3
 800217c:	7fbb      	ldrb	r3, [r7, #30]
 800217e:	3301      	adds	r3, #1
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	021b      	lsls	r3, r3, #8
 8002188:	b29b      	uxth	r3, r3
 800218a:	440b      	add	r3, r1
 800218c:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 800218e:	7f7a      	ldrb	r2, [r7, #29]
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	3b01      	subs	r3, #1
 8002194:	7ef9      	ldrb	r1, [r7, #27]
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	8aba      	ldrh	r2, [r7, #20]
 80021a4:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 80021a6:	7fbb      	ldrb	r3, [r7, #30]
 80021a8:	3302      	adds	r3, #2
 80021aa:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80021ac:	7f7b      	ldrb	r3, [r7, #29]
 80021ae:	3301      	adds	r3, #1
 80021b0:	777b      	strb	r3, [r7, #29]
 80021b2:	7f7a      	ldrb	r2, [r7, #29]
 80021b4:	7efb      	ldrb	r3, [r7, #27]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d3db      	bcc.n	8002172 <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = ((cell_data[data_counter] & 0x03) << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 80021ba:	7fbb      	ldrb	r3, [r7, #30]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	7fbb      	ldrb	r3, [r7, #30]
 80021ce:	3301      	adds	r3, #1
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	440b      	add	r3, r1
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21b      	sxth	r3, r3
 80021dc:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes. Command counter is first 6 bits of first byte, which we don't care bout, so we do & 0x03
	data_pec = pec10_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	461a      	mov	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	441a      	add	r2, r3
 80021e8:	7f3b      	ldrb	r3, [r7, #28]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fef7 	bl	8000fe0 <pec10_calc>
 80021f2:	4603      	mov	r3, r0
 80021f4:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 80021f6:	8b3a      	ldrh	r2, [r7, #24]
 80021f8:	8afb      	ldrh	r3, [r7, #22]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d008      	beq.n	8002210 <parse_cells+0xc8>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 80021fe:	2301      	movs	r3, #1
 8002200:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 8002202:	7bbb      	ldrb	r3, [r7, #14]
 8002204:	3b01      	subs	r3, #1
 8002206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002208:	4413      	add	r3, r2
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e005      	b.n	800221c <parse_cells+0xd4>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8002210:	7bbb      	ldrb	r3, [r7, #14]
 8002212:	3b01      	subs	r3, #1
 8002214:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002216:	4413      	add	r3, r2
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 800221c:	7fbb      	ldrb	r3, [r7, #30]
 800221e:	3302      	adds	r3, #2
 8002220:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 8002222:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <ADBMS6830B_wrcfga>:

/* Write the ADBMS6830B CFGRA */
void ADBMS6830B_wrcfga(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b0c4      	sub	sp, #272	@ 0x110
 8002232:	af00      	add	r7, sp, #0
 8002234:	4602      	mov	r2, r0
 8002236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800223a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800223e:	6019      	str	r1, [r3, #0]
 8002240:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002244:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002248:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 800224a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800224e:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t c_ic = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 800225e:	2300      	movs	r3, #0
 8002260:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002264:	e049      	b.n	80022fa <ADBMS6830B_wrcfga+0xcc>
	{
		if (ic->isospi_reverse == false)
 8002266:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800226a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8002274:	f083 0301 	eor.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <ADBMS6830B_wrcfga+0x5a>
		{
			c_ic = current_ic;
 800227e:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002282:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8002286:	e00b      	b.n	80022a0 <ADBMS6830B_wrcfga+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8002288:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800228c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80022a6:	e01f      	b.n	80022e8 <ADBMS6830B_wrcfga+0xba>
		{
			write_buffer[write_count] = ic[c_ic].configa.tx_data[data];
 80022a8:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80022ac:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80022b0:	fb02 f303 	mul.w	r3, r2, r3
 80022b4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80022b8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	18d1      	adds	r1, r2, r3
 80022c0:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 80022c4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80022c8:	5c89      	ldrb	r1, [r1, r2]
 80022ca:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80022ce:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80022d2:	54d1      	strb	r1, [r2, r3]
			write_count++;
 80022d4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80022d8:	3301      	adds	r3, #1
 80022da:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		for (uint8_t data = 0; data<6; data++)
 80022de:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80022e8:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d9db      	bls.n	80022a8 <ADBMS6830B_wrcfga+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 80022f0:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80022f4:	3301      	adds	r3, #1
 80022f6:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80022fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022fe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002302:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d3ac      	bcc.n	8002266 <ADBMS6830B_wrcfga+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 800230c:	f107 0208 	add.w	r2, r7, #8
 8002310:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002314:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002318:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fee8 	bl	80010f4 <write_68>
}
 8002324:	bf00      	nop
 8002326:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <ADBMS6830B_wrcfgb>:

/* Write the ADBMS6830B CFGRB */
void ADBMS6830B_wrcfgb(uint8_t total_ic, //The number of ICs being written to
                    cell_asic ic[] // A two dimensional array of the configuration data that will be written
                   )
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b0c4      	sub	sp, #272	@ 0x110
 8002332:	af00      	add	r7, sp, #0
 8002334:	4602      	mov	r2, r0
 8002336:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800233a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800233e:	6019      	str	r1, [r3, #0]
 8002340:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002344:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002348:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x24} ;
 800234a:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800234e:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t c_ic = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 800235e:	2300      	movs	r3, #0
 8002360:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002364:	e04a      	b.n	80023fc <ADBMS6830B_wrcfgb+0xce>
	{
		if (ic->isospi_reverse == false)
 8002366:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800236a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <ADBMS6830B_wrcfgb+0x5a>
		{
			c_ic = current_ic;
 800237e:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002382:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8002386:	e00b      	b.n	80023a0 <ADBMS6830B_wrcfgb+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8002388:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800238c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80023a6:	e020      	b.n	80023ea <ADBMS6830B_wrcfgb+0xbc>
		{
			write_buffer[write_count] = ic[c_ic].configb.tx_data[data];
 80023a8:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80023ac:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80023b8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	18d1      	adds	r1, r2, r3
 80023c0:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 80023c4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80023c8:	440a      	add	r2, r1
 80023ca:	7bd1      	ldrb	r1, [r2, #15]
 80023cc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80023d0:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80023d4:	54d1      	strb	r1, [r2, r3]
			write_count++;
 80023d6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80023da:	3301      	adds	r3, #1
 80023dc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		for (uint8_t data = 0; data<6; data++)
 80023e0:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80023e4:	3301      	adds	r3, #1
 80023e6:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 80023ea:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d9da      	bls.n	80023a8 <ADBMS6830B_wrcfgb+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 80023f2:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80023f6:	3301      	adds	r3, #1
 80023f8:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80023fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002400:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002404:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d3ab      	bcc.n	8002366 <ADBMS6830B_wrcfgb+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 800240e:	f107 0208 	add.w	r2, r7, #8
 8002412:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002416:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800241a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fe67 	bl	80010f4 <write_68>
}
 8002426:	bf00      	nop
 8002428:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <ADBMS6830B_adax>:
/* Start ADC Conversion for GPIO and Vref2  */
void ADBMS6830B_adax(uint8_t OW, //Open Wire Detection
				  uint8_t PUP, //Pull up/pull down current sources during measurement
				  uint8_t CH //GPIO Channels to be measured
				  )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	460b      	mov	r3, r1
 800243c:	71bb      	strb	r3, [r7, #6]
 800243e:	4613      	mov	r3, r2
 8002440:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];

	cmd[0] = OW + 0x04;
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	3304      	adds	r3, #4
 8002446:	b2db      	uxtb	r3, r3
 8002448:	733b      	strb	r3, [r7, #12]
	cmd[1] = (PUP << 7) + ((CH & 0x10) << 2) + (CH & 0xF) + 0x10;
 800244a:	79bb      	ldrb	r3, [r7, #6]
 800244c:	01db      	lsls	r3, r3, #7
 800244e:	b2da      	uxtb	r2, r3
 8002450:	797b      	ldrb	r3, [r7, #5]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4413      	add	r3, r2
 800245e:	b2da      	uxtb	r2, r3
 8002460:	797b      	ldrb	r3, [r7, #5]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	b2db      	uxtb	r3, r3
 8002468:	4413      	add	r3, r2
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3310      	adds	r3, #16
 800246e:	b2db      	uxtb	r3, r3
 8002470:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fde8 	bl	800104c <cmd_68>
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <ADBMS6830B_rdaux>:
*/

uint8_t ADBMS6830B_rdaux(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b08b      	sub	sp, #44	@ 0x2c
 8002488:	af02      	add	r7, sp, #8
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	71fb      	strb	r3, [r7, #7]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8002490:	2308      	movs	r3, #8
 8002492:	75fb      	strb	r3, [r7, #23]

	int8_t pec_error = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	77fb      	strb	r3, [r7, #31]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	77bb      	strb	r3, [r7, #30]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 fc13 	bl	8005ccc <malloc>
 80024a6:	4603      	mov	r3, r0
 80024a8:	613b      	str	r3, [r7, #16]

	for (uint8_t cell_reg = 1; cell_reg <= ic[0].ic_reg.num_cv_reg; cell_reg++) {
 80024aa:	2301      	movs	r3, #1
 80024ac:	777b      	strb	r3, [r7, #29]
 80024ae:	e07f      	b.n	80025b0 <ADBMS6830B_rdaux+0x12c>
		uint8_t cmd[4];
		switch(cell_reg) {
 80024b0:	7f7b      	ldrb	r3, [r7, #29]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d81f      	bhi.n	80024f8 <ADBMS6830B_rdaux+0x74>
 80024b8:	a201      	add	r2, pc, #4	@ (adr r2, 80024c0 <ADBMS6830B_rdaux+0x3c>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	080024d1 	.word	0x080024d1
 80024c4:	080024db 	.word	0x080024db
 80024c8:	080024e5 	.word	0x080024e5
 80024cc:	080024ef 	.word	0x080024ef
			case 1: //Reg A
				cmd[0] = 0x00;
 80024d0:	2300      	movs	r3, #0
 80024d2:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x19;
 80024d4:	2319      	movs	r3, #25
 80024d6:	727b      	strb	r3, [r7, #9]
				break;
 80024d8:	e00e      	b.n	80024f8 <ADBMS6830B_rdaux+0x74>
			case 2: //Reg B
				cmd[0] = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1A;
 80024de:	231a      	movs	r3, #26
 80024e0:	727b      	strb	r3, [r7, #9]
				break;
 80024e2:	e009      	b.n	80024f8 <ADBMS6830B_rdaux+0x74>
			case 3: //Reg C
				cmd[0] = 0x00;
 80024e4:	2300      	movs	r3, #0
 80024e6:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1B;
 80024e8:	231b      	movs	r3, #27
 80024ea:	727b      	strb	r3, [r7, #9]
				break;
 80024ec:	e004      	b.n	80024f8 <ADBMS6830B_rdaux+0x74>
			case 4: //Reg D
				cmd[0] = 0x00;
 80024ee:	2300      	movs	r3, #0
 80024f0:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1F;
 80024f2:	231f      	movs	r3, #31
 80024f4:	727b      	strb	r3, [r7, #9]
				break;
 80024f6:	bf00      	nop
		}
		uint16_t cmd_pec = pec15_calc(2, cmd);
 80024f8:	f107 0308 	add.w	r3, r7, #8
 80024fc:	4619      	mov	r1, r3
 80024fe:	2002      	movs	r0, #2
 8002500:	f7fe fd3a 	bl	8000f78 <pec15_calc>
 8002504:	4603      	mov	r3, r0
 8002506:	81fb      	strh	r3, [r7, #14]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	b29b      	uxth	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(cmd_pec);
 8002512:	89fb      	ldrh	r3, [r7, #14]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	72fb      	strb	r3, [r7, #11]
		FEB_cs_low();
 8002518:	f000 fa54 	bl	80029c4 <FEB_cs_low>
		FEB_spi_write_read(cmd, 4, cell_data, (REG_LEN * total_ic));
 800251c:	7dfa      	ldrb	r2, [r7, #23]
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	fb12 f303 	smulbb	r3, r2, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f107 0008 	add.w	r0, r7, #8
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	2104      	movs	r1, #4
 800252e:	f000 fa75 	bl	8002a1c <FEB_spi_write_read>
		FEB_cs_high();
 8002532:	f000 fa53 	bl	80029dc <FEB_cs_high>

		//parse data
		for (int curr_ic = 0; curr_ic < total_ic; curr_ic++) {
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	e032      	b.n	80025a2 <ADBMS6830B_rdaux+0x11e>
			if (ic->isospi_reverse == false) {
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8002542:	f083 0301 	eor.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <ADBMS6830B_rdaux+0xce>
				c_ic = curr_ic;
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	77bb      	strb	r3, [r7, #30]
 8002550:	e006      	b.n	8002560 <ADBMS6830B_rdaux+0xdc>
			} else {
				c_ic = total_ic - curr_ic - 1;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	79fa      	ldrb	r2, [r7, #7]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	77bb      	strb	r3, [r7, #30]
			}
			pec_error += parse_cells(c_ic, cell_reg, cell_data, &ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 8002560:	7fbb      	ldrb	r3, [r7, #30]
 8002562:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	4413      	add	r3, r2
 800256e:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8002572:	7fbb      	ldrb	r3, [r7, #30]
 8002574:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	4413      	add	r3, r2
 8002580:	3380      	adds	r3, #128	@ 0x80
 8002582:	7f79      	ldrb	r1, [r7, #29]
 8002584:	7fb8      	ldrb	r0, [r7, #30]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	4623      	mov	r3, r4
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	f7ff fddc 	bl	8002148 <parse_cells>
 8002590:	4603      	mov	r3, r0
 8002592:	b2da      	uxtb	r2, r3
 8002594:	7ffb      	ldrb	r3, [r7, #31]
 8002596:	4413      	add	r3, r2
 8002598:	b2db      	uxtb	r3, r3
 800259a:	77fb      	strb	r3, [r7, #31]
		for (int curr_ic = 0; curr_ic < total_ic; curr_ic++) {
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3301      	adds	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	dbc8      	blt.n	800253c <ADBMS6830B_rdaux+0xb8>
	for (uint8_t cell_reg = 1; cell_reg <= ic[0].ic_reg.num_cv_reg; cell_reg++) {
 80025aa:	7f7b      	ldrb	r3, [r7, #29]
 80025ac:	3301      	adds	r3, #1
 80025ae:	777b      	strb	r3, [r7, #29]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80025b6:	7f7a      	ldrb	r2, [r7, #29]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	f67f af79 	bls.w	80024b0 <ADBMS6830B_rdaux+0x2c>
		}
	}

	ADBMS6830B_check_pec(total_ic, CELL, ic);
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	2102      	movs	r1, #2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f829 	bl	800261c <ADBMS6830B_check_pec>
	free(cell_data);
 80025ca:	6938      	ldr	r0, [r7, #16]
 80025cc:	f003 fb86 	bl	8005cdc <free>
	return(pec_error);
 80025d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	@ 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd90      	pop	{r4, r7, pc}
 80025da:	bf00      	nop

080025dc <wakeup_sleep>:

/* Generic wakeup command to wake the ADBMS6830B from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < total_ic; i++) {
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	e00d      	b.n	8002608 <wakeup_sleep+0x2c>
	   FEB_cs_low(); //TODO: changed  from low
 80025ec:	f000 f9ea 	bl	80029c4 <FEB_cs_low>
	   FEB_delay_u(300); // Guarantees the ADBMS6830B will be in standby
 80025f0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80025f4:	f000 f9da 	bl	80029ac <FEB_delay_u>
	   FEB_cs_high();
 80025f8:	f000 f9f0 	bl	80029dc <FEB_cs_high>
	   FEB_delay_u(10);
 80025fc:	200a      	movs	r0, #10
 80025fe:	f000 f9d5 	bl	80029ac <FEB_delay_u>
	for (int i = 0; i < total_ic; i++) {
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3301      	adds	r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	dbed      	blt.n	80025ec <wakeup_sleep+0x10>
	}
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <ADBMS6830B_check_pec>:

void ADBMS6830B_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 800261c:	b480      	push	{r7}
 800261e:	b08b      	sub	sp, #44	@ 0x2c
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	603a      	str	r2, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
 8002628:	460b      	mov	r3, r1
 800262a:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 800262c:	79bb      	ldrb	r3, [r7, #6]
 800262e:	2b04      	cmp	r3, #4
 8002630:	f200 81b5 	bhi.w	800299e <ADBMS6830B_check_pec+0x382>
 8002634:	a201      	add	r2, pc, #4	@ (adr r2, 800263c <ADBMS6830B_check_pec+0x20>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	08002651 	.word	0x08002651
 8002640:	080026db 	.word	0x080026db
 8002644:	08002765 	.word	0x08002765
 8002648:	08002823 	.word	0x08002823
 800264c:	080028e1 	.word	0x080028e1
	{
		case CFGRA:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002650:	2300      	movs	r3, #0
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
 8002654:	e03c      	b.n	80026d0 <ADBMS6830B_check_pec+0xb4>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configa.rx_pec_match;
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	4413      	add	r3, r2
 8002664:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	6839      	ldr	r1, [r7, #0]
 8002674:	440b      	add	r3, r1
 8002676:	7b9b      	ldrb	r3, [r3, #14]
 8002678:	4618      	mov	r0, r3
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	440b      	add	r3, r1
 8002688:	4402      	add	r2, r0
 800268a:	b292      	uxth	r2, r2
 800268c:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configa.rx_pec_match;
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002696:	fb02 f303 	mul.w	r3, r2, r3
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	@ 0xe8
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	6839      	ldr	r1, [r7, #0]
 80026ae:	440b      	add	r3, r1
 80026b0:	7b9b      	ldrb	r3, [r3, #14]
 80026b2:	4618      	mov	r0, r3
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	440b      	add	r3, r1
 80026c2:	4402      	add	r2, r0
 80026c4:	b292      	uxth	r2, r2
 80026c6:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	3301      	adds	r3, #1
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d4:	429a      	cmp	r2, r3
 80026d6:	dbbe      	blt.n	8002656 <ADBMS6830B_check_pec+0x3a>
		  }
		break;
 80026d8:	e162      	b.n	80029a0 <ADBMS6830B_check_pec+0x384>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
 80026de:	e03c      	b.n	800275a <ADBMS6830B_check_pec+0x13e>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	6839      	ldr	r1, [r7, #0]
 80026fe:	440b      	add	r3, r1
 8002700:	7f5b      	ldrb	r3, [r3, #29]
 8002702:	4618      	mov	r0, r3
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	6839      	ldr	r1, [r7, #0]
 8002710:	440b      	add	r3, r1
 8002712:	4402      	add	r2, r0
 8002714:	b292      	uxth	r2, r2
 8002716:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002720:	fb02 f303 	mul.w	r3, r2, r3
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	4413      	add	r3, r2
 8002728:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	@ 0xe8
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	6839      	ldr	r1, [r7, #0]
 8002738:	440b      	add	r3, r1
 800273a:	7f5b      	ldrb	r3, [r3, #29]
 800273c:	4618      	mov	r0, r3
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	440b      	add	r3, r1
 800274c:	4402      	add	r2, r0
 800274e:	b292      	uxth	r2, r2
 8002750:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	3301      	adds	r3, #1
 8002758:	623b      	str	r3, [r7, #32]
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	6a3a      	ldr	r2, [r7, #32]
 800275e:	429a      	cmp	r2, r3
 8002760:	dbbe      	blt.n	80026e0 <ADBMS6830B_check_pec+0xc4>
		  }
		break;
 8002762:	e11d      	b.n	80029a0 <ADBMS6830B_check_pec+0x384>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	e056      	b.n	8002818 <ADBMS6830B_check_pec+0x1fc>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	e049      	b.n	8002804 <ADBMS6830B_check_pec+0x1e8>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4413      	add	r3, r2
 800277e:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	6839      	ldr	r1, [r7, #0]
 800278e:	4419      	add	r1, r3
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	440b      	add	r3, r1
 8002794:	3366      	adds	r3, #102	@ 0x66
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	440b      	add	r3, r1
 80027a8:	4402      	add	r2, r0
 80027aa:	b292      	uxth	r2, r2
 80027ac:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	441a      	add	r2, r3
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	3370      	adds	r3, #112	@ 0x70
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	895b      	ldrh	r3, [r3, #10]
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80027ce:	fb01 f202 	mul.w	r2, r1, r2
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	4411      	add	r1, r2
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	440a      	add	r2, r1
 80027da:	3266      	adds	r2, #102	@ 0x66
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	4610      	mov	r0, r2
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80027e6:	fb01 f202 	mul.w	r2, r1, r2
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	440a      	add	r2, r1
 80027ee:	4403      	add	r3, r0
 80027f0:	b299      	uxth	r1, r3
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	3370      	adds	r3, #112	@ 0x70
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	460a      	mov	r2, r1
 80027fc:	815a      	strh	r2, [r3, #10]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	3301      	adds	r3, #1
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800280a:	461a      	mov	r2, r3
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4293      	cmp	r3, r2
 8002810:	dbae      	blt.n	8002770 <ADBMS6830B_check_pec+0x154>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3301      	adds	r3, #1
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	429a      	cmp	r2, r3
 800281e:	dba4      	blt.n	800276a <ADBMS6830B_check_pec+0x14e>
			}
		  }
		break;
 8002820:	e0be      	b.n	80029a0 <ADBMS6830B_check_pec+0x384>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e056      	b.n	80028d6 <ADBMS6830B_check_pec+0x2ba>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	e049      	b.n	80028c2 <ADBMS6830B_check_pec+0x2a6>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	4419      	add	r1, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	440b      	add	r3, r1
 8002852:	3380      	adds	r3, #128	@ 0x80
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	440b      	add	r3, r1
 8002866:	4402      	add	r2, r0
 8002868:	b292      	uxth	r2, r2
 800286a:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002874:	fb02 f303 	mul.w	r3, r2, r3
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	441a      	add	r2, r3
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	3378      	adds	r3, #120	@ 0x78
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	88db      	ldrh	r3, [r3, #6]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800288c:	fb01 f202 	mul.w	r2, r1, r2
 8002890:	6839      	ldr	r1, [r7, #0]
 8002892:	4411      	add	r1, r2
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	440a      	add	r2, r1
 8002898:	3280      	adds	r2, #128	@ 0x80
 800289a:	7812      	ldrb	r2, [r2, #0]
 800289c:	4610      	mov	r0, r2
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80028a4:	fb01 f202 	mul.w	r2, r1, r2
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	440a      	add	r2, r1
 80028ac:	4403      	add	r3, r0
 80028ae:	b299      	uxth	r1, r3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	3378      	adds	r3, #120	@ 0x78
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	460a      	mov	r2, r1
 80028ba:	80da      	strh	r2, [r3, #6]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	3301      	adds	r3, #1
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80028c8:	461a      	mov	r2, r3
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4293      	cmp	r3, r2
 80028ce:	dbae      	blt.n	800282e <ADBMS6830B_check_pec+0x212>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	3301      	adds	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	429a      	cmp	r2, r3
 80028dc:	dba4      	blt.n	8002828 <ADBMS6830B_check_pec+0x20c>
			}
		  }

		break;
 80028de:	e05f      	b.n	80029a0 <ADBMS6830B_check_pec+0x384>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	e056      	b.n	8002994 <ADBMS6830B_check_pec+0x378>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	e049      	b.n	8002980 <ADBMS6830B_check_pec+0x364>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	6839      	ldr	r1, [r7, #0]
 800290a:	4419      	add	r1, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	440b      	add	r3, r1
 8002910:	3391      	adds	r3, #145	@ 0x91
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	440b      	add	r3, r1
 8002924:	4402      	add	r2, r0
 8002926:	b292      	uxth	r2, r2
 8002928:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	441a      	add	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	337c      	adds	r3, #124	@ 0x7c
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	88db      	ldrh	r3, [r3, #6]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800294a:	fb01 f202 	mul.w	r2, r1, r2
 800294e:	6839      	ldr	r1, [r7, #0]
 8002950:	4411      	add	r1, r2
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	440a      	add	r2, r1
 8002956:	3291      	adds	r2, #145	@ 0x91
 8002958:	7812      	ldrb	r2, [r2, #0]
 800295a:	4610      	mov	r0, r2
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002962:	fb01 f202 	mul.w	r2, r1, r2
 8002966:	6839      	ldr	r1, [r7, #0]
 8002968:	440a      	add	r2, r1
 800296a:	4403      	add	r3, r0
 800296c:	b299      	uxth	r1, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	337c      	adds	r3, #124	@ 0x7c
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	460a      	mov	r2, r1
 8002978:	80da      	strh	r2, [r3, #6]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	3301      	adds	r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8002986:	3b01      	subs	r3, #1
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	dbae      	blt.n	80028ec <ADBMS6830B_check_pec+0x2d0>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3301      	adds	r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	429a      	cmp	r2, r3
 800299a:	dba4      	blt.n	80028e6 <ADBMS6830B_check_pec+0x2ca>
			}
		  }
		break;
 800299c:	e000      	b.n	80029a0 <ADBMS6830B_check_pec+0x384>
		default:
		break;
 800299e:	bf00      	nop
	}
}
 80029a0:	bf00      	nop
 80029a2:	372c      	adds	r7, #44	@ 0x2c
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <FEB_delay_u>:
static relay_status_t relay_status;
static uint8_t shutdown_close_guard = 0; //guard for shutdown relay

// ******************************** SPI ********************************

void FEB_delay_u(uint16_t micro) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(1);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f000 fca2 	bl	8003300 <HAL_Delay>
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <FEB_cs_low>:

void FEB_delay_m(uint16_t milli) {
	HAL_Delay(milli);
}

void FEB_cs_low() {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80029c8:	2200      	movs	r2, #0
 80029ca:	2140      	movs	r1, #64	@ 0x40
 80029cc:	4802      	ldr	r0, [pc, #8]	@ (80029d8 <FEB_cs_low+0x14>)
 80029ce:	f000 ff31 	bl	8003834 <HAL_GPIO_WritePin>
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40020400 	.word	0x40020400

080029dc <FEB_cs_high>:

void FEB_cs_high() {
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80029e0:	2201      	movs	r2, #1
 80029e2:	2140      	movs	r1, #64	@ 0x40
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <FEB_cs_high+0x14>)
 80029e6:	f000 ff25 	bl	8003834 <HAL_GPIO_WritePin>
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40020400 	.word	0x40020400

080029f4 <FEB_spi_write_array>:

void FEB_spi_write_array(uint8_t len, uint8_t data[]) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, data, len, 100);
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	2364      	movs	r3, #100	@ 0x64
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	4803      	ldr	r0, [pc, #12]	@ (8002a18 <FEB_spi_write_array+0x24>)
 8002a0a:	f001 fdd0 	bl	80045ae <HAL_SPI_Transmit>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000043c 	.word	0x2000043c

08002a1c <FEB_spi_write_read>:

void FEB_spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	461a      	mov	r2, r3
 8002a28:	460b      	mov	r3, r1
 8002a2a:	72fb      	strb	r3, [r7, #11]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	72bb      	strb	r3, [r7, #10]
			error=1;
		}
	}
	*/

	HAL_SPI_Transmit(&hspi1,tx_Data,tx_len,HAL_MAX_DELAY);
 8002a30:	7afb      	ldrb	r3, [r7, #11]
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295
 8002a38:	68f9      	ldr	r1, [r7, #12]
 8002a3a:	4807      	ldr	r0, [pc, #28]	@ (8002a58 <FEB_spi_write_read+0x3c>)
 8002a3c:	f001 fdb7 	bl	80045ae <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,rx_data,rx_len,HAL_MAX_DELAY);
 8002a40:	7abb      	ldrb	r3, [r7, #10]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4803      	ldr	r0, [pc, #12]	@ (8002a58 <FEB_spi_write_read+0x3c>)
 8002a4c:	f001 feeb 	bl	8004826 <HAL_SPI_Receive>
	return;
 8002a50:	bf00      	nop
}
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	2000043c 	.word	0x2000043c

08002a5c <FEB_spi_read_byte>:

uint8_t FEB_spi_read_byte(uint8_t tx_data) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_SPI_Receive(&hspi1, &data, 1, 100);
 8002a66:	f107 010f 	add.w	r1, r7, #15
 8002a6a:	2364      	movs	r3, #100	@ 0x64
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4804      	ldr	r0, [pc, #16]	@ (8002a80 <FEB_spi_read_byte+0x24>)
 8002a70:	f001 fed9 	bl	8004826 <HAL_SPI_Receive>
	return data;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000043c 	.word	0x2000043c

08002a84 <FEB_Main_Setup>:
#include "FEB_Main.h"
#include "FEB_ADBMS6830B.h"

// ******************************** Functions ********************************

void FEB_Main_Setup() {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
	//SM setup
	FEB_ADBMS_Init();
 8002a88:	f7fe fc34 	bl	80012f4 <FEB_ADBMS_Init>
	//CAN Filter Config Setup
	//IVT Setup
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <FEB_Main_Task1_VT>:

void FEB_Main_Task1_VT() {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
	FEB_ADBMS_AcquireData();
 8002a94:	f7fe fc70 	bl	8001378 <FEB_ADBMS_AcquireData>
	FEB_ADBMS_UART_Transmit();
 8002a98:	f7fe fdec 	bl	8001674 <FEB_ADBMS_UART_Transmit>
	HAL_Delay(100);
 8002a9c:	2064      	movs	r0, #100	@ 0x64
 8002a9e:	f000 fc2f 	bl	8003300 <HAL_Delay>
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aaa:	f000 fbe7 	bl	800327c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aae:	f000 f80b 	bl	8002ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ab2:	f000 f8d7 	bl	8002c64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002ab6:	f000 f8ab 	bl	8002c10 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002aba:	f000 f873 	bl	8002ba4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  FEB_Main_Setup();
 8002abe:	f7ff ffe1 	bl	8002a84 <FEB_Main_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FEB_Main_Task1_VT();
 8002ac2:	f7ff ffe5 	bl	8002a90 <FEB_Main_Task1_VT>
 8002ac6:	e7fc      	b.n	8002ac2 <main+0x1c>

08002ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b094      	sub	sp, #80	@ 0x50
 8002acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ace:	f107 031c 	add.w	r3, r7, #28
 8002ad2:	2234      	movs	r2, #52	@ 0x34
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 ff33 	bl	8006942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002adc:	f107 0308 	add.w	r3, r7, #8
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b9c <SystemClock_Config+0xd4>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	4a29      	ldr	r2, [pc, #164]	@ (8002b9c <SystemClock_Config+0xd4>)
 8002af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002afc:	4b27      	ldr	r3, [pc, #156]	@ (8002b9c <SystemClock_Config+0xd4>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4b24      	ldr	r3, [pc, #144]	@ (8002ba0 <SystemClock_Config+0xd8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b14:	4a22      	ldr	r2, [pc, #136]	@ (8002ba0 <SystemClock_Config+0xd8>)
 8002b16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <SystemClock_Config+0xd8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b30:	2310      	movs	r3, #16
 8002b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b34:	2302      	movs	r3, #2
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002b3c:	2310      	movs	r3, #16
 8002b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b40:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002b44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b46:	2304      	movs	r3, #4
 8002b48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b52:	f107 031c 	add.w	r3, r7, #28
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 fa02 	bl	8003f60 <HAL_RCC_OscConfig>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b62:	f000 f91f 	bl	8002da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b66:	230f      	movs	r3, #15
 8002b68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b7c:	f107 0308 	add.w	r3, r7, #8
 8002b80:	2102      	movs	r1, #2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fe70 	bl	8003868 <HAL_RCC_ClockConfig>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002b8e:	f000 f909 	bl	8002da4 <Error_Handler>
  }
}
 8002b92:	bf00      	nop
 8002b94:	3750      	adds	r7, #80	@ 0x50
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40007000 	.word	0x40007000

08002ba4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ba8:	4b17      	ldr	r3, [pc, #92]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002baa:	4a18      	ldr	r2, [pc, #96]	@ (8002c0c <MX_SPI1_Init+0x68>)
 8002bac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bae:	4b16      	ldr	r3, [pc, #88]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002bb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002bb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bb6:	4b14      	ldr	r3, [pc, #80]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002bd8:	2228      	movs	r2, #40	@ 0x28
 8002bda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002be2:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be8:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002bf0:	220a      	movs	r2, #10
 8002bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bf4:	4804      	ldr	r0, [pc, #16]	@ (8002c08 <MX_SPI1_Init+0x64>)
 8002bf6:	f001 fc51 	bl	800449c <HAL_SPI_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c00:	f000 f8d0 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	2000043c 	.word	0x2000043c
 8002c0c:	40013000 	.word	0x40013000

08002c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c14:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c16:	4a12      	ldr	r2, [pc, #72]	@ (8002c60 <MX_USART2_UART_Init+0x50>)
 8002c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	@ (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c34:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c36:	220c      	movs	r2, #12
 8002c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c46:	4805      	ldr	r0, [pc, #20]	@ (8002c5c <MX_USART2_UART_Init+0x4c>)
 8002c48:	f002 fc7e 	bl	8005548 <HAL_UART_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c52:	f000 f8a7 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000494 	.word	0x20000494
 8002c60:	40004400 	.word	0x40004400

08002c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	@ 0x28
 8002c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d74 <MX_GPIO_Init+0x110>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	4a3c      	ldr	r2, [pc, #240]	@ (8002d74 <MX_GPIO_Init+0x110>)
 8002c84:	f043 0304 	orr.w	r3, r3, #4
 8002c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d74 <MX_GPIO_Init+0x110>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	4b36      	ldr	r3, [pc, #216]	@ (8002d74 <MX_GPIO_Init+0x110>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	4a35      	ldr	r2, [pc, #212]	@ (8002d74 <MX_GPIO_Init+0x110>)
 8002ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca6:	4b33      	ldr	r3, [pc, #204]	@ (8002d74 <MX_GPIO_Init+0x110>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d74 <MX_GPIO_Init+0x110>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	4a2e      	ldr	r2, [pc, #184]	@ (8002d74 <MX_GPIO_Init+0x110>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d74 <MX_GPIO_Init+0x110>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	4b28      	ldr	r3, [pc, #160]	@ (8002d74 <MX_GPIO_Init+0x110>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	4a27      	ldr	r2, [pc, #156]	@ (8002d74 <MX_GPIO_Init+0x110>)
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cde:	4b25      	ldr	r3, [pc, #148]	@ (8002d74 <MX_GPIO_Init+0x110>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2108      	movs	r1, #8
 8002cee:	4822      	ldr	r0, [pc, #136]	@ (8002d78 <MX_GPIO_Init+0x114>)
 8002cf0:	f000 fda0 	bl	8003834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2140      	movs	r1, #64	@ 0x40
 8002cf8:	4820      	ldr	r0, [pc, #128]	@ (8002d7c <MX_GPIO_Init+0x118>)
 8002cfa:	f000 fd9b 	bl	8003834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002cfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d04:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	4619      	mov	r1, r3
 8002d14:	4818      	ldr	r0, [pc, #96]	@ (8002d78 <MX_GPIO_Init+0x114>)
 8002d16:	f000 fbf9 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : WAKE_Pin INTR_Pin */
  GPIO_InitStruct.Pin = WAKE_Pin|INTR_Pin;
 8002d1a:	2306      	movs	r3, #6
 8002d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4812      	ldr	r0, [pc, #72]	@ (8002d78 <MX_GPIO_Init+0x114>)
 8002d2e:	f000 fbed 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d32:	2308      	movs	r3, #8
 8002d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d36:	2301      	movs	r3, #1
 8002d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d42:	f107 0314 	add.w	r3, r7, #20
 8002d46:	4619      	mov	r1, r3
 8002d48:	480b      	ldr	r0, [pc, #44]	@ (8002d78 <MX_GPIO_Init+0x114>)
 8002d4a:	f000 fbdf 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d4e:	2340      	movs	r3, #64	@ 0x40
 8002d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d52:	2301      	movs	r3, #1
 8002d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	4619      	mov	r1, r3
 8002d64:	4805      	ldr	r0, [pc, #20]	@ (8002d7c <MX_GPIO_Init+0x118>)
 8002d66:	f000 fbd1 	bl	800350c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d6a:	bf00      	nop
 8002d6c:	3728      	adds	r7, #40	@ 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40020800 	.word	0x40020800
 8002d7c:	40020400 	.word	0x40020400

08002d80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d92:	f000 fa95 	bl	80032c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40010000 	.word	0x40010000

08002da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002da8:	b672      	cpsid	i
}
 8002daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <Error_Handler+0x8>

08002db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	4b10      	ldr	r3, [pc, #64]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	4a08      	ldr	r2, [pc, #32]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de2:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <HAL_MspInit+0x4c>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800

08002e00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08a      	sub	sp, #40	@ 0x28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	@ (8002e84 <HAL_SPI_MspInit+0x84>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d12b      	bne.n	8002e7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <HAL_SPI_MspInit+0x88>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	4a17      	ldr	r2, [pc, #92]	@ (8002e88 <HAL_SPI_MspInit+0x88>)
 8002e2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e32:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <HAL_SPI_MspInit+0x88>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <HAL_SPI_MspInit+0x88>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	4a10      	ldr	r2, [pc, #64]	@ (8002e88 <HAL_SPI_MspInit+0x88>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <HAL_SPI_MspInit+0x88>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e5a:	23e0      	movs	r3, #224	@ 0xe0
 8002e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e66:	2303      	movs	r3, #3
 8002e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e6a:	2305      	movs	r3, #5
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	4619      	mov	r1, r3
 8002e74:	4805      	ldr	r0, [pc, #20]	@ (8002e8c <HAL_SPI_MspInit+0x8c>)
 8002e76:	f000 fb49 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e7a:	bf00      	nop
 8002e7c:	3728      	adds	r7, #40	@ 0x28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40013000 	.word	0x40013000
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40020000 	.word	0x40020000

08002e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	@ 0x28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a19      	ldr	r2, [pc, #100]	@ (8002f14 <HAL_UART_MspInit+0x84>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d12b      	bne.n	8002f0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	4b18      	ldr	r3, [pc, #96]	@ (8002f18 <HAL_UART_MspInit+0x88>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	4a17      	ldr	r2, [pc, #92]	@ (8002f18 <HAL_UART_MspInit+0x88>)
 8002ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec2:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_UART_MspInit+0x88>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <HAL_UART_MspInit+0x88>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	4a10      	ldr	r2, [pc, #64]	@ (8002f18 <HAL_UART_MspInit+0x88>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ede:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <HAL_UART_MspInit+0x88>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002eea:	230c      	movs	r3, #12
 8002eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002efa:	2307      	movs	r3, #7
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efe:	f107 0314 	add.w	r3, r7, #20
 8002f02:	4619      	mov	r1, r3
 8002f04:	4805      	ldr	r0, [pc, #20]	@ (8002f1c <HAL_UART_MspInit+0x8c>)
 8002f06:	f000 fb01 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f0a:	bf00      	nop
 8002f0c:	3728      	adds	r7, #40	@ 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40004400 	.word	0x40004400
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020000 	.word	0x40020000

08002f20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	@ 0x30
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff0 <HAL_InitTick+0xd0>)
 8002f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f38:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff0 <HAL_InitTick+0xd0>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f40:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff0 <HAL_InitTick+0xd0>)
 8002f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f4c:	f107 020c 	add.w	r2, r7, #12
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fda0 	bl	8003a9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002f5c:	f000 fd8a 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
 8002f60:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f64:	4a23      	ldr	r2, [pc, #140]	@ (8002ff4 <HAL_InitTick+0xd4>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0c9b      	lsrs	r3, r3, #18
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002f70:	4b21      	ldr	r3, [pc, #132]	@ (8002ff8 <HAL_InitTick+0xd8>)
 8002f72:	4a22      	ldr	r2, [pc, #136]	@ (8002ffc <HAL_InitTick+0xdc>)
 8002f74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002f76:	4b20      	ldr	r3, [pc, #128]	@ (8002ff8 <HAL_InitTick+0xd8>)
 8002f78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f7c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff8 <HAL_InitTick+0xd8>)
 8002f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f82:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002f84:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff8 <HAL_InitTick+0xd8>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <HAL_InitTick+0xd8>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f90:	4b19      	ldr	r3, [pc, #100]	@ (8002ff8 <HAL_InitTick+0xd8>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002f96:	4818      	ldr	r0, [pc, #96]	@ (8002ff8 <HAL_InitTick+0xd8>)
 8002f98:	f002 f828 	bl	8004fec <HAL_TIM_Base_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d11b      	bne.n	8002fe2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002faa:	4813      	ldr	r0, [pc, #76]	@ (8002ff8 <HAL_InitTick+0xd8>)
 8002fac:	f002 f878 	bl	80050a0 <HAL_TIM_Base_Start_IT>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d111      	bne.n	8002fe2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fbe:	2019      	movs	r0, #25
 8002fc0:	f000 fa96 	bl	80034f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b0f      	cmp	r3, #15
 8002fc8:	d808      	bhi.n	8002fdc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	2019      	movs	r0, #25
 8002fd0:	f000 fa72 	bl	80034b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003000 <HAL_InitTick+0xe0>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e002      	b.n	8002fe2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002fe2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3730      	adds	r7, #48	@ 0x30
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	431bde83 	.word	0x431bde83
 8002ff8:	200004d8 	.word	0x200004d8
 8002ffc:	40010000 	.word	0x40010000
 8003000:	20000014 	.word	0x20000014

08003004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <NMI_Handler+0x4>

0800300c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <HardFault_Handler+0x4>

08003014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <MemManage_Handler+0x4>

0800301c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <BusFault_Handler+0x4>

08003024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <UsageFault_Handler+0x4>

0800302c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003068:	4802      	ldr	r0, [pc, #8]	@ (8003074 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800306a:	f002 f889 	bl	8005180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200004d8 	.word	0x200004d8

08003078 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return 1;
 800307c:	2301      	movs	r3, #1
}
 800307e:	4618      	mov	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <_kill>:

int _kill(int pid, int sig)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003092:	f003 fcb9 	bl	8006a08 <__errno>
 8003096:	4603      	mov	r3, r0
 8003098:	2216      	movs	r2, #22
 800309a:	601a      	str	r2, [r3, #0]
  return -1;
 800309c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_exit>:

void _exit (int status)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ffe7 	bl	8003088 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <_exit+0x12>

080030be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b086      	sub	sp, #24
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	e00a      	b.n	80030e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030d0:	f3af 8000 	nop.w
 80030d4:	4601      	mov	r1, r0
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	60ba      	str	r2, [r7, #8]
 80030dc:	b2ca      	uxtb	r2, r1
 80030de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	3301      	adds	r3, #1
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	dbf0      	blt.n	80030d0 <_read+0x12>
  }

  return len;
 80030ee:	687b      	ldr	r3, [r7, #4]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	e009      	b.n	800311e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	60ba      	str	r2, [r7, #8]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3301      	adds	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	429a      	cmp	r2, r3
 8003124:	dbf1      	blt.n	800310a <_write+0x12>
  }
  return len;
 8003126:	687b      	ldr	r3, [r7, #4]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <_close>:

int _close(int file)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003158:	605a      	str	r2, [r3, #4]
  return 0;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <_isatty>:

int _isatty(int file)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003170:	2301      	movs	r3, #1
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800317e:	b480      	push	{r7}
 8003180:	b085      	sub	sp, #20
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a0:	4a14      	ldr	r2, [pc, #80]	@ (80031f4 <_sbrk+0x5c>)
 80031a2:	4b15      	ldr	r3, [pc, #84]	@ (80031f8 <_sbrk+0x60>)
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031ac:	4b13      	ldr	r3, [pc, #76]	@ (80031fc <_sbrk+0x64>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b4:	4b11      	ldr	r3, [pc, #68]	@ (80031fc <_sbrk+0x64>)
 80031b6:	4a12      	ldr	r2, [pc, #72]	@ (8003200 <_sbrk+0x68>)
 80031b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ba:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <_sbrk+0x64>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d207      	bcs.n	80031d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031c8:	f003 fc1e 	bl	8006a08 <__errno>
 80031cc:	4603      	mov	r3, r0
 80031ce:	220c      	movs	r2, #12
 80031d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	e009      	b.n	80031ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031d8:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <_sbrk+0x64>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031de:	4b07      	ldr	r3, [pc, #28]	@ (80031fc <_sbrk+0x64>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	4a05      	ldr	r2, [pc, #20]	@ (80031fc <_sbrk+0x64>)
 80031e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ea:	68fb      	ldr	r3, [r7, #12]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20020000 	.word	0x20020000
 80031f8:	00000400 	.word	0x00000400
 80031fc:	20000520 	.word	0x20000520
 8003200:	20000678 	.word	0x20000678

08003204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <SystemInit+0x20>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320e:	4a05      	ldr	r2, [pc, #20]	@ (8003224 <SystemInit+0x20>)
 8003210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003228:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800322c:	480d      	ldr	r0, [pc, #52]	@ (8003264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800322e:	490e      	ldr	r1, [pc, #56]	@ (8003268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003230:	4a0e      	ldr	r2, [pc, #56]	@ (800326c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003234:	e002      	b.n	800323c <LoopCopyDataInit>

08003236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800323a:	3304      	adds	r3, #4

0800323c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800323c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800323e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003240:	d3f9      	bcc.n	8003236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003242:	4a0b      	ldr	r2, [pc, #44]	@ (8003270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003244:	4c0b      	ldr	r4, [pc, #44]	@ (8003274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003248:	e001      	b.n	800324e <LoopFillZerobss>

0800324a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800324a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800324c:	3204      	adds	r2, #4

0800324e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800324e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003250:	d3fb      	bcc.n	800324a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003252:	f7ff ffd7 	bl	8003204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003256:	f003 fbdd 	bl	8006a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800325a:	f7ff fc24 	bl	8002aa6 <main>
  bx  lr    
 800325e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003268:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800326c:	08009160 	.word	0x08009160
  ldr r2, =_sbss
 8003270:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003274:	20000674 	.word	0x20000674

08003278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003278:	e7fe      	b.n	8003278 <ADC_IRQHandler>
	...

0800327c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003280:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <HAL_Init+0x40>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <HAL_Init+0x40>)
 8003286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800328a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800328c:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <HAL_Init+0x40>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0a      	ldr	r2, [pc, #40]	@ (80032bc <HAL_Init+0x40>)
 8003292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003298:	4b08      	ldr	r3, [pc, #32]	@ (80032bc <HAL_Init+0x40>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a07      	ldr	r2, [pc, #28]	@ (80032bc <HAL_Init+0x40>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a4:	2003      	movs	r0, #3
 80032a6:	f000 f8fc 	bl	80034a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032aa:	200f      	movs	r0, #15
 80032ac:	f7ff fe38 	bl	8002f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032b0:	f7ff fd7e 	bl	8002db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00

080032c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c4:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_IncTick+0x20>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_IncTick+0x24>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	4a04      	ldr	r2, [pc, #16]	@ (80032e4 <HAL_IncTick+0x24>)
 80032d2:	6013      	str	r3, [r2, #0]
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000018 	.word	0x20000018
 80032e4:	20000524 	.word	0x20000524

080032e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return uwTick;
 80032ec:	4b03      	ldr	r3, [pc, #12]	@ (80032fc <HAL_GetTick+0x14>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20000524 	.word	0x20000524

08003300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff ffee 	bl	80032e8 <HAL_GetTick>
 800330c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d005      	beq.n	8003326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800331a:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <HAL_Delay+0x44>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003326:	bf00      	nop
 8003328:	f7ff ffde 	bl	80032e8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	429a      	cmp	r2, r3
 8003336:	d8f7      	bhi.n	8003328 <HAL_Delay+0x28>
  {
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000018 	.word	0x20000018

08003348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003358:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003364:	4013      	ands	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337a:	4a04      	ldr	r2, [pc, #16]	@ (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	60d3      	str	r3, [r2, #12]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003394:	4b04      	ldr	r3, [pc, #16]	@ (80033a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0307 	and.w	r3, r3, #7
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	db0b      	blt.n	80033d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	f003 021f 	and.w	r2, r3, #31
 80033c4:	4907      	ldr	r1, [pc, #28]	@ (80033e4 <__NVIC_EnableIRQ+0x38>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2001      	movs	r0, #1
 80033ce:	fa00 f202 	lsl.w	r2, r0, r2
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db0a      	blt.n	8003412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	490c      	ldr	r1, [pc, #48]	@ (8003434 <__NVIC_SetPriority+0x4c>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	0112      	lsls	r2, r2, #4
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	440b      	add	r3, r1
 800340c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003410:	e00a      	b.n	8003428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4908      	ldr	r1, [pc, #32]	@ (8003438 <__NVIC_SetPriority+0x50>)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	3b04      	subs	r3, #4
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	440b      	add	r3, r1
 8003426:	761a      	strb	r2, [r3, #24]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000e100 	.word	0xe000e100
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	@ 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	bf28      	it	cs
 800345a:	2304      	movcs	r3, #4
 800345c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3304      	adds	r3, #4
 8003462:	2b06      	cmp	r3, #6
 8003464:	d902      	bls.n	800346c <NVIC_EncodePriority+0x30>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3b03      	subs	r3, #3
 800346a:	e000      	b.n	800346e <NVIC_EncodePriority+0x32>
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	f04f 32ff 	mov.w	r2, #4294967295
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	401a      	ands	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003484:	f04f 31ff 	mov.w	r1, #4294967295
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	43d9      	mvns	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	4313      	orrs	r3, r2
         );
}
 8003496:	4618      	mov	r0, r3
 8003498:	3724      	adds	r7, #36	@ 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ff4c 	bl	8003348 <__NVIC_SetPriorityGrouping>
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ca:	f7ff ff61 	bl	8003390 <__NVIC_GetPriorityGrouping>
 80034ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	6978      	ldr	r0, [r7, #20]
 80034d6:	f7ff ffb1 	bl	800343c <NVIC_EncodePriority>
 80034da:	4602      	mov	r2, r0
 80034dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff ff80 	bl	80033e8 <__NVIC_SetPriority>
}
 80034e8:	bf00      	nop
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff ff54 	bl	80033ac <__NVIC_EnableIRQ>
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	@ 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800351e:	2300      	movs	r3, #0
 8003520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	e165      	b.n	80037f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003528:	2201      	movs	r2, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	429a      	cmp	r2, r3
 8003542:	f040 8154 	bne.w	80037ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d005      	beq.n	800355e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800355a:	2b02      	cmp	r3, #2
 800355c:	d130      	bne.n	80035c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	2203      	movs	r2, #3
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003594:	2201      	movs	r2, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 0201 	and.w	r2, r3, #1
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d017      	beq.n	80035fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	2203      	movs	r2, #3
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d123      	bne.n	8003650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	08da      	lsrs	r2, r3, #3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3208      	adds	r2, #8
 8003610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	220f      	movs	r2, #15
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	08da      	lsrs	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3208      	adds	r2, #8
 800364a:	69b9      	ldr	r1, [r7, #24]
 800364c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	2203      	movs	r2, #3
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0203 	and.w	r2, r3, #3
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80ae 	beq.w	80037ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b5d      	ldr	r3, [pc, #372]	@ (800380c <HAL_GPIO_Init+0x300>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369a:	4a5c      	ldr	r2, [pc, #368]	@ (800380c <HAL_GPIO_Init+0x300>)
 800369c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036a2:	4b5a      	ldr	r3, [pc, #360]	@ (800380c <HAL_GPIO_Init+0x300>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ae:	4a58      	ldr	r2, [pc, #352]	@ (8003810 <HAL_GPIO_Init+0x304>)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	3302      	adds	r3, #2
 80036b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	220f      	movs	r2, #15
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003814 <HAL_GPIO_Init+0x308>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d025      	beq.n	8003726 <HAL_GPIO_Init+0x21a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003818 <HAL_GPIO_Init+0x30c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01f      	beq.n	8003722 <HAL_GPIO_Init+0x216>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a4d      	ldr	r2, [pc, #308]	@ (800381c <HAL_GPIO_Init+0x310>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d019      	beq.n	800371e <HAL_GPIO_Init+0x212>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003820 <HAL_GPIO_Init+0x314>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <HAL_GPIO_Init+0x20e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003824 <HAL_GPIO_Init+0x318>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00d      	beq.n	8003716 <HAL_GPIO_Init+0x20a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003828 <HAL_GPIO_Init+0x31c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <HAL_GPIO_Init+0x206>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a49      	ldr	r2, [pc, #292]	@ (800382c <HAL_GPIO_Init+0x320>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_GPIO_Init+0x202>
 800370a:	2306      	movs	r3, #6
 800370c:	e00c      	b.n	8003728 <HAL_GPIO_Init+0x21c>
 800370e:	2307      	movs	r3, #7
 8003710:	e00a      	b.n	8003728 <HAL_GPIO_Init+0x21c>
 8003712:	2305      	movs	r3, #5
 8003714:	e008      	b.n	8003728 <HAL_GPIO_Init+0x21c>
 8003716:	2304      	movs	r3, #4
 8003718:	e006      	b.n	8003728 <HAL_GPIO_Init+0x21c>
 800371a:	2303      	movs	r3, #3
 800371c:	e004      	b.n	8003728 <HAL_GPIO_Init+0x21c>
 800371e:	2302      	movs	r3, #2
 8003720:	e002      	b.n	8003728 <HAL_GPIO_Init+0x21c>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_GPIO_Init+0x21c>
 8003726:	2300      	movs	r3, #0
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	f002 0203 	and.w	r2, r2, #3
 800372e:	0092      	lsls	r2, r2, #2
 8003730:	4093      	lsls	r3, r2
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003738:	4935      	ldr	r1, [pc, #212]	@ (8003810 <HAL_GPIO_Init+0x304>)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	3302      	adds	r3, #2
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003746:	4b3a      	ldr	r3, [pc, #232]	@ (8003830 <HAL_GPIO_Init+0x324>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800376a:	4a31      	ldr	r2, [pc, #196]	@ (8003830 <HAL_GPIO_Init+0x324>)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003770:	4b2f      	ldr	r3, [pc, #188]	@ (8003830 <HAL_GPIO_Init+0x324>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003794:	4a26      	ldr	r2, [pc, #152]	@ (8003830 <HAL_GPIO_Init+0x324>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800379a:	4b25      	ldr	r3, [pc, #148]	@ (8003830 <HAL_GPIO_Init+0x324>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037be:	4a1c      	ldr	r2, [pc, #112]	@ (8003830 <HAL_GPIO_Init+0x324>)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003830 <HAL_GPIO_Init+0x324>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037e8:	4a11      	ldr	r2, [pc, #68]	@ (8003830 <HAL_GPIO_Init+0x324>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3301      	adds	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b0f      	cmp	r3, #15
 80037f8:	f67f ae96 	bls.w	8003528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3724      	adds	r7, #36	@ 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800
 8003810:	40013800 	.word	0x40013800
 8003814:	40020000 	.word	0x40020000
 8003818:	40020400 	.word	0x40020400
 800381c:	40020800 	.word	0x40020800
 8003820:	40020c00 	.word	0x40020c00
 8003824:	40021000 	.word	0x40021000
 8003828:	40021400 	.word	0x40021400
 800382c:	40021800 	.word	0x40021800
 8003830:	40013c00 	.word	0x40013c00

08003834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	807b      	strh	r3, [r7, #2]
 8003840:	4613      	mov	r3, r2
 8003842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003844:	787b      	ldrb	r3, [r7, #1]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800384a:	887a      	ldrh	r2, [r7, #2]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003850:	e003      	b.n	800385a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003852:	887b      	ldrh	r3, [r7, #2]
 8003854:	041a      	lsls	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	619a      	str	r2, [r3, #24]
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0cc      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b68      	ldr	r3, [pc, #416]	@ (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d90c      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b65      	ldr	r3, [pc, #404]	@ (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	@ (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a58      	ldr	r2, [pc, #352]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a52      	ldr	r2, [pc, #328]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d044      	beq.n	8003988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d119      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d003      	beq.n	8003926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003922:	2b03      	cmp	r3, #3
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b3f      	ldr	r3, [pc, #252]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	4b3b      	ldr	r3, [pc, #236]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e067      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b37      	ldr	r3, [pc, #220]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4934      	ldr	r1, [pc, #208]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003958:	f7ff fcc6 	bl	80032e8 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7ff fcc2 	bl	80032e8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e04f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2b      	ldr	r3, [pc, #172]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b25      	ldr	r3, [pc, #148]	@ (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d20c      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b22      	ldr	r3, [pc, #136]	@ (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	@ (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039da:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f887 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fa86 	bl	8002f20 <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00
 8003a24:	40023800 	.word	0x40023800
 8003a28:	08008dc8 	.word	0x08008dc8
 8003a2c:	20000010 	.word	0x20000010
 8003a30:	20000014 	.word	0x20000014

08003a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a38:	4b03      	ldr	r3, [pc, #12]	@ (8003a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20000010 	.word	0x20000010

08003a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a50:	f7ff fff0 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0a9b      	lsrs	r3, r3, #10
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4903      	ldr	r1, [pc, #12]	@ (8003a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	08008dd8 	.word	0x08008dd8

08003a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a78:	f7ff ffdc 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0b5b      	lsrs	r3, r3, #13
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4903      	ldr	r1, [pc, #12]	@ (8003a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	08008dd8 	.word	0x08008dd8

08003a9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	220f      	movs	r2, #15
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003aac:	4b12      	ldr	r3, [pc, #72]	@ (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 0203 	and.w	r2, r3, #3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ad0:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	08db      	lsrs	r3, r3, #3
 8003ad6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ade:	4b07      	ldr	r3, [pc, #28]	@ (8003afc <HAL_RCC_GetClockConfig+0x60>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 020f 	and.w	r2, r3, #15
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40023c00 	.word	0x40023c00

08003b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b04:	b0ae      	sub	sp, #184	@ 0xb8
 8003b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b26:	4bcb      	ldr	r3, [pc, #812]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	f200 8206 	bhi.w	8003f40 <HAL_RCC_GetSysClockFreq+0x440>
 8003b34:	a201      	add	r2, pc, #4	@ (adr r2, 8003b3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b71 	.word	0x08003b71
 8003b40:	08003f41 	.word	0x08003f41
 8003b44:	08003f41 	.word	0x08003f41
 8003b48:	08003f41 	.word	0x08003f41
 8003b4c:	08003b79 	.word	0x08003b79
 8003b50:	08003f41 	.word	0x08003f41
 8003b54:	08003f41 	.word	0x08003f41
 8003b58:	08003f41 	.word	0x08003f41
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003f41 	.word	0x08003f41
 8003b64:	08003f41 	.word	0x08003f41
 8003b68:	08003f41 	.word	0x08003f41
 8003b6c:	08003d71 	.word	0x08003d71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b70:	4bb9      	ldr	r3, [pc, #740]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003b76:	e1e7      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b78:	4bb8      	ldr	r3, [pc, #736]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b7e:	e1e3      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b80:	4bb4      	ldr	r3, [pc, #720]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b8c:	4bb1      	ldr	r3, [pc, #708]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d071      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b98:	4bae      	ldr	r3, [pc, #696]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ba4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	462b      	mov	r3, r5
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	0159      	lsls	r1, r3, #5
 8003bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd0:	0150      	lsls	r0, r2, #5
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	1a51      	subs	r1, r2, r1
 8003bda:	6439      	str	r1, [r7, #64]	@ 0x40
 8003bdc:	4629      	mov	r1, r5
 8003bde:	eb63 0301 	sbc.w	r3, r3, r1
 8003be2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	018b      	lsls	r3, r1, #6
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bfa:	4641      	mov	r1, r8
 8003bfc:	018a      	lsls	r2, r1, #6
 8003bfe:	4641      	mov	r1, r8
 8003c00:	1a51      	subs	r1, r2, r1
 8003c02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c04:	4649      	mov	r1, r9
 8003c06:	eb63 0301 	sbc.w	r3, r3, r1
 8003c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003c18:	4649      	mov	r1, r9
 8003c1a:	00cb      	lsls	r3, r1, #3
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c22:	4641      	mov	r1, r8
 8003c24:	00ca      	lsls	r2, r1, #3
 8003c26:	4610      	mov	r0, r2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4622      	mov	r2, r4
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c32:	462b      	mov	r3, r5
 8003c34:	460a      	mov	r2, r1
 8003c36:	eb42 0303 	adc.w	r3, r2, r3
 8003c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c48:	4629      	mov	r1, r5
 8003c4a:	024b      	lsls	r3, r1, #9
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c52:	4621      	mov	r1, r4
 8003c54:	024a      	lsls	r2, r1, #9
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003c6c:	f7fd f80c 	bl	8000c88 <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4613      	mov	r3, r2
 8003c76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c7a:	e067      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7c:	4b75      	ldr	r3, [pc, #468]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c88:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c96:	2300      	movs	r3, #0
 8003c98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c9a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	f04f 0000 	mov.w	r0, #0
 8003ca6:	f04f 0100 	mov.w	r1, #0
 8003caa:	0159      	lsls	r1, r3, #5
 8003cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb0:	0150      	lsls	r0, r2, #5
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	1a51      	subs	r1, r2, r1
 8003cba:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	018b      	lsls	r3, r1, #6
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cda:	4641      	mov	r1, r8
 8003cdc:	018a      	lsls	r2, r1, #6
 8003cde:	4641      	mov	r1, r8
 8003ce0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cf6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cfe:	4692      	mov	sl, r2
 8003d00:	469b      	mov	fp, r3
 8003d02:	4623      	mov	r3, r4
 8003d04:	eb1a 0303 	adds.w	r3, sl, r3
 8003d08:	623b      	str	r3, [r7, #32]
 8003d0a:	462b      	mov	r3, r5
 8003d0c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d1e:	4629      	mov	r1, r5
 8003d20:	028b      	lsls	r3, r1, #10
 8003d22:	4621      	mov	r1, r4
 8003d24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d28:	4621      	mov	r1, r4
 8003d2a:	028a      	lsls	r2, r1, #10
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d34:	2200      	movs	r2, #0
 8003d36:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d38:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003d3e:	f7fc ffa3 	bl	8000c88 <__aeabi_uldivmod>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4613      	mov	r3, r2
 8003d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d4c:	4b41      	ldr	r3, [pc, #260]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0c1b      	lsrs	r3, r3, #16
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003d5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d6e:	e0eb      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d70:	4b38      	ldr	r3, [pc, #224]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d7c:	4b35      	ldr	r3, [pc, #212]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d06b      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d88:	4b32      	ldr	r3, [pc, #200]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	2200      	movs	r2, #0
 8003d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003da0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003da4:	4622      	mov	r2, r4
 8003da6:	462b      	mov	r3, r5
 8003da8:	f04f 0000 	mov.w	r0, #0
 8003dac:	f04f 0100 	mov.w	r1, #0
 8003db0:	0159      	lsls	r1, r3, #5
 8003db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003db6:	0150      	lsls	r0, r2, #5
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	1a51      	subs	r1, r2, r1
 8003dc0:	61b9      	str	r1, [r7, #24]
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	eb63 0301 	sbc.w	r3, r3, r1
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003dd6:	4659      	mov	r1, fp
 8003dd8:	018b      	lsls	r3, r1, #6
 8003dda:	4651      	mov	r1, sl
 8003ddc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003de0:	4651      	mov	r1, sl
 8003de2:	018a      	lsls	r2, r1, #6
 8003de4:	4651      	mov	r1, sl
 8003de6:	ebb2 0801 	subs.w	r8, r2, r1
 8003dea:	4659      	mov	r1, fp
 8003dec:	eb63 0901 	sbc.w	r9, r3, r1
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e04:	4690      	mov	r8, r2
 8003e06:	4699      	mov	r9, r3
 8003e08:	4623      	mov	r3, r4
 8003e0a:	eb18 0303 	adds.w	r3, r8, r3
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	462b      	mov	r3, r5
 8003e12:	eb49 0303 	adc.w	r3, r9, r3
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e24:	4629      	mov	r1, r5
 8003e26:	024b      	lsls	r3, r1, #9
 8003e28:	4621      	mov	r1, r4
 8003e2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e2e:	4621      	mov	r1, r4
 8003e30:	024a      	lsls	r2, r1, #9
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e3e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003e40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e44:	f7fc ff20 	bl	8000c88 <__aeabi_uldivmod>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e52:	e065      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x420>
 8003e54:	40023800 	.word	0x40023800
 8003e58:	00f42400 	.word	0x00f42400
 8003e5c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e60:	4b3d      	ldr	r3, [pc, #244]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	099b      	lsrs	r3, r3, #6
 8003e66:	2200      	movs	r2, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e70:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e72:	2300      	movs	r3, #0
 8003e74:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e76:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003e7a:	4642      	mov	r2, r8
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	f04f 0000 	mov.w	r0, #0
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	0159      	lsls	r1, r3, #5
 8003e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8c:	0150      	lsls	r0, r2, #5
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4641      	mov	r1, r8
 8003e94:	1a51      	subs	r1, r2, r1
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	4649      	mov	r1, r9
 8003e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003eac:	4659      	mov	r1, fp
 8003eae:	018b      	lsls	r3, r1, #6
 8003eb0:	4651      	mov	r1, sl
 8003eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	018a      	lsls	r2, r1, #6
 8003eba:	4651      	mov	r1, sl
 8003ebc:	1a54      	subs	r4, r2, r1
 8003ebe:	4659      	mov	r1, fp
 8003ec0:	eb63 0501 	sbc.w	r5, r3, r1
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	00eb      	lsls	r3, r5, #3
 8003ece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ed2:	00e2      	lsls	r2, r4, #3
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	461d      	mov	r5, r3
 8003ed8:	4643      	mov	r3, r8
 8003eda:	18e3      	adds	r3, r4, r3
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	464b      	mov	r3, r9
 8003ee0:	eb45 0303 	adc.w	r3, r5, r3
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	028b      	lsls	r3, r1, #10
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003efc:	4621      	mov	r1, r4
 8003efe:	028a      	lsls	r2, r1, #10
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f08:	2200      	movs	r2, #0
 8003f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f0c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f12:	f7fc feb9 	bl	8000c88 <__aeabi_uldivmod>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f20:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	0f1b      	lsrs	r3, r3, #28
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f3e:	e003      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f40:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	37b8      	adds	r7, #184	@ 0xb8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f56:	bf00      	nop
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	00f42400 	.word	0x00f42400

08003f60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e28d      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8083 	beq.w	8004086 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f80:	4b94      	ldr	r3, [pc, #592]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d019      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f8c:	4b91      	ldr	r3, [pc, #580]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d106      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f98:	4b8e      	ldr	r3, [pc, #568]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fa4:	d00c      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fa6:	4b8b      	ldr	r3, [pc, #556]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fae:	2b0c      	cmp	r3, #12
 8003fb0:	d112      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb2:	4b88      	ldr	r3, [pc, #544]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc0:	4b84      	ldr	r3, [pc, #528]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d05b      	beq.n	8004084 <HAL_RCC_OscConfig+0x124>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d157      	bne.n	8004084 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e25a      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fe0:	d106      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x90>
 8003fe2:	4b7c      	ldr	r3, [pc, #496]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a7b      	ldr	r2, [pc, #492]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e01d      	b.n	800402c <HAL_RCC_OscConfig+0xcc>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0xb4>
 8003ffa:	4b76      	ldr	r3, [pc, #472]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a75      	ldr	r2, [pc, #468]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	4b73      	ldr	r3, [pc, #460]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a72      	ldr	r2, [pc, #456]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 800400c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e00b      	b.n	800402c <HAL_RCC_OscConfig+0xcc>
 8004014:	4b6f      	ldr	r3, [pc, #444]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a6e      	ldr	r2, [pc, #440]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 800401a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b6c      	ldr	r3, [pc, #432]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a6b      	ldr	r2, [pc, #428]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800402a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d013      	beq.n	800405c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7ff f958 	bl	80032e8 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800403c:	f7ff f954 	bl	80032e8 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	@ 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e21f      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404e:	4b61      	ldr	r3, [pc, #388]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0xdc>
 800405a:	e014      	b.n	8004086 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7ff f944 	bl	80032e8 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004064:	f7ff f940 	bl	80032e8 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e20b      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004076:	4b57      	ldr	r3, [pc, #348]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x104>
 8004082:	e000      	b.n	8004086 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d06f      	beq.n	8004172 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004092:	4b50      	ldr	r3, [pc, #320]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b00      	cmp	r3, #0
 800409c:	d017      	beq.n	80040ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800409e:	4b4d      	ldr	r3, [pc, #308]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d105      	bne.n	80040b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040aa:	4b4a      	ldr	r3, [pc, #296]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b6:	4b47      	ldr	r3, [pc, #284]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	d11c      	bne.n	80040fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040c2:	4b44      	ldr	r3, [pc, #272]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d116      	bne.n	80040fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ce:	4b41      	ldr	r3, [pc, #260]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_RCC_OscConfig+0x186>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d001      	beq.n	80040e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e1d3      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e6:	4b3b      	ldr	r3, [pc, #236]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4937      	ldr	r1, [pc, #220]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fa:	e03a      	b.n	8004172 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d020      	beq.n	8004146 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004104:	4b34      	ldr	r3, [pc, #208]	@ (80041d8 <HAL_RCC_OscConfig+0x278>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7ff f8ed 	bl	80032e8 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004112:	f7ff f8e9 	bl	80032e8 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e1b4      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004124:	4b2b      	ldr	r3, [pc, #172]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b28      	ldr	r3, [pc, #160]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4925      	ldr	r1, [pc, #148]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]
 8004144:	e015      	b.n	8004172 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004146:	4b24      	ldr	r3, [pc, #144]	@ (80041d8 <HAL_RCC_OscConfig+0x278>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7ff f8cc 	bl	80032e8 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004154:	f7ff f8c8 	bl	80032e8 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e193      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004166:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d036      	beq.n	80041ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d016      	beq.n	80041b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004186:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 8004188:	2201      	movs	r2, #1
 800418a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7ff f8ac 	bl	80032e8 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004194:	f7ff f8a8 	bl	80032e8 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e173      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a6:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <HAL_RCC_OscConfig+0x274>)
 80041a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x234>
 80041b2:	e01b      	b.n	80041ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b4:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <HAL_RCC_OscConfig+0x27c>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7ff f895 	bl	80032e8 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c0:	e00e      	b.n	80041e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c2:	f7ff f891 	bl	80032e8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d907      	bls.n	80041e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e15c      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
 80041d4:	40023800 	.word	0x40023800
 80041d8:	42470000 	.word	0x42470000
 80041dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e0:	4b8a      	ldr	r3, [pc, #552]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 80041e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1ea      	bne.n	80041c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8097 	beq.w	8004328 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fe:	4b83      	ldr	r3, [pc, #524]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	4b7f      	ldr	r3, [pc, #508]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	4a7e      	ldr	r2, [pc, #504]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 8004214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004218:	6413      	str	r3, [r2, #64]	@ 0x40
 800421a:	4b7c      	ldr	r3, [pc, #496]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004226:	2301      	movs	r3, #1
 8004228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422a:	4b79      	ldr	r3, [pc, #484]	@ (8004410 <HAL_RCC_OscConfig+0x4b0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d118      	bne.n	8004268 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004236:	4b76      	ldr	r3, [pc, #472]	@ (8004410 <HAL_RCC_OscConfig+0x4b0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a75      	ldr	r2, [pc, #468]	@ (8004410 <HAL_RCC_OscConfig+0x4b0>)
 800423c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004242:	f7ff f851 	bl	80032e8 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424a:	f7ff f84d 	bl	80032e8 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e118      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425c:	4b6c      	ldr	r3, [pc, #432]	@ (8004410 <HAL_RCC_OscConfig+0x4b0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d106      	bne.n	800427e <HAL_RCC_OscConfig+0x31e>
 8004270:	4b66      	ldr	r3, [pc, #408]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004274:	4a65      	ldr	r2, [pc, #404]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	@ 0x70
 800427c:	e01c      	b.n	80042b8 <HAL_RCC_OscConfig+0x358>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b05      	cmp	r3, #5
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x340>
 8004286:	4b61      	ldr	r3, [pc, #388]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428a:	4a60      	ldr	r2, [pc, #384]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 800428c:	f043 0304 	orr.w	r3, r3, #4
 8004290:	6713      	str	r3, [r2, #112]	@ 0x70
 8004292:	4b5e      	ldr	r3, [pc, #376]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004296:	4a5d      	ldr	r2, [pc, #372]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6713      	str	r3, [r2, #112]	@ 0x70
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0x358>
 80042a0:	4b5a      	ldr	r3, [pc, #360]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a4:	4a59      	ldr	r2, [pc, #356]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ac:	4b57      	ldr	r3, [pc, #348]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b0:	4a56      	ldr	r2, [pc, #344]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 80042b2:	f023 0304 	bic.w	r3, r3, #4
 80042b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d015      	beq.n	80042ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7ff f812 	bl	80032e8 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c6:	e00a      	b.n	80042de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7ff f80e 	bl	80032e8 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0d7      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042de:	4b4b      	ldr	r3, [pc, #300]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0ee      	beq.n	80042c8 <HAL_RCC_OscConfig+0x368>
 80042ea:	e014      	b.n	8004316 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fe fffc 	bl	80032e8 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f2:	e00a      	b.n	800430a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f4:	f7fe fff8 	bl	80032e8 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e0c1      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430a:	4b40      	ldr	r3, [pc, #256]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1ee      	bne.n	80042f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004316:	7dfb      	ldrb	r3, [r7, #23]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d105      	bne.n	8004328 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431c:	4b3b      	ldr	r3, [pc, #236]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	4a3a      	ldr	r2, [pc, #232]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 8004322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004326:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80ad 	beq.w	800448c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004332:	4b36      	ldr	r3, [pc, #216]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b08      	cmp	r3, #8
 800433c:	d060      	beq.n	8004400 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d145      	bne.n	80043d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004346:	4b33      	ldr	r3, [pc, #204]	@ (8004414 <HAL_RCC_OscConfig+0x4b4>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fe ffcc 	bl	80032e8 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004354:	f7fe ffc8 	bl	80032e8 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e093      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004366:	4b29      	ldr	r3, [pc, #164]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	3b01      	subs	r3, #1
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439c:	071b      	lsls	r3, r3, #28
 800439e:	491b      	ldr	r1, [pc, #108]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004414 <HAL_RCC_OscConfig+0x4b4>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043aa:	f7fe ff9d 	bl	80032e8 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fe ff99 	bl	80032e8 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e064      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c4:	4b11      	ldr	r3, [pc, #68]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x452>
 80043d0:	e05c      	b.n	800448c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d2:	4b10      	ldr	r3, [pc, #64]	@ (8004414 <HAL_RCC_OscConfig+0x4b4>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fe ff86 	bl	80032e8 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e0:	f7fe ff82 	bl	80032e8 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e04d      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f2:	4b06      	ldr	r3, [pc, #24]	@ (800440c <HAL_RCC_OscConfig+0x4ac>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x480>
 80043fe:	e045      	b.n	800448c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d107      	bne.n	8004418 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e040      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
 800440c:	40023800 	.word	0x40023800
 8004410:	40007000 	.word	0x40007000
 8004414:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004418:	4b1f      	ldr	r3, [pc, #124]	@ (8004498 <HAL_RCC_OscConfig+0x538>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d030      	beq.n	8004488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d129      	bne.n	8004488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d122      	bne.n	8004488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004448:	4013      	ands	r3, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800444e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004450:	4293      	cmp	r3, r2
 8004452:	d119      	bne.n	8004488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	3b01      	subs	r3, #1
 8004462:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d10f      	bne.n	8004488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004472:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d107      	bne.n	8004488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800

0800449c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e07b      	b.n	80045a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d108      	bne.n	80044c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044be:	d009      	beq.n	80044d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	61da      	str	r2, [r3, #28]
 80044c6:	e005      	b.n	80044d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fe fc86 	bl	8002e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800450a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004558:	ea42 0103 	orr.w	r1, r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004560:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	f003 0104 	and.w	r1, r3, #4
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	f003 0210 	and.w	r2, r3, #16
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004594:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b088      	sub	sp, #32
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_SPI_Transmit+0x22>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e126      	b.n	800481e <HAL_SPI_Transmit+0x270>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045d8:	f7fe fe86 	bl	80032e8 <HAL_GetTick>
 80045dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d002      	beq.n	80045f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
 80045f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045f2:	e10b      	b.n	800480c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_SPI_Transmit+0x52>
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004604:	e102      	b.n	800480c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2203      	movs	r2, #3
 800460a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	88fa      	ldrh	r2, [r7, #6]
 800461e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	88fa      	ldrh	r2, [r7, #6]
 8004624:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800464c:	d10f      	bne.n	800466e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800465c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800466c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004678:	2b40      	cmp	r3, #64	@ 0x40
 800467a:	d007      	beq.n	800468c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800468a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004694:	d14b      	bne.n	800472e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <HAL_SPI_Transmit+0xf6>
 800469e:	8afb      	ldrh	r3, [r7, #22]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d13e      	bne.n	8004722 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a8:	881a      	ldrh	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b4:	1c9a      	adds	r2, r3, #2
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046c8:	e02b      	b.n	8004722 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d112      	bne.n	80046fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046dc:	881a      	ldrh	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e8:	1c9a      	adds	r2, r3, #2
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046fc:	e011      	b.n	8004722 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046fe:	f7fe fdf3 	bl	80032e8 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d803      	bhi.n	8004716 <HAL_SPI_Transmit+0x168>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d102      	bne.n	800471c <HAL_SPI_Transmit+0x16e>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004720:	e074      	b.n	800480c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ce      	bne.n	80046ca <HAL_SPI_Transmit+0x11c>
 800472c:	e04c      	b.n	80047c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_SPI_Transmit+0x18e>
 8004736:	8afb      	ldrh	r3, [r7, #22]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d140      	bne.n	80047be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	330c      	adds	r3, #12
 8004746:	7812      	ldrb	r2, [r2, #0]
 8004748:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004762:	e02c      	b.n	80047be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b02      	cmp	r3, #2
 8004770:	d113      	bne.n	800479a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	7812      	ldrb	r2, [r2, #0]
 800477e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004798:	e011      	b.n	80047be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800479a:	f7fe fda5 	bl	80032e8 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d803      	bhi.n	80047b2 <HAL_SPI_Transmit+0x204>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d102      	bne.n	80047b8 <HAL_SPI_Transmit+0x20a>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047bc:	e026      	b.n	800480c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1cd      	bne.n	8004764 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fbcb 	bl	8004f68 <SPI_EndRxTxTransaction>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e000      	b.n	800480c <HAL_SPI_Transmit+0x25e>
  }

error:
 800480a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800481c:	7ffb      	ldrb	r3, [r7, #31]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b088      	sub	sp, #32
 800482a:	af02      	add	r7, sp, #8
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	603b      	str	r3, [r7, #0]
 8004832:	4613      	mov	r3, r2
 8004834:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004842:	d112      	bne.n	800486a <HAL_SPI_Receive+0x44>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10e      	bne.n	800486a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2204      	movs	r2, #4
 8004850:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004854:	88fa      	ldrh	r2, [r7, #6]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f8f1 	bl	8004a48 <HAL_SPI_TransmitReceive>
 8004866:	4603      	mov	r3, r0
 8004868:	e0ea      	b.n	8004a40 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_SPI_Receive+0x52>
 8004874:	2302      	movs	r3, #2
 8004876:	e0e3      	b.n	8004a40 <HAL_SPI_Receive+0x21a>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004880:	f7fe fd32 	bl	80032e8 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b01      	cmp	r3, #1
 8004890:	d002      	beq.n	8004898 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004892:	2302      	movs	r3, #2
 8004894:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004896:	e0ca      	b.n	8004a2e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_SPI_Receive+0x7e>
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048a8:	e0c1      	b.n	8004a2e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2204      	movs	r2, #4
 80048ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	88fa      	ldrh	r2, [r7, #6]
 80048c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048f0:	d10f      	bne.n	8004912 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004900:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004910:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491c:	2b40      	cmp	r3, #64	@ 0x40
 800491e:	d007      	beq.n	8004930 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800492e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d162      	bne.n	80049fe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004938:	e02e      	b.n	8004998 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b01      	cmp	r3, #1
 8004946:	d115      	bne.n	8004974 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f103 020c 	add.w	r2, r3, #12
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004972:	e011      	b.n	8004998 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004974:	f7fe fcb8 	bl	80032e8 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d803      	bhi.n	800498c <HAL_SPI_Receive+0x166>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d102      	bne.n	8004992 <HAL_SPI_Receive+0x16c>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004996:	e04a      	b.n	8004a2e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1cb      	bne.n	800493a <HAL_SPI_Receive+0x114>
 80049a2:	e031      	b.n	8004a08 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d113      	bne.n	80049da <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049bc:	b292      	uxth	r2, r2
 80049be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c4:	1c9a      	adds	r2, r3, #2
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049d8:	e011      	b.n	80049fe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049da:	f7fe fc85 	bl	80032e8 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d803      	bhi.n	80049f2 <HAL_SPI_Receive+0x1cc>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f0:	d102      	bne.n	80049f8 <HAL_SPI_Receive+0x1d2>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049fc:	e017      	b.n	8004a2e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1cd      	bne.n	80049a4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	6839      	ldr	r1, [r7, #0]
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 fa45 	bl	8004e9c <SPI_EndRxTransaction>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
 8004a2a:	e000      	b.n	8004a2e <HAL_SPI_Receive+0x208>
  }

error :
 8004a2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08c      	sub	sp, #48	@ 0x30
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a56:	2301      	movs	r3, #1
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_SPI_TransmitReceive+0x26>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e18a      	b.n	8004d84 <HAL_SPI_TransmitReceive+0x33c>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a76:	f7fe fc37 	bl	80032e8 <HAL_GetTick>
 8004a7a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d00f      	beq.n	8004ab8 <HAL_SPI_TransmitReceive+0x70>
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a9e:	d107      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d103      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x68>
 8004aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d003      	beq.n	8004ab8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004ab6:	e15b      	b.n	8004d70 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_SPI_TransmitReceive+0x82>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_SPI_TransmitReceive+0x82>
 8004ac4:	887b      	ldrh	r3, [r7, #2]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004ad0:	e14e      	b.n	8004d70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d003      	beq.n	8004ae6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2205      	movs	r2, #5
 8004ae2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	887a      	ldrh	r2, [r7, #2]
 8004af6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	887a      	ldrh	r2, [r7, #2]
 8004afc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	887a      	ldrh	r2, [r7, #2]
 8004b0e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b26:	2b40      	cmp	r3, #64	@ 0x40
 8004b28:	d007      	beq.n	8004b3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b42:	d178      	bne.n	8004c36 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_SPI_TransmitReceive+0x10a>
 8004b4c:	8b7b      	ldrh	r3, [r7, #26]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d166      	bne.n	8004c20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	881a      	ldrh	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	1c9a      	adds	r2, r3, #2
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b76:	e053      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d11b      	bne.n	8004bbe <HAL_SPI_TransmitReceive+0x176>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d016      	beq.n	8004bbe <HAL_SPI_TransmitReceive+0x176>
 8004b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d113      	bne.n	8004bbe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9a:	881a      	ldrh	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	1c9a      	adds	r2, r3, #2
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d119      	bne.n	8004c00 <HAL_SPI_TransmitReceive+0x1b8>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d014      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be0:	b292      	uxth	r2, r2
 8004be2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	1c9a      	adds	r2, r3, #2
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c00:	f7fe fb72 	bl	80032e8 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d807      	bhi.n	8004c20 <HAL_SPI_TransmitReceive+0x1d8>
 8004c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d003      	beq.n	8004c20 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004c1e:	e0a7      	b.n	8004d70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1a6      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x130>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1a1      	bne.n	8004b78 <HAL_SPI_TransmitReceive+0x130>
 8004c34:	e07c      	b.n	8004d30 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x1fc>
 8004c3e:	8b7b      	ldrh	r3, [r7, #26]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d16b      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	7812      	ldrb	r2, [r2, #0]
 8004c50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c6a:	e057      	b.n	8004d1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d11c      	bne.n	8004cb4 <HAL_SPI_TransmitReceive+0x26c>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d017      	beq.n	8004cb4 <HAL_SPI_TransmitReceive+0x26c>
 8004c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d114      	bne.n	8004cb4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	330c      	adds	r3, #12
 8004c94:	7812      	ldrb	r2, [r2, #0]
 8004c96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d119      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x2ae>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d014      	beq.n	8004cf6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cf6:	f7fe faf7 	bl	80032e8 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d803      	bhi.n	8004d0e <HAL_SPI_TransmitReceive+0x2c6>
 8004d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d102      	bne.n	8004d14 <HAL_SPI_TransmitReceive+0x2cc>
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d103      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004d1a:	e029      	b.n	8004d70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1a2      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x224>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d19d      	bne.n	8004c6c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f917 	bl	8004f68 <SPI_EndRxTxTransaction>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d006      	beq.n	8004d4e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004d4c:	e010      	b.n	8004d70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10b      	bne.n	8004d6e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	e000      	b.n	8004d70 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004d80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3730      	adds	r7, #48	@ 0x30
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d9c:	f7fe faa4 	bl	80032e8 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	4413      	add	r3, r2
 8004daa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dac:	f7fe fa9c 	bl	80032e8 <HAL_GetTick>
 8004db0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004db2:	4b39      	ldr	r3, [pc, #228]	@ (8004e98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	015b      	lsls	r3, r3, #5
 8004db8:	0d1b      	lsrs	r3, r3, #20
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dc2:	e054      	b.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d050      	beq.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dcc:	f7fe fa8c 	bl	80032e8 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d902      	bls.n	8004de2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d13d      	bne.n	8004e5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004df0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dfa:	d111      	bne.n	8004e20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e04:	d004      	beq.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0e:	d107      	bne.n	8004e20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e28:	d10f      	bne.n	8004e4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e017      	b.n	8004e8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4013      	ands	r3, r2
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	bf0c      	ite	eq
 8004e7e:	2301      	moveq	r3, #1
 8004e80:	2300      	movne	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d19b      	bne.n	8004dc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000010 	.word	0x20000010

08004e9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eb0:	d111      	bne.n	8004ed6 <SPI_EndRxTransaction+0x3a>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eba:	d004      	beq.n	8004ec6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ec4:	d107      	bne.n	8004ed6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ed4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ede:	d12a      	bne.n	8004f36 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee8:	d012      	beq.n	8004f10 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2180      	movs	r1, #128	@ 0x80
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff ff49 	bl	8004d8c <SPI_WaitFlagStateUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d02d      	beq.n	8004f5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e026      	b.n	8004f5e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2200      	movs	r2, #0
 8004f18:	2101      	movs	r1, #1
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff ff36 	bl	8004d8c <SPI_WaitFlagStateUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01a      	beq.n	8004f5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2a:	f043 0220 	orr.w	r2, r3, #32
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e013      	b.n	8004f5e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2101      	movs	r1, #1
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f7ff ff23 	bl	8004d8c <SPI_WaitFlagStateUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e000      	b.n	8004f5e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f74:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe4 <SPI_EndRxTxTransaction+0x7c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe8 <SPI_EndRxTxTransaction+0x80>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	0d5b      	lsrs	r3, r3, #21
 8004f80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f84:	fb02 f303 	mul.w	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f92:	d112      	bne.n	8004fba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2180      	movs	r1, #128	@ 0x80
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f7ff fef4 	bl	8004d8c <SPI_WaitFlagStateUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d016      	beq.n	8004fd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fae:	f043 0220 	orr.w	r2, r3, #32
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e00f      	b.n	8004fda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd0:	2b80      	cmp	r3, #128	@ 0x80
 8004fd2:	d0f2      	beq.n	8004fba <SPI_EndRxTxTransaction+0x52>
 8004fd4:	e000      	b.n	8004fd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004fd6:	bf00      	nop
  }

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000010 	.word	0x20000010
 8004fe8:	165e9f81 	.word	0x165e9f81

08004fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e041      	b.n	8005082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f839 	bl	800508a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f000 f9d8 	bl	80053e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d001      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e04e      	b.n	8005156 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a23      	ldr	r2, [pc, #140]	@ (8005164 <HAL_TIM_Base_Start_IT+0xc4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d022      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e2:	d01d      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005168 <HAL_TIM_Base_Start_IT+0xc8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d018      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1e      	ldr	r2, [pc, #120]	@ (800516c <HAL_TIM_Base_Start_IT+0xcc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d013      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005170 <HAL_TIM_Base_Start_IT+0xd0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00e      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1b      	ldr	r2, [pc, #108]	@ (8005174 <HAL_TIM_Base_Start_IT+0xd4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d009      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a19      	ldr	r2, [pc, #100]	@ (8005178 <HAL_TIM_Base_Start_IT+0xd8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d004      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x80>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a18      	ldr	r2, [pc, #96]	@ (800517c <HAL_TIM_Base_Start_IT+0xdc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d111      	bne.n	8005144 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b06      	cmp	r3, #6
 8005130:	d010      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0201 	orr.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005142:	e007      	b.n	8005154 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40010000 	.word	0x40010000
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800
 8005170:	40000c00 	.word	0x40000c00
 8005174:	40010400 	.word	0x40010400
 8005178:	40014000 	.word	0x40014000
 800517c:	40001800 	.word	0x40001800

08005180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d122      	bne.n	80051dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d11b      	bne.n	80051dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0202 	mvn.w	r2, #2
 80051ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f8ee 	bl	80053a4 <HAL_TIM_IC_CaptureCallback>
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f8e0 	bl	8005390 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f8f1 	bl	80053b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d122      	bne.n	8005230 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d11b      	bne.n	8005230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0204 	mvn.w	r2, #4
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f8c4 	bl	80053a4 <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f8b6 	bl	8005390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f8c7 	bl	80053b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b08      	cmp	r3, #8
 800523c:	d122      	bne.n	8005284 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b08      	cmp	r3, #8
 800524a:	d11b      	bne.n	8005284 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0208 	mvn.w	r2, #8
 8005254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2204      	movs	r2, #4
 800525a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f89a 	bl	80053a4 <HAL_TIM_IC_CaptureCallback>
 8005270:	e005      	b.n	800527e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f88c 	bl	8005390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f89d 	bl	80053b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b10      	cmp	r3, #16
 8005290:	d122      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b10      	cmp	r3, #16
 800529e:	d11b      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0210 	mvn.w	r2, #16
 80052a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2208      	movs	r2, #8
 80052ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f870 	bl	80053a4 <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f862 	bl	8005390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f873 	bl	80053b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d10e      	bne.n	8005304 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0201 	mvn.w	r2, #1
 80052fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fd fd3e 	bl	8002d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530e:	2b80      	cmp	r3, #128	@ 0x80
 8005310:	d10e      	bne.n	8005330 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531c:	2b80      	cmp	r3, #128	@ 0x80
 800531e:	d107      	bne.n	8005330 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f902 	bl	8005534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800533a:	2b40      	cmp	r3, #64	@ 0x40
 800533c:	d10e      	bne.n	800535c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005348:	2b40      	cmp	r3, #64	@ 0x40
 800534a:	d107      	bne.n	800535c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f838 	bl	80053cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b20      	cmp	r3, #32
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b20      	cmp	r3, #32
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0220 	mvn.w	r2, #32
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f8cc 	bl	8005520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a40      	ldr	r2, [pc, #256]	@ (80054f4 <TIM_Base_SetConfig+0x114>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fe:	d00f      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a3d      	ldr	r2, [pc, #244]	@ (80054f8 <TIM_Base_SetConfig+0x118>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00b      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a3c      	ldr	r2, [pc, #240]	@ (80054fc <TIM_Base_SetConfig+0x11c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a3b      	ldr	r2, [pc, #236]	@ (8005500 <TIM_Base_SetConfig+0x120>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a3a      	ldr	r2, [pc, #232]	@ (8005504 <TIM_Base_SetConfig+0x124>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d108      	bne.n	8005432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2f      	ldr	r2, [pc, #188]	@ (80054f4 <TIM_Base_SetConfig+0x114>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d02b      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005440:	d027      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2c      	ldr	r2, [pc, #176]	@ (80054f8 <TIM_Base_SetConfig+0x118>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d023      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a2b      	ldr	r2, [pc, #172]	@ (80054fc <TIM_Base_SetConfig+0x11c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01f      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2a      	ldr	r2, [pc, #168]	@ (8005500 <TIM_Base_SetConfig+0x120>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01b      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a29      	ldr	r2, [pc, #164]	@ (8005504 <TIM_Base_SetConfig+0x124>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d017      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a28      	ldr	r2, [pc, #160]	@ (8005508 <TIM_Base_SetConfig+0x128>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a27      	ldr	r2, [pc, #156]	@ (800550c <TIM_Base_SetConfig+0x12c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00f      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a26      	ldr	r2, [pc, #152]	@ (8005510 <TIM_Base_SetConfig+0x130>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a25      	ldr	r2, [pc, #148]	@ (8005514 <TIM_Base_SetConfig+0x134>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a24      	ldr	r2, [pc, #144]	@ (8005518 <TIM_Base_SetConfig+0x138>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a23      	ldr	r2, [pc, #140]	@ (800551c <TIM_Base_SetConfig+0x13c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a0a      	ldr	r2, [pc, #40]	@ (80054f4 <TIM_Base_SetConfig+0x114>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_Base_SetConfig+0xf8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005504 <TIM_Base_SetConfig+0x124>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d103      	bne.n	80054e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	615a      	str	r2, [r3, #20]
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40010400 	.word	0x40010400
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800
 8005514:	40001800 	.word	0x40001800
 8005518:	40001c00 	.word	0x40001c00
 800551c:	40002000 	.word	0x40002000

08005520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e03f      	b.n	80055da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fd fc8e 	bl	8002e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2224      	movs	r2, #36	@ 0x24
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800558a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f929 	bl	80057e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695a      	ldr	r2, [r3, #20]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b08a      	sub	sp, #40	@ 0x28
 80055e6:	af02      	add	r7, sp, #8
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	603b      	str	r3, [r7, #0]
 80055ee:	4613      	mov	r3, r2
 80055f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d17c      	bne.n	80056fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <HAL_UART_Transmit+0x2c>
 8005608:	88fb      	ldrh	r3, [r7, #6]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e075      	b.n	80056fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_UART_Transmit+0x3e>
 800561c:	2302      	movs	r3, #2
 800561e:	e06e      	b.n	80056fe <HAL_UART_Transmit+0x11c>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2221      	movs	r2, #33	@ 0x21
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005636:	f7fd fe57 	bl	80032e8 <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	88fa      	ldrh	r2, [r7, #6]
 8005646:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005650:	d108      	bne.n	8005664 <HAL_UART_Transmit+0x82>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	e003      	b.n	800566c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005668:	2300      	movs	r3, #0
 800566a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8005674:	e02a      	b.n	80056cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2200      	movs	r2, #0
 800567e:	2180      	movs	r1, #128	@ 0x80
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f840 	bl	8005706 <UART_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e036      	b.n	80056fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10b      	bne.n	80056ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	3302      	adds	r3, #2
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	e007      	b.n	80056be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	3301      	adds	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1cf      	bne.n	8005676 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2200      	movs	r2, #0
 80056de:	2140      	movs	r1, #64	@ 0x40
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f810 	bl	8005706 <UART_WaitOnFlagUntilTimeout>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e006      	b.n	80056fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e000      	b.n	80056fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b090      	sub	sp, #64	@ 0x40
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	4613      	mov	r3, r2
 8005714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005716:	e050      	b.n	80057ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d04c      	beq.n	80057ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0x30>
 8005726:	f7fd fddf 	bl	80032e8 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005732:	429a      	cmp	r2, r3
 8005734:	d241      	bcs.n	80057ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800574c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005756:	637a      	str	r2, [r7, #52]	@ 0x34
 8005758:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800575c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e5      	bne.n	8005736 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3314      	adds	r3, #20
 8005770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	613b      	str	r3, [r7, #16]
   return(result);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f023 0301 	bic.w	r3, r3, #1
 8005780:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3314      	adds	r3, #20
 8005788:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800578a:	623a      	str	r2, [r7, #32]
 800578c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	69f9      	ldr	r1, [r7, #28]
 8005790:	6a3a      	ldr	r2, [r7, #32]
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	61bb      	str	r3, [r7, #24]
   return(result);
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e5      	bne.n	800576a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e00f      	b.n	80057da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4013      	ands	r3, r2
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	bf0c      	ite	eq
 80057ca:	2301      	moveq	r3, #1
 80057cc:	2300      	movne	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d09f      	beq.n	8005718 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3740      	adds	r7, #64	@ 0x40
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e8:	b0c0      	sub	sp, #256	@ 0x100
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005800:	68d9      	ldr	r1, [r3, #12]
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	ea40 0301 	orr.w	r3, r0, r1
 800580c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	431a      	orrs	r2, r3
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	431a      	orrs	r2, r3
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800583c:	f021 010c 	bic.w	r1, r1, #12
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800584a:	430b      	orrs	r3, r1
 800584c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800584e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585e:	6999      	ldr	r1, [r3, #24]
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	ea40 0301 	orr.w	r3, r0, r1
 800586a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b8f      	ldr	r3, [pc, #572]	@ (8005ab0 <UART_SetConfig+0x2cc>)
 8005874:	429a      	cmp	r2, r3
 8005876:	d005      	beq.n	8005884 <UART_SetConfig+0xa0>
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ab4 <UART_SetConfig+0x2d0>)
 8005880:	429a      	cmp	r2, r3
 8005882:	d104      	bne.n	800588e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7fe f8f6 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
 8005888:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800588c:	e003      	b.n	8005896 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800588e:	f7fe f8dd 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8005892:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058a0:	f040 810c 	bne.w	8005abc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a8:	2200      	movs	r2, #0
 80058aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058b6:	4622      	mov	r2, r4
 80058b8:	462b      	mov	r3, r5
 80058ba:	1891      	adds	r1, r2, r2
 80058bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058be:	415b      	adcs	r3, r3
 80058c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058c6:	4621      	mov	r1, r4
 80058c8:	eb12 0801 	adds.w	r8, r2, r1
 80058cc:	4629      	mov	r1, r5
 80058ce:	eb43 0901 	adc.w	r9, r3, r1
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058e6:	4690      	mov	r8, r2
 80058e8:	4699      	mov	r9, r3
 80058ea:	4623      	mov	r3, r4
 80058ec:	eb18 0303 	adds.w	r3, r8, r3
 80058f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058f4:	462b      	mov	r3, r5
 80058f6:	eb49 0303 	adc.w	r3, r9, r3
 80058fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800590a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800590e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005912:	460b      	mov	r3, r1
 8005914:	18db      	adds	r3, r3, r3
 8005916:	653b      	str	r3, [r7, #80]	@ 0x50
 8005918:	4613      	mov	r3, r2
 800591a:	eb42 0303 	adc.w	r3, r2, r3
 800591e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005920:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005924:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005928:	f7fb f9ae 	bl	8000c88 <__aeabi_uldivmod>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4b61      	ldr	r3, [pc, #388]	@ (8005ab8 <UART_SetConfig+0x2d4>)
 8005932:	fba3 2302 	umull	r2, r3, r3, r2
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	011c      	lsls	r4, r3, #4
 800593a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800593e:	2200      	movs	r2, #0
 8005940:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005944:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005948:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800594c:	4642      	mov	r2, r8
 800594e:	464b      	mov	r3, r9
 8005950:	1891      	adds	r1, r2, r2
 8005952:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005954:	415b      	adcs	r3, r3
 8005956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005958:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800595c:	4641      	mov	r1, r8
 800595e:	eb12 0a01 	adds.w	sl, r2, r1
 8005962:	4649      	mov	r1, r9
 8005964:	eb43 0b01 	adc.w	fp, r3, r1
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005974:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800597c:	4692      	mov	sl, r2
 800597e:	469b      	mov	fp, r3
 8005980:	4643      	mov	r3, r8
 8005982:	eb1a 0303 	adds.w	r3, sl, r3
 8005986:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800598a:	464b      	mov	r3, r9
 800598c:	eb4b 0303 	adc.w	r3, fp, r3
 8005990:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059a8:	460b      	mov	r3, r1
 80059aa:	18db      	adds	r3, r3, r3
 80059ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80059ae:	4613      	mov	r3, r2
 80059b0:	eb42 0303 	adc.w	r3, r2, r3
 80059b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80059be:	f7fb f963 	bl	8000c88 <__aeabi_uldivmod>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4611      	mov	r1, r2
 80059c8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ab8 <UART_SetConfig+0x2d4>)
 80059ca:	fba3 2301 	umull	r2, r3, r3, r1
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	2264      	movs	r2, #100	@ 0x64
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
 80059d6:	1acb      	subs	r3, r1, r3
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80059de:	4b36      	ldr	r3, [pc, #216]	@ (8005ab8 <UART_SetConfig+0x2d4>)
 80059e0:	fba3 2302 	umull	r2, r3, r3, r2
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80059ec:	441c      	add	r4, r3
 80059ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80059fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	1891      	adds	r1, r2, r2
 8005a06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a08:	415b      	adcs	r3, r3
 8005a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a10:	4641      	mov	r1, r8
 8005a12:	1851      	adds	r1, r2, r1
 8005a14:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a16:	4649      	mov	r1, r9
 8005a18:	414b      	adcs	r3, r1
 8005a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a28:	4659      	mov	r1, fp
 8005a2a:	00cb      	lsls	r3, r1, #3
 8005a2c:	4651      	mov	r1, sl
 8005a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a32:	4651      	mov	r1, sl
 8005a34:	00ca      	lsls	r2, r1, #3
 8005a36:	4610      	mov	r0, r2
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	189b      	adds	r3, r3, r2
 8005a40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a44:	464b      	mov	r3, r9
 8005a46:	460a      	mov	r2, r1
 8005a48:	eb42 0303 	adc.w	r3, r2, r3
 8005a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a64:	460b      	mov	r3, r1
 8005a66:	18db      	adds	r3, r3, r3
 8005a68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	eb42 0303 	adc.w	r3, r2, r3
 8005a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a7a:	f7fb f905 	bl	8000c88 <__aeabi_uldivmod>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <UART_SetConfig+0x2d4>)
 8005a84:	fba3 1302 	umull	r1, r3, r3, r2
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	2164      	movs	r1, #100	@ 0x64
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	3332      	adds	r3, #50	@ 0x32
 8005a96:	4a08      	ldr	r2, [pc, #32]	@ (8005ab8 <UART_SetConfig+0x2d4>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	f003 0207 	and.w	r2, r3, #7
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4422      	add	r2, r4
 8005aaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005aac:	e106      	b.n	8005cbc <UART_SetConfig+0x4d8>
 8005aae:	bf00      	nop
 8005ab0:	40011000 	.word	0x40011000
 8005ab4:	40011400 	.word	0x40011400
 8005ab8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ac6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005aca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ace:	4642      	mov	r2, r8
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	1891      	adds	r1, r2, r2
 8005ad4:	6239      	str	r1, [r7, #32]
 8005ad6:	415b      	adcs	r3, r3
 8005ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ade:	4641      	mov	r1, r8
 8005ae0:	1854      	adds	r4, r2, r1
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	eb43 0501 	adc.w	r5, r3, r1
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	00eb      	lsls	r3, r5, #3
 8005af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005af6:	00e2      	lsls	r2, r4, #3
 8005af8:	4614      	mov	r4, r2
 8005afa:	461d      	mov	r5, r3
 8005afc:	4643      	mov	r3, r8
 8005afe:	18e3      	adds	r3, r4, r3
 8005b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b04:	464b      	mov	r3, r9
 8005b06:	eb45 0303 	adc.w	r3, r5, r3
 8005b0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	008b      	lsls	r3, r1, #2
 8005b2e:	4621      	mov	r1, r4
 8005b30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b34:	4621      	mov	r1, r4
 8005b36:	008a      	lsls	r2, r1, #2
 8005b38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b3c:	f7fb f8a4 	bl	8000c88 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4b60      	ldr	r3, [pc, #384]	@ (8005cc8 <UART_SetConfig+0x4e4>)
 8005b46:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	011c      	lsls	r4, r3, #4
 8005b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b60:	4642      	mov	r2, r8
 8005b62:	464b      	mov	r3, r9
 8005b64:	1891      	adds	r1, r2, r2
 8005b66:	61b9      	str	r1, [r7, #24]
 8005b68:	415b      	adcs	r3, r3
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b70:	4641      	mov	r1, r8
 8005b72:	1851      	adds	r1, r2, r1
 8005b74:	6139      	str	r1, [r7, #16]
 8005b76:	4649      	mov	r1, r9
 8005b78:	414b      	adcs	r3, r1
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b88:	4659      	mov	r1, fp
 8005b8a:	00cb      	lsls	r3, r1, #3
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b92:	4651      	mov	r1, sl
 8005b94:	00ca      	lsls	r2, r1, #3
 8005b96:	4610      	mov	r0, r2
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	189b      	adds	r3, r3, r2
 8005ba0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	eb42 0303 	adc.w	r3, r2, r3
 8005bac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005bc8:	4649      	mov	r1, r9
 8005bca:	008b      	lsls	r3, r1, #2
 8005bcc:	4641      	mov	r1, r8
 8005bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	008a      	lsls	r2, r1, #2
 8005bd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005bda:	f7fb f855 	bl	8000c88 <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4611      	mov	r1, r2
 8005be4:	4b38      	ldr	r3, [pc, #224]	@ (8005cc8 <UART_SetConfig+0x4e4>)
 8005be6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	2264      	movs	r2, #100	@ 0x64
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	1acb      	subs	r3, r1, r3
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	3332      	adds	r3, #50	@ 0x32
 8005bf8:	4a33      	ldr	r2, [pc, #204]	@ (8005cc8 <UART_SetConfig+0x4e4>)
 8005bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c04:	441c      	add	r4, r3
 8005c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c14:	4642      	mov	r2, r8
 8005c16:	464b      	mov	r3, r9
 8005c18:	1891      	adds	r1, r2, r2
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	415b      	adcs	r3, r3
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c24:	4641      	mov	r1, r8
 8005c26:	1851      	adds	r1, r2, r1
 8005c28:	6039      	str	r1, [r7, #0]
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	414b      	adcs	r3, r1
 8005c2e:	607b      	str	r3, [r7, #4]
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c3c:	4659      	mov	r1, fp
 8005c3e:	00cb      	lsls	r3, r1, #3
 8005c40:	4651      	mov	r1, sl
 8005c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c46:	4651      	mov	r1, sl
 8005c48:	00ca      	lsls	r2, r1, #3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4642      	mov	r2, r8
 8005c52:	189b      	adds	r3, r3, r2
 8005c54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c56:	464b      	mov	r3, r9
 8005c58:	460a      	mov	r2, r1
 8005c5a:	eb42 0303 	adc.w	r3, r2, r3
 8005c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c78:	4649      	mov	r1, r9
 8005c7a:	008b      	lsls	r3, r1, #2
 8005c7c:	4641      	mov	r1, r8
 8005c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c82:	4641      	mov	r1, r8
 8005c84:	008a      	lsls	r2, r1, #2
 8005c86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c8a:	f7fa fffd 	bl	8000c88 <__aeabi_uldivmod>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc8 <UART_SetConfig+0x4e4>)
 8005c94:	fba3 1302 	umull	r1, r3, r3, r2
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	2164      	movs	r1, #100	@ 0x64
 8005c9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	3332      	adds	r3, #50	@ 0x32
 8005ca6:	4a08      	ldr	r2, [pc, #32]	@ (8005cc8 <UART_SetConfig+0x4e4>)
 8005ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cac:	095b      	lsrs	r3, r3, #5
 8005cae:	f003 020f 	and.w	r2, r3, #15
 8005cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4422      	add	r2, r4
 8005cba:	609a      	str	r2, [r3, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc8:	51eb851f 	.word	0x51eb851f

08005ccc <malloc>:
 8005ccc:	4b02      	ldr	r3, [pc, #8]	@ (8005cd8 <malloc+0xc>)
 8005cce:	4601      	mov	r1, r0
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	f000 b82d 	b.w	8005d30 <_malloc_r>
 8005cd6:	bf00      	nop
 8005cd8:	20000028 	.word	0x20000028

08005cdc <free>:
 8005cdc:	4b02      	ldr	r3, [pc, #8]	@ (8005ce8 <free+0xc>)
 8005cde:	4601      	mov	r1, r0
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	f001 bd19 	b.w	8007718 <_free_r>
 8005ce6:	bf00      	nop
 8005ce8:	20000028 	.word	0x20000028

08005cec <sbrk_aligned>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	4e0f      	ldr	r6, [pc, #60]	@ (8005d2c <sbrk_aligned+0x40>)
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	6831      	ldr	r1, [r6, #0]
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	b911      	cbnz	r1, 8005cfe <sbrk_aligned+0x12>
 8005cf8:	f000 fe64 	bl	80069c4 <_sbrk_r>
 8005cfc:	6030      	str	r0, [r6, #0]
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4628      	mov	r0, r5
 8005d02:	f000 fe5f 	bl	80069c4 <_sbrk_r>
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	d103      	bne.n	8005d12 <sbrk_aligned+0x26>
 8005d0a:	f04f 34ff 	mov.w	r4, #4294967295
 8005d0e:	4620      	mov	r0, r4
 8005d10:	bd70      	pop	{r4, r5, r6, pc}
 8005d12:	1cc4      	adds	r4, r0, #3
 8005d14:	f024 0403 	bic.w	r4, r4, #3
 8005d18:	42a0      	cmp	r0, r4
 8005d1a:	d0f8      	beq.n	8005d0e <sbrk_aligned+0x22>
 8005d1c:	1a21      	subs	r1, r4, r0
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 fe50 	bl	80069c4 <_sbrk_r>
 8005d24:	3001      	adds	r0, #1
 8005d26:	d1f2      	bne.n	8005d0e <sbrk_aligned+0x22>
 8005d28:	e7ef      	b.n	8005d0a <sbrk_aligned+0x1e>
 8005d2a:	bf00      	nop
 8005d2c:	20000528 	.word	0x20000528

08005d30 <_malloc_r>:
 8005d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d34:	1ccd      	adds	r5, r1, #3
 8005d36:	f025 0503 	bic.w	r5, r5, #3
 8005d3a:	3508      	adds	r5, #8
 8005d3c:	2d0c      	cmp	r5, #12
 8005d3e:	bf38      	it	cc
 8005d40:	250c      	movcc	r5, #12
 8005d42:	2d00      	cmp	r5, #0
 8005d44:	4606      	mov	r6, r0
 8005d46:	db01      	blt.n	8005d4c <_malloc_r+0x1c>
 8005d48:	42a9      	cmp	r1, r5
 8005d4a:	d904      	bls.n	8005d56 <_malloc_r+0x26>
 8005d4c:	230c      	movs	r3, #12
 8005d4e:	6033      	str	r3, [r6, #0]
 8005d50:	2000      	movs	r0, #0
 8005d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e2c <_malloc_r+0xfc>
 8005d5a:	f000 f869 	bl	8005e30 <__malloc_lock>
 8005d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d62:	461c      	mov	r4, r3
 8005d64:	bb44      	cbnz	r4, 8005db8 <_malloc_r+0x88>
 8005d66:	4629      	mov	r1, r5
 8005d68:	4630      	mov	r0, r6
 8005d6a:	f7ff ffbf 	bl	8005cec <sbrk_aligned>
 8005d6e:	1c43      	adds	r3, r0, #1
 8005d70:	4604      	mov	r4, r0
 8005d72:	d158      	bne.n	8005e26 <_malloc_r+0xf6>
 8005d74:	f8d8 4000 	ldr.w	r4, [r8]
 8005d78:	4627      	mov	r7, r4
 8005d7a:	2f00      	cmp	r7, #0
 8005d7c:	d143      	bne.n	8005e06 <_malloc_r+0xd6>
 8005d7e:	2c00      	cmp	r4, #0
 8005d80:	d04b      	beq.n	8005e1a <_malloc_r+0xea>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	4639      	mov	r1, r7
 8005d86:	4630      	mov	r0, r6
 8005d88:	eb04 0903 	add.w	r9, r4, r3
 8005d8c:	f000 fe1a 	bl	80069c4 <_sbrk_r>
 8005d90:	4581      	cmp	r9, r0
 8005d92:	d142      	bne.n	8005e1a <_malloc_r+0xea>
 8005d94:	6821      	ldr	r1, [r4, #0]
 8005d96:	1a6d      	subs	r5, r5, r1
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff ffa6 	bl	8005cec <sbrk_aligned>
 8005da0:	3001      	adds	r0, #1
 8005da2:	d03a      	beq.n	8005e1a <_malloc_r+0xea>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	442b      	add	r3, r5
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	f8d8 3000 	ldr.w	r3, [r8]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	bb62      	cbnz	r2, 8005e0c <_malloc_r+0xdc>
 8005db2:	f8c8 7000 	str.w	r7, [r8]
 8005db6:	e00f      	b.n	8005dd8 <_malloc_r+0xa8>
 8005db8:	6822      	ldr	r2, [r4, #0]
 8005dba:	1b52      	subs	r2, r2, r5
 8005dbc:	d420      	bmi.n	8005e00 <_malloc_r+0xd0>
 8005dbe:	2a0b      	cmp	r2, #11
 8005dc0:	d917      	bls.n	8005df2 <_malloc_r+0xc2>
 8005dc2:	1961      	adds	r1, r4, r5
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	6025      	str	r5, [r4, #0]
 8005dc8:	bf18      	it	ne
 8005dca:	6059      	strne	r1, [r3, #4]
 8005dcc:	6863      	ldr	r3, [r4, #4]
 8005dce:	bf08      	it	eq
 8005dd0:	f8c8 1000 	streq.w	r1, [r8]
 8005dd4:	5162      	str	r2, [r4, r5]
 8005dd6:	604b      	str	r3, [r1, #4]
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f000 f82f 	bl	8005e3c <__malloc_unlock>
 8005dde:	f104 000b 	add.w	r0, r4, #11
 8005de2:	1d23      	adds	r3, r4, #4
 8005de4:	f020 0007 	bic.w	r0, r0, #7
 8005de8:	1ac2      	subs	r2, r0, r3
 8005dea:	bf1c      	itt	ne
 8005dec:	1a1b      	subne	r3, r3, r0
 8005dee:	50a3      	strne	r3, [r4, r2]
 8005df0:	e7af      	b.n	8005d52 <_malloc_r+0x22>
 8005df2:	6862      	ldr	r2, [r4, #4]
 8005df4:	42a3      	cmp	r3, r4
 8005df6:	bf0c      	ite	eq
 8005df8:	f8c8 2000 	streq.w	r2, [r8]
 8005dfc:	605a      	strne	r2, [r3, #4]
 8005dfe:	e7eb      	b.n	8005dd8 <_malloc_r+0xa8>
 8005e00:	4623      	mov	r3, r4
 8005e02:	6864      	ldr	r4, [r4, #4]
 8005e04:	e7ae      	b.n	8005d64 <_malloc_r+0x34>
 8005e06:	463c      	mov	r4, r7
 8005e08:	687f      	ldr	r7, [r7, #4]
 8005e0a:	e7b6      	b.n	8005d7a <_malloc_r+0x4a>
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	42a3      	cmp	r3, r4
 8005e12:	d1fb      	bne.n	8005e0c <_malloc_r+0xdc>
 8005e14:	2300      	movs	r3, #0
 8005e16:	6053      	str	r3, [r2, #4]
 8005e18:	e7de      	b.n	8005dd8 <_malloc_r+0xa8>
 8005e1a:	230c      	movs	r3, #12
 8005e1c:	6033      	str	r3, [r6, #0]
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f000 f80c 	bl	8005e3c <__malloc_unlock>
 8005e24:	e794      	b.n	8005d50 <_malloc_r+0x20>
 8005e26:	6005      	str	r5, [r0, #0]
 8005e28:	e7d6      	b.n	8005dd8 <_malloc_r+0xa8>
 8005e2a:	bf00      	nop
 8005e2c:	2000052c 	.word	0x2000052c

08005e30 <__malloc_lock>:
 8005e30:	4801      	ldr	r0, [pc, #4]	@ (8005e38 <__malloc_lock+0x8>)
 8005e32:	f000 be14 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 8005e36:	bf00      	nop
 8005e38:	20000670 	.word	0x20000670

08005e3c <__malloc_unlock>:
 8005e3c:	4801      	ldr	r0, [pc, #4]	@ (8005e44 <__malloc_unlock+0x8>)
 8005e3e:	f000 be0f 	b.w	8006a60 <__retarget_lock_release_recursive>
 8005e42:	bf00      	nop
 8005e44:	20000670 	.word	0x20000670

08005e48 <__cvt>:
 8005e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	ec57 6b10 	vmov	r6, r7, d0
 8005e50:	2f00      	cmp	r7, #0
 8005e52:	460c      	mov	r4, r1
 8005e54:	4619      	mov	r1, r3
 8005e56:	463b      	mov	r3, r7
 8005e58:	bfbb      	ittet	lt
 8005e5a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e5e:	461f      	movlt	r7, r3
 8005e60:	2300      	movge	r3, #0
 8005e62:	232d      	movlt	r3, #45	@ 0x2d
 8005e64:	700b      	strb	r3, [r1, #0]
 8005e66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e68:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e6c:	4691      	mov	r9, r2
 8005e6e:	f023 0820 	bic.w	r8, r3, #32
 8005e72:	bfbc      	itt	lt
 8005e74:	4632      	movlt	r2, r6
 8005e76:	4616      	movlt	r6, r2
 8005e78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e7c:	d005      	beq.n	8005e8a <__cvt+0x42>
 8005e7e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e82:	d100      	bne.n	8005e86 <__cvt+0x3e>
 8005e84:	3401      	adds	r4, #1
 8005e86:	2102      	movs	r1, #2
 8005e88:	e000      	b.n	8005e8c <__cvt+0x44>
 8005e8a:	2103      	movs	r1, #3
 8005e8c:	ab03      	add	r3, sp, #12
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	ab02      	add	r3, sp, #8
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	ec47 6b10 	vmov	d0, r6, r7
 8005e98:	4653      	mov	r3, sl
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	f000 fe78 	bl	8006b90 <_dtoa_r>
 8005ea0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ea4:	4605      	mov	r5, r0
 8005ea6:	d119      	bne.n	8005edc <__cvt+0x94>
 8005ea8:	f019 0f01 	tst.w	r9, #1
 8005eac:	d00e      	beq.n	8005ecc <__cvt+0x84>
 8005eae:	eb00 0904 	add.w	r9, r0, r4
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	4639      	mov	r1, r7
 8005eba:	f7fa fe25 	bl	8000b08 <__aeabi_dcmpeq>
 8005ebe:	b108      	cbz	r0, 8005ec4 <__cvt+0x7c>
 8005ec0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ec4:	2230      	movs	r2, #48	@ 0x30
 8005ec6:	9b03      	ldr	r3, [sp, #12]
 8005ec8:	454b      	cmp	r3, r9
 8005eca:	d31e      	bcc.n	8005f0a <__cvt+0xc2>
 8005ecc:	9b03      	ldr	r3, [sp, #12]
 8005ece:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ed0:	1b5b      	subs	r3, r3, r5
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	b004      	add	sp, #16
 8005ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005edc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ee0:	eb00 0904 	add.w	r9, r0, r4
 8005ee4:	d1e5      	bne.n	8005eb2 <__cvt+0x6a>
 8005ee6:	7803      	ldrb	r3, [r0, #0]
 8005ee8:	2b30      	cmp	r3, #48	@ 0x30
 8005eea:	d10a      	bne.n	8005f02 <__cvt+0xba>
 8005eec:	2200      	movs	r2, #0
 8005eee:	2300      	movs	r3, #0
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	4639      	mov	r1, r7
 8005ef4:	f7fa fe08 	bl	8000b08 <__aeabi_dcmpeq>
 8005ef8:	b918      	cbnz	r0, 8005f02 <__cvt+0xba>
 8005efa:	f1c4 0401 	rsb	r4, r4, #1
 8005efe:	f8ca 4000 	str.w	r4, [sl]
 8005f02:	f8da 3000 	ldr.w	r3, [sl]
 8005f06:	4499      	add	r9, r3
 8005f08:	e7d3      	b.n	8005eb2 <__cvt+0x6a>
 8005f0a:	1c59      	adds	r1, r3, #1
 8005f0c:	9103      	str	r1, [sp, #12]
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	e7d9      	b.n	8005ec6 <__cvt+0x7e>

08005f12 <__exponent>:
 8005f12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f14:	2900      	cmp	r1, #0
 8005f16:	bfba      	itte	lt
 8005f18:	4249      	neglt	r1, r1
 8005f1a:	232d      	movlt	r3, #45	@ 0x2d
 8005f1c:	232b      	movge	r3, #43	@ 0x2b
 8005f1e:	2909      	cmp	r1, #9
 8005f20:	7002      	strb	r2, [r0, #0]
 8005f22:	7043      	strb	r3, [r0, #1]
 8005f24:	dd29      	ble.n	8005f7a <__exponent+0x68>
 8005f26:	f10d 0307 	add.w	r3, sp, #7
 8005f2a:	461d      	mov	r5, r3
 8005f2c:	270a      	movs	r7, #10
 8005f2e:	461a      	mov	r2, r3
 8005f30:	fbb1 f6f7 	udiv	r6, r1, r7
 8005f34:	fb07 1416 	mls	r4, r7, r6, r1
 8005f38:	3430      	adds	r4, #48	@ 0x30
 8005f3a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005f3e:	460c      	mov	r4, r1
 8005f40:	2c63      	cmp	r4, #99	@ 0x63
 8005f42:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f46:	4631      	mov	r1, r6
 8005f48:	dcf1      	bgt.n	8005f2e <__exponent+0x1c>
 8005f4a:	3130      	adds	r1, #48	@ 0x30
 8005f4c:	1e94      	subs	r4, r2, #2
 8005f4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f52:	1c41      	adds	r1, r0, #1
 8005f54:	4623      	mov	r3, r4
 8005f56:	42ab      	cmp	r3, r5
 8005f58:	d30a      	bcc.n	8005f70 <__exponent+0x5e>
 8005f5a:	f10d 0309 	add.w	r3, sp, #9
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	42ac      	cmp	r4, r5
 8005f62:	bf88      	it	hi
 8005f64:	2300      	movhi	r3, #0
 8005f66:	3302      	adds	r3, #2
 8005f68:	4403      	add	r3, r0
 8005f6a:	1a18      	subs	r0, r3, r0
 8005f6c:	b003      	add	sp, #12
 8005f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f70:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f74:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f78:	e7ed      	b.n	8005f56 <__exponent+0x44>
 8005f7a:	2330      	movs	r3, #48	@ 0x30
 8005f7c:	3130      	adds	r1, #48	@ 0x30
 8005f7e:	7083      	strb	r3, [r0, #2]
 8005f80:	70c1      	strb	r1, [r0, #3]
 8005f82:	1d03      	adds	r3, r0, #4
 8005f84:	e7f1      	b.n	8005f6a <__exponent+0x58>
	...

08005f88 <_printf_float>:
 8005f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	b08d      	sub	sp, #52	@ 0x34
 8005f8e:	460c      	mov	r4, r1
 8005f90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f94:	4616      	mov	r6, r2
 8005f96:	461f      	mov	r7, r3
 8005f98:	4605      	mov	r5, r0
 8005f9a:	f000 fcdb 	bl	8006954 <_localeconv_r>
 8005f9e:	6803      	ldr	r3, [r0, #0]
 8005fa0:	9304      	str	r3, [sp, #16]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fa f984 	bl	80002b0 <strlen>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fac:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb0:	9005      	str	r0, [sp, #20]
 8005fb2:	3307      	adds	r3, #7
 8005fb4:	f023 0307 	bic.w	r3, r3, #7
 8005fb8:	f103 0208 	add.w	r2, r3, #8
 8005fbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005fc0:	f8d4 b000 	ldr.w	fp, [r4]
 8005fc4:	f8c8 2000 	str.w	r2, [r8]
 8005fc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fcc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005fd0:	9307      	str	r3, [sp, #28]
 8005fd2:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fd6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005fda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fde:	4b9c      	ldr	r3, [pc, #624]	@ (8006250 <_printf_float+0x2c8>)
 8005fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe4:	f7fa fdc2 	bl	8000b6c <__aeabi_dcmpun>
 8005fe8:	bb70      	cbnz	r0, 8006048 <_printf_float+0xc0>
 8005fea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fee:	4b98      	ldr	r3, [pc, #608]	@ (8006250 <_printf_float+0x2c8>)
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff4:	f7fa fd9c 	bl	8000b30 <__aeabi_dcmple>
 8005ff8:	bb30      	cbnz	r0, 8006048 <_printf_float+0xc0>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4640      	mov	r0, r8
 8006000:	4649      	mov	r1, r9
 8006002:	f7fa fd8b 	bl	8000b1c <__aeabi_dcmplt>
 8006006:	b110      	cbz	r0, 800600e <_printf_float+0x86>
 8006008:	232d      	movs	r3, #45	@ 0x2d
 800600a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800600e:	4a91      	ldr	r2, [pc, #580]	@ (8006254 <_printf_float+0x2cc>)
 8006010:	4b91      	ldr	r3, [pc, #580]	@ (8006258 <_printf_float+0x2d0>)
 8006012:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006016:	bf94      	ite	ls
 8006018:	4690      	movls	r8, r2
 800601a:	4698      	movhi	r8, r3
 800601c:	2303      	movs	r3, #3
 800601e:	6123      	str	r3, [r4, #16]
 8006020:	f02b 0304 	bic.w	r3, fp, #4
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	f04f 0900 	mov.w	r9, #0
 800602a:	9700      	str	r7, [sp, #0]
 800602c:	4633      	mov	r3, r6
 800602e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006030:	4621      	mov	r1, r4
 8006032:	4628      	mov	r0, r5
 8006034:	f000 f9d2 	bl	80063dc <_printf_common>
 8006038:	3001      	adds	r0, #1
 800603a:	f040 808d 	bne.w	8006158 <_printf_float+0x1d0>
 800603e:	f04f 30ff 	mov.w	r0, #4294967295
 8006042:	b00d      	add	sp, #52	@ 0x34
 8006044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006048:	4642      	mov	r2, r8
 800604a:	464b      	mov	r3, r9
 800604c:	4640      	mov	r0, r8
 800604e:	4649      	mov	r1, r9
 8006050:	f7fa fd8c 	bl	8000b6c <__aeabi_dcmpun>
 8006054:	b140      	cbz	r0, 8006068 <_printf_float+0xe0>
 8006056:	464b      	mov	r3, r9
 8006058:	2b00      	cmp	r3, #0
 800605a:	bfbc      	itt	lt
 800605c:	232d      	movlt	r3, #45	@ 0x2d
 800605e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006062:	4a7e      	ldr	r2, [pc, #504]	@ (800625c <_printf_float+0x2d4>)
 8006064:	4b7e      	ldr	r3, [pc, #504]	@ (8006260 <_printf_float+0x2d8>)
 8006066:	e7d4      	b.n	8006012 <_printf_float+0x8a>
 8006068:	6863      	ldr	r3, [r4, #4]
 800606a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800606e:	9206      	str	r2, [sp, #24]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	d13b      	bne.n	80060ec <_printf_float+0x164>
 8006074:	2306      	movs	r3, #6
 8006076:	6063      	str	r3, [r4, #4]
 8006078:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800607c:	2300      	movs	r3, #0
 800607e:	6022      	str	r2, [r4, #0]
 8006080:	9303      	str	r3, [sp, #12]
 8006082:	ab0a      	add	r3, sp, #40	@ 0x28
 8006084:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006088:	ab09      	add	r3, sp, #36	@ 0x24
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	6861      	ldr	r1, [r4, #4]
 800608e:	ec49 8b10 	vmov	d0, r8, r9
 8006092:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006096:	4628      	mov	r0, r5
 8006098:	f7ff fed6 	bl	8005e48 <__cvt>
 800609c:	9b06      	ldr	r3, [sp, #24]
 800609e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060a0:	2b47      	cmp	r3, #71	@ 0x47
 80060a2:	4680      	mov	r8, r0
 80060a4:	d129      	bne.n	80060fa <_printf_float+0x172>
 80060a6:	1cc8      	adds	r0, r1, #3
 80060a8:	db02      	blt.n	80060b0 <_printf_float+0x128>
 80060aa:	6863      	ldr	r3, [r4, #4]
 80060ac:	4299      	cmp	r1, r3
 80060ae:	dd41      	ble.n	8006134 <_printf_float+0x1ac>
 80060b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80060b4:	fa5f fa8a 	uxtb.w	sl, sl
 80060b8:	3901      	subs	r1, #1
 80060ba:	4652      	mov	r2, sl
 80060bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80060c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80060c2:	f7ff ff26 	bl	8005f12 <__exponent>
 80060c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060c8:	1813      	adds	r3, r2, r0
 80060ca:	2a01      	cmp	r2, #1
 80060cc:	4681      	mov	r9, r0
 80060ce:	6123      	str	r3, [r4, #16]
 80060d0:	dc02      	bgt.n	80060d8 <_printf_float+0x150>
 80060d2:	6822      	ldr	r2, [r4, #0]
 80060d4:	07d2      	lsls	r2, r2, #31
 80060d6:	d501      	bpl.n	80060dc <_printf_float+0x154>
 80060d8:	3301      	adds	r3, #1
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0a2      	beq.n	800602a <_printf_float+0xa2>
 80060e4:	232d      	movs	r3, #45	@ 0x2d
 80060e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ea:	e79e      	b.n	800602a <_printf_float+0xa2>
 80060ec:	9a06      	ldr	r2, [sp, #24]
 80060ee:	2a47      	cmp	r2, #71	@ 0x47
 80060f0:	d1c2      	bne.n	8006078 <_printf_float+0xf0>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1c0      	bne.n	8006078 <_printf_float+0xf0>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e7bd      	b.n	8006076 <_printf_float+0xee>
 80060fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060fe:	d9db      	bls.n	80060b8 <_printf_float+0x130>
 8006100:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006104:	d118      	bne.n	8006138 <_printf_float+0x1b0>
 8006106:	2900      	cmp	r1, #0
 8006108:	6863      	ldr	r3, [r4, #4]
 800610a:	dd0b      	ble.n	8006124 <_printf_float+0x19c>
 800610c:	6121      	str	r1, [r4, #16]
 800610e:	b913      	cbnz	r3, 8006116 <_printf_float+0x18e>
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	07d0      	lsls	r0, r2, #31
 8006114:	d502      	bpl.n	800611c <_printf_float+0x194>
 8006116:	3301      	adds	r3, #1
 8006118:	440b      	add	r3, r1
 800611a:	6123      	str	r3, [r4, #16]
 800611c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800611e:	f04f 0900 	mov.w	r9, #0
 8006122:	e7db      	b.n	80060dc <_printf_float+0x154>
 8006124:	b913      	cbnz	r3, 800612c <_printf_float+0x1a4>
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	07d2      	lsls	r2, r2, #31
 800612a:	d501      	bpl.n	8006130 <_printf_float+0x1a8>
 800612c:	3302      	adds	r3, #2
 800612e:	e7f4      	b.n	800611a <_printf_float+0x192>
 8006130:	2301      	movs	r3, #1
 8006132:	e7f2      	b.n	800611a <_printf_float+0x192>
 8006134:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800613a:	4299      	cmp	r1, r3
 800613c:	db05      	blt.n	800614a <_printf_float+0x1c2>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	6121      	str	r1, [r4, #16]
 8006142:	07d8      	lsls	r0, r3, #31
 8006144:	d5ea      	bpl.n	800611c <_printf_float+0x194>
 8006146:	1c4b      	adds	r3, r1, #1
 8006148:	e7e7      	b.n	800611a <_printf_float+0x192>
 800614a:	2900      	cmp	r1, #0
 800614c:	bfd4      	ite	le
 800614e:	f1c1 0202 	rsble	r2, r1, #2
 8006152:	2201      	movgt	r2, #1
 8006154:	4413      	add	r3, r2
 8006156:	e7e0      	b.n	800611a <_printf_float+0x192>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	055a      	lsls	r2, r3, #21
 800615c:	d407      	bmi.n	800616e <_printf_float+0x1e6>
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	4642      	mov	r2, r8
 8006162:	4631      	mov	r1, r6
 8006164:	4628      	mov	r0, r5
 8006166:	47b8      	blx	r7
 8006168:	3001      	adds	r0, #1
 800616a:	d12b      	bne.n	80061c4 <_printf_float+0x23c>
 800616c:	e767      	b.n	800603e <_printf_float+0xb6>
 800616e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006172:	f240 80dd 	bls.w	8006330 <_printf_float+0x3a8>
 8006176:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800617a:	2200      	movs	r2, #0
 800617c:	2300      	movs	r3, #0
 800617e:	f7fa fcc3 	bl	8000b08 <__aeabi_dcmpeq>
 8006182:	2800      	cmp	r0, #0
 8006184:	d033      	beq.n	80061ee <_printf_float+0x266>
 8006186:	4a37      	ldr	r2, [pc, #220]	@ (8006264 <_printf_float+0x2dc>)
 8006188:	2301      	movs	r3, #1
 800618a:	4631      	mov	r1, r6
 800618c:	4628      	mov	r0, r5
 800618e:	47b8      	blx	r7
 8006190:	3001      	adds	r0, #1
 8006192:	f43f af54 	beq.w	800603e <_printf_float+0xb6>
 8006196:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800619a:	4543      	cmp	r3, r8
 800619c:	db02      	blt.n	80061a4 <_printf_float+0x21c>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	07d8      	lsls	r0, r3, #31
 80061a2:	d50f      	bpl.n	80061c4 <_printf_float+0x23c>
 80061a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	f43f af45 	beq.w	800603e <_printf_float+0xb6>
 80061b4:	f04f 0900 	mov.w	r9, #0
 80061b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80061bc:	f104 0a1a 	add.w	sl, r4, #26
 80061c0:	45c8      	cmp	r8, r9
 80061c2:	dc09      	bgt.n	80061d8 <_printf_float+0x250>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	079b      	lsls	r3, r3, #30
 80061c8:	f100 8103 	bmi.w	80063d2 <_printf_float+0x44a>
 80061cc:	68e0      	ldr	r0, [r4, #12]
 80061ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061d0:	4298      	cmp	r0, r3
 80061d2:	bfb8      	it	lt
 80061d4:	4618      	movlt	r0, r3
 80061d6:	e734      	b.n	8006042 <_printf_float+0xba>
 80061d8:	2301      	movs	r3, #1
 80061da:	4652      	mov	r2, sl
 80061dc:	4631      	mov	r1, r6
 80061de:	4628      	mov	r0, r5
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	f43f af2b 	beq.w	800603e <_printf_float+0xb6>
 80061e8:	f109 0901 	add.w	r9, r9, #1
 80061ec:	e7e8      	b.n	80061c0 <_printf_float+0x238>
 80061ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	dc39      	bgt.n	8006268 <_printf_float+0x2e0>
 80061f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006264 <_printf_float+0x2dc>)
 80061f6:	2301      	movs	r3, #1
 80061f8:	4631      	mov	r1, r6
 80061fa:	4628      	mov	r0, r5
 80061fc:	47b8      	blx	r7
 80061fe:	3001      	adds	r0, #1
 8006200:	f43f af1d 	beq.w	800603e <_printf_float+0xb6>
 8006204:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006208:	ea59 0303 	orrs.w	r3, r9, r3
 800620c:	d102      	bne.n	8006214 <_printf_float+0x28c>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	07d9      	lsls	r1, r3, #31
 8006212:	d5d7      	bpl.n	80061c4 <_printf_float+0x23c>
 8006214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006218:	4631      	mov	r1, r6
 800621a:	4628      	mov	r0, r5
 800621c:	47b8      	blx	r7
 800621e:	3001      	adds	r0, #1
 8006220:	f43f af0d 	beq.w	800603e <_printf_float+0xb6>
 8006224:	f04f 0a00 	mov.w	sl, #0
 8006228:	f104 0b1a 	add.w	fp, r4, #26
 800622c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800622e:	425b      	negs	r3, r3
 8006230:	4553      	cmp	r3, sl
 8006232:	dc01      	bgt.n	8006238 <_printf_float+0x2b0>
 8006234:	464b      	mov	r3, r9
 8006236:	e793      	b.n	8006160 <_printf_float+0x1d8>
 8006238:	2301      	movs	r3, #1
 800623a:	465a      	mov	r2, fp
 800623c:	4631      	mov	r1, r6
 800623e:	4628      	mov	r0, r5
 8006240:	47b8      	blx	r7
 8006242:	3001      	adds	r0, #1
 8006244:	f43f aefb 	beq.w	800603e <_printf_float+0xb6>
 8006248:	f10a 0a01 	add.w	sl, sl, #1
 800624c:	e7ee      	b.n	800622c <_printf_float+0x2a4>
 800624e:	bf00      	nop
 8006250:	7fefffff 	.word	0x7fefffff
 8006254:	08008de0 	.word	0x08008de0
 8006258:	08008de4 	.word	0x08008de4
 800625c:	08008de8 	.word	0x08008de8
 8006260:	08008dec 	.word	0x08008dec
 8006264:	08008df0 	.word	0x08008df0
 8006268:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800626a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800626e:	4553      	cmp	r3, sl
 8006270:	bfa8      	it	ge
 8006272:	4653      	movge	r3, sl
 8006274:	2b00      	cmp	r3, #0
 8006276:	4699      	mov	r9, r3
 8006278:	dc36      	bgt.n	80062e8 <_printf_float+0x360>
 800627a:	f04f 0b00 	mov.w	fp, #0
 800627e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006282:	f104 021a 	add.w	r2, r4, #26
 8006286:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006288:	9306      	str	r3, [sp, #24]
 800628a:	eba3 0309 	sub.w	r3, r3, r9
 800628e:	455b      	cmp	r3, fp
 8006290:	dc31      	bgt.n	80062f6 <_printf_float+0x36e>
 8006292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006294:	459a      	cmp	sl, r3
 8006296:	dc3a      	bgt.n	800630e <_printf_float+0x386>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	07da      	lsls	r2, r3, #31
 800629c:	d437      	bmi.n	800630e <_printf_float+0x386>
 800629e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a0:	ebaa 0903 	sub.w	r9, sl, r3
 80062a4:	9b06      	ldr	r3, [sp, #24]
 80062a6:	ebaa 0303 	sub.w	r3, sl, r3
 80062aa:	4599      	cmp	r9, r3
 80062ac:	bfa8      	it	ge
 80062ae:	4699      	movge	r9, r3
 80062b0:	f1b9 0f00 	cmp.w	r9, #0
 80062b4:	dc33      	bgt.n	800631e <_printf_float+0x396>
 80062b6:	f04f 0800 	mov.w	r8, #0
 80062ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062be:	f104 0b1a 	add.w	fp, r4, #26
 80062c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c4:	ebaa 0303 	sub.w	r3, sl, r3
 80062c8:	eba3 0309 	sub.w	r3, r3, r9
 80062cc:	4543      	cmp	r3, r8
 80062ce:	f77f af79 	ble.w	80061c4 <_printf_float+0x23c>
 80062d2:	2301      	movs	r3, #1
 80062d4:	465a      	mov	r2, fp
 80062d6:	4631      	mov	r1, r6
 80062d8:	4628      	mov	r0, r5
 80062da:	47b8      	blx	r7
 80062dc:	3001      	adds	r0, #1
 80062de:	f43f aeae 	beq.w	800603e <_printf_float+0xb6>
 80062e2:	f108 0801 	add.w	r8, r8, #1
 80062e6:	e7ec      	b.n	80062c2 <_printf_float+0x33a>
 80062e8:	4642      	mov	r2, r8
 80062ea:	4631      	mov	r1, r6
 80062ec:	4628      	mov	r0, r5
 80062ee:	47b8      	blx	r7
 80062f0:	3001      	adds	r0, #1
 80062f2:	d1c2      	bne.n	800627a <_printf_float+0x2f2>
 80062f4:	e6a3      	b.n	800603e <_printf_float+0xb6>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	9206      	str	r2, [sp, #24]
 80062fe:	47b8      	blx	r7
 8006300:	3001      	adds	r0, #1
 8006302:	f43f ae9c 	beq.w	800603e <_printf_float+0xb6>
 8006306:	9a06      	ldr	r2, [sp, #24]
 8006308:	f10b 0b01 	add.w	fp, fp, #1
 800630c:	e7bb      	b.n	8006286 <_printf_float+0x2fe>
 800630e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006312:	4631      	mov	r1, r6
 8006314:	4628      	mov	r0, r5
 8006316:	47b8      	blx	r7
 8006318:	3001      	adds	r0, #1
 800631a:	d1c0      	bne.n	800629e <_printf_float+0x316>
 800631c:	e68f      	b.n	800603e <_printf_float+0xb6>
 800631e:	9a06      	ldr	r2, [sp, #24]
 8006320:	464b      	mov	r3, r9
 8006322:	4442      	add	r2, r8
 8006324:	4631      	mov	r1, r6
 8006326:	4628      	mov	r0, r5
 8006328:	47b8      	blx	r7
 800632a:	3001      	adds	r0, #1
 800632c:	d1c3      	bne.n	80062b6 <_printf_float+0x32e>
 800632e:	e686      	b.n	800603e <_printf_float+0xb6>
 8006330:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006334:	f1ba 0f01 	cmp.w	sl, #1
 8006338:	dc01      	bgt.n	800633e <_printf_float+0x3b6>
 800633a:	07db      	lsls	r3, r3, #31
 800633c:	d536      	bpl.n	80063ac <_printf_float+0x424>
 800633e:	2301      	movs	r3, #1
 8006340:	4642      	mov	r2, r8
 8006342:	4631      	mov	r1, r6
 8006344:	4628      	mov	r0, r5
 8006346:	47b8      	blx	r7
 8006348:	3001      	adds	r0, #1
 800634a:	f43f ae78 	beq.w	800603e <_printf_float+0xb6>
 800634e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	f43f ae70 	beq.w	800603e <_printf_float+0xb6>
 800635e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006362:	2200      	movs	r2, #0
 8006364:	2300      	movs	r3, #0
 8006366:	f10a 3aff 	add.w	sl, sl, #4294967295
 800636a:	f7fa fbcd 	bl	8000b08 <__aeabi_dcmpeq>
 800636e:	b9c0      	cbnz	r0, 80063a2 <_printf_float+0x41a>
 8006370:	4653      	mov	r3, sl
 8006372:	f108 0201 	add.w	r2, r8, #1
 8006376:	4631      	mov	r1, r6
 8006378:	4628      	mov	r0, r5
 800637a:	47b8      	blx	r7
 800637c:	3001      	adds	r0, #1
 800637e:	d10c      	bne.n	800639a <_printf_float+0x412>
 8006380:	e65d      	b.n	800603e <_printf_float+0xb6>
 8006382:	2301      	movs	r3, #1
 8006384:	465a      	mov	r2, fp
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	f43f ae56 	beq.w	800603e <_printf_float+0xb6>
 8006392:	f108 0801 	add.w	r8, r8, #1
 8006396:	45d0      	cmp	r8, sl
 8006398:	dbf3      	blt.n	8006382 <_printf_float+0x3fa>
 800639a:	464b      	mov	r3, r9
 800639c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80063a0:	e6df      	b.n	8006162 <_printf_float+0x1da>
 80063a2:	f04f 0800 	mov.w	r8, #0
 80063a6:	f104 0b1a 	add.w	fp, r4, #26
 80063aa:	e7f4      	b.n	8006396 <_printf_float+0x40e>
 80063ac:	2301      	movs	r3, #1
 80063ae:	4642      	mov	r2, r8
 80063b0:	e7e1      	b.n	8006376 <_printf_float+0x3ee>
 80063b2:	2301      	movs	r3, #1
 80063b4:	464a      	mov	r2, r9
 80063b6:	4631      	mov	r1, r6
 80063b8:	4628      	mov	r0, r5
 80063ba:	47b8      	blx	r7
 80063bc:	3001      	adds	r0, #1
 80063be:	f43f ae3e 	beq.w	800603e <_printf_float+0xb6>
 80063c2:	f108 0801 	add.w	r8, r8, #1
 80063c6:	68e3      	ldr	r3, [r4, #12]
 80063c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063ca:	1a5b      	subs	r3, r3, r1
 80063cc:	4543      	cmp	r3, r8
 80063ce:	dcf0      	bgt.n	80063b2 <_printf_float+0x42a>
 80063d0:	e6fc      	b.n	80061cc <_printf_float+0x244>
 80063d2:	f04f 0800 	mov.w	r8, #0
 80063d6:	f104 0919 	add.w	r9, r4, #25
 80063da:	e7f4      	b.n	80063c6 <_printf_float+0x43e>

080063dc <_printf_common>:
 80063dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e0:	4616      	mov	r6, r2
 80063e2:	4698      	mov	r8, r3
 80063e4:	688a      	ldr	r2, [r1, #8]
 80063e6:	690b      	ldr	r3, [r1, #16]
 80063e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063ec:	4293      	cmp	r3, r2
 80063ee:	bfb8      	it	lt
 80063f0:	4613      	movlt	r3, r2
 80063f2:	6033      	str	r3, [r6, #0]
 80063f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063f8:	4607      	mov	r7, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	b10a      	cbz	r2, 8006402 <_printf_common+0x26>
 80063fe:	3301      	adds	r3, #1
 8006400:	6033      	str	r3, [r6, #0]
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	0699      	lsls	r1, r3, #26
 8006406:	bf42      	ittt	mi
 8006408:	6833      	ldrmi	r3, [r6, #0]
 800640a:	3302      	addmi	r3, #2
 800640c:	6033      	strmi	r3, [r6, #0]
 800640e:	6825      	ldr	r5, [r4, #0]
 8006410:	f015 0506 	ands.w	r5, r5, #6
 8006414:	d106      	bne.n	8006424 <_printf_common+0x48>
 8006416:	f104 0a19 	add.w	sl, r4, #25
 800641a:	68e3      	ldr	r3, [r4, #12]
 800641c:	6832      	ldr	r2, [r6, #0]
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	42ab      	cmp	r3, r5
 8006422:	dc26      	bgt.n	8006472 <_printf_common+0x96>
 8006424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006428:	6822      	ldr	r2, [r4, #0]
 800642a:	3b00      	subs	r3, #0
 800642c:	bf18      	it	ne
 800642e:	2301      	movne	r3, #1
 8006430:	0692      	lsls	r2, r2, #26
 8006432:	d42b      	bmi.n	800648c <_printf_common+0xb0>
 8006434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006438:	4641      	mov	r1, r8
 800643a:	4638      	mov	r0, r7
 800643c:	47c8      	blx	r9
 800643e:	3001      	adds	r0, #1
 8006440:	d01e      	beq.n	8006480 <_printf_common+0xa4>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	6922      	ldr	r2, [r4, #16]
 8006446:	f003 0306 	and.w	r3, r3, #6
 800644a:	2b04      	cmp	r3, #4
 800644c:	bf02      	ittt	eq
 800644e:	68e5      	ldreq	r5, [r4, #12]
 8006450:	6833      	ldreq	r3, [r6, #0]
 8006452:	1aed      	subeq	r5, r5, r3
 8006454:	68a3      	ldr	r3, [r4, #8]
 8006456:	bf0c      	ite	eq
 8006458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800645c:	2500      	movne	r5, #0
 800645e:	4293      	cmp	r3, r2
 8006460:	bfc4      	itt	gt
 8006462:	1a9b      	subgt	r3, r3, r2
 8006464:	18ed      	addgt	r5, r5, r3
 8006466:	2600      	movs	r6, #0
 8006468:	341a      	adds	r4, #26
 800646a:	42b5      	cmp	r5, r6
 800646c:	d11a      	bne.n	80064a4 <_printf_common+0xc8>
 800646e:	2000      	movs	r0, #0
 8006470:	e008      	b.n	8006484 <_printf_common+0xa8>
 8006472:	2301      	movs	r3, #1
 8006474:	4652      	mov	r2, sl
 8006476:	4641      	mov	r1, r8
 8006478:	4638      	mov	r0, r7
 800647a:	47c8      	blx	r9
 800647c:	3001      	adds	r0, #1
 800647e:	d103      	bne.n	8006488 <_printf_common+0xac>
 8006480:	f04f 30ff 	mov.w	r0, #4294967295
 8006484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006488:	3501      	adds	r5, #1
 800648a:	e7c6      	b.n	800641a <_printf_common+0x3e>
 800648c:	18e1      	adds	r1, r4, r3
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	2030      	movs	r0, #48	@ 0x30
 8006492:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006496:	4422      	add	r2, r4
 8006498:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800649c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064a0:	3302      	adds	r3, #2
 80064a2:	e7c7      	b.n	8006434 <_printf_common+0x58>
 80064a4:	2301      	movs	r3, #1
 80064a6:	4622      	mov	r2, r4
 80064a8:	4641      	mov	r1, r8
 80064aa:	4638      	mov	r0, r7
 80064ac:	47c8      	blx	r9
 80064ae:	3001      	adds	r0, #1
 80064b0:	d0e6      	beq.n	8006480 <_printf_common+0xa4>
 80064b2:	3601      	adds	r6, #1
 80064b4:	e7d9      	b.n	800646a <_printf_common+0x8e>
	...

080064b8 <_printf_i>:
 80064b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	7e0f      	ldrb	r7, [r1, #24]
 80064be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064c0:	2f78      	cmp	r7, #120	@ 0x78
 80064c2:	4691      	mov	r9, r2
 80064c4:	4680      	mov	r8, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	469a      	mov	sl, r3
 80064ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064ce:	d807      	bhi.n	80064e0 <_printf_i+0x28>
 80064d0:	2f62      	cmp	r7, #98	@ 0x62
 80064d2:	d80a      	bhi.n	80064ea <_printf_i+0x32>
 80064d4:	2f00      	cmp	r7, #0
 80064d6:	f000 80d2 	beq.w	800667e <_printf_i+0x1c6>
 80064da:	2f58      	cmp	r7, #88	@ 0x58
 80064dc:	f000 80b9 	beq.w	8006652 <_printf_i+0x19a>
 80064e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064e8:	e03a      	b.n	8006560 <_printf_i+0xa8>
 80064ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064ee:	2b15      	cmp	r3, #21
 80064f0:	d8f6      	bhi.n	80064e0 <_printf_i+0x28>
 80064f2:	a101      	add	r1, pc, #4	@ (adr r1, 80064f8 <_printf_i+0x40>)
 80064f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064f8:	08006551 	.word	0x08006551
 80064fc:	08006565 	.word	0x08006565
 8006500:	080064e1 	.word	0x080064e1
 8006504:	080064e1 	.word	0x080064e1
 8006508:	080064e1 	.word	0x080064e1
 800650c:	080064e1 	.word	0x080064e1
 8006510:	08006565 	.word	0x08006565
 8006514:	080064e1 	.word	0x080064e1
 8006518:	080064e1 	.word	0x080064e1
 800651c:	080064e1 	.word	0x080064e1
 8006520:	080064e1 	.word	0x080064e1
 8006524:	08006665 	.word	0x08006665
 8006528:	0800658f 	.word	0x0800658f
 800652c:	0800661f 	.word	0x0800661f
 8006530:	080064e1 	.word	0x080064e1
 8006534:	080064e1 	.word	0x080064e1
 8006538:	08006687 	.word	0x08006687
 800653c:	080064e1 	.word	0x080064e1
 8006540:	0800658f 	.word	0x0800658f
 8006544:	080064e1 	.word	0x080064e1
 8006548:	080064e1 	.word	0x080064e1
 800654c:	08006627 	.word	0x08006627
 8006550:	6833      	ldr	r3, [r6, #0]
 8006552:	1d1a      	adds	r2, r3, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6032      	str	r2, [r6, #0]
 8006558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800655c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006560:	2301      	movs	r3, #1
 8006562:	e09d      	b.n	80066a0 <_printf_i+0x1e8>
 8006564:	6833      	ldr	r3, [r6, #0]
 8006566:	6820      	ldr	r0, [r4, #0]
 8006568:	1d19      	adds	r1, r3, #4
 800656a:	6031      	str	r1, [r6, #0]
 800656c:	0606      	lsls	r6, r0, #24
 800656e:	d501      	bpl.n	8006574 <_printf_i+0xbc>
 8006570:	681d      	ldr	r5, [r3, #0]
 8006572:	e003      	b.n	800657c <_printf_i+0xc4>
 8006574:	0645      	lsls	r5, r0, #25
 8006576:	d5fb      	bpl.n	8006570 <_printf_i+0xb8>
 8006578:	f9b3 5000 	ldrsh.w	r5, [r3]
 800657c:	2d00      	cmp	r5, #0
 800657e:	da03      	bge.n	8006588 <_printf_i+0xd0>
 8006580:	232d      	movs	r3, #45	@ 0x2d
 8006582:	426d      	negs	r5, r5
 8006584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006588:	4859      	ldr	r0, [pc, #356]	@ (80066f0 <_printf_i+0x238>)
 800658a:	230a      	movs	r3, #10
 800658c:	e011      	b.n	80065b2 <_printf_i+0xfa>
 800658e:	6821      	ldr	r1, [r4, #0]
 8006590:	6833      	ldr	r3, [r6, #0]
 8006592:	0608      	lsls	r0, r1, #24
 8006594:	f853 5b04 	ldr.w	r5, [r3], #4
 8006598:	d402      	bmi.n	80065a0 <_printf_i+0xe8>
 800659a:	0649      	lsls	r1, r1, #25
 800659c:	bf48      	it	mi
 800659e:	b2ad      	uxthmi	r5, r5
 80065a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80065a2:	4853      	ldr	r0, [pc, #332]	@ (80066f0 <_printf_i+0x238>)
 80065a4:	6033      	str	r3, [r6, #0]
 80065a6:	bf14      	ite	ne
 80065a8:	230a      	movne	r3, #10
 80065aa:	2308      	moveq	r3, #8
 80065ac:	2100      	movs	r1, #0
 80065ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065b2:	6866      	ldr	r6, [r4, #4]
 80065b4:	60a6      	str	r6, [r4, #8]
 80065b6:	2e00      	cmp	r6, #0
 80065b8:	bfa2      	ittt	ge
 80065ba:	6821      	ldrge	r1, [r4, #0]
 80065bc:	f021 0104 	bicge.w	r1, r1, #4
 80065c0:	6021      	strge	r1, [r4, #0]
 80065c2:	b90d      	cbnz	r5, 80065c8 <_printf_i+0x110>
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	d04b      	beq.n	8006660 <_printf_i+0x1a8>
 80065c8:	4616      	mov	r6, r2
 80065ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80065ce:	fb03 5711 	mls	r7, r3, r1, r5
 80065d2:	5dc7      	ldrb	r7, [r0, r7]
 80065d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065d8:	462f      	mov	r7, r5
 80065da:	42bb      	cmp	r3, r7
 80065dc:	460d      	mov	r5, r1
 80065de:	d9f4      	bls.n	80065ca <_printf_i+0x112>
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d10b      	bne.n	80065fc <_printf_i+0x144>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	07df      	lsls	r7, r3, #31
 80065e8:	d508      	bpl.n	80065fc <_printf_i+0x144>
 80065ea:	6923      	ldr	r3, [r4, #16]
 80065ec:	6861      	ldr	r1, [r4, #4]
 80065ee:	4299      	cmp	r1, r3
 80065f0:	bfde      	ittt	le
 80065f2:	2330      	movle	r3, #48	@ 0x30
 80065f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065fc:	1b92      	subs	r2, r2, r6
 80065fe:	6122      	str	r2, [r4, #16]
 8006600:	f8cd a000 	str.w	sl, [sp]
 8006604:	464b      	mov	r3, r9
 8006606:	aa03      	add	r2, sp, #12
 8006608:	4621      	mov	r1, r4
 800660a:	4640      	mov	r0, r8
 800660c:	f7ff fee6 	bl	80063dc <_printf_common>
 8006610:	3001      	adds	r0, #1
 8006612:	d14a      	bne.n	80066aa <_printf_i+0x1f2>
 8006614:	f04f 30ff 	mov.w	r0, #4294967295
 8006618:	b004      	add	sp, #16
 800661a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	f043 0320 	orr.w	r3, r3, #32
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	4833      	ldr	r0, [pc, #204]	@ (80066f4 <_printf_i+0x23c>)
 8006628:	2778      	movs	r7, #120	@ 0x78
 800662a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	6831      	ldr	r1, [r6, #0]
 8006632:	061f      	lsls	r7, r3, #24
 8006634:	f851 5b04 	ldr.w	r5, [r1], #4
 8006638:	d402      	bmi.n	8006640 <_printf_i+0x188>
 800663a:	065f      	lsls	r7, r3, #25
 800663c:	bf48      	it	mi
 800663e:	b2ad      	uxthmi	r5, r5
 8006640:	6031      	str	r1, [r6, #0]
 8006642:	07d9      	lsls	r1, r3, #31
 8006644:	bf44      	itt	mi
 8006646:	f043 0320 	orrmi.w	r3, r3, #32
 800664a:	6023      	strmi	r3, [r4, #0]
 800664c:	b11d      	cbz	r5, 8006656 <_printf_i+0x19e>
 800664e:	2310      	movs	r3, #16
 8006650:	e7ac      	b.n	80065ac <_printf_i+0xf4>
 8006652:	4827      	ldr	r0, [pc, #156]	@ (80066f0 <_printf_i+0x238>)
 8006654:	e7e9      	b.n	800662a <_printf_i+0x172>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	f023 0320 	bic.w	r3, r3, #32
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	e7f6      	b.n	800664e <_printf_i+0x196>
 8006660:	4616      	mov	r6, r2
 8006662:	e7bd      	b.n	80065e0 <_printf_i+0x128>
 8006664:	6833      	ldr	r3, [r6, #0]
 8006666:	6825      	ldr	r5, [r4, #0]
 8006668:	6961      	ldr	r1, [r4, #20]
 800666a:	1d18      	adds	r0, r3, #4
 800666c:	6030      	str	r0, [r6, #0]
 800666e:	062e      	lsls	r6, r5, #24
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	d501      	bpl.n	8006678 <_printf_i+0x1c0>
 8006674:	6019      	str	r1, [r3, #0]
 8006676:	e002      	b.n	800667e <_printf_i+0x1c6>
 8006678:	0668      	lsls	r0, r5, #25
 800667a:	d5fb      	bpl.n	8006674 <_printf_i+0x1bc>
 800667c:	8019      	strh	r1, [r3, #0]
 800667e:	2300      	movs	r3, #0
 8006680:	6123      	str	r3, [r4, #16]
 8006682:	4616      	mov	r6, r2
 8006684:	e7bc      	b.n	8006600 <_printf_i+0x148>
 8006686:	6833      	ldr	r3, [r6, #0]
 8006688:	1d1a      	adds	r2, r3, #4
 800668a:	6032      	str	r2, [r6, #0]
 800668c:	681e      	ldr	r6, [r3, #0]
 800668e:	6862      	ldr	r2, [r4, #4]
 8006690:	2100      	movs	r1, #0
 8006692:	4630      	mov	r0, r6
 8006694:	f7f9 fdbc 	bl	8000210 <memchr>
 8006698:	b108      	cbz	r0, 800669e <_printf_i+0x1e6>
 800669a:	1b80      	subs	r0, r0, r6
 800669c:	6060      	str	r0, [r4, #4]
 800669e:	6863      	ldr	r3, [r4, #4]
 80066a0:	6123      	str	r3, [r4, #16]
 80066a2:	2300      	movs	r3, #0
 80066a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066a8:	e7aa      	b.n	8006600 <_printf_i+0x148>
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	4632      	mov	r2, r6
 80066ae:	4649      	mov	r1, r9
 80066b0:	4640      	mov	r0, r8
 80066b2:	47d0      	blx	sl
 80066b4:	3001      	adds	r0, #1
 80066b6:	d0ad      	beq.n	8006614 <_printf_i+0x15c>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	079b      	lsls	r3, r3, #30
 80066bc:	d413      	bmi.n	80066e6 <_printf_i+0x22e>
 80066be:	68e0      	ldr	r0, [r4, #12]
 80066c0:	9b03      	ldr	r3, [sp, #12]
 80066c2:	4298      	cmp	r0, r3
 80066c4:	bfb8      	it	lt
 80066c6:	4618      	movlt	r0, r3
 80066c8:	e7a6      	b.n	8006618 <_printf_i+0x160>
 80066ca:	2301      	movs	r3, #1
 80066cc:	4632      	mov	r2, r6
 80066ce:	4649      	mov	r1, r9
 80066d0:	4640      	mov	r0, r8
 80066d2:	47d0      	blx	sl
 80066d4:	3001      	adds	r0, #1
 80066d6:	d09d      	beq.n	8006614 <_printf_i+0x15c>
 80066d8:	3501      	adds	r5, #1
 80066da:	68e3      	ldr	r3, [r4, #12]
 80066dc:	9903      	ldr	r1, [sp, #12]
 80066de:	1a5b      	subs	r3, r3, r1
 80066e0:	42ab      	cmp	r3, r5
 80066e2:	dcf2      	bgt.n	80066ca <_printf_i+0x212>
 80066e4:	e7eb      	b.n	80066be <_printf_i+0x206>
 80066e6:	2500      	movs	r5, #0
 80066e8:	f104 0619 	add.w	r6, r4, #25
 80066ec:	e7f5      	b.n	80066da <_printf_i+0x222>
 80066ee:	bf00      	nop
 80066f0:	08008df2 	.word	0x08008df2
 80066f4:	08008e03 	.word	0x08008e03

080066f8 <std>:
 80066f8:	2300      	movs	r3, #0
 80066fa:	b510      	push	{r4, lr}
 80066fc:	4604      	mov	r4, r0
 80066fe:	e9c0 3300 	strd	r3, r3, [r0]
 8006702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006706:	6083      	str	r3, [r0, #8]
 8006708:	8181      	strh	r1, [r0, #12]
 800670a:	6643      	str	r3, [r0, #100]	@ 0x64
 800670c:	81c2      	strh	r2, [r0, #14]
 800670e:	6183      	str	r3, [r0, #24]
 8006710:	4619      	mov	r1, r3
 8006712:	2208      	movs	r2, #8
 8006714:	305c      	adds	r0, #92	@ 0x5c
 8006716:	f000 f914 	bl	8006942 <memset>
 800671a:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <std+0x58>)
 800671c:	6263      	str	r3, [r4, #36]	@ 0x24
 800671e:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <std+0x5c>)
 8006720:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006722:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <std+0x60>)
 8006724:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006726:	4b0d      	ldr	r3, [pc, #52]	@ (800675c <std+0x64>)
 8006728:	6323      	str	r3, [r4, #48]	@ 0x30
 800672a:	4b0d      	ldr	r3, [pc, #52]	@ (8006760 <std+0x68>)
 800672c:	6224      	str	r4, [r4, #32]
 800672e:	429c      	cmp	r4, r3
 8006730:	d006      	beq.n	8006740 <std+0x48>
 8006732:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006736:	4294      	cmp	r4, r2
 8006738:	d002      	beq.n	8006740 <std+0x48>
 800673a:	33d0      	adds	r3, #208	@ 0xd0
 800673c:	429c      	cmp	r4, r3
 800673e:	d105      	bne.n	800674c <std+0x54>
 8006740:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006748:	f000 b988 	b.w	8006a5c <__retarget_lock_init_recursive>
 800674c:	bd10      	pop	{r4, pc}
 800674e:	bf00      	nop
 8006750:	080068bd 	.word	0x080068bd
 8006754:	080068df 	.word	0x080068df
 8006758:	08006917 	.word	0x08006917
 800675c:	0800693b 	.word	0x0800693b
 8006760:	20000530 	.word	0x20000530

08006764 <stdio_exit_handler>:
 8006764:	4a02      	ldr	r2, [pc, #8]	@ (8006770 <stdio_exit_handler+0xc>)
 8006766:	4903      	ldr	r1, [pc, #12]	@ (8006774 <stdio_exit_handler+0x10>)
 8006768:	4803      	ldr	r0, [pc, #12]	@ (8006778 <stdio_exit_handler+0x14>)
 800676a:	f000 b869 	b.w	8006840 <_fwalk_sglue>
 800676e:	bf00      	nop
 8006770:	2000001c 	.word	0x2000001c
 8006774:	08008269 	.word	0x08008269
 8006778:	2000002c 	.word	0x2000002c

0800677c <cleanup_stdio>:
 800677c:	6841      	ldr	r1, [r0, #4]
 800677e:	4b0c      	ldr	r3, [pc, #48]	@ (80067b0 <cleanup_stdio+0x34>)
 8006780:	4299      	cmp	r1, r3
 8006782:	b510      	push	{r4, lr}
 8006784:	4604      	mov	r4, r0
 8006786:	d001      	beq.n	800678c <cleanup_stdio+0x10>
 8006788:	f001 fd6e 	bl	8008268 <_fflush_r>
 800678c:	68a1      	ldr	r1, [r4, #8]
 800678e:	4b09      	ldr	r3, [pc, #36]	@ (80067b4 <cleanup_stdio+0x38>)
 8006790:	4299      	cmp	r1, r3
 8006792:	d002      	beq.n	800679a <cleanup_stdio+0x1e>
 8006794:	4620      	mov	r0, r4
 8006796:	f001 fd67 	bl	8008268 <_fflush_r>
 800679a:	68e1      	ldr	r1, [r4, #12]
 800679c:	4b06      	ldr	r3, [pc, #24]	@ (80067b8 <cleanup_stdio+0x3c>)
 800679e:	4299      	cmp	r1, r3
 80067a0:	d004      	beq.n	80067ac <cleanup_stdio+0x30>
 80067a2:	4620      	mov	r0, r4
 80067a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a8:	f001 bd5e 	b.w	8008268 <_fflush_r>
 80067ac:	bd10      	pop	{r4, pc}
 80067ae:	bf00      	nop
 80067b0:	20000530 	.word	0x20000530
 80067b4:	20000598 	.word	0x20000598
 80067b8:	20000600 	.word	0x20000600

080067bc <global_stdio_init.part.0>:
 80067bc:	b510      	push	{r4, lr}
 80067be:	4b0b      	ldr	r3, [pc, #44]	@ (80067ec <global_stdio_init.part.0+0x30>)
 80067c0:	4c0b      	ldr	r4, [pc, #44]	@ (80067f0 <global_stdio_init.part.0+0x34>)
 80067c2:	4a0c      	ldr	r2, [pc, #48]	@ (80067f4 <global_stdio_init.part.0+0x38>)
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	4620      	mov	r0, r4
 80067c8:	2200      	movs	r2, #0
 80067ca:	2104      	movs	r1, #4
 80067cc:	f7ff ff94 	bl	80066f8 <std>
 80067d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067d4:	2201      	movs	r2, #1
 80067d6:	2109      	movs	r1, #9
 80067d8:	f7ff ff8e 	bl	80066f8 <std>
 80067dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067e0:	2202      	movs	r2, #2
 80067e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e6:	2112      	movs	r1, #18
 80067e8:	f7ff bf86 	b.w	80066f8 <std>
 80067ec:	20000668 	.word	0x20000668
 80067f0:	20000530 	.word	0x20000530
 80067f4:	08006765 	.word	0x08006765

080067f8 <__sfp_lock_acquire>:
 80067f8:	4801      	ldr	r0, [pc, #4]	@ (8006800 <__sfp_lock_acquire+0x8>)
 80067fa:	f000 b930 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 80067fe:	bf00      	nop
 8006800:	20000671 	.word	0x20000671

08006804 <__sfp_lock_release>:
 8006804:	4801      	ldr	r0, [pc, #4]	@ (800680c <__sfp_lock_release+0x8>)
 8006806:	f000 b92b 	b.w	8006a60 <__retarget_lock_release_recursive>
 800680a:	bf00      	nop
 800680c:	20000671 	.word	0x20000671

08006810 <__sinit>:
 8006810:	b510      	push	{r4, lr}
 8006812:	4604      	mov	r4, r0
 8006814:	f7ff fff0 	bl	80067f8 <__sfp_lock_acquire>
 8006818:	6a23      	ldr	r3, [r4, #32]
 800681a:	b11b      	cbz	r3, 8006824 <__sinit+0x14>
 800681c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006820:	f7ff bff0 	b.w	8006804 <__sfp_lock_release>
 8006824:	4b04      	ldr	r3, [pc, #16]	@ (8006838 <__sinit+0x28>)
 8006826:	6223      	str	r3, [r4, #32]
 8006828:	4b04      	ldr	r3, [pc, #16]	@ (800683c <__sinit+0x2c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1f5      	bne.n	800681c <__sinit+0xc>
 8006830:	f7ff ffc4 	bl	80067bc <global_stdio_init.part.0>
 8006834:	e7f2      	b.n	800681c <__sinit+0xc>
 8006836:	bf00      	nop
 8006838:	0800677d 	.word	0x0800677d
 800683c:	20000668 	.word	0x20000668

08006840 <_fwalk_sglue>:
 8006840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006844:	4607      	mov	r7, r0
 8006846:	4688      	mov	r8, r1
 8006848:	4614      	mov	r4, r2
 800684a:	2600      	movs	r6, #0
 800684c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006850:	f1b9 0901 	subs.w	r9, r9, #1
 8006854:	d505      	bpl.n	8006862 <_fwalk_sglue+0x22>
 8006856:	6824      	ldr	r4, [r4, #0]
 8006858:	2c00      	cmp	r4, #0
 800685a:	d1f7      	bne.n	800684c <_fwalk_sglue+0xc>
 800685c:	4630      	mov	r0, r6
 800685e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006862:	89ab      	ldrh	r3, [r5, #12]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d907      	bls.n	8006878 <_fwalk_sglue+0x38>
 8006868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800686c:	3301      	adds	r3, #1
 800686e:	d003      	beq.n	8006878 <_fwalk_sglue+0x38>
 8006870:	4629      	mov	r1, r5
 8006872:	4638      	mov	r0, r7
 8006874:	47c0      	blx	r8
 8006876:	4306      	orrs	r6, r0
 8006878:	3568      	adds	r5, #104	@ 0x68
 800687a:	e7e9      	b.n	8006850 <_fwalk_sglue+0x10>

0800687c <siprintf>:
 800687c:	b40e      	push	{r1, r2, r3}
 800687e:	b500      	push	{lr}
 8006880:	b09c      	sub	sp, #112	@ 0x70
 8006882:	ab1d      	add	r3, sp, #116	@ 0x74
 8006884:	9002      	str	r0, [sp, #8]
 8006886:	9006      	str	r0, [sp, #24]
 8006888:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800688c:	4809      	ldr	r0, [pc, #36]	@ (80068b4 <siprintf+0x38>)
 800688e:	9107      	str	r1, [sp, #28]
 8006890:	9104      	str	r1, [sp, #16]
 8006892:	4909      	ldr	r1, [pc, #36]	@ (80068b8 <siprintf+0x3c>)
 8006894:	f853 2b04 	ldr.w	r2, [r3], #4
 8006898:	9105      	str	r1, [sp, #20]
 800689a:	6800      	ldr	r0, [r0, #0]
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	a902      	add	r1, sp, #8
 80068a0:	f001 fb62 	bl	8007f68 <_svfiprintf_r>
 80068a4:	9b02      	ldr	r3, [sp, #8]
 80068a6:	2200      	movs	r2, #0
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	b01c      	add	sp, #112	@ 0x70
 80068ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80068b0:	b003      	add	sp, #12
 80068b2:	4770      	bx	lr
 80068b4:	20000028 	.word	0x20000028
 80068b8:	ffff0208 	.word	0xffff0208

080068bc <__sread>:
 80068bc:	b510      	push	{r4, lr}
 80068be:	460c      	mov	r4, r1
 80068c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c4:	f000 f86c 	bl	80069a0 <_read_r>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	bfab      	itete	ge
 80068cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068ce:	89a3      	ldrhlt	r3, [r4, #12]
 80068d0:	181b      	addge	r3, r3, r0
 80068d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068d6:	bfac      	ite	ge
 80068d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068da:	81a3      	strhlt	r3, [r4, #12]
 80068dc:	bd10      	pop	{r4, pc}

080068de <__swrite>:
 80068de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e2:	461f      	mov	r7, r3
 80068e4:	898b      	ldrh	r3, [r1, #12]
 80068e6:	05db      	lsls	r3, r3, #23
 80068e8:	4605      	mov	r5, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	4616      	mov	r6, r2
 80068ee:	d505      	bpl.n	80068fc <__swrite+0x1e>
 80068f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f4:	2302      	movs	r3, #2
 80068f6:	2200      	movs	r2, #0
 80068f8:	f000 f840 	bl	800697c <_lseek_r>
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006906:	81a3      	strh	r3, [r4, #12]
 8006908:	4632      	mov	r2, r6
 800690a:	463b      	mov	r3, r7
 800690c:	4628      	mov	r0, r5
 800690e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006912:	f000 b867 	b.w	80069e4 <_write_r>

08006916 <__sseek>:
 8006916:	b510      	push	{r4, lr}
 8006918:	460c      	mov	r4, r1
 800691a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691e:	f000 f82d 	bl	800697c <_lseek_r>
 8006922:	1c43      	adds	r3, r0, #1
 8006924:	89a3      	ldrh	r3, [r4, #12]
 8006926:	bf15      	itete	ne
 8006928:	6560      	strne	r0, [r4, #84]	@ 0x54
 800692a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800692e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006932:	81a3      	strheq	r3, [r4, #12]
 8006934:	bf18      	it	ne
 8006936:	81a3      	strhne	r3, [r4, #12]
 8006938:	bd10      	pop	{r4, pc}

0800693a <__sclose>:
 800693a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693e:	f000 b80d 	b.w	800695c <_close_r>

08006942 <memset>:
 8006942:	4402      	add	r2, r0
 8006944:	4603      	mov	r3, r0
 8006946:	4293      	cmp	r3, r2
 8006948:	d100      	bne.n	800694c <memset+0xa>
 800694a:	4770      	bx	lr
 800694c:	f803 1b01 	strb.w	r1, [r3], #1
 8006950:	e7f9      	b.n	8006946 <memset+0x4>
	...

08006954 <_localeconv_r>:
 8006954:	4800      	ldr	r0, [pc, #0]	@ (8006958 <_localeconv_r+0x4>)
 8006956:	4770      	bx	lr
 8006958:	20000168 	.word	0x20000168

0800695c <_close_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d06      	ldr	r5, [pc, #24]	@ (8006978 <_close_r+0x1c>)
 8006960:	2300      	movs	r3, #0
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	602b      	str	r3, [r5, #0]
 8006968:	f7fc fbe2 	bl	8003130 <_close>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d102      	bne.n	8006976 <_close_r+0x1a>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	b103      	cbz	r3, 8006976 <_close_r+0x1a>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	2000066c 	.word	0x2000066c

0800697c <_lseek_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4d07      	ldr	r5, [pc, #28]	@ (800699c <_lseek_r+0x20>)
 8006980:	4604      	mov	r4, r0
 8006982:	4608      	mov	r0, r1
 8006984:	4611      	mov	r1, r2
 8006986:	2200      	movs	r2, #0
 8006988:	602a      	str	r2, [r5, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	f7fc fbf7 	bl	800317e <_lseek>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_lseek_r+0x1e>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b103      	cbz	r3, 800699a <_lseek_r+0x1e>
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	2000066c 	.word	0x2000066c

080069a0 <_read_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4d07      	ldr	r5, [pc, #28]	@ (80069c0 <_read_r+0x20>)
 80069a4:	4604      	mov	r4, r0
 80069a6:	4608      	mov	r0, r1
 80069a8:	4611      	mov	r1, r2
 80069aa:	2200      	movs	r2, #0
 80069ac:	602a      	str	r2, [r5, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f7fc fb85 	bl	80030be <_read>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d102      	bne.n	80069be <_read_r+0x1e>
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	b103      	cbz	r3, 80069be <_read_r+0x1e>
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	bd38      	pop	{r3, r4, r5, pc}
 80069c0:	2000066c 	.word	0x2000066c

080069c4 <_sbrk_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4d06      	ldr	r5, [pc, #24]	@ (80069e0 <_sbrk_r+0x1c>)
 80069c8:	2300      	movs	r3, #0
 80069ca:	4604      	mov	r4, r0
 80069cc:	4608      	mov	r0, r1
 80069ce:	602b      	str	r3, [r5, #0]
 80069d0:	f7fc fbe2 	bl	8003198 <_sbrk>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_sbrk_r+0x1a>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_sbrk_r+0x1a>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	2000066c 	.word	0x2000066c

080069e4 <_write_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4d07      	ldr	r5, [pc, #28]	@ (8006a04 <_write_r+0x20>)
 80069e8:	4604      	mov	r4, r0
 80069ea:	4608      	mov	r0, r1
 80069ec:	4611      	mov	r1, r2
 80069ee:	2200      	movs	r2, #0
 80069f0:	602a      	str	r2, [r5, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	f7fc fb80 	bl	80030f8 <_write>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d102      	bne.n	8006a02 <_write_r+0x1e>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	b103      	cbz	r3, 8006a02 <_write_r+0x1e>
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	2000066c 	.word	0x2000066c

08006a08 <__errno>:
 8006a08:	4b01      	ldr	r3, [pc, #4]	@ (8006a10 <__errno+0x8>)
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	20000028 	.word	0x20000028

08006a14 <__libc_init_array>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	4d0d      	ldr	r5, [pc, #52]	@ (8006a4c <__libc_init_array+0x38>)
 8006a18:	4c0d      	ldr	r4, [pc, #52]	@ (8006a50 <__libc_init_array+0x3c>)
 8006a1a:	1b64      	subs	r4, r4, r5
 8006a1c:	10a4      	asrs	r4, r4, #2
 8006a1e:	2600      	movs	r6, #0
 8006a20:	42a6      	cmp	r6, r4
 8006a22:	d109      	bne.n	8006a38 <__libc_init_array+0x24>
 8006a24:	4d0b      	ldr	r5, [pc, #44]	@ (8006a54 <__libc_init_array+0x40>)
 8006a26:	4c0c      	ldr	r4, [pc, #48]	@ (8006a58 <__libc_init_array+0x44>)
 8006a28:	f001 ff9e 	bl	8008968 <_init>
 8006a2c:	1b64      	subs	r4, r4, r5
 8006a2e:	10a4      	asrs	r4, r4, #2
 8006a30:	2600      	movs	r6, #0
 8006a32:	42a6      	cmp	r6, r4
 8006a34:	d105      	bne.n	8006a42 <__libc_init_array+0x2e>
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3c:	4798      	blx	r3
 8006a3e:	3601      	adds	r6, #1
 8006a40:	e7ee      	b.n	8006a20 <__libc_init_array+0xc>
 8006a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a46:	4798      	blx	r3
 8006a48:	3601      	adds	r6, #1
 8006a4a:	e7f2      	b.n	8006a32 <__libc_init_array+0x1e>
 8006a4c:	08009158 	.word	0x08009158
 8006a50:	08009158 	.word	0x08009158
 8006a54:	08009158 	.word	0x08009158
 8006a58:	0800915c 	.word	0x0800915c

08006a5c <__retarget_lock_init_recursive>:
 8006a5c:	4770      	bx	lr

08006a5e <__retarget_lock_acquire_recursive>:
 8006a5e:	4770      	bx	lr

08006a60 <__retarget_lock_release_recursive>:
 8006a60:	4770      	bx	lr

08006a62 <memcpy>:
 8006a62:	440a      	add	r2, r1
 8006a64:	4291      	cmp	r1, r2
 8006a66:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a6a:	d100      	bne.n	8006a6e <memcpy+0xc>
 8006a6c:	4770      	bx	lr
 8006a6e:	b510      	push	{r4, lr}
 8006a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a78:	4291      	cmp	r1, r2
 8006a7a:	d1f9      	bne.n	8006a70 <memcpy+0xe>
 8006a7c:	bd10      	pop	{r4, pc}

08006a7e <quorem>:
 8006a7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a82:	6903      	ldr	r3, [r0, #16]
 8006a84:	690c      	ldr	r4, [r1, #16]
 8006a86:	42a3      	cmp	r3, r4
 8006a88:	4607      	mov	r7, r0
 8006a8a:	db7e      	blt.n	8006b8a <quorem+0x10c>
 8006a8c:	3c01      	subs	r4, #1
 8006a8e:	f101 0814 	add.w	r8, r1, #20
 8006a92:	00a3      	lsls	r3, r4, #2
 8006a94:	f100 0514 	add.w	r5, r0, #20
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006aa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ab0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ab4:	d32e      	bcc.n	8006b14 <quorem+0x96>
 8006ab6:	f04f 0a00 	mov.w	sl, #0
 8006aba:	46c4      	mov	ip, r8
 8006abc:	46ae      	mov	lr, r5
 8006abe:	46d3      	mov	fp, sl
 8006ac0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ac4:	b298      	uxth	r0, r3
 8006ac6:	fb06 a000 	mla	r0, r6, r0, sl
 8006aca:	0c02      	lsrs	r2, r0, #16
 8006acc:	0c1b      	lsrs	r3, r3, #16
 8006ace:	fb06 2303 	mla	r3, r6, r3, r2
 8006ad2:	f8de 2000 	ldr.w	r2, [lr]
 8006ad6:	b280      	uxth	r0, r0
 8006ad8:	b292      	uxth	r2, r2
 8006ada:	1a12      	subs	r2, r2, r0
 8006adc:	445a      	add	r2, fp
 8006ade:	f8de 0000 	ldr.w	r0, [lr]
 8006ae2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006aec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006af0:	b292      	uxth	r2, r2
 8006af2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006af6:	45e1      	cmp	r9, ip
 8006af8:	f84e 2b04 	str.w	r2, [lr], #4
 8006afc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b00:	d2de      	bcs.n	8006ac0 <quorem+0x42>
 8006b02:	9b00      	ldr	r3, [sp, #0]
 8006b04:	58eb      	ldr	r3, [r5, r3]
 8006b06:	b92b      	cbnz	r3, 8006b14 <quorem+0x96>
 8006b08:	9b01      	ldr	r3, [sp, #4]
 8006b0a:	3b04      	subs	r3, #4
 8006b0c:	429d      	cmp	r5, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	d32f      	bcc.n	8006b72 <quorem+0xf4>
 8006b12:	613c      	str	r4, [r7, #16]
 8006b14:	4638      	mov	r0, r7
 8006b16:	f001 f8c3 	bl	8007ca0 <__mcmp>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	db25      	blt.n	8006b6a <quorem+0xec>
 8006b1e:	4629      	mov	r1, r5
 8006b20:	2000      	movs	r0, #0
 8006b22:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b26:	f8d1 c000 	ldr.w	ip, [r1]
 8006b2a:	fa1f fe82 	uxth.w	lr, r2
 8006b2e:	fa1f f38c 	uxth.w	r3, ip
 8006b32:	eba3 030e 	sub.w	r3, r3, lr
 8006b36:	4403      	add	r3, r0
 8006b38:	0c12      	lsrs	r2, r2, #16
 8006b3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b48:	45c1      	cmp	r9, r8
 8006b4a:	f841 3b04 	str.w	r3, [r1], #4
 8006b4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b52:	d2e6      	bcs.n	8006b22 <quorem+0xa4>
 8006b54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b5c:	b922      	cbnz	r2, 8006b68 <quorem+0xea>
 8006b5e:	3b04      	subs	r3, #4
 8006b60:	429d      	cmp	r5, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	d30b      	bcc.n	8006b7e <quorem+0x100>
 8006b66:	613c      	str	r4, [r7, #16]
 8006b68:	3601      	adds	r6, #1
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	b003      	add	sp, #12
 8006b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	3b04      	subs	r3, #4
 8006b76:	2a00      	cmp	r2, #0
 8006b78:	d1cb      	bne.n	8006b12 <quorem+0x94>
 8006b7a:	3c01      	subs	r4, #1
 8006b7c:	e7c6      	b.n	8006b0c <quorem+0x8e>
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	d1ef      	bne.n	8006b66 <quorem+0xe8>
 8006b86:	3c01      	subs	r4, #1
 8006b88:	e7ea      	b.n	8006b60 <quorem+0xe2>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e7ee      	b.n	8006b6c <quorem+0xee>
	...

08006b90 <_dtoa_r>:
 8006b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b94:	69c7      	ldr	r7, [r0, #28]
 8006b96:	b099      	sub	sp, #100	@ 0x64
 8006b98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b9c:	ec55 4b10 	vmov	r4, r5, d0
 8006ba0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006ba2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ba4:	4683      	mov	fp, r0
 8006ba6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ba8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006baa:	b97f      	cbnz	r7, 8006bcc <_dtoa_r+0x3c>
 8006bac:	2010      	movs	r0, #16
 8006bae:	f7ff f88d 	bl	8005ccc <malloc>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006bb8:	b920      	cbnz	r0, 8006bc4 <_dtoa_r+0x34>
 8006bba:	4ba7      	ldr	r3, [pc, #668]	@ (8006e58 <_dtoa_r+0x2c8>)
 8006bbc:	21ef      	movs	r1, #239	@ 0xef
 8006bbe:	48a7      	ldr	r0, [pc, #668]	@ (8006e5c <_dtoa_r+0x2cc>)
 8006bc0:	f001 fb94 	bl	80082ec <__assert_func>
 8006bc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006bc8:	6007      	str	r7, [r0, #0]
 8006bca:	60c7      	str	r7, [r0, #12]
 8006bcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bd0:	6819      	ldr	r1, [r3, #0]
 8006bd2:	b159      	cbz	r1, 8006bec <_dtoa_r+0x5c>
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	604a      	str	r2, [r1, #4]
 8006bd8:	2301      	movs	r3, #1
 8006bda:	4093      	lsls	r3, r2
 8006bdc:	608b      	str	r3, [r1, #8]
 8006bde:	4658      	mov	r0, fp
 8006be0:	f000 fe24 	bl	800782c <_Bfree>
 8006be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	1e2b      	subs	r3, r5, #0
 8006bee:	bfb9      	ittee	lt
 8006bf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006bf4:	9303      	strlt	r3, [sp, #12]
 8006bf6:	2300      	movge	r3, #0
 8006bf8:	6033      	strge	r3, [r6, #0]
 8006bfa:	9f03      	ldr	r7, [sp, #12]
 8006bfc:	4b98      	ldr	r3, [pc, #608]	@ (8006e60 <_dtoa_r+0x2d0>)
 8006bfe:	bfbc      	itt	lt
 8006c00:	2201      	movlt	r2, #1
 8006c02:	6032      	strlt	r2, [r6, #0]
 8006c04:	43bb      	bics	r3, r7
 8006c06:	d112      	bne.n	8006c2e <_dtoa_r+0x9e>
 8006c08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c14:	4323      	orrs	r3, r4
 8006c16:	f000 854d 	beq.w	80076b4 <_dtoa_r+0xb24>
 8006c1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006e74 <_dtoa_r+0x2e4>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 854f 	beq.w	80076c4 <_dtoa_r+0xb34>
 8006c26:	f10a 0303 	add.w	r3, sl, #3
 8006c2a:	f000 bd49 	b.w	80076c0 <_dtoa_r+0xb30>
 8006c2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c32:	2200      	movs	r2, #0
 8006c34:	ec51 0b17 	vmov	r0, r1, d7
 8006c38:	2300      	movs	r3, #0
 8006c3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006c3e:	f7f9 ff63 	bl	8000b08 <__aeabi_dcmpeq>
 8006c42:	4680      	mov	r8, r0
 8006c44:	b158      	cbz	r0, 8006c5e <_dtoa_r+0xce>
 8006c46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c48:	2301      	movs	r3, #1
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c4e:	b113      	cbz	r3, 8006c56 <_dtoa_r+0xc6>
 8006c50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c52:	4b84      	ldr	r3, [pc, #528]	@ (8006e64 <_dtoa_r+0x2d4>)
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006e78 <_dtoa_r+0x2e8>
 8006c5a:	f000 bd33 	b.w	80076c4 <_dtoa_r+0xb34>
 8006c5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006c62:	aa16      	add	r2, sp, #88	@ 0x58
 8006c64:	a917      	add	r1, sp, #92	@ 0x5c
 8006c66:	4658      	mov	r0, fp
 8006c68:	f001 f8ca 	bl	8007e00 <__d2b>
 8006c6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006c70:	4681      	mov	r9, r0
 8006c72:	2e00      	cmp	r6, #0
 8006c74:	d077      	beq.n	8006d66 <_dtoa_r+0x1d6>
 8006c76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006c8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c90:	4619      	mov	r1, r3
 8006c92:	2200      	movs	r2, #0
 8006c94:	4b74      	ldr	r3, [pc, #464]	@ (8006e68 <_dtoa_r+0x2d8>)
 8006c96:	f7f9 fb17 	bl	80002c8 <__aeabi_dsub>
 8006c9a:	a369      	add	r3, pc, #420	@ (adr r3, 8006e40 <_dtoa_r+0x2b0>)
 8006c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca0:	f7f9 fcca 	bl	8000638 <__aeabi_dmul>
 8006ca4:	a368      	add	r3, pc, #416	@ (adr r3, 8006e48 <_dtoa_r+0x2b8>)
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	f7f9 fb0f 	bl	80002cc <__adddf3>
 8006cae:	4604      	mov	r4, r0
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	460d      	mov	r5, r1
 8006cb4:	f7f9 fc56 	bl	8000564 <__aeabi_i2d>
 8006cb8:	a365      	add	r3, pc, #404	@ (adr r3, 8006e50 <_dtoa_r+0x2c0>)
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	f7f9 fcbb 	bl	8000638 <__aeabi_dmul>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	4629      	mov	r1, r5
 8006cca:	f7f9 faff 	bl	80002cc <__adddf3>
 8006cce:	4604      	mov	r4, r0
 8006cd0:	460d      	mov	r5, r1
 8006cd2:	f7f9 ff61 	bl	8000b98 <__aeabi_d2iz>
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	4607      	mov	r7, r0
 8006cda:	2300      	movs	r3, #0
 8006cdc:	4620      	mov	r0, r4
 8006cde:	4629      	mov	r1, r5
 8006ce0:	f7f9 ff1c 	bl	8000b1c <__aeabi_dcmplt>
 8006ce4:	b140      	cbz	r0, 8006cf8 <_dtoa_r+0x168>
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f7f9 fc3c 	bl	8000564 <__aeabi_i2d>
 8006cec:	4622      	mov	r2, r4
 8006cee:	462b      	mov	r3, r5
 8006cf0:	f7f9 ff0a 	bl	8000b08 <__aeabi_dcmpeq>
 8006cf4:	b900      	cbnz	r0, 8006cf8 <_dtoa_r+0x168>
 8006cf6:	3f01      	subs	r7, #1
 8006cf8:	2f16      	cmp	r7, #22
 8006cfa:	d851      	bhi.n	8006da0 <_dtoa_r+0x210>
 8006cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8006e6c <_dtoa_r+0x2dc>)
 8006cfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d0a:	f7f9 ff07 	bl	8000b1c <__aeabi_dcmplt>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d048      	beq.n	8006da4 <_dtoa_r+0x214>
 8006d12:	3f01      	subs	r7, #1
 8006d14:	2300      	movs	r3, #0
 8006d16:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d1a:	1b9b      	subs	r3, r3, r6
 8006d1c:	1e5a      	subs	r2, r3, #1
 8006d1e:	bf44      	itt	mi
 8006d20:	f1c3 0801 	rsbmi	r8, r3, #1
 8006d24:	2300      	movmi	r3, #0
 8006d26:	9208      	str	r2, [sp, #32]
 8006d28:	bf54      	ite	pl
 8006d2a:	f04f 0800 	movpl.w	r8, #0
 8006d2e:	9308      	strmi	r3, [sp, #32]
 8006d30:	2f00      	cmp	r7, #0
 8006d32:	db39      	blt.n	8006da8 <_dtoa_r+0x218>
 8006d34:	9b08      	ldr	r3, [sp, #32]
 8006d36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006d38:	443b      	add	r3, r7
 8006d3a:	9308      	str	r3, [sp, #32]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d42:	2b09      	cmp	r3, #9
 8006d44:	d864      	bhi.n	8006e10 <_dtoa_r+0x280>
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	bfc4      	itt	gt
 8006d4a:	3b04      	subgt	r3, #4
 8006d4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d50:	f1a3 0302 	sub.w	r3, r3, #2
 8006d54:	bfcc      	ite	gt
 8006d56:	2400      	movgt	r4, #0
 8006d58:	2401      	movle	r4, #1
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d863      	bhi.n	8006e26 <_dtoa_r+0x296>
 8006d5e:	e8df f003 	tbb	[pc, r3]
 8006d62:	372a      	.short	0x372a
 8006d64:	5535      	.short	0x5535
 8006d66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006d6a:	441e      	add	r6, r3
 8006d6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	bfc1      	itttt	gt
 8006d74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006d78:	409f      	lslgt	r7, r3
 8006d7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006d7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006d82:	bfd6      	itet	le
 8006d84:	f1c3 0320 	rsble	r3, r3, #32
 8006d88:	ea47 0003 	orrgt.w	r0, r7, r3
 8006d8c:	fa04 f003 	lslle.w	r0, r4, r3
 8006d90:	f7f9 fbd8 	bl	8000544 <__aeabi_ui2d>
 8006d94:	2201      	movs	r2, #1
 8006d96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006d9a:	3e01      	subs	r6, #1
 8006d9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006d9e:	e777      	b.n	8006c90 <_dtoa_r+0x100>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e7b8      	b.n	8006d16 <_dtoa_r+0x186>
 8006da4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006da6:	e7b7      	b.n	8006d18 <_dtoa_r+0x188>
 8006da8:	427b      	negs	r3, r7
 8006daa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dac:	2300      	movs	r3, #0
 8006dae:	eba8 0807 	sub.w	r8, r8, r7
 8006db2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006db4:	e7c4      	b.n	8006d40 <_dtoa_r+0x1b0>
 8006db6:	2300      	movs	r3, #0
 8006db8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	dc35      	bgt.n	8006e2c <_dtoa_r+0x29c>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	9307      	str	r3, [sp, #28]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006dca:	e00b      	b.n	8006de4 <_dtoa_r+0x254>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e7f3      	b.n	8006db8 <_dtoa_r+0x228>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dd6:	18fb      	adds	r3, r7, r3
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	9307      	str	r3, [sp, #28]
 8006de0:	bfb8      	it	lt
 8006de2:	2301      	movlt	r3, #1
 8006de4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006de8:	2100      	movs	r1, #0
 8006dea:	2204      	movs	r2, #4
 8006dec:	f102 0514 	add.w	r5, r2, #20
 8006df0:	429d      	cmp	r5, r3
 8006df2:	d91f      	bls.n	8006e34 <_dtoa_r+0x2a4>
 8006df4:	6041      	str	r1, [r0, #4]
 8006df6:	4658      	mov	r0, fp
 8006df8:	f000 fcd8 	bl	80077ac <_Balloc>
 8006dfc:	4682      	mov	sl, r0
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d13c      	bne.n	8006e7c <_dtoa_r+0x2ec>
 8006e02:	4b1b      	ldr	r3, [pc, #108]	@ (8006e70 <_dtoa_r+0x2e0>)
 8006e04:	4602      	mov	r2, r0
 8006e06:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e0a:	e6d8      	b.n	8006bbe <_dtoa_r+0x2e>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e7e0      	b.n	8006dd2 <_dtoa_r+0x242>
 8006e10:	2401      	movs	r4, #1
 8006e12:	2300      	movs	r3, #0
 8006e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e18:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	9307      	str	r3, [sp, #28]
 8006e20:	2200      	movs	r2, #0
 8006e22:	2312      	movs	r3, #18
 8006e24:	e7d0      	b.n	8006dc8 <_dtoa_r+0x238>
 8006e26:	2301      	movs	r3, #1
 8006e28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e2a:	e7f5      	b.n	8006e18 <_dtoa_r+0x288>
 8006e2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	9307      	str	r3, [sp, #28]
 8006e32:	e7d7      	b.n	8006de4 <_dtoa_r+0x254>
 8006e34:	3101      	adds	r1, #1
 8006e36:	0052      	lsls	r2, r2, #1
 8006e38:	e7d8      	b.n	8006dec <_dtoa_r+0x25c>
 8006e3a:	bf00      	nop
 8006e3c:	f3af 8000 	nop.w
 8006e40:	636f4361 	.word	0x636f4361
 8006e44:	3fd287a7 	.word	0x3fd287a7
 8006e48:	8b60c8b3 	.word	0x8b60c8b3
 8006e4c:	3fc68a28 	.word	0x3fc68a28
 8006e50:	509f79fb 	.word	0x509f79fb
 8006e54:	3fd34413 	.word	0x3fd34413
 8006e58:	08008e21 	.word	0x08008e21
 8006e5c:	08008e38 	.word	0x08008e38
 8006e60:	7ff00000 	.word	0x7ff00000
 8006e64:	08008df1 	.word	0x08008df1
 8006e68:	3ff80000 	.word	0x3ff80000
 8006e6c:	08008f30 	.word	0x08008f30
 8006e70:	08008e90 	.word	0x08008e90
 8006e74:	08008e1d 	.word	0x08008e1d
 8006e78:	08008df0 	.word	0x08008df0
 8006e7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e80:	6018      	str	r0, [r3, #0]
 8006e82:	9b07      	ldr	r3, [sp, #28]
 8006e84:	2b0e      	cmp	r3, #14
 8006e86:	f200 80a4 	bhi.w	8006fd2 <_dtoa_r+0x442>
 8006e8a:	2c00      	cmp	r4, #0
 8006e8c:	f000 80a1 	beq.w	8006fd2 <_dtoa_r+0x442>
 8006e90:	2f00      	cmp	r7, #0
 8006e92:	dd33      	ble.n	8006efc <_dtoa_r+0x36c>
 8006e94:	4bad      	ldr	r3, [pc, #692]	@ (800714c <_dtoa_r+0x5bc>)
 8006e96:	f007 020f 	and.w	r2, r7, #15
 8006e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e9e:	ed93 7b00 	vldr	d7, [r3]
 8006ea2:	05f8      	lsls	r0, r7, #23
 8006ea4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006ea8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006eac:	d516      	bpl.n	8006edc <_dtoa_r+0x34c>
 8006eae:	4ba8      	ldr	r3, [pc, #672]	@ (8007150 <_dtoa_r+0x5c0>)
 8006eb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006eb8:	f7f9 fce8 	bl	800088c <__aeabi_ddiv>
 8006ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ec0:	f004 040f 	and.w	r4, r4, #15
 8006ec4:	2603      	movs	r6, #3
 8006ec6:	4da2      	ldr	r5, [pc, #648]	@ (8007150 <_dtoa_r+0x5c0>)
 8006ec8:	b954      	cbnz	r4, 8006ee0 <_dtoa_r+0x350>
 8006eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ed2:	f7f9 fcdb 	bl	800088c <__aeabi_ddiv>
 8006ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eda:	e028      	b.n	8006f2e <_dtoa_r+0x39e>
 8006edc:	2602      	movs	r6, #2
 8006ede:	e7f2      	b.n	8006ec6 <_dtoa_r+0x336>
 8006ee0:	07e1      	lsls	r1, r4, #31
 8006ee2:	d508      	bpl.n	8006ef6 <_dtoa_r+0x366>
 8006ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ee8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006eec:	f7f9 fba4 	bl	8000638 <__aeabi_dmul>
 8006ef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	1064      	asrs	r4, r4, #1
 8006ef8:	3508      	adds	r5, #8
 8006efa:	e7e5      	b.n	8006ec8 <_dtoa_r+0x338>
 8006efc:	f000 80d2 	beq.w	80070a4 <_dtoa_r+0x514>
 8006f00:	427c      	negs	r4, r7
 8006f02:	4b92      	ldr	r3, [pc, #584]	@ (800714c <_dtoa_r+0x5bc>)
 8006f04:	4d92      	ldr	r5, [pc, #584]	@ (8007150 <_dtoa_r+0x5c0>)
 8006f06:	f004 020f 	and.w	r2, r4, #15
 8006f0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f16:	f7f9 fb8f 	bl	8000638 <__aeabi_dmul>
 8006f1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f1e:	1124      	asrs	r4, r4, #4
 8006f20:	2300      	movs	r3, #0
 8006f22:	2602      	movs	r6, #2
 8006f24:	2c00      	cmp	r4, #0
 8006f26:	f040 80b2 	bne.w	800708e <_dtoa_r+0x4fe>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1d3      	bne.n	8006ed6 <_dtoa_r+0x346>
 8006f2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 80b7 	beq.w	80070a8 <_dtoa_r+0x518>
 8006f3a:	4b86      	ldr	r3, [pc, #536]	@ (8007154 <_dtoa_r+0x5c4>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	4620      	mov	r0, r4
 8006f40:	4629      	mov	r1, r5
 8006f42:	f7f9 fdeb 	bl	8000b1c <__aeabi_dcmplt>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	f000 80ae 	beq.w	80070a8 <_dtoa_r+0x518>
 8006f4c:	9b07      	ldr	r3, [sp, #28]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 80aa 	beq.w	80070a8 <_dtoa_r+0x518>
 8006f54:	9b00      	ldr	r3, [sp, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	dd37      	ble.n	8006fca <_dtoa_r+0x43a>
 8006f5a:	1e7b      	subs	r3, r7, #1
 8006f5c:	9304      	str	r3, [sp, #16]
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4b7d      	ldr	r3, [pc, #500]	@ (8007158 <_dtoa_r+0x5c8>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	4629      	mov	r1, r5
 8006f66:	f7f9 fb67 	bl	8000638 <__aeabi_dmul>
 8006f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f6e:	9c00      	ldr	r4, [sp, #0]
 8006f70:	3601      	adds	r6, #1
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7f9 faf6 	bl	8000564 <__aeabi_i2d>
 8006f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f7c:	f7f9 fb5c 	bl	8000638 <__aeabi_dmul>
 8006f80:	4b76      	ldr	r3, [pc, #472]	@ (800715c <_dtoa_r+0x5cc>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	f7f9 f9a2 	bl	80002cc <__adddf3>
 8006f88:	4605      	mov	r5, r0
 8006f8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006f8e:	2c00      	cmp	r4, #0
 8006f90:	f040 808d 	bne.w	80070ae <_dtoa_r+0x51e>
 8006f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f98:	4b71      	ldr	r3, [pc, #452]	@ (8007160 <_dtoa_r+0x5d0>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f7f9 f994 	bl	80002c8 <__aeabi_dsub>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fa8:	462a      	mov	r2, r5
 8006faa:	4633      	mov	r3, r6
 8006fac:	f7f9 fdd4 	bl	8000b58 <__aeabi_dcmpgt>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	f040 828b 	bne.w	80074cc <_dtoa_r+0x93c>
 8006fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fba:	462a      	mov	r2, r5
 8006fbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006fc0:	f7f9 fdac 	bl	8000b1c <__aeabi_dcmplt>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	f040 8128 	bne.w	800721a <_dtoa_r+0x68a>
 8006fca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006fce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006fd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f2c0 815a 	blt.w	800728e <_dtoa_r+0x6fe>
 8006fda:	2f0e      	cmp	r7, #14
 8006fdc:	f300 8157 	bgt.w	800728e <_dtoa_r+0x6fe>
 8006fe0:	4b5a      	ldr	r3, [pc, #360]	@ (800714c <_dtoa_r+0x5bc>)
 8006fe2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fe6:	ed93 7b00 	vldr	d7, [r3]
 8006fea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	ed8d 7b00 	vstr	d7, [sp]
 8006ff2:	da03      	bge.n	8006ffc <_dtoa_r+0x46c>
 8006ff4:	9b07      	ldr	r3, [sp, #28]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f340 8101 	ble.w	80071fe <_dtoa_r+0x66e>
 8006ffc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007000:	4656      	mov	r6, sl
 8007002:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007006:	4620      	mov	r0, r4
 8007008:	4629      	mov	r1, r5
 800700a:	f7f9 fc3f 	bl	800088c <__aeabi_ddiv>
 800700e:	f7f9 fdc3 	bl	8000b98 <__aeabi_d2iz>
 8007012:	4680      	mov	r8, r0
 8007014:	f7f9 faa6 	bl	8000564 <__aeabi_i2d>
 8007018:	e9dd 2300 	ldrd	r2, r3, [sp]
 800701c:	f7f9 fb0c 	bl	8000638 <__aeabi_dmul>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	4620      	mov	r0, r4
 8007026:	4629      	mov	r1, r5
 8007028:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800702c:	f7f9 f94c 	bl	80002c8 <__aeabi_dsub>
 8007030:	f806 4b01 	strb.w	r4, [r6], #1
 8007034:	9d07      	ldr	r5, [sp, #28]
 8007036:	eba6 040a 	sub.w	r4, r6, sl
 800703a:	42a5      	cmp	r5, r4
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	f040 8117 	bne.w	8007272 <_dtoa_r+0x6e2>
 8007044:	f7f9 f942 	bl	80002cc <__adddf3>
 8007048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800704c:	4604      	mov	r4, r0
 800704e:	460d      	mov	r5, r1
 8007050:	f7f9 fd82 	bl	8000b58 <__aeabi_dcmpgt>
 8007054:	2800      	cmp	r0, #0
 8007056:	f040 80f9 	bne.w	800724c <_dtoa_r+0x6bc>
 800705a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800705e:	4620      	mov	r0, r4
 8007060:	4629      	mov	r1, r5
 8007062:	f7f9 fd51 	bl	8000b08 <__aeabi_dcmpeq>
 8007066:	b118      	cbz	r0, 8007070 <_dtoa_r+0x4e0>
 8007068:	f018 0f01 	tst.w	r8, #1
 800706c:	f040 80ee 	bne.w	800724c <_dtoa_r+0x6bc>
 8007070:	4649      	mov	r1, r9
 8007072:	4658      	mov	r0, fp
 8007074:	f000 fbda 	bl	800782c <_Bfree>
 8007078:	2300      	movs	r3, #0
 800707a:	7033      	strb	r3, [r6, #0]
 800707c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800707e:	3701      	adds	r7, #1
 8007080:	601f      	str	r7, [r3, #0]
 8007082:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 831d 	beq.w	80076c4 <_dtoa_r+0xb34>
 800708a:	601e      	str	r6, [r3, #0]
 800708c:	e31a      	b.n	80076c4 <_dtoa_r+0xb34>
 800708e:	07e2      	lsls	r2, r4, #31
 8007090:	d505      	bpl.n	800709e <_dtoa_r+0x50e>
 8007092:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007096:	f7f9 facf 	bl	8000638 <__aeabi_dmul>
 800709a:	3601      	adds	r6, #1
 800709c:	2301      	movs	r3, #1
 800709e:	1064      	asrs	r4, r4, #1
 80070a0:	3508      	adds	r5, #8
 80070a2:	e73f      	b.n	8006f24 <_dtoa_r+0x394>
 80070a4:	2602      	movs	r6, #2
 80070a6:	e742      	b.n	8006f2e <_dtoa_r+0x39e>
 80070a8:	9c07      	ldr	r4, [sp, #28]
 80070aa:	9704      	str	r7, [sp, #16]
 80070ac:	e761      	b.n	8006f72 <_dtoa_r+0x3e2>
 80070ae:	4b27      	ldr	r3, [pc, #156]	@ (800714c <_dtoa_r+0x5bc>)
 80070b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070ba:	4454      	add	r4, sl
 80070bc:	2900      	cmp	r1, #0
 80070be:	d053      	beq.n	8007168 <_dtoa_r+0x5d8>
 80070c0:	4928      	ldr	r1, [pc, #160]	@ (8007164 <_dtoa_r+0x5d4>)
 80070c2:	2000      	movs	r0, #0
 80070c4:	f7f9 fbe2 	bl	800088c <__aeabi_ddiv>
 80070c8:	4633      	mov	r3, r6
 80070ca:	462a      	mov	r2, r5
 80070cc:	f7f9 f8fc 	bl	80002c8 <__aeabi_dsub>
 80070d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070d4:	4656      	mov	r6, sl
 80070d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070da:	f7f9 fd5d 	bl	8000b98 <__aeabi_d2iz>
 80070de:	4605      	mov	r5, r0
 80070e0:	f7f9 fa40 	bl	8000564 <__aeabi_i2d>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ec:	f7f9 f8ec 	bl	80002c8 <__aeabi_dsub>
 80070f0:	3530      	adds	r5, #48	@ 0x30
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070fa:	f806 5b01 	strb.w	r5, [r6], #1
 80070fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007102:	f7f9 fd0b 	bl	8000b1c <__aeabi_dcmplt>
 8007106:	2800      	cmp	r0, #0
 8007108:	d171      	bne.n	80071ee <_dtoa_r+0x65e>
 800710a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800710e:	4911      	ldr	r1, [pc, #68]	@ (8007154 <_dtoa_r+0x5c4>)
 8007110:	2000      	movs	r0, #0
 8007112:	f7f9 f8d9 	bl	80002c8 <__aeabi_dsub>
 8007116:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800711a:	f7f9 fcff 	bl	8000b1c <__aeabi_dcmplt>
 800711e:	2800      	cmp	r0, #0
 8007120:	f040 8095 	bne.w	800724e <_dtoa_r+0x6be>
 8007124:	42a6      	cmp	r6, r4
 8007126:	f43f af50 	beq.w	8006fca <_dtoa_r+0x43a>
 800712a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800712e:	4b0a      	ldr	r3, [pc, #40]	@ (8007158 <_dtoa_r+0x5c8>)
 8007130:	2200      	movs	r2, #0
 8007132:	f7f9 fa81 	bl	8000638 <__aeabi_dmul>
 8007136:	4b08      	ldr	r3, [pc, #32]	@ (8007158 <_dtoa_r+0x5c8>)
 8007138:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800713c:	2200      	movs	r2, #0
 800713e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007142:	f7f9 fa79 	bl	8000638 <__aeabi_dmul>
 8007146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800714a:	e7c4      	b.n	80070d6 <_dtoa_r+0x546>
 800714c:	08008f30 	.word	0x08008f30
 8007150:	08008f08 	.word	0x08008f08
 8007154:	3ff00000 	.word	0x3ff00000
 8007158:	40240000 	.word	0x40240000
 800715c:	401c0000 	.word	0x401c0000
 8007160:	40140000 	.word	0x40140000
 8007164:	3fe00000 	.word	0x3fe00000
 8007168:	4631      	mov	r1, r6
 800716a:	4628      	mov	r0, r5
 800716c:	f7f9 fa64 	bl	8000638 <__aeabi_dmul>
 8007170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007174:	9415      	str	r4, [sp, #84]	@ 0x54
 8007176:	4656      	mov	r6, sl
 8007178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800717c:	f7f9 fd0c 	bl	8000b98 <__aeabi_d2iz>
 8007180:	4605      	mov	r5, r0
 8007182:	f7f9 f9ef 	bl	8000564 <__aeabi_i2d>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800718e:	f7f9 f89b 	bl	80002c8 <__aeabi_dsub>
 8007192:	3530      	adds	r5, #48	@ 0x30
 8007194:	f806 5b01 	strb.w	r5, [r6], #1
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	42a6      	cmp	r6, r4
 800719e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071a2:	f04f 0200 	mov.w	r2, #0
 80071a6:	d124      	bne.n	80071f2 <_dtoa_r+0x662>
 80071a8:	4bac      	ldr	r3, [pc, #688]	@ (800745c <_dtoa_r+0x8cc>)
 80071aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071ae:	f7f9 f88d 	bl	80002cc <__adddf3>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ba:	f7f9 fccd 	bl	8000b58 <__aeabi_dcmpgt>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d145      	bne.n	800724e <_dtoa_r+0x6be>
 80071c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071c6:	49a5      	ldr	r1, [pc, #660]	@ (800745c <_dtoa_r+0x8cc>)
 80071c8:	2000      	movs	r0, #0
 80071ca:	f7f9 f87d 	bl	80002c8 <__aeabi_dsub>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071d6:	f7f9 fca1 	bl	8000b1c <__aeabi_dcmplt>
 80071da:	2800      	cmp	r0, #0
 80071dc:	f43f aef5 	beq.w	8006fca <_dtoa_r+0x43a>
 80071e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80071e2:	1e73      	subs	r3, r6, #1
 80071e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80071e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80071ea:	2b30      	cmp	r3, #48	@ 0x30
 80071ec:	d0f8      	beq.n	80071e0 <_dtoa_r+0x650>
 80071ee:	9f04      	ldr	r7, [sp, #16]
 80071f0:	e73e      	b.n	8007070 <_dtoa_r+0x4e0>
 80071f2:	4b9b      	ldr	r3, [pc, #620]	@ (8007460 <_dtoa_r+0x8d0>)
 80071f4:	f7f9 fa20 	bl	8000638 <__aeabi_dmul>
 80071f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071fc:	e7bc      	b.n	8007178 <_dtoa_r+0x5e8>
 80071fe:	d10c      	bne.n	800721a <_dtoa_r+0x68a>
 8007200:	4b98      	ldr	r3, [pc, #608]	@ (8007464 <_dtoa_r+0x8d4>)
 8007202:	2200      	movs	r2, #0
 8007204:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007208:	f7f9 fa16 	bl	8000638 <__aeabi_dmul>
 800720c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007210:	f7f9 fc98 	bl	8000b44 <__aeabi_dcmpge>
 8007214:	2800      	cmp	r0, #0
 8007216:	f000 8157 	beq.w	80074c8 <_dtoa_r+0x938>
 800721a:	2400      	movs	r4, #0
 800721c:	4625      	mov	r5, r4
 800721e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007220:	43db      	mvns	r3, r3
 8007222:	9304      	str	r3, [sp, #16]
 8007224:	4656      	mov	r6, sl
 8007226:	2700      	movs	r7, #0
 8007228:	4621      	mov	r1, r4
 800722a:	4658      	mov	r0, fp
 800722c:	f000 fafe 	bl	800782c <_Bfree>
 8007230:	2d00      	cmp	r5, #0
 8007232:	d0dc      	beq.n	80071ee <_dtoa_r+0x65e>
 8007234:	b12f      	cbz	r7, 8007242 <_dtoa_r+0x6b2>
 8007236:	42af      	cmp	r7, r5
 8007238:	d003      	beq.n	8007242 <_dtoa_r+0x6b2>
 800723a:	4639      	mov	r1, r7
 800723c:	4658      	mov	r0, fp
 800723e:	f000 faf5 	bl	800782c <_Bfree>
 8007242:	4629      	mov	r1, r5
 8007244:	4658      	mov	r0, fp
 8007246:	f000 faf1 	bl	800782c <_Bfree>
 800724a:	e7d0      	b.n	80071ee <_dtoa_r+0x65e>
 800724c:	9704      	str	r7, [sp, #16]
 800724e:	4633      	mov	r3, r6
 8007250:	461e      	mov	r6, r3
 8007252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007256:	2a39      	cmp	r2, #57	@ 0x39
 8007258:	d107      	bne.n	800726a <_dtoa_r+0x6da>
 800725a:	459a      	cmp	sl, r3
 800725c:	d1f8      	bne.n	8007250 <_dtoa_r+0x6c0>
 800725e:	9a04      	ldr	r2, [sp, #16]
 8007260:	3201      	adds	r2, #1
 8007262:	9204      	str	r2, [sp, #16]
 8007264:	2230      	movs	r2, #48	@ 0x30
 8007266:	f88a 2000 	strb.w	r2, [sl]
 800726a:	781a      	ldrb	r2, [r3, #0]
 800726c:	3201      	adds	r2, #1
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	e7bd      	b.n	80071ee <_dtoa_r+0x65e>
 8007272:	4b7b      	ldr	r3, [pc, #492]	@ (8007460 <_dtoa_r+0x8d0>)
 8007274:	2200      	movs	r2, #0
 8007276:	f7f9 f9df 	bl	8000638 <__aeabi_dmul>
 800727a:	2200      	movs	r2, #0
 800727c:	2300      	movs	r3, #0
 800727e:	4604      	mov	r4, r0
 8007280:	460d      	mov	r5, r1
 8007282:	f7f9 fc41 	bl	8000b08 <__aeabi_dcmpeq>
 8007286:	2800      	cmp	r0, #0
 8007288:	f43f aebb 	beq.w	8007002 <_dtoa_r+0x472>
 800728c:	e6f0      	b.n	8007070 <_dtoa_r+0x4e0>
 800728e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007290:	2a00      	cmp	r2, #0
 8007292:	f000 80db 	beq.w	800744c <_dtoa_r+0x8bc>
 8007296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007298:	2a01      	cmp	r2, #1
 800729a:	f300 80bf 	bgt.w	800741c <_dtoa_r+0x88c>
 800729e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80072a0:	2a00      	cmp	r2, #0
 80072a2:	f000 80b7 	beq.w	8007414 <_dtoa_r+0x884>
 80072a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80072aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072ac:	4646      	mov	r6, r8
 80072ae:	9a08      	ldr	r2, [sp, #32]
 80072b0:	2101      	movs	r1, #1
 80072b2:	441a      	add	r2, r3
 80072b4:	4658      	mov	r0, fp
 80072b6:	4498      	add	r8, r3
 80072b8:	9208      	str	r2, [sp, #32]
 80072ba:	f000 fb6b 	bl	8007994 <__i2b>
 80072be:	4605      	mov	r5, r0
 80072c0:	b15e      	cbz	r6, 80072da <_dtoa_r+0x74a>
 80072c2:	9b08      	ldr	r3, [sp, #32]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dd08      	ble.n	80072da <_dtoa_r+0x74a>
 80072c8:	42b3      	cmp	r3, r6
 80072ca:	9a08      	ldr	r2, [sp, #32]
 80072cc:	bfa8      	it	ge
 80072ce:	4633      	movge	r3, r6
 80072d0:	eba8 0803 	sub.w	r8, r8, r3
 80072d4:	1af6      	subs	r6, r6, r3
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	9308      	str	r3, [sp, #32]
 80072da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072dc:	b1f3      	cbz	r3, 800731c <_dtoa_r+0x78c>
 80072de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 80b7 	beq.w	8007454 <_dtoa_r+0x8c4>
 80072e6:	b18c      	cbz	r4, 800730c <_dtoa_r+0x77c>
 80072e8:	4629      	mov	r1, r5
 80072ea:	4622      	mov	r2, r4
 80072ec:	4658      	mov	r0, fp
 80072ee:	f000 fc11 	bl	8007b14 <__pow5mult>
 80072f2:	464a      	mov	r2, r9
 80072f4:	4601      	mov	r1, r0
 80072f6:	4605      	mov	r5, r0
 80072f8:	4658      	mov	r0, fp
 80072fa:	f000 fb61 	bl	80079c0 <__multiply>
 80072fe:	4649      	mov	r1, r9
 8007300:	9004      	str	r0, [sp, #16]
 8007302:	4658      	mov	r0, fp
 8007304:	f000 fa92 	bl	800782c <_Bfree>
 8007308:	9b04      	ldr	r3, [sp, #16]
 800730a:	4699      	mov	r9, r3
 800730c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800730e:	1b1a      	subs	r2, r3, r4
 8007310:	d004      	beq.n	800731c <_dtoa_r+0x78c>
 8007312:	4649      	mov	r1, r9
 8007314:	4658      	mov	r0, fp
 8007316:	f000 fbfd 	bl	8007b14 <__pow5mult>
 800731a:	4681      	mov	r9, r0
 800731c:	2101      	movs	r1, #1
 800731e:	4658      	mov	r0, fp
 8007320:	f000 fb38 	bl	8007994 <__i2b>
 8007324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007326:	4604      	mov	r4, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 81cf 	beq.w	80076cc <_dtoa_r+0xb3c>
 800732e:	461a      	mov	r2, r3
 8007330:	4601      	mov	r1, r0
 8007332:	4658      	mov	r0, fp
 8007334:	f000 fbee 	bl	8007b14 <__pow5mult>
 8007338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800733a:	2b01      	cmp	r3, #1
 800733c:	4604      	mov	r4, r0
 800733e:	f300 8095 	bgt.w	800746c <_dtoa_r+0x8dc>
 8007342:	9b02      	ldr	r3, [sp, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	f040 8087 	bne.w	8007458 <_dtoa_r+0x8c8>
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007350:	2b00      	cmp	r3, #0
 8007352:	f040 8089 	bne.w	8007468 <_dtoa_r+0x8d8>
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800735c:	0d1b      	lsrs	r3, r3, #20
 800735e:	051b      	lsls	r3, r3, #20
 8007360:	b12b      	cbz	r3, 800736e <_dtoa_r+0x7de>
 8007362:	9b08      	ldr	r3, [sp, #32]
 8007364:	3301      	adds	r3, #1
 8007366:	9308      	str	r3, [sp, #32]
 8007368:	f108 0801 	add.w	r8, r8, #1
 800736c:	2301      	movs	r3, #1
 800736e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 81b0 	beq.w	80076d8 <_dtoa_r+0xb48>
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800737e:	6918      	ldr	r0, [r3, #16]
 8007380:	f000 fabc 	bl	80078fc <__hi0bits>
 8007384:	f1c0 0020 	rsb	r0, r0, #32
 8007388:	9b08      	ldr	r3, [sp, #32]
 800738a:	4418      	add	r0, r3
 800738c:	f010 001f 	ands.w	r0, r0, #31
 8007390:	d077      	beq.n	8007482 <_dtoa_r+0x8f2>
 8007392:	f1c0 0320 	rsb	r3, r0, #32
 8007396:	2b04      	cmp	r3, #4
 8007398:	dd6b      	ble.n	8007472 <_dtoa_r+0x8e2>
 800739a:	9b08      	ldr	r3, [sp, #32]
 800739c:	f1c0 001c 	rsb	r0, r0, #28
 80073a0:	4403      	add	r3, r0
 80073a2:	4480      	add	r8, r0
 80073a4:	4406      	add	r6, r0
 80073a6:	9308      	str	r3, [sp, #32]
 80073a8:	f1b8 0f00 	cmp.w	r8, #0
 80073ac:	dd05      	ble.n	80073ba <_dtoa_r+0x82a>
 80073ae:	4649      	mov	r1, r9
 80073b0:	4642      	mov	r2, r8
 80073b2:	4658      	mov	r0, fp
 80073b4:	f000 fc08 	bl	8007bc8 <__lshift>
 80073b8:	4681      	mov	r9, r0
 80073ba:	9b08      	ldr	r3, [sp, #32]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	dd05      	ble.n	80073cc <_dtoa_r+0x83c>
 80073c0:	4621      	mov	r1, r4
 80073c2:	461a      	mov	r2, r3
 80073c4:	4658      	mov	r0, fp
 80073c6:	f000 fbff 	bl	8007bc8 <__lshift>
 80073ca:	4604      	mov	r4, r0
 80073cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d059      	beq.n	8007486 <_dtoa_r+0x8f6>
 80073d2:	4621      	mov	r1, r4
 80073d4:	4648      	mov	r0, r9
 80073d6:	f000 fc63 	bl	8007ca0 <__mcmp>
 80073da:	2800      	cmp	r0, #0
 80073dc:	da53      	bge.n	8007486 <_dtoa_r+0x8f6>
 80073de:	1e7b      	subs	r3, r7, #1
 80073e0:	9304      	str	r3, [sp, #16]
 80073e2:	4649      	mov	r1, r9
 80073e4:	2300      	movs	r3, #0
 80073e6:	220a      	movs	r2, #10
 80073e8:	4658      	mov	r0, fp
 80073ea:	f000 fa41 	bl	8007870 <__multadd>
 80073ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073f0:	4681      	mov	r9, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 8172 	beq.w	80076dc <_dtoa_r+0xb4c>
 80073f8:	2300      	movs	r3, #0
 80073fa:	4629      	mov	r1, r5
 80073fc:	220a      	movs	r2, #10
 80073fe:	4658      	mov	r0, fp
 8007400:	f000 fa36 	bl	8007870 <__multadd>
 8007404:	9b00      	ldr	r3, [sp, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	4605      	mov	r5, r0
 800740a:	dc67      	bgt.n	80074dc <_dtoa_r+0x94c>
 800740c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740e:	2b02      	cmp	r3, #2
 8007410:	dc41      	bgt.n	8007496 <_dtoa_r+0x906>
 8007412:	e063      	b.n	80074dc <_dtoa_r+0x94c>
 8007414:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007416:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800741a:	e746      	b.n	80072aa <_dtoa_r+0x71a>
 800741c:	9b07      	ldr	r3, [sp, #28]
 800741e:	1e5c      	subs	r4, r3, #1
 8007420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007422:	42a3      	cmp	r3, r4
 8007424:	bfbf      	itttt	lt
 8007426:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007428:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800742a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800742c:	1ae3      	sublt	r3, r4, r3
 800742e:	bfb4      	ite	lt
 8007430:	18d2      	addlt	r2, r2, r3
 8007432:	1b1c      	subge	r4, r3, r4
 8007434:	9b07      	ldr	r3, [sp, #28]
 8007436:	bfbc      	itt	lt
 8007438:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800743a:	2400      	movlt	r4, #0
 800743c:	2b00      	cmp	r3, #0
 800743e:	bfb5      	itete	lt
 8007440:	eba8 0603 	sublt.w	r6, r8, r3
 8007444:	9b07      	ldrge	r3, [sp, #28]
 8007446:	2300      	movlt	r3, #0
 8007448:	4646      	movge	r6, r8
 800744a:	e730      	b.n	80072ae <_dtoa_r+0x71e>
 800744c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800744e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007450:	4646      	mov	r6, r8
 8007452:	e735      	b.n	80072c0 <_dtoa_r+0x730>
 8007454:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007456:	e75c      	b.n	8007312 <_dtoa_r+0x782>
 8007458:	2300      	movs	r3, #0
 800745a:	e788      	b.n	800736e <_dtoa_r+0x7de>
 800745c:	3fe00000 	.word	0x3fe00000
 8007460:	40240000 	.word	0x40240000
 8007464:	40140000 	.word	0x40140000
 8007468:	9b02      	ldr	r3, [sp, #8]
 800746a:	e780      	b.n	800736e <_dtoa_r+0x7de>
 800746c:	2300      	movs	r3, #0
 800746e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007470:	e782      	b.n	8007378 <_dtoa_r+0x7e8>
 8007472:	d099      	beq.n	80073a8 <_dtoa_r+0x818>
 8007474:	9a08      	ldr	r2, [sp, #32]
 8007476:	331c      	adds	r3, #28
 8007478:	441a      	add	r2, r3
 800747a:	4498      	add	r8, r3
 800747c:	441e      	add	r6, r3
 800747e:	9208      	str	r2, [sp, #32]
 8007480:	e792      	b.n	80073a8 <_dtoa_r+0x818>
 8007482:	4603      	mov	r3, r0
 8007484:	e7f6      	b.n	8007474 <_dtoa_r+0x8e4>
 8007486:	9b07      	ldr	r3, [sp, #28]
 8007488:	9704      	str	r7, [sp, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	dc20      	bgt.n	80074d0 <_dtoa_r+0x940>
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007492:	2b02      	cmp	r3, #2
 8007494:	dd1e      	ble.n	80074d4 <_dtoa_r+0x944>
 8007496:	9b00      	ldr	r3, [sp, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	f47f aec0 	bne.w	800721e <_dtoa_r+0x68e>
 800749e:	4621      	mov	r1, r4
 80074a0:	2205      	movs	r2, #5
 80074a2:	4658      	mov	r0, fp
 80074a4:	f000 f9e4 	bl	8007870 <__multadd>
 80074a8:	4601      	mov	r1, r0
 80074aa:	4604      	mov	r4, r0
 80074ac:	4648      	mov	r0, r9
 80074ae:	f000 fbf7 	bl	8007ca0 <__mcmp>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	f77f aeb3 	ble.w	800721e <_dtoa_r+0x68e>
 80074b8:	4656      	mov	r6, sl
 80074ba:	2331      	movs	r3, #49	@ 0x31
 80074bc:	f806 3b01 	strb.w	r3, [r6], #1
 80074c0:	9b04      	ldr	r3, [sp, #16]
 80074c2:	3301      	adds	r3, #1
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	e6ae      	b.n	8007226 <_dtoa_r+0x696>
 80074c8:	9c07      	ldr	r4, [sp, #28]
 80074ca:	9704      	str	r7, [sp, #16]
 80074cc:	4625      	mov	r5, r4
 80074ce:	e7f3      	b.n	80074b8 <_dtoa_r+0x928>
 80074d0:	9b07      	ldr	r3, [sp, #28]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 8104 	beq.w	80076e4 <_dtoa_r+0xb54>
 80074dc:	2e00      	cmp	r6, #0
 80074de:	dd05      	ble.n	80074ec <_dtoa_r+0x95c>
 80074e0:	4629      	mov	r1, r5
 80074e2:	4632      	mov	r2, r6
 80074e4:	4658      	mov	r0, fp
 80074e6:	f000 fb6f 	bl	8007bc8 <__lshift>
 80074ea:	4605      	mov	r5, r0
 80074ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d05a      	beq.n	80075a8 <_dtoa_r+0xa18>
 80074f2:	6869      	ldr	r1, [r5, #4]
 80074f4:	4658      	mov	r0, fp
 80074f6:	f000 f959 	bl	80077ac <_Balloc>
 80074fa:	4606      	mov	r6, r0
 80074fc:	b928      	cbnz	r0, 800750a <_dtoa_r+0x97a>
 80074fe:	4b84      	ldr	r3, [pc, #528]	@ (8007710 <_dtoa_r+0xb80>)
 8007500:	4602      	mov	r2, r0
 8007502:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007506:	f7ff bb5a 	b.w	8006bbe <_dtoa_r+0x2e>
 800750a:	692a      	ldr	r2, [r5, #16]
 800750c:	3202      	adds	r2, #2
 800750e:	0092      	lsls	r2, r2, #2
 8007510:	f105 010c 	add.w	r1, r5, #12
 8007514:	300c      	adds	r0, #12
 8007516:	f7ff faa4 	bl	8006a62 <memcpy>
 800751a:	2201      	movs	r2, #1
 800751c:	4631      	mov	r1, r6
 800751e:	4658      	mov	r0, fp
 8007520:	f000 fb52 	bl	8007bc8 <__lshift>
 8007524:	f10a 0301 	add.w	r3, sl, #1
 8007528:	9307      	str	r3, [sp, #28]
 800752a:	9b00      	ldr	r3, [sp, #0]
 800752c:	4453      	add	r3, sl
 800752e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007530:	9b02      	ldr	r3, [sp, #8]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	462f      	mov	r7, r5
 8007538:	930a      	str	r3, [sp, #40]	@ 0x28
 800753a:	4605      	mov	r5, r0
 800753c:	9b07      	ldr	r3, [sp, #28]
 800753e:	4621      	mov	r1, r4
 8007540:	3b01      	subs	r3, #1
 8007542:	4648      	mov	r0, r9
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	f7ff fa9a 	bl	8006a7e <quorem>
 800754a:	4639      	mov	r1, r7
 800754c:	9002      	str	r0, [sp, #8]
 800754e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007552:	4648      	mov	r0, r9
 8007554:	f000 fba4 	bl	8007ca0 <__mcmp>
 8007558:	462a      	mov	r2, r5
 800755a:	9008      	str	r0, [sp, #32]
 800755c:	4621      	mov	r1, r4
 800755e:	4658      	mov	r0, fp
 8007560:	f000 fbba 	bl	8007cd8 <__mdiff>
 8007564:	68c2      	ldr	r2, [r0, #12]
 8007566:	4606      	mov	r6, r0
 8007568:	bb02      	cbnz	r2, 80075ac <_dtoa_r+0xa1c>
 800756a:	4601      	mov	r1, r0
 800756c:	4648      	mov	r0, r9
 800756e:	f000 fb97 	bl	8007ca0 <__mcmp>
 8007572:	4602      	mov	r2, r0
 8007574:	4631      	mov	r1, r6
 8007576:	4658      	mov	r0, fp
 8007578:	920e      	str	r2, [sp, #56]	@ 0x38
 800757a:	f000 f957 	bl	800782c <_Bfree>
 800757e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007580:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007582:	9e07      	ldr	r6, [sp, #28]
 8007584:	ea43 0102 	orr.w	r1, r3, r2
 8007588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800758a:	4319      	orrs	r1, r3
 800758c:	d110      	bne.n	80075b0 <_dtoa_r+0xa20>
 800758e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007592:	d029      	beq.n	80075e8 <_dtoa_r+0xa58>
 8007594:	9b08      	ldr	r3, [sp, #32]
 8007596:	2b00      	cmp	r3, #0
 8007598:	dd02      	ble.n	80075a0 <_dtoa_r+0xa10>
 800759a:	9b02      	ldr	r3, [sp, #8]
 800759c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80075a0:	9b00      	ldr	r3, [sp, #0]
 80075a2:	f883 8000 	strb.w	r8, [r3]
 80075a6:	e63f      	b.n	8007228 <_dtoa_r+0x698>
 80075a8:	4628      	mov	r0, r5
 80075aa:	e7bb      	b.n	8007524 <_dtoa_r+0x994>
 80075ac:	2201      	movs	r2, #1
 80075ae:	e7e1      	b.n	8007574 <_dtoa_r+0x9e4>
 80075b0:	9b08      	ldr	r3, [sp, #32]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	db04      	blt.n	80075c0 <_dtoa_r+0xa30>
 80075b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075b8:	430b      	orrs	r3, r1
 80075ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075bc:	430b      	orrs	r3, r1
 80075be:	d120      	bne.n	8007602 <_dtoa_r+0xa72>
 80075c0:	2a00      	cmp	r2, #0
 80075c2:	dded      	ble.n	80075a0 <_dtoa_r+0xa10>
 80075c4:	4649      	mov	r1, r9
 80075c6:	2201      	movs	r2, #1
 80075c8:	4658      	mov	r0, fp
 80075ca:	f000 fafd 	bl	8007bc8 <__lshift>
 80075ce:	4621      	mov	r1, r4
 80075d0:	4681      	mov	r9, r0
 80075d2:	f000 fb65 	bl	8007ca0 <__mcmp>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	dc03      	bgt.n	80075e2 <_dtoa_r+0xa52>
 80075da:	d1e1      	bne.n	80075a0 <_dtoa_r+0xa10>
 80075dc:	f018 0f01 	tst.w	r8, #1
 80075e0:	d0de      	beq.n	80075a0 <_dtoa_r+0xa10>
 80075e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075e6:	d1d8      	bne.n	800759a <_dtoa_r+0xa0a>
 80075e8:	9a00      	ldr	r2, [sp, #0]
 80075ea:	2339      	movs	r3, #57	@ 0x39
 80075ec:	7013      	strb	r3, [r2, #0]
 80075ee:	4633      	mov	r3, r6
 80075f0:	461e      	mov	r6, r3
 80075f2:	3b01      	subs	r3, #1
 80075f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80075f8:	2a39      	cmp	r2, #57	@ 0x39
 80075fa:	d052      	beq.n	80076a2 <_dtoa_r+0xb12>
 80075fc:	3201      	adds	r2, #1
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	e612      	b.n	8007228 <_dtoa_r+0x698>
 8007602:	2a00      	cmp	r2, #0
 8007604:	dd07      	ble.n	8007616 <_dtoa_r+0xa86>
 8007606:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800760a:	d0ed      	beq.n	80075e8 <_dtoa_r+0xa58>
 800760c:	9a00      	ldr	r2, [sp, #0]
 800760e:	f108 0301 	add.w	r3, r8, #1
 8007612:	7013      	strb	r3, [r2, #0]
 8007614:	e608      	b.n	8007228 <_dtoa_r+0x698>
 8007616:	9b07      	ldr	r3, [sp, #28]
 8007618:	9a07      	ldr	r2, [sp, #28]
 800761a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800761e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007620:	4293      	cmp	r3, r2
 8007622:	d028      	beq.n	8007676 <_dtoa_r+0xae6>
 8007624:	4649      	mov	r1, r9
 8007626:	2300      	movs	r3, #0
 8007628:	220a      	movs	r2, #10
 800762a:	4658      	mov	r0, fp
 800762c:	f000 f920 	bl	8007870 <__multadd>
 8007630:	42af      	cmp	r7, r5
 8007632:	4681      	mov	r9, r0
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	f04f 020a 	mov.w	r2, #10
 800763c:	4639      	mov	r1, r7
 800763e:	4658      	mov	r0, fp
 8007640:	d107      	bne.n	8007652 <_dtoa_r+0xac2>
 8007642:	f000 f915 	bl	8007870 <__multadd>
 8007646:	4607      	mov	r7, r0
 8007648:	4605      	mov	r5, r0
 800764a:	9b07      	ldr	r3, [sp, #28]
 800764c:	3301      	adds	r3, #1
 800764e:	9307      	str	r3, [sp, #28]
 8007650:	e774      	b.n	800753c <_dtoa_r+0x9ac>
 8007652:	f000 f90d 	bl	8007870 <__multadd>
 8007656:	4629      	mov	r1, r5
 8007658:	4607      	mov	r7, r0
 800765a:	2300      	movs	r3, #0
 800765c:	220a      	movs	r2, #10
 800765e:	4658      	mov	r0, fp
 8007660:	f000 f906 	bl	8007870 <__multadd>
 8007664:	4605      	mov	r5, r0
 8007666:	e7f0      	b.n	800764a <_dtoa_r+0xaba>
 8007668:	9b00      	ldr	r3, [sp, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	bfcc      	ite	gt
 800766e:	461e      	movgt	r6, r3
 8007670:	2601      	movle	r6, #1
 8007672:	4456      	add	r6, sl
 8007674:	2700      	movs	r7, #0
 8007676:	4649      	mov	r1, r9
 8007678:	2201      	movs	r2, #1
 800767a:	4658      	mov	r0, fp
 800767c:	f000 faa4 	bl	8007bc8 <__lshift>
 8007680:	4621      	mov	r1, r4
 8007682:	4681      	mov	r9, r0
 8007684:	f000 fb0c 	bl	8007ca0 <__mcmp>
 8007688:	2800      	cmp	r0, #0
 800768a:	dcb0      	bgt.n	80075ee <_dtoa_r+0xa5e>
 800768c:	d102      	bne.n	8007694 <_dtoa_r+0xb04>
 800768e:	f018 0f01 	tst.w	r8, #1
 8007692:	d1ac      	bne.n	80075ee <_dtoa_r+0xa5e>
 8007694:	4633      	mov	r3, r6
 8007696:	461e      	mov	r6, r3
 8007698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800769c:	2a30      	cmp	r2, #48	@ 0x30
 800769e:	d0fa      	beq.n	8007696 <_dtoa_r+0xb06>
 80076a0:	e5c2      	b.n	8007228 <_dtoa_r+0x698>
 80076a2:	459a      	cmp	sl, r3
 80076a4:	d1a4      	bne.n	80075f0 <_dtoa_r+0xa60>
 80076a6:	9b04      	ldr	r3, [sp, #16]
 80076a8:	3301      	adds	r3, #1
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	2331      	movs	r3, #49	@ 0x31
 80076ae:	f88a 3000 	strb.w	r3, [sl]
 80076b2:	e5b9      	b.n	8007228 <_dtoa_r+0x698>
 80076b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007714 <_dtoa_r+0xb84>
 80076ba:	b11b      	cbz	r3, 80076c4 <_dtoa_r+0xb34>
 80076bc:	f10a 0308 	add.w	r3, sl, #8
 80076c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	4650      	mov	r0, sl
 80076c6:	b019      	add	sp, #100	@ 0x64
 80076c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	f77f ae37 	ble.w	8007342 <_dtoa_r+0x7b2>
 80076d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80076d8:	2001      	movs	r0, #1
 80076da:	e655      	b.n	8007388 <_dtoa_r+0x7f8>
 80076dc:	9b00      	ldr	r3, [sp, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f77f aed6 	ble.w	8007490 <_dtoa_r+0x900>
 80076e4:	4656      	mov	r6, sl
 80076e6:	4621      	mov	r1, r4
 80076e8:	4648      	mov	r0, r9
 80076ea:	f7ff f9c8 	bl	8006a7e <quorem>
 80076ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80076f2:	f806 8b01 	strb.w	r8, [r6], #1
 80076f6:	9b00      	ldr	r3, [sp, #0]
 80076f8:	eba6 020a 	sub.w	r2, r6, sl
 80076fc:	4293      	cmp	r3, r2
 80076fe:	ddb3      	ble.n	8007668 <_dtoa_r+0xad8>
 8007700:	4649      	mov	r1, r9
 8007702:	2300      	movs	r3, #0
 8007704:	220a      	movs	r2, #10
 8007706:	4658      	mov	r0, fp
 8007708:	f000 f8b2 	bl	8007870 <__multadd>
 800770c:	4681      	mov	r9, r0
 800770e:	e7ea      	b.n	80076e6 <_dtoa_r+0xb56>
 8007710:	08008e90 	.word	0x08008e90
 8007714:	08008e14 	.word	0x08008e14

08007718 <_free_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4605      	mov	r5, r0
 800771c:	2900      	cmp	r1, #0
 800771e:	d041      	beq.n	80077a4 <_free_r+0x8c>
 8007720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007724:	1f0c      	subs	r4, r1, #4
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfb8      	it	lt
 800772a:	18e4      	addlt	r4, r4, r3
 800772c:	f7fe fb80 	bl	8005e30 <__malloc_lock>
 8007730:	4a1d      	ldr	r2, [pc, #116]	@ (80077a8 <_free_r+0x90>)
 8007732:	6813      	ldr	r3, [r2, #0]
 8007734:	b933      	cbnz	r3, 8007744 <_free_r+0x2c>
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	6014      	str	r4, [r2, #0]
 800773a:	4628      	mov	r0, r5
 800773c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007740:	f7fe bb7c 	b.w	8005e3c <__malloc_unlock>
 8007744:	42a3      	cmp	r3, r4
 8007746:	d908      	bls.n	800775a <_free_r+0x42>
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	1821      	adds	r1, r4, r0
 800774c:	428b      	cmp	r3, r1
 800774e:	bf01      	itttt	eq
 8007750:	6819      	ldreq	r1, [r3, #0]
 8007752:	685b      	ldreq	r3, [r3, #4]
 8007754:	1809      	addeq	r1, r1, r0
 8007756:	6021      	streq	r1, [r4, #0]
 8007758:	e7ed      	b.n	8007736 <_free_r+0x1e>
 800775a:	461a      	mov	r2, r3
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	b10b      	cbz	r3, 8007764 <_free_r+0x4c>
 8007760:	42a3      	cmp	r3, r4
 8007762:	d9fa      	bls.n	800775a <_free_r+0x42>
 8007764:	6811      	ldr	r1, [r2, #0]
 8007766:	1850      	adds	r0, r2, r1
 8007768:	42a0      	cmp	r0, r4
 800776a:	d10b      	bne.n	8007784 <_free_r+0x6c>
 800776c:	6820      	ldr	r0, [r4, #0]
 800776e:	4401      	add	r1, r0
 8007770:	1850      	adds	r0, r2, r1
 8007772:	4283      	cmp	r3, r0
 8007774:	6011      	str	r1, [r2, #0]
 8007776:	d1e0      	bne.n	800773a <_free_r+0x22>
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	6053      	str	r3, [r2, #4]
 800777e:	4408      	add	r0, r1
 8007780:	6010      	str	r0, [r2, #0]
 8007782:	e7da      	b.n	800773a <_free_r+0x22>
 8007784:	d902      	bls.n	800778c <_free_r+0x74>
 8007786:	230c      	movs	r3, #12
 8007788:	602b      	str	r3, [r5, #0]
 800778a:	e7d6      	b.n	800773a <_free_r+0x22>
 800778c:	6820      	ldr	r0, [r4, #0]
 800778e:	1821      	adds	r1, r4, r0
 8007790:	428b      	cmp	r3, r1
 8007792:	bf04      	itt	eq
 8007794:	6819      	ldreq	r1, [r3, #0]
 8007796:	685b      	ldreq	r3, [r3, #4]
 8007798:	6063      	str	r3, [r4, #4]
 800779a:	bf04      	itt	eq
 800779c:	1809      	addeq	r1, r1, r0
 800779e:	6021      	streq	r1, [r4, #0]
 80077a0:	6054      	str	r4, [r2, #4]
 80077a2:	e7ca      	b.n	800773a <_free_r+0x22>
 80077a4:	bd38      	pop	{r3, r4, r5, pc}
 80077a6:	bf00      	nop
 80077a8:	2000052c 	.word	0x2000052c

080077ac <_Balloc>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	69c6      	ldr	r6, [r0, #28]
 80077b0:	4604      	mov	r4, r0
 80077b2:	460d      	mov	r5, r1
 80077b4:	b976      	cbnz	r6, 80077d4 <_Balloc+0x28>
 80077b6:	2010      	movs	r0, #16
 80077b8:	f7fe fa88 	bl	8005ccc <malloc>
 80077bc:	4602      	mov	r2, r0
 80077be:	61e0      	str	r0, [r4, #28]
 80077c0:	b920      	cbnz	r0, 80077cc <_Balloc+0x20>
 80077c2:	4b18      	ldr	r3, [pc, #96]	@ (8007824 <_Balloc+0x78>)
 80077c4:	4818      	ldr	r0, [pc, #96]	@ (8007828 <_Balloc+0x7c>)
 80077c6:	216b      	movs	r1, #107	@ 0x6b
 80077c8:	f000 fd90 	bl	80082ec <__assert_func>
 80077cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077d0:	6006      	str	r6, [r0, #0]
 80077d2:	60c6      	str	r6, [r0, #12]
 80077d4:	69e6      	ldr	r6, [r4, #28]
 80077d6:	68f3      	ldr	r3, [r6, #12]
 80077d8:	b183      	cbz	r3, 80077fc <_Balloc+0x50>
 80077da:	69e3      	ldr	r3, [r4, #28]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077e2:	b9b8      	cbnz	r0, 8007814 <_Balloc+0x68>
 80077e4:	2101      	movs	r1, #1
 80077e6:	fa01 f605 	lsl.w	r6, r1, r5
 80077ea:	1d72      	adds	r2, r6, #5
 80077ec:	0092      	lsls	r2, r2, #2
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 fd9a 	bl	8008328 <_calloc_r>
 80077f4:	b160      	cbz	r0, 8007810 <_Balloc+0x64>
 80077f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077fa:	e00e      	b.n	800781a <_Balloc+0x6e>
 80077fc:	2221      	movs	r2, #33	@ 0x21
 80077fe:	2104      	movs	r1, #4
 8007800:	4620      	mov	r0, r4
 8007802:	f000 fd91 	bl	8008328 <_calloc_r>
 8007806:	69e3      	ldr	r3, [r4, #28]
 8007808:	60f0      	str	r0, [r6, #12]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e4      	bne.n	80077da <_Balloc+0x2e>
 8007810:	2000      	movs	r0, #0
 8007812:	bd70      	pop	{r4, r5, r6, pc}
 8007814:	6802      	ldr	r2, [r0, #0]
 8007816:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800781a:	2300      	movs	r3, #0
 800781c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007820:	e7f7      	b.n	8007812 <_Balloc+0x66>
 8007822:	bf00      	nop
 8007824:	08008e21 	.word	0x08008e21
 8007828:	08008ea1 	.word	0x08008ea1

0800782c <_Bfree>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	69c6      	ldr	r6, [r0, #28]
 8007830:	4605      	mov	r5, r0
 8007832:	460c      	mov	r4, r1
 8007834:	b976      	cbnz	r6, 8007854 <_Bfree+0x28>
 8007836:	2010      	movs	r0, #16
 8007838:	f7fe fa48 	bl	8005ccc <malloc>
 800783c:	4602      	mov	r2, r0
 800783e:	61e8      	str	r0, [r5, #28]
 8007840:	b920      	cbnz	r0, 800784c <_Bfree+0x20>
 8007842:	4b09      	ldr	r3, [pc, #36]	@ (8007868 <_Bfree+0x3c>)
 8007844:	4809      	ldr	r0, [pc, #36]	@ (800786c <_Bfree+0x40>)
 8007846:	218f      	movs	r1, #143	@ 0x8f
 8007848:	f000 fd50 	bl	80082ec <__assert_func>
 800784c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007850:	6006      	str	r6, [r0, #0]
 8007852:	60c6      	str	r6, [r0, #12]
 8007854:	b13c      	cbz	r4, 8007866 <_Bfree+0x3a>
 8007856:	69eb      	ldr	r3, [r5, #28]
 8007858:	6862      	ldr	r2, [r4, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007860:	6021      	str	r1, [r4, #0]
 8007862:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007866:	bd70      	pop	{r4, r5, r6, pc}
 8007868:	08008e21 	.word	0x08008e21
 800786c:	08008ea1 	.word	0x08008ea1

08007870 <__multadd>:
 8007870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007874:	690d      	ldr	r5, [r1, #16]
 8007876:	4607      	mov	r7, r0
 8007878:	460c      	mov	r4, r1
 800787a:	461e      	mov	r6, r3
 800787c:	f101 0c14 	add.w	ip, r1, #20
 8007880:	2000      	movs	r0, #0
 8007882:	f8dc 3000 	ldr.w	r3, [ip]
 8007886:	b299      	uxth	r1, r3
 8007888:	fb02 6101 	mla	r1, r2, r1, r6
 800788c:	0c1e      	lsrs	r6, r3, #16
 800788e:	0c0b      	lsrs	r3, r1, #16
 8007890:	fb02 3306 	mla	r3, r2, r6, r3
 8007894:	b289      	uxth	r1, r1
 8007896:	3001      	adds	r0, #1
 8007898:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800789c:	4285      	cmp	r5, r0
 800789e:	f84c 1b04 	str.w	r1, [ip], #4
 80078a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078a6:	dcec      	bgt.n	8007882 <__multadd+0x12>
 80078a8:	b30e      	cbz	r6, 80078ee <__multadd+0x7e>
 80078aa:	68a3      	ldr	r3, [r4, #8]
 80078ac:	42ab      	cmp	r3, r5
 80078ae:	dc19      	bgt.n	80078e4 <__multadd+0x74>
 80078b0:	6861      	ldr	r1, [r4, #4]
 80078b2:	4638      	mov	r0, r7
 80078b4:	3101      	adds	r1, #1
 80078b6:	f7ff ff79 	bl	80077ac <_Balloc>
 80078ba:	4680      	mov	r8, r0
 80078bc:	b928      	cbnz	r0, 80078ca <__multadd+0x5a>
 80078be:	4602      	mov	r2, r0
 80078c0:	4b0c      	ldr	r3, [pc, #48]	@ (80078f4 <__multadd+0x84>)
 80078c2:	480d      	ldr	r0, [pc, #52]	@ (80078f8 <__multadd+0x88>)
 80078c4:	21ba      	movs	r1, #186	@ 0xba
 80078c6:	f000 fd11 	bl	80082ec <__assert_func>
 80078ca:	6922      	ldr	r2, [r4, #16]
 80078cc:	3202      	adds	r2, #2
 80078ce:	f104 010c 	add.w	r1, r4, #12
 80078d2:	0092      	lsls	r2, r2, #2
 80078d4:	300c      	adds	r0, #12
 80078d6:	f7ff f8c4 	bl	8006a62 <memcpy>
 80078da:	4621      	mov	r1, r4
 80078dc:	4638      	mov	r0, r7
 80078de:	f7ff ffa5 	bl	800782c <_Bfree>
 80078e2:	4644      	mov	r4, r8
 80078e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078e8:	3501      	adds	r5, #1
 80078ea:	615e      	str	r6, [r3, #20]
 80078ec:	6125      	str	r5, [r4, #16]
 80078ee:	4620      	mov	r0, r4
 80078f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f4:	08008e90 	.word	0x08008e90
 80078f8:	08008ea1 	.word	0x08008ea1

080078fc <__hi0bits>:
 80078fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007900:	4603      	mov	r3, r0
 8007902:	bf36      	itet	cc
 8007904:	0403      	lslcc	r3, r0, #16
 8007906:	2000      	movcs	r0, #0
 8007908:	2010      	movcc	r0, #16
 800790a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800790e:	bf3c      	itt	cc
 8007910:	021b      	lslcc	r3, r3, #8
 8007912:	3008      	addcc	r0, #8
 8007914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007918:	bf3c      	itt	cc
 800791a:	011b      	lslcc	r3, r3, #4
 800791c:	3004      	addcc	r0, #4
 800791e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007922:	bf3c      	itt	cc
 8007924:	009b      	lslcc	r3, r3, #2
 8007926:	3002      	addcc	r0, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	db05      	blt.n	8007938 <__hi0bits+0x3c>
 800792c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007930:	f100 0001 	add.w	r0, r0, #1
 8007934:	bf08      	it	eq
 8007936:	2020      	moveq	r0, #32
 8007938:	4770      	bx	lr

0800793a <__lo0bits>:
 800793a:	6803      	ldr	r3, [r0, #0]
 800793c:	4602      	mov	r2, r0
 800793e:	f013 0007 	ands.w	r0, r3, #7
 8007942:	d00b      	beq.n	800795c <__lo0bits+0x22>
 8007944:	07d9      	lsls	r1, r3, #31
 8007946:	d421      	bmi.n	800798c <__lo0bits+0x52>
 8007948:	0798      	lsls	r0, r3, #30
 800794a:	bf49      	itett	mi
 800794c:	085b      	lsrmi	r3, r3, #1
 800794e:	089b      	lsrpl	r3, r3, #2
 8007950:	2001      	movmi	r0, #1
 8007952:	6013      	strmi	r3, [r2, #0]
 8007954:	bf5c      	itt	pl
 8007956:	6013      	strpl	r3, [r2, #0]
 8007958:	2002      	movpl	r0, #2
 800795a:	4770      	bx	lr
 800795c:	b299      	uxth	r1, r3
 800795e:	b909      	cbnz	r1, 8007964 <__lo0bits+0x2a>
 8007960:	0c1b      	lsrs	r3, r3, #16
 8007962:	2010      	movs	r0, #16
 8007964:	b2d9      	uxtb	r1, r3
 8007966:	b909      	cbnz	r1, 800796c <__lo0bits+0x32>
 8007968:	3008      	adds	r0, #8
 800796a:	0a1b      	lsrs	r3, r3, #8
 800796c:	0719      	lsls	r1, r3, #28
 800796e:	bf04      	itt	eq
 8007970:	091b      	lsreq	r3, r3, #4
 8007972:	3004      	addeq	r0, #4
 8007974:	0799      	lsls	r1, r3, #30
 8007976:	bf04      	itt	eq
 8007978:	089b      	lsreq	r3, r3, #2
 800797a:	3002      	addeq	r0, #2
 800797c:	07d9      	lsls	r1, r3, #31
 800797e:	d403      	bmi.n	8007988 <__lo0bits+0x4e>
 8007980:	085b      	lsrs	r3, r3, #1
 8007982:	f100 0001 	add.w	r0, r0, #1
 8007986:	d003      	beq.n	8007990 <__lo0bits+0x56>
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	4770      	bx	lr
 800798c:	2000      	movs	r0, #0
 800798e:	4770      	bx	lr
 8007990:	2020      	movs	r0, #32
 8007992:	4770      	bx	lr

08007994 <__i2b>:
 8007994:	b510      	push	{r4, lr}
 8007996:	460c      	mov	r4, r1
 8007998:	2101      	movs	r1, #1
 800799a:	f7ff ff07 	bl	80077ac <_Balloc>
 800799e:	4602      	mov	r2, r0
 80079a0:	b928      	cbnz	r0, 80079ae <__i2b+0x1a>
 80079a2:	4b05      	ldr	r3, [pc, #20]	@ (80079b8 <__i2b+0x24>)
 80079a4:	4805      	ldr	r0, [pc, #20]	@ (80079bc <__i2b+0x28>)
 80079a6:	f240 1145 	movw	r1, #325	@ 0x145
 80079aa:	f000 fc9f 	bl	80082ec <__assert_func>
 80079ae:	2301      	movs	r3, #1
 80079b0:	6144      	str	r4, [r0, #20]
 80079b2:	6103      	str	r3, [r0, #16]
 80079b4:	bd10      	pop	{r4, pc}
 80079b6:	bf00      	nop
 80079b8:	08008e90 	.word	0x08008e90
 80079bc:	08008ea1 	.word	0x08008ea1

080079c0 <__multiply>:
 80079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	4614      	mov	r4, r2
 80079c6:	690a      	ldr	r2, [r1, #16]
 80079c8:	6923      	ldr	r3, [r4, #16]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	bfa8      	it	ge
 80079ce:	4623      	movge	r3, r4
 80079d0:	460f      	mov	r7, r1
 80079d2:	bfa4      	itt	ge
 80079d4:	460c      	movge	r4, r1
 80079d6:	461f      	movge	r7, r3
 80079d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80079dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80079e0:	68a3      	ldr	r3, [r4, #8]
 80079e2:	6861      	ldr	r1, [r4, #4]
 80079e4:	eb0a 0609 	add.w	r6, sl, r9
 80079e8:	42b3      	cmp	r3, r6
 80079ea:	b085      	sub	sp, #20
 80079ec:	bfb8      	it	lt
 80079ee:	3101      	addlt	r1, #1
 80079f0:	f7ff fedc 	bl	80077ac <_Balloc>
 80079f4:	b930      	cbnz	r0, 8007a04 <__multiply+0x44>
 80079f6:	4602      	mov	r2, r0
 80079f8:	4b44      	ldr	r3, [pc, #272]	@ (8007b0c <__multiply+0x14c>)
 80079fa:	4845      	ldr	r0, [pc, #276]	@ (8007b10 <__multiply+0x150>)
 80079fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a00:	f000 fc74 	bl	80082ec <__assert_func>
 8007a04:	f100 0514 	add.w	r5, r0, #20
 8007a08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a0c:	462b      	mov	r3, r5
 8007a0e:	2200      	movs	r2, #0
 8007a10:	4543      	cmp	r3, r8
 8007a12:	d321      	bcc.n	8007a58 <__multiply+0x98>
 8007a14:	f107 0114 	add.w	r1, r7, #20
 8007a18:	f104 0214 	add.w	r2, r4, #20
 8007a1c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a20:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a24:	9302      	str	r3, [sp, #8]
 8007a26:	1b13      	subs	r3, r2, r4
 8007a28:	3b15      	subs	r3, #21
 8007a2a:	f023 0303 	bic.w	r3, r3, #3
 8007a2e:	3304      	adds	r3, #4
 8007a30:	f104 0715 	add.w	r7, r4, #21
 8007a34:	42ba      	cmp	r2, r7
 8007a36:	bf38      	it	cc
 8007a38:	2304      	movcc	r3, #4
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	9b02      	ldr	r3, [sp, #8]
 8007a3e:	9103      	str	r1, [sp, #12]
 8007a40:	428b      	cmp	r3, r1
 8007a42:	d80c      	bhi.n	8007a5e <__multiply+0x9e>
 8007a44:	2e00      	cmp	r6, #0
 8007a46:	dd03      	ble.n	8007a50 <__multiply+0x90>
 8007a48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d05b      	beq.n	8007b08 <__multiply+0x148>
 8007a50:	6106      	str	r6, [r0, #16]
 8007a52:	b005      	add	sp, #20
 8007a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a58:	f843 2b04 	str.w	r2, [r3], #4
 8007a5c:	e7d8      	b.n	8007a10 <__multiply+0x50>
 8007a5e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a62:	f1ba 0f00 	cmp.w	sl, #0
 8007a66:	d024      	beq.n	8007ab2 <__multiply+0xf2>
 8007a68:	f104 0e14 	add.w	lr, r4, #20
 8007a6c:	46a9      	mov	r9, r5
 8007a6e:	f04f 0c00 	mov.w	ip, #0
 8007a72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a76:	f8d9 3000 	ldr.w	r3, [r9]
 8007a7a:	fa1f fb87 	uxth.w	fp, r7
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	fb0a 330b 	mla	r3, sl, fp, r3
 8007a84:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007a88:	f8d9 7000 	ldr.w	r7, [r9]
 8007a8c:	4463      	add	r3, ip
 8007a8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a92:	fb0a c70b 	mla	r7, sl, fp, ip
 8007a96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007aa0:	4572      	cmp	r2, lr
 8007aa2:	f849 3b04 	str.w	r3, [r9], #4
 8007aa6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007aaa:	d8e2      	bhi.n	8007a72 <__multiply+0xb2>
 8007aac:	9b01      	ldr	r3, [sp, #4]
 8007aae:	f845 c003 	str.w	ip, [r5, r3]
 8007ab2:	9b03      	ldr	r3, [sp, #12]
 8007ab4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ab8:	3104      	adds	r1, #4
 8007aba:	f1b9 0f00 	cmp.w	r9, #0
 8007abe:	d021      	beq.n	8007b04 <__multiply+0x144>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	f104 0c14 	add.w	ip, r4, #20
 8007ac6:	46ae      	mov	lr, r5
 8007ac8:	f04f 0a00 	mov.w	sl, #0
 8007acc:	f8bc b000 	ldrh.w	fp, [ip]
 8007ad0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007ad4:	fb09 770b 	mla	r7, r9, fp, r7
 8007ad8:	4457      	add	r7, sl
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ae0:	f84e 3b04 	str.w	r3, [lr], #4
 8007ae4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ae8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007aec:	f8be 3000 	ldrh.w	r3, [lr]
 8007af0:	fb09 330a 	mla	r3, r9, sl, r3
 8007af4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007af8:	4562      	cmp	r2, ip
 8007afa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007afe:	d8e5      	bhi.n	8007acc <__multiply+0x10c>
 8007b00:	9f01      	ldr	r7, [sp, #4]
 8007b02:	51eb      	str	r3, [r5, r7]
 8007b04:	3504      	adds	r5, #4
 8007b06:	e799      	b.n	8007a3c <__multiply+0x7c>
 8007b08:	3e01      	subs	r6, #1
 8007b0a:	e79b      	b.n	8007a44 <__multiply+0x84>
 8007b0c:	08008e90 	.word	0x08008e90
 8007b10:	08008ea1 	.word	0x08008ea1

08007b14 <__pow5mult>:
 8007b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b18:	4615      	mov	r5, r2
 8007b1a:	f012 0203 	ands.w	r2, r2, #3
 8007b1e:	4607      	mov	r7, r0
 8007b20:	460e      	mov	r6, r1
 8007b22:	d007      	beq.n	8007b34 <__pow5mult+0x20>
 8007b24:	4c25      	ldr	r4, [pc, #148]	@ (8007bbc <__pow5mult+0xa8>)
 8007b26:	3a01      	subs	r2, #1
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b2e:	f7ff fe9f 	bl	8007870 <__multadd>
 8007b32:	4606      	mov	r6, r0
 8007b34:	10ad      	asrs	r5, r5, #2
 8007b36:	d03d      	beq.n	8007bb4 <__pow5mult+0xa0>
 8007b38:	69fc      	ldr	r4, [r7, #28]
 8007b3a:	b97c      	cbnz	r4, 8007b5c <__pow5mult+0x48>
 8007b3c:	2010      	movs	r0, #16
 8007b3e:	f7fe f8c5 	bl	8005ccc <malloc>
 8007b42:	4602      	mov	r2, r0
 8007b44:	61f8      	str	r0, [r7, #28]
 8007b46:	b928      	cbnz	r0, 8007b54 <__pow5mult+0x40>
 8007b48:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc0 <__pow5mult+0xac>)
 8007b4a:	481e      	ldr	r0, [pc, #120]	@ (8007bc4 <__pow5mult+0xb0>)
 8007b4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b50:	f000 fbcc 	bl	80082ec <__assert_func>
 8007b54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b58:	6004      	str	r4, [r0, #0]
 8007b5a:	60c4      	str	r4, [r0, #12]
 8007b5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b64:	b94c      	cbnz	r4, 8007b7a <__pow5mult+0x66>
 8007b66:	f240 2171 	movw	r1, #625	@ 0x271
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	f7ff ff12 	bl	8007994 <__i2b>
 8007b70:	2300      	movs	r3, #0
 8007b72:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b76:	4604      	mov	r4, r0
 8007b78:	6003      	str	r3, [r0, #0]
 8007b7a:	f04f 0900 	mov.w	r9, #0
 8007b7e:	07eb      	lsls	r3, r5, #31
 8007b80:	d50a      	bpl.n	8007b98 <__pow5mult+0x84>
 8007b82:	4631      	mov	r1, r6
 8007b84:	4622      	mov	r2, r4
 8007b86:	4638      	mov	r0, r7
 8007b88:	f7ff ff1a 	bl	80079c0 <__multiply>
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4680      	mov	r8, r0
 8007b90:	4638      	mov	r0, r7
 8007b92:	f7ff fe4b 	bl	800782c <_Bfree>
 8007b96:	4646      	mov	r6, r8
 8007b98:	106d      	asrs	r5, r5, #1
 8007b9a:	d00b      	beq.n	8007bb4 <__pow5mult+0xa0>
 8007b9c:	6820      	ldr	r0, [r4, #0]
 8007b9e:	b938      	cbnz	r0, 8007bb0 <__pow5mult+0x9c>
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	4638      	mov	r0, r7
 8007ba6:	f7ff ff0b 	bl	80079c0 <__multiply>
 8007baa:	6020      	str	r0, [r4, #0]
 8007bac:	f8c0 9000 	str.w	r9, [r0]
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	e7e4      	b.n	8007b7e <__pow5mult+0x6a>
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bba:	bf00      	nop
 8007bbc:	08008efc 	.word	0x08008efc
 8007bc0:	08008e21 	.word	0x08008e21
 8007bc4:	08008ea1 	.word	0x08008ea1

08007bc8 <__lshift>:
 8007bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bcc:	460c      	mov	r4, r1
 8007bce:	6849      	ldr	r1, [r1, #4]
 8007bd0:	6923      	ldr	r3, [r4, #16]
 8007bd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bd6:	68a3      	ldr	r3, [r4, #8]
 8007bd8:	4607      	mov	r7, r0
 8007bda:	4691      	mov	r9, r2
 8007bdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007be0:	f108 0601 	add.w	r6, r8, #1
 8007be4:	42b3      	cmp	r3, r6
 8007be6:	db0b      	blt.n	8007c00 <__lshift+0x38>
 8007be8:	4638      	mov	r0, r7
 8007bea:	f7ff fddf 	bl	80077ac <_Balloc>
 8007bee:	4605      	mov	r5, r0
 8007bf0:	b948      	cbnz	r0, 8007c06 <__lshift+0x3e>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	4b28      	ldr	r3, [pc, #160]	@ (8007c98 <__lshift+0xd0>)
 8007bf6:	4829      	ldr	r0, [pc, #164]	@ (8007c9c <__lshift+0xd4>)
 8007bf8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007bfc:	f000 fb76 	bl	80082ec <__assert_func>
 8007c00:	3101      	adds	r1, #1
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	e7ee      	b.n	8007be4 <__lshift+0x1c>
 8007c06:	2300      	movs	r3, #0
 8007c08:	f100 0114 	add.w	r1, r0, #20
 8007c0c:	f100 0210 	add.w	r2, r0, #16
 8007c10:	4618      	mov	r0, r3
 8007c12:	4553      	cmp	r3, sl
 8007c14:	db33      	blt.n	8007c7e <__lshift+0xb6>
 8007c16:	6920      	ldr	r0, [r4, #16]
 8007c18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c1c:	f104 0314 	add.w	r3, r4, #20
 8007c20:	f019 091f 	ands.w	r9, r9, #31
 8007c24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c2c:	d02b      	beq.n	8007c86 <__lshift+0xbe>
 8007c2e:	f1c9 0e20 	rsb	lr, r9, #32
 8007c32:	468a      	mov	sl, r1
 8007c34:	2200      	movs	r2, #0
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	fa00 f009 	lsl.w	r0, r0, r9
 8007c3c:	4310      	orrs	r0, r2
 8007c3e:	f84a 0b04 	str.w	r0, [sl], #4
 8007c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c46:	459c      	cmp	ip, r3
 8007c48:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c4c:	d8f3      	bhi.n	8007c36 <__lshift+0x6e>
 8007c4e:	ebac 0304 	sub.w	r3, ip, r4
 8007c52:	3b15      	subs	r3, #21
 8007c54:	f023 0303 	bic.w	r3, r3, #3
 8007c58:	3304      	adds	r3, #4
 8007c5a:	f104 0015 	add.w	r0, r4, #21
 8007c5e:	4584      	cmp	ip, r0
 8007c60:	bf38      	it	cc
 8007c62:	2304      	movcc	r3, #4
 8007c64:	50ca      	str	r2, [r1, r3]
 8007c66:	b10a      	cbz	r2, 8007c6c <__lshift+0xa4>
 8007c68:	f108 0602 	add.w	r6, r8, #2
 8007c6c:	3e01      	subs	r6, #1
 8007c6e:	4638      	mov	r0, r7
 8007c70:	612e      	str	r6, [r5, #16]
 8007c72:	4621      	mov	r1, r4
 8007c74:	f7ff fdda 	bl	800782c <_Bfree>
 8007c78:	4628      	mov	r0, r5
 8007c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c82:	3301      	adds	r3, #1
 8007c84:	e7c5      	b.n	8007c12 <__lshift+0x4a>
 8007c86:	3904      	subs	r1, #4
 8007c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c90:	459c      	cmp	ip, r3
 8007c92:	d8f9      	bhi.n	8007c88 <__lshift+0xc0>
 8007c94:	e7ea      	b.n	8007c6c <__lshift+0xa4>
 8007c96:	bf00      	nop
 8007c98:	08008e90 	.word	0x08008e90
 8007c9c:	08008ea1 	.word	0x08008ea1

08007ca0 <__mcmp>:
 8007ca0:	690a      	ldr	r2, [r1, #16]
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	6900      	ldr	r0, [r0, #16]
 8007ca6:	1a80      	subs	r0, r0, r2
 8007ca8:	b530      	push	{r4, r5, lr}
 8007caa:	d10e      	bne.n	8007cca <__mcmp+0x2a>
 8007cac:	3314      	adds	r3, #20
 8007cae:	3114      	adds	r1, #20
 8007cb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cc0:	4295      	cmp	r5, r2
 8007cc2:	d003      	beq.n	8007ccc <__mcmp+0x2c>
 8007cc4:	d205      	bcs.n	8007cd2 <__mcmp+0x32>
 8007cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cca:	bd30      	pop	{r4, r5, pc}
 8007ccc:	42a3      	cmp	r3, r4
 8007cce:	d3f3      	bcc.n	8007cb8 <__mcmp+0x18>
 8007cd0:	e7fb      	b.n	8007cca <__mcmp+0x2a>
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	e7f9      	b.n	8007cca <__mcmp+0x2a>
	...

08007cd8 <__mdiff>:
 8007cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	4689      	mov	r9, r1
 8007cde:	4606      	mov	r6, r0
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	4648      	mov	r0, r9
 8007ce4:	4614      	mov	r4, r2
 8007ce6:	f7ff ffdb 	bl	8007ca0 <__mcmp>
 8007cea:	1e05      	subs	r5, r0, #0
 8007cec:	d112      	bne.n	8007d14 <__mdiff+0x3c>
 8007cee:	4629      	mov	r1, r5
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	f7ff fd5b 	bl	80077ac <_Balloc>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	b928      	cbnz	r0, 8007d06 <__mdiff+0x2e>
 8007cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8007df8 <__mdiff+0x120>)
 8007cfc:	f240 2137 	movw	r1, #567	@ 0x237
 8007d00:	483e      	ldr	r0, [pc, #248]	@ (8007dfc <__mdiff+0x124>)
 8007d02:	f000 faf3 	bl	80082ec <__assert_func>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	b003      	add	sp, #12
 8007d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d14:	bfbc      	itt	lt
 8007d16:	464b      	movlt	r3, r9
 8007d18:	46a1      	movlt	r9, r4
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d20:	bfba      	itte	lt
 8007d22:	461c      	movlt	r4, r3
 8007d24:	2501      	movlt	r5, #1
 8007d26:	2500      	movge	r5, #0
 8007d28:	f7ff fd40 	bl	80077ac <_Balloc>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	b918      	cbnz	r0, 8007d38 <__mdiff+0x60>
 8007d30:	4b31      	ldr	r3, [pc, #196]	@ (8007df8 <__mdiff+0x120>)
 8007d32:	f240 2145 	movw	r1, #581	@ 0x245
 8007d36:	e7e3      	b.n	8007d00 <__mdiff+0x28>
 8007d38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d3c:	6926      	ldr	r6, [r4, #16]
 8007d3e:	60c5      	str	r5, [r0, #12]
 8007d40:	f109 0310 	add.w	r3, r9, #16
 8007d44:	f109 0514 	add.w	r5, r9, #20
 8007d48:	f104 0e14 	add.w	lr, r4, #20
 8007d4c:	f100 0b14 	add.w	fp, r0, #20
 8007d50:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d54:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	46d9      	mov	r9, fp
 8007d5c:	f04f 0c00 	mov.w	ip, #0
 8007d60:	9b01      	ldr	r3, [sp, #4]
 8007d62:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d66:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	fa1f f38a 	uxth.w	r3, sl
 8007d70:	4619      	mov	r1, r3
 8007d72:	b283      	uxth	r3, r0
 8007d74:	1acb      	subs	r3, r1, r3
 8007d76:	0c00      	lsrs	r0, r0, #16
 8007d78:	4463      	add	r3, ip
 8007d7a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007d7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007d88:	4576      	cmp	r6, lr
 8007d8a:	f849 3b04 	str.w	r3, [r9], #4
 8007d8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d92:	d8e5      	bhi.n	8007d60 <__mdiff+0x88>
 8007d94:	1b33      	subs	r3, r6, r4
 8007d96:	3b15      	subs	r3, #21
 8007d98:	f023 0303 	bic.w	r3, r3, #3
 8007d9c:	3415      	adds	r4, #21
 8007d9e:	3304      	adds	r3, #4
 8007da0:	42a6      	cmp	r6, r4
 8007da2:	bf38      	it	cc
 8007da4:	2304      	movcc	r3, #4
 8007da6:	441d      	add	r5, r3
 8007da8:	445b      	add	r3, fp
 8007daa:	461e      	mov	r6, r3
 8007dac:	462c      	mov	r4, r5
 8007dae:	4544      	cmp	r4, r8
 8007db0:	d30e      	bcc.n	8007dd0 <__mdiff+0xf8>
 8007db2:	f108 0103 	add.w	r1, r8, #3
 8007db6:	1b49      	subs	r1, r1, r5
 8007db8:	f021 0103 	bic.w	r1, r1, #3
 8007dbc:	3d03      	subs	r5, #3
 8007dbe:	45a8      	cmp	r8, r5
 8007dc0:	bf38      	it	cc
 8007dc2:	2100      	movcc	r1, #0
 8007dc4:	440b      	add	r3, r1
 8007dc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dca:	b191      	cbz	r1, 8007df2 <__mdiff+0x11a>
 8007dcc:	6117      	str	r7, [r2, #16]
 8007dce:	e79d      	b.n	8007d0c <__mdiff+0x34>
 8007dd0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007dd4:	46e6      	mov	lr, ip
 8007dd6:	0c08      	lsrs	r0, r1, #16
 8007dd8:	fa1c fc81 	uxtah	ip, ip, r1
 8007ddc:	4471      	add	r1, lr
 8007dde:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007de2:	b289      	uxth	r1, r1
 8007de4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007de8:	f846 1b04 	str.w	r1, [r6], #4
 8007dec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007df0:	e7dd      	b.n	8007dae <__mdiff+0xd6>
 8007df2:	3f01      	subs	r7, #1
 8007df4:	e7e7      	b.n	8007dc6 <__mdiff+0xee>
 8007df6:	bf00      	nop
 8007df8:	08008e90 	.word	0x08008e90
 8007dfc:	08008ea1 	.word	0x08008ea1

08007e00 <__d2b>:
 8007e00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e04:	460f      	mov	r7, r1
 8007e06:	2101      	movs	r1, #1
 8007e08:	ec59 8b10 	vmov	r8, r9, d0
 8007e0c:	4616      	mov	r6, r2
 8007e0e:	f7ff fccd 	bl	80077ac <_Balloc>
 8007e12:	4604      	mov	r4, r0
 8007e14:	b930      	cbnz	r0, 8007e24 <__d2b+0x24>
 8007e16:	4602      	mov	r2, r0
 8007e18:	4b23      	ldr	r3, [pc, #140]	@ (8007ea8 <__d2b+0xa8>)
 8007e1a:	4824      	ldr	r0, [pc, #144]	@ (8007eac <__d2b+0xac>)
 8007e1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e20:	f000 fa64 	bl	80082ec <__assert_func>
 8007e24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e2c:	b10d      	cbz	r5, 8007e32 <__d2b+0x32>
 8007e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	f1b8 0300 	subs.w	r3, r8, #0
 8007e38:	d023      	beq.n	8007e82 <__d2b+0x82>
 8007e3a:	4668      	mov	r0, sp
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	f7ff fd7c 	bl	800793a <__lo0bits>
 8007e42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e46:	b1d0      	cbz	r0, 8007e7e <__d2b+0x7e>
 8007e48:	f1c0 0320 	rsb	r3, r0, #32
 8007e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e50:	430b      	orrs	r3, r1
 8007e52:	40c2      	lsrs	r2, r0
 8007e54:	6163      	str	r3, [r4, #20]
 8007e56:	9201      	str	r2, [sp, #4]
 8007e58:	9b01      	ldr	r3, [sp, #4]
 8007e5a:	61a3      	str	r3, [r4, #24]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bf0c      	ite	eq
 8007e60:	2201      	moveq	r2, #1
 8007e62:	2202      	movne	r2, #2
 8007e64:	6122      	str	r2, [r4, #16]
 8007e66:	b1a5      	cbz	r5, 8007e92 <__d2b+0x92>
 8007e68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e6c:	4405      	add	r5, r0
 8007e6e:	603d      	str	r5, [r7, #0]
 8007e70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e74:	6030      	str	r0, [r6, #0]
 8007e76:	4620      	mov	r0, r4
 8007e78:	b003      	add	sp, #12
 8007e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e7e:	6161      	str	r1, [r4, #20]
 8007e80:	e7ea      	b.n	8007e58 <__d2b+0x58>
 8007e82:	a801      	add	r0, sp, #4
 8007e84:	f7ff fd59 	bl	800793a <__lo0bits>
 8007e88:	9b01      	ldr	r3, [sp, #4]
 8007e8a:	6163      	str	r3, [r4, #20]
 8007e8c:	3020      	adds	r0, #32
 8007e8e:	2201      	movs	r2, #1
 8007e90:	e7e8      	b.n	8007e64 <__d2b+0x64>
 8007e92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e9a:	6038      	str	r0, [r7, #0]
 8007e9c:	6918      	ldr	r0, [r3, #16]
 8007e9e:	f7ff fd2d 	bl	80078fc <__hi0bits>
 8007ea2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ea6:	e7e5      	b.n	8007e74 <__d2b+0x74>
 8007ea8:	08008e90 	.word	0x08008e90
 8007eac:	08008ea1 	.word	0x08008ea1

08007eb0 <__ssputs_r>:
 8007eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb4:	688e      	ldr	r6, [r1, #8]
 8007eb6:	461f      	mov	r7, r3
 8007eb8:	42be      	cmp	r6, r7
 8007eba:	680b      	ldr	r3, [r1, #0]
 8007ebc:	4682      	mov	sl, r0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	4690      	mov	r8, r2
 8007ec2:	d82d      	bhi.n	8007f20 <__ssputs_r+0x70>
 8007ec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ec8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ecc:	d026      	beq.n	8007f1c <__ssputs_r+0x6c>
 8007ece:	6965      	ldr	r5, [r4, #20]
 8007ed0:	6909      	ldr	r1, [r1, #16]
 8007ed2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ed6:	eba3 0901 	sub.w	r9, r3, r1
 8007eda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ede:	1c7b      	adds	r3, r7, #1
 8007ee0:	444b      	add	r3, r9
 8007ee2:	106d      	asrs	r5, r5, #1
 8007ee4:	429d      	cmp	r5, r3
 8007ee6:	bf38      	it	cc
 8007ee8:	461d      	movcc	r5, r3
 8007eea:	0553      	lsls	r3, r2, #21
 8007eec:	d527      	bpl.n	8007f3e <__ssputs_r+0x8e>
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f7fd ff1e 	bl	8005d30 <_malloc_r>
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	b360      	cbz	r0, 8007f52 <__ssputs_r+0xa2>
 8007ef8:	6921      	ldr	r1, [r4, #16]
 8007efa:	464a      	mov	r2, r9
 8007efc:	f7fe fdb1 	bl	8006a62 <memcpy>
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f0a:	81a3      	strh	r3, [r4, #12]
 8007f0c:	6126      	str	r6, [r4, #16]
 8007f0e:	6165      	str	r5, [r4, #20]
 8007f10:	444e      	add	r6, r9
 8007f12:	eba5 0509 	sub.w	r5, r5, r9
 8007f16:	6026      	str	r6, [r4, #0]
 8007f18:	60a5      	str	r5, [r4, #8]
 8007f1a:	463e      	mov	r6, r7
 8007f1c:	42be      	cmp	r6, r7
 8007f1e:	d900      	bls.n	8007f22 <__ssputs_r+0x72>
 8007f20:	463e      	mov	r6, r7
 8007f22:	6820      	ldr	r0, [r4, #0]
 8007f24:	4632      	mov	r2, r6
 8007f26:	4641      	mov	r1, r8
 8007f28:	f000 f9c6 	bl	80082b8 <memmove>
 8007f2c:	68a3      	ldr	r3, [r4, #8]
 8007f2e:	1b9b      	subs	r3, r3, r6
 8007f30:	60a3      	str	r3, [r4, #8]
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	4433      	add	r3, r6
 8007f36:	6023      	str	r3, [r4, #0]
 8007f38:	2000      	movs	r0, #0
 8007f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3e:	462a      	mov	r2, r5
 8007f40:	f000 fa18 	bl	8008374 <_realloc_r>
 8007f44:	4606      	mov	r6, r0
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d1e0      	bne.n	8007f0c <__ssputs_r+0x5c>
 8007f4a:	6921      	ldr	r1, [r4, #16]
 8007f4c:	4650      	mov	r0, sl
 8007f4e:	f7ff fbe3 	bl	8007718 <_free_r>
 8007f52:	230c      	movs	r3, #12
 8007f54:	f8ca 3000 	str.w	r3, [sl]
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f5e:	81a3      	strh	r3, [r4, #12]
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	e7e9      	b.n	8007f3a <__ssputs_r+0x8a>
	...

08007f68 <_svfiprintf_r>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	4698      	mov	r8, r3
 8007f6e:	898b      	ldrh	r3, [r1, #12]
 8007f70:	061b      	lsls	r3, r3, #24
 8007f72:	b09d      	sub	sp, #116	@ 0x74
 8007f74:	4607      	mov	r7, r0
 8007f76:	460d      	mov	r5, r1
 8007f78:	4614      	mov	r4, r2
 8007f7a:	d510      	bpl.n	8007f9e <_svfiprintf_r+0x36>
 8007f7c:	690b      	ldr	r3, [r1, #16]
 8007f7e:	b973      	cbnz	r3, 8007f9e <_svfiprintf_r+0x36>
 8007f80:	2140      	movs	r1, #64	@ 0x40
 8007f82:	f7fd fed5 	bl	8005d30 <_malloc_r>
 8007f86:	6028      	str	r0, [r5, #0]
 8007f88:	6128      	str	r0, [r5, #16]
 8007f8a:	b930      	cbnz	r0, 8007f9a <_svfiprintf_r+0x32>
 8007f8c:	230c      	movs	r3, #12
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	f04f 30ff 	mov.w	r0, #4294967295
 8007f94:	b01d      	add	sp, #116	@ 0x74
 8007f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9a:	2340      	movs	r3, #64	@ 0x40
 8007f9c:	616b      	str	r3, [r5, #20]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fa2:	2320      	movs	r3, #32
 8007fa4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fac:	2330      	movs	r3, #48	@ 0x30
 8007fae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800814c <_svfiprintf_r+0x1e4>
 8007fb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fb6:	f04f 0901 	mov.w	r9, #1
 8007fba:	4623      	mov	r3, r4
 8007fbc:	469a      	mov	sl, r3
 8007fbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fc2:	b10a      	cbz	r2, 8007fc8 <_svfiprintf_r+0x60>
 8007fc4:	2a25      	cmp	r2, #37	@ 0x25
 8007fc6:	d1f9      	bne.n	8007fbc <_svfiprintf_r+0x54>
 8007fc8:	ebba 0b04 	subs.w	fp, sl, r4
 8007fcc:	d00b      	beq.n	8007fe6 <_svfiprintf_r+0x7e>
 8007fce:	465b      	mov	r3, fp
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	f7ff ff6b 	bl	8007eb0 <__ssputs_r>
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f000 80a7 	beq.w	800812e <_svfiprintf_r+0x1c6>
 8007fe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fe2:	445a      	add	r2, fp
 8007fe4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 809f 	beq.w	800812e <_svfiprintf_r+0x1c6>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ffa:	f10a 0a01 	add.w	sl, sl, #1
 8007ffe:	9304      	str	r3, [sp, #16]
 8008000:	9307      	str	r3, [sp, #28]
 8008002:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008006:	931a      	str	r3, [sp, #104]	@ 0x68
 8008008:	4654      	mov	r4, sl
 800800a:	2205      	movs	r2, #5
 800800c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008010:	484e      	ldr	r0, [pc, #312]	@ (800814c <_svfiprintf_r+0x1e4>)
 8008012:	f7f8 f8fd 	bl	8000210 <memchr>
 8008016:	9a04      	ldr	r2, [sp, #16]
 8008018:	b9d8      	cbnz	r0, 8008052 <_svfiprintf_r+0xea>
 800801a:	06d0      	lsls	r0, r2, #27
 800801c:	bf44      	itt	mi
 800801e:	2320      	movmi	r3, #32
 8008020:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008024:	0711      	lsls	r1, r2, #28
 8008026:	bf44      	itt	mi
 8008028:	232b      	movmi	r3, #43	@ 0x2b
 800802a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800802e:	f89a 3000 	ldrb.w	r3, [sl]
 8008032:	2b2a      	cmp	r3, #42	@ 0x2a
 8008034:	d015      	beq.n	8008062 <_svfiprintf_r+0xfa>
 8008036:	9a07      	ldr	r2, [sp, #28]
 8008038:	4654      	mov	r4, sl
 800803a:	2000      	movs	r0, #0
 800803c:	f04f 0c0a 	mov.w	ip, #10
 8008040:	4621      	mov	r1, r4
 8008042:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008046:	3b30      	subs	r3, #48	@ 0x30
 8008048:	2b09      	cmp	r3, #9
 800804a:	d94b      	bls.n	80080e4 <_svfiprintf_r+0x17c>
 800804c:	b1b0      	cbz	r0, 800807c <_svfiprintf_r+0x114>
 800804e:	9207      	str	r2, [sp, #28]
 8008050:	e014      	b.n	800807c <_svfiprintf_r+0x114>
 8008052:	eba0 0308 	sub.w	r3, r0, r8
 8008056:	fa09 f303 	lsl.w	r3, r9, r3
 800805a:	4313      	orrs	r3, r2
 800805c:	9304      	str	r3, [sp, #16]
 800805e:	46a2      	mov	sl, r4
 8008060:	e7d2      	b.n	8008008 <_svfiprintf_r+0xa0>
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	1d19      	adds	r1, r3, #4
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	9103      	str	r1, [sp, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	bfbb      	ittet	lt
 800806e:	425b      	neglt	r3, r3
 8008070:	f042 0202 	orrlt.w	r2, r2, #2
 8008074:	9307      	strge	r3, [sp, #28]
 8008076:	9307      	strlt	r3, [sp, #28]
 8008078:	bfb8      	it	lt
 800807a:	9204      	strlt	r2, [sp, #16]
 800807c:	7823      	ldrb	r3, [r4, #0]
 800807e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008080:	d10a      	bne.n	8008098 <_svfiprintf_r+0x130>
 8008082:	7863      	ldrb	r3, [r4, #1]
 8008084:	2b2a      	cmp	r3, #42	@ 0x2a
 8008086:	d132      	bne.n	80080ee <_svfiprintf_r+0x186>
 8008088:	9b03      	ldr	r3, [sp, #12]
 800808a:	1d1a      	adds	r2, r3, #4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	9203      	str	r2, [sp, #12]
 8008090:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008094:	3402      	adds	r4, #2
 8008096:	9305      	str	r3, [sp, #20]
 8008098:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800815c <_svfiprintf_r+0x1f4>
 800809c:	7821      	ldrb	r1, [r4, #0]
 800809e:	2203      	movs	r2, #3
 80080a0:	4650      	mov	r0, sl
 80080a2:	f7f8 f8b5 	bl	8000210 <memchr>
 80080a6:	b138      	cbz	r0, 80080b8 <_svfiprintf_r+0x150>
 80080a8:	9b04      	ldr	r3, [sp, #16]
 80080aa:	eba0 000a 	sub.w	r0, r0, sl
 80080ae:	2240      	movs	r2, #64	@ 0x40
 80080b0:	4082      	lsls	r2, r0
 80080b2:	4313      	orrs	r3, r2
 80080b4:	3401      	adds	r4, #1
 80080b6:	9304      	str	r3, [sp, #16]
 80080b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080bc:	4824      	ldr	r0, [pc, #144]	@ (8008150 <_svfiprintf_r+0x1e8>)
 80080be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080c2:	2206      	movs	r2, #6
 80080c4:	f7f8 f8a4 	bl	8000210 <memchr>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d036      	beq.n	800813a <_svfiprintf_r+0x1d2>
 80080cc:	4b21      	ldr	r3, [pc, #132]	@ (8008154 <_svfiprintf_r+0x1ec>)
 80080ce:	bb1b      	cbnz	r3, 8008118 <_svfiprintf_r+0x1b0>
 80080d0:	9b03      	ldr	r3, [sp, #12]
 80080d2:	3307      	adds	r3, #7
 80080d4:	f023 0307 	bic.w	r3, r3, #7
 80080d8:	3308      	adds	r3, #8
 80080da:	9303      	str	r3, [sp, #12]
 80080dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080de:	4433      	add	r3, r6
 80080e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080e2:	e76a      	b.n	8007fba <_svfiprintf_r+0x52>
 80080e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080e8:	460c      	mov	r4, r1
 80080ea:	2001      	movs	r0, #1
 80080ec:	e7a8      	b.n	8008040 <_svfiprintf_r+0xd8>
 80080ee:	2300      	movs	r3, #0
 80080f0:	3401      	adds	r4, #1
 80080f2:	9305      	str	r3, [sp, #20]
 80080f4:	4619      	mov	r1, r3
 80080f6:	f04f 0c0a 	mov.w	ip, #10
 80080fa:	4620      	mov	r0, r4
 80080fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008100:	3a30      	subs	r2, #48	@ 0x30
 8008102:	2a09      	cmp	r2, #9
 8008104:	d903      	bls.n	800810e <_svfiprintf_r+0x1a6>
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0c6      	beq.n	8008098 <_svfiprintf_r+0x130>
 800810a:	9105      	str	r1, [sp, #20]
 800810c:	e7c4      	b.n	8008098 <_svfiprintf_r+0x130>
 800810e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008112:	4604      	mov	r4, r0
 8008114:	2301      	movs	r3, #1
 8008116:	e7f0      	b.n	80080fa <_svfiprintf_r+0x192>
 8008118:	ab03      	add	r3, sp, #12
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	462a      	mov	r2, r5
 800811e:	4b0e      	ldr	r3, [pc, #56]	@ (8008158 <_svfiprintf_r+0x1f0>)
 8008120:	a904      	add	r1, sp, #16
 8008122:	4638      	mov	r0, r7
 8008124:	f7fd ff30 	bl	8005f88 <_printf_float>
 8008128:	1c42      	adds	r2, r0, #1
 800812a:	4606      	mov	r6, r0
 800812c:	d1d6      	bne.n	80080dc <_svfiprintf_r+0x174>
 800812e:	89ab      	ldrh	r3, [r5, #12]
 8008130:	065b      	lsls	r3, r3, #25
 8008132:	f53f af2d 	bmi.w	8007f90 <_svfiprintf_r+0x28>
 8008136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008138:	e72c      	b.n	8007f94 <_svfiprintf_r+0x2c>
 800813a:	ab03      	add	r3, sp, #12
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	462a      	mov	r2, r5
 8008140:	4b05      	ldr	r3, [pc, #20]	@ (8008158 <_svfiprintf_r+0x1f0>)
 8008142:	a904      	add	r1, sp, #16
 8008144:	4638      	mov	r0, r7
 8008146:	f7fe f9b7 	bl	80064b8 <_printf_i>
 800814a:	e7ed      	b.n	8008128 <_svfiprintf_r+0x1c0>
 800814c:	08008ff8 	.word	0x08008ff8
 8008150:	08009002 	.word	0x08009002
 8008154:	08005f89 	.word	0x08005f89
 8008158:	08007eb1 	.word	0x08007eb1
 800815c:	08008ffe 	.word	0x08008ffe

08008160 <__sflush_r>:
 8008160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008168:	0716      	lsls	r6, r2, #28
 800816a:	4605      	mov	r5, r0
 800816c:	460c      	mov	r4, r1
 800816e:	d454      	bmi.n	800821a <__sflush_r+0xba>
 8008170:	684b      	ldr	r3, [r1, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	dc02      	bgt.n	800817c <__sflush_r+0x1c>
 8008176:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008178:	2b00      	cmp	r3, #0
 800817a:	dd48      	ble.n	800820e <__sflush_r+0xae>
 800817c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800817e:	2e00      	cmp	r6, #0
 8008180:	d045      	beq.n	800820e <__sflush_r+0xae>
 8008182:	2300      	movs	r3, #0
 8008184:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008188:	682f      	ldr	r7, [r5, #0]
 800818a:	6a21      	ldr	r1, [r4, #32]
 800818c:	602b      	str	r3, [r5, #0]
 800818e:	d030      	beq.n	80081f2 <__sflush_r+0x92>
 8008190:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	0759      	lsls	r1, r3, #29
 8008196:	d505      	bpl.n	80081a4 <__sflush_r+0x44>
 8008198:	6863      	ldr	r3, [r4, #4]
 800819a:	1ad2      	subs	r2, r2, r3
 800819c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800819e:	b10b      	cbz	r3, 80081a4 <__sflush_r+0x44>
 80081a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081a2:	1ad2      	subs	r2, r2, r3
 80081a4:	2300      	movs	r3, #0
 80081a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081a8:	6a21      	ldr	r1, [r4, #32]
 80081aa:	4628      	mov	r0, r5
 80081ac:	47b0      	blx	r6
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	89a3      	ldrh	r3, [r4, #12]
 80081b2:	d106      	bne.n	80081c2 <__sflush_r+0x62>
 80081b4:	6829      	ldr	r1, [r5, #0]
 80081b6:	291d      	cmp	r1, #29
 80081b8:	d82b      	bhi.n	8008212 <__sflush_r+0xb2>
 80081ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008264 <__sflush_r+0x104>)
 80081bc:	410a      	asrs	r2, r1
 80081be:	07d6      	lsls	r6, r2, #31
 80081c0:	d427      	bmi.n	8008212 <__sflush_r+0xb2>
 80081c2:	2200      	movs	r2, #0
 80081c4:	6062      	str	r2, [r4, #4]
 80081c6:	04d9      	lsls	r1, r3, #19
 80081c8:	6922      	ldr	r2, [r4, #16]
 80081ca:	6022      	str	r2, [r4, #0]
 80081cc:	d504      	bpl.n	80081d8 <__sflush_r+0x78>
 80081ce:	1c42      	adds	r2, r0, #1
 80081d0:	d101      	bne.n	80081d6 <__sflush_r+0x76>
 80081d2:	682b      	ldr	r3, [r5, #0]
 80081d4:	b903      	cbnz	r3, 80081d8 <__sflush_r+0x78>
 80081d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80081d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081da:	602f      	str	r7, [r5, #0]
 80081dc:	b1b9      	cbz	r1, 800820e <__sflush_r+0xae>
 80081de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081e2:	4299      	cmp	r1, r3
 80081e4:	d002      	beq.n	80081ec <__sflush_r+0x8c>
 80081e6:	4628      	mov	r0, r5
 80081e8:	f7ff fa96 	bl	8007718 <_free_r>
 80081ec:	2300      	movs	r3, #0
 80081ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80081f0:	e00d      	b.n	800820e <__sflush_r+0xae>
 80081f2:	2301      	movs	r3, #1
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b0      	blx	r6
 80081f8:	4602      	mov	r2, r0
 80081fa:	1c50      	adds	r0, r2, #1
 80081fc:	d1c9      	bne.n	8008192 <__sflush_r+0x32>
 80081fe:	682b      	ldr	r3, [r5, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0c6      	beq.n	8008192 <__sflush_r+0x32>
 8008204:	2b1d      	cmp	r3, #29
 8008206:	d001      	beq.n	800820c <__sflush_r+0xac>
 8008208:	2b16      	cmp	r3, #22
 800820a:	d11e      	bne.n	800824a <__sflush_r+0xea>
 800820c:	602f      	str	r7, [r5, #0]
 800820e:	2000      	movs	r0, #0
 8008210:	e022      	b.n	8008258 <__sflush_r+0xf8>
 8008212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008216:	b21b      	sxth	r3, r3
 8008218:	e01b      	b.n	8008252 <__sflush_r+0xf2>
 800821a:	690f      	ldr	r7, [r1, #16]
 800821c:	2f00      	cmp	r7, #0
 800821e:	d0f6      	beq.n	800820e <__sflush_r+0xae>
 8008220:	0793      	lsls	r3, r2, #30
 8008222:	680e      	ldr	r6, [r1, #0]
 8008224:	bf08      	it	eq
 8008226:	694b      	ldreq	r3, [r1, #20]
 8008228:	600f      	str	r7, [r1, #0]
 800822a:	bf18      	it	ne
 800822c:	2300      	movne	r3, #0
 800822e:	eba6 0807 	sub.w	r8, r6, r7
 8008232:	608b      	str	r3, [r1, #8]
 8008234:	f1b8 0f00 	cmp.w	r8, #0
 8008238:	dde9      	ble.n	800820e <__sflush_r+0xae>
 800823a:	6a21      	ldr	r1, [r4, #32]
 800823c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800823e:	4643      	mov	r3, r8
 8008240:	463a      	mov	r2, r7
 8008242:	4628      	mov	r0, r5
 8008244:	47b0      	blx	r6
 8008246:	2800      	cmp	r0, #0
 8008248:	dc08      	bgt.n	800825c <__sflush_r+0xfc>
 800824a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	f04f 30ff 	mov.w	r0, #4294967295
 8008258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800825c:	4407      	add	r7, r0
 800825e:	eba8 0800 	sub.w	r8, r8, r0
 8008262:	e7e7      	b.n	8008234 <__sflush_r+0xd4>
 8008264:	dfbffffe 	.word	0xdfbffffe

08008268 <_fflush_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	690b      	ldr	r3, [r1, #16]
 800826c:	4605      	mov	r5, r0
 800826e:	460c      	mov	r4, r1
 8008270:	b913      	cbnz	r3, 8008278 <_fflush_r+0x10>
 8008272:	2500      	movs	r5, #0
 8008274:	4628      	mov	r0, r5
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	b118      	cbz	r0, 8008282 <_fflush_r+0x1a>
 800827a:	6a03      	ldr	r3, [r0, #32]
 800827c:	b90b      	cbnz	r3, 8008282 <_fflush_r+0x1a>
 800827e:	f7fe fac7 	bl	8006810 <__sinit>
 8008282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0f3      	beq.n	8008272 <_fflush_r+0xa>
 800828a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800828c:	07d0      	lsls	r0, r2, #31
 800828e:	d404      	bmi.n	800829a <_fflush_r+0x32>
 8008290:	0599      	lsls	r1, r3, #22
 8008292:	d402      	bmi.n	800829a <_fflush_r+0x32>
 8008294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008296:	f7fe fbe2 	bl	8006a5e <__retarget_lock_acquire_recursive>
 800829a:	4628      	mov	r0, r5
 800829c:	4621      	mov	r1, r4
 800829e:	f7ff ff5f 	bl	8008160 <__sflush_r>
 80082a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082a4:	07da      	lsls	r2, r3, #31
 80082a6:	4605      	mov	r5, r0
 80082a8:	d4e4      	bmi.n	8008274 <_fflush_r+0xc>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	059b      	lsls	r3, r3, #22
 80082ae:	d4e1      	bmi.n	8008274 <_fflush_r+0xc>
 80082b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082b2:	f7fe fbd5 	bl	8006a60 <__retarget_lock_release_recursive>
 80082b6:	e7dd      	b.n	8008274 <_fflush_r+0xc>

080082b8 <memmove>:
 80082b8:	4288      	cmp	r0, r1
 80082ba:	b510      	push	{r4, lr}
 80082bc:	eb01 0402 	add.w	r4, r1, r2
 80082c0:	d902      	bls.n	80082c8 <memmove+0x10>
 80082c2:	4284      	cmp	r4, r0
 80082c4:	4623      	mov	r3, r4
 80082c6:	d807      	bhi.n	80082d8 <memmove+0x20>
 80082c8:	1e43      	subs	r3, r0, #1
 80082ca:	42a1      	cmp	r1, r4
 80082cc:	d008      	beq.n	80082e0 <memmove+0x28>
 80082ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082d6:	e7f8      	b.n	80082ca <memmove+0x12>
 80082d8:	4402      	add	r2, r0
 80082da:	4601      	mov	r1, r0
 80082dc:	428a      	cmp	r2, r1
 80082de:	d100      	bne.n	80082e2 <memmove+0x2a>
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082ea:	e7f7      	b.n	80082dc <memmove+0x24>

080082ec <__assert_func>:
 80082ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082ee:	4614      	mov	r4, r2
 80082f0:	461a      	mov	r2, r3
 80082f2:	4b09      	ldr	r3, [pc, #36]	@ (8008318 <__assert_func+0x2c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4605      	mov	r5, r0
 80082f8:	68d8      	ldr	r0, [r3, #12]
 80082fa:	b954      	cbnz	r4, 8008312 <__assert_func+0x26>
 80082fc:	4b07      	ldr	r3, [pc, #28]	@ (800831c <__assert_func+0x30>)
 80082fe:	461c      	mov	r4, r3
 8008300:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008304:	9100      	str	r1, [sp, #0]
 8008306:	462b      	mov	r3, r5
 8008308:	4905      	ldr	r1, [pc, #20]	@ (8008320 <__assert_func+0x34>)
 800830a:	f000 f86f 	bl	80083ec <fiprintf>
 800830e:	f000 f87f 	bl	8008410 <abort>
 8008312:	4b04      	ldr	r3, [pc, #16]	@ (8008324 <__assert_func+0x38>)
 8008314:	e7f4      	b.n	8008300 <__assert_func+0x14>
 8008316:	bf00      	nop
 8008318:	20000028 	.word	0x20000028
 800831c:	0800904e 	.word	0x0800904e
 8008320:	08009020 	.word	0x08009020
 8008324:	08009013 	.word	0x08009013

08008328 <_calloc_r>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	fba1 5402 	umull	r5, r4, r1, r2
 800832e:	b93c      	cbnz	r4, 8008340 <_calloc_r+0x18>
 8008330:	4629      	mov	r1, r5
 8008332:	f7fd fcfd 	bl	8005d30 <_malloc_r>
 8008336:	4606      	mov	r6, r0
 8008338:	b928      	cbnz	r0, 8008346 <_calloc_r+0x1e>
 800833a:	2600      	movs	r6, #0
 800833c:	4630      	mov	r0, r6
 800833e:	bd70      	pop	{r4, r5, r6, pc}
 8008340:	220c      	movs	r2, #12
 8008342:	6002      	str	r2, [r0, #0]
 8008344:	e7f9      	b.n	800833a <_calloc_r+0x12>
 8008346:	462a      	mov	r2, r5
 8008348:	4621      	mov	r1, r4
 800834a:	f7fe fafa 	bl	8006942 <memset>
 800834e:	e7f5      	b.n	800833c <_calloc_r+0x14>

08008350 <__ascii_mbtowc>:
 8008350:	b082      	sub	sp, #8
 8008352:	b901      	cbnz	r1, 8008356 <__ascii_mbtowc+0x6>
 8008354:	a901      	add	r1, sp, #4
 8008356:	b142      	cbz	r2, 800836a <__ascii_mbtowc+0x1a>
 8008358:	b14b      	cbz	r3, 800836e <__ascii_mbtowc+0x1e>
 800835a:	7813      	ldrb	r3, [r2, #0]
 800835c:	600b      	str	r3, [r1, #0]
 800835e:	7812      	ldrb	r2, [r2, #0]
 8008360:	1e10      	subs	r0, r2, #0
 8008362:	bf18      	it	ne
 8008364:	2001      	movne	r0, #1
 8008366:	b002      	add	sp, #8
 8008368:	4770      	bx	lr
 800836a:	4610      	mov	r0, r2
 800836c:	e7fb      	b.n	8008366 <__ascii_mbtowc+0x16>
 800836e:	f06f 0001 	mvn.w	r0, #1
 8008372:	e7f8      	b.n	8008366 <__ascii_mbtowc+0x16>

08008374 <_realloc_r>:
 8008374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008378:	4680      	mov	r8, r0
 800837a:	4615      	mov	r5, r2
 800837c:	460c      	mov	r4, r1
 800837e:	b921      	cbnz	r1, 800838a <_realloc_r+0x16>
 8008380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008384:	4611      	mov	r1, r2
 8008386:	f7fd bcd3 	b.w	8005d30 <_malloc_r>
 800838a:	b92a      	cbnz	r2, 8008398 <_realloc_r+0x24>
 800838c:	f7ff f9c4 	bl	8007718 <_free_r>
 8008390:	2400      	movs	r4, #0
 8008392:	4620      	mov	r0, r4
 8008394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008398:	f000 f841 	bl	800841e <_malloc_usable_size_r>
 800839c:	4285      	cmp	r5, r0
 800839e:	4606      	mov	r6, r0
 80083a0:	d802      	bhi.n	80083a8 <_realloc_r+0x34>
 80083a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80083a6:	d8f4      	bhi.n	8008392 <_realloc_r+0x1e>
 80083a8:	4629      	mov	r1, r5
 80083aa:	4640      	mov	r0, r8
 80083ac:	f7fd fcc0 	bl	8005d30 <_malloc_r>
 80083b0:	4607      	mov	r7, r0
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d0ec      	beq.n	8008390 <_realloc_r+0x1c>
 80083b6:	42b5      	cmp	r5, r6
 80083b8:	462a      	mov	r2, r5
 80083ba:	4621      	mov	r1, r4
 80083bc:	bf28      	it	cs
 80083be:	4632      	movcs	r2, r6
 80083c0:	f7fe fb4f 	bl	8006a62 <memcpy>
 80083c4:	4621      	mov	r1, r4
 80083c6:	4640      	mov	r0, r8
 80083c8:	f7ff f9a6 	bl	8007718 <_free_r>
 80083cc:	463c      	mov	r4, r7
 80083ce:	e7e0      	b.n	8008392 <_realloc_r+0x1e>

080083d0 <__ascii_wctomb>:
 80083d0:	4603      	mov	r3, r0
 80083d2:	4608      	mov	r0, r1
 80083d4:	b141      	cbz	r1, 80083e8 <__ascii_wctomb+0x18>
 80083d6:	2aff      	cmp	r2, #255	@ 0xff
 80083d8:	d904      	bls.n	80083e4 <__ascii_wctomb+0x14>
 80083da:	228a      	movs	r2, #138	@ 0x8a
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	f04f 30ff 	mov.w	r0, #4294967295
 80083e2:	4770      	bx	lr
 80083e4:	700a      	strb	r2, [r1, #0]
 80083e6:	2001      	movs	r0, #1
 80083e8:	4770      	bx	lr
	...

080083ec <fiprintf>:
 80083ec:	b40e      	push	{r1, r2, r3}
 80083ee:	b503      	push	{r0, r1, lr}
 80083f0:	4601      	mov	r1, r0
 80083f2:	ab03      	add	r3, sp, #12
 80083f4:	4805      	ldr	r0, [pc, #20]	@ (800840c <fiprintf+0x20>)
 80083f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083fa:	6800      	ldr	r0, [r0, #0]
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	f000 f83f 	bl	8008480 <_vfiprintf_r>
 8008402:	b002      	add	sp, #8
 8008404:	f85d eb04 	ldr.w	lr, [sp], #4
 8008408:	b003      	add	sp, #12
 800840a:	4770      	bx	lr
 800840c:	20000028 	.word	0x20000028

08008410 <abort>:
 8008410:	b508      	push	{r3, lr}
 8008412:	2006      	movs	r0, #6
 8008414:	f000 fa08 	bl	8008828 <raise>
 8008418:	2001      	movs	r0, #1
 800841a:	f7fa fe45 	bl	80030a8 <_exit>

0800841e <_malloc_usable_size_r>:
 800841e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008422:	1f18      	subs	r0, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	bfbc      	itt	lt
 8008428:	580b      	ldrlt	r3, [r1, r0]
 800842a:	18c0      	addlt	r0, r0, r3
 800842c:	4770      	bx	lr

0800842e <__sfputc_r>:
 800842e:	6893      	ldr	r3, [r2, #8]
 8008430:	3b01      	subs	r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	b410      	push	{r4}
 8008436:	6093      	str	r3, [r2, #8]
 8008438:	da08      	bge.n	800844c <__sfputc_r+0x1e>
 800843a:	6994      	ldr	r4, [r2, #24]
 800843c:	42a3      	cmp	r3, r4
 800843e:	db01      	blt.n	8008444 <__sfputc_r+0x16>
 8008440:	290a      	cmp	r1, #10
 8008442:	d103      	bne.n	800844c <__sfputc_r+0x1e>
 8008444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008448:	f000 b932 	b.w	80086b0 <__swbuf_r>
 800844c:	6813      	ldr	r3, [r2, #0]
 800844e:	1c58      	adds	r0, r3, #1
 8008450:	6010      	str	r0, [r2, #0]
 8008452:	7019      	strb	r1, [r3, #0]
 8008454:	4608      	mov	r0, r1
 8008456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800845a:	4770      	bx	lr

0800845c <__sfputs_r>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	4606      	mov	r6, r0
 8008460:	460f      	mov	r7, r1
 8008462:	4614      	mov	r4, r2
 8008464:	18d5      	adds	r5, r2, r3
 8008466:	42ac      	cmp	r4, r5
 8008468:	d101      	bne.n	800846e <__sfputs_r+0x12>
 800846a:	2000      	movs	r0, #0
 800846c:	e007      	b.n	800847e <__sfputs_r+0x22>
 800846e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008472:	463a      	mov	r2, r7
 8008474:	4630      	mov	r0, r6
 8008476:	f7ff ffda 	bl	800842e <__sfputc_r>
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	d1f3      	bne.n	8008466 <__sfputs_r+0xa>
 800847e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008480 <_vfiprintf_r>:
 8008480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008484:	460d      	mov	r5, r1
 8008486:	b09d      	sub	sp, #116	@ 0x74
 8008488:	4614      	mov	r4, r2
 800848a:	4698      	mov	r8, r3
 800848c:	4606      	mov	r6, r0
 800848e:	b118      	cbz	r0, 8008498 <_vfiprintf_r+0x18>
 8008490:	6a03      	ldr	r3, [r0, #32]
 8008492:	b90b      	cbnz	r3, 8008498 <_vfiprintf_r+0x18>
 8008494:	f7fe f9bc 	bl	8006810 <__sinit>
 8008498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800849a:	07d9      	lsls	r1, r3, #31
 800849c:	d405      	bmi.n	80084aa <_vfiprintf_r+0x2a>
 800849e:	89ab      	ldrh	r3, [r5, #12]
 80084a0:	059a      	lsls	r2, r3, #22
 80084a2:	d402      	bmi.n	80084aa <_vfiprintf_r+0x2a>
 80084a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084a6:	f7fe fada 	bl	8006a5e <__retarget_lock_acquire_recursive>
 80084aa:	89ab      	ldrh	r3, [r5, #12]
 80084ac:	071b      	lsls	r3, r3, #28
 80084ae:	d501      	bpl.n	80084b4 <_vfiprintf_r+0x34>
 80084b0:	692b      	ldr	r3, [r5, #16]
 80084b2:	b99b      	cbnz	r3, 80084dc <_vfiprintf_r+0x5c>
 80084b4:	4629      	mov	r1, r5
 80084b6:	4630      	mov	r0, r6
 80084b8:	f000 f938 	bl	800872c <__swsetup_r>
 80084bc:	b170      	cbz	r0, 80084dc <_vfiprintf_r+0x5c>
 80084be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084c0:	07dc      	lsls	r4, r3, #31
 80084c2:	d504      	bpl.n	80084ce <_vfiprintf_r+0x4e>
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295
 80084c8:	b01d      	add	sp, #116	@ 0x74
 80084ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ce:	89ab      	ldrh	r3, [r5, #12]
 80084d0:	0598      	lsls	r0, r3, #22
 80084d2:	d4f7      	bmi.n	80084c4 <_vfiprintf_r+0x44>
 80084d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084d6:	f7fe fac3 	bl	8006a60 <__retarget_lock_release_recursive>
 80084da:	e7f3      	b.n	80084c4 <_vfiprintf_r+0x44>
 80084dc:	2300      	movs	r3, #0
 80084de:	9309      	str	r3, [sp, #36]	@ 0x24
 80084e0:	2320      	movs	r3, #32
 80084e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80084ea:	2330      	movs	r3, #48	@ 0x30
 80084ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800869c <_vfiprintf_r+0x21c>
 80084f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084f4:	f04f 0901 	mov.w	r9, #1
 80084f8:	4623      	mov	r3, r4
 80084fa:	469a      	mov	sl, r3
 80084fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008500:	b10a      	cbz	r2, 8008506 <_vfiprintf_r+0x86>
 8008502:	2a25      	cmp	r2, #37	@ 0x25
 8008504:	d1f9      	bne.n	80084fa <_vfiprintf_r+0x7a>
 8008506:	ebba 0b04 	subs.w	fp, sl, r4
 800850a:	d00b      	beq.n	8008524 <_vfiprintf_r+0xa4>
 800850c:	465b      	mov	r3, fp
 800850e:	4622      	mov	r2, r4
 8008510:	4629      	mov	r1, r5
 8008512:	4630      	mov	r0, r6
 8008514:	f7ff ffa2 	bl	800845c <__sfputs_r>
 8008518:	3001      	adds	r0, #1
 800851a:	f000 80a7 	beq.w	800866c <_vfiprintf_r+0x1ec>
 800851e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008520:	445a      	add	r2, fp
 8008522:	9209      	str	r2, [sp, #36]	@ 0x24
 8008524:	f89a 3000 	ldrb.w	r3, [sl]
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 809f 	beq.w	800866c <_vfiprintf_r+0x1ec>
 800852e:	2300      	movs	r3, #0
 8008530:	f04f 32ff 	mov.w	r2, #4294967295
 8008534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008538:	f10a 0a01 	add.w	sl, sl, #1
 800853c:	9304      	str	r3, [sp, #16]
 800853e:	9307      	str	r3, [sp, #28]
 8008540:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008544:	931a      	str	r3, [sp, #104]	@ 0x68
 8008546:	4654      	mov	r4, sl
 8008548:	2205      	movs	r2, #5
 800854a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854e:	4853      	ldr	r0, [pc, #332]	@ (800869c <_vfiprintf_r+0x21c>)
 8008550:	f7f7 fe5e 	bl	8000210 <memchr>
 8008554:	9a04      	ldr	r2, [sp, #16]
 8008556:	b9d8      	cbnz	r0, 8008590 <_vfiprintf_r+0x110>
 8008558:	06d1      	lsls	r1, r2, #27
 800855a:	bf44      	itt	mi
 800855c:	2320      	movmi	r3, #32
 800855e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008562:	0713      	lsls	r3, r2, #28
 8008564:	bf44      	itt	mi
 8008566:	232b      	movmi	r3, #43	@ 0x2b
 8008568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800856c:	f89a 3000 	ldrb.w	r3, [sl]
 8008570:	2b2a      	cmp	r3, #42	@ 0x2a
 8008572:	d015      	beq.n	80085a0 <_vfiprintf_r+0x120>
 8008574:	9a07      	ldr	r2, [sp, #28]
 8008576:	4654      	mov	r4, sl
 8008578:	2000      	movs	r0, #0
 800857a:	f04f 0c0a 	mov.w	ip, #10
 800857e:	4621      	mov	r1, r4
 8008580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008584:	3b30      	subs	r3, #48	@ 0x30
 8008586:	2b09      	cmp	r3, #9
 8008588:	d94b      	bls.n	8008622 <_vfiprintf_r+0x1a2>
 800858a:	b1b0      	cbz	r0, 80085ba <_vfiprintf_r+0x13a>
 800858c:	9207      	str	r2, [sp, #28]
 800858e:	e014      	b.n	80085ba <_vfiprintf_r+0x13a>
 8008590:	eba0 0308 	sub.w	r3, r0, r8
 8008594:	fa09 f303 	lsl.w	r3, r9, r3
 8008598:	4313      	orrs	r3, r2
 800859a:	9304      	str	r3, [sp, #16]
 800859c:	46a2      	mov	sl, r4
 800859e:	e7d2      	b.n	8008546 <_vfiprintf_r+0xc6>
 80085a0:	9b03      	ldr	r3, [sp, #12]
 80085a2:	1d19      	adds	r1, r3, #4
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	9103      	str	r1, [sp, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	bfbb      	ittet	lt
 80085ac:	425b      	neglt	r3, r3
 80085ae:	f042 0202 	orrlt.w	r2, r2, #2
 80085b2:	9307      	strge	r3, [sp, #28]
 80085b4:	9307      	strlt	r3, [sp, #28]
 80085b6:	bfb8      	it	lt
 80085b8:	9204      	strlt	r2, [sp, #16]
 80085ba:	7823      	ldrb	r3, [r4, #0]
 80085bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80085be:	d10a      	bne.n	80085d6 <_vfiprintf_r+0x156>
 80085c0:	7863      	ldrb	r3, [r4, #1]
 80085c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80085c4:	d132      	bne.n	800862c <_vfiprintf_r+0x1ac>
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	1d1a      	adds	r2, r3, #4
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	9203      	str	r2, [sp, #12]
 80085ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085d2:	3402      	adds	r4, #2
 80085d4:	9305      	str	r3, [sp, #20]
 80085d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80086ac <_vfiprintf_r+0x22c>
 80085da:	7821      	ldrb	r1, [r4, #0]
 80085dc:	2203      	movs	r2, #3
 80085de:	4650      	mov	r0, sl
 80085e0:	f7f7 fe16 	bl	8000210 <memchr>
 80085e4:	b138      	cbz	r0, 80085f6 <_vfiprintf_r+0x176>
 80085e6:	9b04      	ldr	r3, [sp, #16]
 80085e8:	eba0 000a 	sub.w	r0, r0, sl
 80085ec:	2240      	movs	r2, #64	@ 0x40
 80085ee:	4082      	lsls	r2, r0
 80085f0:	4313      	orrs	r3, r2
 80085f2:	3401      	adds	r4, #1
 80085f4:	9304      	str	r3, [sp, #16]
 80085f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fa:	4829      	ldr	r0, [pc, #164]	@ (80086a0 <_vfiprintf_r+0x220>)
 80085fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008600:	2206      	movs	r2, #6
 8008602:	f7f7 fe05 	bl	8000210 <memchr>
 8008606:	2800      	cmp	r0, #0
 8008608:	d03f      	beq.n	800868a <_vfiprintf_r+0x20a>
 800860a:	4b26      	ldr	r3, [pc, #152]	@ (80086a4 <_vfiprintf_r+0x224>)
 800860c:	bb1b      	cbnz	r3, 8008656 <_vfiprintf_r+0x1d6>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	3307      	adds	r3, #7
 8008612:	f023 0307 	bic.w	r3, r3, #7
 8008616:	3308      	adds	r3, #8
 8008618:	9303      	str	r3, [sp, #12]
 800861a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800861c:	443b      	add	r3, r7
 800861e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008620:	e76a      	b.n	80084f8 <_vfiprintf_r+0x78>
 8008622:	fb0c 3202 	mla	r2, ip, r2, r3
 8008626:	460c      	mov	r4, r1
 8008628:	2001      	movs	r0, #1
 800862a:	e7a8      	b.n	800857e <_vfiprintf_r+0xfe>
 800862c:	2300      	movs	r3, #0
 800862e:	3401      	adds	r4, #1
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	4619      	mov	r1, r3
 8008634:	f04f 0c0a 	mov.w	ip, #10
 8008638:	4620      	mov	r0, r4
 800863a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800863e:	3a30      	subs	r2, #48	@ 0x30
 8008640:	2a09      	cmp	r2, #9
 8008642:	d903      	bls.n	800864c <_vfiprintf_r+0x1cc>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0c6      	beq.n	80085d6 <_vfiprintf_r+0x156>
 8008648:	9105      	str	r1, [sp, #20]
 800864a:	e7c4      	b.n	80085d6 <_vfiprintf_r+0x156>
 800864c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008650:	4604      	mov	r4, r0
 8008652:	2301      	movs	r3, #1
 8008654:	e7f0      	b.n	8008638 <_vfiprintf_r+0x1b8>
 8008656:	ab03      	add	r3, sp, #12
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	462a      	mov	r2, r5
 800865c:	4b12      	ldr	r3, [pc, #72]	@ (80086a8 <_vfiprintf_r+0x228>)
 800865e:	a904      	add	r1, sp, #16
 8008660:	4630      	mov	r0, r6
 8008662:	f7fd fc91 	bl	8005f88 <_printf_float>
 8008666:	4607      	mov	r7, r0
 8008668:	1c78      	adds	r0, r7, #1
 800866a:	d1d6      	bne.n	800861a <_vfiprintf_r+0x19a>
 800866c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800866e:	07d9      	lsls	r1, r3, #31
 8008670:	d405      	bmi.n	800867e <_vfiprintf_r+0x1fe>
 8008672:	89ab      	ldrh	r3, [r5, #12]
 8008674:	059a      	lsls	r2, r3, #22
 8008676:	d402      	bmi.n	800867e <_vfiprintf_r+0x1fe>
 8008678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800867a:	f7fe f9f1 	bl	8006a60 <__retarget_lock_release_recursive>
 800867e:	89ab      	ldrh	r3, [r5, #12]
 8008680:	065b      	lsls	r3, r3, #25
 8008682:	f53f af1f 	bmi.w	80084c4 <_vfiprintf_r+0x44>
 8008686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008688:	e71e      	b.n	80084c8 <_vfiprintf_r+0x48>
 800868a:	ab03      	add	r3, sp, #12
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	462a      	mov	r2, r5
 8008690:	4b05      	ldr	r3, [pc, #20]	@ (80086a8 <_vfiprintf_r+0x228>)
 8008692:	a904      	add	r1, sp, #16
 8008694:	4630      	mov	r0, r6
 8008696:	f7fd ff0f 	bl	80064b8 <_printf_i>
 800869a:	e7e4      	b.n	8008666 <_vfiprintf_r+0x1e6>
 800869c:	08008ff8 	.word	0x08008ff8
 80086a0:	08009002 	.word	0x08009002
 80086a4:	08005f89 	.word	0x08005f89
 80086a8:	0800845d 	.word	0x0800845d
 80086ac:	08008ffe 	.word	0x08008ffe

080086b0 <__swbuf_r>:
 80086b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b2:	460e      	mov	r6, r1
 80086b4:	4614      	mov	r4, r2
 80086b6:	4605      	mov	r5, r0
 80086b8:	b118      	cbz	r0, 80086c2 <__swbuf_r+0x12>
 80086ba:	6a03      	ldr	r3, [r0, #32]
 80086bc:	b90b      	cbnz	r3, 80086c2 <__swbuf_r+0x12>
 80086be:	f7fe f8a7 	bl	8006810 <__sinit>
 80086c2:	69a3      	ldr	r3, [r4, #24]
 80086c4:	60a3      	str	r3, [r4, #8]
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	071a      	lsls	r2, r3, #28
 80086ca:	d501      	bpl.n	80086d0 <__swbuf_r+0x20>
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	b943      	cbnz	r3, 80086e2 <__swbuf_r+0x32>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 f82a 	bl	800872c <__swsetup_r>
 80086d8:	b118      	cbz	r0, 80086e2 <__swbuf_r+0x32>
 80086da:	f04f 37ff 	mov.w	r7, #4294967295
 80086de:	4638      	mov	r0, r7
 80086e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	6922      	ldr	r2, [r4, #16]
 80086e6:	1a98      	subs	r0, r3, r2
 80086e8:	6963      	ldr	r3, [r4, #20]
 80086ea:	b2f6      	uxtb	r6, r6
 80086ec:	4283      	cmp	r3, r0
 80086ee:	4637      	mov	r7, r6
 80086f0:	dc05      	bgt.n	80086fe <__swbuf_r+0x4e>
 80086f2:	4621      	mov	r1, r4
 80086f4:	4628      	mov	r0, r5
 80086f6:	f7ff fdb7 	bl	8008268 <_fflush_r>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d1ed      	bne.n	80086da <__swbuf_r+0x2a>
 80086fe:	68a3      	ldr	r3, [r4, #8]
 8008700:	3b01      	subs	r3, #1
 8008702:	60a3      	str	r3, [r4, #8]
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	1c5a      	adds	r2, r3, #1
 8008708:	6022      	str	r2, [r4, #0]
 800870a:	701e      	strb	r6, [r3, #0]
 800870c:	6962      	ldr	r2, [r4, #20]
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	429a      	cmp	r2, r3
 8008712:	d004      	beq.n	800871e <__swbuf_r+0x6e>
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	07db      	lsls	r3, r3, #31
 8008718:	d5e1      	bpl.n	80086de <__swbuf_r+0x2e>
 800871a:	2e0a      	cmp	r6, #10
 800871c:	d1df      	bne.n	80086de <__swbuf_r+0x2e>
 800871e:	4621      	mov	r1, r4
 8008720:	4628      	mov	r0, r5
 8008722:	f7ff fda1 	bl	8008268 <_fflush_r>
 8008726:	2800      	cmp	r0, #0
 8008728:	d0d9      	beq.n	80086de <__swbuf_r+0x2e>
 800872a:	e7d6      	b.n	80086da <__swbuf_r+0x2a>

0800872c <__swsetup_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	4b29      	ldr	r3, [pc, #164]	@ (80087d4 <__swsetup_r+0xa8>)
 8008730:	4605      	mov	r5, r0
 8008732:	6818      	ldr	r0, [r3, #0]
 8008734:	460c      	mov	r4, r1
 8008736:	b118      	cbz	r0, 8008740 <__swsetup_r+0x14>
 8008738:	6a03      	ldr	r3, [r0, #32]
 800873a:	b90b      	cbnz	r3, 8008740 <__swsetup_r+0x14>
 800873c:	f7fe f868 	bl	8006810 <__sinit>
 8008740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008744:	0719      	lsls	r1, r3, #28
 8008746:	d422      	bmi.n	800878e <__swsetup_r+0x62>
 8008748:	06da      	lsls	r2, r3, #27
 800874a:	d407      	bmi.n	800875c <__swsetup_r+0x30>
 800874c:	2209      	movs	r2, #9
 800874e:	602a      	str	r2, [r5, #0]
 8008750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008754:	81a3      	strh	r3, [r4, #12]
 8008756:	f04f 30ff 	mov.w	r0, #4294967295
 800875a:	e033      	b.n	80087c4 <__swsetup_r+0x98>
 800875c:	0758      	lsls	r0, r3, #29
 800875e:	d512      	bpl.n	8008786 <__swsetup_r+0x5a>
 8008760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008762:	b141      	cbz	r1, 8008776 <__swsetup_r+0x4a>
 8008764:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008768:	4299      	cmp	r1, r3
 800876a:	d002      	beq.n	8008772 <__swsetup_r+0x46>
 800876c:	4628      	mov	r0, r5
 800876e:	f7fe ffd3 	bl	8007718 <_free_r>
 8008772:	2300      	movs	r3, #0
 8008774:	6363      	str	r3, [r4, #52]	@ 0x34
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800877c:	81a3      	strh	r3, [r4, #12]
 800877e:	2300      	movs	r3, #0
 8008780:	6063      	str	r3, [r4, #4]
 8008782:	6923      	ldr	r3, [r4, #16]
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	f043 0308 	orr.w	r3, r3, #8
 800878c:	81a3      	strh	r3, [r4, #12]
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	b94b      	cbnz	r3, 80087a6 <__swsetup_r+0x7a>
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800879c:	d003      	beq.n	80087a6 <__swsetup_r+0x7a>
 800879e:	4621      	mov	r1, r4
 80087a0:	4628      	mov	r0, r5
 80087a2:	f000 f883 	bl	80088ac <__smakebuf_r>
 80087a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087aa:	f013 0201 	ands.w	r2, r3, #1
 80087ae:	d00a      	beq.n	80087c6 <__swsetup_r+0x9a>
 80087b0:	2200      	movs	r2, #0
 80087b2:	60a2      	str	r2, [r4, #8]
 80087b4:	6962      	ldr	r2, [r4, #20]
 80087b6:	4252      	negs	r2, r2
 80087b8:	61a2      	str	r2, [r4, #24]
 80087ba:	6922      	ldr	r2, [r4, #16]
 80087bc:	b942      	cbnz	r2, 80087d0 <__swsetup_r+0xa4>
 80087be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087c2:	d1c5      	bne.n	8008750 <__swsetup_r+0x24>
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	0799      	lsls	r1, r3, #30
 80087c8:	bf58      	it	pl
 80087ca:	6962      	ldrpl	r2, [r4, #20]
 80087cc:	60a2      	str	r2, [r4, #8]
 80087ce:	e7f4      	b.n	80087ba <__swsetup_r+0x8e>
 80087d0:	2000      	movs	r0, #0
 80087d2:	e7f7      	b.n	80087c4 <__swsetup_r+0x98>
 80087d4:	20000028 	.word	0x20000028

080087d8 <_raise_r>:
 80087d8:	291f      	cmp	r1, #31
 80087da:	b538      	push	{r3, r4, r5, lr}
 80087dc:	4605      	mov	r5, r0
 80087de:	460c      	mov	r4, r1
 80087e0:	d904      	bls.n	80087ec <_raise_r+0x14>
 80087e2:	2316      	movs	r3, #22
 80087e4:	6003      	str	r3, [r0, #0]
 80087e6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80087ee:	b112      	cbz	r2, 80087f6 <_raise_r+0x1e>
 80087f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087f4:	b94b      	cbnz	r3, 800880a <_raise_r+0x32>
 80087f6:	4628      	mov	r0, r5
 80087f8:	f000 f830 	bl	800885c <_getpid_r>
 80087fc:	4622      	mov	r2, r4
 80087fe:	4601      	mov	r1, r0
 8008800:	4628      	mov	r0, r5
 8008802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008806:	f000 b817 	b.w	8008838 <_kill_r>
 800880a:	2b01      	cmp	r3, #1
 800880c:	d00a      	beq.n	8008824 <_raise_r+0x4c>
 800880e:	1c59      	adds	r1, r3, #1
 8008810:	d103      	bne.n	800881a <_raise_r+0x42>
 8008812:	2316      	movs	r3, #22
 8008814:	6003      	str	r3, [r0, #0]
 8008816:	2001      	movs	r0, #1
 8008818:	e7e7      	b.n	80087ea <_raise_r+0x12>
 800881a:	2100      	movs	r1, #0
 800881c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008820:	4620      	mov	r0, r4
 8008822:	4798      	blx	r3
 8008824:	2000      	movs	r0, #0
 8008826:	e7e0      	b.n	80087ea <_raise_r+0x12>

08008828 <raise>:
 8008828:	4b02      	ldr	r3, [pc, #8]	@ (8008834 <raise+0xc>)
 800882a:	4601      	mov	r1, r0
 800882c:	6818      	ldr	r0, [r3, #0]
 800882e:	f7ff bfd3 	b.w	80087d8 <_raise_r>
 8008832:	bf00      	nop
 8008834:	20000028 	.word	0x20000028

08008838 <_kill_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4d07      	ldr	r5, [pc, #28]	@ (8008858 <_kill_r+0x20>)
 800883c:	2300      	movs	r3, #0
 800883e:	4604      	mov	r4, r0
 8008840:	4608      	mov	r0, r1
 8008842:	4611      	mov	r1, r2
 8008844:	602b      	str	r3, [r5, #0]
 8008846:	f7fa fc1f 	bl	8003088 <_kill>
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	d102      	bne.n	8008854 <_kill_r+0x1c>
 800884e:	682b      	ldr	r3, [r5, #0]
 8008850:	b103      	cbz	r3, 8008854 <_kill_r+0x1c>
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	bd38      	pop	{r3, r4, r5, pc}
 8008856:	bf00      	nop
 8008858:	2000066c 	.word	0x2000066c

0800885c <_getpid_r>:
 800885c:	f7fa bc0c 	b.w	8003078 <_getpid>

08008860 <__swhatbuf_r>:
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	460c      	mov	r4, r1
 8008864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008868:	2900      	cmp	r1, #0
 800886a:	b096      	sub	sp, #88	@ 0x58
 800886c:	4615      	mov	r5, r2
 800886e:	461e      	mov	r6, r3
 8008870:	da0d      	bge.n	800888e <__swhatbuf_r+0x2e>
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008878:	f04f 0100 	mov.w	r1, #0
 800887c:	bf14      	ite	ne
 800887e:	2340      	movne	r3, #64	@ 0x40
 8008880:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008884:	2000      	movs	r0, #0
 8008886:	6031      	str	r1, [r6, #0]
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	b016      	add	sp, #88	@ 0x58
 800888c:	bd70      	pop	{r4, r5, r6, pc}
 800888e:	466a      	mov	r2, sp
 8008890:	f000 f848 	bl	8008924 <_fstat_r>
 8008894:	2800      	cmp	r0, #0
 8008896:	dbec      	blt.n	8008872 <__swhatbuf_r+0x12>
 8008898:	9901      	ldr	r1, [sp, #4]
 800889a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800889e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088a2:	4259      	negs	r1, r3
 80088a4:	4159      	adcs	r1, r3
 80088a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088aa:	e7eb      	b.n	8008884 <__swhatbuf_r+0x24>

080088ac <__smakebuf_r>:
 80088ac:	898b      	ldrh	r3, [r1, #12]
 80088ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088b0:	079d      	lsls	r5, r3, #30
 80088b2:	4606      	mov	r6, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	d507      	bpl.n	80088c8 <__smakebuf_r+0x1c>
 80088b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	6123      	str	r3, [r4, #16]
 80088c0:	2301      	movs	r3, #1
 80088c2:	6163      	str	r3, [r4, #20]
 80088c4:	b003      	add	sp, #12
 80088c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c8:	ab01      	add	r3, sp, #4
 80088ca:	466a      	mov	r2, sp
 80088cc:	f7ff ffc8 	bl	8008860 <__swhatbuf_r>
 80088d0:	9f00      	ldr	r7, [sp, #0]
 80088d2:	4605      	mov	r5, r0
 80088d4:	4639      	mov	r1, r7
 80088d6:	4630      	mov	r0, r6
 80088d8:	f7fd fa2a 	bl	8005d30 <_malloc_r>
 80088dc:	b948      	cbnz	r0, 80088f2 <__smakebuf_r+0x46>
 80088de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e2:	059a      	lsls	r2, r3, #22
 80088e4:	d4ee      	bmi.n	80088c4 <__smakebuf_r+0x18>
 80088e6:	f023 0303 	bic.w	r3, r3, #3
 80088ea:	f043 0302 	orr.w	r3, r3, #2
 80088ee:	81a3      	strh	r3, [r4, #12]
 80088f0:	e7e2      	b.n	80088b8 <__smakebuf_r+0xc>
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	6020      	str	r0, [r4, #0]
 80088f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	9b01      	ldr	r3, [sp, #4]
 80088fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008902:	b15b      	cbz	r3, 800891c <__smakebuf_r+0x70>
 8008904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008908:	4630      	mov	r0, r6
 800890a:	f000 f81d 	bl	8008948 <_isatty_r>
 800890e:	b128      	cbz	r0, 800891c <__smakebuf_r+0x70>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f023 0303 	bic.w	r3, r3, #3
 8008916:	f043 0301 	orr.w	r3, r3, #1
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	431d      	orrs	r5, r3
 8008920:	81a5      	strh	r5, [r4, #12]
 8008922:	e7cf      	b.n	80088c4 <__smakebuf_r+0x18>

08008924 <_fstat_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4d07      	ldr	r5, [pc, #28]	@ (8008944 <_fstat_r+0x20>)
 8008928:	2300      	movs	r3, #0
 800892a:	4604      	mov	r4, r0
 800892c:	4608      	mov	r0, r1
 800892e:	4611      	mov	r1, r2
 8008930:	602b      	str	r3, [r5, #0]
 8008932:	f7fa fc09 	bl	8003148 <_fstat>
 8008936:	1c43      	adds	r3, r0, #1
 8008938:	d102      	bne.n	8008940 <_fstat_r+0x1c>
 800893a:	682b      	ldr	r3, [r5, #0]
 800893c:	b103      	cbz	r3, 8008940 <_fstat_r+0x1c>
 800893e:	6023      	str	r3, [r4, #0]
 8008940:	bd38      	pop	{r3, r4, r5, pc}
 8008942:	bf00      	nop
 8008944:	2000066c 	.word	0x2000066c

08008948 <_isatty_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4d06      	ldr	r5, [pc, #24]	@ (8008964 <_isatty_r+0x1c>)
 800894c:	2300      	movs	r3, #0
 800894e:	4604      	mov	r4, r0
 8008950:	4608      	mov	r0, r1
 8008952:	602b      	str	r3, [r5, #0]
 8008954:	f7fa fc08 	bl	8003168 <_isatty>
 8008958:	1c43      	adds	r3, r0, #1
 800895a:	d102      	bne.n	8008962 <_isatty_r+0x1a>
 800895c:	682b      	ldr	r3, [r5, #0]
 800895e:	b103      	cbz	r3, 8008962 <_isatty_r+0x1a>
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	bd38      	pop	{r3, r4, r5, pc}
 8008964:	2000066c 	.word	0x2000066c

08008968 <_init>:
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896a:	bf00      	nop
 800896c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896e:	bc08      	pop	{r3}
 8008970:	469e      	mov	lr, r3
 8008972:	4770      	bx	lr

08008974 <_fini>:
 8008974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008976:	bf00      	nop
 8008978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897a:	bc08      	pop	{r3}
 800897c:	469e      	mov	lr, r3
 800897e:	4770      	bx	lr
