
BMS_SN4_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  08009ca0  08009ca0  0000aca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a468  0800a468  0000c218  2**0
                  CONTENTS
  4 .ARM          00000008  0800a468  0800a468  0000b468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a470  0800a470  0000c218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a470  0800a470  0000b470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a474  0800a474  0000b474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800a478  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000218  0800a690  0000c218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  0800a690  0000c79c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018869  00000000  00000000  0000c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039bb  00000000  00000000  00024ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  00028470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001263  00000000  00000000  00029bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026246  00000000  00000000  0002ae5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d886  00000000  00000000  000510a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbf82  00000000  00000000  0006e927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a8a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073b0  00000000  00000000  0014a8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00151c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009c88 	.word	0x08009c88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	08009c88 	.word	0x08009c88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <pec15_calc>:
// ****************** Error Correction *******************
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8000f84:	2310      	movs	r3, #16
 8000f86:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000f88:	2300      	movs	r3, #0
 8000f8a:	737b      	strb	r3, [r7, #13]
 8000f8c:	e018      	b.n	8000fc0 <pec15_calc+0x48>
	{
		addr = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	09db      	lsrs	r3, r3, #7
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	7b7a      	ldrb	r2, [r7, #13]
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	440a      	add	r2, r1
 8000f9a:	7812      	ldrb	r2, [r2, #0]
 8000f9c:	4053      	eors	r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	897b      	ldrh	r3, [r7, #10]
 8000fac:	490b      	ldr	r1, [pc, #44]	@ (8000fdc <pec15_calc+0x64>)
 8000fae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4053      	eors	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	737b      	strb	r3, [r7, #13]
 8000fc0:	7b7a      	ldrb	r2, [r7, #13]
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d3e2      	bcc.n	8000f8e <pec15_calc+0x16>
	}

	return(remainder * 2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	b29b      	uxth	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	08009ce0 	.word	0x08009ce0

08000fe0 <pec10_calc>:

/* Calculates  and returns the CRC10 */
uint16_t pec10_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8000fec:	2310      	movs	r3, #16
 8000fee:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	737b      	strb	r3, [r7, #13]
 8000ff4:	e01c      	b.n	8001030 <pec10_calc+0x50>
	{
		addr = ((remainder >> 2) ^ data[i]) & 0xff;//calculate PEC table address
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	7b7a      	ldrb	r2, [r7, #13]
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	440a      	add	r2, r1
 8001002:	7812      	ldrb	r2, [r2, #0]
 8001004:	4053      	eors	r3, r2
 8001006:	b29b      	uxth	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc10Table[addr];
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	897b      	ldrh	r3, [r7, #10]
 8001014:	490c      	ldr	r1, [pc, #48]	@ (8001048 <pec10_calc+0x68>)
 8001016:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4053      	eors	r3, r2
 800101e:	b21b      	sxth	r3, r3
 8001020:	81fb      	strh	r3, [r7, #14]
		remainder &= 0x3FF; //Ensure remainder stays within 10 bits
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001028:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 800102a:	7b7b      	ldrb	r3, [r7, #13]
 800102c:	3301      	adds	r3, #1
 800102e:	737b      	strb	r3, [r7, #13]
 8001030:	7b7a      	ldrb	r2, [r7, #13]
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3de      	bcc.n	8000ff6 <pec10_calc+0x16>
	}

	return(remainder); // No 0 in LSB
 8001038:	89fb      	ldrh	r3, [r7, #14]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	08009ee0 	.word	0x08009ee0

0800104c <cmd_68>:
//***************** Read and Write to SPI ****************
/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	4619      	mov	r1, r3
 8001066:	2002      	movs	r0, #2
 8001068:	f7ff ff86 	bl	8000f78 <pec15_calc>
 800106c:	4603      	mov	r3, r0
 800106e:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001070:	89fb      	ldrh	r3, [r7, #14]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	72fb      	strb	r3, [r7, #11]

	FEB_cs_low();
 8001080:	f001 fdce 	bl	8002c20 <FEB_cs_low>
	FEB_spi_write_array(4,cmd);
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	4619      	mov	r1, r3
 800108a:	2004      	movs	r0, #4
 800108c:	f001 fde0 	bl	8002c50 <FEB_spi_write_array>
	FEB_cs_high();
 8001090:	f001 fdd2 	bl	8002c38 <FEB_cs_high>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <cmd_68_r>:
void cmd_68_r(uint8_t tx_cmd[2],uint8_t* data, uint8_t len) //The command to be transmitted
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	4613      	mov	r3, r2
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	743b      	strb	r3, [r7, #16]
	cmd[1] =  tx_cmd[1];
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	747b      	strb	r3, [r7, #17]
	cmd_pec = pec15_calc(2, cmd);
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4619      	mov	r1, r3
 80010bc:	2002      	movs	r0, #2
 80010be:	f7ff ff5b 	bl	8000f78 <pec15_calc>
 80010c2:	4603      	mov	r3, r0
 80010c4:	82fb      	strh	r3, [r7, #22]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80010c6:	8afb      	ldrh	r3, [r7, #22]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t)(cmd_pec);
 80010d0:	8afb      	ldrh	r3, [r7, #22]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	74fb      	strb	r3, [r7, #19]

	FEB_cs_low();
 80010d6:	f001 fda3 	bl	8002c20 <FEB_cs_low>
	FEB_spi_write_read(cmd, 4, data, len);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f107 0010 	add.w	r0, r7, #16
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	2104      	movs	r1, #4
 80010e4:	f001 fdc8 	bl	8002c78 <FEB_spi_write_read>
	FEB_cs_high();
 80010e8:	f001 fda6 	bl	8002c38 <FEB_cs_high>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8001102:	2306      	movs	r3, #6
 8001104:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	3304      	adds	r3, #4
 800110e:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8001110:	7efb      	ldrb	r3, [r7, #27]
 8001112:	4618      	mov	r0, r3
 8001114:	f006 f930 	bl	8007378 <malloc>
 8001118:	4603      	mov	r3, r0
 800111a:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	7852      	ldrb	r2, [r2, #1]
 800112c:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 800112e:	6979      	ldr	r1, [r7, #20]
 8001130:	2002      	movs	r0, #2
 8001132:	f7ff ff21 	bl	8000f78 <pec15_calc>
 8001136:	4603      	mov	r3, r0
 8001138:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800113a:	8a7b      	ldrh	r3, [r7, #18]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b29a      	uxth	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3302      	adds	r3, #2
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3303      	adds	r3, #3
 800114c:	8a7a      	ldrh	r2, [r7, #18]
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8001152:	2304      	movs	r3, #4
 8001154:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each ADBMS630B, this loops starts with the last IC on the stack.
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	77bb      	strb	r3, [r7, #30]
 800115a:	e042      	b.n	80011e2 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800115c:	2300      	movs	r3, #0
 800115e:	777b      	strb	r3, [r7, #29]
 8001160:	e016      	b.n	8001190 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8001162:	7fbb      	ldrb	r3, [r7, #30]
 8001164:	1e5a      	subs	r2, r3, #1
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	461a      	mov	r2, r3
 8001170:	7f7b      	ldrb	r3, [r7, #29]
 8001172:	4413      	add	r3, r2
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	441a      	add	r2, r3
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	6979      	ldr	r1, [r7, #20]
 800117e:	440b      	add	r3, r1
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8001184:	7ffb      	ldrb	r3, [r7, #31]
 8001186:	3301      	adds	r3, #1
 8001188:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800118a:	7f7b      	ldrb	r3, [r7, #29]
 800118c:	3301      	adds	r3, #1
 800118e:	777b      	strb	r3, [r7, #29]
 8001190:	7f7a      	ldrb	r2, [r7, #29]
 8001192:	7f3b      	ldrb	r3, [r7, #28]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3e4      	bcc.n	8001162 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec10_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 8001198:	7fbb      	ldrb	r3, [r7, #30]
 800119a:	1e5a      	subs	r2, r3, #1
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	461a      	mov	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	441a      	add	r2, r3
 80011aa:	7f3b      	ldrb	r3, [r7, #28]
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff16 	bl	8000fe0 <pec10_calc>
 80011b4:	4603      	mov	r3, r0
 80011b6:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 80011b8:	8a3b      	ldrh	r3, [r7, #16]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	b299      	uxth	r1, r3
 80011be:	7ffb      	ldrb	r3, [r7, #31]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	b2ca      	uxtb	r2, r1
 80011c6:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 80011c8:	7ffb      	ldrb	r3, [r7, #31]
 80011ca:	3301      	adds	r3, #1
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	4413      	add	r3, r2
 80011d0:	8a3a      	ldrh	r2, [r7, #16]
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	3302      	adds	r3, #2
 80011da:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each ADBMS630B, this loops starts with the last IC on the stack.
 80011dc:	7fbb      	ldrb	r3, [r7, #30]
 80011de:	3b01      	subs	r3, #1
 80011e0:	77bb      	strb	r3, [r7, #30]
 80011e2:	7fbb      	ldrb	r3, [r7, #30]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1b9      	bne.n	800115c <write_68+0x68>
	}

	FEB_cs_low();
 80011e8:	f001 fd1a 	bl	8002c20 <FEB_cs_low>
	FEB_spi_write_array(CMD_LEN, cmd);
 80011ec:	7efb      	ldrb	r3, [r7, #27]
 80011ee:	6979      	ldr	r1, [r7, #20]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fd2d 	bl	8002c50 <FEB_spi_write_array>
	FEB_cs_high();
 80011f6:	f001 fd1f 	bl	8002c38 <FEB_cs_high>

	free(cmd);
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f006 f8c4 	bl	8007388 <free>
}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <transmitCMD>:

//****************** CMD Translation ****************************
void transmitCMD(uint16_t cmdcode){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	b29b      	uxth	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	733b      	strb	r3, [r7, #12]
	cmd[1]=(cmdcode%0x100);//selects second byte
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	737b      	strb	r3, [r7, #13]
	cmd_68(cmd);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff10 	bl	800104c <cmd_68>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <transmitCMDR>:
void transmitCMDR(uint16_t cmdcode,uint8_t*data,uint8_t len){
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
 8001240:	4613      	mov	r3, r2
 8001242:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	b29b      	uxth	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	733b      	strb	r3, [r7, #12]
	cmd[1]=(cmdcode%0x100);//selects second byte
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	737b      	strb	r3, [r7, #13]
	cmd_68_r(cmd,data,len);
 8001254:	797a      	ldrb	r2, [r7, #5]
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	6839      	ldr	r1, [r7, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff1d 	bl	800109c <cmd_68_r>
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <get_gpio_pin>:


// ******************************** Helper Functions ********************************


static uint8_t get_gpio_pin(uint8_t mux) {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	if(mux<0||mux>3)return -1;
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b03      	cmp	r3, #3
 800127a:	d901      	bls.n	8001280 <get_gpio_pin+0x14>
 800127c:	23ff      	movs	r3, #255	@ 0xff
 800127e:	e002      	b.n	8001286 <get_gpio_pin+0x1a>

	return gpio_map[mux];
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <get_gpio_pin+0x28>)
 8001284:	5cd3      	ldrb	r3, [r2, r3]
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008

08001298 <get_sensor>:

static uint8_t get_sensor(uint8_t mux, uint8_t channel) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	return mux * 8 + channel;
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	4413      	add	r3, r2
 80012b2:	b2db      	uxtb	r3, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <convert_voltage>:

static float convert_voltage(int16_t raw_code) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
	return raw_code * 0.000150 + 1.5;
 80012ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f948 	bl	8000564 <__aeabi_i2d>
 80012d4:	a30f      	add	r3, pc, #60	@ (adr r3, 8001314 <convert_voltage+0x54>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7ff f9ad 	bl	8000638 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <convert_voltage+0x50>)
 80012ec:	f7fe ffee 	bl	80002cc <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc76 	bl	8000be8 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	ee07 3a90 	vmov	s15, r3
}
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	f3af 8000 	nop.w
 8001310:	3ff80000 	.word	0x3ff80000
 8001314:	30553261 	.word	0x30553261
 8001318:	3f23a92a 	.word	0x3f23a92a

0800131c <FEB_ADBMS_Init>:
	return voltage;
}
//TODO: Convert voltage to temperature
// ******************************** Functions ********************************

void FEB_ADBMS_Init() {
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af06      	add	r7, sp, #24
	FEB_cs_high();
 8001322:	f001 fc89 	bl	8002c38 <FEB_cs_high>
	ADBMS6830B_init_cfg(FEB_NUM_IC, IC_Config);
 8001326:	491d      	ldr	r1, [pc, #116]	@ (800139c <FEB_ADBMS_Init+0x80>)
 8001328:	2001      	movs	r0, #1
 800132a:	f000 fa29 	bl	8001780 <ADBMS6830B_init_cfg>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 800132e:	2300      	movs	r3, #0
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	e016      	b.n	8001362 <FEB_ADBMS_Init+0x46>
		ADBMS6830B_set_cfgr(ic, IC_Config, refon, cth_bits, gpio_bits, dcc_bits, dcto_bits, uv, ov);
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <FEB_ADBMS_Init+0x84>)
 8001336:	7819      	ldrb	r1, [r3, #0]
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <FEB_ADBMS_Init+0x88>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	4a1a      	ldr	r2, [pc, #104]	@ (80013a8 <FEB_ADBMS_Init+0x8c>)
 800133e:	8812      	ldrh	r2, [r2, #0]
 8001340:	79f8      	ldrb	r0, [r7, #7]
 8001342:	9204      	str	r2, [sp, #16]
 8001344:	9303      	str	r3, [sp, #12]
 8001346:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <FEB_ADBMS_Init+0x90>)
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <FEB_ADBMS_Init+0x94>)
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <FEB_ADBMS_Init+0x98>)
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <FEB_ADBMS_Init+0x9c>)
 8001354:	460a      	mov	r2, r1
 8001356:	4911      	ldr	r1, [pc, #68]	@ (800139c <FEB_ADBMS_Init+0x80>)
 8001358:	f000 fab6 	bl	80018c8 <ADBMS6830B_set_cfgr>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	3301      	adds	r3, #1
 8001360:	71fb      	strb	r3, [r7, #7]
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0e5      	beq.n	8001334 <FEB_ADBMS_Init+0x18>
	}
	ADBMS6830B_reset_crc_count(FEB_NUM_IC, IC_Config);
 8001368:	490c      	ldr	r1, [pc, #48]	@ (800139c <FEB_ADBMS_Init+0x80>)
 800136a:	2001      	movs	r0, #1
 800136c:	f000 fa3f 	bl	80017ee <ADBMS6830B_reset_crc_count>
	ADBMS6830B_init_reg_limits(FEB_NUM_IC, IC_Config);
 8001370:	490a      	ldr	r1, [pc, #40]	@ (800139c <FEB_ADBMS_Init+0x80>)
 8001372:	2001      	movs	r0, #1
 8001374:	f000 fd7b 	bl	8001e6e <ADBMS6830B_init_reg_limits>
	wakeup_sleep(FEB_NUM_IC);
 8001378:	2001      	movs	r0, #1
 800137a:	f001 f8eb 	bl	8002554 <wakeup_sleep>
	ADBMS6830B_wrcfga(FEB_NUM_IC, IC_Config);
 800137e:	4907      	ldr	r1, [pc, #28]	@ (800139c <FEB_ADBMS_Init+0x80>)
 8001380:	2001      	movs	r0, #1
 8001382:	f000 ff10 	bl	80021a6 <ADBMS6830B_wrcfga>
	ADBMS6830B_wrcfgb(FEB_NUM_IC, IC_Config);
 8001386:	4905      	ldr	r1, [pc, #20]	@ (800139c <FEB_ADBMS_Init+0x80>)
 8001388:	2001      	movs	r0, #1
 800138a:	f000 ff8c 	bl	80022a6 <ADBMS6830B_wrcfgb>
	//TODO:read back config
	start_adc_cell_voltage_measurements();
 800138e:	f000 f83c 	bl	800140a <start_adc_cell_voltage_measurements>

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000037c 	.word	0x2000037c
 80013a0:	20000000 	.word	0x20000000
 80013a4:	2000000c 	.word	0x2000000c
 80013a8:	2000000e 	.word	0x2000000e
 80013ac:	200004a0 	.word	0x200004a0
 80013b0:	20000494 	.word	0x20000494
 80013b4:	20000488 	.word	0x20000488
 80013b8:	20000004 	.word	0x20000004

080013bc <FEB_ADBMS_Voltage_Process>:

void FEB_ADBMS_Voltage_Process() {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	read_cell_voltages();
 80013c0:	f000 f834 	bl	800142c <read_cell_voltages>
	store_cell_voltages();
 80013c4:	f000 f840 	bl	8001448 <store_cell_voltages>
	validate_voltages();
 80013c8:	f000 f8ae 	bl	8001528 <validate_voltages>

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <FEB_ADBMS_Temperature_Process>:

void FEB_ADBMS_Temperature_Process(){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	for (uint8_t channel = 0; channel < 8; channel++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	e00e      	b.n	80013fa <FEB_ADBMS_Temperature_Process+0x2a>
			configure_gpio_bits(channel);
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f8f2 	bl	80015c8 <configure_gpio_bits>
			start_aux_voltage_measurements();
 80013e4:	f000 f960 	bl	80016a8 <start_aux_voltage_measurements>
			read_aux_voltages();
 80013e8:	f000 f96c 	bl	80016c4 <read_aux_voltages>
			store_cell_temps(channel);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f976 	bl	80016e0 <store_cell_temps>
	for (uint8_t channel = 0; channel < 8; channel++) {
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	3301      	adds	r3, #1
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b07      	cmp	r3, #7
 80013fe:	d9ed      	bls.n	80013dc <FEB_ADBMS_Temperature_Process+0xc>
	}
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <start_adc_cell_voltage_measurements>:

// ******************************** Voltage ********************************

void start_adc_cell_voltage_measurements() {
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af02      	add	r7, sp, #8
	wakeup_sleep(FEB_NUM_IC);
 8001410:	2001      	movs	r0, #1
 8001412:	f001 f89f 	bl	8002554 <wakeup_sleep>
	ADBMS6830B_adcv(0, 0, 1, 0, OWVR);
 8001416:	2300      	movs	r3, #0
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2300      	movs	r3, #0
 800141c:	2201      	movs	r2, #1
 800141e:	2100      	movs	r1, #0
 8001420:	2000      	movs	r0, #0
 8001422:	f000 fd77 	bl	8001f14 <ADBMS6830B_adcv>
	//ADBMS6830B_pollAdc();
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <read_cell_voltages>:

void read_cell_voltages() {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 8001430:	2001      	movs	r0, #1
 8001432:	f001 f88f 	bl	8002554 <wakeup_sleep>
	ADBMS6830B_rdcv(FEB_NUM_IC, IC_Config);
 8001436:	4903      	ldr	r1, [pc, #12]	@ (8001444 <read_cell_voltages+0x18>)
 8001438:	2001      	movs	r0, #1
 800143a:	f000 fdc7 	bl	8001fcc <ADBMS6830B_rdcv>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000037c 	.word	0x2000037c

08001448 <store_cell_voltages>:

void store_cell_voltages() {
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
	FEB_ACC.total_voltage_V = 0;
 800144e:	4b34      	ldr	r3, [pc, #208]	@ (8001520 <store_cell_voltages+0xd8>)
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	e059      	b.n	8001510 <store_cell_voltages+0xc8>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 800145c:	2300      	movs	r3, #0
 800145e:	71bb      	strb	r3, [r7, #6]
 8001460:	e050      	b.n	8001504 <store_cell_voltages+0xbc>
			uint8_t ic = bank;
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	717b      	strb	r3, [r7, #5]
			float CVoltage = convert_voltage(IC_Config[bank].cells.c_codes[ic]);
 8001466:	79fa      	ldrb	r2, [r7, #7]
 8001468:	797b      	ldrb	r3, [r7, #5]
 800146a:	492e      	ldr	r1, [pc, #184]	@ (8001524 <store_cell_voltages+0xdc>)
 800146c:	2086      	movs	r0, #134	@ 0x86
 800146e:	fb00 f202 	mul.w	r2, r0, r2
 8001472:	4413      	add	r3, r2
 8001474:	330c      	adds	r3, #12
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	440b      	add	r3, r1
 800147a:	88db      	ldrh	r3, [r3, #6]
 800147c:	b21b      	sxth	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff1e 	bl	80012c0 <convert_voltage>
 8001484:	ed87 0a00 	vstr	s0, [r7]
			FEB_ACC.banks[bank].cells[cell].voltage_V = CVoltage;
 8001488:	79f9      	ldrb	r1, [r7, #7]
 800148a:	79ba      	ldrb	r2, [r7, #6]
 800148c:	4824      	ldr	r0, [pc, #144]	@ (8001520 <store_cell_voltages+0xd8>)
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800149a:	fb01 f202 	mul.w	r2, r1, r2
 800149e:	4413      	add	r3, r2
 80014a0:	4403      	add	r3, r0
 80014a2:	3388      	adds	r3, #136	@ 0x88
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	601a      	str	r2, [r3, #0]
			FEB_ACC.banks[bank].cells[cell].voltage_S = convert_voltage(IC_Config[bank].cells.s_codes[ic]);
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	491d      	ldr	r1, [pc, #116]	@ (8001524 <store_cell_voltages+0xdc>)
 80014ae:	2086      	movs	r0, #134	@ 0x86
 80014b0:	fb00 f202 	mul.w	r2, r0, r2
 80014b4:	4413      	add	r3, r2
 80014b6:	331c      	adds	r3, #28
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	440b      	add	r3, r1
 80014bc:	895b      	ldrh	r3, [r3, #10]
 80014be:	b21b      	sxth	r3, r3
 80014c0:	79fd      	ldrb	r5, [r7, #7]
 80014c2:	79bc      	ldrb	r4, [r7, #6]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fefb 	bl	80012c0 <convert_voltage>
 80014ca:	eef0 7a40 	vmov.f32	s15, s0
 80014ce:	4914      	ldr	r1, [pc, #80]	@ (8001520 <store_cell_voltages+0xd8>)
 80014d0:	4623      	mov	r3, r4
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4423      	add	r3, r4
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 80014dc:	fb05 f202 	mul.w	r2, r5, r2
 80014e0:	4413      	add	r3, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	338c      	adds	r3, #140	@ 0x8c
 80014e6:	edc3 7a00 	vstr	s15, [r3]
			FEB_ACC.total_voltage_V+=CVoltage;
 80014ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <store_cell_voltages+0xd8>)
 80014ec:	ed93 7a00 	vldr	s14, [r3]
 80014f0:	edd7 7a00 	vldr	s15, [r7]
 80014f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <store_cell_voltages+0xd8>)
 80014fa:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	3301      	adds	r3, #1
 8001502:	71bb      	strb	r3, [r7, #6]
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	d9ab      	bls.n	8001462 <store_cell_voltages+0x1a>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	3301      	adds	r3, #1
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0a2      	beq.n	800145c <store_cell_voltages+0x14>
		}
	}
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bdb0      	pop	{r4, r5, r7, pc}
 8001520:	20000234 	.word	0x20000234
 8001524:	2000037c 	.word	0x2000037c

08001528 <validate_voltages>:

void validate_voltages() {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
	uint16_t vMax = FEB_Config_Get_Cell_Max_Voltage_mV();
 800152e:	f001 fb59 	bl	8002be4 <FEB_Config_Get_Cell_Max_Voltage_mV>
 8001532:	4603      	mov	r3, r0
 8001534:	81bb      	strh	r3, [r7, #12]
	uint16_t vMin = FEB_Config_Get_Cell_Min_Voltage_mV();
 8001536:	f001 fb45 	bl	8002bc4 <FEB_Config_Get_Cell_Min_Voltage_mV>
 800153a:	4603      	mov	r3, r0
 800153c:	817b      	strh	r3, [r7, #10]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
 8001542:	e036      	b.n	80015b2 <validate_voltages+0x8a>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 8001544:	2300      	movs	r3, #0
 8001546:	73bb      	strb	r3, [r7, #14]
 8001548:	e02d      	b.n	80015a6 <validate_voltages+0x7e>
			float voltage = FEB_ACC.banks[bank].cells[cell].voltage_V;
 800154a:	7bf9      	ldrb	r1, [r7, #15]
 800154c:	7bba      	ldrb	r2, [r7, #14]
 800154e:	481d      	ldr	r0, [pc, #116]	@ (80015c4 <validate_voltages+0x9c>)
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800155c:	fb01 f202 	mul.w	r2, r1, r2
 8001560:	4413      	add	r3, r2
 8001562:	4403      	add	r3, r0
 8001564:	3388      	adds	r3, #136	@ 0x88
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	607b      	str	r3, [r7, #4]
			if (voltage > vMax || voltage < vMin) {
 800156a:	89bb      	ldrh	r3, [r7, #12]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001574:	ed97 7a01 	vldr	s14, [r7, #4]
 8001578:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800157c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001580:	dc0b      	bgt.n	800159a <validate_voltages+0x72>
 8001582:	897b      	ldrh	r3, [r7, #10]
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	d502      	bpl.n	80015a0 <validate_voltages+0x78>
				FEB_SM_Transition(FEB_SM_ST_FAULT_BMS);
 800159a:	2009      	movs	r0, #9
 800159c:	f001 fc26 	bl	8002dec <FEB_SM_Transition>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 80015a0:	7bbb      	ldrb	r3, [r7, #14]
 80015a2:	3301      	adds	r3, #1
 80015a4:	73bb      	strb	r3, [r7, #14]
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d9ce      	bls.n	800154a <validate_voltages+0x22>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	3301      	adds	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0c5      	beq.n	8001544 <validate_voltages+0x1c>
			}
		}
	}
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000234 	.word	0x20000234

080015c8 <configure_gpio_bits>:
void configure_gpio_bits(uint8_t channel) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	@ 0x28
 80015cc:	af06      	add	r7, sp, #24
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	gpio_bits[0] = 0b1; /* ADC Channel */
 80015d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001688 <configure_gpio_bits+0xc0>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
	gpio_bits[1] = 0b1; /* ADC Channel */
 80015d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001688 <configure_gpio_bits+0xc0>)
 80015da:	2201      	movs	r2, #1
 80015dc:	705a      	strb	r2, [r3, #1]
	gpio_bits[2] = (channel >> 0) & 0b1; /* MUX Sel 1 */
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf14      	ite	ne
 80015e8:	2301      	movne	r3, #1
 80015ea:	2300      	moveq	r3, #0
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b26      	ldr	r3, [pc, #152]	@ (8001688 <configure_gpio_bits+0xc0>)
 80015f0:	709a      	strb	r2, [r3, #2]
	gpio_bits[3] = (channel >> 1) & 0b1; /* MUX Sel 1 */
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	085b      	lsrs	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <configure_gpio_bits+0xc0>)
 8001608:	70da      	strb	r2, [r3, #3]
	gpio_bits[4] = (channel >> 2) & 0b1; /* MUX Sel 1 */
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf14      	ite	ne
 8001618:	2301      	movne	r3, #1
 800161a:	2300      	moveq	r3, #0
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <configure_gpio_bits+0xc0>)
 8001620:	711a      	strb	r2, [r3, #4]
	gpio_bits[5] = 0b1; /* ADC Channel */
 8001622:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <configure_gpio_bits+0xc0>)
 8001624:	2201      	movs	r2, #1
 8001626:	715a      	strb	r2, [r3, #5]
	gpio_bits[6] = 0b1; /* ADC Channel */
 8001628:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <configure_gpio_bits+0xc0>)
 800162a:	2201      	movs	r2, #1
 800162c:	719a      	strb	r2, [r3, #6]
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e016      	b.n	8001662 <configure_gpio_bits+0x9a>
		ADBMS6830B_set_cfgr(ic, IC_Config, refon, cth_bits, gpio_bits, dcc_bits, dcto_bits, uv, ov);
 8001634:	4b15      	ldr	r3, [pc, #84]	@ (800168c <configure_gpio_bits+0xc4>)
 8001636:	7819      	ldrb	r1, [r3, #0]
 8001638:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <configure_gpio_bits+0xc8>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	4a15      	ldr	r2, [pc, #84]	@ (8001694 <configure_gpio_bits+0xcc>)
 800163e:	8812      	ldrh	r2, [r2, #0]
 8001640:	7bf8      	ldrb	r0, [r7, #15]
 8001642:	9204      	str	r2, [sp, #16]
 8001644:	9303      	str	r3, [sp, #12]
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <configure_gpio_bits+0xd0>)
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	4b14      	ldr	r3, [pc, #80]	@ (800169c <configure_gpio_bits+0xd4>)
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <configure_gpio_bits+0xc0>)
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <configure_gpio_bits+0xd8>)
 8001654:	460a      	mov	r2, r1
 8001656:	4913      	ldr	r1, [pc, #76]	@ (80016a4 <configure_gpio_bits+0xdc>)
 8001658:	f000 f936 	bl	80018c8 <ADBMS6830B_set_cfgr>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	3301      	adds	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0e5      	beq.n	8001634 <configure_gpio_bits+0x6c>
	}
	wakeup_sleep(FEB_NUM_IC);
 8001668:	2001      	movs	r0, #1
 800166a:	f000 ff73 	bl	8002554 <wakeup_sleep>
	ADBMS6830B_wrcfga(FEB_NUM_IC, IC_Config);
 800166e:	490d      	ldr	r1, [pc, #52]	@ (80016a4 <configure_gpio_bits+0xdc>)
 8001670:	2001      	movs	r0, #1
 8001672:	f000 fd98 	bl	80021a6 <ADBMS6830B_wrcfga>
	ADBMS6830B_wrcfgb(FEB_NUM_IC, IC_Config);
 8001676:	490b      	ldr	r1, [pc, #44]	@ (80016a4 <configure_gpio_bits+0xdc>)
 8001678:	2001      	movs	r0, #1
 800167a:	f000 fe14 	bl	80022a6 <ADBMS6830B_wrcfgb>

}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000488 	.word	0x20000488
 800168c:	20000000 	.word	0x20000000
 8001690:	2000000c 	.word	0x2000000c
 8001694:	2000000e 	.word	0x2000000e
 8001698:	200004a0 	.word	0x200004a0
 800169c:	20000494 	.word	0x20000494
 80016a0:	20000004 	.word	0x20000004
 80016a4:	2000037c 	.word	0x2000037c

080016a8 <start_aux_voltage_measurements>:

// ******************************** Temperature ********************************
void start_aux_voltage_measurements() {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f000 ff51 	bl	8002554 <wakeup_sleep>
	ADBMS6830B_adax(AUX_OW_OFF, PUP_DOWN, AUX_ALL);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2000      	movs	r0, #0
 80016b8:	f000 fe76 	bl	80023a8 <ADBMS6830B_adax>
	ADBMS6830B_pollAdc();
 80016bc:	f000 fc5c 	bl	8001f78 <ADBMS6830B_pollAdc>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <read_aux_voltages>:

void read_aux_voltages() {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f000 ff43 	bl	8002554 <wakeup_sleep>
	ADBMS6830B_rdaux(FEB_NUM_IC, IC_Config);
 80016ce:	4903      	ldr	r1, [pc, #12]	@ (80016dc <read_aux_voltages+0x18>)
 80016d0:	2001      	movs	r0, #1
 80016d2:	f000 fe93 	bl	80023fc <ADBMS6830B_rdaux>
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000037c 	.word	0x2000037c

080016e0 <store_cell_temps>:

void store_cell_temps(uint8_t channel) {
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	e03a      	b.n	8001766 <store_cell_temps+0x86>
		for (uint8_t mux = 0; mux < 4; mux++) {
 80016f0:	2300      	movs	r3, #0
 80016f2:	73bb      	strb	r3, [r7, #14]
 80016f4:	e031      	b.n	800175a <store_cell_temps+0x7a>
			uint8_t gpio = get_gpio_pin(mux);
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fdb7 	bl	800126c <get_gpio_pin>
 80016fe:	4603      	mov	r3, r0
 8001700:	737b      	strb	r3, [r7, #13]
			uint16_t raw_code = IC_Config[bank].aux.a_codes[gpio];
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	7b7b      	ldrb	r3, [r7, #13]
 8001706:	491c      	ldr	r1, [pc, #112]	@ (8001778 <store_cell_temps+0x98>)
 8001708:	2086      	movs	r0, #134	@ 0x86
 800170a:	fb00 f202 	mul.w	r2, r0, r2
 800170e:	4413      	add	r3, r2
 8001710:	3334      	adds	r3, #52	@ 0x34
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	440b      	add	r3, r1
 8001716:	889b      	ldrh	r3, [r3, #4]
 8001718:	817b      	strh	r3, [r7, #10]
			uint8_t sensor = get_sensor(mux, channel);
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	7bbb      	ldrb	r3, [r7, #14]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fdb9 	bl	8001298 <get_sensor>
 8001726:	4603      	mov	r3, r0
 8001728:	727b      	strb	r3, [r7, #9]
			FEB_ACC.banks[bank].temp_sensor_readings_V[sensor] = convert_voltage(raw_code);
 800172a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800172e:	7bfc      	ldrb	r4, [r7, #15]
 8001730:	7a7d      	ldrb	r5, [r7, #9]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fdc4 	bl	80012c0 <convert_voltage>
 8001738:	eef0 7a40 	vmov.f32	s15, s0
 800173c:	490f      	ldr	r1, [pc, #60]	@ (800177c <store_cell_temps+0x9c>)
 800173e:	4623      	mov	r3, r4
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4423      	add	r3, r4
 8001744:	00da      	lsls	r2, r3, #3
 8001746:	4413      	add	r3, r2
 8001748:	442b      	add	r3, r5
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	3308      	adds	r3, #8
 8001750:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t mux = 0; mux < 4; mux++) {
 8001754:	7bbb      	ldrb	r3, [r7, #14]
 8001756:	3301      	adds	r3, #1
 8001758:	73bb      	strb	r3, [r7, #14]
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d9ca      	bls.n	80016f6 <store_cell_temps+0x16>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	3301      	adds	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0c1      	beq.n	80016f0 <store_cell_temps+0x10>
		}
	}
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bdb0      	pop	{r4, r5, r7, pc}
 8001776:	bf00      	nop
 8001778:	2000037c 	.word	0x2000037c
 800177c:	20000234 	.word	0x20000234

08001780 <ADBMS6830B_init_cfg>:

/* Helper function to initialize CFG variables */
void ADBMS6830B_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e022      	b.n	80017d8 <ADBMS6830B_init_cfg+0x58>
	{
		for (int j =0; j<6; j++)
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	e019      	b.n	80017cc <ADBMS6830B_init_cfg+0x4c>
		{
		  ic[current_ic].configa.tx_data[j] = 0;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	441a      	add	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	4413      	add	r3, r2
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
          ic[current_ic].configb.tx_data[j] = 0;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	441a      	add	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4413      	add	r3, r2
 80017c0:	330f      	adds	r3, #15
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3301      	adds	r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	dde2      	ble.n	8001798 <ADBMS6830B_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	3301      	adds	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3d8      	bcc.n	8001792 <ADBMS6830B_init_cfg+0x12>
		}
	}
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <ADBMS6830B_reset_crc_count>:

/* Helper Function to reset PEC counters */
void ADBMS6830B_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 80017ee:	b480      	push	{r7}
 80017f0:	b087      	sub	sp, #28
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	6039      	str	r1, [r7, #0]
 80017f8:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e058      	b.n	80018b2 <ADBMS6830B_reset_crc_count+0xc4>
	{
		ic[current_ic].crc_count.pec_count = 0;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	4413      	add	r3, r2
 800180e:	2200      	movs	r2, #0
 8001810:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
		ic[current_ic].crc_count.cfgr_pec = 0;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	4413      	add	r3, r2
 8001822:	2200      	movs	r2, #0
 8001824:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		for (int i=0; i<6; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	e00f      	b.n	800184e <ADBMS6830B_reset_crc_count+0x60>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	441a      	add	r2, r3
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	3370      	adds	r3, #112	@ 0x70
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	2200      	movs	r2, #0
 8001846:	815a      	strh	r2, [r3, #10]
		for (int i=0; i<6; i++)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	3301      	adds	r3, #1
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b05      	cmp	r3, #5
 8001852:	ddec      	ble.n	800182e <ADBMS6830B_reset_crc_count+0x40>

		}
		for (int i=0; i<4; i++)
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e00f      	b.n	800187a <ADBMS6830B_reset_crc_count+0x8c>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001860:	fb02 f303 	mul.w	r3, r2, r3
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	441a      	add	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3378      	adds	r3, #120	@ 0x78
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	2200      	movs	r2, #0
 8001872:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<4; i++)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3301      	adds	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b03      	cmp	r3, #3
 800187e:	ddec      	ble.n	800185a <ADBMS6830B_reset_crc_count+0x6c>
		}
		for (int i=0; i<2; i++)
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	e00f      	b.n	80018a6 <ADBMS6830B_reset_crc_count+0xb8>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	441a      	add	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	337c      	adds	r3, #124	@ 0x7c
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	2200      	movs	r2, #0
 800189e:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<2; i++)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	3301      	adds	r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	ddec      	ble.n	8001886 <ADBMS6830B_reset_crc_count+0x98>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3301      	adds	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	dba2      	blt.n	8001800 <ADBMS6830B_reset_crc_count+0x12>
		}
	}
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <ADBMS6830B_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4603      	mov	r3, r0
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	4613      	mov	r3, r2
 80018d8:	73bb      	strb	r3, [r7, #14]
	ADBMS6830B_set_cfgr_refon(nIC,ic,refon);
 80018da:	7bba      	ldrb	r2, [r7, #14]
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	68b9      	ldr	r1, [r7, #8]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 f828 	bl	8001936 <ADBMS6830B_set_cfgr_refon>
	ADBMS6830B_set_cfgr_cth(nIC,ic,cth);
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f85a 	bl	80019a6 <ADBMS6830B_set_cfgr_cth>
	ADBMS6830B_set_cfgr_gpio(nIC,ic,gpio);
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f8a6 	bl	8001a4a <ADBMS6830B_set_cfgr_gpio>
	ADBMS6830B_set_cfgr_dis(nIC,ic,dcc);
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	68b9      	ldr	r1, [r7, #8]
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f937 	bl	8001b78 <ADBMS6830B_set_cfgr_dis>
	ADBMS6830B_set_cfgr_dcto(nIC,ic,dcto);
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	6a3a      	ldr	r2, [r7, #32]
 800190e:	68b9      	ldr	r1, [r7, #8]
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f9c8 	bl	8001ca6 <ADBMS6830B_set_cfgr_dcto>
	ADBMS6830B_set_cfgr_uv(nIC, ic, uv);
 8001916:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	4618      	mov	r0, r3
 800191e:	f000 fa14 	bl	8001d4a <ADBMS6830B_set_cfgr_uv>
	ADBMS6830B_set_cfgr_ov(nIC, ic, ov);
 8001922:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	68b9      	ldr	r1, [r7, #8]
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fa59 	bl	8001de0 <ADBMS6830B_set_cfgr_ov>
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <ADBMS6830B_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void ADBMS6830B_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	6039      	str	r1, [r7, #0]
 8001940:	71fb      	strb	r3, [r7, #7]
 8001942:	4613      	mov	r3, r2
 8001944:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]|0x80;
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <ADBMS6830B_set_cfgr_refon+0x3e>
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	6839      	ldr	r1, [r7, #0]
 8001968:	440b      	add	r3, r1
 800196a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]
	else ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]&0x7F;
}
 8001972:	e012      	b.n	800199a <ADBMS6830B_set_cfgr_refon+0x64>
	else ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]&0x7F;
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	4413      	add	r3, r2
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	6839      	ldr	r1, [r7, #0]
 8001990:	440b      	add	r3, r1
 8001992:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <ADBMS6830B_set_cfgr_cth>:

/* Helper function to set CTH bits */
void ADBMS6830B_set_cfgr_cth(uint8_t nIC, cell_asic *ic, bool cth[3])
{
 80019a6:	b480      	push	{r7}
 80019a8:	b087      	sub	sp, #28
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 3; i++) {
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	e03d      	b.n	8001a36 <ADBMS6830B_set_cfgr_cth+0x90>
        if (cth[i]) {
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <ADBMS6830B_set_cfgr_cth+0x54>
            ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0] | (0b01 << i);
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b25a      	sxtb	r2, r3
 80019d8:	2101      	movs	r1, #1
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b259      	sxtb	r1, r3
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80019ec:	fb02 f303 	mul.w	r3, r2, r3
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	4413      	add	r3, r2
 80019f4:	b2ca      	uxtb	r2, r1
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e01a      	b.n	8001a30 <ADBMS6830B_set_cfgr_cth+0x8a>
        } else {
            ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0] & ~(0b01 << i);
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	4413      	add	r3, r2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b25a      	sxtb	r2, r3
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	b259      	sxtb	r1, r3
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b2ca      	uxtb	r2, r1
 8001a2e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	ddbe      	ble.n	80019ba <ADBMS6830B_set_cfgr_cth+0x14>
        }
    }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <ADBMS6830B_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void ADBMS6830B_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[10])
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b087      	sub	sp, #28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e03d      	b.n	8001ada <ADBMS6830B_set_cfgr_gpio+0x90>
		if (gpio[i]) {
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d019      	beq.n	8001a9e <ADBMS6830B_set_cfgr_gpio+0x54>
            ic[nIC].configa.tx_data[3] = ic[nIC].configa.tx_data[3] | (0b01 << i);
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	4413      	add	r3, r2
 8001a78:	78db      	ldrb	r3, [r3, #3]
 8001a7a:	b25a      	sxtb	r2, r3
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	b25b      	sxtb	r3, r3
 8001a86:	4313      	orrs	r3, r2
 8001a88:	b259      	sxtb	r1, r3
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	4413      	add	r3, r2
 8001a98:	b2ca      	uxtb	r2, r1
 8001a9a:	70da      	strb	r2, [r3, #3]
 8001a9c:	e01a      	b.n	8001ad4 <ADBMS6830B_set_cfgr_gpio+0x8a>
        } else {
             ic[nIC].configa.tx_data[3] = ic[nIC].configa.tx_data[3] & ~(0b01 << i);
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	4413      	add	r3, r2
 8001aac:	78db      	ldrb	r3, [r3, #3]
 8001aae:	b25a      	sxtb	r2, r3
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	4013      	ands	r3, r2
 8001ac0:	b259      	sxtb	r1, r3
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2ca      	uxtb	r2, r1
 8001ad2:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < 8; i++) {
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b07      	cmp	r3, #7
 8001ade:	ddbe      	ble.n	8001a5e <ADBMS6830B_set_cfgr_gpio+0x14>
        }
	}

    for (int i = 0; i < 2; i++) {
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	e03e      	b.n	8001b64 <ADBMS6830B_set_cfgr_gpio+0x11a>
        if (gpio[i + 8]) {
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	3308      	adds	r3, #8
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d019      	beq.n	8001b28 <ADBMS6830B_set_cfgr_gpio+0xde>
            ic[nIC].configa.tx_data[4] = ic[nIC].configa.tx_data[4] | (0b01 << i);
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	4413      	add	r3, r2
 8001b02:	791b      	ldrb	r3, [r3, #4]
 8001b04:	b25a      	sxtb	r2, r3
 8001b06:	2101      	movs	r1, #1
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	b25b      	sxtb	r3, r3
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b259      	sxtb	r1, r3
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	4413      	add	r3, r2
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	711a      	strb	r2, [r3, #4]
 8001b26:	e01a      	b.n	8001b5e <ADBMS6830B_set_cfgr_gpio+0x114>
        } else {
             ic[nIC].configa.tx_data[4] = ic[nIC].configa.tx_data[4] & ~(0b01 << i);
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	791b      	ldrb	r3, [r3, #4]
 8001b38:	b25a      	sxtb	r2, r3
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	b259      	sxtb	r1, r3
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2ca      	uxtb	r2, r1
 8001b5c:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < 2; i++) {
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	3301      	adds	r3, #1
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	ddbd      	ble.n	8001ae6 <ADBMS6830B_set_cfgr_gpio+0x9c>
        }
    }
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	371c      	adds	r7, #28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <ADBMS6830B_set_cfgr_dis>:

/* Helper function to control discharge */
void ADBMS6830B_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e03d      	b.n	8001c08 <ADBMS6830B_set_cfgr_dis+0x90>
		if (dcc[i]) {
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d019      	beq.n	8001bcc <ADBMS6830B_set_cfgr_dis+0x54>
            ic[nIC].configb.tx_data[4] = ic[nIC].configb.tx_data[4] | (0b01 << i);
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	7cdb      	ldrb	r3, [r3, #19]
 8001ba8:	b25a      	sxtb	r2, r3
 8001baa:	2101      	movs	r1, #1
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b259      	sxtb	r1, r3
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	b2ca      	uxtb	r2, r1
 8001bc8:	74da      	strb	r2, [r3, #19]
 8001bca:	e01a      	b.n	8001c02 <ADBMS6830B_set_cfgr_dis+0x8a>
        } else {
             ic[nIC].configb.tx_data[4] = ic[nIC].configb.tx_data[4] & ~(0b01 << i);
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	4413      	add	r3, r2
 8001bda:	7cdb      	ldrb	r3, [r3, #19]
 8001bdc:	b25a      	sxtb	r2, r3
 8001bde:	2101      	movs	r1, #1
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	4013      	ands	r3, r2
 8001bee:	b259      	sxtb	r1, r3
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	b2ca      	uxtb	r2, r1
 8001c00:	74da      	strb	r2, [r3, #19]
	for (int i = 0; i < 8; i++) {
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b07      	cmp	r3, #7
 8001c0c:	ddbe      	ble.n	8001b8c <ADBMS6830B_set_cfgr_dis+0x14>
        }
	}

    for (int i = 0; i < 8; i++) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	e03e      	b.n	8001c92 <ADBMS6830B_set_cfgr_dis+0x11a>
        if (dcc[i + 8]) {
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	3308      	adds	r3, #8
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d019      	beq.n	8001c56 <ADBMS6830B_set_cfgr_dis+0xde>
            ic[nIC].configb.tx_data[5] = ic[nIC].configb.tx_data[5] | (0b01 << i);
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c28:	fb02 f303 	mul.w	r3, r2, r3
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	4413      	add	r3, r2
 8001c30:	7d1b      	ldrb	r3, [r3, #20]
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	2101      	movs	r1, #1
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b259      	sxtb	r1, r3
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c48:	fb02 f303 	mul.w	r3, r2, r3
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	4413      	add	r3, r2
 8001c50:	b2ca      	uxtb	r2, r1
 8001c52:	751a      	strb	r2, [r3, #20]
 8001c54:	e01a      	b.n	8001c8c <ADBMS6830B_set_cfgr_dis+0x114>
        } else {
             ic[nIC].configb.tx_data[5] = ic[nIC].configb.tx_data[5] & ~(0b01 << i);
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	4413      	add	r3, r2
 8001c64:	7d1b      	ldrb	r3, [r3, #20]
 8001c66:	b25a      	sxtb	r2, r3
 8001c68:	2101      	movs	r1, #1
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	b25b      	sxtb	r3, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	4013      	ands	r3, r2
 8001c78:	b259      	sxtb	r1, r3
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	4413      	add	r3, r2
 8001c88:	b2ca      	uxtb	r2, r1
 8001c8a:	751a      	strb	r2, [r3, #20]
    for (int i = 0; i < 8; i++) {
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b07      	cmp	r3, #7
 8001c96:	ddbd      	ble.n	8001c14 <ADBMS6830B_set_cfgr_dis+0x9c>
        }
    }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <ADBMS6830B_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void ADBMS6830B_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b087      	sub	sp, #28
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 6; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e03d      	b.n	8001d36 <ADBMS6830B_set_cfgr_dcto+0x90>
		if (dcto[i]) {
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d019      	beq.n	8001cfa <ADBMS6830B_set_cfgr_dcto+0x54>
            ic[nIC].configb.tx_data[3] = ic[nIC].configb.tx_data[3] | (0b01 << i);
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	7c9b      	ldrb	r3, [r3, #18]
 8001cd6:	b25a      	sxtb	r2, r3
 8001cd8:	2101      	movs	r1, #1
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	b259      	sxtb	r1, r3
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	b2ca      	uxtb	r2, r1
 8001cf6:	749a      	strb	r2, [r3, #18]
 8001cf8:	e01a      	b.n	8001d30 <ADBMS6830B_set_cfgr_dcto+0x8a>
        } else {
             ic[nIC].configb.tx_data[3] = ic[nIC].configb.tx_data[3] & ~(0b01 << i);
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	4413      	add	r3, r2
 8001d08:	7c9b      	ldrb	r3, [r3, #18]
 8001d0a:	b25a      	sxtb	r2, r3
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b259      	sxtb	r1, r3
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b2ca      	uxtb	r2, r1
 8001d2e:	749a      	strb	r2, [r3, #18]
	for (int i = 0; i < 6; i++) {
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3301      	adds	r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	ddbe      	ble.n	8001cba <ADBMS6830B_set_cfgr_dcto+0x14>
        }
	}
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <ADBMS6830B_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void ADBMS6830B_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	6039      	str	r1, [r7, #0]
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	4613      	mov	r3, r2
 8001d58:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv / 16) - 1;
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	81fb      	strh	r3, [r7, #14]
	ic[nIC].configb.tx_data[0] = 0x00FF & tmp;
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	89fa      	ldrh	r2, [r7, #14]
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	73da      	strb	r2, [r3, #15]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] & 0xF0;
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	7c1a      	ldrb	r2, [r3, #16]
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	6839      	ldr	r1, [r7, #0]
 8001d94:	440b      	add	r3, r1
 8001d96:	f022 020f 	bic.w	r2, r2, #15
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	741a      	strb	r2, [r3, #16]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] | ((0x0F00 & tmp) >> 8);
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001da4:	fb02 f303 	mul.w	r3, r2, r3
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	7c1b      	ldrb	r3, [r3, #16]
 8001dae:	b25a      	sxtb	r2, r3
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	b25b      	sxtb	r3, r3
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	b259      	sxtb	r1, r3
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	b2ca      	uxtb	r2, r1
 8001dd2:	741a      	strb	r2, [r3, #16]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <ADBMS6830B_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void ADBMS6830B_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
 8001dec:	4613      	mov	r3, r2
 8001dee:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov / 16);
 8001df0:	88bb      	ldrh	r3, [r7, #4]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	81fb      	strh	r3, [r7, #14]
	ic[nIC].configb.tx_data[2] = 0x00FF & (tmp >> 4);
 8001df6:	89fb      	ldrh	r3, [r7, #14]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	b299      	uxth	r1, r3
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	4413      	add	r3, r2
 8001e0a:	b2ca      	uxtb	r2, r1
 8001e0c:	745a      	strb	r2, [r3, #17]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] & 0x0F;
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e14:	fb02 f303 	mul.w	r3, r2, r3
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	7c1a      	ldrb	r2, [r3, #16]
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f002 020f 	and.w	r2, r2, #15
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	741a      	strb	r2, [r3, #16]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] | ((0x000F & tmp) << 4);
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	7c1b      	ldrb	r3, [r3, #16]
 8001e44:	b25a      	sxtb	r2, r3
 8001e46:	89fb      	ldrh	r3, [r7, #14]
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	b259      	sxtb	r1, r3
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	741a      	strb	r2, [r3, #16]
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <ADBMS6830B_init_reg_limits>:

/* Initialize the Register limits */
void ADBMS6830B_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	6039      	str	r1, [r7, #0]
 8001e78:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
 8001e7e:	e03e      	b.n	8001efe <ADBMS6830B_init_reg_limits+0x90>
    ic[cic].ic_reg.cell_channels = 20;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	2214      	movs	r2, #20
 8001e90:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
    ic[cic].ic_reg.stat_channels = 4; //Doesn't matter?
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
    ic[cic].ic_reg.aux_channels = 6; //Doesn't matter?
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	2206      	movs	r2, #6
 8001eb8:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    ic[cic].ic_reg.num_cv_reg = 6;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2206      	movs	r2, #6
 8001ecc:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
    ic[cic].ic_reg.num_gpio_reg = 4;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	4413      	add	r3, r2
 8001ede:	2204      	movs	r2, #4
 8001ee0:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
    ic[cic].ic_reg.num_stat_reg = 5;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	2205      	movs	r2, #5
 8001ef4:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	3301      	adds	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d3bc      	bcc.n	8001e80 <ADBMS6830B_init_reg_limits+0x12>
  }
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <ADBMS6830B_adcv>:
				   uint8_t DCP, //Discharge Permit
				   uint8_t CONT, //Cell Channels to be measured
				   uint8_t RSTF, //Reset Filter
				   uint8_t OW //Open-wire bits
                 )
{
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	461a      	mov	r2, r3
 8001f22:	4623      	mov	r3, r4
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	4603      	mov	r3, r0
 8001f28:	71bb      	strb	r3, [r7, #6]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	717b      	strb	r3, [r7, #5]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	713b      	strb	r3, [r7, #4]
	uint8_t cmd[2];

	cmd[0] = 0x02 + RD;
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	3302      	adds	r3, #2
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x60 | (CONT << 7) | (DCP << 4) | (RSTF << 2) | OW;
 8001f3a:	797b      	ldrb	r3, [r7, #5]
 8001f3c:	01db      	lsls	r3, r3, #7
 8001f3e:	b25b      	sxtb	r3, r3
 8001f40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f44:	b25a      	sxtb	r2, r3
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b25a      	sxtb	r2, r3
 8001f50:	793b      	ldrb	r3, [r7, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	b25a      	sxtb	r2, r3
 8001f5a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	b25b      	sxtb	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff f86e 	bl	800104c <cmd_68>
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}

08001f78 <ADBMS6830B_pollAdc>:

/* This function will block operation until the ADC has finished it's conversion */
uint32_t ADBMS6830B_pollAdc()
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
	uint8_t finished = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	70fb      	strb	r3, [r7, #3]
	uint8_t current_time = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	70bb      	strb	r3, [r7, #2]
	FEB_cs_low();
 8001f8a:	f000 fe49 	bl	8002c20 <FEB_cs_low>
	transmitCMD(PLCADC);
 8001f8e:	f44f 60e3 	mov.w	r0, #1816	@ 0x718
 8001f92:	f7ff f939 	bl	8001208 <transmitCMD>

	while ((counter < 200000) && (finished == 0))
 8001f96:	e008      	b.n	8001faa <ADBMS6830B_pollAdc+0x32>
	{
		//current_time = FEB_spi_read_byte(0xff);
		if (current_time > 0)
 8001f98:	78bb      	ldrb	r3, [r7, #2]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <ADBMS6830B_pollAdc+0x2c>
		{
			finished = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	70fb      	strb	r3, [r7, #3]
 8001fa2:	e002      	b.n	8001faa <ADBMS6830B_pollAdc+0x32>
		}
		else
		{
			counter = counter + 10;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	330a      	adds	r3, #10
 8001fa8:	607b      	str	r3, [r7, #4]
	while ((counter < 200000) && (finished == 0))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a06      	ldr	r2, [pc, #24]	@ (8001fc8 <ADBMS6830B_pollAdc+0x50>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d802      	bhi.n	8001fb8 <ADBMS6830B_pollAdc+0x40>
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ef      	beq.n	8001f98 <ADBMS6830B_pollAdc+0x20>
		}
	}

	FEB_cs_high();
 8001fb8:	f000 fe3e 	bl	8002c38 <FEB_cs_high>

	return(counter);
 8001fbc:	687b      	ldr	r3, [r7, #4]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	00030d3f 	.word	0x00030d3f

08001fcc <ADBMS6830B_rdcv>:
and store the cell voltages in c_codes variable.
*/
uint8_t ADBMS6830B_rdcv(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
			} else {
				c_ic = total_ic - curr_ic - 1;
			}
			//pec_error += parse_cells(c_ic, CELL, cell_data, &ic[c_ic].cells.c_codes[0], &ic[c_ic].cells.pec_match[0]);
		}*/
	uint8_t TxSize = 34;
 8001fd8:	2322      	movs	r3, #34	@ 0x22
 8001fda:	75fb      	strb	r3, [r7, #23]
	uint8_t*cell_data;
	cell_data=(uint8_t*)malloc(TxSize * total_ic * sizeof(uint8_t));
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	79fa      	ldrb	r2, [r7, #7]
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f005 f9c7 	bl	8007378 <malloc>
 8001fea:	4603      	mov	r3, r0
 8001fec:	613b      	str	r3, [r7, #16]
	transmitCMDR(RDACALL,cell_data,34*total_ic);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6939      	ldr	r1, [r7, #16]
 8001ffe:	204c      	movs	r0, #76	@ 0x4c
 8002000:	f7ff f918 	bl	8001234 <transmitCMDR>
	for(int bank=0;bank<total_ic;bank++){
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
 8002008:	e016      	b.n	8002038 <ADBMS6830B_rdcv+0x6c>
		memcpy(&(ic[bank].cells.c_codes),cell_data+bank*TxSize,(size_t)34);
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002010:	fb02 f303 	mul.w	r3, r2, r3
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	4413      	add	r3, r2
 8002018:	f103 001e 	add.w	r0, r3, #30
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	461a      	mov	r2, r3
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	2222      	movs	r2, #34	@ 0x22
 800202c:	4619      	mov	r1, r3
 800202e:	f006 f84e 	bl	80080ce <memcpy>
	for(int bank=0;bank<total_ic;bank++){
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3301      	adds	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	429a      	cmp	r2, r3
 800203e:	dbe4      	blt.n	800200a <ADBMS6830B_rdcv+0x3e>
	}
	uint16_t data_pec=pec10_calc(32,cell_data);
 8002040:	6939      	ldr	r1, [r7, #16]
 8002042:	2020      	movs	r0, #32
 8002044:	f7fe ffcc 	bl	8000fe0 <pec10_calc>
 8002048:	4603      	mov	r3, r0
 800204a:	81fb      	strh	r3, [r7, #14]
	uint16_t rx_pec=*(uint16_t*)(cell_data+32);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	8c1b      	ldrh	r3, [r3, #32]
 8002050:	81bb      	strh	r3, [r7, #12]
	transmitCMDR(RDSALL,cell_data,34*total_ic);
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	461a      	mov	r2, r3
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	4413      	add	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	6939      	ldr	r1, [r7, #16]
 8002062:	2010      	movs	r0, #16
 8002064:	f7ff f8e6 	bl	8001234 <transmitCMDR>
	for(int bank=0;bank<total_ic;bank++){
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	e016      	b.n	800209c <ADBMS6830B_rdcv+0xd0>
		memcpy(&(ic[bank].cells.s_codes),cell_data+bank*TxSize,(size_t)34);
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	4413      	add	r3, r2
 800207c:	f103 0042 	add.w	r0, r3, #66	@ 0x42
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	fb02 f303 	mul.w	r3, r2, r3
 8002088:	461a      	mov	r2, r3
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	2222      	movs	r2, #34	@ 0x22
 8002090:	4619      	mov	r1, r3
 8002092:	f006 f81c 	bl	80080ce <memcpy>
	for(int bank=0;bank<total_ic;bank++){
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	3301      	adds	r3, #1
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	dbe4      	blt.n	800206e <ADBMS6830B_rdcv+0xa2>
	}
	free(cell_data);
 80020a4:	6938      	ldr	r0, [r7, #16]
 80020a6:	f005 f96f 	bl	8007388 <free>
	return(data_pec!=rx_pec);
 80020aa:	89fa      	ldrh	r2, [r7, #14]
 80020ac:	89bb      	ldrh	r3, [r7, #12]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	bf14      	ite	ne
 80020b2:	2301      	movne	r3, #1
 80020b4:	2300      	moveq	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3720      	adds	r7, #32
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60ba      	str	r2, [r7, #8]
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	4603      	mov	r3, r0
 80020cc:	73fb      	strb	r3, [r7, #15]
 80020ce:	460b      	mov	r3, r1
 80020d0:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 80020d2:	2306      	movs	r3, #6
 80020d4:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 80020d6:	2303      	movs	r3, #3
 80020d8:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 80020e4:	2300      	movs	r3, #0
 80020e6:	777b      	strb	r3, [r7, #29]
 80020e8:	e01f      	b.n	800212a <parse_cells+0x6a>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 80020ea:	7fbb      	ldrb	r3, [r7, #30]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	4413      	add	r3, r2
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	4619      	mov	r1, r3
 80020f4:	7fbb      	ldrb	r3, [r7, #30]
 80020f6:	3301      	adds	r3, #1
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	b29b      	uxth	r3, r3
 8002102:	440b      	add	r3, r1
 8002104:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8002106:	7f7a      	ldrb	r2, [r7, #29]
 8002108:	7bbb      	ldrb	r3, [r7, #14]
 800210a:	3b01      	subs	r3, #1
 800210c:	7ef9      	ldrb	r1, [r7, #27]
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	8aba      	ldrh	r2, [r7, #20]
 800211c:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 800211e:	7fbb      	ldrb	r3, [r7, #30]
 8002120:	3302      	adds	r3, #2
 8002122:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8002124:	7f7b      	ldrb	r3, [r7, #29]
 8002126:	3301      	adds	r3, #1
 8002128:	777b      	strb	r3, [r7, #29]
 800212a:	7f7a      	ldrb	r2, [r7, #29]
 800212c:	7efb      	ldrb	r3, [r7, #27]
 800212e:	429a      	cmp	r2, r3
 8002130:	d3db      	bcc.n	80020ea <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = ((cell_data[data_counter] & 0x03) << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8002132:	7fbb      	ldrb	r3, [r7, #30]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	4413      	add	r3, r2
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	b21b      	sxth	r3, r3
 800213e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002142:	b21a      	sxth	r2, r3
 8002144:	7fbb      	ldrb	r3, [r7, #30]
 8002146:	3301      	adds	r3, #1
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	440b      	add	r3, r1
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b21b      	sxth	r3, r3
 8002150:	4313      	orrs	r3, r2
 8002152:	b21b      	sxth	r3, r3
 8002154:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes. Command counter is first 6 bits of first byte, which we don't care bout, so we do & 0x03
	data_pec = pec10_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	441a      	add	r2, r3
 8002160:	7f3b      	ldrb	r3, [r7, #28]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe ff3b 	bl	8000fe0 <pec10_calc>
 800216a:	4603      	mov	r3, r0
 800216c:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 800216e:	8b3a      	ldrh	r2, [r7, #24]
 8002170:	8afb      	ldrh	r3, [r7, #22]
 8002172:	429a      	cmp	r2, r3
 8002174:	d008      	beq.n	8002188 <parse_cells+0xc8>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8002176:	2301      	movs	r3, #1
 8002178:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 800217a:	7bbb      	ldrb	r3, [r7, #14]
 800217c:	3b01      	subs	r3, #1
 800217e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002180:	4413      	add	r3, r2
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e005      	b.n	8002194 <parse_cells+0xd4>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8002188:	7bbb      	ldrb	r3, [r7, #14]
 800218a:	3b01      	subs	r3, #1
 800218c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800218e:	4413      	add	r3, r2
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8002194:	7fbb      	ldrb	r3, [r7, #30]
 8002196:	3302      	adds	r3, #2
 8002198:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 800219a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <ADBMS6830B_wrcfga>:

/* Write the ADBMS6830B CFGRA */
void ADBMS6830B_wrcfga(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b0c4      	sub	sp, #272	@ 0x110
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4602      	mov	r2, r0
 80021ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021b6:	6019      	str	r1, [r3, #0]
 80021b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021bc:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80021c0:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 80021c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021c6:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t c_ic = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80021dc:	e049      	b.n	8002272 <ADBMS6830B_wrcfga+0xcc>
	{
		if (ic->isospi_reverse == false)
 80021de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 80021ec:	f083 0301 	eor.w	r3, r3, #1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <ADBMS6830B_wrcfga+0x5a>
		{
			c_ic = current_ic;
 80021f6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80021fa:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80021fe:	e00b      	b.n	8002218 <ADBMS6830B_wrcfga+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8002200:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002204:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	3b01      	subs	r3, #1
 8002214:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8002218:	2300      	movs	r3, #0
 800221a:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800221e:	e01f      	b.n	8002260 <ADBMS6830B_wrcfga+0xba>
		{
			write_buffer[write_count] = ic[c_ic].configa.tx_data[data];
 8002220:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8002224:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002230:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	18d1      	adds	r1, r2, r3
 8002238:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 800223c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002240:	5c89      	ldrb	r1, [r1, r2]
 8002242:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002246:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800224a:	54d1      	strb	r1, [r2, r3]
			write_count++;
 800224c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002250:	3301      	adds	r3, #1
 8002252:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002256:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800225a:	3301      	adds	r3, #1
 800225c:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002260:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002264:	2b05      	cmp	r3, #5
 8002266:	d9db      	bls.n	8002220 <ADBMS6830B_wrcfga+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002268:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800226c:	3301      	adds	r3, #1
 800226e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002272:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002276:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800227a:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d3ac      	bcc.n	80021de <ADBMS6830B_wrcfga+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002284:	f107 0208 	add.w	r2, r7, #8
 8002288:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800228c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002290:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe ff2c 	bl	80010f4 <write_68>
}
 800229c:	bf00      	nop
 800229e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <ADBMS6830B_wrcfgb>:

/* Write the ADBMS6830B CFGRB */
void ADBMS6830B_wrcfgb(uint8_t total_ic, //The number of ICs being written to
                    cell_asic ic[] // A two dimensional array of the configuration data that will be written
                   )
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b0c4      	sub	sp, #272	@ 0x110
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4602      	mov	r2, r0
 80022ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80022b6:	6019      	str	r1, [r3, #0]
 80022b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022bc:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80022c0:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x24} ;
 80022c2:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80022c6:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t c_ic = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80022dc:	e04a      	b.n	8002374 <ADBMS6830B_wrcfgb+0xce>
	{
		if (ic->isospi_reverse == false)
 80022de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 80022ec:	f083 0301 	eor.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d004      	beq.n	8002300 <ADBMS6830B_wrcfgb+0x5a>
		{
			c_ic = current_ic;
 80022f6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80022fa:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80022fe:	e00b      	b.n	8002318 <ADBMS6830B_wrcfgb+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8002300:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002304:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002308:	781a      	ldrb	r2, [r3, #0]
 800230a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8002318:	2300      	movs	r3, #0
 800231a:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 800231e:	e020      	b.n	8002362 <ADBMS6830B_wrcfgb+0xbc>
		{
			write_buffer[write_count] = ic[c_ic].configb.tx_data[data];
 8002320:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8002324:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002328:	fb02 f303 	mul.w	r3, r2, r3
 800232c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002330:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	18d1      	adds	r1, r2, r3
 8002338:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 800233c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002340:	440a      	add	r2, r1
 8002342:	7bd1      	ldrb	r1, [r2, #15]
 8002344:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002348:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800234c:	54d1      	strb	r1, [r2, r3]
			write_count++;
 800234e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002352:	3301      	adds	r3, #1
 8002354:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002358:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800235c:	3301      	adds	r3, #1
 800235e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002362:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002366:	2b05      	cmp	r3, #5
 8002368:	d9da      	bls.n	8002320 <ADBMS6830B_wrcfgb+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 800236a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800236e:	3301      	adds	r3, #1
 8002370:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8002374:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002378:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800237c:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d3ab      	bcc.n	80022de <ADBMS6830B_wrcfgb+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002386:	f107 0208 	add.w	r2, r7, #8
 800238a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800238e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002392:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe feab 	bl	80010f4 <write_68>
}
 800239e:	bf00      	nop
 80023a0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <ADBMS6830B_adax>:
/* Start ADC Conversion for GPIO and Vref2  */
void ADBMS6830B_adax(uint8_t OW, //Open Wire Detection
				  uint8_t PUP, //Pull up/pull down current sources during measurement
				  uint8_t CH //GPIO Channels to be measured
				  )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
 80023b2:	460b      	mov	r3, r1
 80023b4:	71bb      	strb	r3, [r7, #6]
 80023b6:	4613      	mov	r3, r2
 80023b8:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];

	cmd[0] = OW + 0x04;
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	3304      	adds	r3, #4
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	733b      	strb	r3, [r7, #12]
	cmd[1] = (PUP << 7) + ((CH & 0x10) << 2) + (CH & 0xF) + 0x10;
 80023c2:	79bb      	ldrb	r3, [r7, #6]
 80023c4:	01db      	lsls	r3, r3, #7
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	797b      	ldrb	r3, [r7, #5]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	797b      	ldrb	r3, [r7, #5]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3310      	adds	r3, #16
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fe2c 	bl	800104c <cmd_68>
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <ADBMS6830B_rdaux>:
*/

uint8_t ADBMS6830B_rdaux(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b08b      	sub	sp, #44	@ 0x2c
 8002400:	af02      	add	r7, sp, #8
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8002408:	2308      	movs	r3, #8
 800240a:	75fb      	strb	r3, [r7, #23]

	int8_t pec_error = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	77fb      	strb	r3, [r7, #31]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	77bb      	strb	r3, [r7, #30]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4618      	mov	r0, r3
 800241a:	f004 ffad 	bl	8007378 <malloc>
 800241e:	4603      	mov	r3, r0
 8002420:	613b      	str	r3, [r7, #16]

	for (uint8_t cell_reg = 1; cell_reg <= ic[0].ic_reg.num_cv_reg; cell_reg++) {
 8002422:	2301      	movs	r3, #1
 8002424:	777b      	strb	r3, [r7, #29]
 8002426:	e07f      	b.n	8002528 <ADBMS6830B_rdaux+0x12c>
		uint8_t cmd[4];
		switch(cell_reg) {
 8002428:	7f7b      	ldrb	r3, [r7, #29]
 800242a:	3b01      	subs	r3, #1
 800242c:	2b03      	cmp	r3, #3
 800242e:	d81f      	bhi.n	8002470 <ADBMS6830B_rdaux+0x74>
 8002430:	a201      	add	r2, pc, #4	@ (adr r2, 8002438 <ADBMS6830B_rdaux+0x3c>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	08002453 	.word	0x08002453
 8002440:	0800245d 	.word	0x0800245d
 8002444:	08002467 	.word	0x08002467
			case 1: //Reg A
				cmd[0] = 0x00;
 8002448:	2300      	movs	r3, #0
 800244a:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x19;
 800244c:	2319      	movs	r3, #25
 800244e:	727b      	strb	r3, [r7, #9]
				break;
 8002450:	e00e      	b.n	8002470 <ADBMS6830B_rdaux+0x74>
			case 2: //Reg B
				cmd[0] = 0x00;
 8002452:	2300      	movs	r3, #0
 8002454:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1A;
 8002456:	231a      	movs	r3, #26
 8002458:	727b      	strb	r3, [r7, #9]
				break;
 800245a:	e009      	b.n	8002470 <ADBMS6830B_rdaux+0x74>
			case 3: //Reg C
				cmd[0] = 0x00;
 800245c:	2300      	movs	r3, #0
 800245e:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1B;
 8002460:	231b      	movs	r3, #27
 8002462:	727b      	strb	r3, [r7, #9]
				break;
 8002464:	e004      	b.n	8002470 <ADBMS6830B_rdaux+0x74>
			case 4: //Reg D
				cmd[0] = 0x00;
 8002466:	2300      	movs	r3, #0
 8002468:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1F;
 800246a:	231f      	movs	r3, #31
 800246c:	727b      	strb	r3, [r7, #9]
				break;
 800246e:	bf00      	nop
		}
		uint16_t cmd_pec = pec15_calc(2, cmd);
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	4619      	mov	r1, r3
 8002476:	2002      	movs	r0, #2
 8002478:	f7fe fd7e 	bl	8000f78 <pec15_calc>
 800247c:	4603      	mov	r3, r0
 800247e:	81fb      	strh	r3, [r7, #14]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b29b      	uxth	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(cmd_pec);
 800248a:	89fb      	ldrh	r3, [r7, #14]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	72fb      	strb	r3, [r7, #11]
		FEB_cs_low();
 8002490:	f000 fbc6 	bl	8002c20 <FEB_cs_low>
		FEB_spi_write_read(cmd, 4, cell_data, (REG_LEN * total_ic));
 8002494:	7dfa      	ldrb	r2, [r7, #23]
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	fb12 f303 	smulbb	r3, r2, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f107 0008 	add.w	r0, r7, #8
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	2104      	movs	r1, #4
 80024a6:	f000 fbe7 	bl	8002c78 <FEB_spi_write_read>
		FEB_cs_high();
 80024aa:	f000 fbc5 	bl	8002c38 <FEB_cs_high>

		//parse data
		for (int curr_ic = 0; curr_ic < total_ic; curr_ic++) {
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	e032      	b.n	800251a <ADBMS6830B_rdaux+0x11e>
			if (ic->isospi_reverse == false) {
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 80024ba:	f083 0301 	eor.w	r3, r3, #1
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <ADBMS6830B_rdaux+0xce>
				c_ic = curr_ic;
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	77bb      	strb	r3, [r7, #30]
 80024c8:	e006      	b.n	80024d8 <ADBMS6830B_rdaux+0xdc>
			} else {
				c_ic = total_ic - curr_ic - 1;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	79fa      	ldrb	r2, [r7, #7]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	77bb      	strb	r3, [r7, #30]
			}
			pec_error += parse_cells(c_ic, cell_reg, cell_data, &ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 80024d8:	7fbb      	ldrb	r3, [r7, #30]
 80024da:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	4413      	add	r3, r2
 80024e6:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 80024ea:	7fbb      	ldrb	r3, [r7, #30]
 80024ec:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80024f0:	fb02 f303 	mul.w	r3, r2, r3
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	3380      	adds	r3, #128	@ 0x80
 80024fa:	7f79      	ldrb	r1, [r7, #29]
 80024fc:	7fb8      	ldrb	r0, [r7, #30]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	4623      	mov	r3, r4
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	f7ff fddc 	bl	80020c0 <parse_cells>
 8002508:	4603      	mov	r3, r0
 800250a:	b2da      	uxtb	r2, r3
 800250c:	7ffb      	ldrb	r3, [r7, #31]
 800250e:	4413      	add	r3, r2
 8002510:	b2db      	uxtb	r3, r3
 8002512:	77fb      	strb	r3, [r7, #31]
		for (int curr_ic = 0; curr_ic < total_ic; curr_ic++) {
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	3301      	adds	r3, #1
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	429a      	cmp	r2, r3
 8002520:	dbc8      	blt.n	80024b4 <ADBMS6830B_rdaux+0xb8>
	for (uint8_t cell_reg = 1; cell_reg <= ic[0].ic_reg.num_cv_reg; cell_reg++) {
 8002522:	7f7b      	ldrb	r3, [r7, #29]
 8002524:	3301      	adds	r3, #1
 8002526:	777b      	strb	r3, [r7, #29]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800252e:	7f7a      	ldrb	r2, [r7, #29]
 8002530:	429a      	cmp	r2, r3
 8002532:	f67f af79 	bls.w	8002428 <ADBMS6830B_rdaux+0x2c>
		}
	}

	ADBMS6830B_check_pec(total_ic, CELL, ic);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	2102      	movs	r1, #2
 800253c:	4618      	mov	r0, r3
 800253e:	f000 f827 	bl	8002590 <ADBMS6830B_check_pec>
	free(cell_data);
 8002542:	6938      	ldr	r0, [r7, #16]
 8002544:	f004 ff20 	bl	8007388 <free>
	return(pec_error);
 8002548:	7ffb      	ldrb	r3, [r7, #31]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	@ 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd90      	pop	{r4, r7, pc}
 8002552:	bf00      	nop

08002554 <wakeup_sleep>:

/* Generic wakeup command to wake the ADBMS6830B from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < total_ic; i++) {
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	e00c      	b.n	800257e <wakeup_sleep+0x2a>
	   FEB_cs_low();
 8002564:	f000 fb5c 	bl	8002c20 <FEB_cs_low>
	   FEB_delay_m(1); // Guarantees the ADBMS6830B will be in standby
 8002568:	2001      	movs	r0, #1
 800256a:	f000 fb4b 	bl	8002c04 <FEB_delay_m>
	   FEB_cs_high();
 800256e:	f000 fb63 	bl	8002c38 <FEB_cs_high>
	   FEB_delay_m(1);
 8002572:	2001      	movs	r0, #1
 8002574:	f000 fb46 	bl	8002c04 <FEB_delay_m>
	for (int i = 0; i < total_ic; i++) {
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3301      	adds	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	429a      	cmp	r2, r3
 8002584:	dbee      	blt.n	8002564 <wakeup_sleep+0x10>
	}
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <ADBMS6830B_check_pec>:

void ADBMS6830B_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 8002590:	b480      	push	{r7}
 8002592:	b08b      	sub	sp, #44	@ 0x2c
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	603a      	str	r2, [r7, #0]
 800259a:	71fb      	strb	r3, [r7, #7]
 800259c:	460b      	mov	r3, r1
 800259e:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 80025a0:	79bb      	ldrb	r3, [r7, #6]
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	f200 81b5 	bhi.w	8002912 <ADBMS6830B_check_pec+0x382>
 80025a8:	a201      	add	r2, pc, #4	@ (adr r2, 80025b0 <ADBMS6830B_check_pec+0x20>)
 80025aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	080025c5 	.word	0x080025c5
 80025b4:	0800264f 	.word	0x0800264f
 80025b8:	080026d9 	.word	0x080026d9
 80025bc:	08002797 	.word	0x08002797
 80025c0:	08002855 	.word	0x08002855
	{
		case CFGRA:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c8:	e03c      	b.n	8002644 <ADBMS6830B_check_pec+0xb4>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configa.rx_pec_match;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80025d0:	fb02 f303 	mul.w	r3, r2, r3
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	6839      	ldr	r1, [r7, #0]
 80025e8:	440b      	add	r3, r1
 80025ea:	7b9b      	ldrb	r3, [r3, #14]
 80025ec:	4618      	mov	r0, r3
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	6839      	ldr	r1, [r7, #0]
 80025fa:	440b      	add	r3, r1
 80025fc:	4402      	add	r2, r0
 80025fe:	b292      	uxth	r2, r2
 8002600:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configa.rx_pec_match;
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800260a:	fb02 f303 	mul.w	r3, r2, r3
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4413      	add	r3, r2
 8002612:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	@ 0xe8
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	6839      	ldr	r1, [r7, #0]
 8002622:	440b      	add	r3, r1
 8002624:	7b9b      	ldrb	r3, [r3, #14]
 8002626:	4618      	mov	r0, r3
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	440b      	add	r3, r1
 8002636:	4402      	add	r2, r0
 8002638:	b292      	uxth	r2, r2
 800263a:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	3301      	adds	r3, #1
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002648:	429a      	cmp	r2, r3
 800264a:	dbbe      	blt.n	80025ca <ADBMS6830B_check_pec+0x3a>
		  }
		break;
 800264c:	e162      	b.n	8002914 <ADBMS6830B_check_pec+0x384>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
 8002652:	e03c      	b.n	80026ce <ADBMS6830B_check_pec+0x13e>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	4413      	add	r3, r2
 8002662:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	6839      	ldr	r1, [r7, #0]
 8002672:	440b      	add	r3, r1
 8002674:	7f5b      	ldrb	r3, [r3, #29]
 8002676:	4618      	mov	r0, r3
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	6839      	ldr	r1, [r7, #0]
 8002684:	440b      	add	r3, r1
 8002686:	4402      	add	r2, r0
 8002688:	b292      	uxth	r2, r2
 800268a:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	4413      	add	r3, r2
 800269c:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	@ 0xe8
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	6839      	ldr	r1, [r7, #0]
 80026ac:	440b      	add	r3, r1
 80026ae:	7f5b      	ldrb	r3, [r3, #29]
 80026b0:	4618      	mov	r0, r3
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	440b      	add	r3, r1
 80026c0:	4402      	add	r2, r0
 80026c2:	b292      	uxth	r2, r2
 80026c4:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	3301      	adds	r3, #1
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	dbbe      	blt.n	8002654 <ADBMS6830B_check_pec+0xc4>
		  }
		break;
 80026d6:	e11d      	b.n	8002914 <ADBMS6830B_check_pec+0x384>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80026d8:	2300      	movs	r3, #0
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	e056      	b.n	800278c <ADBMS6830B_check_pec+0x1fc>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	e049      	b.n	8002778 <ADBMS6830B_check_pec+0x1e8>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	6839      	ldr	r1, [r7, #0]
 8002702:	4419      	add	r1, r3
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	440b      	add	r3, r1
 8002708:	3366      	adds	r3, #102	@ 0x66
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	440b      	add	r3, r1
 800271c:	4402      	add	r2, r0
 800271e:	b292      	uxth	r2, r2
 8002720:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	441a      	add	r2, r3
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	3370      	adds	r3, #112	@ 0x70
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	895b      	ldrh	r3, [r3, #10]
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002742:	fb01 f202 	mul.w	r2, r1, r2
 8002746:	6839      	ldr	r1, [r7, #0]
 8002748:	4411      	add	r1, r2
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	440a      	add	r2, r1
 800274e:	3266      	adds	r2, #102	@ 0x66
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	4610      	mov	r0, r2
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800275a:	fb01 f202 	mul.w	r2, r1, r2
 800275e:	6839      	ldr	r1, [r7, #0]
 8002760:	440a      	add	r2, r1
 8002762:	4403      	add	r3, r0
 8002764:	b299      	uxth	r1, r3
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	3370      	adds	r3, #112	@ 0x70
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	460a      	mov	r2, r1
 8002770:	815a      	strh	r2, [r3, #10]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	3301      	adds	r3, #1
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800277e:	461a      	mov	r2, r3
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	4293      	cmp	r3, r2
 8002784:	dbae      	blt.n	80026e4 <ADBMS6830B_check_pec+0x154>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3301      	adds	r3, #1
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	429a      	cmp	r2, r3
 8002792:	dba4      	blt.n	80026de <ADBMS6830B_check_pec+0x14e>
			}
		  }
		break;
 8002794:	e0be      	b.n	8002914 <ADBMS6830B_check_pec+0x384>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e056      	b.n	800284a <ADBMS6830B_check_pec+0x2ba>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	e049      	b.n	8002836 <ADBMS6830B_check_pec+0x2a6>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80027a8:	fb02 f303 	mul.w	r3, r2, r3
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	6839      	ldr	r1, [r7, #0]
 80027c0:	4419      	add	r1, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	440b      	add	r3, r1
 80027c6:	3380      	adds	r3, #128	@ 0x80
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	440b      	add	r3, r1
 80027da:	4402      	add	r2, r0
 80027dc:	b292      	uxth	r2, r2
 80027de:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	441a      	add	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	3378      	adds	r3, #120	@ 0x78
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	88db      	ldrh	r3, [r3, #6]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002800:	fb01 f202 	mul.w	r2, r1, r2
 8002804:	6839      	ldr	r1, [r7, #0]
 8002806:	4411      	add	r1, r2
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	440a      	add	r2, r1
 800280c:	3280      	adds	r2, #128	@ 0x80
 800280e:	7812      	ldrb	r2, [r2, #0]
 8002810:	4610      	mov	r0, r2
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002818:	fb01 f202 	mul.w	r2, r1, r2
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	440a      	add	r2, r1
 8002820:	4403      	add	r3, r0
 8002822:	b299      	uxth	r1, r3
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	3378      	adds	r3, #120	@ 0x78
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	460a      	mov	r2, r1
 800282e:	80da      	strh	r2, [r3, #6]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	3301      	adds	r3, #1
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800283c:	461a      	mov	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4293      	cmp	r3, r2
 8002842:	dbae      	blt.n	80027a2 <ADBMS6830B_check_pec+0x212>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3301      	adds	r3, #1
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	429a      	cmp	r2, r3
 8002850:	dba4      	blt.n	800279c <ADBMS6830B_check_pec+0x20c>
			}
		  }

		break;
 8002852:	e05f      	b.n	8002914 <ADBMS6830B_check_pec+0x384>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e056      	b.n	8002908 <ADBMS6830B_check_pec+0x378>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	e049      	b.n	80028f4 <ADBMS6830B_check_pec+0x364>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	4413      	add	r3, r2
 800286e:	f8b3 20e6 	ldrh.w	r2, [r3, #230]	@ 0xe6
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	6839      	ldr	r1, [r7, #0]
 800287e:	4419      	add	r1, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	440b      	add	r3, r1
 8002884:	3391      	adds	r3, #145	@ 0x91
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	6839      	ldr	r1, [r7, #0]
 8002896:	440b      	add	r3, r1
 8002898:	4402      	add	r2, r0
 800289a:	b292      	uxth	r2, r2
 800289c:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	441a      	add	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	337c      	adds	r3, #124	@ 0x7c
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	88db      	ldrh	r3, [r3, #6]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80028be:	fb01 f202 	mul.w	r2, r1, r2
 80028c2:	6839      	ldr	r1, [r7, #0]
 80028c4:	4411      	add	r1, r2
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	440a      	add	r2, r1
 80028ca:	3291      	adds	r2, #145	@ 0x91
 80028cc:	7812      	ldrb	r2, [r2, #0]
 80028ce:	4610      	mov	r0, r2
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80028d6:	fb01 f202 	mul.w	r2, r1, r2
 80028da:	6839      	ldr	r1, [r7, #0]
 80028dc:	440a      	add	r2, r1
 80028de:	4403      	add	r3, r0
 80028e0:	b299      	uxth	r1, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	337c      	adds	r3, #124	@ 0x7c
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	460a      	mov	r2, r1
 80028ec:	80da      	strh	r2, [r3, #6]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	3301      	adds	r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 80028fa:	3b01      	subs	r3, #1
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	dbae      	blt.n	8002860 <ADBMS6830B_check_pec+0x2d0>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3301      	adds	r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	429a      	cmp	r2, r3
 800290e:	dba4      	blt.n	800285a <ADBMS6830B_check_pec+0x2ca>
			}
		  }
		break;
 8002910:	e000      	b.n	8002914 <ADBMS6830B_check_pec+0x384>
		default:
		break;
 8002912:	bf00      	nop
	}
}
 8002914:	bf00      	nop
 8002916:	372c      	adds	r7, #44	@ 0x2c
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <FEB_CAN_Init>:
uint8_t FEB_CAN_PONGED;


// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8002924:	f000 f80c 	bl	8002940 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8002928:	4804      	ldr	r0, [pc, #16]	@ (800293c <FEB_CAN_Init+0x1c>)
 800292a:	f001 fe77 	bl	800461c <HAL_CAN_Start>
        // Code Error - Shutdown
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800292e:	2102      	movs	r1, #2
 8002930:	4802      	ldr	r0, [pc, #8]	@ (800293c <FEB_CAN_Init+0x1c>)
 8002932:	f001 ffbc 	bl	80048ae <HAL_CAN_ActivateNotification>
	//TODO: Create directory
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200004e4 	.word	0x200004e4

08002940 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	71fb      	strb	r3, [r7, #7]
    if(FEB_CAN_PINGPONG_MODE) filter_bank =FEB_CAN_PINGPONG_Filter(&hcan1, CAN_RX_FIFO0, filter_bank);
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	461a      	mov	r2, r3
 800294e:	2100      	movs	r1, #0
 8002950:	4804      	ldr	r0, [pc, #16]	@ (8002964 <FEB_CAN_Filter_Config+0x24>)
 8002952:	f000 f84b 	bl	80029ec <FEB_CAN_PINGPONG_Filter>
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]

	// Assign Filter
    //filter_bank = Function(&hcan1, CAN_RX_FIFO0, filter_bank);
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200004e4 	.word	0x200004e4

08002968 <FEB_SM_CAN_Transmit>:

	}
}


void FEB_SM_CAN_Transmit(void) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0

	// Initialize transmission header
	FEB_CAN_Tx_Header.DLC = 3;
 800296e:	4b1b      	ldr	r3, [pc, #108]	@ (80029dc <FEB_SM_CAN_Transmit+0x74>)
 8002970:	2203      	movs	r2, #3
 8002972:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.StdId = FEB_CAN_ID_BMS_STATE;
 8002974:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <FEB_SM_CAN_Transmit+0x74>)
 8002976:	2203      	movs	r2, #3
 8002978:	601a      	str	r2, [r3, #0]
	FEB_CAN_Tx_Header.IDE = CAN_ID_STD;
 800297a:	4b18      	ldr	r3, [pc, #96]	@ (80029dc <FEB_SM_CAN_Transmit+0x74>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8002980:	4b16      	ldr	r3, [pc, #88]	@ (80029dc <FEB_SM_CAN_Transmit+0x74>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <FEB_SM_CAN_Transmit+0x74>)
 8002988:	2200      	movs	r2, #0
 800298a:	751a      	strb	r2, [r3, #20]

	// Get data
	uint16_t cell_min_voltage=0;
 800298c:	2300      	movs	r3, #0
 800298e:	80fb      	strh	r3, [r7, #6]

	// Copy data to Tx buffer
	FEB_CAN_Tx_Data[0] = FEB_SM_Get_Current_State();
 8002990:	f000 fa20 	bl	8002dd4 <FEB_SM_Get_Current_State>
 8002994:	4603      	mov	r3, r0
 8002996:	b2da      	uxtb	r2, r3
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <FEB_SM_CAN_Transmit+0x78>)
 800299a:	701a      	strb	r2, [r3, #0]
	FEB_CAN_Tx_Data[1] = cell_min_voltage && 0xFF;
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf14      	ite	ne
 80029a2:	2301      	movne	r3, #1
 80029a4:	2300      	moveq	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <FEB_SM_CAN_Transmit+0x78>)
 80029ac:	705a      	strb	r2, [r3, #1]
	FEB_CAN_Tx_Data[2] = cell_min_voltage >> 8;
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <FEB_SM_CAN_Transmit+0x78>)
 80029b8:	709a      	strb	r2, [r3, #2]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 80029ba:	bf00      	nop
 80029bc:	4809      	ldr	r0, [pc, #36]	@ (80029e4 <FEB_SM_CAN_Transmit+0x7c>)
 80029be:	f001 ff41 	bl	8004844 <HAL_CAN_GetTxMailboxesFreeLevel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f9      	beq.n	80029bc <FEB_SM_CAN_Transmit+0x54>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 80029c8:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <FEB_SM_CAN_Transmit+0x80>)
 80029ca:	4a05      	ldr	r2, [pc, #20]	@ (80029e0 <FEB_SM_CAN_Transmit+0x78>)
 80029cc:	4903      	ldr	r1, [pc, #12]	@ (80029dc <FEB_SM_CAN_Transmit+0x74>)
 80029ce:	4805      	ldr	r0, [pc, #20]	@ (80029e4 <FEB_SM_CAN_Transmit+0x7c>)
 80029d0:	f001 fe68 	bl	80046a4 <HAL_CAN_AddTxMessage>
		// FEB_SM_Set_Current_State(FEB_SM_ST_SHUTDOWN);
	}
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200004ac 	.word	0x200004ac
 80029e0:	200004c4 	.word	0x200004c4
 80029e4:	200004e4 	.word	0x200004e4
 80029e8:	200004cc 	.word	0x200004cc

080029ec <FEB_CAN_PINGPONG_Filter>:

uint8_t FEB_CAN_GET_PONGED(void){
	return FEB_CAN_PONGED;
}

uint8_t FEB_CAN_PINGPONG_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank){
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	@ 0x30
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
 80029f8:	4613      	mov	r3, r2
 80029fa:	70bb      	strb	r3, [r7, #2]
    // For multiple filters, create array of filter IDs and loop over IDs.

	CAN_FilterTypeDef filter_config;

    // Standard CAN - 2.0A - 11 bit
    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80029fc:	2301      	movs	r3, #1
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter_config.FilterBank = filter_bank;
 8002a00:	78bb      	ldrb	r3, [r7, #2]
 8002a02:	61fb      	str	r3, [r7, #28]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	61bb      	str	r3, [r7, #24]
	filter_config.FilterIdHigh = 0xA0001;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <FEB_CAN_PINGPONG_Filter+0x88>)
 8002a0a:	60bb      	str	r3, [r7, #8]
	filter_config.FilterIdLow = 0xD1;
 8002a0c:	23d1      	movs	r3, #209	@ 0xd1
 8002a0e:	60fb      	str	r3, [r7, #12]
	filter_config.FilterMaskIdHigh = 0xFFE0;
 8002a10:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a14:	613b      	str	r3, [r7, #16]
	filter_config.FilterMaskIdLow = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
	filter_config.SlaveStartFilterBank = 27;
 8002a22:	231b      	movs	r3, #27
 8002a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    filter_bank++;
 8002a26:	78bb      	ldrb	r3, [r7, #2]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	70bb      	strb	r3, [r7, #2]

    // Extended CAN - 2.0B - 29 bit
	filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter_config.FilterBank = filter_bank;
 8002a30:	78bb      	ldrb	r3, [r7, #2]
 8002a32:	61fb      	str	r3, [r7, #28]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	61bb      	str	r3, [r7, #24]
	filter_config.FilterIdHigh = /* ID */ 0 >> 13;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
	filter_config.FilterIdLow = (/* ID */ 0 & 0x1FFF) << 3;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
	filter_config.FilterMaskIdHigh = 0xFFFF;
 8002a40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a44:	613b      	str	r3, [r7, #16]
	filter_config.FilterMaskIdLow = 0xFFF8;
 8002a46:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8002a4a:	617b      	str	r3, [r7, #20]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8002a50:	2301      	movs	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
	filter_config.SlaveStartFilterBank = 27;
 8002a54:	231b      	movs	r3, #27
 8002a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    filter_bank++;
 8002a58:	78bb      	ldrb	r3, [r7, #2]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	70bb      	strb	r3, [r7, #2]

	if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 8002a5e:	f107 0308 	add.w	r3, r7, #8
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f001 fcf9 	bl	800445c <HAL_CAN_ConfigFilter>
        // Code Error - Shutdown
	}

	return filter_bank;
 8002a6a:	78bb      	ldrb	r3, [r7, #2]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3730      	adds	r7, #48	@ 0x30
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	000a0001 	.word	0x000a0001

08002a78 <FEB_Config_Update>:
static int16_t cell_max_temperature_dC;
static int32_t pack_min_current_mA = 0;		// mili-amps
static int32_t pack_max_current_mA = 0;

/* Assume serial access (SM lock held). */
void FEB_Config_Update(FEB_SM_ST_t current_state) {
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
	int32_t current_resolution_mA = 50;
 8002a82:	2332      	movs	r3, #50	@ 0x32
 8002a84:	60fb      	str	r3, [r7, #12]
	switch(current_state) {
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	3b03      	subs	r3, #3
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d86d      	bhi.n	8002b6a <FEB_Config_Update+0xf2>
 8002a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a94 <FEB_Config_Update+0x1c>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002b09 	.word	0x08002b09
 8002a98:	08002b6b 	.word	0x08002b6b
 8002a9c:	08002b39 	.word	0x08002b39
 8002aa0:	08002b6b 	.word	0x08002b6b
 8002aa4:	08002add 	.word	0x08002add
 8002aa8:	08002aad 	.word	0x08002aad
		case FEB_SM_ST_BALANCE:
			cell_min_voltage_mV = 3200; /* Higher minimum voltage */
 8002aac:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba8 <FEB_Config_Update+0x130>)
 8002aae:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8002ab2:	801a      	strh	r2, [r3, #0]
			cell_max_voltage_mV = 4200;
 8002ab4:	4b3d      	ldr	r3, [pc, #244]	@ (8002bac <FEB_Config_Update+0x134>)
 8002ab6:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002aba:	801a      	strh	r2, [r3, #0]
			cell_min_temperature_dC = -200;
 8002abc:	4b3c      	ldr	r3, [pc, #240]	@ (8002bb0 <FEB_Config_Update+0x138>)
 8002abe:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8002ac2:	801a      	strh	r2, [r3, #0]
			cell_max_temperature_dC = 600;
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <FEB_Config_Update+0x13c>)
 8002ac6:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002aca:	801a      	strh	r2, [r3, #0]
			pack_min_current_mA = 0 - current_resolution_mA;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	425b      	negs	r3, r3
 8002ad0:	4a39      	ldr	r2, [pc, #228]	@ (8002bb8 <FEB_Config_Update+0x140>)
 8002ad2:	6013      	str	r3, [r2, #0]
			pack_max_current_mA = 0 + current_resolution_mA;
 8002ad4:	4a39      	ldr	r2, [pc, #228]	@ (8002bbc <FEB_Config_Update+0x144>)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6013      	str	r3, [r2, #0]
			break;
 8002ada:	e05e      	b.n	8002b9a <FEB_Config_Update+0x122>
		case FEB_SM_ST_CHARGING:
			cell_min_voltage_mV = 2500;
 8002adc:	4b32      	ldr	r3, [pc, #200]	@ (8002ba8 <FEB_Config_Update+0x130>)
 8002ade:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002ae2:	801a      	strh	r2, [r3, #0]
			cell_max_voltage_mV = 4200;
 8002ae4:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <FEB_Config_Update+0x134>)
 8002ae6:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002aea:	801a      	strh	r2, [r3, #0]
			cell_min_temperature_dC = 0;
 8002aec:	4b30      	ldr	r3, [pc, #192]	@ (8002bb0 <FEB_Config_Update+0x138>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	801a      	strh	r2, [r3, #0]
			cell_max_temperature_dC = 450;
 8002af2:	4b30      	ldr	r3, [pc, #192]	@ (8002bb4 <FEB_Config_Update+0x13c>)
 8002af4:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8002af8:	801a      	strh	r2, [r3, #0]
			pack_min_current_mA = -20000;
 8002afa:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb8 <FEB_Config_Update+0x140>)
 8002afc:	4a30      	ldr	r2, [pc, #192]	@ (8002bc0 <FEB_Config_Update+0x148>)
 8002afe:	601a      	str	r2, [r3, #0]
			pack_max_current_mA = 0 + current_resolution_mA;
 8002b00:	4a2e      	ldr	r2, [pc, #184]	@ (8002bbc <FEB_Config_Update+0x144>)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6013      	str	r3, [r2, #0]
			break;
 8002b06:	e048      	b.n	8002b9a <FEB_Config_Update+0x122>
		case FEB_SM_ST_PRECHARGE:
			cell_min_voltage_mV = 2500;
 8002b08:	4b27      	ldr	r3, [pc, #156]	@ (8002ba8 <FEB_Config_Update+0x130>)
 8002b0a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002b0e:	801a      	strh	r2, [r3, #0]
			cell_max_voltage_mV = 4200;
 8002b10:	4b26      	ldr	r3, [pc, #152]	@ (8002bac <FEB_Config_Update+0x134>)
 8002b12:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002b16:	801a      	strh	r2, [r3, #0]
			cell_min_temperature_dC = -200;
 8002b18:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <FEB_Config_Update+0x138>)
 8002b1a:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8002b1e:	801a      	strh	r2, [r3, #0]
			cell_max_temperature_dC = 600;
 8002b20:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <FEB_Config_Update+0x13c>)
 8002b22:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002b26:	801a      	strh	r2, [r3, #0]
			pack_min_current_mA = 0 - current_resolution_mA;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	425b      	negs	r3, r3
 8002b2c:	4a22      	ldr	r2, [pc, #136]	@ (8002bb8 <FEB_Config_Update+0x140>)
 8002b2e:	6013      	str	r3, [r2, #0]
			pack_max_current_mA = 100;
 8002b30:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <FEB_Config_Update+0x144>)
 8002b32:	2264      	movs	r2, #100	@ 0x64
 8002b34:	601a      	str	r2, [r3, #0]
			break;
 8002b36:	e030      	b.n	8002b9a <FEB_Config_Update+0x122>
		case FEB_SM_ST_DRIVE:
			cell_min_voltage_mV = 2500;
 8002b38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <FEB_Config_Update+0x130>)
 8002b3a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002b3e:	801a      	strh	r2, [r3, #0]
			cell_max_voltage_mV = 4200;
 8002b40:	4b1a      	ldr	r3, [pc, #104]	@ (8002bac <FEB_Config_Update+0x134>)
 8002b42:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002b46:	801a      	strh	r2, [r3, #0]
			cell_min_temperature_dC = -200;
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <FEB_Config_Update+0x138>)
 8002b4a:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8002b4e:	801a      	strh	r2, [r3, #0]
			cell_max_temperature_dC = 600;
 8002b50:	4b18      	ldr	r3, [pc, #96]	@ (8002bb4 <FEB_Config_Update+0x13c>)
 8002b52:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002b56:	801a      	strh	r2, [r3, #0]
			pack_min_current_mA = 0 - current_resolution_mA;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	425b      	negs	r3, r3
 8002b5c:	4a16      	ldr	r2, [pc, #88]	@ (8002bb8 <FEB_Config_Update+0x140>)
 8002b5e:	6013      	str	r3, [r2, #0]
			pack_max_current_mA = 60000;
 8002b60:	4b16      	ldr	r3, [pc, #88]	@ (8002bbc <FEB_Config_Update+0x144>)
 8002b62:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002b66:	601a      	str	r2, [r3, #0]
			break;
 8002b68:	e017      	b.n	8002b9a <FEB_Config_Update+0x122>
			cell_max_temperature_dC = 450;
			pack_min_current_mA = -20000;
			pack_max_current_mA = 60000;
			break;*/
		default:
			cell_min_voltage_mV = 2500;
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba8 <FEB_Config_Update+0x130>)
 8002b6c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002b70:	801a      	strh	r2, [r3, #0]
			cell_max_voltage_mV = 4200;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <FEB_Config_Update+0x134>)
 8002b74:	f241 0268 	movw	r2, #4200	@ 0x1068
 8002b78:	801a      	strh	r2, [r3, #0]
			cell_min_temperature_dC = -200;
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <FEB_Config_Update+0x138>)
 8002b7c:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8002b80:	801a      	strh	r2, [r3, #0]
			cell_max_temperature_dC = 600;
 8002b82:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb4 <FEB_Config_Update+0x13c>)
 8002b84:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002b88:	801a      	strh	r2, [r3, #0]
			pack_min_current_mA = 0 - current_resolution_mA;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	425b      	negs	r3, r3
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb8 <FEB_Config_Update+0x140>)
 8002b90:	6013      	str	r3, [r2, #0]
			pack_max_current_mA = 0 + current_resolution_mA;
 8002b92:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <FEB_Config_Update+0x144>)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6013      	str	r3, [r2, #0]
			break;
 8002b98:	bf00      	nop
	}
}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	200004d0 	.word	0x200004d0
 8002bac:	200004d2 	.word	0x200004d2
 8002bb0:	200004d4 	.word	0x200004d4
 8002bb4:	200004d6 	.word	0x200004d6
 8002bb8:	200004d8 	.word	0x200004d8
 8002bbc:	200004dc 	.word	0x200004dc
 8002bc0:	ffffb1e0 	.word	0xffffb1e0

08002bc4 <FEB_Config_Get_Cell_Min_Voltage_mV>:

/* ******** Interface ******** */

uint16_t FEB_Config_Get_Cell_Min_Voltage_mV(void) {
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
	//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
	uint16_t value = cell_min_voltage_mV;
 8002bca:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <FEB_Config_Get_Cell_Min_Voltage_mV+0x1c>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	80fb      	strh	r3, [r7, #6]
	//osMutexRelease(FEB_SM_LockHandle);
	return value;
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	200004d0 	.word	0x200004d0

08002be4 <FEB_Config_Get_Cell_Max_Voltage_mV>:

uint16_t FEB_Config_Get_Cell_Max_Voltage_mV(void) {
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
	//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
	uint16_t value = cell_max_voltage_mV;
 8002bea:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <FEB_Config_Get_Cell_Max_Voltage_mV+0x1c>)
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	80fb      	strh	r3, [r7, #6]
	//osMutexRelease(FEB_SM_LockHandle);
	return value;
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	200004d2 	.word	0x200004d2

08002c04 <FEB_delay_m>:
	int a=0;
	while(micro--)a=micro;
	a++;
}

void FEB_delay_m(uint16_t milli) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(milli);
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 fb03 	bl	800421c <HAL_Delay>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <FEB_cs_low>:

void FEB_cs_low() {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002c24:	2200      	movs	r2, #0
 8002c26:	2140      	movs	r1, #64	@ 0x40
 8002c28:	4802      	ldr	r0, [pc, #8]	@ (8002c34 <FEB_cs_low+0x14>)
 8002c2a:	f002 f8f5 	bl	8004e18 <HAL_GPIO_WritePin>
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40020400 	.word	0x40020400

08002c38 <FEB_cs_high>:

void FEB_cs_high() {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	2140      	movs	r1, #64	@ 0x40
 8002c40:	4802      	ldr	r0, [pc, #8]	@ (8002c4c <FEB_cs_high+0x14>)
 8002c42:	f002 f8e9 	bl	8004e18 <HAL_GPIO_WritePin>
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40020400 	.word	0x40020400

08002c50 <FEB_spi_write_array>:
void FEB_spi_write_array(uint8_t len, uint8_t data[]) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY)!=HAL_OK){
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	f04f 33ff 	mov.w	r3, #4294967295
 8002c64:	6839      	ldr	r1, [r7, #0]
 8002c66:	4803      	ldr	r0, [pc, #12]	@ (8002c74 <FEB_spi_write_array+0x24>)
 8002c68:	f003 f8d7 	bl	8005e1a <HAL_SPI_Transmit>
		//catch error
	}
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000560 	.word	0x20000560

08002c78 <FEB_spi_write_read>:
		//catch error
	}
	return data;
}

void FEB_spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	461a      	mov	r2, r3
 8002c84:	460b      	mov	r3, r1
 8002c86:	72fb      	strb	r3, [r7, #11]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	72bb      	strb	r3, [r7, #10]
	if(HAL_SPI_Transmit(&hspi1,tx_Data,tx_len,HAL_MAX_DELAY) != HAL_OK){
 8002c8c:	7afb      	ldrb	r3, [r7, #11]
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295
 8002c94:	68f9      	ldr	r1, [r7, #12]
 8002c96:	4807      	ldr	r0, [pc, #28]	@ (8002cb4 <FEB_spi_write_read+0x3c>)
 8002c98:	f003 f8bf 	bl	8005e1a <HAL_SPI_Transmit>
		//catch error
	}
	if(HAL_SPI_Receive(&hspi1,rx_data,rx_len,HAL_MAX_DELAY)!= HAL_OK){
 8002c9c:	7abb      	ldrb	r3, [r7, #10]
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4803      	ldr	r0, [pc, #12]	@ (8002cb4 <FEB_spi_write_read+0x3c>)
 8002ca8:	f003 f9fb 	bl	80060a2 <HAL_SPI_Receive>
		//catch error
	}
	return;
 8002cac:	bf00      	nop
}
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000560 	.word	0x20000560

08002cb8 <FEB_PIN_RST>:

// ******************************** Relay Control ********************************
void FEB_PIN_RST(FEB_GPIO PinOut){
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	463b      	mov	r3, r7
 8002cc0:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(PinOut.group, PinOut.pin, GPIO_PIN_RESET);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	88b9      	ldrh	r1, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 f8a4 	bl	8004e18 <HAL_GPIO_WritePin>
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <FEB_PIN_SET>:
void FEB_PIN_SET(FEB_GPIO PinOut){
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	463b      	mov	r3, r7
 8002ce0:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_WritePin(PinOut.group, PinOut.pin, GPIO_PIN_SET);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	88b9      	ldrh	r1, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	4618      	mov	r0, r3
 8002cec:	f002 f894 	bl	8004e18 <HAL_GPIO_WritePin>
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <FEB_PIN_RD>:
void FEB_PIN_TGL(FEB_GPIO PinOut){
	HAL_GPIO_TogglePin(PinOut.group, PinOut.pin);
}
FEB_Relay_State FEB_PIN_RD(FEB_GPIO PinOut){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	463b      	mov	r3, r7
 8002d00:	e883 0003 	stmia.w	r3, {r0, r1}
	return (FEB_Relay_State)HAL_GPIO_ReadPin(PinOut.group, PinOut.pin);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	88ba      	ldrh	r2, [r7, #4]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f002 f86c 	bl	8004de8 <HAL_GPIO_ReadPin>
 8002d10:	4603      	mov	r3, r0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <FEB_Main_Setup>:
#include "FEB_Main.h"


// ******************************** Functions ********************************

void FEB_Main_Setup() {
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	af00      	add	r7, sp, #0
	//SM setup
	FEB_ADBMS_Init();
 8002d1e:	f7fe fafd 	bl	800131c <FEB_ADBMS_Init>
	FEB_SM_Init();
 8002d22:	f000 f84b 	bl	8002dbc <FEB_SM_Init>
	FEB_CAN_Init();
 8002d26:	f7ff fdfb 	bl	8002920 <FEB_CAN_Init>
	//IVT Setup
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <FEB_Task_ADBMS>:

void FEB_Task_ADBMS() {
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	af00      	add	r7, sp, #0
	FEB_ADBMS_Voltage_Process();
 8002d32:	f7fe fb43 	bl	80013bc <FEB_ADBMS_Voltage_Process>
	FEB_ADBMS_Temperature_Process();
 8002d36:	f7fe fb4b 	bl	80013d0 <FEB_ADBMS_Temperature_Process>
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <FEB_Task_SM>:

void FEB_Task_SM() {
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	af00      	add	r7, sp, #0
	FEB_SM_Process();
 8002d42:	f000 f861 	bl	8002e08 <FEB_SM_Process>
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <FEB_Task_Charge>:

void FEB_Task_Charge() {
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0

}
 8002d4e:	bf00      	nop
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <FEB_Task_Balance>:

void FEB_Task_Balance() {
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0

}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <FEB_Task_IVT>:

void FEB_Task_IVT() {
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0

}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <FEB_Task_CAN>:

void FEB_Task_CAN() {
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <transition>:

/* ******** State Transition Functions ******** */
/* State transition functions assume serial access (SM lock held). */

/* Initiate state transition. Assume SM lock held. */
static void transition(FEB_SM_ST_t next_state) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
	(transitionVector[SM_Current_State])(next_state);
 8002d8e:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <transition+0x30>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <transition+0x34>)
 8002d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9a:	79fa      	ldrb	r2, [r7, #7]
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4798      	blx	r3
	FEB_Config_Update(SM_Current_State);
 8002da0:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <transition+0x30>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fe67 	bl	8002a78 <FEB_Config_Update>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200004e0 	.word	0x200004e0
 8002db8:	20000010 	.word	0x20000010

08002dbc <FEB_SM_Init>:

/* ******** Interface ******** */

/* Function called from initial thread (no other threads created).
 * No synchronization needed. */
void FEB_SM_Init(void) {
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
	SM_Current_State=FEB_SM_ST_BOOT;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	@ (8002dd0 <FEB_SM_Init+0x14>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
		FEB_Hw_Set_BMS_Shutdown_Relay(FEB_HW_RELAY_OPEN);
		return;
	}
	*/

}
 8002dc6:	bf00      	nop
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	200004e0 	.word	0x200004e0

08002dd4 <FEB_SM_Get_Current_State>:

/* Get current state of state machine. */
FEB_SM_ST_t FEB_SM_Get_Current_State(void) {
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
	//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
	//FEB_SM_ST_t state = SM_Current_State;
	//osMutexRelease(FEB_SM_LockHandle);
	return SM_Current_State;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	@ (8002de8 <FEB_SM_Get_Current_State+0x14>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	200004e0 	.word	0x200004e0

08002dec <FEB_SM_Transition>:

/* Initiate state transition. */
void FEB_SM_Transition(FEB_SM_ST_t next_state) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
	transition(next_state);
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ffc3 	bl	8002d84 <transition>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <FEB_SM_Process>:

/* Check for conditions necessary for state transitions. */
void FEB_SM_Process(void) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0

	//TODO: Add task queue
	transitionVector[FEB_SM_Get_Current_State()](FEB_SM_ST_DEFAULT);
 8002e0c:	f7ff ffe2 	bl	8002dd4 <FEB_SM_Get_Current_State>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <FEB_SM_Process+0x20>)
 8002e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1a:	200d      	movs	r0, #13
 8002e1c:	4798      	blx	r3
	FEB_SM_CAN_Transmit();
 8002e1e:	f7ff fda3 	bl	8002968 <FEB_SM_CAN_Transmit>
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000010 	.word	0x20000010

08002e2c <fault>:

//FAULT HELPER FUNCTION
static void fault(FEB_SM_ST_t FAULT_TYPE) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	@ 0x30
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
	SM_Current_State = FAULT_TYPE;
 8002e36:	4a24      	ldr	r2, [pc, #144]	@ (8002ec8 <fault+0x9c>)
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	7013      	strb	r3, [r2, #0]
	//FEB_Config_Update(SM_Current_State);
	FEB_PIN_RST(P_PC1);//FEB_Hw_Set_BMS_Shutdown_Relay(FEB_RELAY_STATE_OPEN);
 8002e3c:	4a23      	ldr	r2, [pc, #140]	@ (8002ecc <fault+0xa0>)
 8002e3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e46:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e52:	f7ff ff31 	bl	8002cb8 <FEB_PIN_RST>
	FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 8002e56:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed0 <fault+0xa4>)
 8002e58:	f107 0320 	add.w	r3, r7, #32
 8002e5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e60:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e64:	f107 0320 	add.w	r3, r7, #32
 8002e68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e6c:	f7ff ff24 	bl	8002cb8 <FEB_PIN_RST>
	FEB_PIN_RST(PN_PC_REL); //FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 8002e70:	4a18      	ldr	r2, [pc, #96]	@ (8002ed4 <fault+0xa8>)
 8002e72:	f107 0318 	add.w	r3, r7, #24
 8002e76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e7e:	f107 0318 	add.w	r3, r7, #24
 8002e82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e86:	f7ff ff17 	bl	8002cb8 <FEB_PIN_RST>
	FEB_PIN_SET(PN_BUZZER);
 8002e8a:	4a13      	ldr	r2, [pc, #76]	@ (8002ed8 <fault+0xac>)
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e94:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e98:	f107 0310 	add.w	r3, r7, #16
 8002e9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ea0:	f7ff ff1a 	bl	8002cd8 <FEB_PIN_SET>
	FEB_PIN_SET(PN_INDICATOR);
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8002edc <fault+0xb0>)
 8002ea6:	f107 0308 	add.w	r3, r7, #8
 8002eaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eae:	e883 0003 	stmia.w	r3, {r0, r1}
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002eba:	f7ff ff0d 	bl	8002cd8 <FEB_PIN_SET>

}
 8002ebe:	bf00      	nop
 8002ec0:	3730      	adds	r7, #48	@ 0x30
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200004e0 	.word	0x200004e0
 8002ecc:	08009ca0 	.word	0x08009ca0
 8002ed0:	08009ca8 	.word	0x08009ca8
 8002ed4:	08009cb0 	.word	0x08009cb0
 8002ed8:	08009cb8 	.word	0x08009cb8
 8002edc:	08009cc0 	.word	0x08009cc0

08002ee0 <updateStateProtected>:

/** Transition Functions **/
static FEB_SM_ST_t updateStateProtected(FEB_SM_ST_t next_state){
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
	//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
	if(SM_Current_State==FEB_SM_ST_FAULT_BMS)
 8002eea:	4b08      	ldr	r3, [pc, #32]	@ (8002f0c <updateStateProtected+0x2c>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	d101      	bne.n	8002ef6 <updateStateProtected+0x16>
		return FEB_SM_ST_FAULT_BMS;
 8002ef2:	2309      	movs	r3, #9
 8002ef4:	e003      	b.n	8002efe <updateStateProtected+0x1e>
	SM_Current_State=next_state;
 8002ef6:	4a05      	ldr	r2, [pc, #20]	@ (8002f0c <updateStateProtected+0x2c>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	7013      	strb	r3, [r2, #0]
	//osMutexRelease(FEB_SM_LockHandle);
	return next_state;
 8002efc:	79fb      	ldrb	r3, [r7, #7]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	200004e0 	.word	0x200004e0

08002f10 <bootTransition>:

static void bootTransition(FEB_SM_ST_t next_state){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d009      	beq.n	8002f34 <bootTransition+0x24>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	dd0b      	ble.n	8002f3c <bootTransition+0x2c>
 8002f24:	3b09      	subs	r3, #9
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d808      	bhi.n	8002f3c <bootTransition+0x2c>
	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
	case FEB_SM_ST_FAULT_BSPD:
		fault(next_state);
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff7d 	bl	8002e2c <fault>
		break;
 8002f32:	e004      	b.n	8002f3e <bootTransition+0x2e>

	case FEB_SM_ST_LV:
		updateStateProtected(FEB_SM_ST_LV);
 8002f34:	2001      	movs	r0, #1
 8002f36:	f7ff ffd3 	bl	8002ee0 <updateStateProtected>
		break;
 8002f3a:	e000      	b.n	8002f3e <bootTransition+0x2e>

	default:
		return;
 8002f3c:	bf00      	nop
	}

}
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <LVPowerTransition>:

static void LVPowerTransition(FEB_SM_ST_t next_state){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	3b02      	subs	r3, #2
 8002f52:	2b0b      	cmp	r3, #11
 8002f54:	d838      	bhi.n	8002fc8 <LVPowerTransition+0x84>
 8002f56:	a201      	add	r2, pc, #4	@ (adr r2, 8002f5c <LVPowerTransition+0x18>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002f97 	.word	0x08002f97
 8002f60:	08002fc9 	.word	0x08002fc9
 8002f64:	08002fc9 	.word	0x08002fc9
 8002f68:	08002fc9 	.word	0x08002fc9
 8002f6c:	08002f97 	.word	0x08002f97
 8002f70:	08002fc9 	.word	0x08002fc9
 8002f74:	08002fc9 	.word	0x08002fc9
 8002f78:	08002f8d 	.word	0x08002f8d
 8002f7c:	08002f8d 	.word	0x08002f8d
 8002f80:	08002f8d 	.word	0x08002f8d
 8002f84:	08002fc9 	.word	0x08002fc9
 8002f88:	08002fa1 	.word	0x08002fa1
	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
	case FEB_SM_ST_FAULT_BSPD:
		fault(next_state);
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ff4c 	bl	8002e2c <fault>
		break;
 8002f94:	e01b      	b.n	8002fce <LVPowerTransition+0x8a>

	case FEB_SM_ST_ESC:
	case FEB_SM_ST_FREE:
		updateStateProtected(next_state);
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ffa1 	bl	8002ee0 <updateStateProtected>
		break;
 8002f9e:	e016      	b.n	8002fce <LVPowerTransition+0x8a>

	case FEB_SM_ST_DEFAULT:
		if(FEB_PIN_RD(PN_SHS_IN)==FEB_RELAY_STATE_CLOSE)
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8002fd4 <LVPowerTransition+0x90>)
 8002fa2:	f107 0308 	add.w	r3, r7, #8
 8002fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002faa:	e883 0003 	stmia.w	r3, {r0, r1}
 8002fae:	f107 0308 	add.w	r3, r7, #8
 8002fb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fb6:	f7ff fe9f 	bl	8002cf8 <FEB_PIN_RD>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d105      	bne.n	8002fcc <LVPowerTransition+0x88>
			LVPowerTransition(FEB_SM_ST_ESC);
 8002fc0:	2002      	movs	r0, #2
 8002fc2:	f7ff ffbf 	bl	8002f44 <LVPowerTransition>
		if (0)//FEB_CAN_Charger_Received()
			LVPowerTransition(FEB_SM_ST_FREE);
		break;
 8002fc6:	e001      	b.n	8002fcc <LVPowerTransition+0x88>

	default:
		return;
 8002fc8:	bf00      	nop
 8002fca:	e000      	b.n	8002fce <LVPowerTransition+0x8a>
		break;
 8002fcc:	bf00      	nop
	}
}
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	08009cc8 	.word	0x08009cc8

08002fd8 <ESCCompleteTransition>:

static void ESCCompleteTransition(FEB_SM_ST_t next_state){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08c      	sub	sp, #48	@ 0x30
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d87d      	bhi.n	80030e6 <ESCCompleteTransition+0x10e>
 8002fea:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff0 <ESCCompleteTransition+0x18>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	0800302f 	.word	0x0800302f
 8002ff4:	080030e7 	.word	0x080030e7
 8002ff8:	08003039 	.word	0x08003039
 8002ffc:	080030e7 	.word	0x080030e7
 8003000:	080030e7 	.word	0x080030e7
 8003004:	080030e7 	.word	0x080030e7
 8003008:	080030e7 	.word	0x080030e7
 800300c:	080030e7 	.word	0x080030e7
 8003010:	08003025 	.word	0x08003025
 8003014:	08003025 	.word	0x08003025
 8003018:	08003025 	.word	0x08003025
 800301c:	080030e7 	.word	0x080030e7
 8003020:	08003077 	.word	0x08003077
	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
	case FEB_SM_ST_FAULT_BSPD:
		fault(next_state);
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff ff00 	bl	8002e2c <fault>
		break;
 800302c:	e05e      	b.n	80030ec <ESCCompleteTransition+0x114>

	case FEB_SM_ST_LV:
		updateStateProtected(next_state);
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff55 	bl	8002ee0 <updateStateProtected>
		break;
 8003036:	e059      	b.n	80030ec <ESCCompleteTransition+0x114>

	case FEB_SM_ST_PRECHARGE:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 8003038:	4a2e      	ldr	r2, [pc, #184]	@ (80030f4 <ESCCompleteTransition+0x11c>)
 800303a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800303e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003042:	e883 0003 	stmia.w	r3, {r0, r1}
 8003046:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800304a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800304e:	f7ff fe33 	bl	8002cb8 <FEB_PIN_RST>
		FEB_PIN_SET(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_CLOSE);
 8003052:	4a29      	ldr	r2, [pc, #164]	@ (80030f8 <ESCCompleteTransition+0x120>)
 8003054:	f107 0320 	add.w	r3, r7, #32
 8003058:	e892 0003 	ldmia.w	r2, {r0, r1}
 800305c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003060:	f107 0320 	add.w	r3, r7, #32
 8003064:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003068:	f7ff fe36 	bl	8002cd8 <FEB_PIN_SET>
		updateStateProtected(next_state);
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ff36 	bl	8002ee0 <updateStateProtected>
		break;
 8003074:	e03a      	b.n	80030ec <ESCCompleteTransition+0x114>

	case FEB_SM_ST_DEFAULT:
		if(FEB_PIN_RD(PN_SHS_IN)==FEB_RELAY_STATE_OPEN)
 8003076:	4a21      	ldr	r2, [pc, #132]	@ (80030fc <ESCCompleteTransition+0x124>)
 8003078:	f107 0318 	add.w	r3, r7, #24
 800307c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003080:	e883 0003 	stmia.w	r3, {r0, r1}
 8003084:	f107 0318 	add.w	r3, r7, #24
 8003088:	e893 0003 	ldmia.w	r3, {r0, r1}
 800308c:	f7ff fe34 	bl	8002cf8 <FEB_PIN_RD>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <ESCCompleteTransition+0xc6>
					ESCCompleteTransition(FEB_SM_ST_LV);
 8003096:	2001      	movs	r0, #1
 8003098:	f7ff ff9e 	bl	8002fd8 <ESCCompleteTransition>
		else if(FEB_PIN_RD(PN_AIRM_SENSE) == FEB_RELAY_STATE_CLOSE &&
				FEB_PIN_RD(PN_AIRP_SENSE) == FEB_RELAY_STATE_OPEN
			//Precharge Sense????? FEB_PIN_RD() == FEB_RELAY_STATE_OPEN
			)
			ESCCompleteTransition(FEB_SM_ST_PRECHARGE);
		break;
 800309c:	e025      	b.n	80030ea <ESCCompleteTransition+0x112>
		else if(FEB_PIN_RD(PN_AIRM_SENSE) == FEB_RELAY_STATE_CLOSE &&
 800309e:	4a18      	ldr	r2, [pc, #96]	@ (8003100 <ESCCompleteTransition+0x128>)
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80030ac:	f107 0310 	add.w	r3, r7, #16
 80030b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030b4:	f7ff fe20 	bl	8002cf8 <FEB_PIN_RD>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d115      	bne.n	80030ea <ESCCompleteTransition+0x112>
				FEB_PIN_RD(PN_AIRP_SENSE) == FEB_RELAY_STATE_OPEN
 80030be:	4a11      	ldr	r2, [pc, #68]	@ (8003104 <ESCCompleteTransition+0x12c>)
 80030c0:	f107 0308 	add.w	r3, r7, #8
 80030c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80030cc:	f107 0308 	add.w	r3, r7, #8
 80030d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030d4:	f7ff fe10 	bl	8002cf8 <FEB_PIN_RD>
 80030d8:	4603      	mov	r3, r0
		else if(FEB_PIN_RD(PN_AIRM_SENSE) == FEB_RELAY_STATE_CLOSE &&
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d105      	bne.n	80030ea <ESCCompleteTransition+0x112>
			ESCCompleteTransition(FEB_SM_ST_PRECHARGE);
 80030de:	2003      	movs	r0, #3
 80030e0:	f7ff ff7a 	bl	8002fd8 <ESCCompleteTransition>
		break;
 80030e4:	e001      	b.n	80030ea <ESCCompleteTransition+0x112>

	default:
		return;
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <ESCCompleteTransition+0x114>
		break;
 80030ea:	bf00      	nop
	}


}
 80030ec:	3730      	adds	r7, #48	@ 0x30
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	08009ca8 	.word	0x08009ca8
 80030f8:	08009cb0 	.word	0x08009cb0
 80030fc:	08009cc8 	.word	0x08009cc8
 8003100:	08009cd0 	.word	0x08009cd0
 8003104:	08009cd8 	.word	0x08009cd8

08003108 <PrechargeTransition>:

static void PrechargeTransition(FEB_SM_ST_t next_state){
 8003108:	b580      	push	{r7, lr}
 800310a:	b090      	sub	sp, #64	@ 0x40
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	3b01      	subs	r3, #1
 8003116:	2b0c      	cmp	r3, #12
 8003118:	f200 809b 	bhi.w	8003252 <PrechargeTransition+0x14a>
 800311c:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <PrechargeTransition+0x1c>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003163 	.word	0x08003163
 8003128:	08003163 	.word	0x08003163
 800312c:	08003253 	.word	0x08003253
 8003130:	080031a1 	.word	0x080031a1
 8003134:	08003253 	.word	0x08003253
 8003138:	08003253 	.word	0x08003253
 800313c:	08003253 	.word	0x08003253
 8003140:	08003253 	.word	0x08003253
 8003144:	08003159 	.word	0x08003159
 8003148:	08003159 	.word	0x08003159
 800314c:	08003159 	.word	0x08003159
 8003150:	08003253 	.word	0x08003253
 8003154:	080031e3 	.word	0x080031e3
	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
	case FEB_SM_ST_FAULT_BSPD:
		fault(next_state);
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fe66 	bl	8002e2c <fault>
		break;
 8003160:	e07a      	b.n	8003258 <PrechargeTransition+0x150>

	case FEB_SM_ST_LV:
	case FEB_SM_ST_ESC:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 8003162:	4a3f      	ldr	r2, [pc, #252]	@ (8003260 <PrechargeTransition+0x158>)
 8003164:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800316c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003170:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003174:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003178:	f7ff fd9e 	bl	8002cb8 <FEB_PIN_RST>
		FEB_PIN_RST(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 800317c:	4a39      	ldr	r2, [pc, #228]	@ (8003264 <PrechargeTransition+0x15c>)
 800317e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003186:	e883 0003 	stmia.w	r3, {r0, r1}
 800318a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800318e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003192:	f7ff fd91 	bl	8002cb8 <FEB_PIN_RST>
		updateStateProtected(next_state);
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fea1 	bl	8002ee0 <updateStateProtected>
		break;
 800319e:	e05b      	b.n	8003258 <PrechargeTransition+0x150>

	case FEB_SM_ST_ENERGIZED:
		FEB_PIN_SET(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_CLOSE);
 80031a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003260 <PrechargeTransition+0x158>)
 80031a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80031ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031b6:	f7ff fd8f 	bl	8002cd8 <FEB_PIN_SET>
		HAL_Delay(10);//osDelay(100);
 80031ba:	200a      	movs	r0, #10
 80031bc:	f001 f82e 	bl	800421c <HAL_Delay>
		FEB_PIN_RST(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 80031c0:	4a28      	ldr	r2, [pc, #160]	@ (8003264 <PrechargeTransition+0x15c>)
 80031c2:	f107 0320 	add.w	r3, r7, #32
 80031c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80031ce:	f107 0320 	add.w	r3, r7, #32
 80031d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031d6:	f7ff fd6f 	bl	8002cb8 <FEB_PIN_RST>
		updateStateProtected(FEB_SM_ST_ENERGIZED);
 80031da:	2004      	movs	r0, #4
 80031dc:	f7ff fe80 	bl	8002ee0 <updateStateProtected>
		break;
 80031e0:	e03a      	b.n	8003258 <PrechargeTransition+0x150>

	case FEB_SM_ST_DEFAULT:
		if( FEB_PIN_RD(PN_SHS_IN)==FEB_RELAY_STATE_OPEN ||
 80031e2:	4a21      	ldr	r2, [pc, #132]	@ (8003268 <PrechargeTransition+0x160>)
 80031e4:	f107 0318 	add.w	r3, r7, #24
 80031e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80031f0:	f107 0318 	add.w	r3, r7, #24
 80031f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80031f8:	f7ff fd7e 	bl	8002cf8 <FEB_PIN_RD>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00f      	beq.n	8003222 <PrechargeTransition+0x11a>
			FEB_PIN_RD(PN_AIRM_SENSE)==FEB_RELAY_STATE_OPEN//FEB_Hw_AIR_Minus_Sense()==FEB_RELAY_STATE_OPEN
 8003202:	4a1a      	ldr	r2, [pc, #104]	@ (800326c <PrechargeTransition+0x164>)
 8003204:	f107 0310 	add.w	r3, r7, #16
 8003208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800320c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003218:	f7ff fd6e 	bl	8002cf8 <FEB_PIN_RD>
 800321c:	4603      	mov	r3, r0
		if( FEB_PIN_RD(PN_SHS_IN)==FEB_RELAY_STATE_OPEN ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <PrechargeTransition+0x122>
			)PrechargeTransition(FEB_SM_ST_LV);
 8003222:	2001      	movs	r0, #1
 8003224:	f7ff ff70 	bl	8003108 <PrechargeTransition>
		else if(FEB_PIN_RD(PN_AIRP_SENSE)//FEB_Hw_Precharge_Sense()==FEB_RELAY_STATE_OPEN
				)PrechargeTransition(FEB_SM_ST_ESC);
		break;
 8003228:	e015      	b.n	8003256 <PrechargeTransition+0x14e>
		else if(FEB_PIN_RD(PN_AIRP_SENSE)//FEB_Hw_Precharge_Sense()==FEB_RELAY_STATE_OPEN
 800322a:	4a11      	ldr	r2, [pc, #68]	@ (8003270 <PrechargeTransition+0x168>)
 800322c:	f107 0308 	add.w	r3, r7, #8
 8003230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003234:	e883 0003 	stmia.w	r3, {r0, r1}
 8003238:	f107 0308 	add.w	r3, r7, #8
 800323c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003240:	f7ff fd5a 	bl	8002cf8 <FEB_PIN_RD>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <PrechargeTransition+0x14e>
				)PrechargeTransition(FEB_SM_ST_ESC);
 800324a:	2002      	movs	r0, #2
 800324c:	f7ff ff5c 	bl	8003108 <PrechargeTransition>
		break;
 8003250:	e001      	b.n	8003256 <PrechargeTransition+0x14e>

	default:
		return;
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <PrechargeTransition+0x150>
		break;
 8003256:	bf00      	nop
	}


}
 8003258:	3740      	adds	r7, #64	@ 0x40
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	08009ca8 	.word	0x08009ca8
 8003264:	08009cb0 	.word	0x08009cb0
 8003268:	08009cc8 	.word	0x08009cc8
 800326c:	08009cd0 	.word	0x08009cd0
 8003270:	08009cd8 	.word	0x08009cd8

08003274 <EnergizedTransition>:

static void EnergizedTransition(FEB_SM_ST_t next_state){
 8003274:	b580      	push	{r7, lr}
 8003276:	b08a      	sub	sp, #40	@ 0x28
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	3b01      	subs	r3, #1
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d869      	bhi.n	800335a <EnergizedTransition+0xe6>
 8003286:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <EnergizedTransition+0x18>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	080032d5 	.word	0x080032d5
 8003290:	080032d5 	.word	0x080032d5
 8003294:	0800335b 	.word	0x0800335b
 8003298:	0800335b 	.word	0x0800335b
 800329c:	080032cb 	.word	0x080032cb
 80032a0:	0800335b 	.word	0x0800335b
 80032a4:	0800335b 	.word	0x0800335b
 80032a8:	0800335b 	.word	0x0800335b
 80032ac:	080032c1 	.word	0x080032c1
 80032b0:	080032c1 	.word	0x080032c1
 80032b4:	080032c1 	.word	0x080032c1
 80032b8:	0800335b 	.word	0x0800335b
 80032bc:	08003313 	.word	0x08003313
	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
	case FEB_SM_ST_FAULT_BSPD:
		fault(next_state);
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fdb2 	bl	8002e2c <fault>
		break;
 80032c8:	e04a      	b.n	8003360 <EnergizedTransition+0xec>

	case FEB_SM_ST_DRIVE:
		updateStateProtected(next_state);
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fe07 	bl	8002ee0 <updateStateProtected>
		break;
 80032d2:	e045      	b.n	8003360 <EnergizedTransition+0xec>

	case FEB_SM_ST_LV:
	case FEB_SM_ST_ESC:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 80032d4:	4a24      	ldr	r2, [pc, #144]	@ (8003368 <EnergizedTransition+0xf4>)
 80032d6:	f107 0320 	add.w	r3, r7, #32
 80032da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032de:	e883 0003 	stmia.w	r3, {r0, r1}
 80032e2:	f107 0320 	add.w	r3, r7, #32
 80032e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032ea:	f7ff fce5 	bl	8002cb8 <FEB_PIN_RST>
		FEB_PIN_RST(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 80032ee:	4a1f      	ldr	r2, [pc, #124]	@ (800336c <EnergizedTransition+0xf8>)
 80032f0:	f107 0318 	add.w	r3, r7, #24
 80032f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80032fc:	f107 0318 	add.w	r3, r7, #24
 8003300:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003304:	f7ff fcd8 	bl	8002cb8 <FEB_PIN_RST>
		updateStateProtected(next_state);
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fde8 	bl	8002ee0 <updateStateProtected>
		break;
 8003310:	e026      	b.n	8003360 <EnergizedTransition+0xec>

	case FEB_SM_ST_DEFAULT:
		if( FEB_PIN_RD(PN_SHS_IN)==FEB_RELAY_STATE_OPEN||
 8003312:	4a17      	ldr	r2, [pc, #92]	@ (8003370 <EnergizedTransition+0xfc>)
 8003314:	f107 0310 	add.w	r3, r7, #16
 8003318:	e892 0003 	ldmia.w	r2, {r0, r1}
 800331c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003328:	f7ff fce6 	bl	8002cf8 <FEB_PIN_RD>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00f      	beq.n	8003352 <EnergizedTransition+0xde>
			FEB_PIN_RD(PN_AIRM_SENSE)==FEB_RELAY_STATE_OPEN//FEB_Hw_AIR_Minus_Sense()==FEB_RELAY_STATE_OPEN
 8003332:	4a10      	ldr	r2, [pc, #64]	@ (8003374 <EnergizedTransition+0x100>)
 8003334:	f107 0308 	add.w	r3, r7, #8
 8003338:	e892 0003 	ldmia.w	r2, {r0, r1}
 800333c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003340:	f107 0308 	add.w	r3, r7, #8
 8003344:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003348:	f7ff fcd6 	bl	8002cf8 <FEB_PIN_RD>
 800334c:	4603      	mov	r3, r0
		if( FEB_PIN_RD(PN_SHS_IN)==FEB_RELAY_STATE_OPEN||
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <EnergizedTransition+0xea>
			)EnergizedTransition(FEB_SM_ST_LV);
 8003352:	2001      	movs	r0, #1
 8003354:	f7ff ff8e 	bl	8003274 <EnergizedTransition>
		else if(0
				//FEB_CAN_ICS_Ready_To_Drive()
				)
			EnergizedTransition(FEB_SM_ST_DRIVE);
		break;
 8003358:	e001      	b.n	800335e <EnergizedTransition+0xea>

	default:
		return;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <EnergizedTransition+0xec>
		break;
 800335e:	bf00      	nop
	}

}
 8003360:	3728      	adds	r7, #40	@ 0x28
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	08009ca8 	.word	0x08009ca8
 800336c:	08009cb0 	.word	0x08009cb0
 8003370:	08009cc8 	.word	0x08009cc8
 8003374:	08009cd0 	.word	0x08009cd0

08003378 <DriveTransition>:

static void DriveTransition(FEB_SM_ST_t next_state){
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	@ 0x28
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	3b01      	subs	r3, #1
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d868      	bhi.n	800345c <DriveTransition+0xe4>
 800338a:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <DriveTransition+0x18>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033cf 	.word	0x080033cf
 8003394:	080033cf 	.word	0x080033cf
 8003398:	0800345d 	.word	0x0800345d
 800339c:	0800340d 	.word	0x0800340d
 80033a0:	0800345d 	.word	0x0800345d
 80033a4:	0800345d 	.word	0x0800345d
 80033a8:	0800345d 	.word	0x0800345d
 80033ac:	0800345d 	.word	0x0800345d
 80033b0:	080033c5 	.word	0x080033c5
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	080033c5 	.word	0x080033c5
 80033bc:	0800345d 	.word	0x0800345d
 80033c0:	08003415 	.word	0x08003415
	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
	case FEB_SM_ST_FAULT_BSPD:
		fault(next_state);
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fd30 	bl	8002e2c <fault>
		break;
 80033cc:	e049      	b.n	8003462 <DriveTransition+0xea>

	case FEB_SM_ST_LV:
	case FEB_SM_ST_ESC:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 80033ce:	4a26      	ldr	r2, [pc, #152]	@ (8003468 <DriveTransition+0xf0>)
 80033d0:	f107 0320 	add.w	r3, r7, #32
 80033d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80033dc:	f107 0320 	add.w	r3, r7, #32
 80033e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033e4:	f7ff fc68 	bl	8002cb8 <FEB_PIN_RST>
		FEB_PIN_RST(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 80033e8:	4a20      	ldr	r2, [pc, #128]	@ (800346c <DriveTransition+0xf4>)
 80033ea:	f107 0318 	add.w	r3, r7, #24
 80033ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80033f6:	f107 0318 	add.w	r3, r7, #24
 80033fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033fe:	f7ff fc5b 	bl	8002cb8 <FEB_PIN_RST>
		updateStateProtected(next_state);
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fd6b 	bl	8002ee0 <updateStateProtected>
		break;
 800340a:	e02a      	b.n	8003462 <DriveTransition+0xea>

	case FEB_SM_ST_ENERGIZED:
		updateStateProtected(FEB_SM_ST_ENERGIZED);
 800340c:	2004      	movs	r0, #4
 800340e:	f7ff fd67 	bl	8002ee0 <updateStateProtected>
		break;
 8003412:	e026      	b.n	8003462 <DriveTransition+0xea>

	case FEB_SM_ST_DEFAULT:
		if( FEB_PIN_RD(PN_SHS_IN)== FEB_RELAY_STATE_OPEN ||
 8003414:	4a16      	ldr	r2, [pc, #88]	@ (8003470 <DriveTransition+0xf8>)
 8003416:	f107 0310 	add.w	r3, r7, #16
 800341a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800341e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003422:	f107 0310 	add.w	r3, r7, #16
 8003426:	e893 0003 	ldmia.w	r3, {r0, r1}
 800342a:	f7ff fc65 	bl	8002cf8 <FEB_PIN_RD>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00f      	beq.n	8003454 <DriveTransition+0xdc>
			FEB_PIN_RD(PN_AIRM_SENSE) == FEB_RELAY_STATE_OPEN //FEB_Hw_AIR_Minus_Sense()==FEB_RELAY_STATE_OPEN
 8003434:	4a0f      	ldr	r2, [pc, #60]	@ (8003474 <DriveTransition+0xfc>)
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800343e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003442:	f107 0308 	add.w	r3, r7, #8
 8003446:	e893 0003 	ldmia.w	r3, {r0, r1}
 800344a:	f7ff fc55 	bl	8002cf8 <FEB_PIN_RD>
 800344e:	4603      	mov	r3, r0
		if( FEB_PIN_RD(PN_SHS_IN)== FEB_RELAY_STATE_OPEN ||
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <DriveTransition+0xe8>
			)DriveTransition(FEB_SM_ST_LV);
 8003454:	2001      	movs	r0, #1
 8003456:	f7ff ff8f 	bl	8003378 <DriveTransition>
		else if(0
				//FEB_CAN_ICS_Ready_To_Drive()
				)
			DriveTransition(FEB_SM_ST_ENERGIZED);
		break;
 800345a:	e001      	b.n	8003460 <DriveTransition+0xe8>

	default:
		return;
 800345c:	bf00      	nop
 800345e:	e000      	b.n	8003462 <DriveTransition+0xea>
		break;
 8003460:	bf00      	nop
	}
}
 8003462:	3728      	adds	r7, #40	@ 0x28
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	08009ca8 	.word	0x08009ca8
 800346c:	08009cb0 	.word	0x08009cb0
 8003470:	08009cc8 	.word	0x08009cc8
 8003474:	08009cd0 	.word	0x08009cd0

08003478 <FreeTransition>:

static void FreeTransition(FEB_SM_ST_t next_state){
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	3b01      	subs	r3, #1
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d85f      	bhi.n	800354a <FreeTransition+0xd2>
 800348a:	a201      	add	r2, pc, #4	@ (adr r2, 8003490 <FreeTransition+0x18>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034cd 	.word	0x080034cd
 8003494:	0800354b 	.word	0x0800354b
 8003498:	0800354b 	.word	0x0800354b
 800349c:	0800354b 	.word	0x0800354b
 80034a0:	0800354b 	.word	0x0800354b
 80034a4:	080034cd 	.word	0x080034cd
 80034a8:	080034ef 	.word	0x080034ef
 80034ac:	08003519 	.word	0x08003519
 80034b0:	080034c5 	.word	0x080034c5
 80034b4:	0800354b 	.word	0x0800354b
 80034b8:	080034c5 	.word	0x080034c5
 80034bc:	0800354b 	.word	0x0800354b
 80034c0:	08003523 	.word	0x08003523

	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
		fault(FEB_SM_ST_FAULT_CHARGING);
 80034c4:	200c      	movs	r0, #12
 80034c6:	f7ff fcb1 	bl	8002e2c <fault>
		break;
 80034ca:	e03f      	b.n	800354c <FreeTransition+0xd4>

	case FEB_SM_ST_FREE:
	case FEB_SM_ST_LV:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 80034cc:	4a21      	ldr	r2, [pc, #132]	@ (8003554 <FreeTransition+0xdc>)
 80034ce:	f107 0318 	add.w	r3, r7, #24
 80034d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80034da:	f107 0318 	add.w	r3, r7, #24
 80034de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034e2:	f7ff fbe9 	bl	8002cb8 <FEB_PIN_RST>
		updateStateProtected(FEB_SM_ST_FREE);
 80034e6:	2006      	movs	r0, #6
 80034e8:	f7ff fcfa 	bl	8002ee0 <updateStateProtected>
		break;
 80034ec:	e02e      	b.n	800354c <FreeTransition+0xd4>

	case FEB_SM_ST_CHARGING:
		HAL_Delay(10);//osDelay(100);
 80034ee:	200a      	movs	r0, #10
 80034f0:	f000 fe94 	bl	800421c <HAL_Delay>
		FEB_PIN_SET(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_CLOSE);
 80034f4:	4a17      	ldr	r2, [pc, #92]	@ (8003554 <FreeTransition+0xdc>)
 80034f6:	f107 0310 	add.w	r3, r7, #16
 80034fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8003502:	f107 0310 	add.w	r3, r7, #16
 8003506:	e893 0003 	ldmia.w	r3, {r0, r1}
 800350a:	f7ff fbe5 	bl	8002cd8 <FEB_PIN_SET>
		updateStateProtected(next_state);
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fce5 	bl	8002ee0 <updateStateProtected>
		break;
 8003516:	e019      	b.n	800354c <FreeTransition+0xd4>
	case FEB_SM_ST_BALANCE:
		updateStateProtected(next_state);
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fce0 	bl	8002ee0 <updateStateProtected>
		break;
 8003520:	e014      	b.n	800354c <FreeTransition+0xd4>
	case FEB_SM_ST_DEFAULT:
		if( FEB_PIN_RD(PN_AIRM_SENSE)== FEB_RELAY_STATE_CLOSE //FEB_Hw_AIR_Minus_Sense()==FEB_RELAY_STATE_CLOSE &&
 8003522:	4a0d      	ldr	r2, [pc, #52]	@ (8003558 <FreeTransition+0xe0>)
 8003524:	f107 0308 	add.w	r3, r7, #8
 8003528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800352c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003530:	f107 0308 	add.w	r3, r7, #8
 8003534:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003538:	f7ff fbde 	bl	8002cf8 <FEB_PIN_RD>
 800353c:	4603      	mov	r3, r0
 800353e:	2b01      	cmp	r3, #1
 8003540:	d103      	bne.n	800354a <FreeTransition+0xd2>
			//FEB_Hw_Charge_Sense()==FEB_RELAY_STATE_CLOSE
			//FEB_CAN_Charger_Received()
		) FreeTransition(FEB_SM_ST_CHARGING);
 8003542:	2007      	movs	r0, #7
 8003544:	f7ff ff98 	bl	8003478 <FreeTransition>
 8003548:	e000      	b.n	800354c <FreeTransition+0xd4>
	default:
		return;
 800354a:	bf00      	nop
	}

}
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	08009ca8 	.word	0x08009ca8
 8003558:	08009cd0 	.word	0x08009cd0

0800355c <ChargingTransition>:

static void ChargingTransition(FEB_SM_ST_t next_state){
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	3b01      	subs	r3, #1
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d851      	bhi.n	8003612 <ChargingTransition+0xb6>
 800356e:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <ChargingTransition+0x18>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	080035b1 	.word	0x080035b1
 8003578:	08003613 	.word	0x08003613
 800357c:	08003613 	.word	0x08003613
 8003580:	08003613 	.word	0x08003613
 8003584:	08003613 	.word	0x08003613
 8003588:	080035b1 	.word	0x080035b1
 800358c:	08003613 	.word	0x08003613
 8003590:	08003613 	.word	0x08003613
 8003594:	080035a9 	.word	0x080035a9
 8003598:	08003613 	.word	0x08003613
 800359c:	080035a9 	.word	0x080035a9
 80035a0:	08003613 	.word	0x08003613
 80035a4:	080035ed 	.word	0x080035ed

	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
		fault(FEB_SM_ST_FAULT_CHARGING);
 80035a8:	200c      	movs	r0, #12
 80035aa:	f7ff fc3f 	bl	8002e2c <fault>
		break;
 80035ae:	e031      	b.n	8003614 <ChargingTransition+0xb8>

	case FEB_SM_ST_LV:
	case FEB_SM_ST_FREE:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 80035b0:	4a1a      	ldr	r2, [pc, #104]	@ (800361c <ChargingTransition+0xc0>)
 80035b2:	f107 0318 	add.w	r3, r7, #24
 80035b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80035be:	f107 0318 	add.w	r3, r7, #24
 80035c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035c6:	f7ff fb77 	bl	8002cb8 <FEB_PIN_RST>
		FEB_PIN_RST(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 80035ca:	4a15      	ldr	r2, [pc, #84]	@ (8003620 <ChargingTransition+0xc4>)
 80035cc:	f107 0310 	add.w	r3, r7, #16
 80035d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80035d8:	f107 0310 	add.w	r3, r7, #16
 80035dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035e0:	f7ff fb6a 	bl	8002cb8 <FEB_PIN_RST>
		updateStateProtected(FEB_SM_ST_FREE);
 80035e4:	2006      	movs	r0, #6
 80035e6:	f7ff fc7b 	bl	8002ee0 <updateStateProtected>
		break;
 80035ea:	e013      	b.n	8003614 <ChargingTransition+0xb8>
;
	case FEB_SM_ST_DEFAULT:
		if(FEB_PIN_RD(PN_AIRM_SENSE)==FEB_RELAY_STATE_OPEN//FEB_Hw_AIR_Minus_Sense()==FEB_RELAY_STATE_OPEN
 80035ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003624 <ChargingTransition+0xc8>)
 80035ee:	f107 0308 	add.w	r3, r7, #8
 80035f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80035fa:	f107 0308 	add.w	r3, r7, #8
 80035fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003602:	f7ff fb79 	bl	8002cf8 <FEB_PIN_RD>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <ChargingTransition+0xb6>
			)
			ChargingTransition(FEB_SM_ST_FREE);
 800360c:	2006      	movs	r0, #6
 800360e:	f7ff ffa5 	bl	800355c <ChargingTransition>
	default:
		break;
 8003612:	bf00      	nop
	}

}
 8003614:	bf00      	nop
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	08009ca8 	.word	0x08009ca8
 8003620:	08009cb0 	.word	0x08009cb0
 8003624:	08009cd0 	.word	0x08009cd0

08003628 <BalanceTransition>:

static void BalanceTransition(FEB_SM_ST_t next_state){
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
	switch(next_state){
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	3b01      	subs	r3, #1
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d851      	bhi.n	80036de <BalanceTransition+0xb6>
 800363a:	a201      	add	r2, pc, #4	@ (adr r2, 8003640 <BalanceTransition+0x18>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	0800367d 	.word	0x0800367d
 8003644:	080036df 	.word	0x080036df
 8003648:	080036df 	.word	0x080036df
 800364c:	080036df 	.word	0x080036df
 8003650:	080036df 	.word	0x080036df
 8003654:	0800367d 	.word	0x0800367d
 8003658:	080036df 	.word	0x080036df
 800365c:	080036df 	.word	0x080036df
 8003660:	08003675 	.word	0x08003675
 8003664:	080036df 	.word	0x080036df
 8003668:	08003675 	.word	0x08003675
 800366c:	080036df 	.word	0x080036df
 8003670:	080036b9 	.word	0x080036b9

	case FEB_SM_ST_FAULT_BMS:
	case FEB_SM_ST_FAULT_IMD:
		fault(FEB_SM_ST_FAULT_CHARGING);
 8003674:	200c      	movs	r0, #12
 8003676:	f7ff fbd9 	bl	8002e2c <fault>
		//osMutexRelease(FEB_SM_LockHandle);
		//TODO: REPLACE FOR BALANCING
		//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
		break;
 800367a:	e031      	b.n	80036e0 <BalanceTransition+0xb8>

	case FEB_SM_ST_LV:
	case FEB_SM_ST_FREE:
		FEB_PIN_RST(PN_PC_AIR);//FEB_Hw_Set_AIR_Plus_Relay(FEB_RELAY_STATE_OPEN);
 800367c:	4a1a      	ldr	r2, [pc, #104]	@ (80036e8 <BalanceTransition+0xc0>)
 800367e:	f107 0318 	add.w	r3, r7, #24
 8003682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003686:	e883 0003 	stmia.w	r3, {r0, r1}
 800368a:	f107 0318 	add.w	r3, r7, #24
 800368e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003692:	f7ff fb11 	bl	8002cb8 <FEB_PIN_RST>
		FEB_PIN_RST(PN_PC_REL);//FEB_Hw_Set_Precharge_Relay(FEB_RELAY_STATE_OPEN);
 8003696:	4a15      	ldr	r2, [pc, #84]	@ (80036ec <BalanceTransition+0xc4>)
 8003698:	f107 0310 	add.w	r3, r7, #16
 800369c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80036a4:	f107 0310 	add.w	r3, r7, #16
 80036a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036ac:	f7ff fb04 	bl	8002cb8 <FEB_PIN_RST>
		//osMutexRelease(FEB_SM_LockHandle);
		//FEB_LTC6811_Stop_Balance();
		updateStateProtected(FEB_SM_ST_FREE);
 80036b0:	2006      	movs	r0, #6
 80036b2:	f7ff fc15 	bl	8002ee0 <updateStateProtected>
		break;
 80036b6:	e013      	b.n	80036e0 <BalanceTransition+0xb8>

	case FEB_SM_ST_DEFAULT:
		if(FEB_PIN_RD(PN_AIRM_SENSE)==FEB_RELAY_STATE_OPEN//FEB_Hw_AIR_Minus_Sense()==FEB_RELAY_STATE_OPEN
 80036b8:	4a0d      	ldr	r2, [pc, #52]	@ (80036f0 <BalanceTransition+0xc8>)
 80036ba:	f107 0308 	add.w	r3, r7, #8
 80036be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80036c6:	f107 0308 	add.w	r3, r7, #8
 80036ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036ce:	f7ff fb13 	bl	8002cf8 <FEB_PIN_RD>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d102      	bne.n	80036de <BalanceTransition+0xb6>
			)
			BalanceTransition(FEB_SM_ST_FREE);
 80036d8:	2006      	movs	r0, #6
 80036da:	f7ff ffa5 	bl	8003628 <BalanceTransition>

	default:
		break;
 80036de:	bf00      	nop

	}
}
 80036e0:	bf00      	nop
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	08009ca8 	.word	0x08009ca8
 80036ec:	08009cb0 	.word	0x08009cb0
 80036f0:	08009cd0 	.word	0x08009cd0

080036f4 <BMSFaultTransition>:

/** Hard Fault Functions **/
static void BMSFaultTransition(FEB_SM_ST_t next_state){
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
	fault(SM_Current_State);
 80036fe:	4b04      	ldr	r3, [pc, #16]	@ (8003710 <BMSFaultTransition+0x1c>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fb92 	bl	8002e2c <fault>
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	200004e0 	.word	0x200004e0

08003714 <BSPDFaultTransition>:
static void BSPDFaultTransition(FEB_SM_ST_t next_state){
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
	fault(SM_Current_State);
 800371e:	4b04      	ldr	r3, [pc, #16]	@ (8003730 <BSPDFaultTransition+0x1c>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fb82 	bl	8002e2c <fault>
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	200004e0 	.word	0x200004e0

08003734 <IMDFaultTransition>:
static void IMDFaultTransition(FEB_SM_ST_t next_state){
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	71fb      	strb	r3, [r7, #7]
	fault(SM_Current_State);
 800373e:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <IMDFaultTransition+0x1c>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fb72 	bl	8002e2c <fault>
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	200004e0 	.word	0x200004e0

08003754 <ChargingFaultTransition>:
static void ChargingFaultTransition(FEB_SM_ST_t next_state){
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
	fault(SM_Current_State);
 800375e:	4b04      	ldr	r3, [pc, #16]	@ (8003770 <ChargingFaultTransition+0x1c>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fb62 	bl	8002e2c <fault>
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	200004e0 	.word	0x200004e0

08003774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003778:	f000 fd0e 	bl	8004198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800377c:	f000 f81a 	bl	80037b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003780:	f000 f948 	bl	8003a14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003784:	f000 f91c 	bl	80039c0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003788:	f000 f8e4 	bl	8003954 <MX_SPI1_Init>
  MX_CAN1_Init();
 800378c:	f000 f880 	bl	8003890 <MX_CAN1_Init>
  MX_I2C1_Init();
 8003790:	f000 f8b2 	bl	80038f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  FEB_Main_Setup();
 8003794:	f7ff fac1 	bl	8002d1a <FEB_Main_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FEB_Task_ADBMS();
 8003798:	f7ff fac9 	bl	8002d2e <FEB_Task_ADBMS>
	  FEB_Task_SM();
 800379c:	f7ff facf 	bl	8002d3e <FEB_Task_SM>
	  FEB_Task_Charge();
 80037a0:	f7ff fad3 	bl	8002d4a <FEB_Task_Charge>
	  FEB_Task_Balance();
 80037a4:	f7ff fad8 	bl	8002d58 <FEB_Task_Balance>
	  FEB_Task_IVT();
 80037a8:	f7ff fadd 	bl	8002d66 <FEB_Task_IVT>
	  FEB_Task_CAN();
 80037ac:	f7ff fae2 	bl	8002d74 <FEB_Task_CAN>
	  FEB_Task_ADBMS();
 80037b0:	bf00      	nop
 80037b2:	e7f1      	b.n	8003798 <main+0x24>

080037b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b094      	sub	sp, #80	@ 0x50
 80037b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ba:	f107 031c 	add.w	r3, r7, #28
 80037be:	2234      	movs	r2, #52	@ 0x34
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 fbf3 	bl	8007fae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037c8:	f107 0308 	add.w	r3, r7, #8
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037d8:	2300      	movs	r3, #0
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003888 <SystemClock_Config+0xd4>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	4a29      	ldr	r2, [pc, #164]	@ (8003888 <SystemClock_Config+0xd4>)
 80037e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e8:	4b27      	ldr	r3, [pc, #156]	@ (8003888 <SystemClock_Config+0xd4>)
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80037f4:	2300      	movs	r3, #0
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4b24      	ldr	r3, [pc, #144]	@ (800388c <SystemClock_Config+0xd8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003800:	4a22      	ldr	r2, [pc, #136]	@ (800388c <SystemClock_Config+0xd8>)
 8003802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b20      	ldr	r3, [pc, #128]	@ (800388c <SystemClock_Config+0xd8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003814:	2302      	movs	r3, #2
 8003816:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003818:	2301      	movs	r3, #1
 800381a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800381c:	2310      	movs	r3, #16
 800381e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003820:	2302      	movs	r3, #2
 8003822:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003824:	2300      	movs	r3, #0
 8003826:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003828:	2310      	movs	r3, #16
 800382a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800382c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003830:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003832:	2304      	movs	r3, #4
 8003834:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003836:	2302      	movs	r3, #2
 8003838:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800383a:	2302      	movs	r3, #2
 800383c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800383e:	f107 031c 	add.w	r3, r7, #28
 8003842:	4618      	mov	r0, r3
 8003844:	f001 ffc2 	bl	80057cc <HAL_RCC_OscConfig>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800384e:	f000 f9a7 	bl	8003ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003852:	230f      	movs	r3, #15
 8003854:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003856:	2302      	movs	r3, #2
 8003858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800385e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003864:	2300      	movs	r3, #0
 8003866:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003868:	f107 0308 	add.w	r3, r7, #8
 800386c:	2102      	movs	r1, #2
 800386e:	4618      	mov	r0, r3
 8003870:	f001 fc30 	bl	80050d4 <HAL_RCC_ClockConfig>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800387a:	f000 f991 	bl	8003ba0 <Error_Handler>
  }
}
 800387e:	bf00      	nop
 8003880:	3750      	adds	r7, #80	@ 0x50
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	40007000 	.word	0x40007000

08003890 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003894:	4b16      	ldr	r3, [pc, #88]	@ (80038f0 <MX_CAN1_Init+0x60>)
 8003896:	4a17      	ldr	r2, [pc, #92]	@ (80038f4 <MX_CAN1_Init+0x64>)
 8003898:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800389a:	4b15      	ldr	r3, [pc, #84]	@ (80038f0 <MX_CAN1_Init+0x60>)
 800389c:	2210      	movs	r2, #16
 800389e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80038a0:	4b13      	ldr	r3, [pc, #76]	@ (80038f0 <MX_CAN1_Init+0x60>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80038a6:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <MX_CAN1_Init+0x60>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80038ac:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <MX_CAN1_Init+0x60>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80038b2:	4b0f      	ldr	r3, [pc, #60]	@ (80038f0 <MX_CAN1_Init+0x60>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80038b8:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <MX_CAN1_Init+0x60>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80038be:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <MX_CAN1_Init+0x60>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80038c4:	4b0a      	ldr	r3, [pc, #40]	@ (80038f0 <MX_CAN1_Init+0x60>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80038ca:	4b09      	ldr	r3, [pc, #36]	@ (80038f0 <MX_CAN1_Init+0x60>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80038d0:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <MX_CAN1_Init+0x60>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <MX_CAN1_Init+0x60>)
 80038d8:	2200      	movs	r2, #0
 80038da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80038dc:	4804      	ldr	r0, [pc, #16]	@ (80038f0 <MX_CAN1_Init+0x60>)
 80038de:	f000 fcc1 	bl	8004264 <HAL_CAN_Init>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80038e8:	f000 f95a 	bl	8003ba0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	200004e4 	.word	0x200004e4
 80038f4:	40006400 	.word	0x40006400

080038f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80038fc:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <MX_I2C1_Init+0x50>)
 80038fe:	4a13      	ldr	r2, [pc, #76]	@ (800394c <MX_I2C1_Init+0x54>)
 8003900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003902:	4b11      	ldr	r3, [pc, #68]	@ (8003948 <MX_I2C1_Init+0x50>)
 8003904:	4a12      	ldr	r2, [pc, #72]	@ (8003950 <MX_I2C1_Init+0x58>)
 8003906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003908:	4b0f      	ldr	r3, [pc, #60]	@ (8003948 <MX_I2C1_Init+0x50>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800390e:	4b0e      	ldr	r3, [pc, #56]	@ (8003948 <MX_I2C1_Init+0x50>)
 8003910:	2200      	movs	r2, #0
 8003912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003914:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <MX_I2C1_Init+0x50>)
 8003916:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800391a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800391c:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <MX_I2C1_Init+0x50>)
 800391e:	2200      	movs	r2, #0
 8003920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003922:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <MX_I2C1_Init+0x50>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003928:	4b07      	ldr	r3, [pc, #28]	@ (8003948 <MX_I2C1_Init+0x50>)
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <MX_I2C1_Init+0x50>)
 8003930:	2200      	movs	r2, #0
 8003932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003934:	4804      	ldr	r0, [pc, #16]	@ (8003948 <MX_I2C1_Init+0x50>)
 8003936:	f001 fa89 	bl	8004e4c <HAL_I2C_Init>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003940:	f000 f92e 	bl	8003ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003944:	bf00      	nop
 8003946:	bd80      	pop	{r7, pc}
 8003948:	2000050c 	.word	0x2000050c
 800394c:	40005400 	.word	0x40005400
 8003950:	000186a0 	.word	0x000186a0

08003954 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003958:	4b17      	ldr	r3, [pc, #92]	@ (80039b8 <MX_SPI1_Init+0x64>)
 800395a:	4a18      	ldr	r2, [pc, #96]	@ (80039bc <MX_SPI1_Init+0x68>)
 800395c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800395e:	4b16      	ldr	r3, [pc, #88]	@ (80039b8 <MX_SPI1_Init+0x64>)
 8003960:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003966:	4b14      	ldr	r3, [pc, #80]	@ (80039b8 <MX_SPI1_Init+0x64>)
 8003968:	2200      	movs	r2, #0
 800396a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800396c:	4b12      	ldr	r3, [pc, #72]	@ (80039b8 <MX_SPI1_Init+0x64>)
 800396e:	2200      	movs	r2, #0
 8003970:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003972:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <MX_SPI1_Init+0x64>)
 8003974:	2200      	movs	r2, #0
 8003976:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003978:	4b0f      	ldr	r3, [pc, #60]	@ (80039b8 <MX_SPI1_Init+0x64>)
 800397a:	2200      	movs	r2, #0
 800397c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800397e:	4b0e      	ldr	r3, [pc, #56]	@ (80039b8 <MX_SPI1_Init+0x64>)
 8003980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003984:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003986:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <MX_SPI1_Init+0x64>)
 8003988:	2228      	movs	r2, #40	@ 0x28
 800398a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800398c:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <MX_SPI1_Init+0x64>)
 800398e:	2200      	movs	r2, #0
 8003990:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003992:	4b09      	ldr	r3, [pc, #36]	@ (80039b8 <MX_SPI1_Init+0x64>)
 8003994:	2200      	movs	r2, #0
 8003996:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003998:	4b07      	ldr	r3, [pc, #28]	@ (80039b8 <MX_SPI1_Init+0x64>)
 800399a:	2200      	movs	r2, #0
 800399c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800399e:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <MX_SPI1_Init+0x64>)
 80039a0:	220a      	movs	r2, #10
 80039a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039a4:	4804      	ldr	r0, [pc, #16]	@ (80039b8 <MX_SPI1_Init+0x64>)
 80039a6:	f002 f9af 	bl	8005d08 <HAL_SPI_Init>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80039b0:	f000 f8f6 	bl	8003ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039b4:	bf00      	nop
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000560 	.word	0x20000560
 80039bc:	40013000 	.word	0x40013000

080039c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039c4:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <MX_USART2_UART_Init+0x4c>)
 80039c6:	4a12      	ldr	r2, [pc, #72]	@ (8003a10 <MX_USART2_UART_Init+0x50>)
 80039c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039ca:	4b10      	ldr	r3, [pc, #64]	@ (8003a0c <MX_USART2_UART_Init+0x4c>)
 80039cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80039d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039d2:	4b0e      	ldr	r3, [pc, #56]	@ (8003a0c <MX_USART2_UART_Init+0x4c>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039d8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a0c <MX_USART2_UART_Init+0x4c>)
 80039da:	2200      	movs	r2, #0
 80039dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039de:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <MX_USART2_UART_Init+0x4c>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039e4:	4b09      	ldr	r3, [pc, #36]	@ (8003a0c <MX_USART2_UART_Init+0x4c>)
 80039e6:	220c      	movs	r2, #12
 80039e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ea:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <MX_USART2_UART_Init+0x4c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f0:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <MX_USART2_UART_Init+0x4c>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039f6:	4805      	ldr	r0, [pc, #20]	@ (8003a0c <MX_USART2_UART_Init+0x4c>)
 80039f8:	f003 f9fa 	bl	8006df0 <HAL_UART_Init>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a02:	f000 f8cd 	bl	8003ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200005b8 	.word	0x200005b8
 8003a10:	40004400 	.word	0x40004400

08003a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	@ 0x28
 8003a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1a:	f107 0314 	add.w	r3, r7, #20
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	609a      	str	r2, [r3, #8]
 8003a26:	60da      	str	r2, [r3, #12]
 8003a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	4a4d      	ldr	r2, [pc, #308]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	4b47      	ldr	r3, [pc, #284]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	4a46      	ldr	r2, [pc, #280]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a56:	4b44      	ldr	r3, [pc, #272]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	4b40      	ldr	r3, [pc, #256]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	4a3f      	ldr	r2, [pc, #252]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a72:	4b3d      	ldr	r3, [pc, #244]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	4b39      	ldr	r3, [pc, #228]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a86:	4a38      	ldr	r2, [pc, #224]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003a88:	f043 0302 	orr.w	r3, r3, #2
 8003a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a8e:	4b36      	ldr	r3, [pc, #216]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	607b      	str	r3, [r7, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	4b32      	ldr	r3, [pc, #200]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa2:	4a31      	ldr	r2, [pc, #196]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003aa4:	f043 0308 	orr.w	r3, r3, #8
 8003aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8003b68 <MX_GPIO_Init+0x154>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INDICATOR_Pin|BMS_IND_Pin|BMS_A_Pin|PC_AIR_Pin
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f242 010f 	movw	r1, #8207	@ 0x200f
 8003abc:	482b      	ldr	r0, [pc, #172]	@ (8003b6c <MX_GPIO_Init+0x158>)
 8003abe:	f001 f9ab 	bl	8004e18 <HAL_GPIO_WritePin>
                          |CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	482a      	ldr	r0, [pc, #168]	@ (8003b70 <MX_GPIO_Init+0x15c>)
 8003ac8:	f001 f9a6 	bl	8004e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC_REL_GPIO_Port, PC_REL_Pin, GPIO_PIN_RESET);
 8003acc:	2200      	movs	r2, #0
 8003ace:	2104      	movs	r1, #4
 8003ad0:	4828      	ldr	r0, [pc, #160]	@ (8003b74 <MX_GPIO_Init+0x160>)
 8003ad2:	f001 f9a1 	bl	8004e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INDICATOR_Pin BMS_IND_Pin BMS_A_Pin PC_AIR_Pin
                           CS_Pin */
  GPIO_InitStruct.Pin = INDICATOR_Pin|BMS_IND_Pin|BMS_A_Pin|PC_AIR_Pin
 8003ad6:	f242 030f 	movw	r3, #8207	@ 0x200f
 8003ada:	617b      	str	r3, [r7, #20]
                          |CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003adc:	2301      	movs	r3, #1
 8003ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	4619      	mov	r1, r3
 8003aee:	481f      	ldr	r0, [pc, #124]	@ (8003b6c <MX_GPIO_Init+0x158>)
 8003af0:	f000 ffe6 	bl	8004ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8003af4:	2301      	movs	r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af8:	2301      	movs	r3, #1
 8003afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b00:	2300      	movs	r3, #0
 8003b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4819      	ldr	r0, [pc, #100]	@ (8003b70 <MX_GPIO_Init+0x15c>)
 8003b0c:	f000 ffd8 	bl	8004ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR__SENSE_Pin AIR__SENSEC5_Pin SHS_IMD_Pin SHS_TSMS_Pin
                           SHS_IN_Pin */
  GPIO_InitStruct.Pin = AIR__SENSE_Pin|AIR__SENSEC5_Pin|SHS_IMD_Pin|SHS_TSMS_Pin
 8003b10:	f641 4330 	movw	r3, #7216	@ 0x1c30
 8003b14:	617b      	str	r3, [r7, #20]
                          |SHS_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b1e:	f107 0314 	add.w	r3, r7, #20
 8003b22:	4619      	mov	r1, r3
 8003b24:	4811      	ldr	r0, [pc, #68]	@ (8003b6c <MX_GPIO_Init+0x158>)
 8003b26:	f000 ffcb 	bl	8004ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WAKE_Pin INTR_Pin RST_Pin PG_Pin
                           Alert_Pin */
  GPIO_InitStruct.Pin = WAKE_Pin|INTR_Pin|RST_Pin|PG_Pin
 8003b2a:	23e3      	movs	r3, #227	@ 0xe3
 8003b2c:	617b      	str	r3, [r7, #20]
                          |Alert_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b36:	f107 0314 	add.w	r3, r7, #20
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	480e      	ldr	r0, [pc, #56]	@ (8003b78 <MX_GPIO_Init+0x164>)
 8003b3e:	f000 ffbf 	bl	8004ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC_REL_Pin */
  GPIO_InitStruct.Pin = PC_REL_Pin;
 8003b42:	2304      	movs	r3, #4
 8003b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b46:	2301      	movs	r3, #1
 8003b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PC_REL_GPIO_Port, &GPIO_InitStruct);
 8003b52:	f107 0314 	add.w	r3, r7, #20
 8003b56:	4619      	mov	r1, r3
 8003b58:	4806      	ldr	r0, [pc, #24]	@ (8003b74 <MX_GPIO_Init+0x160>)
 8003b5a:	f000 ffb1 	bl	8004ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b5e:	bf00      	nop
 8003b60:	3728      	adds	r7, #40	@ 0x28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40020800 	.word	0x40020800
 8003b70:	40020000 	.word	0x40020000
 8003b74:	40020c00 	.word	0x40020c00
 8003b78:	40020400 	.word	0x40020400

08003b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a04      	ldr	r2, [pc, #16]	@ (8003b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003b8e:	f000 fb25 	bl	80041dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40010000 	.word	0x40010000

08003ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ba4:	b672      	cpsid	i
}
 8003ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ba8:	bf00      	nop
 8003baa:	e7fd      	b.n	8003ba8 <Error_Handler+0x8>

08003bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <HAL_MspInit+0x4c>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	4a0f      	ldr	r2, [pc, #60]	@ (8003bf8 <HAL_MspInit+0x4c>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf8 <HAL_MspInit+0x4c>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <HAL_MspInit+0x4c>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	4a08      	ldr	r2, [pc, #32]	@ (8003bf8 <HAL_MspInit+0x4c>)
 8003bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_MspInit+0x4c>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800

08003bfc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	@ 0x28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	60da      	str	r2, [r3, #12]
 8003c12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a19      	ldr	r2, [pc, #100]	@ (8003c80 <HAL_CAN_MspInit+0x84>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d12c      	bne.n	8003c78 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	4b18      	ldr	r3, [pc, #96]	@ (8003c84 <HAL_CAN_MspInit+0x88>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	4a17      	ldr	r2, [pc, #92]	@ (8003c84 <HAL_CAN_MspInit+0x88>)
 8003c28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <HAL_CAN_MspInit+0x88>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	4b11      	ldr	r3, [pc, #68]	@ (8003c84 <HAL_CAN_MspInit+0x88>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c42:	4a10      	ldr	r2, [pc, #64]	@ (8003c84 <HAL_CAN_MspInit+0x88>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c84 <HAL_CAN_MspInit+0x88>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c56:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c64:	2303      	movs	r3, #3
 8003c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003c68:	2309      	movs	r3, #9
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4619      	mov	r1, r3
 8003c72:	4805      	ldr	r0, [pc, #20]	@ (8003c88 <HAL_CAN_MspInit+0x8c>)
 8003c74:	f000 ff24 	bl	8004ac0 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8003c78:	bf00      	nop
 8003c7a:	3728      	adds	r7, #40	@ 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40006400 	.word	0x40006400
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40020000 	.word	0x40020000

08003c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	@ 0x28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a19      	ldr	r2, [pc, #100]	@ (8003d10 <HAL_I2C_MspInit+0x84>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d12c      	bne.n	8003d08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	4b18      	ldr	r3, [pc, #96]	@ (8003d14 <HAL_I2C_MspInit+0x88>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	4a17      	ldr	r2, [pc, #92]	@ (8003d14 <HAL_I2C_MspInit+0x88>)
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cbe:	4b15      	ldr	r3, [pc, #84]	@ (8003d14 <HAL_I2C_MspInit+0x88>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003cca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cd0:	2312      	movs	r3, #18
 8003cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cdc:	2304      	movs	r3, #4
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce0:	f107 0314 	add.w	r3, r7, #20
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	480c      	ldr	r0, [pc, #48]	@ (8003d18 <HAL_I2C_MspInit+0x8c>)
 8003ce8:	f000 feea 	bl	8004ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	4b08      	ldr	r3, [pc, #32]	@ (8003d14 <HAL_I2C_MspInit+0x88>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf4:	4a07      	ldr	r2, [pc, #28]	@ (8003d14 <HAL_I2C_MspInit+0x88>)
 8003cf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003cfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cfc:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <HAL_I2C_MspInit+0x88>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003d08:	bf00      	nop
 8003d0a:	3728      	adds	r7, #40	@ 0x28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40005400 	.word	0x40005400
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40020400 	.word	0x40020400

08003d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08a      	sub	sp, #40	@ 0x28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d24:	f107 0314 	add.w	r3, r7, #20
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	609a      	str	r2, [r3, #8]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a19      	ldr	r2, [pc, #100]	@ (8003da0 <HAL_SPI_MspInit+0x84>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d12b      	bne.n	8003d96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	4b18      	ldr	r3, [pc, #96]	@ (8003da4 <HAL_SPI_MspInit+0x88>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d46:	4a17      	ldr	r2, [pc, #92]	@ (8003da4 <HAL_SPI_MspInit+0x88>)
 8003d48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d4e:	4b15      	ldr	r3, [pc, #84]	@ (8003da4 <HAL_SPI_MspInit+0x88>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	4b11      	ldr	r3, [pc, #68]	@ (8003da4 <HAL_SPI_MspInit+0x88>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d62:	4a10      	ldr	r2, [pc, #64]	@ (8003da4 <HAL_SPI_MspInit+0x88>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003da4 <HAL_SPI_MspInit+0x88>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d76:	23e0      	movs	r3, #224	@ 0xe0
 8003d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d82:	2303      	movs	r3, #3
 8003d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d86:	2305      	movs	r3, #5
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8a:	f107 0314 	add.w	r3, r7, #20
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4805      	ldr	r0, [pc, #20]	@ (8003da8 <HAL_SPI_MspInit+0x8c>)
 8003d92:	f000 fe95 	bl	8004ac0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003d96:	bf00      	nop
 8003d98:	3728      	adds	r7, #40	@ 0x28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40013000 	.word	0x40013000
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020000 	.word	0x40020000

08003dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	@ 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a19      	ldr	r2, [pc, #100]	@ (8003e30 <HAL_UART_MspInit+0x84>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d12b      	bne.n	8003e26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	4b18      	ldr	r3, [pc, #96]	@ (8003e34 <HAL_UART_MspInit+0x88>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	4a17      	ldr	r2, [pc, #92]	@ (8003e34 <HAL_UART_MspInit+0x88>)
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dde:	4b15      	ldr	r3, [pc, #84]	@ (8003e34 <HAL_UART_MspInit+0x88>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b11      	ldr	r3, [pc, #68]	@ (8003e34 <HAL_UART_MspInit+0x88>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	4a10      	ldr	r2, [pc, #64]	@ (8003e34 <HAL_UART_MspInit+0x88>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8003e34 <HAL_UART_MspInit+0x88>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003e06:	230c      	movs	r3, #12
 8003e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e12:	2303      	movs	r3, #3
 8003e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e16:	2307      	movs	r3, #7
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4805      	ldr	r0, [pc, #20]	@ (8003e38 <HAL_UART_MspInit+0x8c>)
 8003e22:	f000 fe4d 	bl	8004ac0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003e26:	bf00      	nop
 8003e28:	3728      	adds	r7, #40	@ 0x28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40004400 	.word	0x40004400
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40020000 	.word	0x40020000

08003e3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08c      	sub	sp, #48	@ 0x30
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	4b2e      	ldr	r3, [pc, #184]	@ (8003f0c <HAL_InitTick+0xd0>)
 8003e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e54:	4a2d      	ldr	r2, [pc, #180]	@ (8003f0c <HAL_InitTick+0xd0>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003f0c <HAL_InitTick+0xd0>)
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e68:	f107 020c 	add.w	r2, r7, #12
 8003e6c:	f107 0310 	add.w	r3, r7, #16
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 fa48 	bl	8005308 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003e78:	f001 fa32 	bl	80052e0 <HAL_RCC_GetPCLK2Freq>
 8003e7c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e80:	4a23      	ldr	r2, [pc, #140]	@ (8003f10 <HAL_InitTick+0xd4>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	0c9b      	lsrs	r3, r3, #18
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003e8c:	4b21      	ldr	r3, [pc, #132]	@ (8003f14 <HAL_InitTick+0xd8>)
 8003e8e:	4a22      	ldr	r2, [pc, #136]	@ (8003f18 <HAL_InitTick+0xdc>)
 8003e90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003e92:	4b20      	ldr	r3, [pc, #128]	@ (8003f14 <HAL_InitTick+0xd8>)
 8003e94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003e98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f14 <HAL_InitTick+0xd8>)
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f14 <HAL_InitTick+0xd8>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f14 <HAL_InitTick+0xd8>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eac:	4b19      	ldr	r3, [pc, #100]	@ (8003f14 <HAL_InitTick+0xd8>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003eb2:	4818      	ldr	r0, [pc, #96]	@ (8003f14 <HAL_InitTick+0xd8>)
 8003eb4:	f002 fcfa 	bl	80068ac <HAL_TIM_Base_Init>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11b      	bne.n	8003efe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003ec6:	4813      	ldr	r0, [pc, #76]	@ (8003f14 <HAL_InitTick+0xd8>)
 8003ec8:	f002 fd4a 	bl	8006960 <HAL_TIM_Base_Start_IT>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d111      	bne.n	8003efe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003eda:	2019      	movs	r0, #25
 8003edc:	f000 fde2 	bl	8004aa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b0f      	cmp	r3, #15
 8003ee4:	d808      	bhi.n	8003ef8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	2019      	movs	r0, #25
 8003eec:	f000 fdbe 	bl	8004a6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8003f1c <HAL_InitTick+0xe0>)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e002      	b.n	8003efe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003efe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3730      	adds	r7, #48	@ 0x30
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	431bde83 	.word	0x431bde83
 8003f14:	20000600 	.word	0x20000600
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	20000048 	.word	0x20000048

08003f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <NMI_Handler+0x4>

08003f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f2c:	bf00      	nop
 8003f2e:	e7fd      	b.n	8003f2c <HardFault_Handler+0x4>

08003f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f34:	bf00      	nop
 8003f36:	e7fd      	b.n	8003f34 <MemManage_Handler+0x4>

08003f38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f3c:	bf00      	nop
 8003f3e:	e7fd      	b.n	8003f3c <BusFault_Handler+0x4>

08003f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f44:	bf00      	nop
 8003f46:	e7fd      	b.n	8003f44 <UsageFault_Handler+0x4>

08003f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f56:	b480      	push	{r7}
 8003f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f72:	b480      	push	{r7}
 8003f74:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f84:	4802      	ldr	r0, [pc, #8]	@ (8003f90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003f86:	f002 fd5b 	bl	8006a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000600 	.word	0x20000600

08003f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return 1;
 8003f98:	2301      	movs	r3, #1
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <_kill>:

int _kill(int pid, int sig)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fae:	f004 f861 	bl	8008074 <__errno>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2216      	movs	r2, #22
 8003fb6:	601a      	str	r2, [r3, #0]
  return -1;
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <_exit>:

void _exit (int status)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ffe7 	bl	8003fa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fd6:	bf00      	nop
 8003fd8:	e7fd      	b.n	8003fd6 <_exit+0x12>

08003fda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	e00a      	b.n	8004002 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fec:	f3af 8000 	nop.w
 8003ff0:	4601      	mov	r1, r0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	60ba      	str	r2, [r7, #8]
 8003ff8:	b2ca      	uxtb	r2, r1
 8003ffa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3301      	adds	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	429a      	cmp	r2, r3
 8004008:	dbf0      	blt.n	8003fec <_read+0x12>
  }

  return len;
 800400a:	687b      	ldr	r3, [r7, #4]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	e009      	b.n	800403a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	60ba      	str	r2, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3301      	adds	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	429a      	cmp	r2, r3
 8004040:	dbf1      	blt.n	8004026 <_write+0x12>
  }
  return len;
 8004042:	687b      	ldr	r3, [r7, #4]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <_close>:

int _close(int file)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004074:	605a      	str	r2, [r3, #4]
  return 0;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <_isatty>:

int _isatty(int file)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800408c:	2301      	movs	r3, #1
}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040bc:	4a14      	ldr	r2, [pc, #80]	@ (8004110 <_sbrk+0x5c>)
 80040be:	4b15      	ldr	r3, [pc, #84]	@ (8004114 <_sbrk+0x60>)
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040c8:	4b13      	ldr	r3, [pc, #76]	@ (8004118 <_sbrk+0x64>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <_sbrk+0x64>)
 80040d2:	4a12      	ldr	r2, [pc, #72]	@ (800411c <_sbrk+0x68>)
 80040d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040d6:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <_sbrk+0x64>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d207      	bcs.n	80040f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040e4:	f003 ffc6 	bl	8008074 <__errno>
 80040e8:	4603      	mov	r3, r0
 80040ea:	220c      	movs	r2, #12
 80040ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295
 80040f2:	e009      	b.n	8004108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040f4:	4b08      	ldr	r3, [pc, #32]	@ (8004118 <_sbrk+0x64>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040fa:	4b07      	ldr	r3, [pc, #28]	@ (8004118 <_sbrk+0x64>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4413      	add	r3, r2
 8004102:	4a05      	ldr	r2, [pc, #20]	@ (8004118 <_sbrk+0x64>)
 8004104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004106:	68fb      	ldr	r3, [r7, #12]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20020000 	.word	0x20020000
 8004114:	00000400 	.word	0x00000400
 8004118:	20000648 	.word	0x20000648
 800411c:	200007a0 	.word	0x200007a0

08004120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004124:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <SystemInit+0x20>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	4a05      	ldr	r2, [pc, #20]	@ (8004140 <SystemInit+0x20>)
 800412c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <Reset_Handler>:
 8004144:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800417c <LoopFillZerobss+0x12>
 8004148:	480d      	ldr	r0, [pc, #52]	@ (8004180 <LoopFillZerobss+0x16>)
 800414a:	490e      	ldr	r1, [pc, #56]	@ (8004184 <LoopFillZerobss+0x1a>)
 800414c:	4a0e      	ldr	r2, [pc, #56]	@ (8004188 <LoopFillZerobss+0x1e>)
 800414e:	2300      	movs	r3, #0
 8004150:	e002      	b.n	8004158 <LoopCopyDataInit>

08004152 <CopyDataInit>:
 8004152:	58d4      	ldr	r4, [r2, r3]
 8004154:	50c4      	str	r4, [r0, r3]
 8004156:	3304      	adds	r3, #4

08004158 <LoopCopyDataInit>:
 8004158:	18c4      	adds	r4, r0, r3
 800415a:	428c      	cmp	r4, r1
 800415c:	d3f9      	bcc.n	8004152 <CopyDataInit>
 800415e:	4a0b      	ldr	r2, [pc, #44]	@ (800418c <LoopFillZerobss+0x22>)
 8004160:	4c0b      	ldr	r4, [pc, #44]	@ (8004190 <LoopFillZerobss+0x26>)
 8004162:	2300      	movs	r3, #0
 8004164:	e001      	b.n	800416a <LoopFillZerobss>

08004166 <FillZerobss>:
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	3204      	adds	r2, #4

0800416a <LoopFillZerobss>:
 800416a:	42a2      	cmp	r2, r4
 800416c:	d3fb      	bcc.n	8004166 <FillZerobss>
 800416e:	f7ff ffd7 	bl	8004120 <SystemInit>
 8004172:	f003 ff85 	bl	8008080 <__libc_init_array>
 8004176:	f7ff fafd 	bl	8003774 <main>
 800417a:	4770      	bx	lr
 800417c:	20020000 	.word	0x20020000
 8004180:	20000000 	.word	0x20000000
 8004184:	20000218 	.word	0x20000218
 8004188:	0800a478 	.word	0x0800a478
 800418c:	20000218 	.word	0x20000218
 8004190:	2000079c 	.word	0x2000079c

08004194 <ADC_IRQHandler>:
 8004194:	e7fe      	b.n	8004194 <ADC_IRQHandler>
	...

08004198 <HAL_Init>:
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
 800419c:	4b0e      	ldr	r3, [pc, #56]	@ (80041d8 <HAL_Init+0x40>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0d      	ldr	r2, [pc, #52]	@ (80041d8 <HAL_Init+0x40>)
 80041a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <HAL_Init+0x40>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0a      	ldr	r2, [pc, #40]	@ (80041d8 <HAL_Init+0x40>)
 80041ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b08      	ldr	r3, [pc, #32]	@ (80041d8 <HAL_Init+0x40>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a07      	ldr	r2, [pc, #28]	@ (80041d8 <HAL_Init+0x40>)
 80041ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	2003      	movs	r0, #3
 80041c2:	f000 fc48 	bl	8004a56 <HAL_NVIC_SetPriorityGrouping>
 80041c6:	200f      	movs	r0, #15
 80041c8:	f7ff fe38 	bl	8003e3c <HAL_InitTick>
 80041cc:	f7ff fcee 	bl	8003bac <HAL_MspInit>
 80041d0:	2300      	movs	r3, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023c00 	.word	0x40023c00

080041dc <HAL_IncTick>:
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
 80041e0:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <HAL_IncTick+0x20>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <HAL_IncTick+0x24>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4413      	add	r3, r2
 80041ec:	4a04      	ldr	r2, [pc, #16]	@ (8004200 <HAL_IncTick+0x24>)
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	2000004c 	.word	0x2000004c
 8004200:	2000064c 	.word	0x2000064c

08004204 <HAL_GetTick>:
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
 8004208:	4b03      	ldr	r3, [pc, #12]	@ (8004218 <HAL_GetTick+0x14>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	2000064c 	.word	0x2000064c

0800421c <HAL_Delay>:
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	f7ff ffee 	bl	8004204 <HAL_GetTick>
 8004228:	60b8      	str	r0, [r7, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d005      	beq.n	8004242 <HAL_Delay+0x26>
 8004236:	4b0a      	ldr	r3, [pc, #40]	@ (8004260 <HAL_Delay+0x44>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	bf00      	nop
 8004244:	f7ff ffde 	bl	8004204 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	429a      	cmp	r2, r3
 8004252:	d8f7      	bhi.n	8004244 <HAL_Delay+0x28>
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	2000004c 	.word	0x2000004c

08004264 <HAL_CAN_Init>:
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_CAN_Init+0x12>
 8004272:	2301      	movs	r3, #1
 8004274:	e0ed      	b.n	8004452 <HAL_CAN_Init+0x1ee>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <HAL_CAN_Init+0x24>
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fcba 	bl	8003bfc <HAL_CAN_MspInit>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f7ff ffb4 	bl	8004204 <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	e012      	b.n	80042c6 <HAL_CAN_Init+0x62>
 80042a0:	f7ff ffb0 	bl	8004204 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b0a      	cmp	r3, #10
 80042ac:	d90b      	bls.n	80042c6 <HAL_CAN_Init+0x62>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2205      	movs	r2, #5
 80042be:	f883 2020 	strb.w	r2, [r3, #32]
 80042c2:	2301      	movs	r3, #1
 80042c4:	e0c5      	b.n	8004452 <HAL_CAN_Init+0x1ee>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0e5      	beq.n	80042a0 <HAL_CAN_Init+0x3c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0202 	bic.w	r2, r2, #2
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	f7ff ff8e 	bl	8004204 <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	e012      	b.n	8004312 <HAL_CAN_Init+0xae>
 80042ec:	f7ff ff8a 	bl	8004204 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b0a      	cmp	r3, #10
 80042f8:	d90b      	bls.n	8004312 <HAL_CAN_Init+0xae>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	625a      	str	r2, [r3, #36]	@ 0x24
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2205      	movs	r2, #5
 800430a:	f883 2020 	strb.w	r2, [r3, #32]
 800430e:	2301      	movs	r3, #1
 8004310:	e09f      	b.n	8004452 <HAL_CAN_Init+0x1ee>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e5      	bne.n	80042ec <HAL_CAN_Init+0x88>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	7e1b      	ldrb	r3, [r3, #24]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d108      	bne.n	800433a <HAL_CAN_Init+0xd6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e007      	b.n	800434a <HAL_CAN_Init+0xe6>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	7e5b      	ldrb	r3, [r3, #25]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d108      	bne.n	8004364 <HAL_CAN_Init+0x100>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e007      	b.n	8004374 <HAL_CAN_Init+0x110>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	7e9b      	ldrb	r3, [r3, #26]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d108      	bne.n	800438e <HAL_CAN_Init+0x12a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0220 	orr.w	r2, r2, #32
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e007      	b.n	800439e <HAL_CAN_Init+0x13a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0220 	bic.w	r2, r2, #32
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	7edb      	ldrb	r3, [r3, #27]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d108      	bne.n	80043b8 <HAL_CAN_Init+0x154>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0210 	bic.w	r2, r2, #16
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e007      	b.n	80043c8 <HAL_CAN_Init+0x164>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0210 	orr.w	r2, r2, #16
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	7f1b      	ldrb	r3, [r3, #28]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d108      	bne.n	80043e2 <HAL_CAN_Init+0x17e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0208 	orr.w	r2, r2, #8
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e007      	b.n	80043f2 <HAL_CAN_Init+0x18e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0208 	bic.w	r2, r2, #8
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	7f5b      	ldrb	r3, [r3, #29]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d108      	bne.n	800440c <HAL_CAN_Init+0x1a8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0204 	orr.w	r2, r2, #4
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	e007      	b.n	800441c <HAL_CAN_Init+0x1b8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0204 	bic.w	r2, r2, #4
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	ea42 0103 	orr.w	r1, r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	61da      	str	r2, [r3, #28]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	625a      	str	r2, [r3, #36]	@ 0x24
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2020 	strb.w	r2, [r3, #32]
 8004450:	2300      	movs	r3, #0
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <HAL_CAN_ConfigFilter>:
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004472:	74fb      	strb	r3, [r7, #19]
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d003      	beq.n	8004482 <HAL_CAN_ConfigFilter+0x26>
 800447a:	7cfb      	ldrb	r3, [r7, #19]
 800447c:	2b02      	cmp	r3, #2
 800447e:	f040 80be 	bne.w	80045fe <HAL_CAN_ConfigFilter+0x1a2>
 8004482:	4b65      	ldr	r3, [pc, #404]	@ (8004618 <HAL_CAN_ConfigFilter+0x1bc>)
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800449c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	431a      	orrs	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	2201      	movs	r2, #1
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	401a      	ands	r2, r3
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d123      	bne.n	800452c <HAL_CAN_ConfigFilter+0xd0>
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	401a      	ands	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	0419      	lsls	r1, r3, #16
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	b29b      	uxth	r3, r3
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	6952      	ldr	r2, [r2, #20]
 8004506:	4319      	orrs	r1, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3248      	adds	r2, #72	@ 0x48
 800450c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	0419      	lsls	r1, r3, #16
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	b29a      	uxth	r2, r3
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	430a      	orrs	r2, r1
 8004522:	6979      	ldr	r1, [r7, #20]
 8004524:	3348      	adds	r3, #72	@ 0x48
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	440b      	add	r3, r1
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d122      	bne.n	800457a <HAL_CAN_ConfigFilter+0x11e>
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	431a      	orrs	r2, r3
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	0419      	lsls	r1, r3, #16
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	b29b      	uxth	r3, r3
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	6952      	ldr	r2, [r2, #20]
 8004554:	4319      	orrs	r1, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	3248      	adds	r2, #72	@ 0x48
 800455a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0419      	lsls	r1, r3, #16
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	b29a      	uxth	r2, r3
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	430a      	orrs	r2, r1
 8004570:	6979      	ldr	r1, [r7, #20]
 8004572:	3348      	adds	r3, #72	@ 0x48
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	440b      	add	r3, r1
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_CAN_ConfigFilter+0x13a>
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	43db      	mvns	r3, r3
 800458c:	401a      	ands	r2, r3
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004594:	e007      	b.n	80045a6 <HAL_CAN_ConfigFilter+0x14a>
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	431a      	orrs	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <HAL_CAN_ConfigFilter+0x166>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	401a      	ands	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80045c0:	e007      	b.n	80045d2 <HAL_CAN_ConfigFilter+0x176>
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d107      	bne.n	80045ea <HAL_CAN_ConfigFilter+0x18e>
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80045f0:	f023 0201 	bic.w	r2, r3, #1
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 80045fa:	2300      	movs	r3, #0
 80045fc:	e006      	b.n	800460c <HAL_CAN_ConfigFilter+0x1b0>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	625a      	str	r2, [r3, #36]	@ 0x24
 800460a:	2301      	movs	r3, #1
 800460c:	4618      	mov	r0, r3
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40006400 	.word	0x40006400

0800461c <HAL_CAN_Start>:
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d12e      	bne.n	800468e <HAL_CAN_Start+0x72>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 2020 	strb.w	r2, [r3, #32]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f7ff fddc 	bl	8004204 <HAL_GetTick>
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	e012      	b.n	8004676 <HAL_CAN_Start+0x5a>
 8004650:	f7ff fdd8 	bl	8004204 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b0a      	cmp	r3, #10
 800465c:	d90b      	bls.n	8004676 <HAL_CAN_Start+0x5a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	625a      	str	r2, [r3, #36]	@ 0x24
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2205      	movs	r2, #5
 800466e:	f883 2020 	strb.w	r2, [r3, #32]
 8004672:	2301      	movs	r3, #1
 8004674:	e012      	b.n	800469c <HAL_CAN_Start+0x80>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e5      	bne.n	8004650 <HAL_CAN_Start+0x34>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	625a      	str	r2, [r3, #36]	@ 0x24
 800468a:	2300      	movs	r3, #0
 800468c:	e006      	b.n	800469c <HAL_CAN_Start+0x80>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	625a      	str	r2, [r3, #36]	@ 0x24
 800469a:	2301      	movs	r3, #1
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_CAN_AddTxMessage>:
 80046a4:	b480      	push	{r7}
 80046a6:	b089      	sub	sp, #36	@ 0x24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	7ffb      	ldrb	r3, [r7, #31]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d003      	beq.n	80046d0 <HAL_CAN_AddTxMessage+0x2c>
 80046c8:	7ffb      	ldrb	r3, [r7, #31]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	f040 80ad 	bne.w	800482a <HAL_CAN_AddTxMessage+0x186>
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <HAL_CAN_AddTxMessage+0x4c>
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <HAL_CAN_AddTxMessage+0x4c>
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8095 	beq.w	800481a <HAL_CAN_AddTxMessage+0x176>
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	0e1b      	lsrs	r3, r3, #24
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	2201      	movs	r2, #1
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	409a      	lsls	r2, r3
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10d      	bne.n	8004728 <HAL_CAN_AddTxMessage+0x84>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	055a      	lsls	r2, r3, #21
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	68f9      	ldr	r1, [r7, #12]
 8004718:	6809      	ldr	r1, [r1, #0]
 800471a:	431a      	orrs	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	3318      	adds	r3, #24
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	440b      	add	r3, r1
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e00f      	b.n	8004748 <HAL_CAN_AddTxMessage+0xa4>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	00da      	lsls	r2, r3, #3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	431a      	orrs	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	68f9      	ldr	r1, [r7, #12]
 800473a:	6809      	ldr	r1, [r1, #0]
 800473c:	431a      	orrs	r2, r3
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	3318      	adds	r3, #24
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	440b      	add	r3, r1
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6819      	ldr	r1, [r3, #0]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	3318      	adds	r3, #24
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	440b      	add	r3, r1
 8004758:	3304      	adds	r3, #4
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	7d1b      	ldrb	r3, [r3, #20]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d111      	bne.n	8004788 <HAL_CAN_AddTxMessage+0xe4>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	3318      	adds	r3, #24
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	4413      	add	r3, r2
 8004770:	3304      	adds	r3, #4
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	6811      	ldr	r1, [r2, #0]
 8004778:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3318      	adds	r3, #24
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	440b      	add	r3, r1
 8004784:	3304      	adds	r3, #4
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3307      	adds	r3, #7
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	061a      	lsls	r2, r3, #24
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3306      	adds	r3, #6
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	041b      	lsls	r3, r3, #16
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3305      	adds	r3, #5
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	4313      	orrs	r3, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	3204      	adds	r2, #4
 80047a8:	7812      	ldrb	r2, [r2, #0]
 80047aa:	4610      	mov	r0, r2
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	6811      	ldr	r1, [r2, #0]
 80047b0:	ea43 0200 	orr.w	r2, r3, r0
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	440b      	add	r3, r1
 80047ba:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3303      	adds	r3, #3
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	061a      	lsls	r2, r3, #24
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3302      	adds	r3, #2
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3301      	adds	r3, #1
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	021b      	lsls	r3, r3, #8
 80047da:	4313      	orrs	r3, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	7812      	ldrb	r2, [r2, #0]
 80047e0:	4610      	mov	r0, r2
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	6811      	ldr	r1, [r2, #0]
 80047e6:	ea43 0200 	orr.w	r2, r3, r0
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	440b      	add	r3, r1
 80047f0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	3318      	adds	r3, #24
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	4413      	add	r3, r2
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	6811      	ldr	r1, [r2, #0]
 8004808:	f043 0201 	orr.w	r2, r3, #1
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	3318      	adds	r3, #24
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	440b      	add	r3, r1
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	2300      	movs	r3, #0
 8004818:	e00e      	b.n	8004838 <HAL_CAN_AddTxMessage+0x194>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	625a      	str	r2, [r3, #36]	@ 0x24
 8004826:	2301      	movs	r3, #1
 8004828:	e006      	b.n	8004838 <HAL_CAN_AddTxMessage+0x194>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	625a      	str	r2, [r3, #36]	@ 0x24
 8004836:	2301      	movs	r3, #1
 8004838:	4618      	mov	r0, r3
 800483a:	3724      	adds	r7, #36	@ 0x24
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_CAN_GetTxMailboxesFreeLevel>:
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004856:	72fb      	strb	r3, [r7, #11]
 8004858:	7afb      	ldrb	r3, [r7, #11]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d002      	beq.n	8004864 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800485e:	7afb      	ldrb	r3, [r7, #11]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d11d      	bne.n	80048a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3301      	adds	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3301      	adds	r3, #1
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <HAL_CAN_ActivateNotification>:
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048be:	73fb      	strb	r3, [r7, #15]
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d002      	beq.n	80048cc <HAL_CAN_ActivateNotification+0x1e>
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d109      	bne.n	80048e0 <HAL_CAN_ActivateNotification+0x32>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6959      	ldr	r1, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	615a      	str	r2, [r3, #20]
 80048dc:	2300      	movs	r3, #0
 80048de:	e006      	b.n	80048ee <HAL_CAN_ActivateNotification+0x40>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80048ec:	2301      	movs	r3, #1
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <__NVIC_SetPriorityGrouping>:
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	4b0c      	ldr	r3, [pc, #48]	@ (8004940 <__NVIC_SetPriorityGrouping+0x44>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004918:	4013      	ands	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	021a      	lsls	r2, r3, #8
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	4a04      	ldr	r2, [pc, #16]	@ (8004940 <__NVIC_SetPriorityGrouping+0x44>)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	60d3      	str	r3, [r2, #12]
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	e000ed00 	.word	0xe000ed00

08004944 <__NVIC_GetPriorityGrouping>:
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
 8004948:	4b04      	ldr	r3, [pc, #16]	@ (800495c <__NVIC_GetPriorityGrouping+0x18>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	4618      	mov	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	e000ed00 	.word	0xe000ed00

08004960 <__NVIC_EnableIRQ>:
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
 800496a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496e:	2b00      	cmp	r3, #0
 8004970:	db0b      	blt.n	800498a <__NVIC_EnableIRQ+0x2a>
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	f003 021f 	and.w	r2, r3, #31
 8004978:	4907      	ldr	r1, [pc, #28]	@ (8004998 <__NVIC_EnableIRQ+0x38>)
 800497a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	2001      	movs	r0, #1
 8004982:	fa00 f202 	lsl.w	r2, r0, r2
 8004986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	e000e100 	.word	0xe000e100

0800499c <__NVIC_SetPriority>:
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	6039      	str	r1, [r7, #0]
 80049a6:	71fb      	strb	r3, [r7, #7]
 80049a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	db0a      	blt.n	80049c6 <__NVIC_SetPriority+0x2a>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	490c      	ldr	r1, [pc, #48]	@ (80049e8 <__NVIC_SetPriority+0x4c>)
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	0112      	lsls	r2, r2, #4
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	440b      	add	r3, r1
 80049c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 80049c4:	e00a      	b.n	80049dc <__NVIC_SetPriority+0x40>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	4908      	ldr	r1, [pc, #32]	@ (80049ec <__NVIC_SetPriority+0x50>)
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	3b04      	subs	r3, #4
 80049d4:	0112      	lsls	r2, r2, #4
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	440b      	add	r3, r1
 80049da:	761a      	strb	r2, [r3, #24]
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	e000e100 	.word	0xe000e100
 80049ec:	e000ed00 	.word	0xe000ed00

080049f0 <NVIC_EncodePriority>:
 80049f0:	b480      	push	{r7}
 80049f2:	b089      	sub	sp, #36	@ 0x24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f1c3 0307 	rsb	r3, r3, #7
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	bf28      	it	cs
 8004a0e:	2304      	movcs	r3, #4
 8004a10:	61bb      	str	r3, [r7, #24]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3304      	adds	r3, #4
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d902      	bls.n	8004a20 <NVIC_EncodePriority+0x30>
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3b03      	subs	r3, #3
 8004a1e:	e000      	b.n	8004a22 <NVIC_EncodePriority+0x32>
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	f04f 32ff 	mov.w	r2, #4294967295
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	401a      	ands	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	409a      	lsls	r2, r3
 8004a38:	f04f 31ff 	mov.w	r1, #4294967295
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	43d9      	mvns	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	400b      	ands	r3, r1
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3724      	adds	r7, #36	@ 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_NVIC_SetPriorityGrouping>:
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff ff4c 	bl	80048fc <__NVIC_SetPriorityGrouping>
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_NVIC_SetPriority>:
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	73fb      	strb	r3, [r7, #15]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	f7ff ff61 	bl	8004944 <__NVIC_GetPriorityGrouping>
 8004a82:	6178      	str	r0, [r7, #20]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	6978      	ldr	r0, [r7, #20]
 8004a8a:	f7ff ffb1 	bl	80049f0 <NVIC_EncodePriority>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff ff80 	bl	800499c <__NVIC_SetPriority>
 8004a9c:	bf00      	nop
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_NVIC_EnableIRQ>:
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	71fb      	strb	r3, [r7, #7]
 8004aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff ff54 	bl	8004960 <__NVIC_EnableIRQ>
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_GPIO_Init>:
 8004ac0:	b480      	push	{r7}
 8004ac2:	b089      	sub	sp, #36	@ 0x24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61fb      	str	r3, [r7, #28]
 8004ada:	e165      	b.n	8004da8 <HAL_GPIO_Init+0x2e8>
 8004adc:	2201      	movs	r2, #1
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4013      	ands	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	f040 8154 	bne.w	8004da2 <HAL_GPIO_Init+0x2e2>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d005      	beq.n	8004b12 <HAL_GPIO_Init+0x52>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d130      	bne.n	8004b74 <HAL_GPIO_Init+0xb4>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	61bb      	str	r3, [r7, #24]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4013      	ands	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	609a      	str	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 0201 	and.w	r2, r3, #1
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	605a      	str	r2, [r3, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d017      	beq.n	8004bb0 <HAL_GPIO_Init+0xf0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	61bb      	str	r3, [r7, #24]
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4013      	ands	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	60da      	str	r2, [r3, #12]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d123      	bne.n	8004c04 <HAL_GPIO_Init+0x144>
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	08da      	lsrs	r2, r3, #3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3208      	adds	r2, #8
 8004bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	220f      	movs	r2, #15
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	08da      	lsrs	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3208      	adds	r2, #8
 8004bfe:	69b9      	ldr	r1, [r7, #24]
 8004c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	2203      	movs	r2, #3
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 0203 	and.w	r2, r3, #3
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 80ae 	beq.w	8004da2 <HAL_GPIO_Init+0x2e2>
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	4b5d      	ldr	r3, [pc, #372]	@ (8004dc0 <HAL_GPIO_Init+0x300>)
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4e:	4a5c      	ldr	r2, [pc, #368]	@ (8004dc0 <HAL_GPIO_Init+0x300>)
 8004c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c56:	4b5a      	ldr	r3, [pc, #360]	@ (8004dc0 <HAL_GPIO_Init+0x300>)
 8004c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a58      	ldr	r2, [pc, #352]	@ (8004dc4 <HAL_GPIO_Init+0x304>)
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	089b      	lsrs	r3, r3, #2
 8004c68:	3302      	adds	r3, #2
 8004c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	220f      	movs	r2, #15
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4013      	ands	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a4f      	ldr	r2, [pc, #316]	@ (8004dc8 <HAL_GPIO_Init+0x308>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d025      	beq.n	8004cda <HAL_GPIO_Init+0x21a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a4e      	ldr	r2, [pc, #312]	@ (8004dcc <HAL_GPIO_Init+0x30c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01f      	beq.n	8004cd6 <HAL_GPIO_Init+0x216>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a4d      	ldr	r2, [pc, #308]	@ (8004dd0 <HAL_GPIO_Init+0x310>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d019      	beq.n	8004cd2 <HAL_GPIO_Init+0x212>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a4c      	ldr	r2, [pc, #304]	@ (8004dd4 <HAL_GPIO_Init+0x314>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <HAL_GPIO_Init+0x20e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a4b      	ldr	r2, [pc, #300]	@ (8004dd8 <HAL_GPIO_Init+0x318>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00d      	beq.n	8004cca <HAL_GPIO_Init+0x20a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a4a      	ldr	r2, [pc, #296]	@ (8004ddc <HAL_GPIO_Init+0x31c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d007      	beq.n	8004cc6 <HAL_GPIO_Init+0x206>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a49      	ldr	r2, [pc, #292]	@ (8004de0 <HAL_GPIO_Init+0x320>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d101      	bne.n	8004cc2 <HAL_GPIO_Init+0x202>
 8004cbe:	2306      	movs	r3, #6
 8004cc0:	e00c      	b.n	8004cdc <HAL_GPIO_Init+0x21c>
 8004cc2:	2307      	movs	r3, #7
 8004cc4:	e00a      	b.n	8004cdc <HAL_GPIO_Init+0x21c>
 8004cc6:	2305      	movs	r3, #5
 8004cc8:	e008      	b.n	8004cdc <HAL_GPIO_Init+0x21c>
 8004cca:	2304      	movs	r3, #4
 8004ccc:	e006      	b.n	8004cdc <HAL_GPIO_Init+0x21c>
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e004      	b.n	8004cdc <HAL_GPIO_Init+0x21c>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e002      	b.n	8004cdc <HAL_GPIO_Init+0x21c>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <HAL_GPIO_Init+0x21c>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	f002 0203 	and.w	r2, r2, #3
 8004ce2:	0092      	lsls	r2, r2, #2
 8004ce4:	4093      	lsls	r3, r2
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
 8004cec:	4935      	ldr	r1, [pc, #212]	@ (8004dc4 <HAL_GPIO_Init+0x304>)
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	089b      	lsrs	r3, r3, #2
 8004cf2:	3302      	adds	r3, #2
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8004de4 <HAL_GPIO_Init+0x324>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	43db      	mvns	r3, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4013      	ands	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_GPIO_Init+0x25e>
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	4a31      	ldr	r2, [pc, #196]	@ (8004de4 <HAL_GPIO_Init+0x324>)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	6093      	str	r3, [r2, #8]
 8004d24:	4b2f      	ldr	r3, [pc, #188]	@ (8004de4 <HAL_GPIO_Init+0x324>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4013      	ands	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_GPIO_Init+0x288>
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
 8004d48:	4a26      	ldr	r2, [pc, #152]	@ (8004de4 <HAL_GPIO_Init+0x324>)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	60d3      	str	r3, [r2, #12]
 8004d4e:	4b25      	ldr	r3, [pc, #148]	@ (8004de4 <HAL_GPIO_Init+0x324>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	43db      	mvns	r3, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_GPIO_Init+0x2b2>
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	4a1c      	ldr	r2, [pc, #112]	@ (8004de4 <HAL_GPIO_Init+0x324>)
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	6053      	str	r3, [r2, #4]
 8004d78:	4b1a      	ldr	r3, [pc, #104]	@ (8004de4 <HAL_GPIO_Init+0x324>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	61bb      	str	r3, [r7, #24]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x2dc>
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	4a11      	ldr	r2, [pc, #68]	@ (8004de4 <HAL_GPIO_Init+0x324>)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	3301      	adds	r3, #1
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	2b0f      	cmp	r3, #15
 8004dac:	f67f ae96 	bls.w	8004adc <HAL_GPIO_Init+0x1c>
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	3724      	adds	r7, #36	@ 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	40013800 	.word	0x40013800
 8004dc8:	40020000 	.word	0x40020000
 8004dcc:	40020400 	.word	0x40020400
 8004dd0:	40020800 	.word	0x40020800
 8004dd4:	40020c00 	.word	0x40020c00
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	40021400 	.word	0x40021400
 8004de0:	40021800 	.word	0x40021800
 8004de4:	40013c00 	.word	0x40013c00

08004de8 <HAL_GPIO_ReadPin>:
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	807b      	strh	r3, [r7, #2]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_GPIO_ReadPin+0x1e>
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
 8004e04:	e001      	b.n	8004e0a <HAL_GPIO_ReadPin+0x22>
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_GPIO_WritePin>:
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	807b      	strh	r3, [r7, #2]
 8004e24:	4613      	mov	r3, r2
 8004e26:	707b      	strb	r3, [r7, #1]
 8004e28:	787b      	ldrb	r3, [r7, #1]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_GPIO_WritePin+0x1e>
 8004e2e:	887a      	ldrh	r2, [r7, #2]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	619a      	str	r2, [r3, #24]
 8004e34:	e003      	b.n	8004e3e <HAL_GPIO_WritePin+0x26>
 8004e36:	887b      	ldrh	r3, [r7, #2]
 8004e38:	041a      	lsls	r2, r3, #16
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	619a      	str	r2, [r3, #24]
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <HAL_I2C_Init>:
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_I2C_Init+0x12>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e12b      	b.n	80050b6 <HAL_I2C_Init+0x26a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_I2C_Init+0x2c>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fe ff0a 	bl	8003c8c <HAL_I2C_MspInit>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2224      	movs	r2, #36	@ 0x24
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	f000 fa02 	bl	80052b8 <HAL_RCC_GetPCLK1Freq>
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	4a81      	ldr	r2, [pc, #516]	@ (80050c0 <HAL_I2C_Init+0x274>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d807      	bhi.n	8004ed0 <HAL_I2C_Init+0x84>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a80      	ldr	r2, [pc, #512]	@ (80050c4 <HAL_I2C_Init+0x278>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	bf94      	ite	ls
 8004ec8:	2301      	movls	r3, #1
 8004eca:	2300      	movhi	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	e006      	b.n	8004ede <HAL_I2C_Init+0x92>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a7d      	ldr	r2, [pc, #500]	@ (80050c8 <HAL_I2C_Init+0x27c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	bf94      	ite	ls
 8004ed8:	2301      	movls	r3, #1
 8004eda:	2300      	movhi	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_I2C_Init+0x9a>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e0e7      	b.n	80050b6 <HAL_I2C_Init+0x26a>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a78      	ldr	r2, [pc, #480]	@ (80050cc <HAL_I2C_Init+0x280>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	0c9b      	lsrs	r3, r3, #18
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	4a6a      	ldr	r2, [pc, #424]	@ (80050c0 <HAL_I2C_Init+0x274>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d802      	bhi.n	8004f20 <HAL_I2C_Init+0xd4>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	e009      	b.n	8004f34 <HAL_I2C_Init+0xe8>
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	4a69      	ldr	r2, [pc, #420]	@ (80050d0 <HAL_I2C_Init+0x284>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	099b      	lsrs	r3, r3, #6
 8004f32:	3301      	adds	r3, #1
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6213      	str	r3, [r2, #32]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	495c      	ldr	r1, [pc, #368]	@ (80050c0 <HAL_I2C_Init+0x274>)
 8004f50:	428b      	cmp	r3, r1
 8004f52:	d819      	bhi.n	8004f88 <HAL_I2C_Init+0x13c>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	1e59      	subs	r1, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f62:	1c59      	adds	r1, r3, #1
 8004f64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f68:	400b      	ands	r3, r1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_I2C_Init+0x138>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1e59      	subs	r1, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f82:	e051      	b.n	8005028 <HAL_I2C_Init+0x1dc>
 8004f84:	2304      	movs	r3, #4
 8004f86:	e04f      	b.n	8005028 <HAL_I2C_Init+0x1dc>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d111      	bne.n	8004fb4 <HAL_I2C_Init+0x168>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	1e58      	subs	r0, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6859      	ldr	r1, [r3, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	440b      	add	r3, r1
 8004f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	e012      	b.n	8004fda <HAL_I2C_Init+0x18e>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	1e58      	subs	r0, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6859      	ldr	r1, [r3, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	0099      	lsls	r1, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fca:	3301      	adds	r3, #1
 8004fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_I2C_Init+0x196>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e022      	b.n	8005028 <HAL_I2C_Init+0x1dc>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10e      	bne.n	8005008 <HAL_I2C_Init+0x1bc>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1e58      	subs	r0, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6859      	ldr	r1, [r3, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	440b      	add	r3, r1
 8004ff8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005006:	e00f      	b.n	8005028 <HAL_I2C_Init+0x1dc>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1e58      	subs	r0, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6859      	ldr	r1, [r3, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	0099      	lsls	r1, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	fbb0 f3f3 	udiv	r3, r0, r3
 800501e:	3301      	adds	r3, #1
 8005020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005024:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	6809      	ldr	r1, [r1, #0]
 800502c:	4313      	orrs	r3, r2
 800502e:	61cb      	str	r3, [r1, #28]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005056:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6911      	ldr	r1, [r2, #16]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68d2      	ldr	r2, [r2, #12]
 8005062:	4311      	orrs	r1, r2
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	430b      	orrs	r3, r1
 800506a:	6093      	str	r3, [r2, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695a      	ldr	r2, [r3, #20]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	60da      	str	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	@ 0x40
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b4:	2300      	movs	r3, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	000186a0 	.word	0x000186a0
 80050c4:	001e847f 	.word	0x001e847f
 80050c8:	003d08ff 	.word	0x003d08ff
 80050cc:	431bde83 	.word	0x431bde83
 80050d0:	10624dd3 	.word	0x10624dd3

080050d4 <HAL_RCC_ClockConfig>:
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_RCC_ClockConfig+0x14>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0cc      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
 80050e8:	4b68      	ldr	r3, [pc, #416]	@ (800528c <HAL_RCC_ClockConfig+0x1b8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d90c      	bls.n	8005110 <HAL_RCC_ClockConfig+0x3c>
 80050f6:	4b65      	ldr	r3, [pc, #404]	@ (800528c <HAL_RCC_ClockConfig+0x1b8>)
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	4b63      	ldr	r3, [pc, #396]	@ (800528c <HAL_RCC_ClockConfig+0x1b8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d001      	beq.n	8005110 <HAL_RCC_ClockConfig+0x3c>
 800510c:	2301      	movs	r3, #1
 800510e:	e0b8      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d020      	beq.n	800515e <HAL_RCC_ClockConfig+0x8a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_RCC_ClockConfig+0x60>
 8005128:	4b59      	ldr	r3, [pc, #356]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	4a58      	ldr	r2, [pc, #352]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005132:	6093      	str	r3, [r2, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_RCC_ClockConfig+0x78>
 8005140:	4b53      	ldr	r3, [pc, #332]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4a52      	ldr	r2, [pc, #328]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800514a:	6093      	str	r3, [r2, #8]
 800514c:	4b50      	ldr	r3, [pc, #320]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	494d      	ldr	r1, [pc, #308]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d044      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x120>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d107      	bne.n	8005182 <HAL_RCC_ClockConfig+0xae>
 8005172:	4b47      	ldr	r3, [pc, #284]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d119      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xde>
 800517e:	2301      	movs	r3, #1
 8005180:	e07f      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d003      	beq.n	8005192 <HAL_RCC_ClockConfig+0xbe>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b03      	cmp	r3, #3
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xce>
 8005192:	4b3f      	ldr	r3, [pc, #252]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xde>
 800519e:	2301      	movs	r3, #1
 80051a0:	e06f      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
 80051a2:	4b3b      	ldr	r3, [pc, #236]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xde>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e067      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
 80051b2:	4b37      	ldr	r3, [pc, #220]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f023 0203 	bic.w	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4934      	ldr	r1, [pc, #208]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	608b      	str	r3, [r1, #8]
 80051c4:	f7ff f81e 	bl	8004204 <HAL_GetTick>
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_ClockConfig+0x10e>
 80051cc:	f7ff f81a 	bl	8004204 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x10e>
 80051de:	2303      	movs	r3, #3
 80051e0:	e04f      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
 80051e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 020c 	and.w	r2, r3, #12
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d1eb      	bne.n	80051cc <HAL_RCC_ClockConfig+0xf8>
 80051f4:	4b25      	ldr	r3, [pc, #148]	@ (800528c <HAL_RCC_ClockConfig+0x1b8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d20c      	bcs.n	800521c <HAL_RCC_ClockConfig+0x148>
 8005202:	4b22      	ldr	r3, [pc, #136]	@ (800528c <HAL_RCC_ClockConfig+0x1b8>)
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	4b20      	ldr	r3, [pc, #128]	@ (800528c <HAL_RCC_ClockConfig+0x1b8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d001      	beq.n	800521c <HAL_RCC_ClockConfig+0x148>
 8005218:	2301      	movs	r3, #1
 800521a:	e032      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <HAL_RCC_ClockConfig+0x166>
 8005228:	4b19      	ldr	r3, [pc, #100]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4916      	ldr	r1, [pc, #88]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005236:	4313      	orrs	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <HAL_RCC_ClockConfig+0x186>
 8005246:	4b12      	ldr	r3, [pc, #72]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	490e      	ldr	r1, [pc, #56]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
 800525a:	f000 f887 	bl	800536c <HAL_RCC_GetSysClockFreq>
 800525e:	4602      	mov	r2, r0
 8005260:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	490a      	ldr	r1, [pc, #40]	@ (8005294 <HAL_RCC_ClockConfig+0x1c0>)
 800526c:	5ccb      	ldrb	r3, [r1, r3]
 800526e:	fa22 f303 	lsr.w	r3, r2, r3
 8005272:	4a09      	ldr	r2, [pc, #36]	@ (8005298 <HAL_RCC_ClockConfig+0x1c4>)
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	4b09      	ldr	r3, [pc, #36]	@ (800529c <HAL_RCC_ClockConfig+0x1c8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe fdde 	bl	8003e3c <HAL_InitTick>
 8005280:	2300      	movs	r3, #0
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40023c00 	.word	0x40023c00
 8005290:	40023800 	.word	0x40023800
 8005294:	0800a0e0 	.word	0x0800a0e0
 8005298:	20000044 	.word	0x20000044
 800529c:	20000048 	.word	0x20000048

080052a0 <HAL_RCC_GetHCLKFreq>:
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	4b03      	ldr	r3, [pc, #12]	@ (80052b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000044 	.word	0x20000044

080052b8 <HAL_RCC_GetPCLK1Freq>:
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	f7ff fff0 	bl	80052a0 <HAL_RCC_GetHCLKFreq>
 80052c0:	4602      	mov	r2, r0
 80052c2:	4b05      	ldr	r3, [pc, #20]	@ (80052d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	0a9b      	lsrs	r3, r3, #10
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	4903      	ldr	r1, [pc, #12]	@ (80052dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ce:	5ccb      	ldrb	r3, [r1, r3]
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
 80052d4:	4618      	mov	r0, r3
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40023800 	.word	0x40023800
 80052dc:	0800a0f0 	.word	0x0800a0f0

080052e0 <HAL_RCC_GetPCLK2Freq>:
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	f7ff ffdc 	bl	80052a0 <HAL_RCC_GetHCLKFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b05      	ldr	r3, [pc, #20]	@ (8005300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	0b5b      	lsrs	r3, r3, #13
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4903      	ldr	r1, [pc, #12]	@ (8005304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40023800 	.word	0x40023800
 8005304:	0800a0f0 	.word	0x0800a0f0

08005308 <HAL_RCC_GetClockConfig>:
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	220f      	movs	r2, #15
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	4b12      	ldr	r3, [pc, #72]	@ (8005364 <HAL_RCC_GetClockConfig+0x5c>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0203 	and.w	r2, r3, #3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	605a      	str	r2, [r3, #4]
 8005324:	4b0f      	ldr	r3, [pc, #60]	@ (8005364 <HAL_RCC_GetClockConfig+0x5c>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	4b0c      	ldr	r3, [pc, #48]	@ (8005364 <HAL_RCC_GetClockConfig+0x5c>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	4b09      	ldr	r3, [pc, #36]	@ (8005364 <HAL_RCC_GetClockConfig+0x5c>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	08db      	lsrs	r3, r3, #3
 8005342:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	611a      	str	r2, [r3, #16]
 800534a:	4b07      	ldr	r3, [pc, #28]	@ (8005368 <HAL_RCC_GetClockConfig+0x60>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 020f 	and.w	r2, r3, #15
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40023800 	.word	0x40023800
 8005368:	40023c00 	.word	0x40023c00

0800536c <HAL_RCC_GetSysClockFreq>:
 800536c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005370:	b0ae      	sub	sp, #184	@ 0xb8
 8005372:	af00      	add	r7, sp, #0
 8005374:	2300      	movs	r3, #0
 8005376:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800537a:	2300      	movs	r3, #0
 800537c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005380:	2300      	movs	r3, #0
 8005382:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005386:	2300      	movs	r3, #0
 8005388:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800538c:	2300      	movs	r3, #0
 800538e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005392:	4bcb      	ldr	r3, [pc, #812]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
 800539a:	2b0c      	cmp	r3, #12
 800539c:	f200 8206 	bhi.w	80057ac <HAL_RCC_GetSysClockFreq+0x440>
 80053a0:	a201      	add	r2, pc, #4	@ (adr r2, 80053a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	080053dd 	.word	0x080053dd
 80053ac:	080057ad 	.word	0x080057ad
 80053b0:	080057ad 	.word	0x080057ad
 80053b4:	080057ad 	.word	0x080057ad
 80053b8:	080053e5 	.word	0x080053e5
 80053bc:	080057ad 	.word	0x080057ad
 80053c0:	080057ad 	.word	0x080057ad
 80053c4:	080057ad 	.word	0x080057ad
 80053c8:	080053ed 	.word	0x080053ed
 80053cc:	080057ad 	.word	0x080057ad
 80053d0:	080057ad 	.word	0x080057ad
 80053d4:	080057ad 	.word	0x080057ad
 80053d8:	080055dd 	.word	0x080055dd
 80053dc:	4bb9      	ldr	r3, [pc, #740]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80053de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053e2:	e1e7      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x448>
 80053e4:	4bb8      	ldr	r3, [pc, #736]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80053e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053ea:	e1e3      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x448>
 80053ec:	4bb4      	ldr	r3, [pc, #720]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053f8:	4bb1      	ldr	r3, [pc, #708]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d071      	beq.n	80054e8 <HAL_RCC_GetSysClockFreq+0x17c>
 8005404:	4bae      	ldr	r3, [pc, #696]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	099b      	lsrs	r3, r3, #6
 800540a:	2200      	movs	r2, #0
 800540c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005410:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005414:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005420:	2300      	movs	r3, #0
 8005422:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800542a:	4622      	mov	r2, r4
 800542c:	462b      	mov	r3, r5
 800542e:	f04f 0000 	mov.w	r0, #0
 8005432:	f04f 0100 	mov.w	r1, #0
 8005436:	0159      	lsls	r1, r3, #5
 8005438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800543c:	0150      	lsls	r0, r2, #5
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4621      	mov	r1, r4
 8005444:	1a51      	subs	r1, r2, r1
 8005446:	6439      	str	r1, [r7, #64]	@ 0x40
 8005448:	4629      	mov	r1, r5
 800544a:	eb63 0301 	sbc.w	r3, r3, r1
 800544e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800545c:	4649      	mov	r1, r9
 800545e:	018b      	lsls	r3, r1, #6
 8005460:	4641      	mov	r1, r8
 8005462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005466:	4641      	mov	r1, r8
 8005468:	018a      	lsls	r2, r1, #6
 800546a:	4641      	mov	r1, r8
 800546c:	1a51      	subs	r1, r2, r1
 800546e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005470:	4649      	mov	r1, r9
 8005472:	eb63 0301 	sbc.w	r3, r3, r1
 8005476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	f04f 0300 	mov.w	r3, #0
 8005480:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005484:	4649      	mov	r1, r9
 8005486:	00cb      	lsls	r3, r1, #3
 8005488:	4641      	mov	r1, r8
 800548a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800548e:	4641      	mov	r1, r8
 8005490:	00ca      	lsls	r2, r1, #3
 8005492:	4610      	mov	r0, r2
 8005494:	4619      	mov	r1, r3
 8005496:	4603      	mov	r3, r0
 8005498:	4622      	mov	r2, r4
 800549a:	189b      	adds	r3, r3, r2
 800549c:	633b      	str	r3, [r7, #48]	@ 0x30
 800549e:	462b      	mov	r3, r5
 80054a0:	460a      	mov	r2, r1
 80054a2:	eb42 0303 	adc.w	r3, r2, r3
 80054a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80054b4:	4629      	mov	r1, r5
 80054b6:	024b      	lsls	r3, r1, #9
 80054b8:	4621      	mov	r1, r4
 80054ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054be:	4621      	mov	r1, r4
 80054c0:	024a      	lsls	r2, r1, #9
 80054c2:	4610      	mov	r0, r2
 80054c4:	4619      	mov	r1, r3
 80054c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80054d8:	f7fb fbd6 	bl	8000c88 <__aeabi_uldivmod>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4613      	mov	r3, r2
 80054e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054e6:	e067      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x24c>
 80054e8:	4b75      	ldr	r3, [pc, #468]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	099b      	lsrs	r3, r3, #6
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80054f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80054fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005500:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005502:	2300      	movs	r3, #0
 8005504:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005506:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800550a:	4622      	mov	r2, r4
 800550c:	462b      	mov	r3, r5
 800550e:	f04f 0000 	mov.w	r0, #0
 8005512:	f04f 0100 	mov.w	r1, #0
 8005516:	0159      	lsls	r1, r3, #5
 8005518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800551c:	0150      	lsls	r0, r2, #5
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4621      	mov	r1, r4
 8005524:	1a51      	subs	r1, r2, r1
 8005526:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005528:	4629      	mov	r1, r5
 800552a:	eb63 0301 	sbc.w	r3, r3, r1
 800552e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800553c:	4649      	mov	r1, r9
 800553e:	018b      	lsls	r3, r1, #6
 8005540:	4641      	mov	r1, r8
 8005542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005546:	4641      	mov	r1, r8
 8005548:	018a      	lsls	r2, r1, #6
 800554a:	4641      	mov	r1, r8
 800554c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005550:	4649      	mov	r1, r9
 8005552:	eb63 0b01 	sbc.w	fp, r3, r1
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005562:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005566:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800556a:	4692      	mov	sl, r2
 800556c:	469b      	mov	fp, r3
 800556e:	4623      	mov	r3, r4
 8005570:	eb1a 0303 	adds.w	r3, sl, r3
 8005574:	623b      	str	r3, [r7, #32]
 8005576:	462b      	mov	r3, r5
 8005578:	eb4b 0303 	adc.w	r3, fp, r3
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800558a:	4629      	mov	r1, r5
 800558c:	028b      	lsls	r3, r1, #10
 800558e:	4621      	mov	r1, r4
 8005590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005594:	4621      	mov	r1, r4
 8005596:	028a      	lsls	r2, r1, #10
 8005598:	4610      	mov	r0, r2
 800559a:	4619      	mov	r1, r3
 800559c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055a0:	2200      	movs	r2, #0
 80055a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80055a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80055a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80055aa:	f7fb fb6d 	bl	8000c88 <__aeabi_uldivmod>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4613      	mov	r3, r2
 80055b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055b8:	4b41      	ldr	r3, [pc, #260]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	3301      	adds	r3, #1
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055da:	e0eb      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x448>
 80055dc:	4b38      	ldr	r3, [pc, #224]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055e8:	4b35      	ldr	r3, [pc, #212]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d06b      	beq.n	80056cc <HAL_RCC_GetSysClockFreq+0x360>
 80055f4:	4b32      	ldr	r3, [pc, #200]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	099b      	lsrs	r3, r3, #6
 80055fa:	2200      	movs	r2, #0
 80055fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005606:	663b      	str	r3, [r7, #96]	@ 0x60
 8005608:	2300      	movs	r3, #0
 800560a:	667b      	str	r3, [r7, #100]	@ 0x64
 800560c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005610:	4622      	mov	r2, r4
 8005612:	462b      	mov	r3, r5
 8005614:	f04f 0000 	mov.w	r0, #0
 8005618:	f04f 0100 	mov.w	r1, #0
 800561c:	0159      	lsls	r1, r3, #5
 800561e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005622:	0150      	lsls	r0, r2, #5
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4621      	mov	r1, r4
 800562a:	1a51      	subs	r1, r2, r1
 800562c:	61b9      	str	r1, [r7, #24]
 800562e:	4629      	mov	r1, r5
 8005630:	eb63 0301 	sbc.w	r3, r3, r1
 8005634:	61fb      	str	r3, [r7, #28]
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005642:	4659      	mov	r1, fp
 8005644:	018b      	lsls	r3, r1, #6
 8005646:	4651      	mov	r1, sl
 8005648:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800564c:	4651      	mov	r1, sl
 800564e:	018a      	lsls	r2, r1, #6
 8005650:	4651      	mov	r1, sl
 8005652:	ebb2 0801 	subs.w	r8, r2, r1
 8005656:	4659      	mov	r1, fp
 8005658:	eb63 0901 	sbc.w	r9, r3, r1
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005668:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800566c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005670:	4690      	mov	r8, r2
 8005672:	4699      	mov	r9, r3
 8005674:	4623      	mov	r3, r4
 8005676:	eb18 0303 	adds.w	r3, r8, r3
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	462b      	mov	r3, r5
 800567e:	eb49 0303 	adc.w	r3, r9, r3
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005690:	4629      	mov	r1, r5
 8005692:	024b      	lsls	r3, r1, #9
 8005694:	4621      	mov	r1, r4
 8005696:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800569a:	4621      	mov	r1, r4
 800569c:	024a      	lsls	r2, r1, #9
 800569e:	4610      	mov	r0, r2
 80056a0:	4619      	mov	r1, r3
 80056a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056a6:	2200      	movs	r2, #0
 80056a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80056ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056b0:	f7fb faea 	bl	8000c88 <__aeabi_uldivmod>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4613      	mov	r3, r2
 80056ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056be:	e065      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x420>
 80056c0:	40023800 	.word	0x40023800
 80056c4:	00f42400 	.word	0x00f42400
 80056c8:	007a1200 	.word	0x007a1200
 80056cc:	4b3d      	ldr	r3, [pc, #244]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	099b      	lsrs	r3, r3, #6
 80056d2:	2200      	movs	r2, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	4611      	mov	r1, r2
 80056d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80056de:	2300      	movs	r3, #0
 80056e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80056e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80056e6:	4642      	mov	r2, r8
 80056e8:	464b      	mov	r3, r9
 80056ea:	f04f 0000 	mov.w	r0, #0
 80056ee:	f04f 0100 	mov.w	r1, #0
 80056f2:	0159      	lsls	r1, r3, #5
 80056f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056f8:	0150      	lsls	r0, r2, #5
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4641      	mov	r1, r8
 8005700:	1a51      	subs	r1, r2, r1
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	4649      	mov	r1, r9
 8005706:	eb63 0301 	sbc.w	r3, r3, r1
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005718:	4659      	mov	r1, fp
 800571a:	018b      	lsls	r3, r1, #6
 800571c:	4651      	mov	r1, sl
 800571e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005722:	4651      	mov	r1, sl
 8005724:	018a      	lsls	r2, r1, #6
 8005726:	4651      	mov	r1, sl
 8005728:	1a54      	subs	r4, r2, r1
 800572a:	4659      	mov	r1, fp
 800572c:	eb63 0501 	sbc.w	r5, r3, r1
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	00eb      	lsls	r3, r5, #3
 800573a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800573e:	00e2      	lsls	r2, r4, #3
 8005740:	4614      	mov	r4, r2
 8005742:	461d      	mov	r5, r3
 8005744:	4643      	mov	r3, r8
 8005746:	18e3      	adds	r3, r4, r3
 8005748:	603b      	str	r3, [r7, #0]
 800574a:	464b      	mov	r3, r9
 800574c:	eb45 0303 	adc.w	r3, r5, r3
 8005750:	607b      	str	r3, [r7, #4]
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800575e:	4629      	mov	r1, r5
 8005760:	028b      	lsls	r3, r1, #10
 8005762:	4621      	mov	r1, r4
 8005764:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005768:	4621      	mov	r1, r4
 800576a:	028a      	lsls	r2, r1, #10
 800576c:	4610      	mov	r0, r2
 800576e:	4619      	mov	r1, r3
 8005770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005774:	2200      	movs	r2, #0
 8005776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005778:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800577a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800577e:	f7fb fa83 	bl	8000c88 <__aeabi_uldivmod>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4613      	mov	r3, r2
 8005788:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800578c:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	0f1b      	lsrs	r3, r3, #28
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800579a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800579e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80057a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057aa:	e003      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x448>
 80057ac:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80057ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057b2:	bf00      	nop
 80057b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057b8:	4618      	mov	r0, r3
 80057ba:	37b8      	adds	r7, #184	@ 0xb8
 80057bc:	46bd      	mov	sp, r7
 80057be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057c2:	bf00      	nop
 80057c4:	40023800 	.word	0x40023800
 80057c8:	00f42400 	.word	0x00f42400

080057cc <HAL_RCC_OscConfig>:
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCC_OscConfig+0x12>
 80057da:	2301      	movs	r3, #1
 80057dc:	e28d      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 8083 	beq.w	80058f2 <HAL_RCC_OscConfig+0x126>
 80057ec:	4b94      	ldr	r3, [pc, #592]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 030c 	and.w	r3, r3, #12
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d019      	beq.n	800582c <HAL_RCC_OscConfig+0x60>
 80057f8:	4b91      	ldr	r3, [pc, #580]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 030c 	and.w	r3, r3, #12
 8005800:	2b08      	cmp	r3, #8
 8005802:	d106      	bne.n	8005812 <HAL_RCC_OscConfig+0x46>
 8005804:	4b8e      	ldr	r3, [pc, #568]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005810:	d00c      	beq.n	800582c <HAL_RCC_OscConfig+0x60>
 8005812:	4b8b      	ldr	r3, [pc, #556]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d112      	bne.n	8005844 <HAL_RCC_OscConfig+0x78>
 800581e:	4b88      	ldr	r3, [pc, #544]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005826:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800582a:	d10b      	bne.n	8005844 <HAL_RCC_OscConfig+0x78>
 800582c:	4b84      	ldr	r3, [pc, #528]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d05b      	beq.n	80058f0 <HAL_RCC_OscConfig+0x124>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d157      	bne.n	80058f0 <HAL_RCC_OscConfig+0x124>
 8005840:	2301      	movs	r3, #1
 8005842:	e25a      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800584c:	d106      	bne.n	800585c <HAL_RCC_OscConfig+0x90>
 800584e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a7b      	ldr	r2, [pc, #492]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e01d      	b.n	8005898 <HAL_RCC_OscConfig+0xcc>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005864:	d10c      	bne.n	8005880 <HAL_RCC_OscConfig+0xb4>
 8005866:	4b76      	ldr	r3, [pc, #472]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a75      	ldr	r2, [pc, #468]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 800586c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	4b73      	ldr	r3, [pc, #460]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a72      	ldr	r2, [pc, #456]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e00b      	b.n	8005898 <HAL_RCC_OscConfig+0xcc>
 8005880:	4b6f      	ldr	r3, [pc, #444]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a6e      	ldr	r2, [pc, #440]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	4b6c      	ldr	r3, [pc, #432]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a6b      	ldr	r2, [pc, #428]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d013      	beq.n	80058c8 <HAL_RCC_OscConfig+0xfc>
 80058a0:	f7fe fcb0 	bl	8004204 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0xee>
 80058a8:	f7fe fcac 	bl	8004204 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b64      	cmp	r3, #100	@ 0x64
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0xee>
 80058b6:	2303      	movs	r3, #3
 80058b8:	e21f      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 80058ba:	4b61      	ldr	r3, [pc, #388]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0xdc>
 80058c6:	e014      	b.n	80058f2 <HAL_RCC_OscConfig+0x126>
 80058c8:	f7fe fc9c 	bl	8004204 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x116>
 80058d0:	f7fe fc98 	bl	8004204 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b64      	cmp	r3, #100	@ 0x64
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x116>
 80058de:	2303      	movs	r3, #3
 80058e0:	e20b      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 80058e2:	4b57      	ldr	r3, [pc, #348]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x104>
 80058ee:	e000      	b.n	80058f2 <HAL_RCC_OscConfig+0x126>
 80058f0:	bf00      	nop
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d06f      	beq.n	80059de <HAL_RCC_OscConfig+0x212>
 80058fe:	4b50      	ldr	r3, [pc, #320]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 030c 	and.w	r3, r3, #12
 8005906:	2b00      	cmp	r3, #0
 8005908:	d017      	beq.n	800593a <HAL_RCC_OscConfig+0x16e>
 800590a:	4b4d      	ldr	r3, [pc, #308]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	2b08      	cmp	r3, #8
 8005914:	d105      	bne.n	8005922 <HAL_RCC_OscConfig+0x156>
 8005916:	4b4a      	ldr	r3, [pc, #296]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_RCC_OscConfig+0x16e>
 8005922:	4b47      	ldr	r3, [pc, #284]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b0c      	cmp	r3, #12
 800592c:	d11c      	bne.n	8005968 <HAL_RCC_OscConfig+0x19c>
 800592e:	4b44      	ldr	r3, [pc, #272]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <HAL_RCC_OscConfig+0x19c>
 800593a:	4b41      	ldr	r3, [pc, #260]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_RCC_OscConfig+0x186>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d001      	beq.n	8005952 <HAL_RCC_OscConfig+0x186>
 800594e:	2301      	movs	r3, #1
 8005950:	e1d3      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005952:	4b3b      	ldr	r3, [pc, #236]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4937      	ldr	r1, [pc, #220]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005962:	4313      	orrs	r3, r2
 8005964:	600b      	str	r3, [r1, #0]
 8005966:	e03a      	b.n	80059de <HAL_RCC_OscConfig+0x212>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d020      	beq.n	80059b2 <HAL_RCC_OscConfig+0x1e6>
 8005970:	4b34      	ldr	r3, [pc, #208]	@ (8005a44 <HAL_RCC_OscConfig+0x278>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	f7fe fc45 	bl	8004204 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x1c4>
 800597e:	f7fe fc41 	bl	8004204 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x1c4>
 800598c:	2303      	movs	r3, #3
 800598e:	e1b4      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005990:	4b2b      	ldr	r3, [pc, #172]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0x1b2>
 800599c:	4b28      	ldr	r3, [pc, #160]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	4925      	ldr	r1, [pc, #148]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]
 80059b0:	e015      	b.n	80059de <HAL_RCC_OscConfig+0x212>
 80059b2:	4b24      	ldr	r3, [pc, #144]	@ (8005a44 <HAL_RCC_OscConfig+0x278>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f7fe fc24 	bl	8004204 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x206>
 80059c0:	f7fe fc20 	bl	8004204 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x206>
 80059ce:	2303      	movs	r3, #3
 80059d0:	e193      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 80059d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f0      	bne.n	80059c0 <HAL_RCC_OscConfig+0x1f4>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d036      	beq.n	8005a58 <HAL_RCC_OscConfig+0x28c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d016      	beq.n	8005a20 <HAL_RCC_OscConfig+0x254>
 80059f2:	4b15      	ldr	r3, [pc, #84]	@ (8005a48 <HAL_RCC_OscConfig+0x27c>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f7fe fc04 	bl	8004204 <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x246>
 8005a00:	f7fe fc00 	bl	8004204 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x246>
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e173      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005a12:	4b0b      	ldr	r3, [pc, #44]	@ (8005a40 <HAL_RCC_OscConfig+0x274>)
 8005a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f0      	beq.n	8005a00 <HAL_RCC_OscConfig+0x234>
 8005a1e:	e01b      	b.n	8005a58 <HAL_RCC_OscConfig+0x28c>
 8005a20:	4b09      	ldr	r3, [pc, #36]	@ (8005a48 <HAL_RCC_OscConfig+0x27c>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	f7fe fbed 	bl	8004204 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]
 8005a2c:	e00e      	b.n	8005a4c <HAL_RCC_OscConfig+0x280>
 8005a2e:	f7fe fbe9 	bl	8004204 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d907      	bls.n	8005a4c <HAL_RCC_OscConfig+0x280>
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e15c      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005a40:	40023800 	.word	0x40023800
 8005a44:	42470000 	.word	0x42470000
 8005a48:	42470e80 	.word	0x42470e80
 8005a4c:	4b8a      	ldr	r3, [pc, #552]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1ea      	bne.n	8005a2e <HAL_RCC_OscConfig+0x262>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 8097 	beq.w	8005b94 <HAL_RCC_OscConfig+0x3c8>
 8005a66:	2300      	movs	r3, #0
 8005a68:	75fb      	strb	r3, [r7, #23]
 8005a6a:	4b83      	ldr	r3, [pc, #524]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10f      	bne.n	8005a96 <HAL_RCC_OscConfig+0x2ca>
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7e:	4a7e      	ldr	r2, [pc, #504]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a86:	4b7c      	ldr	r3, [pc, #496]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a8e:	60bb      	str	r3, [r7, #8]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
 8005a96:	4b79      	ldr	r3, [pc, #484]	@ (8005c7c <HAL_RCC_OscConfig+0x4b0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d118      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x308>
 8005aa2:	4b76      	ldr	r3, [pc, #472]	@ (8005c7c <HAL_RCC_OscConfig+0x4b0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a75      	ldr	r2, [pc, #468]	@ (8005c7c <HAL_RCC_OscConfig+0x4b0>)
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	f7fe fba9 	bl	8004204 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x2fc>
 8005ab6:	f7fe fba5 	bl	8004204 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x2fc>
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e118      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005ac8:	4b6c      	ldr	r3, [pc, #432]	@ (8005c7c <HAL_RCC_OscConfig+0x4b0>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x2ea>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d106      	bne.n	8005aea <HAL_RCC_OscConfig+0x31e>
 8005adc:	4b66      	ldr	r3, [pc, #408]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae0:	4a65      	ldr	r2, [pc, #404]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ae8:	e01c      	b.n	8005b24 <HAL_RCC_OscConfig+0x358>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCC_OscConfig+0x340>
 8005af2:	4b61      	ldr	r3, [pc, #388]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af6:	4a60      	ldr	r2, [pc, #384]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005af8:	f043 0304 	orr.w	r3, r3, #4
 8005afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005afe:	4b5e      	ldr	r3, [pc, #376]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b02:	4a5d      	ldr	r2, [pc, #372]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b0a:	e00b      	b.n	8005b24 <HAL_RCC_OscConfig+0x358>
 8005b0c:	4b5a      	ldr	r3, [pc, #360]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b10:	4a59      	ldr	r2, [pc, #356]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b18:	4b57      	ldr	r3, [pc, #348]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1c:	4a56      	ldr	r2, [pc, #344]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b1e:	f023 0304 	bic.w	r3, r3, #4
 8005b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d015      	beq.n	8005b58 <HAL_RCC_OscConfig+0x38c>
 8005b2c:	f7fe fb6a 	bl	8004204 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]
 8005b32:	e00a      	b.n	8005b4a <HAL_RCC_OscConfig+0x37e>
 8005b34:	f7fe fb66 	bl	8004204 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x37e>
 8005b46:	2303      	movs	r3, #3
 8005b48:	e0d7      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0ee      	beq.n	8005b34 <HAL_RCC_OscConfig+0x368>
 8005b56:	e014      	b.n	8005b82 <HAL_RCC_OscConfig+0x3b6>
 8005b58:	f7fe fb54 	bl	8004204 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCC_OscConfig+0x3aa>
 8005b60:	f7fe fb50 	bl	8004204 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x3aa>
 8005b72:	2303      	movs	r3, #3
 8005b74:	e0c1      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005b76:	4b40      	ldr	r3, [pc, #256]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1ee      	bne.n	8005b60 <HAL_RCC_OscConfig+0x394>
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d105      	bne.n	8005b94 <HAL_RCC_OscConfig+0x3c8>
 8005b88:	4b3b      	ldr	r3, [pc, #236]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005b8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 80ad 	beq.w	8005cf8 <HAL_RCC_OscConfig+0x52c>
 8005b9e:	4b36      	ldr	r3, [pc, #216]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d060      	beq.n	8005c6c <HAL_RCC_OscConfig+0x4a0>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d145      	bne.n	8005c3e <HAL_RCC_OscConfig+0x472>
 8005bb2:	4b33      	ldr	r3, [pc, #204]	@ (8005c80 <HAL_RCC_OscConfig+0x4b4>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f7fe fb24 	bl	8004204 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x406>
 8005bc0:	f7fe fb20 	bl	8004204 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x406>
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e093      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005bd2:	4b29      	ldr	r3, [pc, #164]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f0      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x3f4>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69da      	ldr	r2, [r3, #28]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bec:	019b      	lsls	r3, r3, #6
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	061b      	lsls	r3, r3, #24
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c08:	071b      	lsls	r3, r3, #28
 8005c0a:	491b      	ldr	r1, [pc, #108]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	604b      	str	r3, [r1, #4]
 8005c10:	4b1b      	ldr	r3, [pc, #108]	@ (8005c80 <HAL_RCC_OscConfig+0x4b4>)
 8005c12:	2201      	movs	r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	f7fe faf5 	bl	8004204 <HAL_GetTick>
 8005c1a:	6138      	str	r0, [r7, #16]
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x464>
 8005c1e:	f7fe faf1 	bl	8004204 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x464>
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e064      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005c30:	4b11      	ldr	r3, [pc, #68]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <HAL_RCC_OscConfig+0x452>
 8005c3c:	e05c      	b.n	8005cf8 <HAL_RCC_OscConfig+0x52c>
 8005c3e:	4b10      	ldr	r3, [pc, #64]	@ (8005c80 <HAL_RCC_OscConfig+0x4b4>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	f7fe fade 	bl	8004204 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x492>
 8005c4c:	f7fe fada 	bl	8004204 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x492>
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e04d      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005c5e:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <HAL_RCC_OscConfig+0x4ac>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0x480>
 8005c6a:	e045      	b.n	8005cf8 <HAL_RCC_OscConfig+0x52c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d107      	bne.n	8005c84 <HAL_RCC_OscConfig+0x4b8>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e040      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	40007000 	.word	0x40007000
 8005c80:	42470060 	.word	0x42470060
 8005c84:	4b1f      	ldr	r3, [pc, #124]	@ (8005d04 <HAL_RCC_OscConfig+0x538>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d030      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x528>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d129      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x528>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d122      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x528>
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cba:	0192      	lsls	r2, r2, #6
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d119      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x528>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	041b      	lsls	r3, r3, #16
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d10f      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x528>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	061b      	lsls	r3, r3, #24
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d107      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x528>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cee:	071b      	lsls	r3, r3, #28
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x52c>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <HAL_RCC_OscConfig+0x52e>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	40023800 	.word	0x40023800

08005d08 <HAL_SPI_Init>:
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_SPI_Init+0x12>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e07b      	b.n	8005e12 <HAL_SPI_Init+0x10a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d108      	bne.n	8005d34 <HAL_SPI_Init+0x2c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d2a:	d009      	beq.n	8005d40 <HAL_SPI_Init+0x38>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	61da      	str	r2, [r3, #28]
 8005d32:	e005      	b.n	8005d40 <HAL_SPI_Init+0x38>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	611a      	str	r2, [r3, #16]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	615a      	str	r2, [r3, #20]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <HAL_SPI_Init+0x58>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fd ffde 	bl	8003d1c <HAL_SPI_MspInit>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc4:	ea42 0103 	orr.w	r1, r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dcc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	0c1b      	lsrs	r3, r3, #16
 8005dde:	f003 0104 	and.w	r1, r3, #4
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	f003 0210 	and.w	r2, r3, #16
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e00:	61da      	str	r2, [r3, #28]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005e10:	2300      	movs	r3, #0
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_SPI_Transmit>:
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b088      	sub	sp, #32
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	4613      	mov	r3, r2
 8005e28:	80fb      	strh	r3, [r7, #6]
 8005e2a:	f7fe f9eb 	bl	8004204 <HAL_GetTick>
 8005e2e:	61f8      	str	r0, [r7, #28]
 8005e30:	88fb      	ldrh	r3, [r7, #6]
 8005e32:	837b      	strh	r3, [r7, #26]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d001      	beq.n	8005e44 <HAL_SPI_Transmit+0x2a>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e12a      	b.n	800609a <HAL_SPI_Transmit+0x280>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_SPI_Transmit+0x36>
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_SPI_Transmit+0x3a>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e122      	b.n	800609a <HAL_SPI_Transmit+0x280>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_SPI_Transmit+0x48>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e11b      	b.n	800609a <HAL_SPI_Transmit+0x280>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	869a      	strh	r2, [r3, #52]	@ 0x34
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	88fa      	ldrh	r2, [r7, #6]
 8005e88:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	645a      	str	r2, [r3, #68]	@ 0x44
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eb0:	d10f      	bne.n	8005ed2 <HAL_SPI_Transmit+0xb8>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005edc:	2b40      	cmp	r3, #64	@ 0x40
 8005ede:	d007      	beq.n	8005ef0 <HAL_SPI_Transmit+0xd6>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ef8:	d152      	bne.n	8005fa0 <HAL_SPI_Transmit+0x186>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <HAL_SPI_Transmit+0xee>
 8005f02:	8b7b      	ldrh	r3, [r7, #26]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d145      	bne.n	8005f94 <HAL_SPI_Transmit+0x17a>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0c:	881a      	ldrh	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60da      	str	r2, [r3, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f18:	1c9a      	adds	r2, r3, #2
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f2c:	e032      	b.n	8005f94 <HAL_SPI_Transmit+0x17a>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d112      	bne.n	8005f62 <HAL_SPI_Transmit+0x148>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f40:	881a      	ldrh	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60da      	str	r2, [r3, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4c:	1c9a      	adds	r2, r3, #2
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f60:	e018      	b.n	8005f94 <HAL_SPI_Transmit+0x17a>
 8005f62:	f7fe f94f 	bl	8004204 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d803      	bhi.n	8005f7a <HAL_SPI_Transmit+0x160>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f78:	d102      	bne.n	8005f80 <HAL_SPI_Transmit+0x166>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <HAL_SPI_Transmit+0x17a>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005f90:	2303      	movs	r3, #3
 8005f92:	e082      	b.n	800609a <HAL_SPI_Transmit+0x280>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1c7      	bne.n	8005f2e <HAL_SPI_Transmit+0x114>
 8005f9e:	e053      	b.n	8006048 <HAL_SPI_Transmit+0x22e>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_SPI_Transmit+0x194>
 8005fa8:	8b7b      	ldrh	r3, [r7, #26]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d147      	bne.n	800603e <HAL_SPI_Transmit+0x224>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	7812      	ldrb	r2, [r2, #0]
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fd4:	e033      	b.n	800603e <HAL_SPI_Transmit+0x224>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d113      	bne.n	800600c <HAL_SPI_Transmit+0x1f2>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	7812      	ldrb	r2, [r2, #0]
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	86da      	strh	r2, [r3, #54]	@ 0x36
 800600a:	e018      	b.n	800603e <HAL_SPI_Transmit+0x224>
 800600c:	f7fe f8fa 	bl	8004204 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d803      	bhi.n	8006024 <HAL_SPI_Transmit+0x20a>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006022:	d102      	bne.n	800602a <HAL_SPI_Transmit+0x210>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d109      	bne.n	800603e <HAL_SPI_Transmit+0x224>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800603a:	2303      	movs	r3, #3
 800603c:	e02d      	b.n	800609a <HAL_SPI_Transmit+0x280>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1c6      	bne.n	8005fd6 <HAL_SPI_Transmit+0x1bc>
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fbd9 	bl	8006804 <SPI_EndRxTxTransaction>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_SPI_Transmit+0x244>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	655a      	str	r2, [r3, #84]	@ 0x54
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <HAL_SPI_Transmit+0x262>
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_SPI_Transmit+0x27e>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <HAL_SPI_Transmit+0x280>
 8006098:	2300      	movs	r3, #0
 800609a:	4618      	mov	r0, r3
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_SPI_Receive>:
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b088      	sub	sp, #32
 80060a6:	af02      	add	r7, sp, #8
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	4613      	mov	r3, r2
 80060b0:	80fb      	strh	r3, [r7, #6]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <HAL_SPI_Receive+0x20>
 80060be:	2302      	movs	r3, #2
 80060c0:	e104      	b.n	80062cc <HAL_SPI_Receive+0x22a>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060ca:	d112      	bne.n	80060f2 <HAL_SPI_Receive+0x50>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10e      	bne.n	80060f2 <HAL_SPI_Receive+0x50>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2204      	movs	r2, #4
 80060d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80060dc:	88fa      	ldrh	r2, [r7, #6]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	4613      	mov	r3, r2
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 f8f3 	bl	80062d4 <HAL_SPI_TransmitReceive>
 80060ee:	4603      	mov	r3, r0
 80060f0:	e0ec      	b.n	80062cc <HAL_SPI_Receive+0x22a>
 80060f2:	f7fe f887 	bl	8004204 <HAL_GetTick>
 80060f6:	6178      	str	r0, [r7, #20]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <HAL_SPI_Receive+0x62>
 80060fe:	88fb      	ldrh	r3, [r7, #6]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_SPI_Receive+0x66>
 8006104:	2301      	movs	r3, #1
 8006106:	e0e1      	b.n	80062cc <HAL_SPI_Receive+0x22a>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_SPI_Receive+0x74>
 8006112:	2302      	movs	r3, #2
 8006114:	e0da      	b.n	80062cc <HAL_SPI_Receive+0x22a>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2204      	movs	r2, #4
 8006122:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	655a      	str	r2, [r3, #84]	@ 0x54
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	639a      	str	r2, [r3, #56]	@ 0x38
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	88fa      	ldrh	r2, [r7, #6]
 8006136:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	88fa      	ldrh	r2, [r7, #6]
 800613c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	631a      	str	r2, [r3, #48]	@ 0x30
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	869a      	strh	r2, [r3, #52]	@ 0x34
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	641a      	str	r2, [r3, #64]	@ 0x40
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	645a      	str	r2, [r3, #68]	@ 0x44
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006164:	d10f      	bne.n	8006186 <HAL_SPI_Receive+0xe4>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006190:	2b40      	cmp	r3, #64	@ 0x40
 8006192:	d007      	beq.n	80061a4 <HAL_SPI_Receive+0x102>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d170      	bne.n	800628e <HAL_SPI_Receive+0x1ec>
 80061ac:	e035      	b.n	800621a <HAL_SPI_Receive+0x178>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d115      	bne.n	80061e8 <HAL_SPI_Receive+0x146>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f103 020c 	add.w	r2, r3, #12
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c8:	7812      	ldrb	r2, [r2, #0]
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061e6:	e018      	b.n	800621a <HAL_SPI_Receive+0x178>
 80061e8:	f7fe f80c 	bl	8004204 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d803      	bhi.n	8006200 <HAL_SPI_Receive+0x15e>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fe:	d102      	bne.n	8006206 <HAL_SPI_Receive+0x164>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <HAL_SPI_Receive+0x178>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006216:	2303      	movs	r3, #3
 8006218:	e058      	b.n	80062cc <HAL_SPI_Receive+0x22a>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1c4      	bne.n	80061ae <HAL_SPI_Receive+0x10c>
 8006224:	e038      	b.n	8006298 <HAL_SPI_Receive+0x1f6>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	d113      	bne.n	800625c <HAL_SPI_Receive+0x1ba>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623e:	b292      	uxth	r2, r2
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	639a      	str	r2, [r3, #56]	@ 0x38
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800625a:	e018      	b.n	800628e <HAL_SPI_Receive+0x1ec>
 800625c:	f7fd ffd2 	bl	8004204 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d803      	bhi.n	8006274 <HAL_SPI_Receive+0x1d2>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d102      	bne.n	800627a <HAL_SPI_Receive+0x1d8>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <HAL_SPI_Receive+0x1ec>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800628a:	2303      	movs	r3, #3
 800628c:	e01e      	b.n	80062cc <HAL_SPI_Receive+0x22a>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1c6      	bne.n	8006226 <HAL_SPI_Receive+0x184>
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fa4b 	bl	8006738 <SPI_EndRxTransaction>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <HAL_SPI_Receive+0x20c>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_SPI_Receive+0x228>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <HAL_SPI_Receive+0x22a>
 80062ca:	2300      	movs	r3, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_SPI_TransmitReceive>:
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	@ 0x28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	807b      	strh	r3, [r7, #2]
 80062e2:	2301      	movs	r3, #1
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80062e6:	f7fd ff8d 	bl	8004204 <HAL_GetTick>
 80062ea:	6238      	str	r0, [r7, #32]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	887b      	ldrh	r3, [r7, #2]
 80062fc:	82fb      	strh	r3, [r7, #22]
 80062fe:	7ffb      	ldrb	r3, [r7, #31]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d00c      	beq.n	800631e <HAL_SPI_TransmitReceive+0x4a>
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800630a:	d106      	bne.n	800631a <HAL_SPI_TransmitReceive+0x46>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d102      	bne.n	800631a <HAL_SPI_TransmitReceive+0x46>
 8006314:	7ffb      	ldrb	r3, [r7, #31]
 8006316:	2b04      	cmp	r3, #4
 8006318:	d001      	beq.n	800631e <HAL_SPI_TransmitReceive+0x4a>
 800631a:	2302      	movs	r3, #2
 800631c:	e17f      	b.n	800661e <HAL_SPI_TransmitReceive+0x34a>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_SPI_TransmitReceive+0x5c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_SPI_TransmitReceive+0x5c>
 800632a:	887b      	ldrh	r3, [r7, #2]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_SPI_TransmitReceive+0x60>
 8006330:	2301      	movs	r3, #1
 8006332:	e174      	b.n	800661e <HAL_SPI_TransmitReceive+0x34a>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <HAL_SPI_TransmitReceive+0x6e>
 800633e:	2302      	movs	r3, #2
 8006340:	e16d      	b.n	800661e <HAL_SPI_TransmitReceive+0x34a>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b04      	cmp	r3, #4
 8006354:	d003      	beq.n	800635e <HAL_SPI_TransmitReceive+0x8a>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2205      	movs	r2, #5
 800635a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	655a      	str	r2, [r3, #84]	@ 0x54
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	639a      	str	r2, [r3, #56]	@ 0x38
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	887a      	ldrh	r2, [r7, #2]
 800636e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	887a      	ldrh	r2, [r7, #2]
 8006374:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	631a      	str	r2, [r3, #48]	@ 0x30
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	887a      	ldrh	r2, [r7, #2]
 8006380:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	887a      	ldrh	r2, [r7, #2]
 8006386:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	641a      	str	r2, [r3, #64]	@ 0x40
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	645a      	str	r2, [r3, #68]	@ 0x44
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639e:	2b40      	cmp	r3, #64	@ 0x40
 80063a0:	d007      	beq.n	80063b2 <HAL_SPI_TransmitReceive+0xde>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063ba:	d17e      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x1e6>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <HAL_SPI_TransmitReceive+0xf6>
 80063c4:	8afb      	ldrh	r3, [r7, #22]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d16c      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x1d0>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ce:	881a      	ldrh	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60da      	str	r2, [r3, #12]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063da:	1c9a      	adds	r2, r3, #2
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	631a      	str	r2, [r3, #48]	@ 0x30
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 80063ee:	e059      	b.n	80064a4 <HAL_SPI_TransmitReceive+0x1d0>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d11b      	bne.n	8006436 <HAL_SPI_TransmitReceive+0x162>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006402:	b29b      	uxth	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d016      	beq.n	8006436 <HAL_SPI_TransmitReceive+0x162>
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	2b01      	cmp	r3, #1
 800640c:	d113      	bne.n	8006436 <HAL_SPI_TransmitReceive+0x162>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006412:	881a      	ldrh	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60da      	str	r2, [r3, #12]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641e:	1c9a      	adds	r2, r3, #2
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	631a      	str	r2, [r3, #48]	@ 0x30
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006432:	2300      	movs	r3, #0
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b01      	cmp	r3, #1
 8006442:	d119      	bne.n	8006478 <HAL_SPI_TransmitReceive+0x1a4>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d014      	beq.n	8006478 <HAL_SPI_TransmitReceive+0x1a4>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006458:	b292      	uxth	r2, r2
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006460:	1c9a      	adds	r2, r3, #2
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	639a      	str	r2, [r3, #56]	@ 0x38
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006474:	2301      	movs	r3, #1
 8006476:	627b      	str	r3, [r7, #36]	@ 0x24
 8006478:	f7fd fec4 	bl	8004204 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006484:	429a      	cmp	r2, r3
 8006486:	d80d      	bhi.n	80064a4 <HAL_SPI_TransmitReceive+0x1d0>
 8006488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648e:	d009      	beq.n	80064a4 <HAL_SPI_TransmitReceive+0x1d0>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80064a0:	2303      	movs	r3, #3
 80064a2:	e0bc      	b.n	800661e <HAL_SPI_TransmitReceive+0x34a>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1a0      	bne.n	80063f0 <HAL_SPI_TransmitReceive+0x11c>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d19b      	bne.n	80063f0 <HAL_SPI_TransmitReceive+0x11c>
 80064b8:	e082      	b.n	80065c0 <HAL_SPI_TransmitReceive+0x2ec>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0x1f4>
 80064c2:	8afb      	ldrh	r3, [r7, #22]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d171      	bne.n	80065ac <HAL_SPI_TransmitReceive+0x2d8>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	7812      	ldrb	r2, [r2, #0]
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	631a      	str	r2, [r3, #48]	@ 0x30
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 80064ee:	e05d      	b.n	80065ac <HAL_SPI_TransmitReceive+0x2d8>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d11c      	bne.n	8006538 <HAL_SPI_TransmitReceive+0x264>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006502:	b29b      	uxth	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d017      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x264>
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	2b01      	cmp	r3, #1
 800650c:	d114      	bne.n	8006538 <HAL_SPI_TransmitReceive+0x264>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	330c      	adds	r3, #12
 8006518:	7812      	ldrb	r2, [r2, #0]
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	631a      	str	r2, [r3, #48]	@ 0x30
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006534:	2300      	movs	r3, #0
 8006536:	627b      	str	r3, [r7, #36]	@ 0x24
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b01      	cmp	r3, #1
 8006544:	d119      	bne.n	800657a <HAL_SPI_TransmitReceive+0x2a6>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d014      	beq.n	800657a <HAL_SPI_TransmitReceive+0x2a6>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	639a      	str	r2, [r3, #56]	@ 0x38
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006576:	2301      	movs	r3, #1
 8006578:	627b      	str	r3, [r7, #36]	@ 0x24
 800657a:	f7fd fe43 	bl	8004204 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006586:	429a      	cmp	r2, r3
 8006588:	d803      	bhi.n	8006592 <HAL_SPI_TransmitReceive+0x2be>
 800658a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d102      	bne.n	8006598 <HAL_SPI_TransmitReceive+0x2c4>
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <HAL_SPI_TransmitReceive+0x2d8>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80065a8:	2303      	movs	r3, #3
 80065aa:	e038      	b.n	800661e <HAL_SPI_TransmitReceive+0x34a>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d19c      	bne.n	80064f0 <HAL_SPI_TransmitReceive+0x21c>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d197      	bne.n	80064f0 <HAL_SPI_TransmitReceive+0x21c>
 80065c0:	6a3a      	ldr	r2, [r7, #32]
 80065c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f91d 	bl	8006804 <SPI_EndRxTxTransaction>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <HAL_SPI_TransmitReceive+0x30e>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	655a      	str	r2, [r3, #84]	@ 0x54
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80065de:	2301      	movs	r3, #1
 80065e0:	e01d      	b.n	800661e <HAL_SPI_TransmitReceive+0x34a>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <HAL_SPI_TransmitReceive+0x32c>
 80065ea:	2300      	movs	r3, #0
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_SPI_TransmitReceive+0x348>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <HAL_SPI_TransmitReceive+0x34a>
 800661c:	2300      	movs	r3, #0
 800661e:	4618      	mov	r0, r3
 8006620:	3728      	adds	r7, #40	@ 0x28
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <SPI_WaitFlagStateUntilTimeout>:
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	4613      	mov	r3, r2
 8006636:	71fb      	strb	r3, [r7, #7]
 8006638:	f7fd fde4 	bl	8004204 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	4413      	add	r3, r2
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	f7fd fddc 	bl	8004204 <HAL_GetTick>
 800664c:	61b8      	str	r0, [r7, #24]
 800664e:	4b39      	ldr	r3, [pc, #228]	@ (8006734 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	015b      	lsls	r3, r3, #5
 8006654:	0d1b      	lsrs	r3, r3, #20
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	fb02 f303 	mul.w	r3, r2, r3
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	e054      	b.n	800670a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d050      	beq.n	800670a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006668:	f7fd fdcc 	bl	8004204 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	429a      	cmp	r2, r3
 8006676:	d902      	bls.n	800667e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d13d      	bne.n	80066fa <SPI_WaitFlagStateUntilTimeout+0xd2>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800668c:	605a      	str	r2, [r3, #4]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006696:	d111      	bne.n	80066bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066a0:	d004      	beq.n	80066ac <SPI_WaitFlagStateUntilTimeout+0x84>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066aa:	d107      	bne.n	80066bc <SPI_WaitFlagStateUntilTimeout+0x94>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066c4:	d10f      	bne.n	80066e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80066f6:	2303      	movs	r3, #3
 80066f8:	e017      	b.n	800672a <SPI_WaitFlagStateUntilTimeout+0x102>
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006700:	2300      	movs	r3, #0
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	3b01      	subs	r3, #1
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4013      	ands	r3, r2
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	429a      	cmp	r2, r3
 8006718:	bf0c      	ite	eq
 800671a:	2301      	moveq	r3, #1
 800671c:	2300      	movne	r3, #0
 800671e:	b2db      	uxtb	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	429a      	cmp	r2, r3
 8006726:	d19b      	bne.n	8006660 <SPI_WaitFlagStateUntilTimeout+0x38>
 8006728:	2300      	movs	r3, #0
 800672a:	4618      	mov	r0, r3
 800672c:	3720      	adds	r7, #32
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20000044 	.word	0x20000044

08006738 <SPI_EndRxTransaction>:
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800674c:	d111      	bne.n	8006772 <SPI_EndRxTransaction+0x3a>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006756:	d004      	beq.n	8006762 <SPI_EndRxTransaction+0x2a>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006760:	d107      	bne.n	8006772 <SPI_EndRxTransaction+0x3a>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800677a:	d12a      	bne.n	80067d2 <SPI_EndRxTransaction+0x9a>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006784:	d012      	beq.n	80067ac <SPI_EndRxTransaction+0x74>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2200      	movs	r2, #0
 800678e:	2180      	movs	r1, #128	@ 0x80
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f7ff ff49 	bl	8006628 <SPI_WaitFlagStateUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d02d      	beq.n	80067f8 <SPI_EndRxTransaction+0xc0>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a0:	f043 0220 	orr.w	r2, r3, #32
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80067a8:	2303      	movs	r3, #3
 80067aa:	e026      	b.n	80067fa <SPI_EndRxTransaction+0xc2>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	2101      	movs	r1, #1
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f7ff ff36 	bl	8006628 <SPI_WaitFlagStateUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d01a      	beq.n	80067f8 <SPI_EndRxTransaction+0xc0>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c6:	f043 0220 	orr.w	r2, r3, #32
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80067ce:	2303      	movs	r3, #3
 80067d0:	e013      	b.n	80067fa <SPI_EndRxTransaction+0xc2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2200      	movs	r2, #0
 80067da:	2101      	movs	r1, #1
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7ff ff23 	bl	8006628 <SPI_WaitFlagStateUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <SPI_EndRxTransaction+0xc0>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ec:	f043 0220 	orr.w	r2, r3, #32
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80067f4:	2303      	movs	r3, #3
 80067f6:	e000      	b.n	80067fa <SPI_EndRxTransaction+0xc2>
 80067f8:	2300      	movs	r3, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <SPI_EndRxTxTransaction>:
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2201      	movs	r2, #1
 8006818:	2102      	movs	r1, #2
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff ff04 	bl	8006628 <SPI_WaitFlagStateUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d007      	beq.n	8006836 <SPI_EndRxTxTransaction+0x32>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682a:	f043 0220 	orr.w	r2, r3, #32
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	655a      	str	r2, [r3, #84]	@ 0x54
 8006832:	2303      	movs	r3, #3
 8006834:	e032      	b.n	800689c <SPI_EndRxTxTransaction+0x98>
 8006836:	4b1b      	ldr	r3, [pc, #108]	@ (80068a4 <SPI_EndRxTxTransaction+0xa0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a1b      	ldr	r2, [pc, #108]	@ (80068a8 <SPI_EndRxTxTransaction+0xa4>)
 800683c:	fba2 2303 	umull	r2, r3, r2, r3
 8006840:	0d5b      	lsrs	r3, r3, #21
 8006842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006854:	d112      	bne.n	800687c <SPI_EndRxTxTransaction+0x78>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2200      	movs	r2, #0
 800685e:	2180      	movs	r1, #128	@ 0x80
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f7ff fee1 	bl	8006628 <SPI_WaitFlagStateUntilTimeout>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d016      	beq.n	800689a <SPI_EndRxTxTransaction+0x96>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006870:	f043 0220 	orr.w	r2, r3, #32
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	655a      	str	r2, [r3, #84]	@ 0x54
 8006878:	2303      	movs	r3, #3
 800687a:	e00f      	b.n	800689c <SPI_EndRxTxTransaction+0x98>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <SPI_EndRxTxTransaction+0x94>
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	3b01      	subs	r3, #1
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006892:	2b80      	cmp	r3, #128	@ 0x80
 8006894:	d0f2      	beq.n	800687c <SPI_EndRxTxTransaction+0x78>
 8006896:	e000      	b.n	800689a <SPI_EndRxTxTransaction+0x96>
 8006898:	bf00      	nop
 800689a:	2300      	movs	r3, #0
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000044 	.word	0x20000044
 80068a8:	165e9f81 	.word	0x165e9f81

080068ac <HAL_TIM_Base_Init>:
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_TIM_Base_Init+0x12>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e041      	b.n	8006942 <HAL_TIM_Base_Init+0x96>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d106      	bne.n	80068d8 <HAL_TIM_Base_Init+0x2c>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f839 	bl	800694a <HAL_TIM_Base_MspInit>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3304      	adds	r3, #4
 80068e8:	4619      	mov	r1, r3
 80068ea:	4610      	mov	r0, r2
 80068ec:	f000 f9c0 	bl	8006c70 <TIM_Base_SetConfig>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006940:	2300      	movs	r3, #0
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <HAL_TIM_Base_MspInit>:
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
	...

08006960 <HAL_TIM_Base_Start_IT>:
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b01      	cmp	r3, #1
 8006972:	d001      	beq.n	8006978 <HAL_TIM_Base_Start_IT+0x18>
 8006974:	2301      	movs	r3, #1
 8006976:	e04e      	b.n	8006a16 <HAL_TIM_Base_Start_IT+0xb6>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0201 	orr.w	r2, r2, #1
 800698e:	60da      	str	r2, [r3, #12]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a23      	ldr	r2, [pc, #140]	@ (8006a24 <HAL_TIM_Base_Start_IT+0xc4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d022      	beq.n	80069e0 <HAL_TIM_Base_Start_IT+0x80>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a2:	d01d      	beq.n	80069e0 <HAL_TIM_Base_Start_IT+0x80>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a28 <HAL_TIM_Base_Start_IT+0xc8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d018      	beq.n	80069e0 <HAL_TIM_Base_Start_IT+0x80>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a1e      	ldr	r2, [pc, #120]	@ (8006a2c <HAL_TIM_Base_Start_IT+0xcc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d013      	beq.n	80069e0 <HAL_TIM_Base_Start_IT+0x80>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a30 <HAL_TIM_Base_Start_IT+0xd0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00e      	beq.n	80069e0 <HAL_TIM_Base_Start_IT+0x80>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006a34 <HAL_TIM_Base_Start_IT+0xd4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d009      	beq.n	80069e0 <HAL_TIM_Base_Start_IT+0x80>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a19      	ldr	r2, [pc, #100]	@ (8006a38 <HAL_TIM_Base_Start_IT+0xd8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d004      	beq.n	80069e0 <HAL_TIM_Base_Start_IT+0x80>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a18      	ldr	r2, [pc, #96]	@ (8006a3c <HAL_TIM_Base_Start_IT+0xdc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d111      	bne.n	8006a04 <HAL_TIM_Base_Start_IT+0xa4>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b06      	cmp	r3, #6
 80069f0:	d010      	beq.n	8006a14 <HAL_TIM_Base_Start_IT+0xb4>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f042 0201 	orr.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e007      	b.n	8006a14 <HAL_TIM_Base_Start_IT+0xb4>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0201 	orr.w	r2, r2, #1
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	2300      	movs	r3, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40000400 	.word	0x40000400
 8006a2c:	40000800 	.word	0x40000800
 8006a30:	40000c00 	.word	0x40000c00
 8006a34:	40010400 	.word	0x40010400
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40001800 	.word	0x40001800

08006a40 <HAL_TIM_IRQHandler>:
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	60bb      	str	r3, [r7, #8]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d020      	beq.n	8006aa4 <HAL_TIM_IRQHandler+0x64>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01b      	beq.n	8006aa4 <HAL_TIM_IRQHandler+0x64>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f06f 0202 	mvn.w	r2, #2
 8006a74:	611a      	str	r2, [r3, #16]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	771a      	strb	r2, [r3, #28]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	f003 0303 	and.w	r3, r3, #3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <HAL_TIM_IRQHandler+0x52>
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f8d2 	bl	8006c34 <HAL_TIM_IC_CaptureCallback>
 8006a90:	e005      	b.n	8006a9e <HAL_TIM_IRQHandler+0x5e>
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f8c4 	bl	8006c20 <HAL_TIM_OC_DelayElapsedCallback>
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f8d5 	bl	8006c48 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	771a      	strb	r2, [r3, #28]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d020      	beq.n	8006af0 <HAL_TIM_IRQHandler+0xb0>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01b      	beq.n	8006af0 <HAL_TIM_IRQHandler+0xb0>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f06f 0204 	mvn.w	r2, #4
 8006ac0:	611a      	str	r2, [r3, #16]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	771a      	strb	r2, [r3, #28]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_TIM_IRQHandler+0x9e>
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f8ac 	bl	8006c34 <HAL_TIM_IC_CaptureCallback>
 8006adc:	e005      	b.n	8006aea <HAL_TIM_IRQHandler+0xaa>
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f89e 	bl	8006c20 <HAL_TIM_OC_DelayElapsedCallback>
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f8af 	bl	8006c48 <HAL_TIM_PWM_PulseFinishedCallback>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	771a      	strb	r2, [r3, #28]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d020      	beq.n	8006b3c <HAL_TIM_IRQHandler+0xfc>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f003 0308 	and.w	r3, r3, #8
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01b      	beq.n	8006b3c <HAL_TIM_IRQHandler+0xfc>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0208 	mvn.w	r2, #8
 8006b0c:	611a      	str	r2, [r3, #16]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2204      	movs	r2, #4
 8006b12:	771a      	strb	r2, [r3, #28]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_TIM_IRQHandler+0xea>
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f886 	bl	8006c34 <HAL_TIM_IC_CaptureCallback>
 8006b28:	e005      	b.n	8006b36 <HAL_TIM_IRQHandler+0xf6>
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f878 	bl	8006c20 <HAL_TIM_OC_DelayElapsedCallback>
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f889 	bl	8006c48 <HAL_TIM_PWM_PulseFinishedCallback>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	771a      	strb	r2, [r3, #28]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f003 0310 	and.w	r3, r3, #16
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d020      	beq.n	8006b88 <HAL_TIM_IRQHandler+0x148>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f003 0310 	and.w	r3, r3, #16
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01b      	beq.n	8006b88 <HAL_TIM_IRQHandler+0x148>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0210 	mvn.w	r2, #16
 8006b58:	611a      	str	r2, [r3, #16]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	771a      	strb	r2, [r3, #28]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_TIM_IRQHandler+0x136>
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f860 	bl	8006c34 <HAL_TIM_IC_CaptureCallback>
 8006b74:	e005      	b.n	8006b82 <HAL_TIM_IRQHandler+0x142>
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f852 	bl	8006c20 <HAL_TIM_OC_DelayElapsedCallback>
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f863 	bl	8006c48 <HAL_TIM_PWM_PulseFinishedCallback>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	771a      	strb	r2, [r3, #28]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00c      	beq.n	8006bac <HAL_TIM_IRQHandler+0x16c>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d007      	beq.n	8006bac <HAL_TIM_IRQHandler+0x16c>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0201 	mvn.w	r2, #1
 8006ba4:	611a      	str	r2, [r3, #16]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fc ffe8 	bl	8003b7c <HAL_TIM_PeriodElapsedCallback>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00c      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0x190>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d007      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0x190>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006bc8:	611a      	str	r2, [r3, #16]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f906 	bl	8006ddc <HAL_TIMEx_BreakCallback>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00c      	beq.n	8006bf4 <HAL_TIM_IRQHandler+0x1b4>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <HAL_TIM_IRQHandler+0x1b4>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006bec:	611a      	str	r2, [r3, #16]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f834 	bl	8006c5c <HAL_TIM_TriggerCallback>
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00c      	beq.n	8006c18 <HAL_TIM_IRQHandler+0x1d8>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d007      	beq.n	8006c18 <HAL_TIM_IRQHandler+0x1d8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0220 	mvn.w	r2, #32
 8006c10:	611a      	str	r2, [r3, #16]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f8d8 	bl	8006dc8 <HAL_TIMEx_CommutCallback>
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_TIM_OC_DelayElapsedCallback>:
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIM_IC_CaptureCallback>:
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_TIM_TriggerCallback>:
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <TIM_Base_SetConfig>:
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a46      	ldr	r2, [pc, #280]	@ (8006d9c <TIM_Base_SetConfig+0x12c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c8e:	d00f      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a43      	ldr	r2, [pc, #268]	@ (8006da0 <TIM_Base_SetConfig+0x130>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00b      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a42      	ldr	r2, [pc, #264]	@ (8006da4 <TIM_Base_SetConfig+0x134>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d007      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a41      	ldr	r2, [pc, #260]	@ (8006da8 <TIM_Base_SetConfig+0x138>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a40      	ldr	r2, [pc, #256]	@ (8006dac <TIM_Base_SetConfig+0x13c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d108      	bne.n	8006cc2 <TIM_Base_SetConfig+0x52>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a35      	ldr	r2, [pc, #212]	@ (8006d9c <TIM_Base_SetConfig+0x12c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d02b      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd0:	d027      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a32      	ldr	r2, [pc, #200]	@ (8006da0 <TIM_Base_SetConfig+0x130>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d023      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a31      	ldr	r2, [pc, #196]	@ (8006da4 <TIM_Base_SetConfig+0x134>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d01f      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a30      	ldr	r2, [pc, #192]	@ (8006da8 <TIM_Base_SetConfig+0x138>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01b      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2f      	ldr	r2, [pc, #188]	@ (8006dac <TIM_Base_SetConfig+0x13c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d017      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8006db0 <TIM_Base_SetConfig+0x140>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8006db4 <TIM_Base_SetConfig+0x144>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00f      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a2c      	ldr	r2, [pc, #176]	@ (8006db8 <TIM_Base_SetConfig+0x148>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00b      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8006dbc <TIM_Base_SetConfig+0x14c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d007      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc0 <TIM_Base_SetConfig+0x150>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a29      	ldr	r2, [pc, #164]	@ (8006dc4 <TIM_Base_SetConfig+0x154>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d108      	bne.n	8006d34 <TIM_Base_SetConfig+0xc4>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a10      	ldr	r2, [pc, #64]	@ (8006d9c <TIM_Base_SetConfig+0x12c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_Base_SetConfig+0xf8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a12      	ldr	r2, [pc, #72]	@ (8006dac <TIM_Base_SetConfig+0x13c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d103      	bne.n	8006d70 <TIM_Base_SetConfig+0x100>
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	615a      	str	r2, [r3, #20]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d105      	bne.n	8006d8e <TIM_Base_SetConfig+0x11e>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f023 0201 	bic.w	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	611a      	str	r2, [r3, #16]
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40010400 	.word	0x40010400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40014400 	.word	0x40014400
 8006db8:	40014800 	.word	0x40014800
 8006dbc:	40001800 	.word	0x40001800
 8006dc0:	40001c00 	.word	0x40001c00
 8006dc4:	40002000 	.word	0x40002000

08006dc8 <HAL_TIMEx_CommutCallback>:
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_TIMEx_BreakCallback>:
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_UART_Init>:
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_UART_Init+0x12>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e042      	b.n	8006e88 <HAL_UART_Init+0x98>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <HAL_UART_Init+0x2c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fc ffc8 	bl	8003dac <HAL_UART_MspInit>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2224      	movs	r2, #36	@ 0x24
 8006e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e32:	60da      	str	r2, [r3, #12]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f82b 	bl	8006e90 <UART_SetConfig>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e48:	611a      	str	r2, [r3, #16]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	695a      	ldr	r2, [r3, #20]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e58:	615a      	str	r2, [r3, #20]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e68:	60da      	str	r2, [r3, #12]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	645a      	str	r2, [r3, #68]	@ 0x44
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e86:	2300      	movs	r3, #0
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <UART_SetConfig>:
 8006e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e94:	b0c0      	sub	sp, #256	@ 0x100
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eac:	68d9      	ldr	r1, [r3, #12]
 8006eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	ea40 0301 	orr.w	r3, r0, r1
 8006eb8:	6113      	str	r3, [r2, #16]
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ee8:	f021 010c 	bic.w	r1, r1, #12
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ef6:	430b      	orrs	r3, r1
 8006ef8:	60d3      	str	r3, [r2, #12]
 8006efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0a:	6999      	ldr	r1, [r3, #24]
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	ea40 0301 	orr.w	r3, r0, r1
 8006f16:	6153      	str	r3, [r2, #20]
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	4b8f      	ldr	r3, [pc, #572]	@ (800715c <UART_SetConfig+0x2cc>)
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d005      	beq.n	8006f30 <UART_SetConfig+0xa0>
 8006f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b8d      	ldr	r3, [pc, #564]	@ (8007160 <UART_SetConfig+0x2d0>)
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d104      	bne.n	8006f3a <UART_SetConfig+0xaa>
 8006f30:	f7fe f9d6 	bl	80052e0 <HAL_RCC_GetPCLK2Freq>
 8006f34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f38:	e003      	b.n	8006f42 <UART_SetConfig+0xb2>
 8006f3a:	f7fe f9bd 	bl	80052b8 <HAL_RCC_GetPCLK1Freq>
 8006f3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f4c:	f040 810c 	bne.w	8007168 <UART_SetConfig+0x2d8>
 8006f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f54:	2200      	movs	r2, #0
 8006f56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f62:	4622      	mov	r2, r4
 8006f64:	462b      	mov	r3, r5
 8006f66:	1891      	adds	r1, r2, r2
 8006f68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f6a:	415b      	adcs	r3, r3
 8006f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f72:	4621      	mov	r1, r4
 8006f74:	eb12 0801 	adds.w	r8, r2, r1
 8006f78:	4629      	mov	r1, r5
 8006f7a:	eb43 0901 	adc.w	r9, r3, r1
 8006f7e:	f04f 0200 	mov.w	r2, #0
 8006f82:	f04f 0300 	mov.w	r3, #0
 8006f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f92:	4690      	mov	r8, r2
 8006f94:	4699      	mov	r9, r3
 8006f96:	4623      	mov	r3, r4
 8006f98:	eb18 0303 	adds.w	r3, r8, r3
 8006f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fa0:	462b      	mov	r3, r5
 8006fa2:	eb49 0303 	adc.w	r3, r9, r3
 8006fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006fba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	18db      	adds	r3, r3, r3
 8006fc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	eb42 0303 	adc.w	r3, r2, r3
 8006fca:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006fd4:	f7f9 fe58 	bl	8000c88 <__aeabi_uldivmod>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4b61      	ldr	r3, [pc, #388]	@ (8007164 <UART_SetConfig+0x2d4>)
 8006fde:	fba3 2302 	umull	r2, r3, r3, r2
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	011c      	lsls	r4, r3, #4
 8006fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ff0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ff4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	464b      	mov	r3, r9
 8006ffc:	1891      	adds	r1, r2, r2
 8006ffe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007000:	415b      	adcs	r3, r3
 8007002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007004:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007008:	4641      	mov	r1, r8
 800700a:	eb12 0a01 	adds.w	sl, r2, r1
 800700e:	4649      	mov	r1, r9
 8007010:	eb43 0b01 	adc.w	fp, r3, r1
 8007014:	f04f 0200 	mov.w	r2, #0
 8007018:	f04f 0300 	mov.w	r3, #0
 800701c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007020:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007028:	4692      	mov	sl, r2
 800702a:	469b      	mov	fp, r3
 800702c:	4643      	mov	r3, r8
 800702e:	eb1a 0303 	adds.w	r3, sl, r3
 8007032:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007036:	464b      	mov	r3, r9
 8007038:	eb4b 0303 	adc.w	r3, fp, r3
 800703c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800704c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007050:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007054:	460b      	mov	r3, r1
 8007056:	18db      	adds	r3, r3, r3
 8007058:	643b      	str	r3, [r7, #64]	@ 0x40
 800705a:	4613      	mov	r3, r2
 800705c:	eb42 0303 	adc.w	r3, r2, r3
 8007060:	647b      	str	r3, [r7, #68]	@ 0x44
 8007062:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007066:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800706a:	f7f9 fe0d 	bl	8000c88 <__aeabi_uldivmod>
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	4611      	mov	r1, r2
 8007074:	4b3b      	ldr	r3, [pc, #236]	@ (8007164 <UART_SetConfig+0x2d4>)
 8007076:	fba3 2301 	umull	r2, r3, r3, r1
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	2264      	movs	r2, #100	@ 0x64
 800707e:	fb02 f303 	mul.w	r3, r2, r3
 8007082:	1acb      	subs	r3, r1, r3
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800708a:	4b36      	ldr	r3, [pc, #216]	@ (8007164 <UART_SetConfig+0x2d4>)
 800708c:	fba3 2302 	umull	r2, r3, r3, r2
 8007090:	095b      	lsrs	r3, r3, #5
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007098:	441c      	add	r4, r3
 800709a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070ac:	4642      	mov	r2, r8
 80070ae:	464b      	mov	r3, r9
 80070b0:	1891      	adds	r1, r2, r2
 80070b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070b4:	415b      	adcs	r3, r3
 80070b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070bc:	4641      	mov	r1, r8
 80070be:	1851      	adds	r1, r2, r1
 80070c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80070c2:	4649      	mov	r1, r9
 80070c4:	414b      	adcs	r3, r1
 80070c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	f04f 0300 	mov.w	r3, #0
 80070d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80070d4:	4659      	mov	r1, fp
 80070d6:	00cb      	lsls	r3, r1, #3
 80070d8:	4651      	mov	r1, sl
 80070da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070de:	4651      	mov	r1, sl
 80070e0:	00ca      	lsls	r2, r1, #3
 80070e2:	4610      	mov	r0, r2
 80070e4:	4619      	mov	r1, r3
 80070e6:	4603      	mov	r3, r0
 80070e8:	4642      	mov	r2, r8
 80070ea:	189b      	adds	r3, r3, r2
 80070ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070f0:	464b      	mov	r3, r9
 80070f2:	460a      	mov	r2, r1
 80070f4:	eb42 0303 	adc.w	r3, r2, r3
 80070f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007108:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800710c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007110:	460b      	mov	r3, r1
 8007112:	18db      	adds	r3, r3, r3
 8007114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007116:	4613      	mov	r3, r2
 8007118:	eb42 0303 	adc.w	r3, r2, r3
 800711c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800711e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007122:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007126:	f7f9 fdaf 	bl	8000c88 <__aeabi_uldivmod>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4b0d      	ldr	r3, [pc, #52]	@ (8007164 <UART_SetConfig+0x2d4>)
 8007130:	fba3 1302 	umull	r1, r3, r3, r2
 8007134:	095b      	lsrs	r3, r3, #5
 8007136:	2164      	movs	r1, #100	@ 0x64
 8007138:	fb01 f303 	mul.w	r3, r1, r3
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	3332      	adds	r3, #50	@ 0x32
 8007142:	4a08      	ldr	r2, [pc, #32]	@ (8007164 <UART_SetConfig+0x2d4>)
 8007144:	fba2 2303 	umull	r2, r3, r2, r3
 8007148:	095b      	lsrs	r3, r3, #5
 800714a:	f003 0207 	and.w	r2, r3, #7
 800714e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4422      	add	r2, r4
 8007156:	609a      	str	r2, [r3, #8]
 8007158:	e106      	b.n	8007368 <UART_SetConfig+0x4d8>
 800715a:	bf00      	nop
 800715c:	40011000 	.word	0x40011000
 8007160:	40011400 	.word	0x40011400
 8007164:	51eb851f 	.word	0x51eb851f
 8007168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800716c:	2200      	movs	r2, #0
 800716e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007172:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007176:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800717a:	4642      	mov	r2, r8
 800717c:	464b      	mov	r3, r9
 800717e:	1891      	adds	r1, r2, r2
 8007180:	6239      	str	r1, [r7, #32]
 8007182:	415b      	adcs	r3, r3
 8007184:	627b      	str	r3, [r7, #36]	@ 0x24
 8007186:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800718a:	4641      	mov	r1, r8
 800718c:	1854      	adds	r4, r2, r1
 800718e:	4649      	mov	r1, r9
 8007190:	eb43 0501 	adc.w	r5, r3, r1
 8007194:	f04f 0200 	mov.w	r2, #0
 8007198:	f04f 0300 	mov.w	r3, #0
 800719c:	00eb      	lsls	r3, r5, #3
 800719e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071a2:	00e2      	lsls	r2, r4, #3
 80071a4:	4614      	mov	r4, r2
 80071a6:	461d      	mov	r5, r3
 80071a8:	4643      	mov	r3, r8
 80071aa:	18e3      	adds	r3, r4, r3
 80071ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071b0:	464b      	mov	r3, r9
 80071b2:	eb45 0303 	adc.w	r3, r5, r3
 80071b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80071d6:	4629      	mov	r1, r5
 80071d8:	008b      	lsls	r3, r1, #2
 80071da:	4621      	mov	r1, r4
 80071dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071e0:	4621      	mov	r1, r4
 80071e2:	008a      	lsls	r2, r1, #2
 80071e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80071e8:	f7f9 fd4e 	bl	8000c88 <__aeabi_uldivmod>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4b60      	ldr	r3, [pc, #384]	@ (8007374 <UART_SetConfig+0x4e4>)
 80071f2:	fba3 2302 	umull	r2, r3, r3, r2
 80071f6:	095b      	lsrs	r3, r3, #5
 80071f8:	011c      	lsls	r4, r3, #4
 80071fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007204:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007208:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800720c:	4642      	mov	r2, r8
 800720e:	464b      	mov	r3, r9
 8007210:	1891      	adds	r1, r2, r2
 8007212:	61b9      	str	r1, [r7, #24]
 8007214:	415b      	adcs	r3, r3
 8007216:	61fb      	str	r3, [r7, #28]
 8007218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800721c:	4641      	mov	r1, r8
 800721e:	1851      	adds	r1, r2, r1
 8007220:	6139      	str	r1, [r7, #16]
 8007222:	4649      	mov	r1, r9
 8007224:	414b      	adcs	r3, r1
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	f04f 0200 	mov.w	r2, #0
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007234:	4659      	mov	r1, fp
 8007236:	00cb      	lsls	r3, r1, #3
 8007238:	4651      	mov	r1, sl
 800723a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800723e:	4651      	mov	r1, sl
 8007240:	00ca      	lsls	r2, r1, #3
 8007242:	4610      	mov	r0, r2
 8007244:	4619      	mov	r1, r3
 8007246:	4603      	mov	r3, r0
 8007248:	4642      	mov	r2, r8
 800724a:	189b      	adds	r3, r3, r2
 800724c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007250:	464b      	mov	r3, r9
 8007252:	460a      	mov	r2, r1
 8007254:	eb42 0303 	adc.w	r3, r2, r3
 8007258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800725c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007266:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	f04f 0300 	mov.w	r3, #0
 8007270:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007274:	4649      	mov	r1, r9
 8007276:	008b      	lsls	r3, r1, #2
 8007278:	4641      	mov	r1, r8
 800727a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800727e:	4641      	mov	r1, r8
 8007280:	008a      	lsls	r2, r1, #2
 8007282:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007286:	f7f9 fcff 	bl	8000c88 <__aeabi_uldivmod>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4611      	mov	r1, r2
 8007290:	4b38      	ldr	r3, [pc, #224]	@ (8007374 <UART_SetConfig+0x4e4>)
 8007292:	fba3 2301 	umull	r2, r3, r3, r1
 8007296:	095b      	lsrs	r3, r3, #5
 8007298:	2264      	movs	r2, #100	@ 0x64
 800729a:	fb02 f303 	mul.w	r3, r2, r3
 800729e:	1acb      	subs	r3, r1, r3
 80072a0:	011b      	lsls	r3, r3, #4
 80072a2:	3332      	adds	r3, #50	@ 0x32
 80072a4:	4a33      	ldr	r2, [pc, #204]	@ (8007374 <UART_SetConfig+0x4e4>)
 80072a6:	fba2 2303 	umull	r2, r3, r2, r3
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072b0:	441c      	add	r4, r3
 80072b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072b6:	2200      	movs	r2, #0
 80072b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80072ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80072bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072c0:	4642      	mov	r2, r8
 80072c2:	464b      	mov	r3, r9
 80072c4:	1891      	adds	r1, r2, r2
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	415b      	adcs	r3, r3
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072d0:	4641      	mov	r1, r8
 80072d2:	1851      	adds	r1, r2, r1
 80072d4:	6039      	str	r1, [r7, #0]
 80072d6:	4649      	mov	r1, r9
 80072d8:	414b      	adcs	r3, r1
 80072da:	607b      	str	r3, [r7, #4]
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072e8:	4659      	mov	r1, fp
 80072ea:	00cb      	lsls	r3, r1, #3
 80072ec:	4651      	mov	r1, sl
 80072ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072f2:	4651      	mov	r1, sl
 80072f4:	00ca      	lsls	r2, r1, #3
 80072f6:	4610      	mov	r0, r2
 80072f8:	4619      	mov	r1, r3
 80072fa:	4603      	mov	r3, r0
 80072fc:	4642      	mov	r2, r8
 80072fe:	189b      	adds	r3, r3, r2
 8007300:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007302:	464b      	mov	r3, r9
 8007304:	460a      	mov	r2, r1
 8007306:	eb42 0303 	adc.w	r3, r2, r3
 800730a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	663b      	str	r3, [r7, #96]	@ 0x60
 8007316:	667a      	str	r2, [r7, #100]	@ 0x64
 8007318:	f04f 0200 	mov.w	r2, #0
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007324:	4649      	mov	r1, r9
 8007326:	008b      	lsls	r3, r1, #2
 8007328:	4641      	mov	r1, r8
 800732a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800732e:	4641      	mov	r1, r8
 8007330:	008a      	lsls	r2, r1, #2
 8007332:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007336:	f7f9 fca7 	bl	8000c88 <__aeabi_uldivmod>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4b0d      	ldr	r3, [pc, #52]	@ (8007374 <UART_SetConfig+0x4e4>)
 8007340:	fba3 1302 	umull	r1, r3, r3, r2
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	2164      	movs	r1, #100	@ 0x64
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	011b      	lsls	r3, r3, #4
 8007350:	3332      	adds	r3, #50	@ 0x32
 8007352:	4a08      	ldr	r2, [pc, #32]	@ (8007374 <UART_SetConfig+0x4e4>)
 8007354:	fba2 2303 	umull	r2, r3, r2, r3
 8007358:	095b      	lsrs	r3, r3, #5
 800735a:	f003 020f 	and.w	r2, r3, #15
 800735e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4422      	add	r2, r4
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	bf00      	nop
 800736a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800736e:	46bd      	mov	sp, r7
 8007370:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007374:	51eb851f 	.word	0x51eb851f

08007378 <malloc>:
 8007378:	4b02      	ldr	r3, [pc, #8]	@ (8007384 <malloc+0xc>)
 800737a:	4601      	mov	r1, r0
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	f000 b82d 	b.w	80073dc <_malloc_r>
 8007382:	bf00      	nop
 8007384:	2000005c 	.word	0x2000005c

08007388 <free>:
 8007388:	4b02      	ldr	r3, [pc, #8]	@ (8007394 <free+0xc>)
 800738a:	4601      	mov	r1, r0
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	f001 bcfb 	b.w	8008d88 <_free_r>
 8007392:	bf00      	nop
 8007394:	2000005c 	.word	0x2000005c

08007398 <sbrk_aligned>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	4e0f      	ldr	r6, [pc, #60]	@ (80073d8 <sbrk_aligned+0x40>)
 800739c:	460c      	mov	r4, r1
 800739e:	6831      	ldr	r1, [r6, #0]
 80073a0:	4605      	mov	r5, r0
 80073a2:	b911      	cbnz	r1, 80073aa <sbrk_aligned+0x12>
 80073a4:	f000 fe44 	bl	8008030 <_sbrk_r>
 80073a8:	6030      	str	r0, [r6, #0]
 80073aa:	4621      	mov	r1, r4
 80073ac:	4628      	mov	r0, r5
 80073ae:	f000 fe3f 	bl	8008030 <_sbrk_r>
 80073b2:	1c43      	adds	r3, r0, #1
 80073b4:	d103      	bne.n	80073be <sbrk_aligned+0x26>
 80073b6:	f04f 34ff 	mov.w	r4, #4294967295
 80073ba:	4620      	mov	r0, r4
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
 80073be:	1cc4      	adds	r4, r0, #3
 80073c0:	f024 0403 	bic.w	r4, r4, #3
 80073c4:	42a0      	cmp	r0, r4
 80073c6:	d0f8      	beq.n	80073ba <sbrk_aligned+0x22>
 80073c8:	1a21      	subs	r1, r4, r0
 80073ca:	4628      	mov	r0, r5
 80073cc:	f000 fe30 	bl	8008030 <_sbrk_r>
 80073d0:	3001      	adds	r0, #1
 80073d2:	d1f2      	bne.n	80073ba <sbrk_aligned+0x22>
 80073d4:	e7ef      	b.n	80073b6 <sbrk_aligned+0x1e>
 80073d6:	bf00      	nop
 80073d8:	20000650 	.word	0x20000650

080073dc <_malloc_r>:
 80073dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e0:	1ccd      	adds	r5, r1, #3
 80073e2:	f025 0503 	bic.w	r5, r5, #3
 80073e6:	3508      	adds	r5, #8
 80073e8:	2d0c      	cmp	r5, #12
 80073ea:	bf38      	it	cc
 80073ec:	250c      	movcc	r5, #12
 80073ee:	2d00      	cmp	r5, #0
 80073f0:	4606      	mov	r6, r0
 80073f2:	db01      	blt.n	80073f8 <_malloc_r+0x1c>
 80073f4:	42a9      	cmp	r1, r5
 80073f6:	d904      	bls.n	8007402 <_malloc_r+0x26>
 80073f8:	230c      	movs	r3, #12
 80073fa:	6033      	str	r3, [r6, #0]
 80073fc:	2000      	movs	r0, #0
 80073fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007402:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074d8 <_malloc_r+0xfc>
 8007406:	f000 f869 	bl	80074dc <__malloc_lock>
 800740a:	f8d8 3000 	ldr.w	r3, [r8]
 800740e:	461c      	mov	r4, r3
 8007410:	bb44      	cbnz	r4, 8007464 <_malloc_r+0x88>
 8007412:	4629      	mov	r1, r5
 8007414:	4630      	mov	r0, r6
 8007416:	f7ff ffbf 	bl	8007398 <sbrk_aligned>
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	4604      	mov	r4, r0
 800741e:	d158      	bne.n	80074d2 <_malloc_r+0xf6>
 8007420:	f8d8 4000 	ldr.w	r4, [r8]
 8007424:	4627      	mov	r7, r4
 8007426:	2f00      	cmp	r7, #0
 8007428:	d143      	bne.n	80074b2 <_malloc_r+0xd6>
 800742a:	2c00      	cmp	r4, #0
 800742c:	d04b      	beq.n	80074c6 <_malloc_r+0xea>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	4639      	mov	r1, r7
 8007432:	4630      	mov	r0, r6
 8007434:	eb04 0903 	add.w	r9, r4, r3
 8007438:	f000 fdfa 	bl	8008030 <_sbrk_r>
 800743c:	4581      	cmp	r9, r0
 800743e:	d142      	bne.n	80074c6 <_malloc_r+0xea>
 8007440:	6821      	ldr	r1, [r4, #0]
 8007442:	1a6d      	subs	r5, r5, r1
 8007444:	4629      	mov	r1, r5
 8007446:	4630      	mov	r0, r6
 8007448:	f7ff ffa6 	bl	8007398 <sbrk_aligned>
 800744c:	3001      	adds	r0, #1
 800744e:	d03a      	beq.n	80074c6 <_malloc_r+0xea>
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	442b      	add	r3, r5
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	f8d8 3000 	ldr.w	r3, [r8]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	bb62      	cbnz	r2, 80074b8 <_malloc_r+0xdc>
 800745e:	f8c8 7000 	str.w	r7, [r8]
 8007462:	e00f      	b.n	8007484 <_malloc_r+0xa8>
 8007464:	6822      	ldr	r2, [r4, #0]
 8007466:	1b52      	subs	r2, r2, r5
 8007468:	d420      	bmi.n	80074ac <_malloc_r+0xd0>
 800746a:	2a0b      	cmp	r2, #11
 800746c:	d917      	bls.n	800749e <_malloc_r+0xc2>
 800746e:	1961      	adds	r1, r4, r5
 8007470:	42a3      	cmp	r3, r4
 8007472:	6025      	str	r5, [r4, #0]
 8007474:	bf18      	it	ne
 8007476:	6059      	strne	r1, [r3, #4]
 8007478:	6863      	ldr	r3, [r4, #4]
 800747a:	bf08      	it	eq
 800747c:	f8c8 1000 	streq.w	r1, [r8]
 8007480:	5162      	str	r2, [r4, r5]
 8007482:	604b      	str	r3, [r1, #4]
 8007484:	4630      	mov	r0, r6
 8007486:	f000 f82f 	bl	80074e8 <__malloc_unlock>
 800748a:	f104 000b 	add.w	r0, r4, #11
 800748e:	1d23      	adds	r3, r4, #4
 8007490:	f020 0007 	bic.w	r0, r0, #7
 8007494:	1ac2      	subs	r2, r0, r3
 8007496:	bf1c      	itt	ne
 8007498:	1a1b      	subne	r3, r3, r0
 800749a:	50a3      	strne	r3, [r4, r2]
 800749c:	e7af      	b.n	80073fe <_malloc_r+0x22>
 800749e:	6862      	ldr	r2, [r4, #4]
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	bf0c      	ite	eq
 80074a4:	f8c8 2000 	streq.w	r2, [r8]
 80074a8:	605a      	strne	r2, [r3, #4]
 80074aa:	e7eb      	b.n	8007484 <_malloc_r+0xa8>
 80074ac:	4623      	mov	r3, r4
 80074ae:	6864      	ldr	r4, [r4, #4]
 80074b0:	e7ae      	b.n	8007410 <_malloc_r+0x34>
 80074b2:	463c      	mov	r4, r7
 80074b4:	687f      	ldr	r7, [r7, #4]
 80074b6:	e7b6      	b.n	8007426 <_malloc_r+0x4a>
 80074b8:	461a      	mov	r2, r3
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	42a3      	cmp	r3, r4
 80074be:	d1fb      	bne.n	80074b8 <_malloc_r+0xdc>
 80074c0:	2300      	movs	r3, #0
 80074c2:	6053      	str	r3, [r2, #4]
 80074c4:	e7de      	b.n	8007484 <_malloc_r+0xa8>
 80074c6:	230c      	movs	r3, #12
 80074c8:	6033      	str	r3, [r6, #0]
 80074ca:	4630      	mov	r0, r6
 80074cc:	f000 f80c 	bl	80074e8 <__malloc_unlock>
 80074d0:	e794      	b.n	80073fc <_malloc_r+0x20>
 80074d2:	6005      	str	r5, [r0, #0]
 80074d4:	e7d6      	b.n	8007484 <_malloc_r+0xa8>
 80074d6:	bf00      	nop
 80074d8:	20000654 	.word	0x20000654

080074dc <__malloc_lock>:
 80074dc:	4801      	ldr	r0, [pc, #4]	@ (80074e4 <__malloc_lock+0x8>)
 80074de:	f000 bdf4 	b.w	80080ca <__retarget_lock_acquire_recursive>
 80074e2:	bf00      	nop
 80074e4:	20000798 	.word	0x20000798

080074e8 <__malloc_unlock>:
 80074e8:	4801      	ldr	r0, [pc, #4]	@ (80074f0 <__malloc_unlock+0x8>)
 80074ea:	f000 bdef 	b.w	80080cc <__retarget_lock_release_recursive>
 80074ee:	bf00      	nop
 80074f0:	20000798 	.word	0x20000798

080074f4 <__cvt>:
 80074f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f8:	ec57 6b10 	vmov	r6, r7, d0
 80074fc:	2f00      	cmp	r7, #0
 80074fe:	460c      	mov	r4, r1
 8007500:	4619      	mov	r1, r3
 8007502:	463b      	mov	r3, r7
 8007504:	bfbb      	ittet	lt
 8007506:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800750a:	461f      	movlt	r7, r3
 800750c:	2300      	movge	r3, #0
 800750e:	232d      	movlt	r3, #45	@ 0x2d
 8007510:	700b      	strb	r3, [r1, #0]
 8007512:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007514:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007518:	4691      	mov	r9, r2
 800751a:	f023 0820 	bic.w	r8, r3, #32
 800751e:	bfbc      	itt	lt
 8007520:	4632      	movlt	r2, r6
 8007522:	4616      	movlt	r6, r2
 8007524:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007528:	d005      	beq.n	8007536 <__cvt+0x42>
 800752a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800752e:	d100      	bne.n	8007532 <__cvt+0x3e>
 8007530:	3401      	adds	r4, #1
 8007532:	2102      	movs	r1, #2
 8007534:	e000      	b.n	8007538 <__cvt+0x44>
 8007536:	2103      	movs	r1, #3
 8007538:	ab03      	add	r3, sp, #12
 800753a:	9301      	str	r3, [sp, #4]
 800753c:	ab02      	add	r3, sp, #8
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	ec47 6b10 	vmov	d0, r6, r7
 8007544:	4653      	mov	r3, sl
 8007546:	4622      	mov	r2, r4
 8007548:	f000 fe5a 	bl	8008200 <_dtoa_r>
 800754c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007550:	4605      	mov	r5, r0
 8007552:	d119      	bne.n	8007588 <__cvt+0x94>
 8007554:	f019 0f01 	tst.w	r9, #1
 8007558:	d00e      	beq.n	8007578 <__cvt+0x84>
 800755a:	eb00 0904 	add.w	r9, r0, r4
 800755e:	2200      	movs	r2, #0
 8007560:	2300      	movs	r3, #0
 8007562:	4630      	mov	r0, r6
 8007564:	4639      	mov	r1, r7
 8007566:	f7f9 facf 	bl	8000b08 <__aeabi_dcmpeq>
 800756a:	b108      	cbz	r0, 8007570 <__cvt+0x7c>
 800756c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007570:	2230      	movs	r2, #48	@ 0x30
 8007572:	9b03      	ldr	r3, [sp, #12]
 8007574:	454b      	cmp	r3, r9
 8007576:	d31e      	bcc.n	80075b6 <__cvt+0xc2>
 8007578:	9b03      	ldr	r3, [sp, #12]
 800757a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800757c:	1b5b      	subs	r3, r3, r5
 800757e:	4628      	mov	r0, r5
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	b004      	add	sp, #16
 8007584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007588:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800758c:	eb00 0904 	add.w	r9, r0, r4
 8007590:	d1e5      	bne.n	800755e <__cvt+0x6a>
 8007592:	7803      	ldrb	r3, [r0, #0]
 8007594:	2b30      	cmp	r3, #48	@ 0x30
 8007596:	d10a      	bne.n	80075ae <__cvt+0xba>
 8007598:	2200      	movs	r2, #0
 800759a:	2300      	movs	r3, #0
 800759c:	4630      	mov	r0, r6
 800759e:	4639      	mov	r1, r7
 80075a0:	f7f9 fab2 	bl	8000b08 <__aeabi_dcmpeq>
 80075a4:	b918      	cbnz	r0, 80075ae <__cvt+0xba>
 80075a6:	f1c4 0401 	rsb	r4, r4, #1
 80075aa:	f8ca 4000 	str.w	r4, [sl]
 80075ae:	f8da 3000 	ldr.w	r3, [sl]
 80075b2:	4499      	add	r9, r3
 80075b4:	e7d3      	b.n	800755e <__cvt+0x6a>
 80075b6:	1c59      	adds	r1, r3, #1
 80075b8:	9103      	str	r1, [sp, #12]
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	e7d9      	b.n	8007572 <__cvt+0x7e>

080075be <__exponent>:
 80075be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075c0:	2900      	cmp	r1, #0
 80075c2:	bfba      	itte	lt
 80075c4:	4249      	neglt	r1, r1
 80075c6:	232d      	movlt	r3, #45	@ 0x2d
 80075c8:	232b      	movge	r3, #43	@ 0x2b
 80075ca:	2909      	cmp	r1, #9
 80075cc:	7002      	strb	r2, [r0, #0]
 80075ce:	7043      	strb	r3, [r0, #1]
 80075d0:	dd29      	ble.n	8007626 <__exponent+0x68>
 80075d2:	f10d 0307 	add.w	r3, sp, #7
 80075d6:	461d      	mov	r5, r3
 80075d8:	270a      	movs	r7, #10
 80075da:	461a      	mov	r2, r3
 80075dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80075e0:	fb07 1416 	mls	r4, r7, r6, r1
 80075e4:	3430      	adds	r4, #48	@ 0x30
 80075e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80075ea:	460c      	mov	r4, r1
 80075ec:	2c63      	cmp	r4, #99	@ 0x63
 80075ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80075f2:	4631      	mov	r1, r6
 80075f4:	dcf1      	bgt.n	80075da <__exponent+0x1c>
 80075f6:	3130      	adds	r1, #48	@ 0x30
 80075f8:	1e94      	subs	r4, r2, #2
 80075fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075fe:	1c41      	adds	r1, r0, #1
 8007600:	4623      	mov	r3, r4
 8007602:	42ab      	cmp	r3, r5
 8007604:	d30a      	bcc.n	800761c <__exponent+0x5e>
 8007606:	f10d 0309 	add.w	r3, sp, #9
 800760a:	1a9b      	subs	r3, r3, r2
 800760c:	42ac      	cmp	r4, r5
 800760e:	bf88      	it	hi
 8007610:	2300      	movhi	r3, #0
 8007612:	3302      	adds	r3, #2
 8007614:	4403      	add	r3, r0
 8007616:	1a18      	subs	r0, r3, r0
 8007618:	b003      	add	sp, #12
 800761a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800761c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007620:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007624:	e7ed      	b.n	8007602 <__exponent+0x44>
 8007626:	2330      	movs	r3, #48	@ 0x30
 8007628:	3130      	adds	r1, #48	@ 0x30
 800762a:	7083      	strb	r3, [r0, #2]
 800762c:	70c1      	strb	r1, [r0, #3]
 800762e:	1d03      	adds	r3, r0, #4
 8007630:	e7f1      	b.n	8007616 <__exponent+0x58>
	...

08007634 <_printf_float>:
 8007634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007638:	b08d      	sub	sp, #52	@ 0x34
 800763a:	460c      	mov	r4, r1
 800763c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007640:	4616      	mov	r6, r2
 8007642:	461f      	mov	r7, r3
 8007644:	4605      	mov	r5, r0
 8007646:	f000 fcbb 	bl	8007fc0 <_localeconv_r>
 800764a:	6803      	ldr	r3, [r0, #0]
 800764c:	9304      	str	r3, [sp, #16]
 800764e:	4618      	mov	r0, r3
 8007650:	f7f8 fe2e 	bl	80002b0 <strlen>
 8007654:	2300      	movs	r3, #0
 8007656:	930a      	str	r3, [sp, #40]	@ 0x28
 8007658:	f8d8 3000 	ldr.w	r3, [r8]
 800765c:	9005      	str	r0, [sp, #20]
 800765e:	3307      	adds	r3, #7
 8007660:	f023 0307 	bic.w	r3, r3, #7
 8007664:	f103 0208 	add.w	r2, r3, #8
 8007668:	f894 a018 	ldrb.w	sl, [r4, #24]
 800766c:	f8d4 b000 	ldr.w	fp, [r4]
 8007670:	f8c8 2000 	str.w	r2, [r8]
 8007674:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007678:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800767c:	9307      	str	r3, [sp, #28]
 800767e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007682:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800768a:	4b9c      	ldr	r3, [pc, #624]	@ (80078fc <_printf_float+0x2c8>)
 800768c:	f04f 32ff 	mov.w	r2, #4294967295
 8007690:	f7f9 fa6c 	bl	8000b6c <__aeabi_dcmpun>
 8007694:	bb70      	cbnz	r0, 80076f4 <_printf_float+0xc0>
 8007696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800769a:	4b98      	ldr	r3, [pc, #608]	@ (80078fc <_printf_float+0x2c8>)
 800769c:	f04f 32ff 	mov.w	r2, #4294967295
 80076a0:	f7f9 fa46 	bl	8000b30 <__aeabi_dcmple>
 80076a4:	bb30      	cbnz	r0, 80076f4 <_printf_float+0xc0>
 80076a6:	2200      	movs	r2, #0
 80076a8:	2300      	movs	r3, #0
 80076aa:	4640      	mov	r0, r8
 80076ac:	4649      	mov	r1, r9
 80076ae:	f7f9 fa35 	bl	8000b1c <__aeabi_dcmplt>
 80076b2:	b110      	cbz	r0, 80076ba <_printf_float+0x86>
 80076b4:	232d      	movs	r3, #45	@ 0x2d
 80076b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076ba:	4a91      	ldr	r2, [pc, #580]	@ (8007900 <_printf_float+0x2cc>)
 80076bc:	4b91      	ldr	r3, [pc, #580]	@ (8007904 <_printf_float+0x2d0>)
 80076be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80076c2:	bf94      	ite	ls
 80076c4:	4690      	movls	r8, r2
 80076c6:	4698      	movhi	r8, r3
 80076c8:	2303      	movs	r3, #3
 80076ca:	6123      	str	r3, [r4, #16]
 80076cc:	f02b 0304 	bic.w	r3, fp, #4
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	f04f 0900 	mov.w	r9, #0
 80076d6:	9700      	str	r7, [sp, #0]
 80076d8:	4633      	mov	r3, r6
 80076da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80076dc:	4621      	mov	r1, r4
 80076de:	4628      	mov	r0, r5
 80076e0:	f000 f9d2 	bl	8007a88 <_printf_common>
 80076e4:	3001      	adds	r0, #1
 80076e6:	f040 808d 	bne.w	8007804 <_printf_float+0x1d0>
 80076ea:	f04f 30ff 	mov.w	r0, #4294967295
 80076ee:	b00d      	add	sp, #52	@ 0x34
 80076f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f4:	4642      	mov	r2, r8
 80076f6:	464b      	mov	r3, r9
 80076f8:	4640      	mov	r0, r8
 80076fa:	4649      	mov	r1, r9
 80076fc:	f7f9 fa36 	bl	8000b6c <__aeabi_dcmpun>
 8007700:	b140      	cbz	r0, 8007714 <_printf_float+0xe0>
 8007702:	464b      	mov	r3, r9
 8007704:	2b00      	cmp	r3, #0
 8007706:	bfbc      	itt	lt
 8007708:	232d      	movlt	r3, #45	@ 0x2d
 800770a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800770e:	4a7e      	ldr	r2, [pc, #504]	@ (8007908 <_printf_float+0x2d4>)
 8007710:	4b7e      	ldr	r3, [pc, #504]	@ (800790c <_printf_float+0x2d8>)
 8007712:	e7d4      	b.n	80076be <_printf_float+0x8a>
 8007714:	6863      	ldr	r3, [r4, #4]
 8007716:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800771a:	9206      	str	r2, [sp, #24]
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	d13b      	bne.n	8007798 <_printf_float+0x164>
 8007720:	2306      	movs	r3, #6
 8007722:	6063      	str	r3, [r4, #4]
 8007724:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007728:	2300      	movs	r3, #0
 800772a:	6022      	str	r2, [r4, #0]
 800772c:	9303      	str	r3, [sp, #12]
 800772e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007730:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007734:	ab09      	add	r3, sp, #36	@ 0x24
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	6861      	ldr	r1, [r4, #4]
 800773a:	ec49 8b10 	vmov	d0, r8, r9
 800773e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007742:	4628      	mov	r0, r5
 8007744:	f7ff fed6 	bl	80074f4 <__cvt>
 8007748:	9b06      	ldr	r3, [sp, #24]
 800774a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800774c:	2b47      	cmp	r3, #71	@ 0x47
 800774e:	4680      	mov	r8, r0
 8007750:	d129      	bne.n	80077a6 <_printf_float+0x172>
 8007752:	1cc8      	adds	r0, r1, #3
 8007754:	db02      	blt.n	800775c <_printf_float+0x128>
 8007756:	6863      	ldr	r3, [r4, #4]
 8007758:	4299      	cmp	r1, r3
 800775a:	dd41      	ble.n	80077e0 <_printf_float+0x1ac>
 800775c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007760:	fa5f fa8a 	uxtb.w	sl, sl
 8007764:	3901      	subs	r1, #1
 8007766:	4652      	mov	r2, sl
 8007768:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800776c:	9109      	str	r1, [sp, #36]	@ 0x24
 800776e:	f7ff ff26 	bl	80075be <__exponent>
 8007772:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007774:	1813      	adds	r3, r2, r0
 8007776:	2a01      	cmp	r2, #1
 8007778:	4681      	mov	r9, r0
 800777a:	6123      	str	r3, [r4, #16]
 800777c:	dc02      	bgt.n	8007784 <_printf_float+0x150>
 800777e:	6822      	ldr	r2, [r4, #0]
 8007780:	07d2      	lsls	r2, r2, #31
 8007782:	d501      	bpl.n	8007788 <_printf_float+0x154>
 8007784:	3301      	adds	r3, #1
 8007786:	6123      	str	r3, [r4, #16]
 8007788:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0a2      	beq.n	80076d6 <_printf_float+0xa2>
 8007790:	232d      	movs	r3, #45	@ 0x2d
 8007792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007796:	e79e      	b.n	80076d6 <_printf_float+0xa2>
 8007798:	9a06      	ldr	r2, [sp, #24]
 800779a:	2a47      	cmp	r2, #71	@ 0x47
 800779c:	d1c2      	bne.n	8007724 <_printf_float+0xf0>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1c0      	bne.n	8007724 <_printf_float+0xf0>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e7bd      	b.n	8007722 <_printf_float+0xee>
 80077a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077aa:	d9db      	bls.n	8007764 <_printf_float+0x130>
 80077ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80077b0:	d118      	bne.n	80077e4 <_printf_float+0x1b0>
 80077b2:	2900      	cmp	r1, #0
 80077b4:	6863      	ldr	r3, [r4, #4]
 80077b6:	dd0b      	ble.n	80077d0 <_printf_float+0x19c>
 80077b8:	6121      	str	r1, [r4, #16]
 80077ba:	b913      	cbnz	r3, 80077c2 <_printf_float+0x18e>
 80077bc:	6822      	ldr	r2, [r4, #0]
 80077be:	07d0      	lsls	r0, r2, #31
 80077c0:	d502      	bpl.n	80077c8 <_printf_float+0x194>
 80077c2:	3301      	adds	r3, #1
 80077c4:	440b      	add	r3, r1
 80077c6:	6123      	str	r3, [r4, #16]
 80077c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80077ca:	f04f 0900 	mov.w	r9, #0
 80077ce:	e7db      	b.n	8007788 <_printf_float+0x154>
 80077d0:	b913      	cbnz	r3, 80077d8 <_printf_float+0x1a4>
 80077d2:	6822      	ldr	r2, [r4, #0]
 80077d4:	07d2      	lsls	r2, r2, #31
 80077d6:	d501      	bpl.n	80077dc <_printf_float+0x1a8>
 80077d8:	3302      	adds	r3, #2
 80077da:	e7f4      	b.n	80077c6 <_printf_float+0x192>
 80077dc:	2301      	movs	r3, #1
 80077de:	e7f2      	b.n	80077c6 <_printf_float+0x192>
 80077e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80077e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077e6:	4299      	cmp	r1, r3
 80077e8:	db05      	blt.n	80077f6 <_printf_float+0x1c2>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	6121      	str	r1, [r4, #16]
 80077ee:	07d8      	lsls	r0, r3, #31
 80077f0:	d5ea      	bpl.n	80077c8 <_printf_float+0x194>
 80077f2:	1c4b      	adds	r3, r1, #1
 80077f4:	e7e7      	b.n	80077c6 <_printf_float+0x192>
 80077f6:	2900      	cmp	r1, #0
 80077f8:	bfd4      	ite	le
 80077fa:	f1c1 0202 	rsble	r2, r1, #2
 80077fe:	2201      	movgt	r2, #1
 8007800:	4413      	add	r3, r2
 8007802:	e7e0      	b.n	80077c6 <_printf_float+0x192>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	055a      	lsls	r2, r3, #21
 8007808:	d407      	bmi.n	800781a <_printf_float+0x1e6>
 800780a:	6923      	ldr	r3, [r4, #16]
 800780c:	4642      	mov	r2, r8
 800780e:	4631      	mov	r1, r6
 8007810:	4628      	mov	r0, r5
 8007812:	47b8      	blx	r7
 8007814:	3001      	adds	r0, #1
 8007816:	d12b      	bne.n	8007870 <_printf_float+0x23c>
 8007818:	e767      	b.n	80076ea <_printf_float+0xb6>
 800781a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800781e:	f240 80dd 	bls.w	80079dc <_printf_float+0x3a8>
 8007822:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007826:	2200      	movs	r2, #0
 8007828:	2300      	movs	r3, #0
 800782a:	f7f9 f96d 	bl	8000b08 <__aeabi_dcmpeq>
 800782e:	2800      	cmp	r0, #0
 8007830:	d033      	beq.n	800789a <_printf_float+0x266>
 8007832:	4a37      	ldr	r2, [pc, #220]	@ (8007910 <_printf_float+0x2dc>)
 8007834:	2301      	movs	r3, #1
 8007836:	4631      	mov	r1, r6
 8007838:	4628      	mov	r0, r5
 800783a:	47b8      	blx	r7
 800783c:	3001      	adds	r0, #1
 800783e:	f43f af54 	beq.w	80076ea <_printf_float+0xb6>
 8007842:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007846:	4543      	cmp	r3, r8
 8007848:	db02      	blt.n	8007850 <_printf_float+0x21c>
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	07d8      	lsls	r0, r3, #31
 800784e:	d50f      	bpl.n	8007870 <_printf_float+0x23c>
 8007850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007854:	4631      	mov	r1, r6
 8007856:	4628      	mov	r0, r5
 8007858:	47b8      	blx	r7
 800785a:	3001      	adds	r0, #1
 800785c:	f43f af45 	beq.w	80076ea <_printf_float+0xb6>
 8007860:	f04f 0900 	mov.w	r9, #0
 8007864:	f108 38ff 	add.w	r8, r8, #4294967295
 8007868:	f104 0a1a 	add.w	sl, r4, #26
 800786c:	45c8      	cmp	r8, r9
 800786e:	dc09      	bgt.n	8007884 <_printf_float+0x250>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	079b      	lsls	r3, r3, #30
 8007874:	f100 8103 	bmi.w	8007a7e <_printf_float+0x44a>
 8007878:	68e0      	ldr	r0, [r4, #12]
 800787a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800787c:	4298      	cmp	r0, r3
 800787e:	bfb8      	it	lt
 8007880:	4618      	movlt	r0, r3
 8007882:	e734      	b.n	80076ee <_printf_float+0xba>
 8007884:	2301      	movs	r3, #1
 8007886:	4652      	mov	r2, sl
 8007888:	4631      	mov	r1, r6
 800788a:	4628      	mov	r0, r5
 800788c:	47b8      	blx	r7
 800788e:	3001      	adds	r0, #1
 8007890:	f43f af2b 	beq.w	80076ea <_printf_float+0xb6>
 8007894:	f109 0901 	add.w	r9, r9, #1
 8007898:	e7e8      	b.n	800786c <_printf_float+0x238>
 800789a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	dc39      	bgt.n	8007914 <_printf_float+0x2e0>
 80078a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007910 <_printf_float+0x2dc>)
 80078a2:	2301      	movs	r3, #1
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	f43f af1d 	beq.w	80076ea <_printf_float+0xb6>
 80078b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80078b4:	ea59 0303 	orrs.w	r3, r9, r3
 80078b8:	d102      	bne.n	80078c0 <_printf_float+0x28c>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	07d9      	lsls	r1, r3, #31
 80078be:	d5d7      	bpl.n	8007870 <_printf_float+0x23c>
 80078c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078c4:	4631      	mov	r1, r6
 80078c6:	4628      	mov	r0, r5
 80078c8:	47b8      	blx	r7
 80078ca:	3001      	adds	r0, #1
 80078cc:	f43f af0d 	beq.w	80076ea <_printf_float+0xb6>
 80078d0:	f04f 0a00 	mov.w	sl, #0
 80078d4:	f104 0b1a 	add.w	fp, r4, #26
 80078d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078da:	425b      	negs	r3, r3
 80078dc:	4553      	cmp	r3, sl
 80078de:	dc01      	bgt.n	80078e4 <_printf_float+0x2b0>
 80078e0:	464b      	mov	r3, r9
 80078e2:	e793      	b.n	800780c <_printf_float+0x1d8>
 80078e4:	2301      	movs	r3, #1
 80078e6:	465a      	mov	r2, fp
 80078e8:	4631      	mov	r1, r6
 80078ea:	4628      	mov	r0, r5
 80078ec:	47b8      	blx	r7
 80078ee:	3001      	adds	r0, #1
 80078f0:	f43f aefb 	beq.w	80076ea <_printf_float+0xb6>
 80078f4:	f10a 0a01 	add.w	sl, sl, #1
 80078f8:	e7ee      	b.n	80078d8 <_printf_float+0x2a4>
 80078fa:	bf00      	nop
 80078fc:	7fefffff 	.word	0x7fefffff
 8007900:	0800a0f8 	.word	0x0800a0f8
 8007904:	0800a0fc 	.word	0x0800a0fc
 8007908:	0800a100 	.word	0x0800a100
 800790c:	0800a104 	.word	0x0800a104
 8007910:	0800a108 	.word	0x0800a108
 8007914:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007916:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800791a:	4553      	cmp	r3, sl
 800791c:	bfa8      	it	ge
 800791e:	4653      	movge	r3, sl
 8007920:	2b00      	cmp	r3, #0
 8007922:	4699      	mov	r9, r3
 8007924:	dc36      	bgt.n	8007994 <_printf_float+0x360>
 8007926:	f04f 0b00 	mov.w	fp, #0
 800792a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800792e:	f104 021a 	add.w	r2, r4, #26
 8007932:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007934:	9306      	str	r3, [sp, #24]
 8007936:	eba3 0309 	sub.w	r3, r3, r9
 800793a:	455b      	cmp	r3, fp
 800793c:	dc31      	bgt.n	80079a2 <_printf_float+0x36e>
 800793e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007940:	459a      	cmp	sl, r3
 8007942:	dc3a      	bgt.n	80079ba <_printf_float+0x386>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	07da      	lsls	r2, r3, #31
 8007948:	d437      	bmi.n	80079ba <_printf_float+0x386>
 800794a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800794c:	ebaa 0903 	sub.w	r9, sl, r3
 8007950:	9b06      	ldr	r3, [sp, #24]
 8007952:	ebaa 0303 	sub.w	r3, sl, r3
 8007956:	4599      	cmp	r9, r3
 8007958:	bfa8      	it	ge
 800795a:	4699      	movge	r9, r3
 800795c:	f1b9 0f00 	cmp.w	r9, #0
 8007960:	dc33      	bgt.n	80079ca <_printf_float+0x396>
 8007962:	f04f 0800 	mov.w	r8, #0
 8007966:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800796a:	f104 0b1a 	add.w	fp, r4, #26
 800796e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007970:	ebaa 0303 	sub.w	r3, sl, r3
 8007974:	eba3 0309 	sub.w	r3, r3, r9
 8007978:	4543      	cmp	r3, r8
 800797a:	f77f af79 	ble.w	8007870 <_printf_float+0x23c>
 800797e:	2301      	movs	r3, #1
 8007980:	465a      	mov	r2, fp
 8007982:	4631      	mov	r1, r6
 8007984:	4628      	mov	r0, r5
 8007986:	47b8      	blx	r7
 8007988:	3001      	adds	r0, #1
 800798a:	f43f aeae 	beq.w	80076ea <_printf_float+0xb6>
 800798e:	f108 0801 	add.w	r8, r8, #1
 8007992:	e7ec      	b.n	800796e <_printf_float+0x33a>
 8007994:	4642      	mov	r2, r8
 8007996:	4631      	mov	r1, r6
 8007998:	4628      	mov	r0, r5
 800799a:	47b8      	blx	r7
 800799c:	3001      	adds	r0, #1
 800799e:	d1c2      	bne.n	8007926 <_printf_float+0x2f2>
 80079a0:	e6a3      	b.n	80076ea <_printf_float+0xb6>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4631      	mov	r1, r6
 80079a6:	4628      	mov	r0, r5
 80079a8:	9206      	str	r2, [sp, #24]
 80079aa:	47b8      	blx	r7
 80079ac:	3001      	adds	r0, #1
 80079ae:	f43f ae9c 	beq.w	80076ea <_printf_float+0xb6>
 80079b2:	9a06      	ldr	r2, [sp, #24]
 80079b4:	f10b 0b01 	add.w	fp, fp, #1
 80079b8:	e7bb      	b.n	8007932 <_printf_float+0x2fe>
 80079ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079be:	4631      	mov	r1, r6
 80079c0:	4628      	mov	r0, r5
 80079c2:	47b8      	blx	r7
 80079c4:	3001      	adds	r0, #1
 80079c6:	d1c0      	bne.n	800794a <_printf_float+0x316>
 80079c8:	e68f      	b.n	80076ea <_printf_float+0xb6>
 80079ca:	9a06      	ldr	r2, [sp, #24]
 80079cc:	464b      	mov	r3, r9
 80079ce:	4442      	add	r2, r8
 80079d0:	4631      	mov	r1, r6
 80079d2:	4628      	mov	r0, r5
 80079d4:	47b8      	blx	r7
 80079d6:	3001      	adds	r0, #1
 80079d8:	d1c3      	bne.n	8007962 <_printf_float+0x32e>
 80079da:	e686      	b.n	80076ea <_printf_float+0xb6>
 80079dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079e0:	f1ba 0f01 	cmp.w	sl, #1
 80079e4:	dc01      	bgt.n	80079ea <_printf_float+0x3b6>
 80079e6:	07db      	lsls	r3, r3, #31
 80079e8:	d536      	bpl.n	8007a58 <_printf_float+0x424>
 80079ea:	2301      	movs	r3, #1
 80079ec:	4642      	mov	r2, r8
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f ae78 	beq.w	80076ea <_printf_float+0xb6>
 80079fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	47b8      	blx	r7
 8007a04:	3001      	adds	r0, #1
 8007a06:	f43f ae70 	beq.w	80076ea <_printf_float+0xb6>
 8007a0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a0e:	2200      	movs	r2, #0
 8007a10:	2300      	movs	r3, #0
 8007a12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a16:	f7f9 f877 	bl	8000b08 <__aeabi_dcmpeq>
 8007a1a:	b9c0      	cbnz	r0, 8007a4e <_printf_float+0x41a>
 8007a1c:	4653      	mov	r3, sl
 8007a1e:	f108 0201 	add.w	r2, r8, #1
 8007a22:	4631      	mov	r1, r6
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b8      	blx	r7
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d10c      	bne.n	8007a46 <_printf_float+0x412>
 8007a2c:	e65d      	b.n	80076ea <_printf_float+0xb6>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	465a      	mov	r2, fp
 8007a32:	4631      	mov	r1, r6
 8007a34:	4628      	mov	r0, r5
 8007a36:	47b8      	blx	r7
 8007a38:	3001      	adds	r0, #1
 8007a3a:	f43f ae56 	beq.w	80076ea <_printf_float+0xb6>
 8007a3e:	f108 0801 	add.w	r8, r8, #1
 8007a42:	45d0      	cmp	r8, sl
 8007a44:	dbf3      	blt.n	8007a2e <_printf_float+0x3fa>
 8007a46:	464b      	mov	r3, r9
 8007a48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a4c:	e6df      	b.n	800780e <_printf_float+0x1da>
 8007a4e:	f04f 0800 	mov.w	r8, #0
 8007a52:	f104 0b1a 	add.w	fp, r4, #26
 8007a56:	e7f4      	b.n	8007a42 <_printf_float+0x40e>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	4642      	mov	r2, r8
 8007a5c:	e7e1      	b.n	8007a22 <_printf_float+0x3ee>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	464a      	mov	r2, r9
 8007a62:	4631      	mov	r1, r6
 8007a64:	4628      	mov	r0, r5
 8007a66:	47b8      	blx	r7
 8007a68:	3001      	adds	r0, #1
 8007a6a:	f43f ae3e 	beq.w	80076ea <_printf_float+0xb6>
 8007a6e:	f108 0801 	add.w	r8, r8, #1
 8007a72:	68e3      	ldr	r3, [r4, #12]
 8007a74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a76:	1a5b      	subs	r3, r3, r1
 8007a78:	4543      	cmp	r3, r8
 8007a7a:	dcf0      	bgt.n	8007a5e <_printf_float+0x42a>
 8007a7c:	e6fc      	b.n	8007878 <_printf_float+0x244>
 8007a7e:	f04f 0800 	mov.w	r8, #0
 8007a82:	f104 0919 	add.w	r9, r4, #25
 8007a86:	e7f4      	b.n	8007a72 <_printf_float+0x43e>

08007a88 <_printf_common>:
 8007a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a8c:	4616      	mov	r6, r2
 8007a8e:	4698      	mov	r8, r3
 8007a90:	688a      	ldr	r2, [r1, #8]
 8007a92:	690b      	ldr	r3, [r1, #16]
 8007a94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	bfb8      	it	lt
 8007a9c:	4613      	movlt	r3, r2
 8007a9e:	6033      	str	r3, [r6, #0]
 8007aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	b10a      	cbz	r2, 8007aae <_printf_common+0x26>
 8007aaa:	3301      	adds	r3, #1
 8007aac:	6033      	str	r3, [r6, #0]
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	0699      	lsls	r1, r3, #26
 8007ab2:	bf42      	ittt	mi
 8007ab4:	6833      	ldrmi	r3, [r6, #0]
 8007ab6:	3302      	addmi	r3, #2
 8007ab8:	6033      	strmi	r3, [r6, #0]
 8007aba:	6825      	ldr	r5, [r4, #0]
 8007abc:	f015 0506 	ands.w	r5, r5, #6
 8007ac0:	d106      	bne.n	8007ad0 <_printf_common+0x48>
 8007ac2:	f104 0a19 	add.w	sl, r4, #25
 8007ac6:	68e3      	ldr	r3, [r4, #12]
 8007ac8:	6832      	ldr	r2, [r6, #0]
 8007aca:	1a9b      	subs	r3, r3, r2
 8007acc:	42ab      	cmp	r3, r5
 8007ace:	dc26      	bgt.n	8007b1e <_printf_common+0x96>
 8007ad0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ad4:	6822      	ldr	r2, [r4, #0]
 8007ad6:	3b00      	subs	r3, #0
 8007ad8:	bf18      	it	ne
 8007ada:	2301      	movne	r3, #1
 8007adc:	0692      	lsls	r2, r2, #26
 8007ade:	d42b      	bmi.n	8007b38 <_printf_common+0xb0>
 8007ae0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ae4:	4641      	mov	r1, r8
 8007ae6:	4638      	mov	r0, r7
 8007ae8:	47c8      	blx	r9
 8007aea:	3001      	adds	r0, #1
 8007aec:	d01e      	beq.n	8007b2c <_printf_common+0xa4>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	6922      	ldr	r2, [r4, #16]
 8007af2:	f003 0306 	and.w	r3, r3, #6
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	bf02      	ittt	eq
 8007afa:	68e5      	ldreq	r5, [r4, #12]
 8007afc:	6833      	ldreq	r3, [r6, #0]
 8007afe:	1aed      	subeq	r5, r5, r3
 8007b00:	68a3      	ldr	r3, [r4, #8]
 8007b02:	bf0c      	ite	eq
 8007b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b08:	2500      	movne	r5, #0
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	bfc4      	itt	gt
 8007b0e:	1a9b      	subgt	r3, r3, r2
 8007b10:	18ed      	addgt	r5, r5, r3
 8007b12:	2600      	movs	r6, #0
 8007b14:	341a      	adds	r4, #26
 8007b16:	42b5      	cmp	r5, r6
 8007b18:	d11a      	bne.n	8007b50 <_printf_common+0xc8>
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	e008      	b.n	8007b30 <_printf_common+0xa8>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4652      	mov	r2, sl
 8007b22:	4641      	mov	r1, r8
 8007b24:	4638      	mov	r0, r7
 8007b26:	47c8      	blx	r9
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d103      	bne.n	8007b34 <_printf_common+0xac>
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b34:	3501      	adds	r5, #1
 8007b36:	e7c6      	b.n	8007ac6 <_printf_common+0x3e>
 8007b38:	18e1      	adds	r1, r4, r3
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	2030      	movs	r0, #48	@ 0x30
 8007b3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b42:	4422      	add	r2, r4
 8007b44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b4c:	3302      	adds	r3, #2
 8007b4e:	e7c7      	b.n	8007ae0 <_printf_common+0x58>
 8007b50:	2301      	movs	r3, #1
 8007b52:	4622      	mov	r2, r4
 8007b54:	4641      	mov	r1, r8
 8007b56:	4638      	mov	r0, r7
 8007b58:	47c8      	blx	r9
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d0e6      	beq.n	8007b2c <_printf_common+0xa4>
 8007b5e:	3601      	adds	r6, #1
 8007b60:	e7d9      	b.n	8007b16 <_printf_common+0x8e>
	...

08007b64 <_printf_i>:
 8007b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b68:	7e0f      	ldrb	r7, [r1, #24]
 8007b6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b6c:	2f78      	cmp	r7, #120	@ 0x78
 8007b6e:	4691      	mov	r9, r2
 8007b70:	4680      	mov	r8, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	469a      	mov	sl, r3
 8007b76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b7a:	d807      	bhi.n	8007b8c <_printf_i+0x28>
 8007b7c:	2f62      	cmp	r7, #98	@ 0x62
 8007b7e:	d80a      	bhi.n	8007b96 <_printf_i+0x32>
 8007b80:	2f00      	cmp	r7, #0
 8007b82:	f000 80d2 	beq.w	8007d2a <_printf_i+0x1c6>
 8007b86:	2f58      	cmp	r7, #88	@ 0x58
 8007b88:	f000 80b9 	beq.w	8007cfe <_printf_i+0x19a>
 8007b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b94:	e03a      	b.n	8007c0c <_printf_i+0xa8>
 8007b96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b9a:	2b15      	cmp	r3, #21
 8007b9c:	d8f6      	bhi.n	8007b8c <_printf_i+0x28>
 8007b9e:	a101      	add	r1, pc, #4	@ (adr r1, 8007ba4 <_printf_i+0x40>)
 8007ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ba4:	08007bfd 	.word	0x08007bfd
 8007ba8:	08007c11 	.word	0x08007c11
 8007bac:	08007b8d 	.word	0x08007b8d
 8007bb0:	08007b8d 	.word	0x08007b8d
 8007bb4:	08007b8d 	.word	0x08007b8d
 8007bb8:	08007b8d 	.word	0x08007b8d
 8007bbc:	08007c11 	.word	0x08007c11
 8007bc0:	08007b8d 	.word	0x08007b8d
 8007bc4:	08007b8d 	.word	0x08007b8d
 8007bc8:	08007b8d 	.word	0x08007b8d
 8007bcc:	08007b8d 	.word	0x08007b8d
 8007bd0:	08007d11 	.word	0x08007d11
 8007bd4:	08007c3b 	.word	0x08007c3b
 8007bd8:	08007ccb 	.word	0x08007ccb
 8007bdc:	08007b8d 	.word	0x08007b8d
 8007be0:	08007b8d 	.word	0x08007b8d
 8007be4:	08007d33 	.word	0x08007d33
 8007be8:	08007b8d 	.word	0x08007b8d
 8007bec:	08007c3b 	.word	0x08007c3b
 8007bf0:	08007b8d 	.word	0x08007b8d
 8007bf4:	08007b8d 	.word	0x08007b8d
 8007bf8:	08007cd3 	.word	0x08007cd3
 8007bfc:	6833      	ldr	r3, [r6, #0]
 8007bfe:	1d1a      	adds	r2, r3, #4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6032      	str	r2, [r6, #0]
 8007c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e09d      	b.n	8007d4c <_printf_i+0x1e8>
 8007c10:	6833      	ldr	r3, [r6, #0]
 8007c12:	6820      	ldr	r0, [r4, #0]
 8007c14:	1d19      	adds	r1, r3, #4
 8007c16:	6031      	str	r1, [r6, #0]
 8007c18:	0606      	lsls	r6, r0, #24
 8007c1a:	d501      	bpl.n	8007c20 <_printf_i+0xbc>
 8007c1c:	681d      	ldr	r5, [r3, #0]
 8007c1e:	e003      	b.n	8007c28 <_printf_i+0xc4>
 8007c20:	0645      	lsls	r5, r0, #25
 8007c22:	d5fb      	bpl.n	8007c1c <_printf_i+0xb8>
 8007c24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c28:	2d00      	cmp	r5, #0
 8007c2a:	da03      	bge.n	8007c34 <_printf_i+0xd0>
 8007c2c:	232d      	movs	r3, #45	@ 0x2d
 8007c2e:	426d      	negs	r5, r5
 8007c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c34:	4859      	ldr	r0, [pc, #356]	@ (8007d9c <_printf_i+0x238>)
 8007c36:	230a      	movs	r3, #10
 8007c38:	e011      	b.n	8007c5e <_printf_i+0xfa>
 8007c3a:	6821      	ldr	r1, [r4, #0]
 8007c3c:	6833      	ldr	r3, [r6, #0]
 8007c3e:	0608      	lsls	r0, r1, #24
 8007c40:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c44:	d402      	bmi.n	8007c4c <_printf_i+0xe8>
 8007c46:	0649      	lsls	r1, r1, #25
 8007c48:	bf48      	it	mi
 8007c4a:	b2ad      	uxthmi	r5, r5
 8007c4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c4e:	4853      	ldr	r0, [pc, #332]	@ (8007d9c <_printf_i+0x238>)
 8007c50:	6033      	str	r3, [r6, #0]
 8007c52:	bf14      	ite	ne
 8007c54:	230a      	movne	r3, #10
 8007c56:	2308      	moveq	r3, #8
 8007c58:	2100      	movs	r1, #0
 8007c5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c5e:	6866      	ldr	r6, [r4, #4]
 8007c60:	60a6      	str	r6, [r4, #8]
 8007c62:	2e00      	cmp	r6, #0
 8007c64:	bfa2      	ittt	ge
 8007c66:	6821      	ldrge	r1, [r4, #0]
 8007c68:	f021 0104 	bicge.w	r1, r1, #4
 8007c6c:	6021      	strge	r1, [r4, #0]
 8007c6e:	b90d      	cbnz	r5, 8007c74 <_printf_i+0x110>
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	d04b      	beq.n	8007d0c <_printf_i+0x1a8>
 8007c74:	4616      	mov	r6, r2
 8007c76:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c7a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c7e:	5dc7      	ldrb	r7, [r0, r7]
 8007c80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c84:	462f      	mov	r7, r5
 8007c86:	42bb      	cmp	r3, r7
 8007c88:	460d      	mov	r5, r1
 8007c8a:	d9f4      	bls.n	8007c76 <_printf_i+0x112>
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d10b      	bne.n	8007ca8 <_printf_i+0x144>
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	07df      	lsls	r7, r3, #31
 8007c94:	d508      	bpl.n	8007ca8 <_printf_i+0x144>
 8007c96:	6923      	ldr	r3, [r4, #16]
 8007c98:	6861      	ldr	r1, [r4, #4]
 8007c9a:	4299      	cmp	r1, r3
 8007c9c:	bfde      	ittt	le
 8007c9e:	2330      	movle	r3, #48	@ 0x30
 8007ca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ca4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ca8:	1b92      	subs	r2, r2, r6
 8007caa:	6122      	str	r2, [r4, #16]
 8007cac:	f8cd a000 	str.w	sl, [sp]
 8007cb0:	464b      	mov	r3, r9
 8007cb2:	aa03      	add	r2, sp, #12
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	4640      	mov	r0, r8
 8007cb8:	f7ff fee6 	bl	8007a88 <_printf_common>
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d14a      	bne.n	8007d56 <_printf_i+0x1f2>
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc4:	b004      	add	sp, #16
 8007cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	f043 0320 	orr.w	r3, r3, #32
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	4833      	ldr	r0, [pc, #204]	@ (8007da0 <_printf_i+0x23c>)
 8007cd4:	2778      	movs	r7, #120	@ 0x78
 8007cd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	6831      	ldr	r1, [r6, #0]
 8007cde:	061f      	lsls	r7, r3, #24
 8007ce0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ce4:	d402      	bmi.n	8007cec <_printf_i+0x188>
 8007ce6:	065f      	lsls	r7, r3, #25
 8007ce8:	bf48      	it	mi
 8007cea:	b2ad      	uxthmi	r5, r5
 8007cec:	6031      	str	r1, [r6, #0]
 8007cee:	07d9      	lsls	r1, r3, #31
 8007cf0:	bf44      	itt	mi
 8007cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8007cf6:	6023      	strmi	r3, [r4, #0]
 8007cf8:	b11d      	cbz	r5, 8007d02 <_printf_i+0x19e>
 8007cfa:	2310      	movs	r3, #16
 8007cfc:	e7ac      	b.n	8007c58 <_printf_i+0xf4>
 8007cfe:	4827      	ldr	r0, [pc, #156]	@ (8007d9c <_printf_i+0x238>)
 8007d00:	e7e9      	b.n	8007cd6 <_printf_i+0x172>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	f023 0320 	bic.w	r3, r3, #32
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	e7f6      	b.n	8007cfa <_printf_i+0x196>
 8007d0c:	4616      	mov	r6, r2
 8007d0e:	e7bd      	b.n	8007c8c <_printf_i+0x128>
 8007d10:	6833      	ldr	r3, [r6, #0]
 8007d12:	6825      	ldr	r5, [r4, #0]
 8007d14:	6961      	ldr	r1, [r4, #20]
 8007d16:	1d18      	adds	r0, r3, #4
 8007d18:	6030      	str	r0, [r6, #0]
 8007d1a:	062e      	lsls	r6, r5, #24
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	d501      	bpl.n	8007d24 <_printf_i+0x1c0>
 8007d20:	6019      	str	r1, [r3, #0]
 8007d22:	e002      	b.n	8007d2a <_printf_i+0x1c6>
 8007d24:	0668      	lsls	r0, r5, #25
 8007d26:	d5fb      	bpl.n	8007d20 <_printf_i+0x1bc>
 8007d28:	8019      	strh	r1, [r3, #0]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	6123      	str	r3, [r4, #16]
 8007d2e:	4616      	mov	r6, r2
 8007d30:	e7bc      	b.n	8007cac <_printf_i+0x148>
 8007d32:	6833      	ldr	r3, [r6, #0]
 8007d34:	1d1a      	adds	r2, r3, #4
 8007d36:	6032      	str	r2, [r6, #0]
 8007d38:	681e      	ldr	r6, [r3, #0]
 8007d3a:	6862      	ldr	r2, [r4, #4]
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7f8 fa66 	bl	8000210 <memchr>
 8007d44:	b108      	cbz	r0, 8007d4a <_printf_i+0x1e6>
 8007d46:	1b80      	subs	r0, r0, r6
 8007d48:	6060      	str	r0, [r4, #4]
 8007d4a:	6863      	ldr	r3, [r4, #4]
 8007d4c:	6123      	str	r3, [r4, #16]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d54:	e7aa      	b.n	8007cac <_printf_i+0x148>
 8007d56:	6923      	ldr	r3, [r4, #16]
 8007d58:	4632      	mov	r2, r6
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	4640      	mov	r0, r8
 8007d5e:	47d0      	blx	sl
 8007d60:	3001      	adds	r0, #1
 8007d62:	d0ad      	beq.n	8007cc0 <_printf_i+0x15c>
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	079b      	lsls	r3, r3, #30
 8007d68:	d413      	bmi.n	8007d92 <_printf_i+0x22e>
 8007d6a:	68e0      	ldr	r0, [r4, #12]
 8007d6c:	9b03      	ldr	r3, [sp, #12]
 8007d6e:	4298      	cmp	r0, r3
 8007d70:	bfb8      	it	lt
 8007d72:	4618      	movlt	r0, r3
 8007d74:	e7a6      	b.n	8007cc4 <_printf_i+0x160>
 8007d76:	2301      	movs	r3, #1
 8007d78:	4632      	mov	r2, r6
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	4640      	mov	r0, r8
 8007d7e:	47d0      	blx	sl
 8007d80:	3001      	adds	r0, #1
 8007d82:	d09d      	beq.n	8007cc0 <_printf_i+0x15c>
 8007d84:	3501      	adds	r5, #1
 8007d86:	68e3      	ldr	r3, [r4, #12]
 8007d88:	9903      	ldr	r1, [sp, #12]
 8007d8a:	1a5b      	subs	r3, r3, r1
 8007d8c:	42ab      	cmp	r3, r5
 8007d8e:	dcf2      	bgt.n	8007d76 <_printf_i+0x212>
 8007d90:	e7eb      	b.n	8007d6a <_printf_i+0x206>
 8007d92:	2500      	movs	r5, #0
 8007d94:	f104 0619 	add.w	r6, r4, #25
 8007d98:	e7f5      	b.n	8007d86 <_printf_i+0x222>
 8007d9a:	bf00      	nop
 8007d9c:	0800a10a 	.word	0x0800a10a
 8007da0:	0800a11b 	.word	0x0800a11b

08007da4 <std>:
 8007da4:	2300      	movs	r3, #0
 8007da6:	b510      	push	{r4, lr}
 8007da8:	4604      	mov	r4, r0
 8007daa:	e9c0 3300 	strd	r3, r3, [r0]
 8007dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007db2:	6083      	str	r3, [r0, #8]
 8007db4:	8181      	strh	r1, [r0, #12]
 8007db6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007db8:	81c2      	strh	r2, [r0, #14]
 8007dba:	6183      	str	r3, [r0, #24]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	305c      	adds	r0, #92	@ 0x5c
 8007dc2:	f000 f8f4 	bl	8007fae <memset>
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007dfc <std+0x58>)
 8007dc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007dca:	4b0d      	ldr	r3, [pc, #52]	@ (8007e00 <std+0x5c>)
 8007dcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007dce:	4b0d      	ldr	r3, [pc, #52]	@ (8007e04 <std+0x60>)
 8007dd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e08 <std+0x64>)
 8007dd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007e0c <std+0x68>)
 8007dd8:	6224      	str	r4, [r4, #32]
 8007dda:	429c      	cmp	r4, r3
 8007ddc:	d006      	beq.n	8007dec <std+0x48>
 8007dde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007de2:	4294      	cmp	r4, r2
 8007de4:	d002      	beq.n	8007dec <std+0x48>
 8007de6:	33d0      	adds	r3, #208	@ 0xd0
 8007de8:	429c      	cmp	r4, r3
 8007dea:	d105      	bne.n	8007df8 <std+0x54>
 8007dec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df4:	f000 b968 	b.w	80080c8 <__retarget_lock_init_recursive>
 8007df8:	bd10      	pop	{r4, pc}
 8007dfa:	bf00      	nop
 8007dfc:	08007f29 	.word	0x08007f29
 8007e00:	08007f4b 	.word	0x08007f4b
 8007e04:	08007f83 	.word	0x08007f83
 8007e08:	08007fa7 	.word	0x08007fa7
 8007e0c:	20000658 	.word	0x20000658

08007e10 <stdio_exit_handler>:
 8007e10:	4a02      	ldr	r2, [pc, #8]	@ (8007e1c <stdio_exit_handler+0xc>)
 8007e12:	4903      	ldr	r1, [pc, #12]	@ (8007e20 <stdio_exit_handler+0x10>)
 8007e14:	4803      	ldr	r0, [pc, #12]	@ (8007e24 <stdio_exit_handler+0x14>)
 8007e16:	f000 b869 	b.w	8007eec <_fwalk_sglue>
 8007e1a:	bf00      	nop
 8007e1c:	20000050 	.word	0x20000050
 8007e20:	08009629 	.word	0x08009629
 8007e24:	20000060 	.word	0x20000060

08007e28 <cleanup_stdio>:
 8007e28:	6841      	ldr	r1, [r0, #4]
 8007e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e5c <cleanup_stdio+0x34>)
 8007e2c:	4299      	cmp	r1, r3
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	4604      	mov	r4, r0
 8007e32:	d001      	beq.n	8007e38 <cleanup_stdio+0x10>
 8007e34:	f001 fbf8 	bl	8009628 <_fflush_r>
 8007e38:	68a1      	ldr	r1, [r4, #8]
 8007e3a:	4b09      	ldr	r3, [pc, #36]	@ (8007e60 <cleanup_stdio+0x38>)
 8007e3c:	4299      	cmp	r1, r3
 8007e3e:	d002      	beq.n	8007e46 <cleanup_stdio+0x1e>
 8007e40:	4620      	mov	r0, r4
 8007e42:	f001 fbf1 	bl	8009628 <_fflush_r>
 8007e46:	68e1      	ldr	r1, [r4, #12]
 8007e48:	4b06      	ldr	r3, [pc, #24]	@ (8007e64 <cleanup_stdio+0x3c>)
 8007e4a:	4299      	cmp	r1, r3
 8007e4c:	d004      	beq.n	8007e58 <cleanup_stdio+0x30>
 8007e4e:	4620      	mov	r0, r4
 8007e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e54:	f001 bbe8 	b.w	8009628 <_fflush_r>
 8007e58:	bd10      	pop	{r4, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000658 	.word	0x20000658
 8007e60:	200006c0 	.word	0x200006c0
 8007e64:	20000728 	.word	0x20000728

08007e68 <global_stdio_init.part.0>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e98 <global_stdio_init.part.0+0x30>)
 8007e6c:	4c0b      	ldr	r4, [pc, #44]	@ (8007e9c <global_stdio_init.part.0+0x34>)
 8007e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea0 <global_stdio_init.part.0+0x38>)
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	4620      	mov	r0, r4
 8007e74:	2200      	movs	r2, #0
 8007e76:	2104      	movs	r1, #4
 8007e78:	f7ff ff94 	bl	8007da4 <std>
 8007e7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e80:	2201      	movs	r2, #1
 8007e82:	2109      	movs	r1, #9
 8007e84:	f7ff ff8e 	bl	8007da4 <std>
 8007e88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e92:	2112      	movs	r1, #18
 8007e94:	f7ff bf86 	b.w	8007da4 <std>
 8007e98:	20000790 	.word	0x20000790
 8007e9c:	20000658 	.word	0x20000658
 8007ea0:	08007e11 	.word	0x08007e11

08007ea4 <__sfp_lock_acquire>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	@ (8007eac <__sfp_lock_acquire+0x8>)
 8007ea6:	f000 b910 	b.w	80080ca <__retarget_lock_acquire_recursive>
 8007eaa:	bf00      	nop
 8007eac:	20000799 	.word	0x20000799

08007eb0 <__sfp_lock_release>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	@ (8007eb8 <__sfp_lock_release+0x8>)
 8007eb2:	f000 b90b 	b.w	80080cc <__retarget_lock_release_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	20000799 	.word	0x20000799

08007ebc <__sinit>:
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	f7ff fff0 	bl	8007ea4 <__sfp_lock_acquire>
 8007ec4:	6a23      	ldr	r3, [r4, #32]
 8007ec6:	b11b      	cbz	r3, 8007ed0 <__sinit+0x14>
 8007ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ecc:	f7ff bff0 	b.w	8007eb0 <__sfp_lock_release>
 8007ed0:	4b04      	ldr	r3, [pc, #16]	@ (8007ee4 <__sinit+0x28>)
 8007ed2:	6223      	str	r3, [r4, #32]
 8007ed4:	4b04      	ldr	r3, [pc, #16]	@ (8007ee8 <__sinit+0x2c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f5      	bne.n	8007ec8 <__sinit+0xc>
 8007edc:	f7ff ffc4 	bl	8007e68 <global_stdio_init.part.0>
 8007ee0:	e7f2      	b.n	8007ec8 <__sinit+0xc>
 8007ee2:	bf00      	nop
 8007ee4:	08007e29 	.word	0x08007e29
 8007ee8:	20000790 	.word	0x20000790

08007eec <_fwalk_sglue>:
 8007eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef0:	4607      	mov	r7, r0
 8007ef2:	4688      	mov	r8, r1
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007efc:	f1b9 0901 	subs.w	r9, r9, #1
 8007f00:	d505      	bpl.n	8007f0e <_fwalk_sglue+0x22>
 8007f02:	6824      	ldr	r4, [r4, #0]
 8007f04:	2c00      	cmp	r4, #0
 8007f06:	d1f7      	bne.n	8007ef8 <_fwalk_sglue+0xc>
 8007f08:	4630      	mov	r0, r6
 8007f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f0e:	89ab      	ldrh	r3, [r5, #12]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d907      	bls.n	8007f24 <_fwalk_sglue+0x38>
 8007f14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	d003      	beq.n	8007f24 <_fwalk_sglue+0x38>
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4638      	mov	r0, r7
 8007f20:	47c0      	blx	r8
 8007f22:	4306      	orrs	r6, r0
 8007f24:	3568      	adds	r5, #104	@ 0x68
 8007f26:	e7e9      	b.n	8007efc <_fwalk_sglue+0x10>

08007f28 <__sread>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f30:	f000 f86c 	bl	800800c <_read_r>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	bfab      	itete	ge
 8007f38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f3c:	181b      	addge	r3, r3, r0
 8007f3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f42:	bfac      	ite	ge
 8007f44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f46:	81a3      	strhlt	r3, [r4, #12]
 8007f48:	bd10      	pop	{r4, pc}

08007f4a <__swrite>:
 8007f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4e:	461f      	mov	r7, r3
 8007f50:	898b      	ldrh	r3, [r1, #12]
 8007f52:	05db      	lsls	r3, r3, #23
 8007f54:	4605      	mov	r5, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	4616      	mov	r6, r2
 8007f5a:	d505      	bpl.n	8007f68 <__swrite+0x1e>
 8007f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f60:	2302      	movs	r3, #2
 8007f62:	2200      	movs	r2, #0
 8007f64:	f000 f840 	bl	8007fe8 <_lseek_r>
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f72:	81a3      	strh	r3, [r4, #12]
 8007f74:	4632      	mov	r2, r6
 8007f76:	463b      	mov	r3, r7
 8007f78:	4628      	mov	r0, r5
 8007f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f7e:	f000 b867 	b.w	8008050 <_write_r>

08007f82 <__sseek>:
 8007f82:	b510      	push	{r4, lr}
 8007f84:	460c      	mov	r4, r1
 8007f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f8a:	f000 f82d 	bl	8007fe8 <_lseek_r>
 8007f8e:	1c43      	adds	r3, r0, #1
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	bf15      	itete	ne
 8007f94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f9e:	81a3      	strheq	r3, [r4, #12]
 8007fa0:	bf18      	it	ne
 8007fa2:	81a3      	strhne	r3, [r4, #12]
 8007fa4:	bd10      	pop	{r4, pc}

08007fa6 <__sclose>:
 8007fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007faa:	f000 b80d 	b.w	8007fc8 <_close_r>

08007fae <memset>:
 8007fae:	4402      	add	r2, r0
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d100      	bne.n	8007fb8 <memset+0xa>
 8007fb6:	4770      	bx	lr
 8007fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8007fbc:	e7f9      	b.n	8007fb2 <memset+0x4>
	...

08007fc0 <_localeconv_r>:
 8007fc0:	4800      	ldr	r0, [pc, #0]	@ (8007fc4 <_localeconv_r+0x4>)
 8007fc2:	4770      	bx	lr
 8007fc4:	2000019c 	.word	0x2000019c

08007fc8 <_close_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d06      	ldr	r5, [pc, #24]	@ (8007fe4 <_close_r+0x1c>)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	f7fc f83a 	bl	800404c <_close>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_close_r+0x1a>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_close_r+0x1a>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	20000794 	.word	0x20000794

08007fe8 <_lseek_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	@ (8008008 <_lseek_r+0x20>)
 8007fec:	4604      	mov	r4, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	602a      	str	r2, [r5, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7fc f84f 	bl	800409a <_lseek>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_lseek_r+0x1e>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_lseek_r+0x1e>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	20000794 	.word	0x20000794

0800800c <_read_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4d07      	ldr	r5, [pc, #28]	@ (800802c <_read_r+0x20>)
 8008010:	4604      	mov	r4, r0
 8008012:	4608      	mov	r0, r1
 8008014:	4611      	mov	r1, r2
 8008016:	2200      	movs	r2, #0
 8008018:	602a      	str	r2, [r5, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	f7fb ffdd 	bl	8003fda <_read>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d102      	bne.n	800802a <_read_r+0x1e>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b103      	cbz	r3, 800802a <_read_r+0x1e>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	20000794 	.word	0x20000794

08008030 <_sbrk_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d06      	ldr	r5, [pc, #24]	@ (800804c <_sbrk_r+0x1c>)
 8008034:	2300      	movs	r3, #0
 8008036:	4604      	mov	r4, r0
 8008038:	4608      	mov	r0, r1
 800803a:	602b      	str	r3, [r5, #0]
 800803c:	f7fc f83a 	bl	80040b4 <_sbrk>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d102      	bne.n	800804a <_sbrk_r+0x1a>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	b103      	cbz	r3, 800804a <_sbrk_r+0x1a>
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	20000794 	.word	0x20000794

08008050 <_write_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4d07      	ldr	r5, [pc, #28]	@ (8008070 <_write_r+0x20>)
 8008054:	4604      	mov	r4, r0
 8008056:	4608      	mov	r0, r1
 8008058:	4611      	mov	r1, r2
 800805a:	2200      	movs	r2, #0
 800805c:	602a      	str	r2, [r5, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	f7fb ffd8 	bl	8004014 <_write>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d102      	bne.n	800806e <_write_r+0x1e>
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	b103      	cbz	r3, 800806e <_write_r+0x1e>
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	20000794 	.word	0x20000794

08008074 <__errno>:
 8008074:	4b01      	ldr	r3, [pc, #4]	@ (800807c <__errno+0x8>)
 8008076:	6818      	ldr	r0, [r3, #0]
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	2000005c 	.word	0x2000005c

08008080 <__libc_init_array>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	4d0d      	ldr	r5, [pc, #52]	@ (80080b8 <__libc_init_array+0x38>)
 8008084:	4c0d      	ldr	r4, [pc, #52]	@ (80080bc <__libc_init_array+0x3c>)
 8008086:	1b64      	subs	r4, r4, r5
 8008088:	10a4      	asrs	r4, r4, #2
 800808a:	2600      	movs	r6, #0
 800808c:	42a6      	cmp	r6, r4
 800808e:	d109      	bne.n	80080a4 <__libc_init_array+0x24>
 8008090:	4d0b      	ldr	r5, [pc, #44]	@ (80080c0 <__libc_init_array+0x40>)
 8008092:	4c0c      	ldr	r4, [pc, #48]	@ (80080c4 <__libc_init_array+0x44>)
 8008094:	f001 fdf8 	bl	8009c88 <_init>
 8008098:	1b64      	subs	r4, r4, r5
 800809a:	10a4      	asrs	r4, r4, #2
 800809c:	2600      	movs	r6, #0
 800809e:	42a6      	cmp	r6, r4
 80080a0:	d105      	bne.n	80080ae <__libc_init_array+0x2e>
 80080a2:	bd70      	pop	{r4, r5, r6, pc}
 80080a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a8:	4798      	blx	r3
 80080aa:	3601      	adds	r6, #1
 80080ac:	e7ee      	b.n	800808c <__libc_init_array+0xc>
 80080ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b2:	4798      	blx	r3
 80080b4:	3601      	adds	r6, #1
 80080b6:	e7f2      	b.n	800809e <__libc_init_array+0x1e>
 80080b8:	0800a470 	.word	0x0800a470
 80080bc:	0800a470 	.word	0x0800a470
 80080c0:	0800a470 	.word	0x0800a470
 80080c4:	0800a474 	.word	0x0800a474

080080c8 <__retarget_lock_init_recursive>:
 80080c8:	4770      	bx	lr

080080ca <__retarget_lock_acquire_recursive>:
 80080ca:	4770      	bx	lr

080080cc <__retarget_lock_release_recursive>:
 80080cc:	4770      	bx	lr

080080ce <memcpy>:
 80080ce:	440a      	add	r2, r1
 80080d0:	4291      	cmp	r1, r2
 80080d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80080d6:	d100      	bne.n	80080da <memcpy+0xc>
 80080d8:	4770      	bx	lr
 80080da:	b510      	push	{r4, lr}
 80080dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080e4:	4291      	cmp	r1, r2
 80080e6:	d1f9      	bne.n	80080dc <memcpy+0xe>
 80080e8:	bd10      	pop	{r4, pc}

080080ea <quorem>:
 80080ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ee:	6903      	ldr	r3, [r0, #16]
 80080f0:	690c      	ldr	r4, [r1, #16]
 80080f2:	42a3      	cmp	r3, r4
 80080f4:	4607      	mov	r7, r0
 80080f6:	db7e      	blt.n	80081f6 <quorem+0x10c>
 80080f8:	3c01      	subs	r4, #1
 80080fa:	f101 0814 	add.w	r8, r1, #20
 80080fe:	00a3      	lsls	r3, r4, #2
 8008100:	f100 0514 	add.w	r5, r0, #20
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800810a:	9301      	str	r3, [sp, #4]
 800810c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008110:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008114:	3301      	adds	r3, #1
 8008116:	429a      	cmp	r2, r3
 8008118:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800811c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008120:	d32e      	bcc.n	8008180 <quorem+0x96>
 8008122:	f04f 0a00 	mov.w	sl, #0
 8008126:	46c4      	mov	ip, r8
 8008128:	46ae      	mov	lr, r5
 800812a:	46d3      	mov	fp, sl
 800812c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008130:	b298      	uxth	r0, r3
 8008132:	fb06 a000 	mla	r0, r6, r0, sl
 8008136:	0c02      	lsrs	r2, r0, #16
 8008138:	0c1b      	lsrs	r3, r3, #16
 800813a:	fb06 2303 	mla	r3, r6, r3, r2
 800813e:	f8de 2000 	ldr.w	r2, [lr]
 8008142:	b280      	uxth	r0, r0
 8008144:	b292      	uxth	r2, r2
 8008146:	1a12      	subs	r2, r2, r0
 8008148:	445a      	add	r2, fp
 800814a:	f8de 0000 	ldr.w	r0, [lr]
 800814e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008152:	b29b      	uxth	r3, r3
 8008154:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008158:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800815c:	b292      	uxth	r2, r2
 800815e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008162:	45e1      	cmp	r9, ip
 8008164:	f84e 2b04 	str.w	r2, [lr], #4
 8008168:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800816c:	d2de      	bcs.n	800812c <quorem+0x42>
 800816e:	9b00      	ldr	r3, [sp, #0]
 8008170:	58eb      	ldr	r3, [r5, r3]
 8008172:	b92b      	cbnz	r3, 8008180 <quorem+0x96>
 8008174:	9b01      	ldr	r3, [sp, #4]
 8008176:	3b04      	subs	r3, #4
 8008178:	429d      	cmp	r5, r3
 800817a:	461a      	mov	r2, r3
 800817c:	d32f      	bcc.n	80081de <quorem+0xf4>
 800817e:	613c      	str	r4, [r7, #16]
 8008180:	4638      	mov	r0, r7
 8008182:	f001 f8c5 	bl	8009310 <__mcmp>
 8008186:	2800      	cmp	r0, #0
 8008188:	db25      	blt.n	80081d6 <quorem+0xec>
 800818a:	4629      	mov	r1, r5
 800818c:	2000      	movs	r0, #0
 800818e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008192:	f8d1 c000 	ldr.w	ip, [r1]
 8008196:	fa1f fe82 	uxth.w	lr, r2
 800819a:	fa1f f38c 	uxth.w	r3, ip
 800819e:	eba3 030e 	sub.w	r3, r3, lr
 80081a2:	4403      	add	r3, r0
 80081a4:	0c12      	lsrs	r2, r2, #16
 80081a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081b4:	45c1      	cmp	r9, r8
 80081b6:	f841 3b04 	str.w	r3, [r1], #4
 80081ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081be:	d2e6      	bcs.n	800818e <quorem+0xa4>
 80081c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081c8:	b922      	cbnz	r2, 80081d4 <quorem+0xea>
 80081ca:	3b04      	subs	r3, #4
 80081cc:	429d      	cmp	r5, r3
 80081ce:	461a      	mov	r2, r3
 80081d0:	d30b      	bcc.n	80081ea <quorem+0x100>
 80081d2:	613c      	str	r4, [r7, #16]
 80081d4:	3601      	adds	r6, #1
 80081d6:	4630      	mov	r0, r6
 80081d8:	b003      	add	sp, #12
 80081da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081de:	6812      	ldr	r2, [r2, #0]
 80081e0:	3b04      	subs	r3, #4
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	d1cb      	bne.n	800817e <quorem+0x94>
 80081e6:	3c01      	subs	r4, #1
 80081e8:	e7c6      	b.n	8008178 <quorem+0x8e>
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	3b04      	subs	r3, #4
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	d1ef      	bne.n	80081d2 <quorem+0xe8>
 80081f2:	3c01      	subs	r4, #1
 80081f4:	e7ea      	b.n	80081cc <quorem+0xe2>
 80081f6:	2000      	movs	r0, #0
 80081f8:	e7ee      	b.n	80081d8 <quorem+0xee>
 80081fa:	0000      	movs	r0, r0
 80081fc:	0000      	movs	r0, r0
	...

08008200 <_dtoa_r>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	69c7      	ldr	r7, [r0, #28]
 8008206:	b099      	sub	sp, #100	@ 0x64
 8008208:	ed8d 0b02 	vstr	d0, [sp, #8]
 800820c:	ec55 4b10 	vmov	r4, r5, d0
 8008210:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008212:	9109      	str	r1, [sp, #36]	@ 0x24
 8008214:	4683      	mov	fp, r0
 8008216:	920e      	str	r2, [sp, #56]	@ 0x38
 8008218:	9313      	str	r3, [sp, #76]	@ 0x4c
 800821a:	b97f      	cbnz	r7, 800823c <_dtoa_r+0x3c>
 800821c:	2010      	movs	r0, #16
 800821e:	f7ff f8ab 	bl	8007378 <malloc>
 8008222:	4602      	mov	r2, r0
 8008224:	f8cb 001c 	str.w	r0, [fp, #28]
 8008228:	b920      	cbnz	r0, 8008234 <_dtoa_r+0x34>
 800822a:	4ba7      	ldr	r3, [pc, #668]	@ (80084c8 <_dtoa_r+0x2c8>)
 800822c:	21ef      	movs	r1, #239	@ 0xef
 800822e:	48a7      	ldr	r0, [pc, #668]	@ (80084cc <_dtoa_r+0x2cc>)
 8008230:	f001 fa22 	bl	8009678 <__assert_func>
 8008234:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008238:	6007      	str	r7, [r0, #0]
 800823a:	60c7      	str	r7, [r0, #12]
 800823c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008240:	6819      	ldr	r1, [r3, #0]
 8008242:	b159      	cbz	r1, 800825c <_dtoa_r+0x5c>
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	604a      	str	r2, [r1, #4]
 8008248:	2301      	movs	r3, #1
 800824a:	4093      	lsls	r3, r2
 800824c:	608b      	str	r3, [r1, #8]
 800824e:	4658      	mov	r0, fp
 8008250:	f000 fe24 	bl	8008e9c <_Bfree>
 8008254:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	1e2b      	subs	r3, r5, #0
 800825e:	bfb9      	ittee	lt
 8008260:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008264:	9303      	strlt	r3, [sp, #12]
 8008266:	2300      	movge	r3, #0
 8008268:	6033      	strge	r3, [r6, #0]
 800826a:	9f03      	ldr	r7, [sp, #12]
 800826c:	4b98      	ldr	r3, [pc, #608]	@ (80084d0 <_dtoa_r+0x2d0>)
 800826e:	bfbc      	itt	lt
 8008270:	2201      	movlt	r2, #1
 8008272:	6032      	strlt	r2, [r6, #0]
 8008274:	43bb      	bics	r3, r7
 8008276:	d112      	bne.n	800829e <_dtoa_r+0x9e>
 8008278:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800827a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008284:	4323      	orrs	r3, r4
 8008286:	f000 854d 	beq.w	8008d24 <_dtoa_r+0xb24>
 800828a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800828c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80084e4 <_dtoa_r+0x2e4>
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 854f 	beq.w	8008d34 <_dtoa_r+0xb34>
 8008296:	f10a 0303 	add.w	r3, sl, #3
 800829a:	f000 bd49 	b.w	8008d30 <_dtoa_r+0xb30>
 800829e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082a2:	2200      	movs	r2, #0
 80082a4:	ec51 0b17 	vmov	r0, r1, d7
 80082a8:	2300      	movs	r3, #0
 80082aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80082ae:	f7f8 fc2b 	bl	8000b08 <__aeabi_dcmpeq>
 80082b2:	4680      	mov	r8, r0
 80082b4:	b158      	cbz	r0, 80082ce <_dtoa_r+0xce>
 80082b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80082b8:	2301      	movs	r3, #1
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082be:	b113      	cbz	r3, 80082c6 <_dtoa_r+0xc6>
 80082c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80082c2:	4b84      	ldr	r3, [pc, #528]	@ (80084d4 <_dtoa_r+0x2d4>)
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80084e8 <_dtoa_r+0x2e8>
 80082ca:	f000 bd33 	b.w	8008d34 <_dtoa_r+0xb34>
 80082ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80082d2:	aa16      	add	r2, sp, #88	@ 0x58
 80082d4:	a917      	add	r1, sp, #92	@ 0x5c
 80082d6:	4658      	mov	r0, fp
 80082d8:	f001 f8ca 	bl	8009470 <__d2b>
 80082dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80082e0:	4681      	mov	r9, r0
 80082e2:	2e00      	cmp	r6, #0
 80082e4:	d077      	beq.n	80083d6 <_dtoa_r+0x1d6>
 80082e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80082ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80082f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80082fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008300:	4619      	mov	r1, r3
 8008302:	2200      	movs	r2, #0
 8008304:	4b74      	ldr	r3, [pc, #464]	@ (80084d8 <_dtoa_r+0x2d8>)
 8008306:	f7f7 ffdf 	bl	80002c8 <__aeabi_dsub>
 800830a:	a369      	add	r3, pc, #420	@ (adr r3, 80084b0 <_dtoa_r+0x2b0>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f8 f992 	bl	8000638 <__aeabi_dmul>
 8008314:	a368      	add	r3, pc, #416	@ (adr r3, 80084b8 <_dtoa_r+0x2b8>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f7f7 ffd7 	bl	80002cc <__adddf3>
 800831e:	4604      	mov	r4, r0
 8008320:	4630      	mov	r0, r6
 8008322:	460d      	mov	r5, r1
 8008324:	f7f8 f91e 	bl	8000564 <__aeabi_i2d>
 8008328:	a365      	add	r3, pc, #404	@ (adr r3, 80084c0 <_dtoa_r+0x2c0>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f8 f983 	bl	8000638 <__aeabi_dmul>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	f7f7 ffc7 	bl	80002cc <__adddf3>
 800833e:	4604      	mov	r4, r0
 8008340:	460d      	mov	r5, r1
 8008342:	f7f8 fc29 	bl	8000b98 <__aeabi_d2iz>
 8008346:	2200      	movs	r2, #0
 8008348:	4607      	mov	r7, r0
 800834a:	2300      	movs	r3, #0
 800834c:	4620      	mov	r0, r4
 800834e:	4629      	mov	r1, r5
 8008350:	f7f8 fbe4 	bl	8000b1c <__aeabi_dcmplt>
 8008354:	b140      	cbz	r0, 8008368 <_dtoa_r+0x168>
 8008356:	4638      	mov	r0, r7
 8008358:	f7f8 f904 	bl	8000564 <__aeabi_i2d>
 800835c:	4622      	mov	r2, r4
 800835e:	462b      	mov	r3, r5
 8008360:	f7f8 fbd2 	bl	8000b08 <__aeabi_dcmpeq>
 8008364:	b900      	cbnz	r0, 8008368 <_dtoa_r+0x168>
 8008366:	3f01      	subs	r7, #1
 8008368:	2f16      	cmp	r7, #22
 800836a:	d851      	bhi.n	8008410 <_dtoa_r+0x210>
 800836c:	4b5b      	ldr	r3, [pc, #364]	@ (80084dc <_dtoa_r+0x2dc>)
 800836e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800837a:	f7f8 fbcf 	bl	8000b1c <__aeabi_dcmplt>
 800837e:	2800      	cmp	r0, #0
 8008380:	d048      	beq.n	8008414 <_dtoa_r+0x214>
 8008382:	3f01      	subs	r7, #1
 8008384:	2300      	movs	r3, #0
 8008386:	9312      	str	r3, [sp, #72]	@ 0x48
 8008388:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800838a:	1b9b      	subs	r3, r3, r6
 800838c:	1e5a      	subs	r2, r3, #1
 800838e:	bf44      	itt	mi
 8008390:	f1c3 0801 	rsbmi	r8, r3, #1
 8008394:	2300      	movmi	r3, #0
 8008396:	9208      	str	r2, [sp, #32]
 8008398:	bf54      	ite	pl
 800839a:	f04f 0800 	movpl.w	r8, #0
 800839e:	9308      	strmi	r3, [sp, #32]
 80083a0:	2f00      	cmp	r7, #0
 80083a2:	db39      	blt.n	8008418 <_dtoa_r+0x218>
 80083a4:	9b08      	ldr	r3, [sp, #32]
 80083a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80083a8:	443b      	add	r3, r7
 80083aa:	9308      	str	r3, [sp, #32]
 80083ac:	2300      	movs	r3, #0
 80083ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80083b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b2:	2b09      	cmp	r3, #9
 80083b4:	d864      	bhi.n	8008480 <_dtoa_r+0x280>
 80083b6:	2b05      	cmp	r3, #5
 80083b8:	bfc4      	itt	gt
 80083ba:	3b04      	subgt	r3, #4
 80083bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80083be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083c0:	f1a3 0302 	sub.w	r3, r3, #2
 80083c4:	bfcc      	ite	gt
 80083c6:	2400      	movgt	r4, #0
 80083c8:	2401      	movle	r4, #1
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d863      	bhi.n	8008496 <_dtoa_r+0x296>
 80083ce:	e8df f003 	tbb	[pc, r3]
 80083d2:	372a      	.short	0x372a
 80083d4:	5535      	.short	0x5535
 80083d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80083da:	441e      	add	r6, r3
 80083dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	bfc1      	itttt	gt
 80083e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80083e8:	409f      	lslgt	r7, r3
 80083ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80083ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80083f2:	bfd6      	itet	le
 80083f4:	f1c3 0320 	rsble	r3, r3, #32
 80083f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80083fc:	fa04 f003 	lslle.w	r0, r4, r3
 8008400:	f7f8 f8a0 	bl	8000544 <__aeabi_ui2d>
 8008404:	2201      	movs	r2, #1
 8008406:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800840a:	3e01      	subs	r6, #1
 800840c:	9214      	str	r2, [sp, #80]	@ 0x50
 800840e:	e777      	b.n	8008300 <_dtoa_r+0x100>
 8008410:	2301      	movs	r3, #1
 8008412:	e7b8      	b.n	8008386 <_dtoa_r+0x186>
 8008414:	9012      	str	r0, [sp, #72]	@ 0x48
 8008416:	e7b7      	b.n	8008388 <_dtoa_r+0x188>
 8008418:	427b      	negs	r3, r7
 800841a:	930a      	str	r3, [sp, #40]	@ 0x28
 800841c:	2300      	movs	r3, #0
 800841e:	eba8 0807 	sub.w	r8, r8, r7
 8008422:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008424:	e7c4      	b.n	80083b0 <_dtoa_r+0x1b0>
 8008426:	2300      	movs	r3, #0
 8008428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800842a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800842c:	2b00      	cmp	r3, #0
 800842e:	dc35      	bgt.n	800849c <_dtoa_r+0x29c>
 8008430:	2301      	movs	r3, #1
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	9307      	str	r3, [sp, #28]
 8008436:	461a      	mov	r2, r3
 8008438:	920e      	str	r2, [sp, #56]	@ 0x38
 800843a:	e00b      	b.n	8008454 <_dtoa_r+0x254>
 800843c:	2301      	movs	r3, #1
 800843e:	e7f3      	b.n	8008428 <_dtoa_r+0x228>
 8008440:	2300      	movs	r3, #0
 8008442:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008446:	18fb      	adds	r3, r7, r3
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	3301      	adds	r3, #1
 800844c:	2b01      	cmp	r3, #1
 800844e:	9307      	str	r3, [sp, #28]
 8008450:	bfb8      	it	lt
 8008452:	2301      	movlt	r3, #1
 8008454:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008458:	2100      	movs	r1, #0
 800845a:	2204      	movs	r2, #4
 800845c:	f102 0514 	add.w	r5, r2, #20
 8008460:	429d      	cmp	r5, r3
 8008462:	d91f      	bls.n	80084a4 <_dtoa_r+0x2a4>
 8008464:	6041      	str	r1, [r0, #4]
 8008466:	4658      	mov	r0, fp
 8008468:	f000 fcd8 	bl	8008e1c <_Balloc>
 800846c:	4682      	mov	sl, r0
 800846e:	2800      	cmp	r0, #0
 8008470:	d13c      	bne.n	80084ec <_dtoa_r+0x2ec>
 8008472:	4b1b      	ldr	r3, [pc, #108]	@ (80084e0 <_dtoa_r+0x2e0>)
 8008474:	4602      	mov	r2, r0
 8008476:	f240 11af 	movw	r1, #431	@ 0x1af
 800847a:	e6d8      	b.n	800822e <_dtoa_r+0x2e>
 800847c:	2301      	movs	r3, #1
 800847e:	e7e0      	b.n	8008442 <_dtoa_r+0x242>
 8008480:	2401      	movs	r4, #1
 8008482:	2300      	movs	r3, #0
 8008484:	9309      	str	r3, [sp, #36]	@ 0x24
 8008486:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008488:	f04f 33ff 	mov.w	r3, #4294967295
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	9307      	str	r3, [sp, #28]
 8008490:	2200      	movs	r2, #0
 8008492:	2312      	movs	r3, #18
 8008494:	e7d0      	b.n	8008438 <_dtoa_r+0x238>
 8008496:	2301      	movs	r3, #1
 8008498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800849a:	e7f5      	b.n	8008488 <_dtoa_r+0x288>
 800849c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	9307      	str	r3, [sp, #28]
 80084a2:	e7d7      	b.n	8008454 <_dtoa_r+0x254>
 80084a4:	3101      	adds	r1, #1
 80084a6:	0052      	lsls	r2, r2, #1
 80084a8:	e7d8      	b.n	800845c <_dtoa_r+0x25c>
 80084aa:	bf00      	nop
 80084ac:	f3af 8000 	nop.w
 80084b0:	636f4361 	.word	0x636f4361
 80084b4:	3fd287a7 	.word	0x3fd287a7
 80084b8:	8b60c8b3 	.word	0x8b60c8b3
 80084bc:	3fc68a28 	.word	0x3fc68a28
 80084c0:	509f79fb 	.word	0x509f79fb
 80084c4:	3fd34413 	.word	0x3fd34413
 80084c8:	0800a139 	.word	0x0800a139
 80084cc:	0800a150 	.word	0x0800a150
 80084d0:	7ff00000 	.word	0x7ff00000
 80084d4:	0800a109 	.word	0x0800a109
 80084d8:	3ff80000 	.word	0x3ff80000
 80084dc:	0800a248 	.word	0x0800a248
 80084e0:	0800a1a8 	.word	0x0800a1a8
 80084e4:	0800a135 	.word	0x0800a135
 80084e8:	0800a108 	.word	0x0800a108
 80084ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80084f0:	6018      	str	r0, [r3, #0]
 80084f2:	9b07      	ldr	r3, [sp, #28]
 80084f4:	2b0e      	cmp	r3, #14
 80084f6:	f200 80a4 	bhi.w	8008642 <_dtoa_r+0x442>
 80084fa:	2c00      	cmp	r4, #0
 80084fc:	f000 80a1 	beq.w	8008642 <_dtoa_r+0x442>
 8008500:	2f00      	cmp	r7, #0
 8008502:	dd33      	ble.n	800856c <_dtoa_r+0x36c>
 8008504:	4bad      	ldr	r3, [pc, #692]	@ (80087bc <_dtoa_r+0x5bc>)
 8008506:	f007 020f 	and.w	r2, r7, #15
 800850a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800850e:	ed93 7b00 	vldr	d7, [r3]
 8008512:	05f8      	lsls	r0, r7, #23
 8008514:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008518:	ea4f 1427 	mov.w	r4, r7, asr #4
 800851c:	d516      	bpl.n	800854c <_dtoa_r+0x34c>
 800851e:	4ba8      	ldr	r3, [pc, #672]	@ (80087c0 <_dtoa_r+0x5c0>)
 8008520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008524:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008528:	f7f8 f9b0 	bl	800088c <__aeabi_ddiv>
 800852c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008530:	f004 040f 	and.w	r4, r4, #15
 8008534:	2603      	movs	r6, #3
 8008536:	4da2      	ldr	r5, [pc, #648]	@ (80087c0 <_dtoa_r+0x5c0>)
 8008538:	b954      	cbnz	r4, 8008550 <_dtoa_r+0x350>
 800853a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800853e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008542:	f7f8 f9a3 	bl	800088c <__aeabi_ddiv>
 8008546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800854a:	e028      	b.n	800859e <_dtoa_r+0x39e>
 800854c:	2602      	movs	r6, #2
 800854e:	e7f2      	b.n	8008536 <_dtoa_r+0x336>
 8008550:	07e1      	lsls	r1, r4, #31
 8008552:	d508      	bpl.n	8008566 <_dtoa_r+0x366>
 8008554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008558:	e9d5 2300 	ldrd	r2, r3, [r5]
 800855c:	f7f8 f86c 	bl	8000638 <__aeabi_dmul>
 8008560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008564:	3601      	adds	r6, #1
 8008566:	1064      	asrs	r4, r4, #1
 8008568:	3508      	adds	r5, #8
 800856a:	e7e5      	b.n	8008538 <_dtoa_r+0x338>
 800856c:	f000 80d2 	beq.w	8008714 <_dtoa_r+0x514>
 8008570:	427c      	negs	r4, r7
 8008572:	4b92      	ldr	r3, [pc, #584]	@ (80087bc <_dtoa_r+0x5bc>)
 8008574:	4d92      	ldr	r5, [pc, #584]	@ (80087c0 <_dtoa_r+0x5c0>)
 8008576:	f004 020f 	and.w	r2, r4, #15
 800857a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008586:	f7f8 f857 	bl	8000638 <__aeabi_dmul>
 800858a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800858e:	1124      	asrs	r4, r4, #4
 8008590:	2300      	movs	r3, #0
 8008592:	2602      	movs	r6, #2
 8008594:	2c00      	cmp	r4, #0
 8008596:	f040 80b2 	bne.w	80086fe <_dtoa_r+0x4fe>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1d3      	bne.n	8008546 <_dtoa_r+0x346>
 800859e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 80b7 	beq.w	8008718 <_dtoa_r+0x518>
 80085aa:	4b86      	ldr	r3, [pc, #536]	@ (80087c4 <_dtoa_r+0x5c4>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	4620      	mov	r0, r4
 80085b0:	4629      	mov	r1, r5
 80085b2:	f7f8 fab3 	bl	8000b1c <__aeabi_dcmplt>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	f000 80ae 	beq.w	8008718 <_dtoa_r+0x518>
 80085bc:	9b07      	ldr	r3, [sp, #28]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 80aa 	beq.w	8008718 <_dtoa_r+0x518>
 80085c4:	9b00      	ldr	r3, [sp, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	dd37      	ble.n	800863a <_dtoa_r+0x43a>
 80085ca:	1e7b      	subs	r3, r7, #1
 80085cc:	9304      	str	r3, [sp, #16]
 80085ce:	4620      	mov	r0, r4
 80085d0:	4b7d      	ldr	r3, [pc, #500]	@ (80087c8 <_dtoa_r+0x5c8>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	4629      	mov	r1, r5
 80085d6:	f7f8 f82f 	bl	8000638 <__aeabi_dmul>
 80085da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085de:	9c00      	ldr	r4, [sp, #0]
 80085e0:	3601      	adds	r6, #1
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7f7 ffbe 	bl	8000564 <__aeabi_i2d>
 80085e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085ec:	f7f8 f824 	bl	8000638 <__aeabi_dmul>
 80085f0:	4b76      	ldr	r3, [pc, #472]	@ (80087cc <_dtoa_r+0x5cc>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	f7f7 fe6a 	bl	80002cc <__adddf3>
 80085f8:	4605      	mov	r5, r0
 80085fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80085fe:	2c00      	cmp	r4, #0
 8008600:	f040 808d 	bne.w	800871e <_dtoa_r+0x51e>
 8008604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008608:	4b71      	ldr	r3, [pc, #452]	@ (80087d0 <_dtoa_r+0x5d0>)
 800860a:	2200      	movs	r2, #0
 800860c:	f7f7 fe5c 	bl	80002c8 <__aeabi_dsub>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008618:	462a      	mov	r2, r5
 800861a:	4633      	mov	r3, r6
 800861c:	f7f8 fa9c 	bl	8000b58 <__aeabi_dcmpgt>
 8008620:	2800      	cmp	r0, #0
 8008622:	f040 828b 	bne.w	8008b3c <_dtoa_r+0x93c>
 8008626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800862a:	462a      	mov	r2, r5
 800862c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008630:	f7f8 fa74 	bl	8000b1c <__aeabi_dcmplt>
 8008634:	2800      	cmp	r0, #0
 8008636:	f040 8128 	bne.w	800888a <_dtoa_r+0x68a>
 800863a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800863e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008642:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008644:	2b00      	cmp	r3, #0
 8008646:	f2c0 815a 	blt.w	80088fe <_dtoa_r+0x6fe>
 800864a:	2f0e      	cmp	r7, #14
 800864c:	f300 8157 	bgt.w	80088fe <_dtoa_r+0x6fe>
 8008650:	4b5a      	ldr	r3, [pc, #360]	@ (80087bc <_dtoa_r+0x5bc>)
 8008652:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008656:	ed93 7b00 	vldr	d7, [r3]
 800865a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800865c:	2b00      	cmp	r3, #0
 800865e:	ed8d 7b00 	vstr	d7, [sp]
 8008662:	da03      	bge.n	800866c <_dtoa_r+0x46c>
 8008664:	9b07      	ldr	r3, [sp, #28]
 8008666:	2b00      	cmp	r3, #0
 8008668:	f340 8101 	ble.w	800886e <_dtoa_r+0x66e>
 800866c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008670:	4656      	mov	r6, sl
 8008672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	f7f8 f907 	bl	800088c <__aeabi_ddiv>
 800867e:	f7f8 fa8b 	bl	8000b98 <__aeabi_d2iz>
 8008682:	4680      	mov	r8, r0
 8008684:	f7f7 ff6e 	bl	8000564 <__aeabi_i2d>
 8008688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800868c:	f7f7 ffd4 	bl	8000638 <__aeabi_dmul>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4620      	mov	r0, r4
 8008696:	4629      	mov	r1, r5
 8008698:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800869c:	f7f7 fe14 	bl	80002c8 <__aeabi_dsub>
 80086a0:	f806 4b01 	strb.w	r4, [r6], #1
 80086a4:	9d07      	ldr	r5, [sp, #28]
 80086a6:	eba6 040a 	sub.w	r4, r6, sl
 80086aa:	42a5      	cmp	r5, r4
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	f040 8117 	bne.w	80088e2 <_dtoa_r+0x6e2>
 80086b4:	f7f7 fe0a 	bl	80002cc <__adddf3>
 80086b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086bc:	4604      	mov	r4, r0
 80086be:	460d      	mov	r5, r1
 80086c0:	f7f8 fa4a 	bl	8000b58 <__aeabi_dcmpgt>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	f040 80f9 	bne.w	80088bc <_dtoa_r+0x6bc>
 80086ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086ce:	4620      	mov	r0, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7f8 fa19 	bl	8000b08 <__aeabi_dcmpeq>
 80086d6:	b118      	cbz	r0, 80086e0 <_dtoa_r+0x4e0>
 80086d8:	f018 0f01 	tst.w	r8, #1
 80086dc:	f040 80ee 	bne.w	80088bc <_dtoa_r+0x6bc>
 80086e0:	4649      	mov	r1, r9
 80086e2:	4658      	mov	r0, fp
 80086e4:	f000 fbda 	bl	8008e9c <_Bfree>
 80086e8:	2300      	movs	r3, #0
 80086ea:	7033      	strb	r3, [r6, #0]
 80086ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80086ee:	3701      	adds	r7, #1
 80086f0:	601f      	str	r7, [r3, #0]
 80086f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 831d 	beq.w	8008d34 <_dtoa_r+0xb34>
 80086fa:	601e      	str	r6, [r3, #0]
 80086fc:	e31a      	b.n	8008d34 <_dtoa_r+0xb34>
 80086fe:	07e2      	lsls	r2, r4, #31
 8008700:	d505      	bpl.n	800870e <_dtoa_r+0x50e>
 8008702:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008706:	f7f7 ff97 	bl	8000638 <__aeabi_dmul>
 800870a:	3601      	adds	r6, #1
 800870c:	2301      	movs	r3, #1
 800870e:	1064      	asrs	r4, r4, #1
 8008710:	3508      	adds	r5, #8
 8008712:	e73f      	b.n	8008594 <_dtoa_r+0x394>
 8008714:	2602      	movs	r6, #2
 8008716:	e742      	b.n	800859e <_dtoa_r+0x39e>
 8008718:	9c07      	ldr	r4, [sp, #28]
 800871a:	9704      	str	r7, [sp, #16]
 800871c:	e761      	b.n	80085e2 <_dtoa_r+0x3e2>
 800871e:	4b27      	ldr	r3, [pc, #156]	@ (80087bc <_dtoa_r+0x5bc>)
 8008720:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008722:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008726:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800872a:	4454      	add	r4, sl
 800872c:	2900      	cmp	r1, #0
 800872e:	d053      	beq.n	80087d8 <_dtoa_r+0x5d8>
 8008730:	4928      	ldr	r1, [pc, #160]	@ (80087d4 <_dtoa_r+0x5d4>)
 8008732:	2000      	movs	r0, #0
 8008734:	f7f8 f8aa 	bl	800088c <__aeabi_ddiv>
 8008738:	4633      	mov	r3, r6
 800873a:	462a      	mov	r2, r5
 800873c:	f7f7 fdc4 	bl	80002c8 <__aeabi_dsub>
 8008740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008744:	4656      	mov	r6, sl
 8008746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800874a:	f7f8 fa25 	bl	8000b98 <__aeabi_d2iz>
 800874e:	4605      	mov	r5, r0
 8008750:	f7f7 ff08 	bl	8000564 <__aeabi_i2d>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800875c:	f7f7 fdb4 	bl	80002c8 <__aeabi_dsub>
 8008760:	3530      	adds	r5, #48	@ 0x30
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800876a:	f806 5b01 	strb.w	r5, [r6], #1
 800876e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008772:	f7f8 f9d3 	bl	8000b1c <__aeabi_dcmplt>
 8008776:	2800      	cmp	r0, #0
 8008778:	d171      	bne.n	800885e <_dtoa_r+0x65e>
 800877a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800877e:	4911      	ldr	r1, [pc, #68]	@ (80087c4 <_dtoa_r+0x5c4>)
 8008780:	2000      	movs	r0, #0
 8008782:	f7f7 fda1 	bl	80002c8 <__aeabi_dsub>
 8008786:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800878a:	f7f8 f9c7 	bl	8000b1c <__aeabi_dcmplt>
 800878e:	2800      	cmp	r0, #0
 8008790:	f040 8095 	bne.w	80088be <_dtoa_r+0x6be>
 8008794:	42a6      	cmp	r6, r4
 8008796:	f43f af50 	beq.w	800863a <_dtoa_r+0x43a>
 800879a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800879e:	4b0a      	ldr	r3, [pc, #40]	@ (80087c8 <_dtoa_r+0x5c8>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	f7f7 ff49 	bl	8000638 <__aeabi_dmul>
 80087a6:	4b08      	ldr	r3, [pc, #32]	@ (80087c8 <_dtoa_r+0x5c8>)
 80087a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087ac:	2200      	movs	r2, #0
 80087ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087b2:	f7f7 ff41 	bl	8000638 <__aeabi_dmul>
 80087b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087ba:	e7c4      	b.n	8008746 <_dtoa_r+0x546>
 80087bc:	0800a248 	.word	0x0800a248
 80087c0:	0800a220 	.word	0x0800a220
 80087c4:	3ff00000 	.word	0x3ff00000
 80087c8:	40240000 	.word	0x40240000
 80087cc:	401c0000 	.word	0x401c0000
 80087d0:	40140000 	.word	0x40140000
 80087d4:	3fe00000 	.word	0x3fe00000
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	f7f7 ff2c 	bl	8000638 <__aeabi_dmul>
 80087e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80087e6:	4656      	mov	r6, sl
 80087e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ec:	f7f8 f9d4 	bl	8000b98 <__aeabi_d2iz>
 80087f0:	4605      	mov	r5, r0
 80087f2:	f7f7 feb7 	bl	8000564 <__aeabi_i2d>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087fe:	f7f7 fd63 	bl	80002c8 <__aeabi_dsub>
 8008802:	3530      	adds	r5, #48	@ 0x30
 8008804:	f806 5b01 	strb.w	r5, [r6], #1
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	42a6      	cmp	r6, r4
 800880e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	d124      	bne.n	8008862 <_dtoa_r+0x662>
 8008818:	4bac      	ldr	r3, [pc, #688]	@ (8008acc <_dtoa_r+0x8cc>)
 800881a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800881e:	f7f7 fd55 	bl	80002cc <__adddf3>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800882a:	f7f8 f995 	bl	8000b58 <__aeabi_dcmpgt>
 800882e:	2800      	cmp	r0, #0
 8008830:	d145      	bne.n	80088be <_dtoa_r+0x6be>
 8008832:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008836:	49a5      	ldr	r1, [pc, #660]	@ (8008acc <_dtoa_r+0x8cc>)
 8008838:	2000      	movs	r0, #0
 800883a:	f7f7 fd45 	bl	80002c8 <__aeabi_dsub>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008846:	f7f8 f969 	bl	8000b1c <__aeabi_dcmplt>
 800884a:	2800      	cmp	r0, #0
 800884c:	f43f aef5 	beq.w	800863a <_dtoa_r+0x43a>
 8008850:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008852:	1e73      	subs	r3, r6, #1
 8008854:	9315      	str	r3, [sp, #84]	@ 0x54
 8008856:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800885a:	2b30      	cmp	r3, #48	@ 0x30
 800885c:	d0f8      	beq.n	8008850 <_dtoa_r+0x650>
 800885e:	9f04      	ldr	r7, [sp, #16]
 8008860:	e73e      	b.n	80086e0 <_dtoa_r+0x4e0>
 8008862:	4b9b      	ldr	r3, [pc, #620]	@ (8008ad0 <_dtoa_r+0x8d0>)
 8008864:	f7f7 fee8 	bl	8000638 <__aeabi_dmul>
 8008868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800886c:	e7bc      	b.n	80087e8 <_dtoa_r+0x5e8>
 800886e:	d10c      	bne.n	800888a <_dtoa_r+0x68a>
 8008870:	4b98      	ldr	r3, [pc, #608]	@ (8008ad4 <_dtoa_r+0x8d4>)
 8008872:	2200      	movs	r2, #0
 8008874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008878:	f7f7 fede 	bl	8000638 <__aeabi_dmul>
 800887c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008880:	f7f8 f960 	bl	8000b44 <__aeabi_dcmpge>
 8008884:	2800      	cmp	r0, #0
 8008886:	f000 8157 	beq.w	8008b38 <_dtoa_r+0x938>
 800888a:	2400      	movs	r4, #0
 800888c:	4625      	mov	r5, r4
 800888e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008890:	43db      	mvns	r3, r3
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	4656      	mov	r6, sl
 8008896:	2700      	movs	r7, #0
 8008898:	4621      	mov	r1, r4
 800889a:	4658      	mov	r0, fp
 800889c:	f000 fafe 	bl	8008e9c <_Bfree>
 80088a0:	2d00      	cmp	r5, #0
 80088a2:	d0dc      	beq.n	800885e <_dtoa_r+0x65e>
 80088a4:	b12f      	cbz	r7, 80088b2 <_dtoa_r+0x6b2>
 80088a6:	42af      	cmp	r7, r5
 80088a8:	d003      	beq.n	80088b2 <_dtoa_r+0x6b2>
 80088aa:	4639      	mov	r1, r7
 80088ac:	4658      	mov	r0, fp
 80088ae:	f000 faf5 	bl	8008e9c <_Bfree>
 80088b2:	4629      	mov	r1, r5
 80088b4:	4658      	mov	r0, fp
 80088b6:	f000 faf1 	bl	8008e9c <_Bfree>
 80088ba:	e7d0      	b.n	800885e <_dtoa_r+0x65e>
 80088bc:	9704      	str	r7, [sp, #16]
 80088be:	4633      	mov	r3, r6
 80088c0:	461e      	mov	r6, r3
 80088c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088c6:	2a39      	cmp	r2, #57	@ 0x39
 80088c8:	d107      	bne.n	80088da <_dtoa_r+0x6da>
 80088ca:	459a      	cmp	sl, r3
 80088cc:	d1f8      	bne.n	80088c0 <_dtoa_r+0x6c0>
 80088ce:	9a04      	ldr	r2, [sp, #16]
 80088d0:	3201      	adds	r2, #1
 80088d2:	9204      	str	r2, [sp, #16]
 80088d4:	2230      	movs	r2, #48	@ 0x30
 80088d6:	f88a 2000 	strb.w	r2, [sl]
 80088da:	781a      	ldrb	r2, [r3, #0]
 80088dc:	3201      	adds	r2, #1
 80088de:	701a      	strb	r2, [r3, #0]
 80088e0:	e7bd      	b.n	800885e <_dtoa_r+0x65e>
 80088e2:	4b7b      	ldr	r3, [pc, #492]	@ (8008ad0 <_dtoa_r+0x8d0>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	f7f7 fea7 	bl	8000638 <__aeabi_dmul>
 80088ea:	2200      	movs	r2, #0
 80088ec:	2300      	movs	r3, #0
 80088ee:	4604      	mov	r4, r0
 80088f0:	460d      	mov	r5, r1
 80088f2:	f7f8 f909 	bl	8000b08 <__aeabi_dcmpeq>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	f43f aebb 	beq.w	8008672 <_dtoa_r+0x472>
 80088fc:	e6f0      	b.n	80086e0 <_dtoa_r+0x4e0>
 80088fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008900:	2a00      	cmp	r2, #0
 8008902:	f000 80db 	beq.w	8008abc <_dtoa_r+0x8bc>
 8008906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008908:	2a01      	cmp	r2, #1
 800890a:	f300 80bf 	bgt.w	8008a8c <_dtoa_r+0x88c>
 800890e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008910:	2a00      	cmp	r2, #0
 8008912:	f000 80b7 	beq.w	8008a84 <_dtoa_r+0x884>
 8008916:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800891a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800891c:	4646      	mov	r6, r8
 800891e:	9a08      	ldr	r2, [sp, #32]
 8008920:	2101      	movs	r1, #1
 8008922:	441a      	add	r2, r3
 8008924:	4658      	mov	r0, fp
 8008926:	4498      	add	r8, r3
 8008928:	9208      	str	r2, [sp, #32]
 800892a:	f000 fb6b 	bl	8009004 <__i2b>
 800892e:	4605      	mov	r5, r0
 8008930:	b15e      	cbz	r6, 800894a <_dtoa_r+0x74a>
 8008932:	9b08      	ldr	r3, [sp, #32]
 8008934:	2b00      	cmp	r3, #0
 8008936:	dd08      	ble.n	800894a <_dtoa_r+0x74a>
 8008938:	42b3      	cmp	r3, r6
 800893a:	9a08      	ldr	r2, [sp, #32]
 800893c:	bfa8      	it	ge
 800893e:	4633      	movge	r3, r6
 8008940:	eba8 0803 	sub.w	r8, r8, r3
 8008944:	1af6      	subs	r6, r6, r3
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	9308      	str	r3, [sp, #32]
 800894a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800894c:	b1f3      	cbz	r3, 800898c <_dtoa_r+0x78c>
 800894e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 80b7 	beq.w	8008ac4 <_dtoa_r+0x8c4>
 8008956:	b18c      	cbz	r4, 800897c <_dtoa_r+0x77c>
 8008958:	4629      	mov	r1, r5
 800895a:	4622      	mov	r2, r4
 800895c:	4658      	mov	r0, fp
 800895e:	f000 fc11 	bl	8009184 <__pow5mult>
 8008962:	464a      	mov	r2, r9
 8008964:	4601      	mov	r1, r0
 8008966:	4605      	mov	r5, r0
 8008968:	4658      	mov	r0, fp
 800896a:	f000 fb61 	bl	8009030 <__multiply>
 800896e:	4649      	mov	r1, r9
 8008970:	9004      	str	r0, [sp, #16]
 8008972:	4658      	mov	r0, fp
 8008974:	f000 fa92 	bl	8008e9c <_Bfree>
 8008978:	9b04      	ldr	r3, [sp, #16]
 800897a:	4699      	mov	r9, r3
 800897c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800897e:	1b1a      	subs	r2, r3, r4
 8008980:	d004      	beq.n	800898c <_dtoa_r+0x78c>
 8008982:	4649      	mov	r1, r9
 8008984:	4658      	mov	r0, fp
 8008986:	f000 fbfd 	bl	8009184 <__pow5mult>
 800898a:	4681      	mov	r9, r0
 800898c:	2101      	movs	r1, #1
 800898e:	4658      	mov	r0, fp
 8008990:	f000 fb38 	bl	8009004 <__i2b>
 8008994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008996:	4604      	mov	r4, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 81cf 	beq.w	8008d3c <_dtoa_r+0xb3c>
 800899e:	461a      	mov	r2, r3
 80089a0:	4601      	mov	r1, r0
 80089a2:	4658      	mov	r0, fp
 80089a4:	f000 fbee 	bl	8009184 <__pow5mult>
 80089a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	4604      	mov	r4, r0
 80089ae:	f300 8095 	bgt.w	8008adc <_dtoa_r+0x8dc>
 80089b2:	9b02      	ldr	r3, [sp, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f040 8087 	bne.w	8008ac8 <_dtoa_r+0x8c8>
 80089ba:	9b03      	ldr	r3, [sp, #12]
 80089bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f040 8089 	bne.w	8008ad8 <_dtoa_r+0x8d8>
 80089c6:	9b03      	ldr	r3, [sp, #12]
 80089c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089cc:	0d1b      	lsrs	r3, r3, #20
 80089ce:	051b      	lsls	r3, r3, #20
 80089d0:	b12b      	cbz	r3, 80089de <_dtoa_r+0x7de>
 80089d2:	9b08      	ldr	r3, [sp, #32]
 80089d4:	3301      	adds	r3, #1
 80089d6:	9308      	str	r3, [sp, #32]
 80089d8:	f108 0801 	add.w	r8, r8, #1
 80089dc:	2301      	movs	r3, #1
 80089de:	930a      	str	r3, [sp, #40]	@ 0x28
 80089e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f000 81b0 	beq.w	8008d48 <_dtoa_r+0xb48>
 80089e8:	6923      	ldr	r3, [r4, #16]
 80089ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089ee:	6918      	ldr	r0, [r3, #16]
 80089f0:	f000 fabc 	bl	8008f6c <__hi0bits>
 80089f4:	f1c0 0020 	rsb	r0, r0, #32
 80089f8:	9b08      	ldr	r3, [sp, #32]
 80089fa:	4418      	add	r0, r3
 80089fc:	f010 001f 	ands.w	r0, r0, #31
 8008a00:	d077      	beq.n	8008af2 <_dtoa_r+0x8f2>
 8008a02:	f1c0 0320 	rsb	r3, r0, #32
 8008a06:	2b04      	cmp	r3, #4
 8008a08:	dd6b      	ble.n	8008ae2 <_dtoa_r+0x8e2>
 8008a0a:	9b08      	ldr	r3, [sp, #32]
 8008a0c:	f1c0 001c 	rsb	r0, r0, #28
 8008a10:	4403      	add	r3, r0
 8008a12:	4480      	add	r8, r0
 8008a14:	4406      	add	r6, r0
 8008a16:	9308      	str	r3, [sp, #32]
 8008a18:	f1b8 0f00 	cmp.w	r8, #0
 8008a1c:	dd05      	ble.n	8008a2a <_dtoa_r+0x82a>
 8008a1e:	4649      	mov	r1, r9
 8008a20:	4642      	mov	r2, r8
 8008a22:	4658      	mov	r0, fp
 8008a24:	f000 fc08 	bl	8009238 <__lshift>
 8008a28:	4681      	mov	r9, r0
 8008a2a:	9b08      	ldr	r3, [sp, #32]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dd05      	ble.n	8008a3c <_dtoa_r+0x83c>
 8008a30:	4621      	mov	r1, r4
 8008a32:	461a      	mov	r2, r3
 8008a34:	4658      	mov	r0, fp
 8008a36:	f000 fbff 	bl	8009238 <__lshift>
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d059      	beq.n	8008af6 <_dtoa_r+0x8f6>
 8008a42:	4621      	mov	r1, r4
 8008a44:	4648      	mov	r0, r9
 8008a46:	f000 fc63 	bl	8009310 <__mcmp>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	da53      	bge.n	8008af6 <_dtoa_r+0x8f6>
 8008a4e:	1e7b      	subs	r3, r7, #1
 8008a50:	9304      	str	r3, [sp, #16]
 8008a52:	4649      	mov	r1, r9
 8008a54:	2300      	movs	r3, #0
 8008a56:	220a      	movs	r2, #10
 8008a58:	4658      	mov	r0, fp
 8008a5a:	f000 fa41 	bl	8008ee0 <__multadd>
 8008a5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a60:	4681      	mov	r9, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 8172 	beq.w	8008d4c <_dtoa_r+0xb4c>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	220a      	movs	r2, #10
 8008a6e:	4658      	mov	r0, fp
 8008a70:	f000 fa36 	bl	8008ee0 <__multadd>
 8008a74:	9b00      	ldr	r3, [sp, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	4605      	mov	r5, r0
 8008a7a:	dc67      	bgt.n	8008b4c <_dtoa_r+0x94c>
 8008a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	dc41      	bgt.n	8008b06 <_dtoa_r+0x906>
 8008a82:	e063      	b.n	8008b4c <_dtoa_r+0x94c>
 8008a84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a8a:	e746      	b.n	800891a <_dtoa_r+0x71a>
 8008a8c:	9b07      	ldr	r3, [sp, #28]
 8008a8e:	1e5c      	subs	r4, r3, #1
 8008a90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a92:	42a3      	cmp	r3, r4
 8008a94:	bfbf      	itttt	lt
 8008a96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008a98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008a9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008a9c:	1ae3      	sublt	r3, r4, r3
 8008a9e:	bfb4      	ite	lt
 8008aa0:	18d2      	addlt	r2, r2, r3
 8008aa2:	1b1c      	subge	r4, r3, r4
 8008aa4:	9b07      	ldr	r3, [sp, #28]
 8008aa6:	bfbc      	itt	lt
 8008aa8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008aaa:	2400      	movlt	r4, #0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	bfb5      	itete	lt
 8008ab0:	eba8 0603 	sublt.w	r6, r8, r3
 8008ab4:	9b07      	ldrge	r3, [sp, #28]
 8008ab6:	2300      	movlt	r3, #0
 8008ab8:	4646      	movge	r6, r8
 8008aba:	e730      	b.n	800891e <_dtoa_r+0x71e>
 8008abc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008abe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008ac0:	4646      	mov	r6, r8
 8008ac2:	e735      	b.n	8008930 <_dtoa_r+0x730>
 8008ac4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ac6:	e75c      	b.n	8008982 <_dtoa_r+0x782>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e788      	b.n	80089de <_dtoa_r+0x7de>
 8008acc:	3fe00000 	.word	0x3fe00000
 8008ad0:	40240000 	.word	0x40240000
 8008ad4:	40140000 	.word	0x40140000
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	e780      	b.n	80089de <_dtoa_r+0x7de>
 8008adc:	2300      	movs	r3, #0
 8008ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ae0:	e782      	b.n	80089e8 <_dtoa_r+0x7e8>
 8008ae2:	d099      	beq.n	8008a18 <_dtoa_r+0x818>
 8008ae4:	9a08      	ldr	r2, [sp, #32]
 8008ae6:	331c      	adds	r3, #28
 8008ae8:	441a      	add	r2, r3
 8008aea:	4498      	add	r8, r3
 8008aec:	441e      	add	r6, r3
 8008aee:	9208      	str	r2, [sp, #32]
 8008af0:	e792      	b.n	8008a18 <_dtoa_r+0x818>
 8008af2:	4603      	mov	r3, r0
 8008af4:	e7f6      	b.n	8008ae4 <_dtoa_r+0x8e4>
 8008af6:	9b07      	ldr	r3, [sp, #28]
 8008af8:	9704      	str	r7, [sp, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	dc20      	bgt.n	8008b40 <_dtoa_r+0x940>
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	dd1e      	ble.n	8008b44 <_dtoa_r+0x944>
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f47f aec0 	bne.w	800888e <_dtoa_r+0x68e>
 8008b0e:	4621      	mov	r1, r4
 8008b10:	2205      	movs	r2, #5
 8008b12:	4658      	mov	r0, fp
 8008b14:	f000 f9e4 	bl	8008ee0 <__multadd>
 8008b18:	4601      	mov	r1, r0
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4648      	mov	r0, r9
 8008b1e:	f000 fbf7 	bl	8009310 <__mcmp>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	f77f aeb3 	ble.w	800888e <_dtoa_r+0x68e>
 8008b28:	4656      	mov	r6, sl
 8008b2a:	2331      	movs	r3, #49	@ 0x31
 8008b2c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b30:	9b04      	ldr	r3, [sp, #16]
 8008b32:	3301      	adds	r3, #1
 8008b34:	9304      	str	r3, [sp, #16]
 8008b36:	e6ae      	b.n	8008896 <_dtoa_r+0x696>
 8008b38:	9c07      	ldr	r4, [sp, #28]
 8008b3a:	9704      	str	r7, [sp, #16]
 8008b3c:	4625      	mov	r5, r4
 8008b3e:	e7f3      	b.n	8008b28 <_dtoa_r+0x928>
 8008b40:	9b07      	ldr	r3, [sp, #28]
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 8104 	beq.w	8008d54 <_dtoa_r+0xb54>
 8008b4c:	2e00      	cmp	r6, #0
 8008b4e:	dd05      	ble.n	8008b5c <_dtoa_r+0x95c>
 8008b50:	4629      	mov	r1, r5
 8008b52:	4632      	mov	r2, r6
 8008b54:	4658      	mov	r0, fp
 8008b56:	f000 fb6f 	bl	8009238 <__lshift>
 8008b5a:	4605      	mov	r5, r0
 8008b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d05a      	beq.n	8008c18 <_dtoa_r+0xa18>
 8008b62:	6869      	ldr	r1, [r5, #4]
 8008b64:	4658      	mov	r0, fp
 8008b66:	f000 f959 	bl	8008e1c <_Balloc>
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	b928      	cbnz	r0, 8008b7a <_dtoa_r+0x97a>
 8008b6e:	4b84      	ldr	r3, [pc, #528]	@ (8008d80 <_dtoa_r+0xb80>)
 8008b70:	4602      	mov	r2, r0
 8008b72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b76:	f7ff bb5a 	b.w	800822e <_dtoa_r+0x2e>
 8008b7a:	692a      	ldr	r2, [r5, #16]
 8008b7c:	3202      	adds	r2, #2
 8008b7e:	0092      	lsls	r2, r2, #2
 8008b80:	f105 010c 	add.w	r1, r5, #12
 8008b84:	300c      	adds	r0, #12
 8008b86:	f7ff faa2 	bl	80080ce <memcpy>
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4658      	mov	r0, fp
 8008b90:	f000 fb52 	bl	8009238 <__lshift>
 8008b94:	f10a 0301 	add.w	r3, sl, #1
 8008b98:	9307      	str	r3, [sp, #28]
 8008b9a:	9b00      	ldr	r3, [sp, #0]
 8008b9c:	4453      	add	r3, sl
 8008b9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ba0:	9b02      	ldr	r3, [sp, #8]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	462f      	mov	r7, r5
 8008ba8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008baa:	4605      	mov	r5, r0
 8008bac:	9b07      	ldr	r3, [sp, #28]
 8008bae:	4621      	mov	r1, r4
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	4648      	mov	r0, r9
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	f7ff fa98 	bl	80080ea <quorem>
 8008bba:	4639      	mov	r1, r7
 8008bbc:	9002      	str	r0, [sp, #8]
 8008bbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008bc2:	4648      	mov	r0, r9
 8008bc4:	f000 fba4 	bl	8009310 <__mcmp>
 8008bc8:	462a      	mov	r2, r5
 8008bca:	9008      	str	r0, [sp, #32]
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4658      	mov	r0, fp
 8008bd0:	f000 fbba 	bl	8009348 <__mdiff>
 8008bd4:	68c2      	ldr	r2, [r0, #12]
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	bb02      	cbnz	r2, 8008c1c <_dtoa_r+0xa1c>
 8008bda:	4601      	mov	r1, r0
 8008bdc:	4648      	mov	r0, r9
 8008bde:	f000 fb97 	bl	8009310 <__mcmp>
 8008be2:	4602      	mov	r2, r0
 8008be4:	4631      	mov	r1, r6
 8008be6:	4658      	mov	r0, fp
 8008be8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bea:	f000 f957 	bl	8008e9c <_Bfree>
 8008bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bf2:	9e07      	ldr	r6, [sp, #28]
 8008bf4:	ea43 0102 	orr.w	r1, r3, r2
 8008bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bfa:	4319      	orrs	r1, r3
 8008bfc:	d110      	bne.n	8008c20 <_dtoa_r+0xa20>
 8008bfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c02:	d029      	beq.n	8008c58 <_dtoa_r+0xa58>
 8008c04:	9b08      	ldr	r3, [sp, #32]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	dd02      	ble.n	8008c10 <_dtoa_r+0xa10>
 8008c0a:	9b02      	ldr	r3, [sp, #8]
 8008c0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c10:	9b00      	ldr	r3, [sp, #0]
 8008c12:	f883 8000 	strb.w	r8, [r3]
 8008c16:	e63f      	b.n	8008898 <_dtoa_r+0x698>
 8008c18:	4628      	mov	r0, r5
 8008c1a:	e7bb      	b.n	8008b94 <_dtoa_r+0x994>
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	e7e1      	b.n	8008be4 <_dtoa_r+0x9e4>
 8008c20:	9b08      	ldr	r3, [sp, #32]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	db04      	blt.n	8008c30 <_dtoa_r+0xa30>
 8008c26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c2c:	430b      	orrs	r3, r1
 8008c2e:	d120      	bne.n	8008c72 <_dtoa_r+0xa72>
 8008c30:	2a00      	cmp	r2, #0
 8008c32:	dded      	ble.n	8008c10 <_dtoa_r+0xa10>
 8008c34:	4649      	mov	r1, r9
 8008c36:	2201      	movs	r2, #1
 8008c38:	4658      	mov	r0, fp
 8008c3a:	f000 fafd 	bl	8009238 <__lshift>
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4681      	mov	r9, r0
 8008c42:	f000 fb65 	bl	8009310 <__mcmp>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	dc03      	bgt.n	8008c52 <_dtoa_r+0xa52>
 8008c4a:	d1e1      	bne.n	8008c10 <_dtoa_r+0xa10>
 8008c4c:	f018 0f01 	tst.w	r8, #1
 8008c50:	d0de      	beq.n	8008c10 <_dtoa_r+0xa10>
 8008c52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c56:	d1d8      	bne.n	8008c0a <_dtoa_r+0xa0a>
 8008c58:	9a00      	ldr	r2, [sp, #0]
 8008c5a:	2339      	movs	r3, #57	@ 0x39
 8008c5c:	7013      	strb	r3, [r2, #0]
 8008c5e:	4633      	mov	r3, r6
 8008c60:	461e      	mov	r6, r3
 8008c62:	3b01      	subs	r3, #1
 8008c64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c68:	2a39      	cmp	r2, #57	@ 0x39
 8008c6a:	d052      	beq.n	8008d12 <_dtoa_r+0xb12>
 8008c6c:	3201      	adds	r2, #1
 8008c6e:	701a      	strb	r2, [r3, #0]
 8008c70:	e612      	b.n	8008898 <_dtoa_r+0x698>
 8008c72:	2a00      	cmp	r2, #0
 8008c74:	dd07      	ble.n	8008c86 <_dtoa_r+0xa86>
 8008c76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c7a:	d0ed      	beq.n	8008c58 <_dtoa_r+0xa58>
 8008c7c:	9a00      	ldr	r2, [sp, #0]
 8008c7e:	f108 0301 	add.w	r3, r8, #1
 8008c82:	7013      	strb	r3, [r2, #0]
 8008c84:	e608      	b.n	8008898 <_dtoa_r+0x698>
 8008c86:	9b07      	ldr	r3, [sp, #28]
 8008c88:	9a07      	ldr	r2, [sp, #28]
 8008c8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d028      	beq.n	8008ce6 <_dtoa_r+0xae6>
 8008c94:	4649      	mov	r1, r9
 8008c96:	2300      	movs	r3, #0
 8008c98:	220a      	movs	r2, #10
 8008c9a:	4658      	mov	r0, fp
 8008c9c:	f000 f920 	bl	8008ee0 <__multadd>
 8008ca0:	42af      	cmp	r7, r5
 8008ca2:	4681      	mov	r9, r0
 8008ca4:	f04f 0300 	mov.w	r3, #0
 8008ca8:	f04f 020a 	mov.w	r2, #10
 8008cac:	4639      	mov	r1, r7
 8008cae:	4658      	mov	r0, fp
 8008cb0:	d107      	bne.n	8008cc2 <_dtoa_r+0xac2>
 8008cb2:	f000 f915 	bl	8008ee0 <__multadd>
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	4605      	mov	r5, r0
 8008cba:	9b07      	ldr	r3, [sp, #28]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	9307      	str	r3, [sp, #28]
 8008cc0:	e774      	b.n	8008bac <_dtoa_r+0x9ac>
 8008cc2:	f000 f90d 	bl	8008ee0 <__multadd>
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	4607      	mov	r7, r0
 8008cca:	2300      	movs	r3, #0
 8008ccc:	220a      	movs	r2, #10
 8008cce:	4658      	mov	r0, fp
 8008cd0:	f000 f906 	bl	8008ee0 <__multadd>
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	e7f0      	b.n	8008cba <_dtoa_r+0xaba>
 8008cd8:	9b00      	ldr	r3, [sp, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bfcc      	ite	gt
 8008cde:	461e      	movgt	r6, r3
 8008ce0:	2601      	movle	r6, #1
 8008ce2:	4456      	add	r6, sl
 8008ce4:	2700      	movs	r7, #0
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	2201      	movs	r2, #1
 8008cea:	4658      	mov	r0, fp
 8008cec:	f000 faa4 	bl	8009238 <__lshift>
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	4681      	mov	r9, r0
 8008cf4:	f000 fb0c 	bl	8009310 <__mcmp>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	dcb0      	bgt.n	8008c5e <_dtoa_r+0xa5e>
 8008cfc:	d102      	bne.n	8008d04 <_dtoa_r+0xb04>
 8008cfe:	f018 0f01 	tst.w	r8, #1
 8008d02:	d1ac      	bne.n	8008c5e <_dtoa_r+0xa5e>
 8008d04:	4633      	mov	r3, r6
 8008d06:	461e      	mov	r6, r3
 8008d08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d0c:	2a30      	cmp	r2, #48	@ 0x30
 8008d0e:	d0fa      	beq.n	8008d06 <_dtoa_r+0xb06>
 8008d10:	e5c2      	b.n	8008898 <_dtoa_r+0x698>
 8008d12:	459a      	cmp	sl, r3
 8008d14:	d1a4      	bne.n	8008c60 <_dtoa_r+0xa60>
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	2331      	movs	r3, #49	@ 0x31
 8008d1e:	f88a 3000 	strb.w	r3, [sl]
 8008d22:	e5b9      	b.n	8008898 <_dtoa_r+0x698>
 8008d24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008d84 <_dtoa_r+0xb84>
 8008d2a:	b11b      	cbz	r3, 8008d34 <_dtoa_r+0xb34>
 8008d2c:	f10a 0308 	add.w	r3, sl, #8
 8008d30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	4650      	mov	r0, sl
 8008d36:	b019      	add	sp, #100	@ 0x64
 8008d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	f77f ae37 	ble.w	80089b2 <_dtoa_r+0x7b2>
 8008d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d48:	2001      	movs	r0, #1
 8008d4a:	e655      	b.n	80089f8 <_dtoa_r+0x7f8>
 8008d4c:	9b00      	ldr	r3, [sp, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f77f aed6 	ble.w	8008b00 <_dtoa_r+0x900>
 8008d54:	4656      	mov	r6, sl
 8008d56:	4621      	mov	r1, r4
 8008d58:	4648      	mov	r0, r9
 8008d5a:	f7ff f9c6 	bl	80080ea <quorem>
 8008d5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d62:	f806 8b01 	strb.w	r8, [r6], #1
 8008d66:	9b00      	ldr	r3, [sp, #0]
 8008d68:	eba6 020a 	sub.w	r2, r6, sl
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	ddb3      	ble.n	8008cd8 <_dtoa_r+0xad8>
 8008d70:	4649      	mov	r1, r9
 8008d72:	2300      	movs	r3, #0
 8008d74:	220a      	movs	r2, #10
 8008d76:	4658      	mov	r0, fp
 8008d78:	f000 f8b2 	bl	8008ee0 <__multadd>
 8008d7c:	4681      	mov	r9, r0
 8008d7e:	e7ea      	b.n	8008d56 <_dtoa_r+0xb56>
 8008d80:	0800a1a8 	.word	0x0800a1a8
 8008d84:	0800a12c 	.word	0x0800a12c

08008d88 <_free_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	d041      	beq.n	8008e14 <_free_r+0x8c>
 8008d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d94:	1f0c      	subs	r4, r1, #4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bfb8      	it	lt
 8008d9a:	18e4      	addlt	r4, r4, r3
 8008d9c:	f7fe fb9e 	bl	80074dc <__malloc_lock>
 8008da0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e18 <_free_r+0x90>)
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	b933      	cbnz	r3, 8008db4 <_free_r+0x2c>
 8008da6:	6063      	str	r3, [r4, #4]
 8008da8:	6014      	str	r4, [r2, #0]
 8008daa:	4628      	mov	r0, r5
 8008dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008db0:	f7fe bb9a 	b.w	80074e8 <__malloc_unlock>
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	d908      	bls.n	8008dca <_free_r+0x42>
 8008db8:	6820      	ldr	r0, [r4, #0]
 8008dba:	1821      	adds	r1, r4, r0
 8008dbc:	428b      	cmp	r3, r1
 8008dbe:	bf01      	itttt	eq
 8008dc0:	6819      	ldreq	r1, [r3, #0]
 8008dc2:	685b      	ldreq	r3, [r3, #4]
 8008dc4:	1809      	addeq	r1, r1, r0
 8008dc6:	6021      	streq	r1, [r4, #0]
 8008dc8:	e7ed      	b.n	8008da6 <_free_r+0x1e>
 8008dca:	461a      	mov	r2, r3
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	b10b      	cbz	r3, 8008dd4 <_free_r+0x4c>
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	d9fa      	bls.n	8008dca <_free_r+0x42>
 8008dd4:	6811      	ldr	r1, [r2, #0]
 8008dd6:	1850      	adds	r0, r2, r1
 8008dd8:	42a0      	cmp	r0, r4
 8008dda:	d10b      	bne.n	8008df4 <_free_r+0x6c>
 8008ddc:	6820      	ldr	r0, [r4, #0]
 8008dde:	4401      	add	r1, r0
 8008de0:	1850      	adds	r0, r2, r1
 8008de2:	4283      	cmp	r3, r0
 8008de4:	6011      	str	r1, [r2, #0]
 8008de6:	d1e0      	bne.n	8008daa <_free_r+0x22>
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	6053      	str	r3, [r2, #4]
 8008dee:	4408      	add	r0, r1
 8008df0:	6010      	str	r0, [r2, #0]
 8008df2:	e7da      	b.n	8008daa <_free_r+0x22>
 8008df4:	d902      	bls.n	8008dfc <_free_r+0x74>
 8008df6:	230c      	movs	r3, #12
 8008df8:	602b      	str	r3, [r5, #0]
 8008dfa:	e7d6      	b.n	8008daa <_free_r+0x22>
 8008dfc:	6820      	ldr	r0, [r4, #0]
 8008dfe:	1821      	adds	r1, r4, r0
 8008e00:	428b      	cmp	r3, r1
 8008e02:	bf04      	itt	eq
 8008e04:	6819      	ldreq	r1, [r3, #0]
 8008e06:	685b      	ldreq	r3, [r3, #4]
 8008e08:	6063      	str	r3, [r4, #4]
 8008e0a:	bf04      	itt	eq
 8008e0c:	1809      	addeq	r1, r1, r0
 8008e0e:	6021      	streq	r1, [r4, #0]
 8008e10:	6054      	str	r4, [r2, #4]
 8008e12:	e7ca      	b.n	8008daa <_free_r+0x22>
 8008e14:	bd38      	pop	{r3, r4, r5, pc}
 8008e16:	bf00      	nop
 8008e18:	20000654 	.word	0x20000654

08008e1c <_Balloc>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	69c6      	ldr	r6, [r0, #28]
 8008e20:	4604      	mov	r4, r0
 8008e22:	460d      	mov	r5, r1
 8008e24:	b976      	cbnz	r6, 8008e44 <_Balloc+0x28>
 8008e26:	2010      	movs	r0, #16
 8008e28:	f7fe faa6 	bl	8007378 <malloc>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	61e0      	str	r0, [r4, #28]
 8008e30:	b920      	cbnz	r0, 8008e3c <_Balloc+0x20>
 8008e32:	4b18      	ldr	r3, [pc, #96]	@ (8008e94 <_Balloc+0x78>)
 8008e34:	4818      	ldr	r0, [pc, #96]	@ (8008e98 <_Balloc+0x7c>)
 8008e36:	216b      	movs	r1, #107	@ 0x6b
 8008e38:	f000 fc1e 	bl	8009678 <__assert_func>
 8008e3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e40:	6006      	str	r6, [r0, #0]
 8008e42:	60c6      	str	r6, [r0, #12]
 8008e44:	69e6      	ldr	r6, [r4, #28]
 8008e46:	68f3      	ldr	r3, [r6, #12]
 8008e48:	b183      	cbz	r3, 8008e6c <_Balloc+0x50>
 8008e4a:	69e3      	ldr	r3, [r4, #28]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e52:	b9b8      	cbnz	r0, 8008e84 <_Balloc+0x68>
 8008e54:	2101      	movs	r1, #1
 8008e56:	fa01 f605 	lsl.w	r6, r1, r5
 8008e5a:	1d72      	adds	r2, r6, #5
 8008e5c:	0092      	lsls	r2, r2, #2
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f000 fc28 	bl	80096b4 <_calloc_r>
 8008e64:	b160      	cbz	r0, 8008e80 <_Balloc+0x64>
 8008e66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e6a:	e00e      	b.n	8008e8a <_Balloc+0x6e>
 8008e6c:	2221      	movs	r2, #33	@ 0x21
 8008e6e:	2104      	movs	r1, #4
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 fc1f 	bl	80096b4 <_calloc_r>
 8008e76:	69e3      	ldr	r3, [r4, #28]
 8008e78:	60f0      	str	r0, [r6, #12]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e4      	bne.n	8008e4a <_Balloc+0x2e>
 8008e80:	2000      	movs	r0, #0
 8008e82:	bd70      	pop	{r4, r5, r6, pc}
 8008e84:	6802      	ldr	r2, [r0, #0]
 8008e86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e90:	e7f7      	b.n	8008e82 <_Balloc+0x66>
 8008e92:	bf00      	nop
 8008e94:	0800a139 	.word	0x0800a139
 8008e98:	0800a1b9 	.word	0x0800a1b9

08008e9c <_Bfree>:
 8008e9c:	b570      	push	{r4, r5, r6, lr}
 8008e9e:	69c6      	ldr	r6, [r0, #28]
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	b976      	cbnz	r6, 8008ec4 <_Bfree+0x28>
 8008ea6:	2010      	movs	r0, #16
 8008ea8:	f7fe fa66 	bl	8007378 <malloc>
 8008eac:	4602      	mov	r2, r0
 8008eae:	61e8      	str	r0, [r5, #28]
 8008eb0:	b920      	cbnz	r0, 8008ebc <_Bfree+0x20>
 8008eb2:	4b09      	ldr	r3, [pc, #36]	@ (8008ed8 <_Bfree+0x3c>)
 8008eb4:	4809      	ldr	r0, [pc, #36]	@ (8008edc <_Bfree+0x40>)
 8008eb6:	218f      	movs	r1, #143	@ 0x8f
 8008eb8:	f000 fbde 	bl	8009678 <__assert_func>
 8008ebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ec0:	6006      	str	r6, [r0, #0]
 8008ec2:	60c6      	str	r6, [r0, #12]
 8008ec4:	b13c      	cbz	r4, 8008ed6 <_Bfree+0x3a>
 8008ec6:	69eb      	ldr	r3, [r5, #28]
 8008ec8:	6862      	ldr	r2, [r4, #4]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ed0:	6021      	str	r1, [r4, #0]
 8008ed2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	0800a139 	.word	0x0800a139
 8008edc:	0800a1b9 	.word	0x0800a1b9

08008ee0 <__multadd>:
 8008ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee4:	690d      	ldr	r5, [r1, #16]
 8008ee6:	4607      	mov	r7, r0
 8008ee8:	460c      	mov	r4, r1
 8008eea:	461e      	mov	r6, r3
 8008eec:	f101 0c14 	add.w	ip, r1, #20
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	f8dc 3000 	ldr.w	r3, [ip]
 8008ef6:	b299      	uxth	r1, r3
 8008ef8:	fb02 6101 	mla	r1, r2, r1, r6
 8008efc:	0c1e      	lsrs	r6, r3, #16
 8008efe:	0c0b      	lsrs	r3, r1, #16
 8008f00:	fb02 3306 	mla	r3, r2, r6, r3
 8008f04:	b289      	uxth	r1, r1
 8008f06:	3001      	adds	r0, #1
 8008f08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f0c:	4285      	cmp	r5, r0
 8008f0e:	f84c 1b04 	str.w	r1, [ip], #4
 8008f12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f16:	dcec      	bgt.n	8008ef2 <__multadd+0x12>
 8008f18:	b30e      	cbz	r6, 8008f5e <__multadd+0x7e>
 8008f1a:	68a3      	ldr	r3, [r4, #8]
 8008f1c:	42ab      	cmp	r3, r5
 8008f1e:	dc19      	bgt.n	8008f54 <__multadd+0x74>
 8008f20:	6861      	ldr	r1, [r4, #4]
 8008f22:	4638      	mov	r0, r7
 8008f24:	3101      	adds	r1, #1
 8008f26:	f7ff ff79 	bl	8008e1c <_Balloc>
 8008f2a:	4680      	mov	r8, r0
 8008f2c:	b928      	cbnz	r0, 8008f3a <__multadd+0x5a>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	4b0c      	ldr	r3, [pc, #48]	@ (8008f64 <__multadd+0x84>)
 8008f32:	480d      	ldr	r0, [pc, #52]	@ (8008f68 <__multadd+0x88>)
 8008f34:	21ba      	movs	r1, #186	@ 0xba
 8008f36:	f000 fb9f 	bl	8009678 <__assert_func>
 8008f3a:	6922      	ldr	r2, [r4, #16]
 8008f3c:	3202      	adds	r2, #2
 8008f3e:	f104 010c 	add.w	r1, r4, #12
 8008f42:	0092      	lsls	r2, r2, #2
 8008f44:	300c      	adds	r0, #12
 8008f46:	f7ff f8c2 	bl	80080ce <memcpy>
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f7ff ffa5 	bl	8008e9c <_Bfree>
 8008f52:	4644      	mov	r4, r8
 8008f54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f58:	3501      	adds	r5, #1
 8008f5a:	615e      	str	r6, [r3, #20]
 8008f5c:	6125      	str	r5, [r4, #16]
 8008f5e:	4620      	mov	r0, r4
 8008f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f64:	0800a1a8 	.word	0x0800a1a8
 8008f68:	0800a1b9 	.word	0x0800a1b9

08008f6c <__hi0bits>:
 8008f6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f70:	4603      	mov	r3, r0
 8008f72:	bf36      	itet	cc
 8008f74:	0403      	lslcc	r3, r0, #16
 8008f76:	2000      	movcs	r0, #0
 8008f78:	2010      	movcc	r0, #16
 8008f7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f7e:	bf3c      	itt	cc
 8008f80:	021b      	lslcc	r3, r3, #8
 8008f82:	3008      	addcc	r0, #8
 8008f84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f88:	bf3c      	itt	cc
 8008f8a:	011b      	lslcc	r3, r3, #4
 8008f8c:	3004      	addcc	r0, #4
 8008f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f92:	bf3c      	itt	cc
 8008f94:	009b      	lslcc	r3, r3, #2
 8008f96:	3002      	addcc	r0, #2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	db05      	blt.n	8008fa8 <__hi0bits+0x3c>
 8008f9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008fa0:	f100 0001 	add.w	r0, r0, #1
 8008fa4:	bf08      	it	eq
 8008fa6:	2020      	moveq	r0, #32
 8008fa8:	4770      	bx	lr

08008faa <__lo0bits>:
 8008faa:	6803      	ldr	r3, [r0, #0]
 8008fac:	4602      	mov	r2, r0
 8008fae:	f013 0007 	ands.w	r0, r3, #7
 8008fb2:	d00b      	beq.n	8008fcc <__lo0bits+0x22>
 8008fb4:	07d9      	lsls	r1, r3, #31
 8008fb6:	d421      	bmi.n	8008ffc <__lo0bits+0x52>
 8008fb8:	0798      	lsls	r0, r3, #30
 8008fba:	bf49      	itett	mi
 8008fbc:	085b      	lsrmi	r3, r3, #1
 8008fbe:	089b      	lsrpl	r3, r3, #2
 8008fc0:	2001      	movmi	r0, #1
 8008fc2:	6013      	strmi	r3, [r2, #0]
 8008fc4:	bf5c      	itt	pl
 8008fc6:	6013      	strpl	r3, [r2, #0]
 8008fc8:	2002      	movpl	r0, #2
 8008fca:	4770      	bx	lr
 8008fcc:	b299      	uxth	r1, r3
 8008fce:	b909      	cbnz	r1, 8008fd4 <__lo0bits+0x2a>
 8008fd0:	0c1b      	lsrs	r3, r3, #16
 8008fd2:	2010      	movs	r0, #16
 8008fd4:	b2d9      	uxtb	r1, r3
 8008fd6:	b909      	cbnz	r1, 8008fdc <__lo0bits+0x32>
 8008fd8:	3008      	adds	r0, #8
 8008fda:	0a1b      	lsrs	r3, r3, #8
 8008fdc:	0719      	lsls	r1, r3, #28
 8008fde:	bf04      	itt	eq
 8008fe0:	091b      	lsreq	r3, r3, #4
 8008fe2:	3004      	addeq	r0, #4
 8008fe4:	0799      	lsls	r1, r3, #30
 8008fe6:	bf04      	itt	eq
 8008fe8:	089b      	lsreq	r3, r3, #2
 8008fea:	3002      	addeq	r0, #2
 8008fec:	07d9      	lsls	r1, r3, #31
 8008fee:	d403      	bmi.n	8008ff8 <__lo0bits+0x4e>
 8008ff0:	085b      	lsrs	r3, r3, #1
 8008ff2:	f100 0001 	add.w	r0, r0, #1
 8008ff6:	d003      	beq.n	8009000 <__lo0bits+0x56>
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	4770      	bx	lr
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	4770      	bx	lr
 8009000:	2020      	movs	r0, #32
 8009002:	4770      	bx	lr

08009004 <__i2b>:
 8009004:	b510      	push	{r4, lr}
 8009006:	460c      	mov	r4, r1
 8009008:	2101      	movs	r1, #1
 800900a:	f7ff ff07 	bl	8008e1c <_Balloc>
 800900e:	4602      	mov	r2, r0
 8009010:	b928      	cbnz	r0, 800901e <__i2b+0x1a>
 8009012:	4b05      	ldr	r3, [pc, #20]	@ (8009028 <__i2b+0x24>)
 8009014:	4805      	ldr	r0, [pc, #20]	@ (800902c <__i2b+0x28>)
 8009016:	f240 1145 	movw	r1, #325	@ 0x145
 800901a:	f000 fb2d 	bl	8009678 <__assert_func>
 800901e:	2301      	movs	r3, #1
 8009020:	6144      	str	r4, [r0, #20]
 8009022:	6103      	str	r3, [r0, #16]
 8009024:	bd10      	pop	{r4, pc}
 8009026:	bf00      	nop
 8009028:	0800a1a8 	.word	0x0800a1a8
 800902c:	0800a1b9 	.word	0x0800a1b9

08009030 <__multiply>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	4614      	mov	r4, r2
 8009036:	690a      	ldr	r2, [r1, #16]
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	429a      	cmp	r2, r3
 800903c:	bfa8      	it	ge
 800903e:	4623      	movge	r3, r4
 8009040:	460f      	mov	r7, r1
 8009042:	bfa4      	itt	ge
 8009044:	460c      	movge	r4, r1
 8009046:	461f      	movge	r7, r3
 8009048:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800904c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009050:	68a3      	ldr	r3, [r4, #8]
 8009052:	6861      	ldr	r1, [r4, #4]
 8009054:	eb0a 0609 	add.w	r6, sl, r9
 8009058:	42b3      	cmp	r3, r6
 800905a:	b085      	sub	sp, #20
 800905c:	bfb8      	it	lt
 800905e:	3101      	addlt	r1, #1
 8009060:	f7ff fedc 	bl	8008e1c <_Balloc>
 8009064:	b930      	cbnz	r0, 8009074 <__multiply+0x44>
 8009066:	4602      	mov	r2, r0
 8009068:	4b44      	ldr	r3, [pc, #272]	@ (800917c <__multiply+0x14c>)
 800906a:	4845      	ldr	r0, [pc, #276]	@ (8009180 <__multiply+0x150>)
 800906c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009070:	f000 fb02 	bl	8009678 <__assert_func>
 8009074:	f100 0514 	add.w	r5, r0, #20
 8009078:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800907c:	462b      	mov	r3, r5
 800907e:	2200      	movs	r2, #0
 8009080:	4543      	cmp	r3, r8
 8009082:	d321      	bcc.n	80090c8 <__multiply+0x98>
 8009084:	f107 0114 	add.w	r1, r7, #20
 8009088:	f104 0214 	add.w	r2, r4, #20
 800908c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009090:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009094:	9302      	str	r3, [sp, #8]
 8009096:	1b13      	subs	r3, r2, r4
 8009098:	3b15      	subs	r3, #21
 800909a:	f023 0303 	bic.w	r3, r3, #3
 800909e:	3304      	adds	r3, #4
 80090a0:	f104 0715 	add.w	r7, r4, #21
 80090a4:	42ba      	cmp	r2, r7
 80090a6:	bf38      	it	cc
 80090a8:	2304      	movcc	r3, #4
 80090aa:	9301      	str	r3, [sp, #4]
 80090ac:	9b02      	ldr	r3, [sp, #8]
 80090ae:	9103      	str	r1, [sp, #12]
 80090b0:	428b      	cmp	r3, r1
 80090b2:	d80c      	bhi.n	80090ce <__multiply+0x9e>
 80090b4:	2e00      	cmp	r6, #0
 80090b6:	dd03      	ble.n	80090c0 <__multiply+0x90>
 80090b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d05b      	beq.n	8009178 <__multiply+0x148>
 80090c0:	6106      	str	r6, [r0, #16]
 80090c2:	b005      	add	sp, #20
 80090c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c8:	f843 2b04 	str.w	r2, [r3], #4
 80090cc:	e7d8      	b.n	8009080 <__multiply+0x50>
 80090ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80090d2:	f1ba 0f00 	cmp.w	sl, #0
 80090d6:	d024      	beq.n	8009122 <__multiply+0xf2>
 80090d8:	f104 0e14 	add.w	lr, r4, #20
 80090dc:	46a9      	mov	r9, r5
 80090de:	f04f 0c00 	mov.w	ip, #0
 80090e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090e6:	f8d9 3000 	ldr.w	r3, [r9]
 80090ea:	fa1f fb87 	uxth.w	fp, r7
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80090f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80090f8:	f8d9 7000 	ldr.w	r7, [r9]
 80090fc:	4463      	add	r3, ip
 80090fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009102:	fb0a c70b 	mla	r7, sl, fp, ip
 8009106:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800910a:	b29b      	uxth	r3, r3
 800910c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009110:	4572      	cmp	r2, lr
 8009112:	f849 3b04 	str.w	r3, [r9], #4
 8009116:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800911a:	d8e2      	bhi.n	80090e2 <__multiply+0xb2>
 800911c:	9b01      	ldr	r3, [sp, #4]
 800911e:	f845 c003 	str.w	ip, [r5, r3]
 8009122:	9b03      	ldr	r3, [sp, #12]
 8009124:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009128:	3104      	adds	r1, #4
 800912a:	f1b9 0f00 	cmp.w	r9, #0
 800912e:	d021      	beq.n	8009174 <__multiply+0x144>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	f104 0c14 	add.w	ip, r4, #20
 8009136:	46ae      	mov	lr, r5
 8009138:	f04f 0a00 	mov.w	sl, #0
 800913c:	f8bc b000 	ldrh.w	fp, [ip]
 8009140:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009144:	fb09 770b 	mla	r7, r9, fp, r7
 8009148:	4457      	add	r7, sl
 800914a:	b29b      	uxth	r3, r3
 800914c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009150:	f84e 3b04 	str.w	r3, [lr], #4
 8009154:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009158:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800915c:	f8be 3000 	ldrh.w	r3, [lr]
 8009160:	fb09 330a 	mla	r3, r9, sl, r3
 8009164:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009168:	4562      	cmp	r2, ip
 800916a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800916e:	d8e5      	bhi.n	800913c <__multiply+0x10c>
 8009170:	9f01      	ldr	r7, [sp, #4]
 8009172:	51eb      	str	r3, [r5, r7]
 8009174:	3504      	adds	r5, #4
 8009176:	e799      	b.n	80090ac <__multiply+0x7c>
 8009178:	3e01      	subs	r6, #1
 800917a:	e79b      	b.n	80090b4 <__multiply+0x84>
 800917c:	0800a1a8 	.word	0x0800a1a8
 8009180:	0800a1b9 	.word	0x0800a1b9

08009184 <__pow5mult>:
 8009184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009188:	4615      	mov	r5, r2
 800918a:	f012 0203 	ands.w	r2, r2, #3
 800918e:	4607      	mov	r7, r0
 8009190:	460e      	mov	r6, r1
 8009192:	d007      	beq.n	80091a4 <__pow5mult+0x20>
 8009194:	4c25      	ldr	r4, [pc, #148]	@ (800922c <__pow5mult+0xa8>)
 8009196:	3a01      	subs	r2, #1
 8009198:	2300      	movs	r3, #0
 800919a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800919e:	f7ff fe9f 	bl	8008ee0 <__multadd>
 80091a2:	4606      	mov	r6, r0
 80091a4:	10ad      	asrs	r5, r5, #2
 80091a6:	d03d      	beq.n	8009224 <__pow5mult+0xa0>
 80091a8:	69fc      	ldr	r4, [r7, #28]
 80091aa:	b97c      	cbnz	r4, 80091cc <__pow5mult+0x48>
 80091ac:	2010      	movs	r0, #16
 80091ae:	f7fe f8e3 	bl	8007378 <malloc>
 80091b2:	4602      	mov	r2, r0
 80091b4:	61f8      	str	r0, [r7, #28]
 80091b6:	b928      	cbnz	r0, 80091c4 <__pow5mult+0x40>
 80091b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009230 <__pow5mult+0xac>)
 80091ba:	481e      	ldr	r0, [pc, #120]	@ (8009234 <__pow5mult+0xb0>)
 80091bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80091c0:	f000 fa5a 	bl	8009678 <__assert_func>
 80091c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091c8:	6004      	str	r4, [r0, #0]
 80091ca:	60c4      	str	r4, [r0, #12]
 80091cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80091d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091d4:	b94c      	cbnz	r4, 80091ea <__pow5mult+0x66>
 80091d6:	f240 2171 	movw	r1, #625	@ 0x271
 80091da:	4638      	mov	r0, r7
 80091dc:	f7ff ff12 	bl	8009004 <__i2b>
 80091e0:	2300      	movs	r3, #0
 80091e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80091e6:	4604      	mov	r4, r0
 80091e8:	6003      	str	r3, [r0, #0]
 80091ea:	f04f 0900 	mov.w	r9, #0
 80091ee:	07eb      	lsls	r3, r5, #31
 80091f0:	d50a      	bpl.n	8009208 <__pow5mult+0x84>
 80091f2:	4631      	mov	r1, r6
 80091f4:	4622      	mov	r2, r4
 80091f6:	4638      	mov	r0, r7
 80091f8:	f7ff ff1a 	bl	8009030 <__multiply>
 80091fc:	4631      	mov	r1, r6
 80091fe:	4680      	mov	r8, r0
 8009200:	4638      	mov	r0, r7
 8009202:	f7ff fe4b 	bl	8008e9c <_Bfree>
 8009206:	4646      	mov	r6, r8
 8009208:	106d      	asrs	r5, r5, #1
 800920a:	d00b      	beq.n	8009224 <__pow5mult+0xa0>
 800920c:	6820      	ldr	r0, [r4, #0]
 800920e:	b938      	cbnz	r0, 8009220 <__pow5mult+0x9c>
 8009210:	4622      	mov	r2, r4
 8009212:	4621      	mov	r1, r4
 8009214:	4638      	mov	r0, r7
 8009216:	f7ff ff0b 	bl	8009030 <__multiply>
 800921a:	6020      	str	r0, [r4, #0]
 800921c:	f8c0 9000 	str.w	r9, [r0]
 8009220:	4604      	mov	r4, r0
 8009222:	e7e4      	b.n	80091ee <__pow5mult+0x6a>
 8009224:	4630      	mov	r0, r6
 8009226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800922a:	bf00      	nop
 800922c:	0800a214 	.word	0x0800a214
 8009230:	0800a139 	.word	0x0800a139
 8009234:	0800a1b9 	.word	0x0800a1b9

08009238 <__lshift>:
 8009238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800923c:	460c      	mov	r4, r1
 800923e:	6849      	ldr	r1, [r1, #4]
 8009240:	6923      	ldr	r3, [r4, #16]
 8009242:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009246:	68a3      	ldr	r3, [r4, #8]
 8009248:	4607      	mov	r7, r0
 800924a:	4691      	mov	r9, r2
 800924c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009250:	f108 0601 	add.w	r6, r8, #1
 8009254:	42b3      	cmp	r3, r6
 8009256:	db0b      	blt.n	8009270 <__lshift+0x38>
 8009258:	4638      	mov	r0, r7
 800925a:	f7ff fddf 	bl	8008e1c <_Balloc>
 800925e:	4605      	mov	r5, r0
 8009260:	b948      	cbnz	r0, 8009276 <__lshift+0x3e>
 8009262:	4602      	mov	r2, r0
 8009264:	4b28      	ldr	r3, [pc, #160]	@ (8009308 <__lshift+0xd0>)
 8009266:	4829      	ldr	r0, [pc, #164]	@ (800930c <__lshift+0xd4>)
 8009268:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800926c:	f000 fa04 	bl	8009678 <__assert_func>
 8009270:	3101      	adds	r1, #1
 8009272:	005b      	lsls	r3, r3, #1
 8009274:	e7ee      	b.n	8009254 <__lshift+0x1c>
 8009276:	2300      	movs	r3, #0
 8009278:	f100 0114 	add.w	r1, r0, #20
 800927c:	f100 0210 	add.w	r2, r0, #16
 8009280:	4618      	mov	r0, r3
 8009282:	4553      	cmp	r3, sl
 8009284:	db33      	blt.n	80092ee <__lshift+0xb6>
 8009286:	6920      	ldr	r0, [r4, #16]
 8009288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800928c:	f104 0314 	add.w	r3, r4, #20
 8009290:	f019 091f 	ands.w	r9, r9, #31
 8009294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009298:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800929c:	d02b      	beq.n	80092f6 <__lshift+0xbe>
 800929e:	f1c9 0e20 	rsb	lr, r9, #32
 80092a2:	468a      	mov	sl, r1
 80092a4:	2200      	movs	r2, #0
 80092a6:	6818      	ldr	r0, [r3, #0]
 80092a8:	fa00 f009 	lsl.w	r0, r0, r9
 80092ac:	4310      	orrs	r0, r2
 80092ae:	f84a 0b04 	str.w	r0, [sl], #4
 80092b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092b6:	459c      	cmp	ip, r3
 80092b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80092bc:	d8f3      	bhi.n	80092a6 <__lshift+0x6e>
 80092be:	ebac 0304 	sub.w	r3, ip, r4
 80092c2:	3b15      	subs	r3, #21
 80092c4:	f023 0303 	bic.w	r3, r3, #3
 80092c8:	3304      	adds	r3, #4
 80092ca:	f104 0015 	add.w	r0, r4, #21
 80092ce:	4584      	cmp	ip, r0
 80092d0:	bf38      	it	cc
 80092d2:	2304      	movcc	r3, #4
 80092d4:	50ca      	str	r2, [r1, r3]
 80092d6:	b10a      	cbz	r2, 80092dc <__lshift+0xa4>
 80092d8:	f108 0602 	add.w	r6, r8, #2
 80092dc:	3e01      	subs	r6, #1
 80092de:	4638      	mov	r0, r7
 80092e0:	612e      	str	r6, [r5, #16]
 80092e2:	4621      	mov	r1, r4
 80092e4:	f7ff fdda 	bl	8008e9c <_Bfree>
 80092e8:	4628      	mov	r0, r5
 80092ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80092f2:	3301      	adds	r3, #1
 80092f4:	e7c5      	b.n	8009282 <__lshift+0x4a>
 80092f6:	3904      	subs	r1, #4
 80092f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80092fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009300:	459c      	cmp	ip, r3
 8009302:	d8f9      	bhi.n	80092f8 <__lshift+0xc0>
 8009304:	e7ea      	b.n	80092dc <__lshift+0xa4>
 8009306:	bf00      	nop
 8009308:	0800a1a8 	.word	0x0800a1a8
 800930c:	0800a1b9 	.word	0x0800a1b9

08009310 <__mcmp>:
 8009310:	690a      	ldr	r2, [r1, #16]
 8009312:	4603      	mov	r3, r0
 8009314:	6900      	ldr	r0, [r0, #16]
 8009316:	1a80      	subs	r0, r0, r2
 8009318:	b530      	push	{r4, r5, lr}
 800931a:	d10e      	bne.n	800933a <__mcmp+0x2a>
 800931c:	3314      	adds	r3, #20
 800931e:	3114      	adds	r1, #20
 8009320:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009324:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009328:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800932c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009330:	4295      	cmp	r5, r2
 8009332:	d003      	beq.n	800933c <__mcmp+0x2c>
 8009334:	d205      	bcs.n	8009342 <__mcmp+0x32>
 8009336:	f04f 30ff 	mov.w	r0, #4294967295
 800933a:	bd30      	pop	{r4, r5, pc}
 800933c:	42a3      	cmp	r3, r4
 800933e:	d3f3      	bcc.n	8009328 <__mcmp+0x18>
 8009340:	e7fb      	b.n	800933a <__mcmp+0x2a>
 8009342:	2001      	movs	r0, #1
 8009344:	e7f9      	b.n	800933a <__mcmp+0x2a>
	...

08009348 <__mdiff>:
 8009348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	4689      	mov	r9, r1
 800934e:	4606      	mov	r6, r0
 8009350:	4611      	mov	r1, r2
 8009352:	4648      	mov	r0, r9
 8009354:	4614      	mov	r4, r2
 8009356:	f7ff ffdb 	bl	8009310 <__mcmp>
 800935a:	1e05      	subs	r5, r0, #0
 800935c:	d112      	bne.n	8009384 <__mdiff+0x3c>
 800935e:	4629      	mov	r1, r5
 8009360:	4630      	mov	r0, r6
 8009362:	f7ff fd5b 	bl	8008e1c <_Balloc>
 8009366:	4602      	mov	r2, r0
 8009368:	b928      	cbnz	r0, 8009376 <__mdiff+0x2e>
 800936a:	4b3f      	ldr	r3, [pc, #252]	@ (8009468 <__mdiff+0x120>)
 800936c:	f240 2137 	movw	r1, #567	@ 0x237
 8009370:	483e      	ldr	r0, [pc, #248]	@ (800946c <__mdiff+0x124>)
 8009372:	f000 f981 	bl	8009678 <__assert_func>
 8009376:	2301      	movs	r3, #1
 8009378:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800937c:	4610      	mov	r0, r2
 800937e:	b003      	add	sp, #12
 8009380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009384:	bfbc      	itt	lt
 8009386:	464b      	movlt	r3, r9
 8009388:	46a1      	movlt	r9, r4
 800938a:	4630      	mov	r0, r6
 800938c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009390:	bfba      	itte	lt
 8009392:	461c      	movlt	r4, r3
 8009394:	2501      	movlt	r5, #1
 8009396:	2500      	movge	r5, #0
 8009398:	f7ff fd40 	bl	8008e1c <_Balloc>
 800939c:	4602      	mov	r2, r0
 800939e:	b918      	cbnz	r0, 80093a8 <__mdiff+0x60>
 80093a0:	4b31      	ldr	r3, [pc, #196]	@ (8009468 <__mdiff+0x120>)
 80093a2:	f240 2145 	movw	r1, #581	@ 0x245
 80093a6:	e7e3      	b.n	8009370 <__mdiff+0x28>
 80093a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80093ac:	6926      	ldr	r6, [r4, #16]
 80093ae:	60c5      	str	r5, [r0, #12]
 80093b0:	f109 0310 	add.w	r3, r9, #16
 80093b4:	f109 0514 	add.w	r5, r9, #20
 80093b8:	f104 0e14 	add.w	lr, r4, #20
 80093bc:	f100 0b14 	add.w	fp, r0, #20
 80093c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80093c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	46d9      	mov	r9, fp
 80093cc:	f04f 0c00 	mov.w	ip, #0
 80093d0:	9b01      	ldr	r3, [sp, #4]
 80093d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80093d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80093da:	9301      	str	r3, [sp, #4]
 80093dc:	fa1f f38a 	uxth.w	r3, sl
 80093e0:	4619      	mov	r1, r3
 80093e2:	b283      	uxth	r3, r0
 80093e4:	1acb      	subs	r3, r1, r3
 80093e6:	0c00      	lsrs	r0, r0, #16
 80093e8:	4463      	add	r3, ip
 80093ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80093ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80093f8:	4576      	cmp	r6, lr
 80093fa:	f849 3b04 	str.w	r3, [r9], #4
 80093fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009402:	d8e5      	bhi.n	80093d0 <__mdiff+0x88>
 8009404:	1b33      	subs	r3, r6, r4
 8009406:	3b15      	subs	r3, #21
 8009408:	f023 0303 	bic.w	r3, r3, #3
 800940c:	3415      	adds	r4, #21
 800940e:	3304      	adds	r3, #4
 8009410:	42a6      	cmp	r6, r4
 8009412:	bf38      	it	cc
 8009414:	2304      	movcc	r3, #4
 8009416:	441d      	add	r5, r3
 8009418:	445b      	add	r3, fp
 800941a:	461e      	mov	r6, r3
 800941c:	462c      	mov	r4, r5
 800941e:	4544      	cmp	r4, r8
 8009420:	d30e      	bcc.n	8009440 <__mdiff+0xf8>
 8009422:	f108 0103 	add.w	r1, r8, #3
 8009426:	1b49      	subs	r1, r1, r5
 8009428:	f021 0103 	bic.w	r1, r1, #3
 800942c:	3d03      	subs	r5, #3
 800942e:	45a8      	cmp	r8, r5
 8009430:	bf38      	it	cc
 8009432:	2100      	movcc	r1, #0
 8009434:	440b      	add	r3, r1
 8009436:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800943a:	b191      	cbz	r1, 8009462 <__mdiff+0x11a>
 800943c:	6117      	str	r7, [r2, #16]
 800943e:	e79d      	b.n	800937c <__mdiff+0x34>
 8009440:	f854 1b04 	ldr.w	r1, [r4], #4
 8009444:	46e6      	mov	lr, ip
 8009446:	0c08      	lsrs	r0, r1, #16
 8009448:	fa1c fc81 	uxtah	ip, ip, r1
 800944c:	4471      	add	r1, lr
 800944e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009452:	b289      	uxth	r1, r1
 8009454:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009458:	f846 1b04 	str.w	r1, [r6], #4
 800945c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009460:	e7dd      	b.n	800941e <__mdiff+0xd6>
 8009462:	3f01      	subs	r7, #1
 8009464:	e7e7      	b.n	8009436 <__mdiff+0xee>
 8009466:	bf00      	nop
 8009468:	0800a1a8 	.word	0x0800a1a8
 800946c:	0800a1b9 	.word	0x0800a1b9

08009470 <__d2b>:
 8009470:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009474:	460f      	mov	r7, r1
 8009476:	2101      	movs	r1, #1
 8009478:	ec59 8b10 	vmov	r8, r9, d0
 800947c:	4616      	mov	r6, r2
 800947e:	f7ff fccd 	bl	8008e1c <_Balloc>
 8009482:	4604      	mov	r4, r0
 8009484:	b930      	cbnz	r0, 8009494 <__d2b+0x24>
 8009486:	4602      	mov	r2, r0
 8009488:	4b23      	ldr	r3, [pc, #140]	@ (8009518 <__d2b+0xa8>)
 800948a:	4824      	ldr	r0, [pc, #144]	@ (800951c <__d2b+0xac>)
 800948c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009490:	f000 f8f2 	bl	8009678 <__assert_func>
 8009494:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009498:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800949c:	b10d      	cbz	r5, 80094a2 <__d2b+0x32>
 800949e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094a2:	9301      	str	r3, [sp, #4]
 80094a4:	f1b8 0300 	subs.w	r3, r8, #0
 80094a8:	d023      	beq.n	80094f2 <__d2b+0x82>
 80094aa:	4668      	mov	r0, sp
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	f7ff fd7c 	bl	8008faa <__lo0bits>
 80094b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80094b6:	b1d0      	cbz	r0, 80094ee <__d2b+0x7e>
 80094b8:	f1c0 0320 	rsb	r3, r0, #32
 80094bc:	fa02 f303 	lsl.w	r3, r2, r3
 80094c0:	430b      	orrs	r3, r1
 80094c2:	40c2      	lsrs	r2, r0
 80094c4:	6163      	str	r3, [r4, #20]
 80094c6:	9201      	str	r2, [sp, #4]
 80094c8:	9b01      	ldr	r3, [sp, #4]
 80094ca:	61a3      	str	r3, [r4, #24]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	bf0c      	ite	eq
 80094d0:	2201      	moveq	r2, #1
 80094d2:	2202      	movne	r2, #2
 80094d4:	6122      	str	r2, [r4, #16]
 80094d6:	b1a5      	cbz	r5, 8009502 <__d2b+0x92>
 80094d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80094dc:	4405      	add	r5, r0
 80094de:	603d      	str	r5, [r7, #0]
 80094e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80094e4:	6030      	str	r0, [r6, #0]
 80094e6:	4620      	mov	r0, r4
 80094e8:	b003      	add	sp, #12
 80094ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094ee:	6161      	str	r1, [r4, #20]
 80094f0:	e7ea      	b.n	80094c8 <__d2b+0x58>
 80094f2:	a801      	add	r0, sp, #4
 80094f4:	f7ff fd59 	bl	8008faa <__lo0bits>
 80094f8:	9b01      	ldr	r3, [sp, #4]
 80094fa:	6163      	str	r3, [r4, #20]
 80094fc:	3020      	adds	r0, #32
 80094fe:	2201      	movs	r2, #1
 8009500:	e7e8      	b.n	80094d4 <__d2b+0x64>
 8009502:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009506:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800950a:	6038      	str	r0, [r7, #0]
 800950c:	6918      	ldr	r0, [r3, #16]
 800950e:	f7ff fd2d 	bl	8008f6c <__hi0bits>
 8009512:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009516:	e7e5      	b.n	80094e4 <__d2b+0x74>
 8009518:	0800a1a8 	.word	0x0800a1a8
 800951c:	0800a1b9 	.word	0x0800a1b9

08009520 <__sflush_r>:
 8009520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009528:	0716      	lsls	r6, r2, #28
 800952a:	4605      	mov	r5, r0
 800952c:	460c      	mov	r4, r1
 800952e:	d454      	bmi.n	80095da <__sflush_r+0xba>
 8009530:	684b      	ldr	r3, [r1, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	dc02      	bgt.n	800953c <__sflush_r+0x1c>
 8009536:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	dd48      	ble.n	80095ce <__sflush_r+0xae>
 800953c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800953e:	2e00      	cmp	r6, #0
 8009540:	d045      	beq.n	80095ce <__sflush_r+0xae>
 8009542:	2300      	movs	r3, #0
 8009544:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009548:	682f      	ldr	r7, [r5, #0]
 800954a:	6a21      	ldr	r1, [r4, #32]
 800954c:	602b      	str	r3, [r5, #0]
 800954e:	d030      	beq.n	80095b2 <__sflush_r+0x92>
 8009550:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	0759      	lsls	r1, r3, #29
 8009556:	d505      	bpl.n	8009564 <__sflush_r+0x44>
 8009558:	6863      	ldr	r3, [r4, #4]
 800955a:	1ad2      	subs	r2, r2, r3
 800955c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800955e:	b10b      	cbz	r3, 8009564 <__sflush_r+0x44>
 8009560:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009562:	1ad2      	subs	r2, r2, r3
 8009564:	2300      	movs	r3, #0
 8009566:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009568:	6a21      	ldr	r1, [r4, #32]
 800956a:	4628      	mov	r0, r5
 800956c:	47b0      	blx	r6
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	d106      	bne.n	8009582 <__sflush_r+0x62>
 8009574:	6829      	ldr	r1, [r5, #0]
 8009576:	291d      	cmp	r1, #29
 8009578:	d82b      	bhi.n	80095d2 <__sflush_r+0xb2>
 800957a:	4a2a      	ldr	r2, [pc, #168]	@ (8009624 <__sflush_r+0x104>)
 800957c:	410a      	asrs	r2, r1
 800957e:	07d6      	lsls	r6, r2, #31
 8009580:	d427      	bmi.n	80095d2 <__sflush_r+0xb2>
 8009582:	2200      	movs	r2, #0
 8009584:	6062      	str	r2, [r4, #4]
 8009586:	04d9      	lsls	r1, r3, #19
 8009588:	6922      	ldr	r2, [r4, #16]
 800958a:	6022      	str	r2, [r4, #0]
 800958c:	d504      	bpl.n	8009598 <__sflush_r+0x78>
 800958e:	1c42      	adds	r2, r0, #1
 8009590:	d101      	bne.n	8009596 <__sflush_r+0x76>
 8009592:	682b      	ldr	r3, [r5, #0]
 8009594:	b903      	cbnz	r3, 8009598 <__sflush_r+0x78>
 8009596:	6560      	str	r0, [r4, #84]	@ 0x54
 8009598:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800959a:	602f      	str	r7, [r5, #0]
 800959c:	b1b9      	cbz	r1, 80095ce <__sflush_r+0xae>
 800959e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095a2:	4299      	cmp	r1, r3
 80095a4:	d002      	beq.n	80095ac <__sflush_r+0x8c>
 80095a6:	4628      	mov	r0, r5
 80095a8:	f7ff fbee 	bl	8008d88 <_free_r>
 80095ac:	2300      	movs	r3, #0
 80095ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80095b0:	e00d      	b.n	80095ce <__sflush_r+0xae>
 80095b2:	2301      	movs	r3, #1
 80095b4:	4628      	mov	r0, r5
 80095b6:	47b0      	blx	r6
 80095b8:	4602      	mov	r2, r0
 80095ba:	1c50      	adds	r0, r2, #1
 80095bc:	d1c9      	bne.n	8009552 <__sflush_r+0x32>
 80095be:	682b      	ldr	r3, [r5, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0c6      	beq.n	8009552 <__sflush_r+0x32>
 80095c4:	2b1d      	cmp	r3, #29
 80095c6:	d001      	beq.n	80095cc <__sflush_r+0xac>
 80095c8:	2b16      	cmp	r3, #22
 80095ca:	d11e      	bne.n	800960a <__sflush_r+0xea>
 80095cc:	602f      	str	r7, [r5, #0]
 80095ce:	2000      	movs	r0, #0
 80095d0:	e022      	b.n	8009618 <__sflush_r+0xf8>
 80095d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095d6:	b21b      	sxth	r3, r3
 80095d8:	e01b      	b.n	8009612 <__sflush_r+0xf2>
 80095da:	690f      	ldr	r7, [r1, #16]
 80095dc:	2f00      	cmp	r7, #0
 80095de:	d0f6      	beq.n	80095ce <__sflush_r+0xae>
 80095e0:	0793      	lsls	r3, r2, #30
 80095e2:	680e      	ldr	r6, [r1, #0]
 80095e4:	bf08      	it	eq
 80095e6:	694b      	ldreq	r3, [r1, #20]
 80095e8:	600f      	str	r7, [r1, #0]
 80095ea:	bf18      	it	ne
 80095ec:	2300      	movne	r3, #0
 80095ee:	eba6 0807 	sub.w	r8, r6, r7
 80095f2:	608b      	str	r3, [r1, #8]
 80095f4:	f1b8 0f00 	cmp.w	r8, #0
 80095f8:	dde9      	ble.n	80095ce <__sflush_r+0xae>
 80095fa:	6a21      	ldr	r1, [r4, #32]
 80095fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095fe:	4643      	mov	r3, r8
 8009600:	463a      	mov	r2, r7
 8009602:	4628      	mov	r0, r5
 8009604:	47b0      	blx	r6
 8009606:	2800      	cmp	r0, #0
 8009608:	dc08      	bgt.n	800961c <__sflush_r+0xfc>
 800960a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800960e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009612:	81a3      	strh	r3, [r4, #12]
 8009614:	f04f 30ff 	mov.w	r0, #4294967295
 8009618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800961c:	4407      	add	r7, r0
 800961e:	eba8 0800 	sub.w	r8, r8, r0
 8009622:	e7e7      	b.n	80095f4 <__sflush_r+0xd4>
 8009624:	dfbffffe 	.word	0xdfbffffe

08009628 <_fflush_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	690b      	ldr	r3, [r1, #16]
 800962c:	4605      	mov	r5, r0
 800962e:	460c      	mov	r4, r1
 8009630:	b913      	cbnz	r3, 8009638 <_fflush_r+0x10>
 8009632:	2500      	movs	r5, #0
 8009634:	4628      	mov	r0, r5
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	b118      	cbz	r0, 8009642 <_fflush_r+0x1a>
 800963a:	6a03      	ldr	r3, [r0, #32]
 800963c:	b90b      	cbnz	r3, 8009642 <_fflush_r+0x1a>
 800963e:	f7fe fc3d 	bl	8007ebc <__sinit>
 8009642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0f3      	beq.n	8009632 <_fflush_r+0xa>
 800964a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800964c:	07d0      	lsls	r0, r2, #31
 800964e:	d404      	bmi.n	800965a <_fflush_r+0x32>
 8009650:	0599      	lsls	r1, r3, #22
 8009652:	d402      	bmi.n	800965a <_fflush_r+0x32>
 8009654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009656:	f7fe fd38 	bl	80080ca <__retarget_lock_acquire_recursive>
 800965a:	4628      	mov	r0, r5
 800965c:	4621      	mov	r1, r4
 800965e:	f7ff ff5f 	bl	8009520 <__sflush_r>
 8009662:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009664:	07da      	lsls	r2, r3, #31
 8009666:	4605      	mov	r5, r0
 8009668:	d4e4      	bmi.n	8009634 <_fflush_r+0xc>
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	059b      	lsls	r3, r3, #22
 800966e:	d4e1      	bmi.n	8009634 <_fflush_r+0xc>
 8009670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009672:	f7fe fd2b 	bl	80080cc <__retarget_lock_release_recursive>
 8009676:	e7dd      	b.n	8009634 <_fflush_r+0xc>

08009678 <__assert_func>:
 8009678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800967a:	4614      	mov	r4, r2
 800967c:	461a      	mov	r2, r3
 800967e:	4b09      	ldr	r3, [pc, #36]	@ (80096a4 <__assert_func+0x2c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4605      	mov	r5, r0
 8009684:	68d8      	ldr	r0, [r3, #12]
 8009686:	b954      	cbnz	r4, 800969e <__assert_func+0x26>
 8009688:	4b07      	ldr	r3, [pc, #28]	@ (80096a8 <__assert_func+0x30>)
 800968a:	461c      	mov	r4, r3
 800968c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009690:	9100      	str	r1, [sp, #0]
 8009692:	462b      	mov	r3, r5
 8009694:	4905      	ldr	r1, [pc, #20]	@ (80096ac <__assert_func+0x34>)
 8009696:	f000 f841 	bl	800971c <fiprintf>
 800969a:	f000 f851 	bl	8009740 <abort>
 800969e:	4b04      	ldr	r3, [pc, #16]	@ (80096b0 <__assert_func+0x38>)
 80096a0:	e7f4      	b.n	800968c <__assert_func+0x14>
 80096a2:	bf00      	nop
 80096a4:	2000005c 	.word	0x2000005c
 80096a8:	0800a355 	.word	0x0800a355
 80096ac:	0800a327 	.word	0x0800a327
 80096b0:	0800a31a 	.word	0x0800a31a

080096b4 <_calloc_r>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	fba1 5402 	umull	r5, r4, r1, r2
 80096ba:	b93c      	cbnz	r4, 80096cc <_calloc_r+0x18>
 80096bc:	4629      	mov	r1, r5
 80096be:	f7fd fe8d 	bl	80073dc <_malloc_r>
 80096c2:	4606      	mov	r6, r0
 80096c4:	b928      	cbnz	r0, 80096d2 <_calloc_r+0x1e>
 80096c6:	2600      	movs	r6, #0
 80096c8:	4630      	mov	r0, r6
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	220c      	movs	r2, #12
 80096ce:	6002      	str	r2, [r0, #0]
 80096d0:	e7f9      	b.n	80096c6 <_calloc_r+0x12>
 80096d2:	462a      	mov	r2, r5
 80096d4:	4621      	mov	r1, r4
 80096d6:	f7fe fc6a 	bl	8007fae <memset>
 80096da:	e7f5      	b.n	80096c8 <_calloc_r+0x14>

080096dc <__ascii_mbtowc>:
 80096dc:	b082      	sub	sp, #8
 80096de:	b901      	cbnz	r1, 80096e2 <__ascii_mbtowc+0x6>
 80096e0:	a901      	add	r1, sp, #4
 80096e2:	b142      	cbz	r2, 80096f6 <__ascii_mbtowc+0x1a>
 80096e4:	b14b      	cbz	r3, 80096fa <__ascii_mbtowc+0x1e>
 80096e6:	7813      	ldrb	r3, [r2, #0]
 80096e8:	600b      	str	r3, [r1, #0]
 80096ea:	7812      	ldrb	r2, [r2, #0]
 80096ec:	1e10      	subs	r0, r2, #0
 80096ee:	bf18      	it	ne
 80096f0:	2001      	movne	r0, #1
 80096f2:	b002      	add	sp, #8
 80096f4:	4770      	bx	lr
 80096f6:	4610      	mov	r0, r2
 80096f8:	e7fb      	b.n	80096f2 <__ascii_mbtowc+0x16>
 80096fa:	f06f 0001 	mvn.w	r0, #1
 80096fe:	e7f8      	b.n	80096f2 <__ascii_mbtowc+0x16>

08009700 <__ascii_wctomb>:
 8009700:	4603      	mov	r3, r0
 8009702:	4608      	mov	r0, r1
 8009704:	b141      	cbz	r1, 8009718 <__ascii_wctomb+0x18>
 8009706:	2aff      	cmp	r2, #255	@ 0xff
 8009708:	d904      	bls.n	8009714 <__ascii_wctomb+0x14>
 800970a:	228a      	movs	r2, #138	@ 0x8a
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	f04f 30ff 	mov.w	r0, #4294967295
 8009712:	4770      	bx	lr
 8009714:	700a      	strb	r2, [r1, #0]
 8009716:	2001      	movs	r0, #1
 8009718:	4770      	bx	lr
	...

0800971c <fiprintf>:
 800971c:	b40e      	push	{r1, r2, r3}
 800971e:	b503      	push	{r0, r1, lr}
 8009720:	4601      	mov	r1, r0
 8009722:	ab03      	add	r3, sp, #12
 8009724:	4805      	ldr	r0, [pc, #20]	@ (800973c <fiprintf+0x20>)
 8009726:	f853 2b04 	ldr.w	r2, [r3], #4
 800972a:	6800      	ldr	r0, [r0, #0]
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	f000 f837 	bl	80097a0 <_vfiprintf_r>
 8009732:	b002      	add	sp, #8
 8009734:	f85d eb04 	ldr.w	lr, [sp], #4
 8009738:	b003      	add	sp, #12
 800973a:	4770      	bx	lr
 800973c:	2000005c 	.word	0x2000005c

08009740 <abort>:
 8009740:	b508      	push	{r3, lr}
 8009742:	2006      	movs	r0, #6
 8009744:	f000 fa00 	bl	8009b48 <raise>
 8009748:	2001      	movs	r0, #1
 800974a:	f7fa fc3b 	bl	8003fc4 <_exit>

0800974e <__sfputc_r>:
 800974e:	6893      	ldr	r3, [r2, #8]
 8009750:	3b01      	subs	r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	b410      	push	{r4}
 8009756:	6093      	str	r3, [r2, #8]
 8009758:	da08      	bge.n	800976c <__sfputc_r+0x1e>
 800975a:	6994      	ldr	r4, [r2, #24]
 800975c:	42a3      	cmp	r3, r4
 800975e:	db01      	blt.n	8009764 <__sfputc_r+0x16>
 8009760:	290a      	cmp	r1, #10
 8009762:	d103      	bne.n	800976c <__sfputc_r+0x1e>
 8009764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009768:	f000 b932 	b.w	80099d0 <__swbuf_r>
 800976c:	6813      	ldr	r3, [r2, #0]
 800976e:	1c58      	adds	r0, r3, #1
 8009770:	6010      	str	r0, [r2, #0]
 8009772:	7019      	strb	r1, [r3, #0]
 8009774:	4608      	mov	r0, r1
 8009776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800977a:	4770      	bx	lr

0800977c <__sfputs_r>:
 800977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977e:	4606      	mov	r6, r0
 8009780:	460f      	mov	r7, r1
 8009782:	4614      	mov	r4, r2
 8009784:	18d5      	adds	r5, r2, r3
 8009786:	42ac      	cmp	r4, r5
 8009788:	d101      	bne.n	800978e <__sfputs_r+0x12>
 800978a:	2000      	movs	r0, #0
 800978c:	e007      	b.n	800979e <__sfputs_r+0x22>
 800978e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009792:	463a      	mov	r2, r7
 8009794:	4630      	mov	r0, r6
 8009796:	f7ff ffda 	bl	800974e <__sfputc_r>
 800979a:	1c43      	adds	r3, r0, #1
 800979c:	d1f3      	bne.n	8009786 <__sfputs_r+0xa>
 800979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080097a0 <_vfiprintf_r>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	460d      	mov	r5, r1
 80097a6:	b09d      	sub	sp, #116	@ 0x74
 80097a8:	4614      	mov	r4, r2
 80097aa:	4698      	mov	r8, r3
 80097ac:	4606      	mov	r6, r0
 80097ae:	b118      	cbz	r0, 80097b8 <_vfiprintf_r+0x18>
 80097b0:	6a03      	ldr	r3, [r0, #32]
 80097b2:	b90b      	cbnz	r3, 80097b8 <_vfiprintf_r+0x18>
 80097b4:	f7fe fb82 	bl	8007ebc <__sinit>
 80097b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097ba:	07d9      	lsls	r1, r3, #31
 80097bc:	d405      	bmi.n	80097ca <_vfiprintf_r+0x2a>
 80097be:	89ab      	ldrh	r3, [r5, #12]
 80097c0:	059a      	lsls	r2, r3, #22
 80097c2:	d402      	bmi.n	80097ca <_vfiprintf_r+0x2a>
 80097c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097c6:	f7fe fc80 	bl	80080ca <__retarget_lock_acquire_recursive>
 80097ca:	89ab      	ldrh	r3, [r5, #12]
 80097cc:	071b      	lsls	r3, r3, #28
 80097ce:	d501      	bpl.n	80097d4 <_vfiprintf_r+0x34>
 80097d0:	692b      	ldr	r3, [r5, #16]
 80097d2:	b99b      	cbnz	r3, 80097fc <_vfiprintf_r+0x5c>
 80097d4:	4629      	mov	r1, r5
 80097d6:	4630      	mov	r0, r6
 80097d8:	f000 f938 	bl	8009a4c <__swsetup_r>
 80097dc:	b170      	cbz	r0, 80097fc <_vfiprintf_r+0x5c>
 80097de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097e0:	07dc      	lsls	r4, r3, #31
 80097e2:	d504      	bpl.n	80097ee <_vfiprintf_r+0x4e>
 80097e4:	f04f 30ff 	mov.w	r0, #4294967295
 80097e8:	b01d      	add	sp, #116	@ 0x74
 80097ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ee:	89ab      	ldrh	r3, [r5, #12]
 80097f0:	0598      	lsls	r0, r3, #22
 80097f2:	d4f7      	bmi.n	80097e4 <_vfiprintf_r+0x44>
 80097f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097f6:	f7fe fc69 	bl	80080cc <__retarget_lock_release_recursive>
 80097fa:	e7f3      	b.n	80097e4 <_vfiprintf_r+0x44>
 80097fc:	2300      	movs	r3, #0
 80097fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009800:	2320      	movs	r3, #32
 8009802:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009806:	f8cd 800c 	str.w	r8, [sp, #12]
 800980a:	2330      	movs	r3, #48	@ 0x30
 800980c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80099bc <_vfiprintf_r+0x21c>
 8009810:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009814:	f04f 0901 	mov.w	r9, #1
 8009818:	4623      	mov	r3, r4
 800981a:	469a      	mov	sl, r3
 800981c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009820:	b10a      	cbz	r2, 8009826 <_vfiprintf_r+0x86>
 8009822:	2a25      	cmp	r2, #37	@ 0x25
 8009824:	d1f9      	bne.n	800981a <_vfiprintf_r+0x7a>
 8009826:	ebba 0b04 	subs.w	fp, sl, r4
 800982a:	d00b      	beq.n	8009844 <_vfiprintf_r+0xa4>
 800982c:	465b      	mov	r3, fp
 800982e:	4622      	mov	r2, r4
 8009830:	4629      	mov	r1, r5
 8009832:	4630      	mov	r0, r6
 8009834:	f7ff ffa2 	bl	800977c <__sfputs_r>
 8009838:	3001      	adds	r0, #1
 800983a:	f000 80a7 	beq.w	800998c <_vfiprintf_r+0x1ec>
 800983e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009840:	445a      	add	r2, fp
 8009842:	9209      	str	r2, [sp, #36]	@ 0x24
 8009844:	f89a 3000 	ldrb.w	r3, [sl]
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 809f 	beq.w	800998c <_vfiprintf_r+0x1ec>
 800984e:	2300      	movs	r3, #0
 8009850:	f04f 32ff 	mov.w	r2, #4294967295
 8009854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009858:	f10a 0a01 	add.w	sl, sl, #1
 800985c:	9304      	str	r3, [sp, #16]
 800985e:	9307      	str	r3, [sp, #28]
 8009860:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009864:	931a      	str	r3, [sp, #104]	@ 0x68
 8009866:	4654      	mov	r4, sl
 8009868:	2205      	movs	r2, #5
 800986a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800986e:	4853      	ldr	r0, [pc, #332]	@ (80099bc <_vfiprintf_r+0x21c>)
 8009870:	f7f6 fcce 	bl	8000210 <memchr>
 8009874:	9a04      	ldr	r2, [sp, #16]
 8009876:	b9d8      	cbnz	r0, 80098b0 <_vfiprintf_r+0x110>
 8009878:	06d1      	lsls	r1, r2, #27
 800987a:	bf44      	itt	mi
 800987c:	2320      	movmi	r3, #32
 800987e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009882:	0713      	lsls	r3, r2, #28
 8009884:	bf44      	itt	mi
 8009886:	232b      	movmi	r3, #43	@ 0x2b
 8009888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800988c:	f89a 3000 	ldrb.w	r3, [sl]
 8009890:	2b2a      	cmp	r3, #42	@ 0x2a
 8009892:	d015      	beq.n	80098c0 <_vfiprintf_r+0x120>
 8009894:	9a07      	ldr	r2, [sp, #28]
 8009896:	4654      	mov	r4, sl
 8009898:	2000      	movs	r0, #0
 800989a:	f04f 0c0a 	mov.w	ip, #10
 800989e:	4621      	mov	r1, r4
 80098a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098a4:	3b30      	subs	r3, #48	@ 0x30
 80098a6:	2b09      	cmp	r3, #9
 80098a8:	d94b      	bls.n	8009942 <_vfiprintf_r+0x1a2>
 80098aa:	b1b0      	cbz	r0, 80098da <_vfiprintf_r+0x13a>
 80098ac:	9207      	str	r2, [sp, #28]
 80098ae:	e014      	b.n	80098da <_vfiprintf_r+0x13a>
 80098b0:	eba0 0308 	sub.w	r3, r0, r8
 80098b4:	fa09 f303 	lsl.w	r3, r9, r3
 80098b8:	4313      	orrs	r3, r2
 80098ba:	9304      	str	r3, [sp, #16]
 80098bc:	46a2      	mov	sl, r4
 80098be:	e7d2      	b.n	8009866 <_vfiprintf_r+0xc6>
 80098c0:	9b03      	ldr	r3, [sp, #12]
 80098c2:	1d19      	adds	r1, r3, #4
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	9103      	str	r1, [sp, #12]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bfbb      	ittet	lt
 80098cc:	425b      	neglt	r3, r3
 80098ce:	f042 0202 	orrlt.w	r2, r2, #2
 80098d2:	9307      	strge	r3, [sp, #28]
 80098d4:	9307      	strlt	r3, [sp, #28]
 80098d6:	bfb8      	it	lt
 80098d8:	9204      	strlt	r2, [sp, #16]
 80098da:	7823      	ldrb	r3, [r4, #0]
 80098dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80098de:	d10a      	bne.n	80098f6 <_vfiprintf_r+0x156>
 80098e0:	7863      	ldrb	r3, [r4, #1]
 80098e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80098e4:	d132      	bne.n	800994c <_vfiprintf_r+0x1ac>
 80098e6:	9b03      	ldr	r3, [sp, #12]
 80098e8:	1d1a      	adds	r2, r3, #4
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	9203      	str	r2, [sp, #12]
 80098ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098f2:	3402      	adds	r4, #2
 80098f4:	9305      	str	r3, [sp, #20]
 80098f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80099cc <_vfiprintf_r+0x22c>
 80098fa:	7821      	ldrb	r1, [r4, #0]
 80098fc:	2203      	movs	r2, #3
 80098fe:	4650      	mov	r0, sl
 8009900:	f7f6 fc86 	bl	8000210 <memchr>
 8009904:	b138      	cbz	r0, 8009916 <_vfiprintf_r+0x176>
 8009906:	9b04      	ldr	r3, [sp, #16]
 8009908:	eba0 000a 	sub.w	r0, r0, sl
 800990c:	2240      	movs	r2, #64	@ 0x40
 800990e:	4082      	lsls	r2, r0
 8009910:	4313      	orrs	r3, r2
 8009912:	3401      	adds	r4, #1
 8009914:	9304      	str	r3, [sp, #16]
 8009916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800991a:	4829      	ldr	r0, [pc, #164]	@ (80099c0 <_vfiprintf_r+0x220>)
 800991c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009920:	2206      	movs	r2, #6
 8009922:	f7f6 fc75 	bl	8000210 <memchr>
 8009926:	2800      	cmp	r0, #0
 8009928:	d03f      	beq.n	80099aa <_vfiprintf_r+0x20a>
 800992a:	4b26      	ldr	r3, [pc, #152]	@ (80099c4 <_vfiprintf_r+0x224>)
 800992c:	bb1b      	cbnz	r3, 8009976 <_vfiprintf_r+0x1d6>
 800992e:	9b03      	ldr	r3, [sp, #12]
 8009930:	3307      	adds	r3, #7
 8009932:	f023 0307 	bic.w	r3, r3, #7
 8009936:	3308      	adds	r3, #8
 8009938:	9303      	str	r3, [sp, #12]
 800993a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800993c:	443b      	add	r3, r7
 800993e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009940:	e76a      	b.n	8009818 <_vfiprintf_r+0x78>
 8009942:	fb0c 3202 	mla	r2, ip, r2, r3
 8009946:	460c      	mov	r4, r1
 8009948:	2001      	movs	r0, #1
 800994a:	e7a8      	b.n	800989e <_vfiprintf_r+0xfe>
 800994c:	2300      	movs	r3, #0
 800994e:	3401      	adds	r4, #1
 8009950:	9305      	str	r3, [sp, #20]
 8009952:	4619      	mov	r1, r3
 8009954:	f04f 0c0a 	mov.w	ip, #10
 8009958:	4620      	mov	r0, r4
 800995a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800995e:	3a30      	subs	r2, #48	@ 0x30
 8009960:	2a09      	cmp	r2, #9
 8009962:	d903      	bls.n	800996c <_vfiprintf_r+0x1cc>
 8009964:	2b00      	cmp	r3, #0
 8009966:	d0c6      	beq.n	80098f6 <_vfiprintf_r+0x156>
 8009968:	9105      	str	r1, [sp, #20]
 800996a:	e7c4      	b.n	80098f6 <_vfiprintf_r+0x156>
 800996c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009970:	4604      	mov	r4, r0
 8009972:	2301      	movs	r3, #1
 8009974:	e7f0      	b.n	8009958 <_vfiprintf_r+0x1b8>
 8009976:	ab03      	add	r3, sp, #12
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	462a      	mov	r2, r5
 800997c:	4b12      	ldr	r3, [pc, #72]	@ (80099c8 <_vfiprintf_r+0x228>)
 800997e:	a904      	add	r1, sp, #16
 8009980:	4630      	mov	r0, r6
 8009982:	f7fd fe57 	bl	8007634 <_printf_float>
 8009986:	4607      	mov	r7, r0
 8009988:	1c78      	adds	r0, r7, #1
 800998a:	d1d6      	bne.n	800993a <_vfiprintf_r+0x19a>
 800998c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800998e:	07d9      	lsls	r1, r3, #31
 8009990:	d405      	bmi.n	800999e <_vfiprintf_r+0x1fe>
 8009992:	89ab      	ldrh	r3, [r5, #12]
 8009994:	059a      	lsls	r2, r3, #22
 8009996:	d402      	bmi.n	800999e <_vfiprintf_r+0x1fe>
 8009998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800999a:	f7fe fb97 	bl	80080cc <__retarget_lock_release_recursive>
 800999e:	89ab      	ldrh	r3, [r5, #12]
 80099a0:	065b      	lsls	r3, r3, #25
 80099a2:	f53f af1f 	bmi.w	80097e4 <_vfiprintf_r+0x44>
 80099a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099a8:	e71e      	b.n	80097e8 <_vfiprintf_r+0x48>
 80099aa:	ab03      	add	r3, sp, #12
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	462a      	mov	r2, r5
 80099b0:	4b05      	ldr	r3, [pc, #20]	@ (80099c8 <_vfiprintf_r+0x228>)
 80099b2:	a904      	add	r1, sp, #16
 80099b4:	4630      	mov	r0, r6
 80099b6:	f7fe f8d5 	bl	8007b64 <_printf_i>
 80099ba:	e7e4      	b.n	8009986 <_vfiprintf_r+0x1e6>
 80099bc:	0800a457 	.word	0x0800a457
 80099c0:	0800a461 	.word	0x0800a461
 80099c4:	08007635 	.word	0x08007635
 80099c8:	0800977d 	.word	0x0800977d
 80099cc:	0800a45d 	.word	0x0800a45d

080099d0 <__swbuf_r>:
 80099d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d2:	460e      	mov	r6, r1
 80099d4:	4614      	mov	r4, r2
 80099d6:	4605      	mov	r5, r0
 80099d8:	b118      	cbz	r0, 80099e2 <__swbuf_r+0x12>
 80099da:	6a03      	ldr	r3, [r0, #32]
 80099dc:	b90b      	cbnz	r3, 80099e2 <__swbuf_r+0x12>
 80099de:	f7fe fa6d 	bl	8007ebc <__sinit>
 80099e2:	69a3      	ldr	r3, [r4, #24]
 80099e4:	60a3      	str	r3, [r4, #8]
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	071a      	lsls	r2, r3, #28
 80099ea:	d501      	bpl.n	80099f0 <__swbuf_r+0x20>
 80099ec:	6923      	ldr	r3, [r4, #16]
 80099ee:	b943      	cbnz	r3, 8009a02 <__swbuf_r+0x32>
 80099f0:	4621      	mov	r1, r4
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 f82a 	bl	8009a4c <__swsetup_r>
 80099f8:	b118      	cbz	r0, 8009a02 <__swbuf_r+0x32>
 80099fa:	f04f 37ff 	mov.w	r7, #4294967295
 80099fe:	4638      	mov	r0, r7
 8009a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	6922      	ldr	r2, [r4, #16]
 8009a06:	1a98      	subs	r0, r3, r2
 8009a08:	6963      	ldr	r3, [r4, #20]
 8009a0a:	b2f6      	uxtb	r6, r6
 8009a0c:	4283      	cmp	r3, r0
 8009a0e:	4637      	mov	r7, r6
 8009a10:	dc05      	bgt.n	8009a1e <__swbuf_r+0x4e>
 8009a12:	4621      	mov	r1, r4
 8009a14:	4628      	mov	r0, r5
 8009a16:	f7ff fe07 	bl	8009628 <_fflush_r>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d1ed      	bne.n	80099fa <__swbuf_r+0x2a>
 8009a1e:	68a3      	ldr	r3, [r4, #8]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	60a3      	str	r3, [r4, #8]
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	1c5a      	adds	r2, r3, #1
 8009a28:	6022      	str	r2, [r4, #0]
 8009a2a:	701e      	strb	r6, [r3, #0]
 8009a2c:	6962      	ldr	r2, [r4, #20]
 8009a2e:	1c43      	adds	r3, r0, #1
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d004      	beq.n	8009a3e <__swbuf_r+0x6e>
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	07db      	lsls	r3, r3, #31
 8009a38:	d5e1      	bpl.n	80099fe <__swbuf_r+0x2e>
 8009a3a:	2e0a      	cmp	r6, #10
 8009a3c:	d1df      	bne.n	80099fe <__swbuf_r+0x2e>
 8009a3e:	4621      	mov	r1, r4
 8009a40:	4628      	mov	r0, r5
 8009a42:	f7ff fdf1 	bl	8009628 <_fflush_r>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d0d9      	beq.n	80099fe <__swbuf_r+0x2e>
 8009a4a:	e7d6      	b.n	80099fa <__swbuf_r+0x2a>

08009a4c <__swsetup_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	4b29      	ldr	r3, [pc, #164]	@ (8009af4 <__swsetup_r+0xa8>)
 8009a50:	4605      	mov	r5, r0
 8009a52:	6818      	ldr	r0, [r3, #0]
 8009a54:	460c      	mov	r4, r1
 8009a56:	b118      	cbz	r0, 8009a60 <__swsetup_r+0x14>
 8009a58:	6a03      	ldr	r3, [r0, #32]
 8009a5a:	b90b      	cbnz	r3, 8009a60 <__swsetup_r+0x14>
 8009a5c:	f7fe fa2e 	bl	8007ebc <__sinit>
 8009a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a64:	0719      	lsls	r1, r3, #28
 8009a66:	d422      	bmi.n	8009aae <__swsetup_r+0x62>
 8009a68:	06da      	lsls	r2, r3, #27
 8009a6a:	d407      	bmi.n	8009a7c <__swsetup_r+0x30>
 8009a6c:	2209      	movs	r2, #9
 8009a6e:	602a      	str	r2, [r5, #0]
 8009a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a74:	81a3      	strh	r3, [r4, #12]
 8009a76:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7a:	e033      	b.n	8009ae4 <__swsetup_r+0x98>
 8009a7c:	0758      	lsls	r0, r3, #29
 8009a7e:	d512      	bpl.n	8009aa6 <__swsetup_r+0x5a>
 8009a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a82:	b141      	cbz	r1, 8009a96 <__swsetup_r+0x4a>
 8009a84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a88:	4299      	cmp	r1, r3
 8009a8a:	d002      	beq.n	8009a92 <__swsetup_r+0x46>
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f7ff f97b 	bl	8008d88 <_free_r>
 8009a92:	2300      	movs	r3, #0
 8009a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a96:	89a3      	ldrh	r3, [r4, #12]
 8009a98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a9c:	81a3      	strh	r3, [r4, #12]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	6063      	str	r3, [r4, #4]
 8009aa2:	6923      	ldr	r3, [r4, #16]
 8009aa4:	6023      	str	r3, [r4, #0]
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	f043 0308 	orr.w	r3, r3, #8
 8009aac:	81a3      	strh	r3, [r4, #12]
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	b94b      	cbnz	r3, 8009ac6 <__swsetup_r+0x7a>
 8009ab2:	89a3      	ldrh	r3, [r4, #12]
 8009ab4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009abc:	d003      	beq.n	8009ac6 <__swsetup_r+0x7a>
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	f000 f883 	bl	8009bcc <__smakebuf_r>
 8009ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aca:	f013 0201 	ands.w	r2, r3, #1
 8009ace:	d00a      	beq.n	8009ae6 <__swsetup_r+0x9a>
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	60a2      	str	r2, [r4, #8]
 8009ad4:	6962      	ldr	r2, [r4, #20]
 8009ad6:	4252      	negs	r2, r2
 8009ad8:	61a2      	str	r2, [r4, #24]
 8009ada:	6922      	ldr	r2, [r4, #16]
 8009adc:	b942      	cbnz	r2, 8009af0 <__swsetup_r+0xa4>
 8009ade:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ae2:	d1c5      	bne.n	8009a70 <__swsetup_r+0x24>
 8009ae4:	bd38      	pop	{r3, r4, r5, pc}
 8009ae6:	0799      	lsls	r1, r3, #30
 8009ae8:	bf58      	it	pl
 8009aea:	6962      	ldrpl	r2, [r4, #20]
 8009aec:	60a2      	str	r2, [r4, #8]
 8009aee:	e7f4      	b.n	8009ada <__swsetup_r+0x8e>
 8009af0:	2000      	movs	r0, #0
 8009af2:	e7f7      	b.n	8009ae4 <__swsetup_r+0x98>
 8009af4:	2000005c 	.word	0x2000005c

08009af8 <_raise_r>:
 8009af8:	291f      	cmp	r1, #31
 8009afa:	b538      	push	{r3, r4, r5, lr}
 8009afc:	4605      	mov	r5, r0
 8009afe:	460c      	mov	r4, r1
 8009b00:	d904      	bls.n	8009b0c <_raise_r+0x14>
 8009b02:	2316      	movs	r3, #22
 8009b04:	6003      	str	r3, [r0, #0]
 8009b06:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b0e:	b112      	cbz	r2, 8009b16 <_raise_r+0x1e>
 8009b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b14:	b94b      	cbnz	r3, 8009b2a <_raise_r+0x32>
 8009b16:	4628      	mov	r0, r5
 8009b18:	f000 f830 	bl	8009b7c <_getpid_r>
 8009b1c:	4622      	mov	r2, r4
 8009b1e:	4601      	mov	r1, r0
 8009b20:	4628      	mov	r0, r5
 8009b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b26:	f000 b817 	b.w	8009b58 <_kill_r>
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d00a      	beq.n	8009b44 <_raise_r+0x4c>
 8009b2e:	1c59      	adds	r1, r3, #1
 8009b30:	d103      	bne.n	8009b3a <_raise_r+0x42>
 8009b32:	2316      	movs	r3, #22
 8009b34:	6003      	str	r3, [r0, #0]
 8009b36:	2001      	movs	r0, #1
 8009b38:	e7e7      	b.n	8009b0a <_raise_r+0x12>
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009b40:	4620      	mov	r0, r4
 8009b42:	4798      	blx	r3
 8009b44:	2000      	movs	r0, #0
 8009b46:	e7e0      	b.n	8009b0a <_raise_r+0x12>

08009b48 <raise>:
 8009b48:	4b02      	ldr	r3, [pc, #8]	@ (8009b54 <raise+0xc>)
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	6818      	ldr	r0, [r3, #0]
 8009b4e:	f7ff bfd3 	b.w	8009af8 <_raise_r>
 8009b52:	bf00      	nop
 8009b54:	2000005c 	.word	0x2000005c

08009b58 <_kill_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d07      	ldr	r5, [pc, #28]	@ (8009b78 <_kill_r+0x20>)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	4611      	mov	r1, r2
 8009b64:	602b      	str	r3, [r5, #0]
 8009b66:	f7fa fa1d 	bl	8003fa4 <_kill>
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	d102      	bne.n	8009b74 <_kill_r+0x1c>
 8009b6e:	682b      	ldr	r3, [r5, #0]
 8009b70:	b103      	cbz	r3, 8009b74 <_kill_r+0x1c>
 8009b72:	6023      	str	r3, [r4, #0]
 8009b74:	bd38      	pop	{r3, r4, r5, pc}
 8009b76:	bf00      	nop
 8009b78:	20000794 	.word	0x20000794

08009b7c <_getpid_r>:
 8009b7c:	f7fa ba0a 	b.w	8003f94 <_getpid>

08009b80 <__swhatbuf_r>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	460c      	mov	r4, r1
 8009b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b88:	2900      	cmp	r1, #0
 8009b8a:	b096      	sub	sp, #88	@ 0x58
 8009b8c:	4615      	mov	r5, r2
 8009b8e:	461e      	mov	r6, r3
 8009b90:	da0d      	bge.n	8009bae <__swhatbuf_r+0x2e>
 8009b92:	89a3      	ldrh	r3, [r4, #12]
 8009b94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b98:	f04f 0100 	mov.w	r1, #0
 8009b9c:	bf14      	ite	ne
 8009b9e:	2340      	movne	r3, #64	@ 0x40
 8009ba0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	6031      	str	r1, [r6, #0]
 8009ba8:	602b      	str	r3, [r5, #0]
 8009baa:	b016      	add	sp, #88	@ 0x58
 8009bac:	bd70      	pop	{r4, r5, r6, pc}
 8009bae:	466a      	mov	r2, sp
 8009bb0:	f000 f848 	bl	8009c44 <_fstat_r>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	dbec      	blt.n	8009b92 <__swhatbuf_r+0x12>
 8009bb8:	9901      	ldr	r1, [sp, #4]
 8009bba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009bbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009bc2:	4259      	negs	r1, r3
 8009bc4:	4159      	adcs	r1, r3
 8009bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bca:	e7eb      	b.n	8009ba4 <__swhatbuf_r+0x24>

08009bcc <__smakebuf_r>:
 8009bcc:	898b      	ldrh	r3, [r1, #12]
 8009bce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bd0:	079d      	lsls	r5, r3, #30
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	d507      	bpl.n	8009be8 <__smakebuf_r+0x1c>
 8009bd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	6123      	str	r3, [r4, #16]
 8009be0:	2301      	movs	r3, #1
 8009be2:	6163      	str	r3, [r4, #20]
 8009be4:	b003      	add	sp, #12
 8009be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009be8:	ab01      	add	r3, sp, #4
 8009bea:	466a      	mov	r2, sp
 8009bec:	f7ff ffc8 	bl	8009b80 <__swhatbuf_r>
 8009bf0:	9f00      	ldr	r7, [sp, #0]
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f7fd fbf0 	bl	80073dc <_malloc_r>
 8009bfc:	b948      	cbnz	r0, 8009c12 <__smakebuf_r+0x46>
 8009bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c02:	059a      	lsls	r2, r3, #22
 8009c04:	d4ee      	bmi.n	8009be4 <__smakebuf_r+0x18>
 8009c06:	f023 0303 	bic.w	r3, r3, #3
 8009c0a:	f043 0302 	orr.w	r3, r3, #2
 8009c0e:	81a3      	strh	r3, [r4, #12]
 8009c10:	e7e2      	b.n	8009bd8 <__smakebuf_r+0xc>
 8009c12:	89a3      	ldrh	r3, [r4, #12]
 8009c14:	6020      	str	r0, [r4, #0]
 8009c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c1a:	81a3      	strh	r3, [r4, #12]
 8009c1c:	9b01      	ldr	r3, [sp, #4]
 8009c1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c22:	b15b      	cbz	r3, 8009c3c <__smakebuf_r+0x70>
 8009c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 f81d 	bl	8009c68 <_isatty_r>
 8009c2e:	b128      	cbz	r0, 8009c3c <__smakebuf_r+0x70>
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	f023 0303 	bic.w	r3, r3, #3
 8009c36:	f043 0301 	orr.w	r3, r3, #1
 8009c3a:	81a3      	strh	r3, [r4, #12]
 8009c3c:	89a3      	ldrh	r3, [r4, #12]
 8009c3e:	431d      	orrs	r5, r3
 8009c40:	81a5      	strh	r5, [r4, #12]
 8009c42:	e7cf      	b.n	8009be4 <__smakebuf_r+0x18>

08009c44 <_fstat_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d07      	ldr	r5, [pc, #28]	@ (8009c64 <_fstat_r+0x20>)
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	4611      	mov	r1, r2
 8009c50:	602b      	str	r3, [r5, #0]
 8009c52:	f7fa fa07 	bl	8004064 <_fstat>
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	d102      	bne.n	8009c60 <_fstat_r+0x1c>
 8009c5a:	682b      	ldr	r3, [r5, #0]
 8009c5c:	b103      	cbz	r3, 8009c60 <_fstat_r+0x1c>
 8009c5e:	6023      	str	r3, [r4, #0]
 8009c60:	bd38      	pop	{r3, r4, r5, pc}
 8009c62:	bf00      	nop
 8009c64:	20000794 	.word	0x20000794

08009c68 <_isatty_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4d06      	ldr	r5, [pc, #24]	@ (8009c84 <_isatty_r+0x1c>)
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	4604      	mov	r4, r0
 8009c70:	4608      	mov	r0, r1
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	f7fa fa06 	bl	8004084 <_isatty>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	d102      	bne.n	8009c82 <_isatty_r+0x1a>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	b103      	cbz	r3, 8009c82 <_isatty_r+0x1a>
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	20000794 	.word	0x20000794

08009c88 <_init>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	bf00      	nop
 8009c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c8e:	bc08      	pop	{r3}
 8009c90:	469e      	mov	lr, r3
 8009c92:	4770      	bx	lr

08009c94 <_fini>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	bf00      	nop
 8009c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9a:	bc08      	pop	{r3}
 8009c9c:	469e      	mov	lr, r3
 8009c9e:	4770      	bx	lr
