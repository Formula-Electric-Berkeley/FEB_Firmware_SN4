
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b8c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08008d60  08008d60  00009d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009514  08009514  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009514  08009514  0000a514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800951c  0800951c  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800951c  0800951c  0000a51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009520  08009520  0000a520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009524  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  200001d8  080096fc  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  080096fc  0000b6bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175fc  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003533  00000000  00000000  00022804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  00025d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a3  00000000  00000000  000273c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255c0  00000000  00000000  00028563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac62  00000000  00000000  0004db23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc002  00000000  00000000  00068785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144787  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000715c  00000000  00000000  001447cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014b928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d44 	.word	0x08008d44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008d44 	.word	0x08008d44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <pec15_calc>:
// ****************** Error Correction *******************
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	737b      	strb	r3, [r7, #13]
 8000fc8:	e019      	b.n	8000ffe <pec15_calc+0x4a>
	{
		addr = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	09db      	lsrs	r3, r3, #7
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	7b7a      	ldrb	r2, [r7, #13]
 8000fd2:	6839      	ldr	r1, [r7, #0]
 8000fd4:	440a      	add	r2, r1
 8000fd6:	7812      	ldrb	r2, [r2, #0]
 8000fd8:	4053      	eors	r3, r2
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000fe0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	897b      	ldrh	r3, [r7, #10]
 8000fea:	490b      	ldr	r1, [pc, #44]	@ (8001018 <pec15_calc+0x64>)
 8000fec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4053      	eors	r3, r2
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000ff8:	7b7b      	ldrb	r3, [r7, #13]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	737b      	strb	r3, [r7, #13]
 8000ffe:	7b7a      	ldrb	r2, [r7, #13]
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	429a      	cmp	r2, r3
 8001004:	d3e1      	bcc.n	8000fca <pec15_calc+0x16>
	}

	return(remainder * 2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001006:	89fb      	ldrh	r3, [r7, #14]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	b29b      	uxth	r3, r3
}
 800100c:	4618      	mov	r0, r3
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	08008f84 	.word	0x08008f84

0800101c <Pec10_calc>:

/* Calculates  and returns the CRC10 */
uint16_t Pec10_calc( bool bIsRxCmd, uint8_t nLength, uint8_t *pDataBuf)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	603a      	str	r2, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	460b      	mov	r3, r1
 800102a:	71bb      	strb	r3, [r7, #6]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 800102c:	2310      	movs	r3, #16
 800102e:	81fb      	strh	r3, [r7, #14]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 8001030:	238f      	movs	r3, #143	@ 0x8f
 8001032:	817b      	strh	r3, [r7, #10]
    uint8_t nByteIndex, nBitIndex;

    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 8001034:	2300      	movs	r3, #0
 8001036:	737b      	strb	r3, [r7, #13]
 8001038:	e024      	b.n	8001084 <Pec10_calc+0x68>
  {
    /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)pDataBuf[nByteIndex] << 2u);
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	b29a      	uxth	r2, r3
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	4053      	eors	r3, r2
 800104a:	81fb      	strh	r3, [r7, #14]

    /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 800104c:	2308      	movs	r3, #8
 800104e:	733b      	strb	r3, [r7, #12]
 8001050:	e012      	b.n	8001078 <Pec10_calc+0x5c>
    {
      /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 8001052:	89fb      	ldrh	r3, [r7, #14]
 8001054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001058:	2b00      	cmp	r3, #0
 800105a:	d007      	beq.n	800106c <Pec10_calc+0x50>
      {
                nRemainder = (uint16_t)((nRemainder << 1u));
 800105c:	89fb      	ldrh	r3, [r7, #14]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	81fb      	strh	r3, [r7, #14]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001062:	89fa      	ldrh	r2, [r7, #14]
 8001064:	897b      	ldrh	r3, [r7, #10]
 8001066:	4053      	eors	r3, r2
 8001068:	81fb      	strh	r3, [r7, #14]
 800106a:	e002      	b.n	8001072 <Pec10_calc+0x56>
      }
      else
      {
                nRemainder = (uint16_t)(nRemainder << 1u);
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	81fb      	strh	r3, [r7, #14]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	3b01      	subs	r3, #1
 8001076:	733b      	strb	r3, [r7, #12]
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1e9      	bne.n	8001052 <Pec10_calc+0x36>
    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	3301      	adds	r3, #1
 8001082:	737b      	strb	r3, [r7, #13]
 8001084:	7b7a      	ldrb	r2, [r7, #13]
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	429a      	cmp	r2, r3
 800108a:	d3d6      	bcc.n	800103a <Pec10_calc+0x1e>
      }
    }
  }

    /* If array is from received buffer add command counter to crc calculation */
    if (bIsRxCmd == true)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00e      	beq.n	80010b0 <Pec10_calc+0x94>
  {
        nRemainder ^= (uint16_t)(((uint16_t)pDataBuf[nLength] & (uint8_t)0xFC) << 2u);
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b21b      	sxth	r3, r3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	b21b      	sxth	r3, r3
 80010a0:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010aa:	4053      	eors	r3, r2
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	81fb      	strh	r3, [r7, #14]
  }
  /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 80010b0:	2306      	movs	r3, #6
 80010b2:	733b      	strb	r3, [r7, #12]
 80010b4:	e012      	b.n	80010dc <Pec10_calc+0xc0>
  {
    /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d007      	beq.n	80010d0 <Pec10_calc+0xb4>
    {
            nRemainder = (uint16_t)((nRemainder << 1u));
 80010c0:	89fb      	ldrh	r3, [r7, #14]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	81fb      	strh	r3, [r7, #14]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 80010c6:	89fa      	ldrh	r2, [r7, #14]
 80010c8:	897b      	ldrh	r3, [r7, #10]
 80010ca:	4053      	eors	r3, r2
 80010cc:	81fb      	strh	r3, [r7, #14]
 80010ce:	e002      	b.n	80010d6 <Pec10_calc+0xba>
    }
    else
    {
            nRemainder = (uint16_t)((nRemainder << 1u));
 80010d0:	89fb      	ldrh	r3, [r7, #14]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	81fb      	strh	r3, [r7, #14]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 80010d6:	7b3b      	ldrb	r3, [r7, #12]
 80010d8:	3b01      	subs	r3, #1
 80010da:	733b      	strb	r3, [r7, #12]
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1e9      	bne.n	80010b6 <Pec10_calc+0x9a>
    }
  }
    return ((uint16_t)(nRemainder & 0x3FFu));
 80010e2:	89fb      	ldrh	r3, [r7, #14]
 80010e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010e8:	b29b      	uxth	r3, r3
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <pec10_calc>:
uint16_t pec10_calc(uint8_t nLength, uint8_t *pDataBuf)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b085      	sub	sp, #20
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	6039      	str	r1, [r7, #0]
 8001100:	71fb      	strb	r3, [r7, #7]
	bool bIsRxCmd=true;
 8001102:	2301      	movs	r3, #1
 8001104:	72fb      	strb	r3, [r7, #11]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 8001106:	2310      	movs	r3, #16
 8001108:	81fb      	strh	r3, [r7, #14]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 800110a:	238f      	movs	r3, #143	@ 0x8f
 800110c:	813b      	strh	r3, [r7, #8]
    uint8_t nByteIndex, nBitIndex;

    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 800110e:	2300      	movs	r3, #0
 8001110:	737b      	strb	r3, [r7, #13]
 8001112:	e024      	b.n	800115e <pec10_calc+0x68>
  {
    /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)pDataBuf[nByteIndex] << 2u);
 8001114:	7b7b      	ldrb	r3, [r7, #13]
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	b29a      	uxth	r2, r3
 8001120:	89fb      	ldrh	r3, [r7, #14]
 8001122:	4053      	eors	r3, r2
 8001124:	81fb      	strh	r3, [r7, #14]

    /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 8001126:	2308      	movs	r3, #8
 8001128:	733b      	strb	r3, [r7, #12]
 800112a:	e012      	b.n	8001152 <pec10_calc+0x5c>
    {
      /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 800112c:	89fb      	ldrh	r3, [r7, #14]
 800112e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <pec10_calc+0x50>
      {
                nRemainder = (uint16_t)((nRemainder << 1u));
 8001136:	89fb      	ldrh	r3, [r7, #14]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	81fb      	strh	r3, [r7, #14]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 800113c:	89fa      	ldrh	r2, [r7, #14]
 800113e:	893b      	ldrh	r3, [r7, #8]
 8001140:	4053      	eors	r3, r2
 8001142:	81fb      	strh	r3, [r7, #14]
 8001144:	e002      	b.n	800114c <pec10_calc+0x56>
      }
      else
      {
                nRemainder = (uint16_t)(nRemainder << 1u);
 8001146:	89fb      	ldrh	r3, [r7, #14]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	81fb      	strh	r3, [r7, #14]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 800114c:	7b3b      	ldrb	r3, [r7, #12]
 800114e:	3b01      	subs	r3, #1
 8001150:	733b      	strb	r3, [r7, #12]
 8001152:	7b3b      	ldrb	r3, [r7, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1e9      	bne.n	800112c <pec10_calc+0x36>
    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 8001158:	7b7b      	ldrb	r3, [r7, #13]
 800115a:	3301      	adds	r3, #1
 800115c:	737b      	strb	r3, [r7, #13]
 800115e:	7b7a      	ldrb	r2, [r7, #13]
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	429a      	cmp	r2, r3
 8001164:	d3d6      	bcc.n	8001114 <pec10_calc+0x1e>
      }
    }
  }

    /* If array is from received buffer add command counter to crc calculation */
    if (bIsRxCmd == true)
 8001166:	7afb      	ldrb	r3, [r7, #11]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00e      	beq.n	800118a <pec10_calc+0x94>
  {
        nRemainder ^= (uint16_t)(((uint16_t)pDataBuf[nLength] & (uint8_t)0xFC) << 2u);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	4413      	add	r3, r2
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b21b      	sxth	r3, r3
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	b21b      	sxth	r3, r3
 800117a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 800117e:	b21a      	sxth	r2, r3
 8001180:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001184:	4053      	eors	r3, r2
 8001186:	b21b      	sxth	r3, r3
 8001188:	81fb      	strh	r3, [r7, #14]
  }
  /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 800118a:	2306      	movs	r3, #6
 800118c:	733b      	strb	r3, [r7, #12]
 800118e:	e012      	b.n	80011b6 <pec10_calc+0xc0>
  {
    /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 8001190:	89fb      	ldrh	r3, [r7, #14]
 8001192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <pec10_calc+0xb4>
    {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	81fb      	strh	r3, [r7, #14]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 80011a0:	89fa      	ldrh	r2, [r7, #14]
 80011a2:	893b      	ldrh	r3, [r7, #8]
 80011a4:	4053      	eors	r3, r2
 80011a6:	81fb      	strh	r3, [r7, #14]
 80011a8:	e002      	b.n	80011b0 <pec10_calc+0xba>
    }
    else
    {
            nRemainder = (uint16_t)((nRemainder << 1u));
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	81fb      	strh	r3, [r7, #14]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	733b      	strb	r3, [r7, #12]
 80011b6:	7b3b      	ldrb	r3, [r7, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1e9      	bne.n	8001190 <pec10_calc+0x9a>
    }
  }
    return ((uint16_t)(nRemainder & 0x3FFu));
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011c2:	b29b      	uxth	r3, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <cmd_68>:
//***************** Read and Write to SPI ****************
/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	4619      	mov	r1, r3
 80011ea:	2002      	movs	r0, #2
 80011ec:	f7ff fee2 	bl	8000fb4 <pec15_calc>
 80011f0:	4603      	mov	r3, r0
 80011f2:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	0a1b      	lsrs	r3, r3, #8
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80011fe:	89fb      	ldrh	r3, [r7, #14]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	72fb      	strb	r3, [r7, #11]
	wakeup_sleep(FEB_NUM_IC);
 8001204:	2001      	movs	r0, #1
 8001206:	f000 ffdf 	bl	80021c8 <wakeup_sleep>
	FEB_cs_low();
 800120a:	f001 f811 	bl	8002230 <FEB_cs_low>
	FEB_spi_write_array(4,cmd);
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	4619      	mov	r1, r3
 8001214:	2004      	movs	r0, #4
 8001216:	f001 f823 	bl	8002260 <FEB_spi_write_array>
	FEB_cs_high();
 800121a:	f001 f815 	bl	8002248 <FEB_cs_high>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <cmd_68_r>:
void cmd_68_r(uint8_t tx_cmd[2],uint8_t* data, uint8_t len) //The command to be transmitted
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	4613      	mov	r3, r2
 8001232:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	743b      	strb	r3, [r7, #16]
	cmd[1] =  tx_cmd[1];
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	747b      	strb	r3, [r7, #17]
	cmd_pec = pec15_calc(2, cmd);
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4619      	mov	r1, r3
 8001246:	2002      	movs	r0, #2
 8001248:	f7ff feb4 	bl	8000fb4 <pec15_calc>
 800124c:	4603      	mov	r3, r0
 800124e:	82fb      	strh	r3, [r7, #22]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001250:	8afb      	ldrh	r3, [r7, #22]
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	b29b      	uxth	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t)(cmd_pec);
 800125a:	8afb      	ldrh	r3, [r7, #22]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	74fb      	strb	r3, [r7, #19]
	wakeup_sleep(FEB_NUM_IC);
 8001260:	2001      	movs	r0, #1
 8001262:	f000 ffb1 	bl	80021c8 <wakeup_sleep>
	FEB_cs_low();
 8001266:	f000 ffe3 	bl	8002230 <FEB_cs_low>
	FEB_spi_write_read(cmd, 4, data, len);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f107 0010 	add.w	r0, r7, #16
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	2104      	movs	r1, #4
 8001274:	f001 f808 	bl	8002288 <FEB_spi_write_read>
	FEB_cs_high();
 8001278:	f000 ffe6 	bl	8002248 <FEB_cs_high>
}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	73fb      	strb	r3, [r7, #15]
	FEB_cs_low();
	FEB_spi_write_array(CMD_LEN, cmd);
	FEB_cs_high();

	free(cmd);*/
	 uint8_t BYTES_IN_REG = 6;
 8001292:	2306      	movs	r3, #6
 8001294:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	 uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3304      	adds	r3, #4
 80012a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	 uint16_t data_pec, cmd_pec;
	 uint8_t *cmd, copyArray[6], src_address = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	 uint8_t cmd_index;
	 cmd = (uint8_t *)calloc(CMD_LEN, sizeof(uint8_t));
 80012aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012ae:	2101      	movs	r1, #1
 80012b0:	4618      	mov	r0, r3
 80012b2:	f004 feed 	bl	8006090 <calloc>
 80012b6:	4603      	mov	r3, r0
 80012b8:	61fb      	str	r3, [r7, #28]
	 cmd[0] = tx_cmd[0];
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	781a      	ldrb	r2, [r3, #0]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	701a      	strb	r2, [r3, #0]
	 cmd[1] = tx_cmd[1];
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3301      	adds	r3, #1
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	7852      	ldrb	r2, [r2, #1]
 80012ca:	701a      	strb	r2, [r3, #0]
	 cmd_pec = pec15_calc(2, cmd);
 80012cc:	69f9      	ldr	r1, [r7, #28]
 80012ce:	2002      	movs	r0, #2
 80012d0:	f7ff fe70 	bl	8000fb4 <pec15_calc>
 80012d4:	4603      	mov	r3, r0
 80012d6:	837b      	strh	r3, [r7, #26]
	 cmd[2] = (uint8_t)(cmd_pec >> 8);
 80012d8:	8b7b      	ldrh	r3, [r7, #26]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29a      	uxth	r2, r3
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3302      	adds	r3, #2
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	701a      	strb	r2, [r3, #0]
	 cmd[3] = (uint8_t)(cmd_pec);
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3303      	adds	r3, #3
 80012ea:	8b7a      	ldrh	r2, [r7, #26]
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	701a      	strb	r2, [r3, #0]
	 cmd_index = 4;
 80012f0:	2304      	movs	r3, #4
 80012f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	 /* executes for each LTC68xx, this loops starts with the last IC on the stack */
	 for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) {
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80012fc:	e064      	b.n	80013c8 <write_68+0x144>
		 src_address = ((current_ic-1) * 6);
 80012fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001302:	461a      	mov	r2, r3
 8001304:	0052      	lsls	r2, r2, #1
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	3b06      	subs	r3, #6
 800130e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	     /* The first configuration written is received by the last IC in the daisy chain */
	     for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001312:	2300      	movs	r3, #0
 8001314:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001318:	e01d      	b.n	8001356 <write_68+0xd2>
	     {
	        cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 800131a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800131e:	1e5a      	subs	r2, r3, #1
 8001320:	4613      	mov	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	461a      	mov	r2, r3
 800132a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800132e:	4413      	add	r3, r2
 8001330:	461a      	mov	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	441a      	add	r2, r3
 8001336:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800133a:	69f9      	ldr	r1, [r7, #28]
 800133c:	440b      	add	r3, r1
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	701a      	strb	r2, [r3, #0]
	        cmd_index = cmd_index + 1;
 8001342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001346:	3301      	adds	r3, #1
 8001348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	     for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800134c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001350:	3301      	adds	r3, #1
 8001352:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001356:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800135a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800135e:	429a      	cmp	r2, r3
 8001360:	d3db      	bcc.n	800131a <write_68+0x96>
	      }
	     /* Copy each ic correspond data + pec value for calculate data pec */
	     memcpy(&copyArray[0], &data[src_address], 6); /* dst, src, size */
 8001362:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	18d1      	adds	r1, r2, r3
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	2206      	movs	r2, #6
 8001370:	4618      	mov	r0, r3
 8001372:	f005 fceb 	bl	8006d4c <memcpy>
	     /* calculating the PEC for each Ics configuration register data */
	     data_pec = (uint16_t)Pec10_calc(false, BYTES_IN_REG, &copyArray[0]);
 8001376:	f107 0210 	add.w	r2, r7, #16
 800137a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fe4b 	bl	800101c <Pec10_calc>
 8001386:	4603      	mov	r3, r0
 8001388:	833b      	strh	r3, [r7, #24]
	     cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 800138a:	8b3b      	ldrh	r3, [r7, #24]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	b299      	uxth	r1, r3
 8001390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	4413      	add	r3, r2
 8001398:	b2ca      	uxtb	r2, r1
 800139a:	701a      	strb	r2, [r3, #0]
	     cmd_index = cmd_index + 1;
 800139c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013a0:	3301      	adds	r3, #1
 80013a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	     cmd[cmd_index] = (uint8_t)data_pec;
 80013a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	4413      	add	r3, r2
 80013ae:	8b3a      	ldrh	r2, [r7, #24]
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	701a      	strb	r2, [r3, #0]
	     cmd_index = cmd_index + 1;
 80013b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013b8:	3301      	adds	r3, #1
 80013ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	 for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) {
 80013be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80013c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d196      	bne.n	80012fe <write_68+0x7a>
	 }
	 wakeup_sleep(FEB_NUM_IC);
 80013d0:	2001      	movs	r0, #1
 80013d2:	f000 fef9 	bl	80021c8 <wakeup_sleep>
	 FEB_cs_low();
 80013d6:	f000 ff2b 	bl	8002230 <FEB_cs_low>
	 FEB_spi_write_array(CMD_LEN, &cmd[0]);
 80013da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013de:	b29b      	uxth	r3, r3
 80013e0:	69f9      	ldr	r1, [r7, #28]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 ff3c 	bl	8002260 <FEB_spi_write_array>
	 FEB_cs_high();
 80013e8:	f000 ff2e 	bl	8002248 <FEB_cs_high>
	 free(cmd);
 80013ec:	69f8      	ldr	r0, [r7, #28]
 80013ee:	f005 f93d 	bl	800666c <free>
}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	@ 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <transmitCMDR>:
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
	cmd[1]=(cmdcode%0x100);//selects second byte
	cmd_68(cmd);
}
void transmitCMDR(uint16_t cmdcode,uint8_t*data,uint8_t len){
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	6039      	str	r1, [r7, #0]
 8001404:	80fb      	strh	r3, [r7, #6]
 8001406:	4613      	mov	r3, r2
 8001408:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	b29b      	uxth	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	733b      	strb	r3, [r7, #12]
	cmd[1]=(cmdcode%0x100);//selects second byte
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	737b      	strb	r3, [r7, #13]
	cmd_68_r(cmd,data,len);
 800141a:	797a      	ldrb	r2, [r7, #5]
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff feff 	bl	8001226 <cmd_68_r>
}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <transmitCMDW>:

void transmitCMDW(uint16_t cmdcode,uint8_t*data){
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	80fb      	strh	r3, [r7, #6]
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	b29b      	uxth	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	733b      	strb	r3, [r7, #12]
	cmd[1]=(cmdcode%0x100);//selects second byte
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	737b      	strb	r3, [r7, #13]
	write_68(FEB_NUM_IC,cmd,data);
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	2001      	movs	r0, #1
 8001456:	f7ff ff15 	bl	8001284 <write_68>
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	0000      	movs	r0, r0
 8001464:	0000      	movs	r0, r0
	...

08001468 <convert_voltage>:

static uint8_t get_sensor(uint8_t mux, uint8_t channel) {
	return mux * 8 + channel;
}

static float convert_voltage(int16_t raw_code) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
	return raw_code * 0.000150 + 1.5;
 8001472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f874 	bl	8000564 <__aeabi_i2d>
 800147c:	a30f      	add	r3, pc, #60	@ (adr r3, 80014bc <convert_voltage+0x54>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff f8d9 	bl	8000638 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <convert_voltage+0x50>)
 8001494:	f7fe ff1a 	bl	80002cc <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fba2 	bl	8000be8 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	ee07 3a90 	vmov	s15, r3
}
 80014aa:	eeb0 0a67 	vmov.f32	s0, s15
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	f3af 8000 	nop.w
 80014b8:	3ff80000 	.word	0x3ff80000
 80014bc:	30553261 	.word	0x30553261
 80014c0:	3f23a92a 	.word	0x3f23a92a

080014c4 <FEB_ADBMS_Init>:
	return voltage;
}
//TODO: Convert voltage to temperature
// ******************************** Functions ********************************

void FEB_ADBMS_Init() {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	FEB_cs_high();
 80014c8:	f000 febe 	bl	8002248 <FEB_cs_high>
	//if(FEB_PIN_RD(P_PB0))FEB_Siren_Activate();
	ADBMS6830B_init_cfg(FEB_NUM_IC, IC_Config);
 80014cc:	4908      	ldr	r1, [pc, #32]	@ (80014f0 <FEB_ADBMS_Init+0x2c>)
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 f9be 	bl	8001850 <ADBMS6830B_init_cfg>
	ADBMS6830B_reset_crc_count(FEB_NUM_IC, IC_Config);
 80014d4:	4906      	ldr	r1, [pc, #24]	@ (80014f0 <FEB_ADBMS_Init+0x2c>)
 80014d6:	2001      	movs	r0, #1
 80014d8:	f000 fa58 	bl	800198c <ADBMS6830B_reset_crc_count>
	ADBMS6830B_init_reg_limits(FEB_NUM_IC, IC_Config);
 80014dc:	4904      	ldr	r1, [pc, #16]	@ (80014f0 <FEB_ADBMS_Init+0x2c>)
 80014de:	2001      	movs	r0, #1
 80014e0:	f000 fac1 	bl	8001a66 <ADBMS6830B_init_reg_limits>
	ADBMS6830B_wrALL(FEB_NUM_IC, IC_Config);
 80014e4:	4902      	ldr	r1, [pc, #8]	@ (80014f0 <FEB_ADBMS_Init+0x2c>)
 80014e6:	2001      	movs	r0, #1
 80014e8:	f000 fd8e 	bl	8002008 <ADBMS6830B_wrALL>
	//ADBMS6830B_rdALL(FEB_NUM_IC, IC_Config);


}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200001f4 	.word	0x200001f4

080014f4 <FEB_ADBMS_Voltage_Process>:
#define POLL_RATE 4
int poll = POLL_RATE;

void FEB_ADBMS_Voltage_Process() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
	start_adc_cell_voltage_measurements();
 80014fa:	f000 f841 	bl	8001580 <start_adc_cell_voltage_measurements>
	read_cell_voltages();
 80014fe:	f000 f851 	bl	80015a4 <read_cell_voltages>
	store_cell_voltages();
 8001502:	f000 f85d 	bl	80015c0 <store_cell_voltages>
	validate_voltages();
 8001506:	f000 f8e3 	bl	80016d0 <validate_voltages>
	for(int icn =0;icn<FEB_NUM_IC;icn++)
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	e018      	b.n	8001542 <FEB_ADBMS_Voltage_Process+0x4e>
		IC_Config[icn].configa.tx_data[4]^=0x02;
 8001510:	4a18      	ldr	r2, [pc, #96]	@ (8001574 <FEB_ADBMS_Voltage_Process+0x80>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	4413      	add	r3, r2
 800151e:	3304      	adds	r3, #4
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	f083 0302 	eor.w	r3, r3, #2
 8001526:	b2d8      	uxtb	r0, r3
 8001528:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <FEB_ADBMS_Voltage_Process+0x80>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001530:	fb01 f303 	mul.w	r3, r1, r3
 8001534:	4413      	add	r3, r2
 8001536:	3304      	adds	r3, #4
 8001538:	4602      	mov	r2, r0
 800153a:	701a      	strb	r2, [r3, #0]
	for(int icn =0;icn<FEB_NUM_IC;icn++)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3301      	adds	r3, #1
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	dde3      	ble.n	8001510 <FEB_ADBMS_Voltage_Process+0x1c>
	ADBMS6830B_wrALL(FEB_NUM_IC, IC_Config);
 8001548:	490a      	ldr	r1, [pc, #40]	@ (8001574 <FEB_ADBMS_Voltage_Process+0x80>)
 800154a:	2001      	movs	r0, #1
 800154c:	f000 fd5c 	bl	8002008 <ADBMS6830B_wrALL>
	if(poll-- == 0){
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <FEB_ADBMS_Voltage_Process+0x84>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	1e5a      	subs	r2, r3, #1
 8001556:	4908      	ldr	r1, [pc, #32]	@ (8001578 <FEB_ADBMS_Voltage_Process+0x84>)
 8001558:	600a      	str	r2, [r1, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d105      	bne.n	800156a <FEB_ADBMS_Voltage_Process+0x76>
		FEB_ADBMS_UART_Transmit(&FEB_ACC);
 800155e:	4807      	ldr	r0, [pc, #28]	@ (800157c <FEB_ADBMS_Voltage_Process+0x88>)
 8001560:	f000 fec0 	bl	80022e4 <FEB_ADBMS_UART_Transmit>
		poll=POLL_RATE;
 8001564:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <FEB_ADBMS_Voltage_Process+0x84>)
 8001566:	2204      	movs	r2, #4
 8001568:	601a      	str	r2, [r3, #0]
	}

}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001f4 	.word	0x200001f4
 8001578:	20000000 	.word	0x20000000
 800157c:	20000300 	.word	0x20000300

08001580 <start_adc_cell_voltage_measurements>:
	}
}

// ******************************** Voltage ********************************

void start_adc_cell_voltage_measurements() {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af02      	add	r7, sp, #8
	ADBMS6830B_adcv(1, 0, 0, 0, OWVR);
 8001586:	2300      	movs	r3, #0
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2300      	movs	r3, #0
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	2001      	movs	r0, #1
 8001592:	f000 fabb 	bl	8001b0c <ADBMS6830B_adcv>
	HAL_Delay(5);
 8001596:	2005      	movs	r0, #5
 8001598:	f001 fdec 	bl	8003174 <HAL_Delay>
	//ADBMS6830B_pollAdc();
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <read_cell_voltages>:

void read_cell_voltages() {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	ADBMS6830B_rdcv(FEB_NUM_IC, IC_Config);
 80015a8:	4904      	ldr	r1, [pc, #16]	@ (80015bc <read_cell_voltages+0x18>)
 80015aa:	2001      	movs	r0, #1
 80015ac:	f000 fae4 	bl	8001b78 <ADBMS6830B_rdcv>
	ADBMS6830B_rdsv(FEB_NUM_IC, IC_Config);
 80015b0:	4902      	ldr	r1, [pc, #8]	@ (80015bc <read_cell_voltages+0x18>)
 80015b2:	2001      	movs	r0, #1
 80015b4:	f000 fc02 	bl	8001dbc <ADBMS6830B_rdsv>
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200001f4 	.word	0x200001f4

080015c0 <store_cell_voltages>:

void store_cell_voltages() {
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	FEB_ACC.total_voltage_V = 0;
 80015c6:	4b40      	ldr	r3, [pc, #256]	@ (80016c8 <store_cell_voltages+0x108>)
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	e071      	b.n	80016b8 <store_cell_voltages+0xf8>
		for(uint8_t ic =0; ic<FEB_NUM_ICPBANK;ic++){
 80015d4:	2300      	movs	r3, #0
 80015d6:	71bb      	strb	r3, [r7, #6]
 80015d8:	e068      	b.n	80016ac <store_cell_voltages+0xec>
			for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_IC; cell ++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	717b      	strb	r3, [r7, #5]
 80015de:	e05f      	b.n	80016a0 <store_cell_voltages+0xe0>
				float CVoltage = convert_voltage(IC_Config[ic+bank*FEB_NUM_ICPBANK].cells.c_codes[cell]);
 80015e0:	79ba      	ldrb	r2, [r7, #6]
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	441a      	add	r2, r3
 80015e6:	797b      	ldrb	r3, [r7, #5]
 80015e8:	4938      	ldr	r1, [pc, #224]	@ (80016cc <store_cell_voltages+0x10c>)
 80015ea:	2086      	movs	r0, #134	@ 0x86
 80015ec:	fb00 f202 	mul.w	r2, r0, r2
 80015f0:	4413      	add	r3, r2
 80015f2:	330c      	adds	r3, #12
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	440b      	add	r3, r1
 80015f8:	88db      	ldrh	r3, [r3, #6]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff33 	bl	8001468 <convert_voltage>
 8001602:	ed87 0a00 	vstr	s0, [r7]
				FEB_ACC.banks[bank].cells[cell+ic*FEB_NUM_CELLS_PER_IC].voltage_V = CVoltage;
 8001606:	79f9      	ldrb	r1, [r7, #7]
 8001608:	7978      	ldrb	r0, [r7, #5]
 800160a:	79ba      	ldrb	r2, [r7, #6]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4403      	add	r3, r0
 8001616:	482c      	ldr	r0, [pc, #176]	@ (80016c8 <store_cell_voltages+0x108>)
 8001618:	461a      	mov	r2, r3
 800161a:	0052      	lsls	r2, r2, #1
 800161c:	441a      	add	r2, r3
 800161e:	0093      	lsls	r3, r2, #2
 8001620:	461a      	mov	r2, r3
 8001622:	460b      	mov	r3, r1
 8001624:	019b      	lsls	r3, r3, #6
 8001626:	1a5b      	subs	r3, r3, r1
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	4403      	add	r3, r0
 800162e:	3388      	adds	r3, #136	@ 0x88
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	601a      	str	r2, [r3, #0]
				FEB_ACC.banks[bank].cells[cell+ic*FEB_NUM_CELLS_PER_IC].voltage_S = convert_voltage(IC_Config[ic+bank*FEB_NUM_ICPBANK].cells.s_codes[cell]);
 8001634:	79ba      	ldrb	r2, [r7, #6]
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	441a      	add	r2, r3
 800163a:	797b      	ldrb	r3, [r7, #5]
 800163c:	4923      	ldr	r1, [pc, #140]	@ (80016cc <store_cell_voltages+0x10c>)
 800163e:	2086      	movs	r0, #134	@ 0x86
 8001640:	fb00 f202 	mul.w	r2, r0, r2
 8001644:	4413      	add	r3, r2
 8001646:	331c      	adds	r3, #28
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	440b      	add	r3, r1
 800164c:	895b      	ldrh	r3, [r3, #10]
 800164e:	b218      	sxth	r0, r3
 8001650:	79fc      	ldrb	r4, [r7, #7]
 8001652:	7979      	ldrb	r1, [r7, #5]
 8001654:	79ba      	ldrb	r2, [r7, #6]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	18cd      	adds	r5, r1, r3
 8001660:	f7ff ff02 	bl	8001468 <convert_voltage>
 8001664:	eef0 7a40 	vmov.f32	s15, s0
 8001668:	4917      	ldr	r1, [pc, #92]	@ (80016c8 <store_cell_voltages+0x108>)
 800166a:	462a      	mov	r2, r5
 800166c:	0052      	lsls	r2, r2, #1
 800166e:	442a      	add	r2, r5
 8001670:	0093      	lsls	r3, r2, #2
 8001672:	461a      	mov	r2, r3
 8001674:	4623      	mov	r3, r4
 8001676:	019b      	lsls	r3, r3, #6
 8001678:	1b1b      	subs	r3, r3, r4
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	440b      	add	r3, r1
 8001680:	338c      	adds	r3, #140	@ 0x8c
 8001682:	edc3 7a00 	vstr	s15, [r3]
				FEB_ACC.total_voltage_V+=CVoltage;
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <store_cell_voltages+0x108>)
 8001688:	ed93 7a00 	vldr	s14, [r3]
 800168c:	edd7 7a00 	vldr	s15, [r7]
 8001690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <store_cell_voltages+0x108>)
 8001696:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_IC; cell ++) {
 800169a:	797b      	ldrb	r3, [r7, #5]
 800169c:	3301      	adds	r3, #1
 800169e:	717b      	strb	r3, [r7, #5]
 80016a0:	797b      	ldrb	r3, [r7, #5]
 80016a2:	2b09      	cmp	r3, #9
 80016a4:	d99c      	bls.n	80015e0 <store_cell_voltages+0x20>
		for(uint8_t ic =0; ic<FEB_NUM_ICPBANK;ic++){
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	3301      	adds	r3, #1
 80016aa:	71bb      	strb	r3, [r7, #6]
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d093      	beq.n	80015da <store_cell_voltages+0x1a>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	3301      	adds	r3, #1
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d08a      	beq.n	80015d4 <store_cell_voltages+0x14>
			}
		}

	}
}
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bdb0      	pop	{r4, r5, r7, pc}
 80016c8:	20000300 	.word	0x20000300
 80016cc:	200001f4 	.word	0x200001f4

080016d0 <validate_voltages>:

void validate_voltages() {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
	uint16_t vMax = FEB_Config_Get_Cell_Max_Voltage_mV();
 80016d6:	f000 fd9b 	bl	8002210 <FEB_Config_Get_Cell_Max_Voltage_mV>
 80016da:	4603      	mov	r3, r0
 80016dc:	81bb      	strh	r3, [r7, #12]
	uint16_t vMin = FEB_Config_Get_Cell_Min_Voltage_mV();
 80016de:	f000 fd87 	bl	80021f0 <FEB_Config_Get_Cell_Min_Voltage_mV>
 80016e2:	4603      	mov	r3, r0
 80016e4:	817b      	strh	r3, [r7, #10]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e027      	b.n	800173c <validate_voltages+0x6c>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_IC; cell ++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	73bb      	strb	r3, [r7, #14]
 80016f0:	e01e      	b.n	8001730 <validate_voltages+0x60>
			float voltage = FEB_ACC.banks[bank].cells[cell].voltage_V;
 80016f2:	7bf9      	ldrb	r1, [r7, #15]
 80016f4:	7bbb      	ldrb	r3, [r7, #14]
 80016f6:	4815      	ldr	r0, [pc, #84]	@ (800174c <validate_voltages+0x7c>)
 80016f8:	461a      	mov	r2, r3
 80016fa:	0052      	lsls	r2, r2, #1
 80016fc:	441a      	add	r2, r3
 80016fe:	0093      	lsls	r3, r2, #2
 8001700:	461a      	mov	r2, r3
 8001702:	460b      	mov	r3, r1
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	1a5b      	subs	r3, r3, r1
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	4403      	add	r3, r0
 800170e:	3388      	adds	r3, #136	@ 0x88
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	607b      	str	r3, [r7, #4]
			if (voltage > vMax || voltage < vMin) {
 8001714:	89bb      	ldrh	r3, [r7, #12]
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_IC; cell ++) {
 800172a:	7bbb      	ldrb	r3, [r7, #14]
 800172c:	3301      	adds	r3, #1
 800172e:	73bb      	strb	r3, [r7, #14]
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	2b09      	cmp	r3, #9
 8001734:	d9dd      	bls.n	80016f2 <validate_voltages+0x22>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	3301      	adds	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0d4      	beq.n	80016ec <validate_voltages+0x1c>
				//FEB_SM_Transition(FEB_SM_ST_FAULT_BMS);
			}
		}
	}
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000300 	.word	0x20000300

08001750 <SetOverVoltageThreshold>:
#include "FEB_ADBMS6830B_Driver.h"
#include "FEB_HW.h"
uint16_t SetOverVoltageThreshold(float voltage)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t vov_value;
  uint8_t rbits = 12;
 800175a:	230c      	movs	r3, #12
 800175c:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 800175e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001762:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001766:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800176a:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7fe ff0a 	bl	8000588 <__aeabi_f2d>
 8001774:	a314      	add	r3, pc, #80	@ (adr r3, 80017c8 <SetOverVoltageThreshold+0x78>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7ff f887 	bl	800088c <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fa2f 	bl	8000be8 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
 800178c:	607b      	str	r3, [r7, #4]
  vov_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	3b01      	subs	r3, #1
 8001792:	2202      	movs	r2, #2
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	ee07 3a90 	vmov	s15, r3
 800179c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ac:	ee17 3a90 	vmov	r3, s15
 80017b0:	81bb      	strh	r3, [r7, #12]
  vov_value &= 0xFFF;
 80017b2:	89bb      	ldrh	r3, [r7, #12]
 80017b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b8:	81bb      	strh	r3, [r7, #12]
  return vov_value;
 80017ba:	89bb      	ldrh	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	f3af 8000 	nop.w
 80017c8:	30553261 	.word	0x30553261
 80017cc:	3f63a92a 	.word	0x3f63a92a

080017d0 <SetUnderVoltageThreshold>:
uint16_t SetUnderVoltageThreshold(float voltage)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t vuv_value;
  uint8_t rbits = 12;
 80017da:	230c      	movs	r3, #12
 80017dc:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 80017de:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e2:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80017e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017ea:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7fe feca 	bl	8000588 <__aeabi_f2d>
 80017f4:	a314      	add	r3, pc, #80	@ (adr r3, 8001848 <SetUnderVoltageThreshold+0x78>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7ff f847 	bl	800088c <__aeabi_ddiv>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f9ef 	bl	8000be8 <__aeabi_d2f>
 800180a:	4603      	mov	r3, r0
 800180c:	607b      	str	r3, [r7, #4]
  vuv_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	3b01      	subs	r3, #1
 8001812:	2202      	movs	r2, #2
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001820:	edd7 7a01 	vldr	s15, [r7, #4]
 8001824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800182c:	ee17 3a90 	vmov	r3, s15
 8001830:	81bb      	strh	r3, [r7, #12]
  vuv_value &= 0xFFF;
 8001832:	89bb      	ldrh	r3, [r7, #12]
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	81bb      	strh	r3, [r7, #12]
  return vuv_value;
 800183a:	89bb      	ldrh	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	f3af 8000 	nop.w
 8001848:	30553261 	.word	0x30553261
 800184c:	3f63a92a 	.word	0x3f63a92a

08001850 <ADBMS6830B_init_cfg>:
/* Helper function to initialize CFG variables */
void ADBMS6830B_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
	  for(uint8_t cic = 0; cic < total_ic; cic++)
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e088      	b.n	8001974 <ADBMS6830B_init_cfg+0x124>
	  {
	    /* Init config A */
	    ic[cic].configa.tx_data[0] = 0x83; //REFON | | CTH[3]
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	4413      	add	r3, r2
 8001870:	2283      	movs	r2, #131	@ 0x83
 8001872:	701a      	strb	r2, [r3, #0]
	    ic[cic].configa.tx_data[1] = 0x01; //FLAGS
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	4413      	add	r3, r2
 8001882:	2201      	movs	r2, #1
 8001884:	705a      	strb	r2, [r3, #1]
	    ic[cic].configa.tx_data[2] = 0x00;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	4413      	add	r3, r2
 8001894:	2200      	movs	r2, #0
 8001896:	709a      	strb	r2, [r3, #2]
	    ic[cic].configa.tx_data[3] = 0x00; //GPIO
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	2200      	movs	r2, #0
 80018a8:	70da      	strb	r2, [r3, #3]
	    ic[cic].configa.tx_data[4] = 0x00;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	2200      	movs	r2, #0
 80018ba:	711a      	strb	r2, [r3, #4]
	    ic[cic].configa.tx_data[5] = 0x00;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	2200      	movs	r2, #0
 80018cc:	715a      	strb	r2, [r3, #5]
	    uint16_t VOVCode = SetOverVoltageThreshold(3.2);
 80018ce:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8001988 <ADBMS6830B_init_cfg+0x138>
 80018d2:	f7ff ff3d 	bl	8001750 <SetOverVoltageThreshold>
 80018d6:	4603      	mov	r3, r0
 80018d8:	81bb      	strh	r3, [r7, #12]
	    uint16_t VUVCode = SetUnderVoltageThreshold(2.0);
 80018da:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80018de:	f7ff ff77 	bl	80017d0 <SetUnderVoltageThreshold>
 80018e2:	4603      	mov	r3, r0
 80018e4:	817b      	strh	r3, [r7, #10]
	    ic[cic].configb.tx_data[0] = VUVCode;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	897a      	ldrh	r2, [r7, #10]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	73da      	strb	r2, [r3, #15]
	    ic[cic].configb.tx_data[1] = (((VOVCode & 0x000F) << 4) | ((VUVCode ) >> 8));
 80018fa:	89bb      	ldrh	r3, [r7, #12]
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	b25a      	sxtb	r2, r3
 8001902:	897b      	ldrh	r3, [r7, #10]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	b29b      	uxth	r3, r3
 8001908:	b25b      	sxtb	r3, r3
 800190a:	4313      	orrs	r3, r2
 800190c:	b259      	sxtb	r1, r3
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001914:	fb02 f303 	mul.w	r3, r2, r3
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	4413      	add	r3, r2
 800191c:	b2ca      	uxtb	r2, r1
 800191e:	741a      	strb	r2, [r3, #16]
	    ic[cic].configb.tx_data[2] = ((VOVCode>>4)&0x0FF);
 8001920:	89bb      	ldrh	r3, [r7, #12]
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	b299      	uxth	r1, r3
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	4413      	add	r3, r2
 8001934:	b2ca      	uxtb	r2, r1
 8001936:	745a      	strb	r2, [r3, #17]
	    ic[cic].configb.tx_data[3] = 0xFF;
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	4413      	add	r3, r2
 8001946:	22ff      	movs	r2, #255	@ 0xff
 8001948:	749a      	strb	r2, [r3, #18]
	    ic[cic].configb.tx_data[4] = 0x00;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	2200      	movs	r2, #0
 800195a:	74da      	strb	r2, [r3, #19]
	    ic[cic].configb.tx_data[4] = 0x00;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	4413      	add	r3, r2
 800196a:	2200      	movs	r2, #0
 800196c:	74da      	strb	r2, [r3, #19]
	  for(uint8_t cic = 0; cic < total_ic; cic++)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	3301      	adds	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	429a      	cmp	r2, r3
 800197a:	f4ff af72 	bcc.w	8001862 <ADBMS6830B_init_cfg+0x12>
	  }
}
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	404ccccd 	.word	0x404ccccd

0800198c <ADBMS6830B_reset_crc_count>:

/* Helper Function to reset PEC counters */
void ADBMS6830B_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e058      	b.n	8001a50 <ADBMS6830B_reset_crc_count+0xc4>
	{
		ic[current_ic].crc_count.pec_count = 0;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	2200      	movs	r2, #0
 80019ae:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
		ic[current_ic].crc_count.cfgr_pec = 0;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80019b8:	fb02 f303 	mul.w	r3, r2, r3
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	2200      	movs	r2, #0
 80019c2:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		for (int i=0; i<6; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e00f      	b.n	80019ec <ADBMS6830B_reset_crc_count+0x60>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	441a      	add	r2, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	3370      	adds	r3, #112	@ 0x70
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	2200      	movs	r2, #0
 80019e4:	815a      	strh	r2, [r3, #10]
		for (int i=0; i<6; i++)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	3301      	adds	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	ddec      	ble.n	80019cc <ADBMS6830B_reset_crc_count+0x40>

		}
		for (int i=0; i<4; i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	e00f      	b.n	8001a18 <ADBMS6830B_reset_crc_count+0x8c>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	441a      	add	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3378      	adds	r3, #120	@ 0x78
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	2200      	movs	r2, #0
 8001a10:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<4; i++)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3301      	adds	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	ddec      	ble.n	80019f8 <ADBMS6830B_reset_crc_count+0x6c>
		}
		for (int i=0; i<2; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	e00f      	b.n	8001a44 <ADBMS6830B_reset_crc_count+0xb8>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	441a      	add	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	337c      	adds	r3, #124	@ 0x7c
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<2; i++)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	3301      	adds	r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	ddec      	ble.n	8001a24 <ADBMS6830B_reset_crc_count+0x98>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dba2      	blt.n	800199e <ADBMS6830B_reset_crc_count+0x12>
		}
	}
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <ADBMS6830B_init_reg_limits>:

/* Initialize the Register limits */
void ADBMS6830B_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	6039      	str	r1, [r7, #0]
 8001a70:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e03e      	b.n	8001af6 <ADBMS6830B_init_reg_limits+0x90>
    ic[cic].ic_reg.cell_channels = 20;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	2214      	movs	r2, #20
 8001a88:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
    ic[cic].ic_reg.stat_channels = 4; //Doesn't matter?
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
    ic[cic].ic_reg.aux_channels = 6; //Doesn't matter?
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	2206      	movs	r2, #6
 8001ab0:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    ic[cic].ic_reg.num_cv_reg = 6;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	2206      	movs	r2, #6
 8001ac4:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
    ic[cic].ic_reg.num_gpio_reg = 4;
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
    ic[cic].ic_reg.num_stat_reg = 5;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	4413      	add	r3, r2
 8001aea:	2205      	movs	r2, #5
 8001aec:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	3301      	adds	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d3bc      	bcc.n	8001a78 <ADBMS6830B_init_reg_limits+0x12>
  }
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <ADBMS6830B_adcv>:
				   uint8_t DCP, //Discharge Permit
				   uint8_t CONT, //Cell Channels to be measured
				   uint8_t RSTF, //Reset Filter
				   uint8_t OW //Open-wire bits
                 )
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4604      	mov	r4, r0
 8001b14:	4608      	mov	r0, r1
 8001b16:	4611      	mov	r1, r2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71bb      	strb	r3, [r7, #6]
 8001b22:	460b      	mov	r3, r1
 8001b24:	717b      	strb	r3, [r7, #5]
 8001b26:	4613      	mov	r3, r2
 8001b28:	713b      	strb	r3, [r7, #4]
	uint8_t cmd[2];

	cmd[0] = 0x02 + RD;
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x60 | (CONT << 7) | (DCP << 4) | (RSTF << 2) | OW;
 8001b32:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b36:	01db      	lsls	r3, r3, #7
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b3e:	b25a      	sxtb	r2, r3
 8001b40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b25a      	sxtb	r2, r3
 8001b4c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	4313      	orrs	r3, r2
 8001b56:	b25a      	sxtb	r2, r3
 8001b58:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	b25b      	sxtb	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	737b      	strb	r3, [r7, #13]
	cmd_68(cmd);
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fb31 	bl	80011d0 <cmd_68>
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd90      	pop	{r4, r7, pc}
	...

08001b78 <ADBMS6830B_rdcv>:
*/

uint8_t ADBMS6830B_rdcv(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 8001b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b7c:	b08f      	sub	sp, #60	@ 0x3c
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	6039      	str	r1, [r7, #0]
 8001b84:	71fb      	strb	r3, [r7, #7]
 8001b86:	466b      	mov	r3, sp
 8001b88:	461e      	mov	r6, r3
	int16_t c_data_pec=pec10_calc(TxSize-2,cell_data);
	int16_t c_rx_pec=*(uint16_t*)(cell_data+TxSize-2);

	return(c_data_pec!=c_rx_pec);
#else
	uint8_t errorCount = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t TxSize = 8;
 8001b90:	2308      	movs	r3, #8
 8001b92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t cell_data[TxSize*total_ic];
 8001b96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b9a:	79fa      	ldrb	r2, [r7, #7]
 8001b9c:	fb02 f103 	mul.w	r1, r2, r3
 8001ba0:	1e4b      	subs	r3, r1, #1
 8001ba2:	623b      	str	r3, [r7, #32]
 8001ba4:	460a      	mov	r2, r1
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	4690      	mov	r8, r2
 8001baa:	4699      	mov	r9, r3
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bc0:	460a      	mov	r2, r1
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	461d      	mov	r5, r3
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	00eb      	lsls	r3, r5, #3
 8001bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bd6:	00e2      	lsls	r2, r4, #3
 8001bd8:	460b      	mov	r3, r1
 8001bda:	3307      	adds	r3, #7
 8001bdc:	08db      	lsrs	r3, r3, #3
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	ebad 0d03 	sub.w	sp, sp, r3
 8001be4:	466b      	mov	r3, sp
 8001be6:	3300      	adds	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
	uint16_t codes[6]={
 8001bea:	4a73      	ldr	r2, [pc, #460]	@ (8001db8 <ADBMS6830B_rdcv+0x240>)
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			RDCVC,
			RDCVD,
			RDCVE,
			RDCVF
	};
	for(int REGGRP=0;REGGRP<6;REGGRP++){
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bfa:	e0d1      	b.n	8001da0 <ADBMS6830B_rdcv+0x228>
		wakeup_sleep(FEB_NUM_IC);
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f000 fae3 	bl	80021c8 <wakeup_sleep>
		transmitCMDR(codes[REGGRP],cell_data,TxSize*total_ic);
 8001c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	3338      	adds	r3, #56	@ 0x38
 8001c08:	443b      	add	r3, r7
 8001c0a:	f833 0c30 	ldrh.w	r0, [r3, #-48]
 8001c0e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	fb12 f303 	smulbb	r3, r2, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	69f9      	ldr	r1, [r7, #28]
 8001c1e:	f7ff fbec 	bl	80013fa <transmitCMDR>
		uint8_t bytesInGroup = (REGGRP==5)?2:6;
 8001c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d101      	bne.n	8001c2c <ADBMS6830B_rdcv+0xb4>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e000      	b.n	8001c2e <ADBMS6830B_rdcv+0xb6>
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	76fb      	strb	r3, [r7, #27]
		for(int icn=0;icn<total_ic;icn++){
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c34:	e090      	b.n	8001d58 <ADBMS6830B_rdcv+0x1e0>
			for(int byte=0;byte<bytesInGroup;byte++){
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c3a:	e085      	b.n	8001d48 <ADBMS6830B_rdcv+0x1d0>
				if(byte%2==0){
 8001c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d148      	bne.n	8001cd8 <ADBMS6830B_rdcv+0x160>
					ic[icn].cells.c_codes[byte/2+3*REGGRP] = 0;
 8001c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c48:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	18d1      	adds	r1, r2, r3
 8001c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c56:	0fda      	lsrs	r2, r3, #31
 8001c58:	4413      	add	r3, r2
 8001c5a:	105b      	asrs	r3, r3, #1
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	4403      	add	r3, r0
 8001c68:	330c      	adds	r3, #12
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	440b      	add	r3, r1
 8001c6e:	2200      	movs	r2, #0
 8001c70:	80da      	strh	r2, [r3, #6]
					ic[icn].cells.c_codes[byte/2+3*REGGRP] |= cell_data[byte+TxSize*icn];
 8001c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c74:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	18d0      	adds	r0, r2, r3
 8001c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c82:	0fda      	lsrs	r2, r3, #31
 8001c84:	4413      	add	r3, r2
 8001c86:	105b      	asrs	r3, r3, #1
 8001c88:	461a      	mov	r2, r3
 8001c8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	440b      	add	r3, r1
 8001c92:	4413      	add	r3, r2
 8001c94:	330c      	adds	r3, #12
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4403      	add	r3, r0
 8001c9a:	88dc      	ldrh	r4, [r3, #6]
 8001c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ca2:	fb03 f101 	mul.w	r1, r3, r1
 8001ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca8:	440b      	add	r3, r1
 8001caa:	69f9      	ldr	r1, [r7, #28]
 8001cac:	5ccb      	ldrb	r3, [r1, r3]
 8001cae:	461d      	mov	r5, r3
 8001cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb2:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	6839      	ldr	r1, [r7, #0]
 8001cbc:	18c8      	adds	r0, r1, r3
 8001cbe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	440b      	add	r3, r1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	ea44 0205 	orr.w	r2, r4, r5
 8001ccc:	b292      	uxth	r2, r2
 8001cce:	330c      	adds	r3, #12
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4403      	add	r3, r0
 8001cd4:	80da      	strh	r2, [r3, #6]
 8001cd6:	e034      	b.n	8001d42 <ADBMS6830B_rdcv+0x1ca>
				} else {
					ic[icn].cells.c_codes[byte/2+3*REGGRP] |= cell_data[byte+TxSize*icn]<<8;
 8001cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cda:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	18d0      	adds	r0, r2, r3
 8001ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce8:	0fda      	lsrs	r2, r3, #31
 8001cea:	4413      	add	r3, r2
 8001cec:	105b      	asrs	r3, r3, #1
 8001cee:	461a      	mov	r2, r3
 8001cf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	440b      	add	r3, r1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4403      	add	r3, r0
 8001d00:	88db      	ldrh	r3, [r3, #6]
 8001d02:	b219      	sxth	r1, r3
 8001d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001d0a:	fb03 f000 	mul.w	r0, r3, r0
 8001d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d10:	4403      	add	r3, r0
 8001d12:	69f8      	ldr	r0, [r7, #28]
 8001d14:	5cc3      	ldrb	r3, [r0, r3]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	b21c      	sxth	r4, r3
 8001d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d22:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	6839      	ldr	r1, [r7, #0]
 8001d2c:	18c8      	adds	r0, r1, r3
 8001d2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d30:	460b      	mov	r3, r1
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	440b      	add	r3, r1
 8001d36:	4413      	add	r3, r2
 8001d38:	b2a2      	uxth	r2, r4
 8001d3a:	330c      	adds	r3, #12
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4403      	add	r3, r0
 8001d40:	80da      	strh	r2, [r3, #6]
			for(int byte=0;byte<bytesInGroup;byte++){
 8001d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d44:	3301      	adds	r3, #1
 8001d46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d48:	7efb      	ldrb	r3, [r7, #27]
 8001d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	f6ff af75 	blt.w	8001c3c <ADBMS6830B_rdcv+0xc4>
		for(int icn=0;icn<total_ic;icn++){
 8001d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d54:	3301      	adds	r3, #1
 8001d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f6ff af6a 	blt.w	8001c36 <ADBMS6830B_rdcv+0xbe>
				}
			}

		}
		int16_t c_data_pec=pec10_calc(TxSize-2,cell_data);
 8001d62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d66:	3b02      	subs	r3, #2
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	69f9      	ldr	r1, [r7, #28]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f9c2 	bl	80010f6 <pec10_calc>
 8001d72:	4603      	mov	r3, r0
 8001d74:	833b      	strh	r3, [r7, #24]
		int16_t c_rx_pec=*(uint16_t*)(cell_data+TxSize-2);
 8001d76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d7a:	3b02      	subs	r3, #2
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	4413      	add	r3, r2
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	82fb      	strh	r3, [r7, #22]
		if(c_data_pec!=c_rx_pec)errorCount++;
 8001d84:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001d88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d004      	beq.n	8001d9a <ADBMS6830B_rdcv+0x222>
 8001d90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d94:	3301      	adds	r3, #1
 8001d96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	for(int REGGRP=0;REGGRP<6;REGGRP++){
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	f77f af2a 	ble.w	8001bfc <ADBMS6830B_rdcv+0x84>
	}
	return errorCount;
 8001da8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001dac:	46b5      	mov	sp, r6
#endif

}
 8001dae:	4618      	mov	r0, r3
 8001db0:	373c      	adds	r7, #60	@ 0x3c
 8001db2:	46bd      	mov	sp, r7
 8001db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001db8:	08008d60 	.word	0x08008d60

08001dbc <ADBMS6830B_rdsv>:

uint8_t ADBMS6830B_rdsv(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 8001dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dc0:	b08f      	sub	sp, #60	@ 0x3c
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	6039      	str	r1, [r7, #0]
 8001dc8:	71fb      	strb	r3, [r7, #7]
 8001dca:	466b      	mov	r3, sp
 8001dcc:	461e      	mov	r6, r3
	uint16_t data_pec=pec10_calc(32,cell_data);
	uint16_t rx_pec=*(uint16_t*)(cell_data+32);

	return(data_pec!=rx_pec);
#else
	uint8_t errorCount = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t TxSize = 8;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t cell_data[TxSize*total_ic];
 8001dda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dde:	79fa      	ldrb	r2, [r7, #7]
 8001de0:	fb02 f103 	mul.w	r1, r2, r3
 8001de4:	1e4b      	subs	r3, r1, #1
 8001de6:	623b      	str	r3, [r7, #32]
 8001de8:	460a      	mov	r2, r1
 8001dea:	2300      	movs	r3, #0
 8001dec:	4690      	mov	r8, r2
 8001dee:	4699      	mov	r9, r3
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e04:	460a      	mov	r2, r1
 8001e06:	2300      	movs	r3, #0
 8001e08:	4614      	mov	r4, r2
 8001e0a:	461d      	mov	r5, r3
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	00eb      	lsls	r3, r5, #3
 8001e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e1a:	00e2      	lsls	r2, r4, #3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	3307      	adds	r3, #7
 8001e20:	08db      	lsrs	r3, r3, #3
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	ebad 0d03 	sub.w	sp, sp, r3
 8001e28:	466b      	mov	r3, sp
 8001e2a:	3300      	adds	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
	uint16_t codes[6]={
 8001e2e:	4a75      	ldr	r2, [pc, #468]	@ (8002004 <ADBMS6830B_rdsv+0x248>)
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			RDSVC,
			RDSVD,
			RDSVE,
			RDSVF
	};
	for(int REGGRP=0;REGGRP<6;REGGRP++){
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e3e:	e0d4      	b.n	8001fea <ADBMS6830B_rdsv+0x22e>
		wakeup_sleep(FEB_NUM_IC);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f000 f9c1 	bl	80021c8 <wakeup_sleep>
		transmitCMDR(codes[REGGRP],cell_data,TxSize*total_ic);
 8001e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	3338      	adds	r3, #56	@ 0x38
 8001e4c:	443b      	add	r3, r7
 8001e4e:	f833 0c30 	ldrh.w	r0, [r3, #-48]
 8001e52:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	fb12 f303 	smulbb	r3, r2, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	69f9      	ldr	r1, [r7, #28]
 8001e62:	f7ff faca 	bl	80013fa <transmitCMDR>
		uint8_t bytesInGroup = (REGGRP==5)?2:6;
 8001e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d101      	bne.n	8001e70 <ADBMS6830B_rdsv+0xb4>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e000      	b.n	8001e72 <ADBMS6830B_rdsv+0xb6>
 8001e70:	2306      	movs	r3, #6
 8001e72:	76fb      	strb	r3, [r7, #27]
		for(int icn=0;icn<total_ic;icn++){
 8001e74:	2300      	movs	r3, #0
 8001e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e78:	e090      	b.n	8001f9c <ADBMS6830B_rdsv+0x1e0>
			for(int byte=0;byte<bytesInGroup;byte++){
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e7e:	e085      	b.n	8001f8c <ADBMS6830B_rdsv+0x1d0>
				if(byte%2==0){
 8001e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d148      	bne.n	8001f1c <ADBMS6830B_rdsv+0x160>
					ic[icn].cells.s_codes[byte/2+3*REGGRP] = 0;
 8001e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	18d1      	adds	r1, r2, r3
 8001e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e9a:	0fda      	lsrs	r2, r3, #31
 8001e9c:	4413      	add	r3, r2
 8001e9e:	105b      	asrs	r3, r3, #1
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4403      	add	r3, r0
 8001eac:	331c      	adds	r3, #28
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	440b      	add	r3, r1
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	815a      	strh	r2, [r3, #10]
					ic[icn].cells.s_codes[byte/2+3*REGGRP] |= cell_data[byte+TxSize*icn];
 8001eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001ebc:	fb02 f303 	mul.w	r3, r2, r3
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	18d0      	adds	r0, r2, r3
 8001ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec6:	0fda      	lsrs	r2, r3, #31
 8001ec8:	4413      	add	r3, r2
 8001eca:	105b      	asrs	r3, r3, #1
 8001ecc:	461a      	mov	r2, r3
 8001ece:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	440b      	add	r3, r1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	331c      	adds	r3, #28
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4403      	add	r3, r0
 8001ede:	895c      	ldrh	r4, [r3, #10]
 8001ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ee4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ee6:	fb03 f101 	mul.w	r1, r3, r1
 8001eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eec:	440b      	add	r3, r1
 8001eee:	69f9      	ldr	r1, [r7, #28]
 8001ef0:	5ccb      	ldrb	r3, [r1, r3]
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001efa:	fb01 f303 	mul.w	r3, r1, r3
 8001efe:	6839      	ldr	r1, [r7, #0]
 8001f00:	18c8      	adds	r0, r1, r3
 8001f02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f04:	460b      	mov	r3, r1
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	440b      	add	r3, r1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	ea44 0205 	orr.w	r2, r4, r5
 8001f10:	b292      	uxth	r2, r2
 8001f12:	331c      	adds	r3, #28
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4403      	add	r3, r0
 8001f18:	815a      	strh	r2, [r3, #10]
 8001f1a:	e034      	b.n	8001f86 <ADBMS6830B_rdsv+0x1ca>
				} else {
					ic[icn].cells.s_codes[byte/2+3*REGGRP] |= cell_data[byte+TxSize*icn]<<8;
 8001f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f1e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	18d0      	adds	r0, r2, r3
 8001f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f2c:	0fda      	lsrs	r2, r3, #31
 8001f2e:	4413      	add	r3, r2
 8001f30:	105b      	asrs	r3, r3, #1
 8001f32:	461a      	mov	r2, r3
 8001f34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f36:	460b      	mov	r3, r1
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	440b      	add	r3, r1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	331c      	adds	r3, #28
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4403      	add	r3, r0
 8001f44:	895b      	ldrh	r3, [r3, #10]
 8001f46:	b219      	sxth	r1, r3
 8001f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f4e:	fb03 f000 	mul.w	r0, r3, r0
 8001f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f54:	4403      	add	r3, r0
 8001f56:	69f8      	ldr	r0, [r7, #28]
 8001f58:	5cc3      	ldrb	r3, [r0, r3]
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	430b      	orrs	r3, r1
 8001f62:	b21c      	sxth	r4, r3
 8001f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f66:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	6839      	ldr	r1, [r7, #0]
 8001f70:	18c8      	adds	r0, r1, r3
 8001f72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f74:	460b      	mov	r3, r1
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	440b      	add	r3, r1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	b2a2      	uxth	r2, r4
 8001f7e:	331c      	adds	r3, #28
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4403      	add	r3, r0
 8001f84:	815a      	strh	r2, [r3, #10]
			for(int byte=0;byte<bytesInGroup;byte++){
 8001f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f88:	3301      	adds	r3, #1
 8001f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f8c:	7efb      	ldrb	r3, [r7, #27]
 8001f8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f90:	429a      	cmp	r2, r3
 8001f92:	f6ff af75 	blt.w	8001e80 <ADBMS6830B_rdsv+0xc4>
		for(int icn=0;icn<total_ic;icn++){
 8001f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f98:	3301      	adds	r3, #1
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f6ff af6a 	blt.w	8001e7a <ADBMS6830B_rdsv+0xbe>
				}
			}

		}
		int16_t c_data_pec=pec10_calc(TxSize-2,cell_data);
 8001fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001faa:	3b02      	subs	r3, #2
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	69f9      	ldr	r1, [r7, #28]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff f8a0 	bl	80010f6 <pec10_calc>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	833b      	strh	r3, [r7, #24]
		int16_t c_rx_pec=*(uint16_t*)(cell_data+TxSize-2);
 8001fba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fbe:	3b02      	subs	r3, #2
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	82fb      	strh	r3, [r7, #22]
		if(c_data_pec!=c_rx_pec)errorCount++;
 8001fc8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001fcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d004      	beq.n	8001fde <ADBMS6830B_rdsv+0x222>
 8001fd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		HAL_Delay(1);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f001 f8c8 	bl	8003174 <HAL_Delay>
	for(int REGGRP=0;REGGRP<6;REGGRP++){
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	f77f af27 	ble.w	8001e40 <ADBMS6830B_rdsv+0x84>
	}
	return errorCount;
 8001ff2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ff6:	46b5      	mov	sp, r6
#endif
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	373c      	adds	r7, #60	@ 0x3c
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002002:	bf00      	nop
 8002004:	08008d6c 	.word	0x08008d6c

08002008 <ADBMS6830B_wrALL>:
// ******************************** Temperature ********************************
void ADBMS6830B_wrALL(uint8_t total_ic, //The number of ICs being written to
                      cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                     )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
	wakeup_sleep(total_ic);
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f8d6 	bl	80021c8 <wakeup_sleep>
	ADBMS6830B_wrcfga(total_ic, ic);
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f80d 	bl	8002040 <ADBMS6830B_wrcfga>
	wakeup_sleep(total_ic);
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f8cd 	bl	80021c8 <wakeup_sleep>
	ADBMS6830B_wrcfgb(total_ic, ic);
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	6839      	ldr	r1, [r7, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f86a 	bl	800210c <ADBMS6830B_wrcfgb>
	//wakeup_sleep(total_ic);
	//ADBMS6830B_wrpwmga(total_ic, ic);
	//wakeup_sleep(total_ic);
	//ADBMS6830B_wrpwmgb(total_ic, ic);
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <ADBMS6830B_wrcfga>:
}
/* Write the ADBMS6830B CFGRA */
void ADBMS6830B_wrcfga(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8002040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002044:	b087      	sub	sp, #28
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	6039      	str	r1, [r7, #0]
 800204c:	71fb      	strb	r3, [r7, #7]
 800204e:	466b      	mov	r3, sp
 8002050:	461e      	mov	r6, r3
	uint8_t write_buffer[total_ic*6];
 8002052:	79fa      	ldrb	r2, [r7, #7]
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4619      	mov	r1, r3
 800205e:	1e4b      	subs	r3, r1, #1
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	460a      	mov	r2, r1
 8002064:	2300      	movs	r3, #0
 8002066:	4690      	mov	r8, r2
 8002068:	4699      	mov	r9, r3
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800207a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800207e:	460a      	mov	r2, r1
 8002080:	2300      	movs	r3, #0
 8002082:	4614      	mov	r4, r2
 8002084:	461d      	mov	r5, r3
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	00eb      	lsls	r3, r5, #3
 8002090:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002094:	00e2      	lsls	r2, r4, #3
 8002096:	460b      	mov	r3, r1
 8002098:	3307      	adds	r3, #7
 800209a:	08db      	lsrs	r3, r3, #3
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	ebad 0d03 	sub.w	sp, sp, r3
 80020a2:	466b      	mov	r3, sp
 80020a4:	3300      	adds	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
	uint8_t write_count = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	75fb      	strb	r3, [r7, #23]
	uint8_t c_ic = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	72fb      	strb	r3, [r7, #11]
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	75bb      	strb	r3, [r7, #22]
 80020b4:	e01c      	b.n	80020f0 <ADBMS6830B_wrcfga+0xb0>
	{
		c_ic = current_ic;
 80020b6:	7dbb      	ldrb	r3, [r7, #22]
 80020b8:	72fb      	strb	r3, [r7, #11]
		for (uint8_t data = 0; data<6; data++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	757b      	strb	r3, [r7, #21]
 80020be:	e011      	b.n	80020e4 <ADBMS6830B_wrcfga+0xa4>
		{
			write_buffer[write_count] = ic[c_ic].configa.tx_data[data];
 80020c0:	7afb      	ldrb	r3, [r7, #11]
 80020c2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	18d1      	adds	r1, r2, r3
 80020ce:	7d7a      	ldrb	r2, [r7, #21]
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	5c89      	ldrb	r1, [r1, r2]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	54d1      	strb	r1, [r2, r3]
			write_count++;
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	3301      	adds	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
		for (uint8_t data = 0; data<6; data++)
 80020de:	7d7b      	ldrb	r3, [r7, #21]
 80020e0:	3301      	adds	r3, #1
 80020e2:	757b      	strb	r3, [r7, #21]
 80020e4:	7d7b      	ldrb	r3, [r7, #21]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d9ea      	bls.n	80020c0 <ADBMS6830B_wrcfga+0x80>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 80020ea:	7dbb      	ldrb	r3, [r7, #22]
 80020ec:	3301      	adds	r3, #1
 80020ee:	75bb      	strb	r3, [r7, #22]
 80020f0:	7dba      	ldrb	r2, [r7, #22]
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d3de      	bcc.n	80020b6 <ADBMS6830B_wrcfga+0x76>
		}
	}

	transmitCMDW(WRCFGA,write_buffer);
 80020f8:	68f9      	ldr	r1, [r7, #12]
 80020fa:	2001      	movs	r0, #1
 80020fc:	f7ff f998 	bl	8001430 <transmitCMDW>
 8002100:	46b5      	mov	sp, r6
}
 8002102:	bf00      	nop
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800210c <ADBMS6830B_wrcfgb>:
}
/* Write the ADBMS6830B CFGRB */
void ADBMS6830B_wrcfgb(uint8_t total_ic, //The number of ICs being written to
                    cell_asic ic[] // A two dimensional array of the configuration data that will be written
                   )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0c4      	sub	sp, #272	@ 0x110
 8002110:	af00      	add	r7, sp, #0
 8002112:	4602      	mov	r2, r0
 8002114:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002118:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800211c:	6019      	str	r1, [r3, #0]
 800211e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002122:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002126:	701a      	strb	r2, [r3, #0]
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t c_ic = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002134:	2300      	movs	r3, #0
 8002136:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 800213a:	e031      	b.n	80021a0 <ADBMS6830B_wrcfgb+0x94>
	{
		c_ic = current_ic;
 800213c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8002140:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
		for (uint8_t data = 0; data<6; data++)
 8002144:	2300      	movs	r3, #0
 8002146:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800214a:	e020      	b.n	800218e <ADBMS6830B_wrcfgb+0x82>
		{
			write_buffer[write_count] = ic[c_ic].configb.tx_data[data];
 800214c:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8002150:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800215c:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	18d1      	adds	r1, r2, r3
 8002164:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8002168:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800216c:	440a      	add	r2, r1
 800216e:	7bd1      	ldrb	r1, [r2, #15]
 8002170:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002174:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002178:	54d1      	strb	r1, [r2, r3]
			write_count++;
 800217a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800217e:	3301      	adds	r3, #1
 8002180:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		for (uint8_t data = 0; data<6; data++)
 8002184:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002188:	3301      	adds	r3, #1
 800218a:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800218e:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8002192:	2b05      	cmp	r3, #5
 8002194:	d9da      	bls.n	800214c <ADBMS6830B_wrcfgb+0x40>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8002196:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800219a:	3301      	adds	r3, #1
 800219c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 80021a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80021a4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80021a8:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d3c4      	bcc.n	800213c <ADBMS6830B_wrcfgb+0x30>
		}
	}
	transmitCMDW(WRCFGB,write_buffer);
 80021b2:	f107 030c 	add.w	r3, r7, #12
 80021b6:	4619      	mov	r1, r3
 80021b8:	2024      	movs	r0, #36	@ 0x24
 80021ba:	f7ff f939 	bl	8001430 <transmitCMDW>
}
 80021be:	bf00      	nop
 80021c0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <wakeup_sleep>:
	}
	transmitCMDW(CLRFLAG, flagData);
}
/* Generic wakeup command to wake the ADBMS6830B from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
	FEB_cs_low();
 80021d2:	f000 f82d 	bl	8002230 <FEB_cs_low>
	HAL_Delay(1);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f000 ffcc 	bl	8003174 <HAL_Delay>
	FEB_cs_high();
 80021dc:	f000 f834 	bl	8002248 <FEB_cs_high>
	HAL_Delay(2);
 80021e0:	2002      	movs	r0, #2
 80021e2:	f000 ffc7 	bl	8003174 <HAL_Delay>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <FEB_Config_Get_Cell_Min_Voltage_mV>:
	}
}

/* ******** Interface ******** */

uint16_t FEB_Config_Get_Cell_Min_Voltage_mV(void) {
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
	//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
	uint16_t value = cell_min_voltage_mV;
 80021f6:	4b05      	ldr	r3, [pc, #20]	@ (800220c <FEB_Config_Get_Cell_Min_Voltage_mV+0x1c>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	80fb      	strh	r3, [r7, #6]
	//osMutexRelease(FEB_SM_LockHandle);
	return value;
 80021fc:	88fb      	ldrh	r3, [r7, #6]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000400 	.word	0x20000400

08002210 <FEB_Config_Get_Cell_Max_Voltage_mV>:

uint16_t FEB_Config_Get_Cell_Max_Voltage_mV(void) {
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
	//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
	uint16_t value = cell_max_voltage_mV;
 8002216:	4b05      	ldr	r3, [pc, #20]	@ (800222c <FEB_Config_Get_Cell_Max_Voltage_mV+0x1c>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	80fb      	strh	r3, [r7, #6]
	//osMutexRelease(FEB_SM_LockHandle);
	return value;
 800221c:	88fb      	ldrh	r3, [r7, #6]
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000402 	.word	0x20000402

08002230 <FEB_cs_low>:
			if(period==10)period=4500;
		}

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
}
void FEB_cs_low() {
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002234:	2200      	movs	r2, #0
 8002236:	2140      	movs	r1, #64	@ 0x40
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <FEB_cs_low+0x14>)
 800223a:	f001 fb31 	bl	80038a0 <HAL_GPIO_WritePin>
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40020400 	.word	0x40020400

08002248 <FEB_cs_high>:


void FEB_cs_high() {
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800224c:	2201      	movs	r2, #1
 800224e:	2140      	movs	r1, #64	@ 0x40
 8002250:	4802      	ldr	r0, [pc, #8]	@ (800225c <FEB_cs_high+0x14>)
 8002252:	f001 fb25 	bl	80038a0 <HAL_GPIO_WritePin>
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40020400 	.word	0x40020400

08002260 <FEB_spi_write_array>:
void FEB_spi_write_array(
		uint16_t size,                     /*Option: Number of bytes to be written on the SPI port*/
		uint8_t *tx_Data                       /*Array of bytes to be written on the SPI port*/
		)
		{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	80fb      	strh	r3, [r7, #6]
			HAL_SPI_Transmit(&hspi1, tx_Data, size, HAL_MAX_DELAY); /* SPI1 , data, size, timeout */
 800226c:	88fa      	ldrh	r2, [r7, #6]
 800226e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002272:	6839      	ldr	r1, [r7, #0]
 8002274:	4803      	ldr	r0, [pc, #12]	@ (8002284 <FEB_spi_write_array+0x24>)
 8002276:	f002 fb14 	bl	80048a2 <HAL_SPI_Transmit>
		}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000480 	.word	0x20000480

08002288 <FEB_spi_write_read>:
		//catch error
	}
	return data;
}

void FEB_spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, size_t rx_len) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	460b      	mov	r3, r1
 8002296:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Transmit(&hspi1,tx_Data,tx_len,HAL_MAX_DELAY);
 8002298:	7afb      	ldrb	r3, [r7, #11]
 800229a:	b29a      	uxth	r2, r3
 800229c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	4807      	ldr	r0, [pc, #28]	@ (80022c0 <FEB_spi_write_read+0x38>)
 80022a4:	f002 fafd 	bl	80048a2 <HAL_SPI_Transmit>
		//catch error
	if(HAL_SPI_Receive(&hspi1,rx_data,rx_len,HAL_MAX_DELAY) != HAL_OK){
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4803      	ldr	r0, [pc, #12]	@ (80022c0 <FEB_spi_write_read+0x38>)
 80022b4:	f002 fc39 	bl	8004b2a <HAL_SPI_Receive>
		//catch error
	}
	return;
 80022b8:	bf00      	nop
}
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000480 	.word	0x20000480

080022c4 <FEB_Main_Setup>:
#include "FEB_Main.h"


// ******************************** Functions ********************************

void FEB_Main_Setup() {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	//SM setup
	FEB_ADBMS_Init();
 80022c8:	f7ff f8fc 	bl	80014c4 <FEB_ADBMS_Init>
	//FEB_SM_Init();
	//FEB_CAN_Init();
	//IVT Setup
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <FEB_Task_ADBMS>:

void FEB_Task_ADBMS() {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	FEB_ADBMS_Voltage_Process();
 80022d4:	f7ff f90e 	bl	80014f4 <FEB_ADBMS_Voltage_Process>
	//FEB_Siren_Activate();
	//FEB_ADBMS_Temperature_Process();
	HAL_Delay(50);
 80022d8:	2032      	movs	r0, #50	@ 0x32
 80022da:	f000 ff4b 	bl	8003174 <HAL_Delay>
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <FEB_ADBMS_UART_Transmit>:
// **************************************** Global Variables ********************************

static uint8_t counter = 0;

// **************************************** Functions ****************************************
void FEB_ADBMS_UART_Transmit(accumulator_t* FEB_ACC) {
 80022e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e8:	b0b1      	sub	sp, #196	@ 0xc4
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	61f8      	str	r0, [r7, #28]
	int NUMLINES=3;
 80022ee:	2303      	movs	r3, #3
 80022f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 80022fa:	e199      	b.n	8002630 <FEB_ADBMS_UART_Transmit+0x34c>
 80022fc:	466b      	mov	r3, sp
 80022fe:	61bb      	str	r3, [r7, #24]
		char UART_line[NUMLINES][32*FEB_NUM_CELLS_PER_IC*FEB_NUM_ICPBANK];
 8002300:	f8d7 40b4 	ldr.w	r4, [r7, #180]	@ 0xb4
 8002304:	1e63      	subs	r3, r4, #1
 8002306:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800230a:	4622      	mov	r2, r4
 800230c:	2300      	movs	r3, #0
 800230e:	613a      	str	r2, [r7, #16]
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002316:	f04f 0000 	mov.w	r0, #0
 800231a:	f04f 0100 	mov.w	r1, #0
 800231e:	0099      	lsls	r1, r3, #2
 8002320:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002324:	0090      	lsls	r0, r2, #2
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	6939      	ldr	r1, [r7, #16]
 800232c:	eb12 0801 	adds.w	r8, r2, r1
 8002330:	6979      	ldr	r1, [r7, #20]
 8002332:	eb43 0901 	adc.w	r9, r3, r1
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002342:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002346:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800234a:	4690      	mov	r8, r2
 800234c:	4699      	mov	r9, r3
 800234e:	4622      	mov	r2, r4
 8002350:	2300      	movs	r3, #0
 8002352:	60ba      	str	r2, [r7, #8]
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800235a:	f04f 0000 	mov.w	r0, #0
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	0099      	lsls	r1, r3, #2
 8002364:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002368:	0090      	lsls	r0, r2, #2
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	eb12 0a01 	adds.w	sl, r2, r1
 8002374:	68f9      	ldr	r1, [r7, #12]
 8002376:	eb43 0b01 	adc.w	fp, r3, r1
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	ea4f 234b 	mov.w	r3, fp, lsl #9
 8002386:	ea43 53da 	orr.w	r3, r3, sl, lsr #23
 800238a:	ea4f 224a 	mov.w	r2, sl, lsl #9
 800238e:	4692      	mov	sl, r2
 8002390:	469b      	mov	fp, r3
 8002392:	4622      	mov	r2, r4
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	019b      	lsls	r3, r3, #6
 800239c:	3307      	adds	r3, #7
 800239e:	08db      	lsrs	r3, r3, #3
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	ebad 0d03 	sub.w	sp, sp, r3
 80023a6:	466b      	mov	r3, sp
 80023a8:	3300      	adds	r3, #0
 80023aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		int offset[NUMLINES];
 80023ae:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80023b2:	1e4b      	subs	r3, r1, #1
 80023b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80023b8:	460a      	mov	r2, r1
 80023ba:	2300      	movs	r3, #0
 80023bc:	4615      	mov	r5, r2
 80023be:	461e      	mov	r6, r3
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	0173      	lsls	r3, r6, #5
 80023ca:	ea43 63d5 	orr.w	r3, r3, r5, lsr #27
 80023ce:	016a      	lsls	r2, r5, #5
 80023d0:	460a      	mov	r2, r1
 80023d2:	2300      	movs	r3, #0
 80023d4:	603a      	str	r2, [r7, #0]
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	0143      	lsls	r3, r0, #5
 80023e4:	6838      	ldr	r0, [r7, #0]
 80023e6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023ea:	6838      	ldr	r0, [r7, #0]
 80023ec:	0142      	lsls	r2, r0, #5
 80023ee:	460b      	mov	r3, r1
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	3307      	adds	r3, #7
 80023f4:	08db      	lsrs	r3, r3, #3
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	ebad 0d03 	sub.w	sp, sp, r3
 80023fc:	466b      	mov	r3, sp
 80023fe:	3303      	adds	r3, #3
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		offset[0]=sprintf((char*)(UART_line[0]),"|Bnk %d|",bank);
 8002408:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800240c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002410:	461a      	mov	r2, r3
 8002412:	4996      	ldr	r1, [pc, #600]	@ (800266c <FEB_ADBMS_UART_Transmit+0x388>)
 8002414:	f004 fb6c 	bl	8006af0 <siprintf>
 8002418:	4602      	mov	r2, r0
 800241a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800241e:	601a      	str	r2, [r3, #0]
		offset[1]=sprintf((char*)(UART_line[1]),"|Vlt C|");
 8002420:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002424:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002428:	4991      	ldr	r1, [pc, #580]	@ (8002670 <FEB_ADBMS_UART_Transmit+0x38c>)
 800242a:	4618      	mov	r0, r3
 800242c:	f004 fb60 	bl	8006af0 <siprintf>
 8002430:	4602      	mov	r2, r0
 8002432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002436:	605a      	str	r2, [r3, #4]
		offset[2]=sprintf((char*)(UART_line[2]),"|Vlt S|");
 8002438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800243c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002440:	498c      	ldr	r1, [pc, #560]	@ (8002674 <FEB_ADBMS_UART_Transmit+0x390>)
 8002442:	4618      	mov	r0, r3
 8002444:	f004 fb54 	bl	8006af0 <siprintf>
 8002448:	4602      	mov	r2, r0
 800244a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800244e:	609a      	str	r2, [r3, #8]
		//offset[3]=sprintf((char*)(UART_line[3]),"|Tmp 1|");
		//offset[4]=sprintf((char*)(UART_line[4]),"|Tmp 2|");
		//offset[4]=sprintf((char*)(UART_line[5]),"|PWM  |");

		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_IC*FEB_NUM_ICPBANK; cell++) {
 8002450:	2300      	movs	r3, #0
 8002452:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
 8002456:	e074      	b.n	8002542 <FEB_ADBMS_UART_Transmit+0x25e>
			offset[0]+=sprintf(((char*)(UART_line[0]) + offset[0]), (cell>=10)?"Cell  %d|":"Cell   %d|",cell);
 8002458:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800245c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	18d0      	adds	r0, r2, r3
 8002464:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8002468:	2b09      	cmp	r3, #9
 800246a:	d901      	bls.n	8002470 <FEB_ADBMS_UART_Transmit+0x18c>
 800246c:	4982      	ldr	r1, [pc, #520]	@ (8002678 <FEB_ADBMS_UART_Transmit+0x394>)
 800246e:	e000      	b.n	8002472 <FEB_ADBMS_UART_Transmit+0x18e>
 8002470:	4982      	ldr	r1, [pc, #520]	@ (800267c <FEB_ADBMS_UART_Transmit+0x398>)
 8002472:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8002476:	461a      	mov	r2, r3
 8002478:	f004 fb3a 	bl	8006af0 <siprintf>
 800247c:	4602      	mov	r2, r0
 800247e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	441a      	add	r2, r3
 8002486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800248a:	601a      	str	r2, [r3, #0]
			offset[1]+=sprintf(((char*)(UART_line[1]) + offset[1]), "%.6f|",FEB_ACC->banks[bank].cells[cell].voltage_V);
 800248c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002490:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 8002494:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	18d4      	adds	r4, r2, r3
 800249c:	f897 10bf 	ldrb.w	r1, [r7, #191]	@ 0xbf
 80024a0:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 80024a4:	69f8      	ldr	r0, [r7, #28]
 80024a6:	461a      	mov	r2, r3
 80024a8:	0052      	lsls	r2, r2, #1
 80024aa:	441a      	add	r2, r3
 80024ac:	0093      	lsls	r3, r2, #2
 80024ae:	461a      	mov	r2, r3
 80024b0:	460b      	mov	r3, r1
 80024b2:	019b      	lsls	r3, r3, #6
 80024b4:	1a5b      	subs	r3, r3, r1
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	4403      	add	r3, r0
 80024bc:	3388      	adds	r3, #136	@ 0x88
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f861 	bl	8000588 <__aeabi_f2d>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	496d      	ldr	r1, [pc, #436]	@ (8002680 <FEB_ADBMS_UART_Transmit+0x39c>)
 80024cc:	4620      	mov	r0, r4
 80024ce:	f004 fb0f 	bl	8006af0 <siprintf>
 80024d2:	4602      	mov	r2, r0
 80024d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	441a      	add	r2, r3
 80024dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024e0:	605a      	str	r2, [r3, #4]
			offset[2]+=sprintf(((char*)(UART_line[2]) + offset[2]), "%.6f|",FEB_ACC->banks[bank].cells[cell].voltage_S);
 80024e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024e6:	f503 7220 	add.w	r2, r3, #640	@ 0x280
 80024ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	18d4      	adds	r4, r2, r3
 80024f2:	f897 10bf 	ldrb.w	r1, [r7, #191]	@ 0xbf
 80024f6:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 80024fa:	69f8      	ldr	r0, [r7, #28]
 80024fc:	461a      	mov	r2, r3
 80024fe:	0052      	lsls	r2, r2, #1
 8002500:	441a      	add	r2, r3
 8002502:	0093      	lsls	r3, r2, #2
 8002504:	461a      	mov	r2, r3
 8002506:	460b      	mov	r3, r1
 8002508:	019b      	lsls	r3, r3, #6
 800250a:	1a5b      	subs	r3, r3, r1
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	4403      	add	r3, r0
 8002512:	338c      	adds	r3, #140	@ 0x8c
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe f836 	bl	8000588 <__aeabi_f2d>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4957      	ldr	r1, [pc, #348]	@ (8002680 <FEB_ADBMS_UART_Transmit+0x39c>)
 8002522:	4620      	mov	r0, r4
 8002524:	f004 fae4 	bl	8006af0 <siprintf>
 8002528:	4602      	mov	r2, r0
 800252a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	441a      	add	r2, r3
 8002532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002536:	609a      	str	r2, [r3, #8]
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_IC*FEB_NUM_ICPBANK; cell++) {
 8002538:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 800253c:	3301      	adds	r3, #1
 800253e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
 8002542:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8002546:	2b09      	cmp	r3, #9
 8002548:	d986      	bls.n	8002458 <FEB_ADBMS_UART_Transmit+0x174>
			//offset[3]+=sprintf(((char*)(UART_line[3]) + offset[3]), "%.6f|",FEB_ACC.banks[bank].temp_sensor_readings_V[cell]); // @suppress("Float formatting support")
			//offset[4]+=sprintf(((char*)(UART_line[4]) + offset[4]), "%.6f|",FEB_ACC.banks[bank].temp_sensor_readings_V[cell]);
			//offset[5]+=sprintf(((char*)(UART_line[4]) + offset[4]), "%X|",FEB_ACC.banks[bank].temp_sensor_readings_V[cell+16]);
		}
		offset[NUMLINES-1]+=sprintf(((char*)(UART_line[NUMLINES-1]) + offset[NUMLINES-1]), "\n\r");
 800254a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800254e:	1e5a      	subs	r2, r3, #1
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	019b      	lsls	r3, r3, #6
 8002558:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800255c:	18d1      	adds	r1, r2, r3
 800255e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002562:	1e5a      	subs	r2, r3, #1
 8002564:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256c:	440b      	add	r3, r1
 800256e:	4945      	ldr	r1, [pc, #276]	@ (8002684 <FEB_ADBMS_UART_Transmit+0x3a0>)
 8002570:	4618      	mov	r0, r3
 8002572:	f004 fabd 	bl	8006af0 <siprintf>
 8002576:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800257a:	1e5a      	subs	r2, r3, #1
 800257c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002580:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002584:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002588:	1e59      	subs	r1, r3, #1
 800258a:	4402      	add	r2, r0
 800258c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002590:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		for(int line=0;line<NUMLINES;line++){
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800259a:	e03c      	b.n	8002616 <FEB_ADBMS_UART_Transmit+0x332>
			offset[line]+=sprintf(((char*)(UART_line[line]) + offset[line]), "\n\r") ;
 800259c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	019b      	lsls	r3, r3, #6
 80025a8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025ac:	18d1      	adds	r1, r2, r3
 80025ae:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80025b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	440b      	add	r3, r1
 80025bc:	4931      	ldr	r1, [pc, #196]	@ (8002684 <FEB_ADBMS_UART_Transmit+0x3a0>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f004 fa96 	bl	8006af0 <siprintf>
 80025c4:	4601      	mov	r1, r0
 80025c6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80025ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	4419      	add	r1, r3
 80025d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80025d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_UART_Transmit(&huart2, (uint8_t*) UART_line[line], offset[line]+1, 100);
 80025e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	019b      	lsls	r3, r3, #6
 80025ec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025f0:	18d1      	adds	r1, r2, r3
 80025f2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80025f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3301      	adds	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	2364      	movs	r3, #100	@ 0x64
 8002606:	4820      	ldr	r0, [pc, #128]	@ (8002688 <FEB_ADBMS_UART_Transmit+0x3a4>)
 8002608:	f003 f986 	bl	8005918 <HAL_UART_Transmit>
		for(int line=0;line<NUMLINES;line++){
 800260c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002610:	3301      	adds	r3, #1
 8002612:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002616:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800261a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800261e:	429a      	cmp	r2, r3
 8002620:	dbbc      	blt.n	800259c <FEB_ADBMS_UART_Transmit+0x2b8>
 8002622:	f8d7 d018 	ldr.w	sp, [r7, #24]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 8002626:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800262a:	3301      	adds	r3, #1
 800262c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8002630:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002634:	2b00      	cmp	r3, #0
 8002636:	f43f ae61 	beq.w	80022fc <FEB_ADBMS_UART_Transmit+0x18>
		}

	}
	char UART_line[128];
	size_t len =sprintf( (UART_line) , "------------------------------------------------------------------------------------------------\n\r\n\r");
 800263a:	f107 0320 	add.w	r3, r7, #32
 800263e:	4913      	ldr	r1, [pc, #76]	@ (800268c <FEB_ADBMS_UART_Transmit+0x3a8>)
 8002640:	4618      	mov	r0, r3
 8002642:	f004 fa55 	bl	8006af0 <siprintf>
 8002646:	4603      	mov	r3, r0
 8002648:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	HAL_UART_Transmit(&huart2, (uint8_t*) UART_line, len+1, 100);
 800264c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002650:	b29b      	uxth	r3, r3
 8002652:	3301      	adds	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	f107 0120 	add.w	r1, r7, #32
 800265a:	2364      	movs	r3, #100	@ 0x64
 800265c:	480a      	ldr	r0, [pc, #40]	@ (8002688 <FEB_ADBMS_UART_Transmit+0x3a4>)
 800265e:	f003 f95b 	bl	8005918 <HAL_UART_Transmit>
}
 8002662:	bf00      	nop
 8002664:	37c4      	adds	r7, #196	@ 0xc4
 8002666:	46bd      	mov	sp, r7
 8002668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800266c:	08008d78 	.word	0x08008d78
 8002670:	08008d84 	.word	0x08008d84
 8002674:	08008d8c 	.word	0x08008d8c
 8002678:	08008d94 	.word	0x08008d94
 800267c:	08008da0 	.word	0x08008da0
 8002680:	08008dac 	.word	0x08008dac
 8002684:	08008db4 	.word	0x08008db4
 8002688:	200004d8 	.word	0x200004d8
 800268c:	08008db8 	.word	0x08008db8

08002690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002694:	f000 fd2c 	bl	80030f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002698:	f000 f810 	bl	80026bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269c:	f000 f93e 	bl	800291c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80026a0:	f000 f912 	bl	80028c8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80026a4:	f000 f8da 	bl	800285c <MX_SPI1_Init>
  MX_CAN1_Init();
 80026a8:	f000 f874 	bl	8002794 <MX_CAN1_Init>
  MX_I2C1_Init();
 80026ac:	f000 f8a8 	bl	8002800 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  FEB_Main_Setup();
 80026b0:	f7ff fe08 	bl	80022c4 <FEB_Main_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FEB_Task_ADBMS();
 80026b4:	f7ff fe0c 	bl	80022d0 <FEB_Task_ADBMS>
 80026b8:	e7fc      	b.n	80026b4 <main+0x24>
	...

080026bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b094      	sub	sp, #80	@ 0x50
 80026c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026c2:	f107 031c 	add.w	r3, r7, #28
 80026c6:	2234      	movs	r2, #52	@ 0x34
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f004 faf4 	bl	8006cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d0:	f107 0308 	add.w	r3, r7, #8
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	4b29      	ldr	r3, [pc, #164]	@ (800278c <SystemClock_Config+0xd0>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	4a28      	ldr	r2, [pc, #160]	@ (800278c <SystemClock_Config+0xd0>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f0:	4b26      	ldr	r3, [pc, #152]	@ (800278c <SystemClock_Config+0xd0>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026fc:	2300      	movs	r3, #0
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	4b23      	ldr	r3, [pc, #140]	@ (8002790 <SystemClock_Config+0xd4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a22      	ldr	r2, [pc, #136]	@ (8002790 <SystemClock_Config+0xd4>)
 8002706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b20      	ldr	r3, [pc, #128]	@ (8002790 <SystemClock_Config+0xd4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002718:	2301      	movs	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800271c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002720:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002722:	2302      	movs	r3, #2
 8002724:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002726:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800272a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800272c:	2304      	movs	r3, #4
 800272e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002730:	23a0      	movs	r3, #160	@ 0xa0
 8002732:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002734:	2302      	movs	r3, #2
 8002736:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002738:	2302      	movs	r3, #2
 800273a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800273c:	2302      	movs	r3, #2
 800273e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002740:	f107 031c 	add.w	r3, r7, #28
 8002744:	4618      	mov	r0, r3
 8002746:	f001 fd85 	bl	8004254 <HAL_RCC_OscConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002750:	f000 f9d0 	bl	8002af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002754:	230f      	movs	r3, #15
 8002756:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002758:	2302      	movs	r3, #2
 800275a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002760:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800276a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800276c:	f107 0308 	add.w	r3, r7, #8
 8002770:	2105      	movs	r1, #5
 8002772:	4618      	mov	r0, r3
 8002774:	f001 f9f2 	bl	8003b5c <HAL_RCC_ClockConfig>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800277e:	f000 f9b9 	bl	8002af4 <Error_Handler>
  }
}
 8002782:	bf00      	nop
 8002784:	3750      	adds	r7, #80	@ 0x50
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	40007000 	.word	0x40007000

08002794 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002798:	4b17      	ldr	r3, [pc, #92]	@ (80027f8 <MX_CAN1_Init+0x64>)
 800279a:	4a18      	ldr	r2, [pc, #96]	@ (80027fc <MX_CAN1_Init+0x68>)
 800279c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <MX_CAN1_Init+0x64>)
 80027a0:	2210      	movs	r2, #16
 80027a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80027a4:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <MX_CAN1_Init+0x64>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80027aa:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <MX_CAN1_Init+0x64>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80027b0:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <MX_CAN1_Init+0x64>)
 80027b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027b6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <MX_CAN1_Init+0x64>)
 80027ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80027be:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80027c0:	4b0d      	ldr	r3, [pc, #52]	@ (80027f8 <MX_CAN1_Init+0x64>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80027c6:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <MX_CAN1_Init+0x64>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80027cc:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <MX_CAN1_Init+0x64>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80027d2:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <MX_CAN1_Init+0x64>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80027d8:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <MX_CAN1_Init+0x64>)
 80027da:	2200      	movs	r2, #0
 80027dc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <MX_CAN1_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80027e4:	4804      	ldr	r0, [pc, #16]	@ (80027f8 <MX_CAN1_Init+0x64>)
 80027e6:	f000 fce9 	bl	80031bc <HAL_CAN_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80027f0:	f000 f980 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000404 	.word	0x20000404
 80027fc:	40006400 	.word	0x40006400

08002800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002804:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <MX_I2C1_Init+0x50>)
 8002806:	4a13      	ldr	r2, [pc, #76]	@ (8002854 <MX_I2C1_Init+0x54>)
 8002808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800280a:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <MX_I2C1_Init+0x50>)
 800280c:	4a12      	ldr	r2, [pc, #72]	@ (8002858 <MX_I2C1_Init+0x58>)
 800280e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002810:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <MX_I2C1_Init+0x50>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002816:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <MX_I2C1_Init+0x50>)
 8002818:	2200      	movs	r2, #0
 800281a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <MX_I2C1_Init+0x50>)
 800281e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002824:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <MX_I2C1_Init+0x50>)
 8002826:	2200      	movs	r2, #0
 8002828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800282a:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <MX_I2C1_Init+0x50>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002830:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <MX_I2C1_Init+0x50>)
 8002832:	2200      	movs	r2, #0
 8002834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <MX_I2C1_Init+0x50>)
 8002838:	2200      	movs	r2, #0
 800283a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800283c:	4804      	ldr	r0, [pc, #16]	@ (8002850 <MX_I2C1_Init+0x50>)
 800283e:	f001 f849 	bl	80038d4 <HAL_I2C_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002848:	f000 f954 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	2000042c 	.word	0x2000042c
 8002854:	40005400 	.word	0x40005400
 8002858:	000186a0 	.word	0x000186a0

0800285c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002860:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <MX_SPI1_Init+0x64>)
 8002862:	4a18      	ldr	r2, [pc, #96]	@ (80028c4 <MX_SPI1_Init+0x68>)
 8002864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002866:	4b16      	ldr	r3, [pc, #88]	@ (80028c0 <MX_SPI1_Init+0x64>)
 8002868:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800286c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800286e:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <MX_SPI1_Init+0x64>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002874:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <MX_SPI1_Init+0x64>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800287a:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <MX_SPI1_Init+0x64>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002880:	4b0f      	ldr	r3, [pc, #60]	@ (80028c0 <MX_SPI1_Init+0x64>)
 8002882:	2200      	movs	r2, #0
 8002884:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <MX_SPI1_Init+0x64>)
 8002888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800288c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800288e:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <MX_SPI1_Init+0x64>)
 8002890:	2230      	movs	r2, #48	@ 0x30
 8002892:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002894:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <MX_SPI1_Init+0x64>)
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800289a:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <MX_SPI1_Init+0x64>)
 800289c:	2200      	movs	r2, #0
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a0:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <MX_SPI1_Init+0x64>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028a6:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <MX_SPI1_Init+0x64>)
 80028a8:	220a      	movs	r2, #10
 80028aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028ac:	4804      	ldr	r0, [pc, #16]	@ (80028c0 <MX_SPI1_Init+0x64>)
 80028ae:	f001 ff6f 	bl	8004790 <HAL_SPI_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028b8:	f000 f91c 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000480 	.word	0x20000480
 80028c4:	40013000 	.word	0x40013000

080028c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028cc:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <MX_USART2_UART_Init+0x4c>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	@ (8002918 <MX_USART2_UART_Init+0x50>)
 80028d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <MX_USART2_UART_Init+0x4c>)
 80028d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028da:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <MX_USART2_UART_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <MX_USART2_UART_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <MX_USART2_UART_Init+0x4c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028ec:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <MX_USART2_UART_Init+0x4c>)
 80028ee:	220c      	movs	r2, #12
 80028f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f2:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <MX_USART2_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <MX_USART2_UART_Init+0x4c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028fe:	4805      	ldr	r0, [pc, #20]	@ (8002914 <MX_USART2_UART_Init+0x4c>)
 8002900:	f002 ffba 	bl	8005878 <HAL_UART_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800290a:	f000 f8f3 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200004d8 	.word	0x200004d8
 8002918:	40004400 	.word	0x40004400

0800291c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	@ 0x28
 8002920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
 8002930:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	4b61      	ldr	r3, [pc, #388]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	4a60      	ldr	r2, [pc, #384]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	6313      	str	r3, [r2, #48]	@ 0x30
 8002942:	4b5e      	ldr	r3, [pc, #376]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b5a      	ldr	r3, [pc, #360]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	4a59      	ldr	r2, [pc, #356]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 8002958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800295c:	6313      	str	r3, [r2, #48]	@ 0x30
 800295e:	4b57      	ldr	r3, [pc, #348]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b53      	ldr	r3, [pc, #332]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	4a52      	ldr	r2, [pc, #328]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6313      	str	r3, [r2, #48]	@ 0x30
 800297a:	4b50      	ldr	r3, [pc, #320]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	4b4c      	ldr	r3, [pc, #304]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	4a4b      	ldr	r2, [pc, #300]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	6313      	str	r3, [r2, #48]	@ 0x30
 8002996:	4b49      	ldr	r3, [pc, #292]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	4b45      	ldr	r3, [pc, #276]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	4a44      	ldr	r2, [pc, #272]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b2:	4b42      	ldr	r3, [pc, #264]	@ (8002abc <MX_GPIO_Init+0x1a0>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INDICATOR_Pin|BMS_IND_Pin|BMS_A_Pin|PC_AIR_Pin, GPIO_PIN_RESET);
 80029be:	2200      	movs	r2, #0
 80029c0:	f242 0107 	movw	r1, #8199	@ 0x2007
 80029c4:	483e      	ldr	r0, [pc, #248]	@ (8002ac0 <MX_GPIO_Init+0x1a4>)
 80029c6:	f000 ff6b 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80029ca:	2201      	movs	r2, #1
 80029cc:	2108      	movs	r1, #8
 80029ce:	483c      	ldr	r0, [pc, #240]	@ (8002ac0 <MX_GPIO_Init+0x1a4>)
 80029d0:	f000 ff66 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80029d4:	2201      	movs	r2, #1
 80029d6:	2101      	movs	r1, #1
 80029d8:	483a      	ldr	r0, [pc, #232]	@ (8002ac4 <MX_GPIO_Init+0x1a8>)
 80029da:	f000 ff61 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC_REL_GPIO_Port, PC_REL_Pin, GPIO_PIN_RESET);
 80029de:	2200      	movs	r2, #0
 80029e0:	2104      	movs	r1, #4
 80029e2:	4839      	ldr	r0, [pc, #228]	@ (8002ac8 <MX_GPIO_Init+0x1ac>)
 80029e4:	f000 ff5c 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80029e8:	2201      	movs	r2, #1
 80029ea:	2140      	movs	r1, #64	@ 0x40
 80029ec:	4837      	ldr	r0, [pc, #220]	@ (8002acc <MX_GPIO_Init+0x1b0>)
 80029ee:	f000 ff57 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INDICATOR_Pin BMS_IND_Pin BMS_A_Pin PC_AIR_Pin */
  GPIO_InitStruct.Pin = INDICATOR_Pin|BMS_IND_Pin|BMS_A_Pin|PC_AIR_Pin;
 80029f2:	f242 0307 	movw	r3, #8199	@ 0x2007
 80029f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	2301      	movs	r3, #1
 80029fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	482d      	ldr	r0, [pc, #180]	@ (8002ac0 <MX_GPIO_Init+0x1a4>)
 8002a0c:	f000 fdb4 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002a10:	2308      	movs	r3, #8
 8002a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a14:	2301      	movs	r3, #1
 8002a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	4826      	ldr	r0, [pc, #152]	@ (8002ac0 <MX_GPIO_Init+0x1a4>)
 8002a28:	f000 fda6 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a30:	2301      	movs	r3, #1
 8002a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4619      	mov	r1, r3
 8002a42:	4820      	ldr	r0, [pc, #128]	@ (8002ac4 <MX_GPIO_Init+0x1a8>)
 8002a44:	f000 fd98 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR__SENSE_Pin AIR__SENSEC5_Pin SHS_IMD_Pin SHS_TSMS_Pin
                           SHS_IN_Pin */
  GPIO_InitStruct.Pin = AIR__SENSE_Pin|AIR__SENSEC5_Pin|SHS_IMD_Pin|SHS_TSMS_Pin
 8002a48:	f641 4330 	movw	r3, #7216	@ 0x1c30
 8002a4c:	617b      	str	r3, [r7, #20]
                          |SHS_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a56:	f107 0314 	add.w	r3, r7, #20
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4818      	ldr	r0, [pc, #96]	@ (8002ac0 <MX_GPIO_Init+0x1a4>)
 8002a5e:	f000 fd8b 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : WAKE_Pin INTR_Pin RST_Pin Alert_Pin */
  GPIO_InitStruct.Pin = WAKE_Pin|INTR_Pin|RST_Pin|Alert_Pin;
 8002a62:	23a3      	movs	r3, #163	@ 0xa3
 8002a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4815      	ldr	r0, [pc, #84]	@ (8002acc <MX_GPIO_Init+0x1b0>)
 8002a76:	f000 fd7f 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC_REL_Pin */
  GPIO_InitStruct.Pin = PC_REL_Pin;
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PC_REL_GPIO_Port, &GPIO_InitStruct);
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	4619      	mov	r1, r3
 8002a90:	480d      	ldr	r0, [pc, #52]	@ (8002ac8 <MX_GPIO_Init+0x1ac>)
 8002a92:	f000 fd71 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a96:	2340      	movs	r3, #64	@ 0x40
 8002a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4807      	ldr	r0, [pc, #28]	@ (8002acc <MX_GPIO_Init+0x1b0>)
 8002aae:	f000 fd63 	bl	8003578 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ab2:	bf00      	nop
 8002ab4:	3728      	adds	r7, #40	@ 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	40020c00 	.word	0x40020c00
 8002acc:	40020400 	.word	0x40020400

08002ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a04      	ldr	r2, [pc, #16]	@ (8002af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ae2:	f000 fb27 	bl	8003134 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40010000 	.word	0x40010000

08002af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002af8:	b672      	cpsid	i
}
 8002afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <Error_Handler+0x8>

08002b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <HAL_MspInit+0x4c>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b4c <HAL_MspInit+0x4c>)
 8002b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b16:	4b0d      	ldr	r3, [pc, #52]	@ (8002b4c <HAL_MspInit+0x4c>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <HAL_MspInit+0x4c>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	4a08      	ldr	r2, [pc, #32]	@ (8002b4c <HAL_MspInit+0x4c>)
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_MspInit+0x4c>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	@ 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a19      	ldr	r2, [pc, #100]	@ (8002bd4 <HAL_CAN_MspInit+0x84>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d12c      	bne.n	8002bcc <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	4b18      	ldr	r3, [pc, #96]	@ (8002bd8 <HAL_CAN_MspInit+0x88>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	4a17      	ldr	r2, [pc, #92]	@ (8002bd8 <HAL_CAN_MspInit+0x88>)
 8002b7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b82:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <HAL_CAN_MspInit+0x88>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <HAL_CAN_MspInit+0x88>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	4a10      	ldr	r2, [pc, #64]	@ (8002bd8 <HAL_CAN_MspInit+0x88>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd8 <HAL_CAN_MspInit+0x88>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002baa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002bbc:	2309      	movs	r3, #9
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4805      	ldr	r0, [pc, #20]	@ (8002bdc <HAL_CAN_MspInit+0x8c>)
 8002bc8:	f000 fcd6 	bl	8003578 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002bcc:	bf00      	nop
 8002bce:	3728      	adds	r7, #40	@ 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40006400 	.word	0x40006400
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020000 	.word	0x40020000

08002be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	@ 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	@ (8002c64 <HAL_I2C_MspInit+0x84>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d12c      	bne.n	8002c5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	4b18      	ldr	r3, [pc, #96]	@ (8002c68 <HAL_I2C_MspInit+0x88>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	4a17      	ldr	r2, [pc, #92]	@ (8002c68 <HAL_I2C_MspInit+0x88>)
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c12:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <HAL_I2C_MspInit+0x88>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c24:	2312      	movs	r3, #18
 8002c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c30:	2304      	movs	r3, #4
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	4619      	mov	r1, r3
 8002c3a:	480c      	ldr	r0, [pc, #48]	@ (8002c6c <HAL_I2C_MspInit+0x8c>)
 8002c3c:	f000 fc9c 	bl	8003578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	4b08      	ldr	r3, [pc, #32]	@ (8002c68 <HAL_I2C_MspInit+0x88>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	4a07      	ldr	r2, [pc, #28]	@ (8002c68 <HAL_I2C_MspInit+0x88>)
 8002c4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c50:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_I2C_MspInit+0x88>)
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c5c:	bf00      	nop
 8002c5e:	3728      	adds	r7, #40	@ 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40005400 	.word	0x40005400
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020400 	.word	0x40020400

08002c70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	@ 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	@ (8002cf4 <HAL_SPI_MspInit+0x84>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d12b      	bne.n	8002cea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	4b18      	ldr	r3, [pc, #96]	@ (8002cf8 <HAL_SPI_MspInit+0x88>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	4a17      	ldr	r2, [pc, #92]	@ (8002cf8 <HAL_SPI_MspInit+0x88>)
 8002c9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca2:	4b15      	ldr	r3, [pc, #84]	@ (8002cf8 <HAL_SPI_MspInit+0x88>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <HAL_SPI_MspInit+0x88>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	4a10      	ldr	r2, [pc, #64]	@ (8002cf8 <HAL_SPI_MspInit+0x88>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <HAL_SPI_MspInit+0x88>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002cca:	23e0      	movs	r3, #224	@ 0xe0
 8002ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cda:	2305      	movs	r3, #5
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cde:	f107 0314 	add.w	r3, r7, #20
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4805      	ldr	r0, [pc, #20]	@ (8002cfc <HAL_SPI_MspInit+0x8c>)
 8002ce6:	f000 fc47 	bl	8003578 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002cea:	bf00      	nop
 8002cec:	3728      	adds	r7, #40	@ 0x28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40013000 	.word	0x40013000
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40020000 	.word	0x40020000

08002d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	@ 0x28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a19      	ldr	r2, [pc, #100]	@ (8002d84 <HAL_UART_MspInit+0x84>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d12b      	bne.n	8002d7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	4b18      	ldr	r3, [pc, #96]	@ (8002d88 <HAL_UART_MspInit+0x88>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	4a17      	ldr	r2, [pc, #92]	@ (8002d88 <HAL_UART_MspInit+0x88>)
 8002d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d32:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <HAL_UART_MspInit+0x88>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <HAL_UART_MspInit+0x88>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	4a10      	ldr	r2, [pc, #64]	@ (8002d88 <HAL_UART_MspInit+0x88>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <HAL_UART_MspInit+0x88>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d5a:	230c      	movs	r3, #12
 8002d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d66:	2303      	movs	r3, #3
 8002d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d6a:	2307      	movs	r3, #7
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6e:	f107 0314 	add.w	r3, r7, #20
 8002d72:	4619      	mov	r1, r3
 8002d74:	4805      	ldr	r0, [pc, #20]	@ (8002d8c <HAL_UART_MspInit+0x8c>)
 8002d76:	f000 fbff 	bl	8003578 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002d7a:	bf00      	nop
 8002d7c:	3728      	adds	r7, #40	@ 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40004400 	.word	0x40004400
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020000 	.word	0x40020000

08002d90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08c      	sub	sp, #48	@ 0x30
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	4b2f      	ldr	r3, [pc, #188]	@ (8002e64 <HAL_InitTick+0xd4>)
 8002da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e64 <HAL_InitTick+0xd4>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6453      	str	r3, [r2, #68]	@ 0x44
 8002db0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e64 <HAL_InitTick+0xd4>)
 8002db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dbc:	f107 020c 	add.w	r2, r7, #12
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 ffe2 	bl	8003d90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002dcc:	f000 ffcc 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd8:	4a23      	ldr	r2, [pc, #140]	@ (8002e68 <HAL_InitTick+0xd8>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	0c9b      	lsrs	r3, r3, #18
 8002de0:	3b01      	subs	r3, #1
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002de4:	4b21      	ldr	r3, [pc, #132]	@ (8002e6c <HAL_InitTick+0xdc>)
 8002de6:	4a22      	ldr	r2, [pc, #136]	@ (8002e70 <HAL_InitTick+0xe0>)
 8002de8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002dea:	4b20      	ldr	r3, [pc, #128]	@ (8002e6c <HAL_InitTick+0xdc>)
 8002dec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002df0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002df2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e6c <HAL_InitTick+0xdc>)
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002df8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e6c <HAL_InitTick+0xdc>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <HAL_InitTick+0xdc>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e04:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <HAL_InitTick+0xdc>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002e0a:	4818      	ldr	r0, [pc, #96]	@ (8002e6c <HAL_InitTick+0xdc>)
 8002e0c:	f002 fa92 	bl	8005334 <HAL_TIM_Base_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002e16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11b      	bne.n	8002e56 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002e1e:	4813      	ldr	r0, [pc, #76]	@ (8002e6c <HAL_InitTick+0xdc>)
 8002e20:	f002 fae2 	bl	80053e8 <HAL_TIM_Base_Start_IT>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d111      	bne.n	8002e56 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e32:	2019      	movs	r0, #25
 8002e34:	f000 fb92 	bl	800355c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d808      	bhi.n	8002e50 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	2019      	movs	r0, #25
 8002e44:	f000 fb6e 	bl	8003524 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e48:	4a0a      	ldr	r2, [pc, #40]	@ (8002e74 <HAL_InitTick+0xe4>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e002      	b.n	8002e56 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002e56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3730      	adds	r7, #48	@ 0x30
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	431bde83 	.word	0x431bde83
 8002e6c:	20000520 	.word	0x20000520
 8002e70:	40010000 	.word	0x40010000
 8002e74:	20000008 	.word	0x20000008

08002e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e7c:	bf00      	nop
 8002e7e:	e7fd      	b.n	8002e7c <NMI_Handler+0x4>

08002e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e84:	bf00      	nop
 8002e86:	e7fd      	b.n	8002e84 <HardFault_Handler+0x4>

08002e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <MemManage_Handler+0x4>

08002e90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e94:	bf00      	nop
 8002e96:	e7fd      	b.n	8002e94 <BusFault_Handler+0x4>

08002e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <UsageFault_Handler+0x4>

08002ea0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002edc:	4802      	ldr	r0, [pc, #8]	@ (8002ee8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ede:	f002 faf3 	bl	80054c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000520 	.word	0x20000520

08002eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return 1;
 8002ef0:	2301      	movs	r3, #1
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <_kill>:

int _kill(int pid, int sig)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f06:	f003 feef 	bl	8006ce8 <__errno>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2216      	movs	r2, #22
 8002f0e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_exit>:

void _exit (int status)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ffe7 	bl	8002efc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f2e:	bf00      	nop
 8002f30:	e7fd      	b.n	8002f2e <_exit+0x12>

08002f32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e00a      	b.n	8002f5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f44:	f3af 8000 	nop.w
 8002f48:	4601      	mov	r1, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	60ba      	str	r2, [r7, #8]
 8002f50:	b2ca      	uxtb	r2, r1
 8002f52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	dbf0      	blt.n	8002f44 <_read+0x12>
  }

  return len;
 8002f62:	687b      	ldr	r3, [r7, #4]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e009      	b.n	8002f92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	60ba      	str	r2, [r7, #8]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	dbf1      	blt.n	8002f7e <_write+0x12>
  }
  return len;
 8002f9a:	687b      	ldr	r3, [r7, #4]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_close>:

int _close(int file)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fcc:	605a      	str	r2, [r3, #4]
  return 0;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_isatty>:

int _isatty(int file)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fe4:	2301      	movs	r3, #1
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003014:	4a14      	ldr	r2, [pc, #80]	@ (8003068 <_sbrk+0x5c>)
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <_sbrk+0x60>)
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003020:	4b13      	ldr	r3, [pc, #76]	@ (8003070 <_sbrk+0x64>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d102      	bne.n	800302e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003028:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <_sbrk+0x64>)
 800302a:	4a12      	ldr	r2, [pc, #72]	@ (8003074 <_sbrk+0x68>)
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800302e:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <_sbrk+0x64>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	429a      	cmp	r2, r3
 800303a:	d207      	bcs.n	800304c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800303c:	f003 fe54 	bl	8006ce8 <__errno>
 8003040:	4603      	mov	r3, r0
 8003042:	220c      	movs	r2, #12
 8003044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800304a:	e009      	b.n	8003060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800304c:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <_sbrk+0x64>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003052:	4b07      	ldr	r3, [pc, #28]	@ (8003070 <_sbrk+0x64>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	4a05      	ldr	r2, [pc, #20]	@ (8003070 <_sbrk+0x64>)
 800305c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800305e:	68fb      	ldr	r3, [r7, #12]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20020000 	.word	0x20020000
 800306c:	00000400 	.word	0x00000400
 8003070:	20000568 	.word	0x20000568
 8003074:	200006c0 	.word	0x200006c0

08003078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800307c:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <SystemInit+0x20>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003082:	4a05      	ldr	r2, [pc, #20]	@ (8003098 <SystemInit+0x20>)
 8003084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800309c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80030a0:	f7ff ffea 	bl	8003078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030a4:	480c      	ldr	r0, [pc, #48]	@ (80030d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030a6:	490d      	ldr	r1, [pc, #52]	@ (80030dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030a8:	4a0d      	ldr	r2, [pc, #52]	@ (80030e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030ac:	e002      	b.n	80030b4 <LoopCopyDataInit>

080030ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030b2:	3304      	adds	r3, #4

080030b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030b8:	d3f9      	bcc.n	80030ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ba:	4a0a      	ldr	r2, [pc, #40]	@ (80030e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030bc:	4c0a      	ldr	r4, [pc, #40]	@ (80030e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c0:	e001      	b.n	80030c6 <LoopFillZerobss>

080030c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c4:	3204      	adds	r2, #4

080030c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030c8:	d3fb      	bcc.n	80030c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80030ca:	f003 fe13 	bl	8006cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ce:	f7ff fadf 	bl	8002690 <main>
  bx  lr    
 80030d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030dc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80030e0:	08009524 	.word	0x08009524
  ldr r2, =_sbss
 80030e4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80030e8:	200006bc 	.word	0x200006bc

080030ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030ec:	e7fe      	b.n	80030ec <ADC_IRQHandler>
	...

080030f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003130 <HAL_Init+0x40>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003130 <HAL_Init+0x40>)
 80030fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_Init+0x40>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0a      	ldr	r2, [pc, #40]	@ (8003130 <HAL_Init+0x40>)
 8003106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800310a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800310c:	4b08      	ldr	r3, [pc, #32]	@ (8003130 <HAL_Init+0x40>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a07      	ldr	r2, [pc, #28]	@ (8003130 <HAL_Init+0x40>)
 8003112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003118:	2003      	movs	r0, #3
 800311a:	f000 f9f8 	bl	800350e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800311e:	200f      	movs	r0, #15
 8003120:	f7ff fe36 	bl	8002d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003124:	f7ff fcec 	bl	8002b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023c00 	.word	0x40023c00

08003134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003138:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_IncTick+0x20>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <HAL_IncTick+0x24>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4413      	add	r3, r2
 8003144:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <HAL_IncTick+0x24>)
 8003146:	6013      	str	r3, [r2, #0]
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	2000000c 	.word	0x2000000c
 8003158:	2000056c 	.word	0x2000056c

0800315c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return uwTick;
 8003160:	4b03      	ldr	r3, [pc, #12]	@ (8003170 <HAL_GetTick+0x14>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	2000056c 	.word	0x2000056c

08003174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800317c:	f7ff ffee 	bl	800315c <HAL_GetTick>
 8003180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800318c:	d005      	beq.n	800319a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800318e:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_Delay+0x44>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800319a:	bf00      	nop
 800319c:	f7ff ffde 	bl	800315c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d8f7      	bhi.n	800319c <HAL_Delay+0x28>
  {
  }
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2000000c 	.word	0x2000000c

080031bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0ed      	b.n	80033aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fcb8 	bl	8002b50 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f0:	f7ff ffb4 	bl	800315c <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031f6:	e012      	b.n	800321e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031f8:	f7ff ffb0 	bl	800315c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b0a      	cmp	r3, #10
 8003204:	d90b      	bls.n	800321e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2205      	movs	r2, #5
 8003216:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0c5      	b.n	80033aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0e5      	beq.n	80031f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0202 	bic.w	r2, r2, #2
 800323a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800323c:	f7ff ff8e 	bl	800315c <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003242:	e012      	b.n	800326a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003244:	f7ff ff8a 	bl	800315c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b0a      	cmp	r3, #10
 8003250:	d90b      	bls.n	800326a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2205      	movs	r2, #5
 8003262:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e09f      	b.n	80033aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e5      	bne.n	8003244 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7e1b      	ldrb	r3, [r3, #24]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d108      	bne.n	8003292 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e007      	b.n	80032a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	7e5b      	ldrb	r3, [r3, #25]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d108      	bne.n	80032bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e007      	b.n	80032cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	7e9b      	ldrb	r3, [r3, #26]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d108      	bne.n	80032e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0220 	orr.w	r2, r2, #32
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e007      	b.n	80032f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0220 	bic.w	r2, r2, #32
 80032f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7edb      	ldrb	r3, [r3, #27]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d108      	bne.n	8003310 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0210 	bic.w	r2, r2, #16
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	e007      	b.n	8003320 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0210 	orr.w	r2, r2, #16
 800331e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	7f1b      	ldrb	r3, [r3, #28]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d108      	bne.n	800333a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0208 	orr.w	r2, r2, #8
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e007      	b.n	800334a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0208 	bic.w	r2, r2, #8
 8003348:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7f5b      	ldrb	r3, [r3, #29]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d108      	bne.n	8003364 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0204 	orr.w	r2, r2, #4
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	e007      	b.n	8003374 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0204 	bic.w	r2, r2, #4
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	ea42 0103 	orr.w	r1, r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	1e5a      	subs	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c4:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033d0:	4013      	ands	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e6:	4a04      	ldr	r2, [pc, #16]	@ (80033f8 <__NVIC_SetPriorityGrouping+0x44>)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	60d3      	str	r3, [r2, #12]
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003400:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <__NVIC_GetPriorityGrouping+0x18>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	0a1b      	lsrs	r3, r3, #8
 8003406:	f003 0307 	and.w	r3, r3, #7
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	2b00      	cmp	r3, #0
 8003428:	db0b      	blt.n	8003442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	4907      	ldr	r1, [pc, #28]	@ (8003450 <__NVIC_EnableIRQ+0x38>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2001      	movs	r0, #1
 800343a:	fa00 f202 	lsl.w	r2, r0, r2
 800343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	e000e100 	.word	0xe000e100

08003454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	6039      	str	r1, [r7, #0]
 800345e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003464:	2b00      	cmp	r3, #0
 8003466:	db0a      	blt.n	800347e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	490c      	ldr	r1, [pc, #48]	@ (80034a0 <__NVIC_SetPriority+0x4c>)
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	0112      	lsls	r2, r2, #4
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	440b      	add	r3, r1
 8003478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800347c:	e00a      	b.n	8003494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	4908      	ldr	r1, [pc, #32]	@ (80034a4 <__NVIC_SetPriority+0x50>)
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	3b04      	subs	r3, #4
 800348c:	0112      	lsls	r2, r2, #4
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	440b      	add	r3, r1
 8003492:	761a      	strb	r2, [r3, #24]
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000e100 	.word	0xe000e100
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b089      	sub	sp, #36	@ 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f1c3 0307 	rsb	r3, r3, #7
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	bf28      	it	cs
 80034c6:	2304      	movcs	r3, #4
 80034c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3304      	adds	r3, #4
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d902      	bls.n	80034d8 <NVIC_EncodePriority+0x30>
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3b03      	subs	r3, #3
 80034d6:	e000      	b.n	80034da <NVIC_EncodePriority+0x32>
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43da      	mvns	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	401a      	ands	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	43d9      	mvns	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003500:	4313      	orrs	r3, r2
         );
}
 8003502:	4618      	mov	r0, r3
 8003504:	3724      	adds	r7, #36	@ 0x24
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ff4c 	bl	80033b4 <__NVIC_SetPriorityGrouping>
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003536:	f7ff ff61 	bl	80033fc <__NVIC_GetPriorityGrouping>
 800353a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	6978      	ldr	r0, [r7, #20]
 8003542:	f7ff ffb1 	bl	80034a8 <NVIC_EncodePriority>
 8003546:	4602      	mov	r2, r0
 8003548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ff80 	bl	8003454 <__NVIC_SetPriority>
}
 8003554:	bf00      	nop
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff54 	bl	8003418 <__NVIC_EnableIRQ>
}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	@ 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	e165      	b.n	8003860 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003594:	2201      	movs	r2, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f040 8154 	bne.w	800385a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d005      	beq.n	80035ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d130      	bne.n	800362c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	2203      	movs	r2, #3
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003600:	2201      	movs	r2, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 0201 	and.w	r2, r3, #1
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b03      	cmp	r3, #3
 8003636:	d017      	beq.n	8003668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2203      	movs	r2, #3
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d123      	bne.n	80036bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	08da      	lsrs	r2, r3, #3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3208      	adds	r2, #8
 800367c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	220f      	movs	r2, #15
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	08da      	lsrs	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3208      	adds	r2, #8
 80036b6:	69b9      	ldr	r1, [r7, #24]
 80036b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2203      	movs	r2, #3
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0203 	and.w	r2, r3, #3
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80ae 	beq.w	800385a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	4b5d      	ldr	r3, [pc, #372]	@ (8003878 <HAL_GPIO_Init+0x300>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	4a5c      	ldr	r2, [pc, #368]	@ (8003878 <HAL_GPIO_Init+0x300>)
 8003708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800370c:	6453      	str	r3, [r2, #68]	@ 0x44
 800370e:	4b5a      	ldr	r3, [pc, #360]	@ (8003878 <HAL_GPIO_Init+0x300>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800371a:	4a58      	ldr	r2, [pc, #352]	@ (800387c <HAL_GPIO_Init+0x304>)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	3302      	adds	r3, #2
 8003722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	220f      	movs	r2, #15
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a4f      	ldr	r2, [pc, #316]	@ (8003880 <HAL_GPIO_Init+0x308>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d025      	beq.n	8003792 <HAL_GPIO_Init+0x21a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a4e      	ldr	r2, [pc, #312]	@ (8003884 <HAL_GPIO_Init+0x30c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01f      	beq.n	800378e <HAL_GPIO_Init+0x216>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a4d      	ldr	r2, [pc, #308]	@ (8003888 <HAL_GPIO_Init+0x310>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d019      	beq.n	800378a <HAL_GPIO_Init+0x212>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a4c      	ldr	r2, [pc, #304]	@ (800388c <HAL_GPIO_Init+0x314>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d013      	beq.n	8003786 <HAL_GPIO_Init+0x20e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a4b      	ldr	r2, [pc, #300]	@ (8003890 <HAL_GPIO_Init+0x318>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00d      	beq.n	8003782 <HAL_GPIO_Init+0x20a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a4a      	ldr	r2, [pc, #296]	@ (8003894 <HAL_GPIO_Init+0x31c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d007      	beq.n	800377e <HAL_GPIO_Init+0x206>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a49      	ldr	r2, [pc, #292]	@ (8003898 <HAL_GPIO_Init+0x320>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d101      	bne.n	800377a <HAL_GPIO_Init+0x202>
 8003776:	2306      	movs	r3, #6
 8003778:	e00c      	b.n	8003794 <HAL_GPIO_Init+0x21c>
 800377a:	2307      	movs	r3, #7
 800377c:	e00a      	b.n	8003794 <HAL_GPIO_Init+0x21c>
 800377e:	2305      	movs	r3, #5
 8003780:	e008      	b.n	8003794 <HAL_GPIO_Init+0x21c>
 8003782:	2304      	movs	r3, #4
 8003784:	e006      	b.n	8003794 <HAL_GPIO_Init+0x21c>
 8003786:	2303      	movs	r3, #3
 8003788:	e004      	b.n	8003794 <HAL_GPIO_Init+0x21c>
 800378a:	2302      	movs	r3, #2
 800378c:	e002      	b.n	8003794 <HAL_GPIO_Init+0x21c>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_GPIO_Init+0x21c>
 8003792:	2300      	movs	r3, #0
 8003794:	69fa      	ldr	r2, [r7, #28]
 8003796:	f002 0203 	and.w	r2, r2, #3
 800379a:	0092      	lsls	r2, r2, #2
 800379c:	4093      	lsls	r3, r2
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037a4:	4935      	ldr	r1, [pc, #212]	@ (800387c <HAL_GPIO_Init+0x304>)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	3302      	adds	r3, #2
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037b2:	4b3a      	ldr	r3, [pc, #232]	@ (800389c <HAL_GPIO_Init+0x324>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037d6:	4a31      	ldr	r2, [pc, #196]	@ (800389c <HAL_GPIO_Init+0x324>)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037dc:	4b2f      	ldr	r3, [pc, #188]	@ (800389c <HAL_GPIO_Init+0x324>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003800:	4a26      	ldr	r2, [pc, #152]	@ (800389c <HAL_GPIO_Init+0x324>)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003806:	4b25      	ldr	r3, [pc, #148]	@ (800389c <HAL_GPIO_Init+0x324>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800382a:	4a1c      	ldr	r2, [pc, #112]	@ (800389c <HAL_GPIO_Init+0x324>)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003830:	4b1a      	ldr	r3, [pc, #104]	@ (800389c <HAL_GPIO_Init+0x324>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003854:	4a11      	ldr	r2, [pc, #68]	@ (800389c <HAL_GPIO_Init+0x324>)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3301      	adds	r3, #1
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b0f      	cmp	r3, #15
 8003864:	f67f ae96 	bls.w	8003594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	3724      	adds	r7, #36	@ 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	40013800 	.word	0x40013800
 8003880:	40020000 	.word	0x40020000
 8003884:	40020400 	.word	0x40020400
 8003888:	40020800 	.word	0x40020800
 800388c:	40020c00 	.word	0x40020c00
 8003890:	40021000 	.word	0x40021000
 8003894:	40021400 	.word	0x40021400
 8003898:	40021800 	.word	0x40021800
 800389c:	40013c00 	.word	0x40013c00

080038a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
 80038ac:	4613      	mov	r3, r2
 80038ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b0:	787b      	ldrb	r3, [r7, #1]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038bc:	e003      	b.n	80038c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038be:	887b      	ldrh	r3, [r7, #2]
 80038c0:	041a      	lsls	r2, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	619a      	str	r2, [r3, #24]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e12b      	b.n	8003b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff f970 	bl	8002be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2224      	movs	r2, #36	@ 0x24
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003938:	f000 fa02 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 800393c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4a81      	ldr	r2, [pc, #516]	@ (8003b48 <HAL_I2C_Init+0x274>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d807      	bhi.n	8003958 <HAL_I2C_Init+0x84>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a80      	ldr	r2, [pc, #512]	@ (8003b4c <HAL_I2C_Init+0x278>)
 800394c:	4293      	cmp	r3, r2
 800394e:	bf94      	ite	ls
 8003950:	2301      	movls	r3, #1
 8003952:	2300      	movhi	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e006      	b.n	8003966 <HAL_I2C_Init+0x92>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b50 <HAL_I2C_Init+0x27c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	bf94      	ite	ls
 8003960:	2301      	movls	r3, #1
 8003962:	2300      	movhi	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e0e7      	b.n	8003b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4a78      	ldr	r2, [pc, #480]	@ (8003b54 <HAL_I2C_Init+0x280>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	0c9b      	lsrs	r3, r3, #18
 8003978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a6a      	ldr	r2, [pc, #424]	@ (8003b48 <HAL_I2C_Init+0x274>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d802      	bhi.n	80039a8 <HAL_I2C_Init+0xd4>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	3301      	adds	r3, #1
 80039a6:	e009      	b.n	80039bc <HAL_I2C_Init+0xe8>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039ae:	fb02 f303 	mul.w	r3, r2, r3
 80039b2:	4a69      	ldr	r2, [pc, #420]	@ (8003b58 <HAL_I2C_Init+0x284>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	3301      	adds	r3, #1
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	495c      	ldr	r1, [pc, #368]	@ (8003b48 <HAL_I2C_Init+0x274>)
 80039d8:	428b      	cmp	r3, r1
 80039da:	d819      	bhi.n	8003a10 <HAL_I2C_Init+0x13c>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	1e59      	subs	r1, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ea:	1c59      	adds	r1, r3, #1
 80039ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039f0:	400b      	ands	r3, r1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_I2C_Init+0x138>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1e59      	subs	r1, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0a:	e051      	b.n	8003ab0 <HAL_I2C_Init+0x1dc>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	e04f      	b.n	8003ab0 <HAL_I2C_Init+0x1dc>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d111      	bne.n	8003a3c <HAL_I2C_Init+0x168>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	1e58      	subs	r0, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	440b      	add	r3, r1
 8003a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e012      	b.n	8003a62 <HAL_I2C_Init+0x18e>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	0099      	lsls	r1, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Init+0x196>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e022      	b.n	8003ab0 <HAL_I2C_Init+0x1dc>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10e      	bne.n	8003a90 <HAL_I2C_Init+0x1bc>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1e58      	subs	r0, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	440b      	add	r3, r1
 8003a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a84:	3301      	adds	r3, #1
 8003a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a8e:	e00f      	b.n	8003ab0 <HAL_I2C_Init+0x1dc>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1e58      	subs	r0, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	0099      	lsls	r1, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	6809      	ldr	r1, [r1, #0]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ade:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6911      	ldr	r1, [r2, #16]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68d2      	ldr	r2, [r2, #12]
 8003aea:	4311      	orrs	r1, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	000186a0 	.word	0x000186a0
 8003b4c:	001e847f 	.word	0x001e847f
 8003b50:	003d08ff 	.word	0x003d08ff
 8003b54:	431bde83 	.word	0x431bde83
 8003b58:	10624dd3 	.word	0x10624dd3

08003b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0cc      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b70:	4b68      	ldr	r3, [pc, #416]	@ (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d90c      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b65      	ldr	r3, [pc, #404]	@ (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b63      	ldr	r3, [pc, #396]	@ (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0b8      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb0:	4b59      	ldr	r3, [pc, #356]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a58      	ldr	r2, [pc, #352]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc8:	4b53      	ldr	r3, [pc, #332]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b50      	ldr	r3, [pc, #320]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	494d      	ldr	r1, [pc, #308]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d044      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b47      	ldr	r3, [pc, #284]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d119      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d003      	beq.n	8003c1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e067      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3a:	4b37      	ldr	r3, [pc, #220]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f023 0203 	bic.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4934      	ldr	r1, [pc, #208]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c4c:	f7ff fa86 	bl	800315c <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c54:	f7ff fa82 	bl	800315c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e04f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 020c 	and.w	r2, r3, #12
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d1eb      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b25      	ldr	r3, [pc, #148]	@ (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d20c      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b22      	ldr	r3, [pc, #136]	@ (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b20      	ldr	r3, [pc, #128]	@ (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e032      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	4b19      	ldr	r3, [pc, #100]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4916      	ldr	r1, [pc, #88]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cce:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	490e      	ldr	r1, [pc, #56]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ce2:	f000 f887 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	490a      	ldr	r1, [pc, #40]	@ (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	5ccb      	ldrb	r3, [r1, r3]
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	4a09      	ldr	r2, [pc, #36]	@ (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cfe:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <HAL_RCC_ClockConfig+0x1c8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff f844 	bl	8002d90 <HAL_InitTick>

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023c00 	.word	0x40023c00
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	08009184 	.word	0x08009184
 8003d20:	20000004 	.word	0x20000004
 8003d24:	20000008 	.word	0x20000008

08003d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	@ (8003d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	20000004 	.word	0x20000004

08003d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d44:	f7ff fff0 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b05      	ldr	r3, [pc, #20]	@ (8003d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	0a9b      	lsrs	r3, r3, #10
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	4903      	ldr	r1, [pc, #12]	@ (8003d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40023800 	.word	0x40023800
 8003d64:	08009194 	.word	0x08009194

08003d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d6c:	f7ff ffdc 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b05      	ldr	r3, [pc, #20]	@ (8003d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	0b5b      	lsrs	r3, r3, #13
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4903      	ldr	r1, [pc, #12]	@ (8003d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	08009194 	.word	0x08009194

08003d90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	220f      	movs	r2, #15
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003da0:	4b12      	ldr	r3, [pc, #72]	@ (8003dec <HAL_RCC_GetClockConfig+0x5c>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0203 	and.w	r2, r3, #3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dac:	4b0f      	ldr	r3, [pc, #60]	@ (8003dec <HAL_RCC_GetClockConfig+0x5c>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003db8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <HAL_RCC_GetClockConfig+0x5c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dc4:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <HAL_RCC_GetClockConfig+0x5c>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	08db      	lsrs	r3, r3, #3
 8003dca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dd2:	4b07      	ldr	r3, [pc, #28]	@ (8003df0 <HAL_RCC_GetClockConfig+0x60>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 020f 	and.w	r2, r3, #15
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40023c00 	.word	0x40023c00

08003df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df8:	b0ae      	sub	sp, #184	@ 0xb8
 8003dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e1a:	4bcb      	ldr	r3, [pc, #812]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	f200 8206 	bhi.w	8004234 <HAL_RCC_GetSysClockFreq+0x440>
 8003e28:	a201      	add	r2, pc, #4	@ (adr r2, 8003e30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e65 	.word	0x08003e65
 8003e34:	08004235 	.word	0x08004235
 8003e38:	08004235 	.word	0x08004235
 8003e3c:	08004235 	.word	0x08004235
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08004235 	.word	0x08004235
 8003e48:	08004235 	.word	0x08004235
 8003e4c:	08004235 	.word	0x08004235
 8003e50:	08003e75 	.word	0x08003e75
 8003e54:	08004235 	.word	0x08004235
 8003e58:	08004235 	.word	0x08004235
 8003e5c:	08004235 	.word	0x08004235
 8003e60:	08004065 	.word	0x08004065
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e64:	4bb9      	ldr	r3, [pc, #740]	@ (800414c <HAL_RCC_GetSysClockFreq+0x358>)
 8003e66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e6a:	e1e7      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e6c:	4bb8      	ldr	r3, [pc, #736]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e72:	e1e3      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e74:	4bb4      	ldr	r3, [pc, #720]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e80:	4bb1      	ldr	r3, [pc, #708]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d071      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8c:	4bae      	ldr	r3, [pc, #696]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	099b      	lsrs	r3, r3, #6
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e98:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	f04f 0000 	mov.w	r0, #0
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	0159      	lsls	r1, r3, #5
 8003ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec4:	0150      	lsls	r0, r2, #5
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4621      	mov	r1, r4
 8003ecc:	1a51      	subs	r1, r2, r1
 8003ece:	6439      	str	r1, [r7, #64]	@ 0x40
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	018b      	lsls	r3, r1, #6
 8003ee8:	4641      	mov	r1, r8
 8003eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eee:	4641      	mov	r1, r8
 8003ef0:	018a      	lsls	r2, r1, #6
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	1a51      	subs	r1, r2, r1
 8003ef6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ef8:	4649      	mov	r1, r9
 8003efa:	eb63 0301 	sbc.w	r3, r3, r1
 8003efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	00cb      	lsls	r3, r1, #3
 8003f10:	4641      	mov	r1, r8
 8003f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f16:	4641      	mov	r1, r8
 8003f18:	00ca      	lsls	r2, r1, #3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4622      	mov	r2, r4
 8003f22:	189b      	adds	r3, r3, r2
 8003f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f26:	462b      	mov	r3, r5
 8003f28:	460a      	mov	r2, r1
 8003f2a:	eb42 0303 	adc.w	r3, r2, r3
 8003f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	024b      	lsls	r3, r1, #9
 8003f40:	4621      	mov	r1, r4
 8003f42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f46:	4621      	mov	r1, r4
 8003f48:	024a      	lsls	r2, r1, #9
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f60:	f7fc fe92 	bl	8000c88 <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4613      	mov	r3, r2
 8003f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f6e:	e067      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f70:	4b75      	ldr	r3, [pc, #468]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f7c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003f80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003f92:	4622      	mov	r2, r4
 8003f94:	462b      	mov	r3, r5
 8003f96:	f04f 0000 	mov.w	r0, #0
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	0159      	lsls	r1, r3, #5
 8003fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa4:	0150      	lsls	r0, r2, #5
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4621      	mov	r1, r4
 8003fac:	1a51      	subs	r1, r2, r1
 8003fae:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	018b      	lsls	r3, r1, #6
 8003fc8:	4641      	mov	r1, r8
 8003fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fce:	4641      	mov	r1, r8
 8003fd0:	018a      	lsls	r2, r1, #6
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fd8:	4649      	mov	r1, r9
 8003fda:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ff2:	4692      	mov	sl, r2
 8003ff4:	469b      	mov	fp, r3
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	eb1a 0303 	adds.w	r3, sl, r3
 8003ffc:	623b      	str	r3, [r7, #32]
 8003ffe:	462b      	mov	r3, r5
 8004000:	eb4b 0303 	adc.w	r3, fp, r3
 8004004:	627b      	str	r3, [r7, #36]	@ 0x24
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004012:	4629      	mov	r1, r5
 8004014:	028b      	lsls	r3, r1, #10
 8004016:	4621      	mov	r1, r4
 8004018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800401c:	4621      	mov	r1, r4
 800401e:	028a      	lsls	r2, r1, #10
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004028:	2200      	movs	r2, #0
 800402a:	673b      	str	r3, [r7, #112]	@ 0x70
 800402c:	677a      	str	r2, [r7, #116]	@ 0x74
 800402e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004032:	f7fc fe29 	bl	8000c88 <__aeabi_uldivmod>
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4613      	mov	r3, r2
 800403c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004040:	4b41      	ldr	r3, [pc, #260]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x354>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	3301      	adds	r3, #1
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004062:	e0eb      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004064:	4b38      	ldr	r3, [pc, #224]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x354>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800406c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004070:	4b35      	ldr	r3, [pc, #212]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x354>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d06b      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407c:	4b32      	ldr	r3, [pc, #200]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x354>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	099b      	lsrs	r3, r3, #6
 8004082:	2200      	movs	r2, #0
 8004084:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004086:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004088:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800408a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004090:	2300      	movs	r3, #0
 8004092:	667b      	str	r3, [r7, #100]	@ 0x64
 8004094:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004098:	4622      	mov	r2, r4
 800409a:	462b      	mov	r3, r5
 800409c:	f04f 0000 	mov.w	r0, #0
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	0159      	lsls	r1, r3, #5
 80040a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040aa:	0150      	lsls	r0, r2, #5
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4621      	mov	r1, r4
 80040b2:	1a51      	subs	r1, r2, r1
 80040b4:	61b9      	str	r1, [r7, #24]
 80040b6:	4629      	mov	r1, r5
 80040b8:	eb63 0301 	sbc.w	r3, r3, r1
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040ca:	4659      	mov	r1, fp
 80040cc:	018b      	lsls	r3, r1, #6
 80040ce:	4651      	mov	r1, sl
 80040d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040d4:	4651      	mov	r1, sl
 80040d6:	018a      	lsls	r2, r1, #6
 80040d8:	4651      	mov	r1, sl
 80040da:	ebb2 0801 	subs.w	r8, r2, r1
 80040de:	4659      	mov	r1, fp
 80040e0:	eb63 0901 	sbc.w	r9, r3, r1
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040f8:	4690      	mov	r8, r2
 80040fa:	4699      	mov	r9, r3
 80040fc:	4623      	mov	r3, r4
 80040fe:	eb18 0303 	adds.w	r3, r8, r3
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	462b      	mov	r3, r5
 8004106:	eb49 0303 	adc.w	r3, r9, r3
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004118:	4629      	mov	r1, r5
 800411a:	024b      	lsls	r3, r1, #9
 800411c:	4621      	mov	r1, r4
 800411e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004122:	4621      	mov	r1, r4
 8004124:	024a      	lsls	r2, r1, #9
 8004126:	4610      	mov	r0, r2
 8004128:	4619      	mov	r1, r3
 800412a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800412e:	2200      	movs	r2, #0
 8004130:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004132:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004134:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004138:	f7fc fda6 	bl	8000c88 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4613      	mov	r3, r2
 8004142:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004146:	e065      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x420>
 8004148:	40023800 	.word	0x40023800
 800414c:	00f42400 	.word	0x00f42400
 8004150:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004154:	4b3d      	ldr	r3, [pc, #244]	@ (800424c <HAL_RCC_GetSysClockFreq+0x458>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	099b      	lsrs	r3, r3, #6
 800415a:	2200      	movs	r2, #0
 800415c:	4618      	mov	r0, r3
 800415e:	4611      	mov	r1, r2
 8004160:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004164:	653b      	str	r3, [r7, #80]	@ 0x50
 8004166:	2300      	movs	r3, #0
 8004168:	657b      	str	r3, [r7, #84]	@ 0x54
 800416a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800416e:	4642      	mov	r2, r8
 8004170:	464b      	mov	r3, r9
 8004172:	f04f 0000 	mov.w	r0, #0
 8004176:	f04f 0100 	mov.w	r1, #0
 800417a:	0159      	lsls	r1, r3, #5
 800417c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004180:	0150      	lsls	r0, r2, #5
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4641      	mov	r1, r8
 8004188:	1a51      	subs	r1, r2, r1
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	4649      	mov	r1, r9
 800418e:	eb63 0301 	sbc.w	r3, r3, r1
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041a0:	4659      	mov	r1, fp
 80041a2:	018b      	lsls	r3, r1, #6
 80041a4:	4651      	mov	r1, sl
 80041a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041aa:	4651      	mov	r1, sl
 80041ac:	018a      	lsls	r2, r1, #6
 80041ae:	4651      	mov	r1, sl
 80041b0:	1a54      	subs	r4, r2, r1
 80041b2:	4659      	mov	r1, fp
 80041b4:	eb63 0501 	sbc.w	r5, r3, r1
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	00eb      	lsls	r3, r5, #3
 80041c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041c6:	00e2      	lsls	r2, r4, #3
 80041c8:	4614      	mov	r4, r2
 80041ca:	461d      	mov	r5, r3
 80041cc:	4643      	mov	r3, r8
 80041ce:	18e3      	adds	r3, r4, r3
 80041d0:	603b      	str	r3, [r7, #0]
 80041d2:	464b      	mov	r3, r9
 80041d4:	eb45 0303 	adc.w	r3, r5, r3
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041e6:	4629      	mov	r1, r5
 80041e8:	028b      	lsls	r3, r1, #10
 80041ea:	4621      	mov	r1, r4
 80041ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041f0:	4621      	mov	r1, r4
 80041f2:	028a      	lsls	r2, r1, #10
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041fc:	2200      	movs	r2, #0
 80041fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004200:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004202:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004206:	f7fc fd3f 	bl	8000c88 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4613      	mov	r3, r2
 8004210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004214:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <HAL_RCC_GetSysClockFreq+0x458>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	0f1b      	lsrs	r3, r3, #28
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800422a:	fbb2 f3f3 	udiv	r3, r2, r3
 800422e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004232:	e003      	b.n	800423c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004234:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004236:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800423a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800423c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004240:	4618      	mov	r0, r3
 8004242:	37b8      	adds	r7, #184	@ 0xb8
 8004244:	46bd      	mov	sp, r7
 8004246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800
 8004250:	00f42400 	.word	0x00f42400

08004254 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e28d      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8083 	beq.w	800437a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004274:	4b94      	ldr	r3, [pc, #592]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 030c 	and.w	r3, r3, #12
 800427c:	2b04      	cmp	r3, #4
 800427e:	d019      	beq.n	80042b4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004280:	4b91      	ldr	r3, [pc, #580]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 030c 	and.w	r3, r3, #12
        || \
 8004288:	2b08      	cmp	r3, #8
 800428a:	d106      	bne.n	800429a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800428c:	4b8e      	ldr	r3, [pc, #568]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004294:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004298:	d00c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429a:	4b8b      	ldr	r3, [pc, #556]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80042a2:	2b0c      	cmp	r3, #12
 80042a4:	d112      	bne.n	80042cc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a6:	4b88      	ldr	r3, [pc, #544]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042b2:	d10b      	bne.n	80042cc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	4b84      	ldr	r3, [pc, #528]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05b      	beq.n	8004378 <HAL_RCC_OscConfig+0x124>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d157      	bne.n	8004378 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e25a      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d4:	d106      	bne.n	80042e4 <HAL_RCC_OscConfig+0x90>
 80042d6:	4b7c      	ldr	r3, [pc, #496]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7b      	ldr	r2, [pc, #492]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e01d      	b.n	8004320 <HAL_RCC_OscConfig+0xcc>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0xb4>
 80042ee:	4b76      	ldr	r3, [pc, #472]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a75      	ldr	r2, [pc, #468]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80042f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b73      	ldr	r3, [pc, #460]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a72      	ldr	r2, [pc, #456]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e00b      	b.n	8004320 <HAL_RCC_OscConfig+0xcc>
 8004308:	4b6f      	ldr	r3, [pc, #444]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a6e      	ldr	r2, [pc, #440]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 800430e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b6c      	ldr	r3, [pc, #432]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a6b      	ldr	r2, [pc, #428]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 800431a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800431e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fe ff18 	bl	800315c <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004330:	f7fe ff14 	bl	800315c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	@ 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e21f      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	4b61      	ldr	r3, [pc, #388]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0xdc>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fe ff04 	bl	800315c <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004358:	f7fe ff00 	bl	800315c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	@ 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e20b      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	4b57      	ldr	r3, [pc, #348]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x104>
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d06f      	beq.n	8004466 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004386:	4b50      	ldr	r3, [pc, #320]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b00      	cmp	r3, #0
 8004390:	d017      	beq.n	80043c2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004392:	4b4d      	ldr	r3, [pc, #308]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
        || \
 800439a:	2b08      	cmp	r3, #8
 800439c:	d105      	bne.n	80043aa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800439e:	4b4a      	ldr	r3, [pc, #296]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043aa:	4b47      	ldr	r3, [pc, #284]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d11c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b6:	4b44      	ldr	r3, [pc, #272]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	4b41      	ldr	r3, [pc, #260]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x186>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1d3      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b3b      	ldr	r3, [pc, #236]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4937      	ldr	r1, [pc, #220]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	e03a      	b.n	8004466 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f8:	4b34      	ldr	r3, [pc, #208]	@ (80044cc <HAL_RCC_OscConfig+0x278>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fe fead 	bl	800315c <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004406:	f7fe fea9 	bl	800315c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e1b4      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	4b2b      	ldr	r3, [pc, #172]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b28      	ldr	r3, [pc, #160]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4925      	ldr	r1, [pc, #148]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
 8004438:	e015      	b.n	8004466 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b24      	ldr	r3, [pc, #144]	@ (80044cc <HAL_RCC_OscConfig+0x278>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fe fe8c 	bl	800315c <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004448:	f7fe fe88 	bl	800315c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e193      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	4b1b      	ldr	r3, [pc, #108]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d036      	beq.n	80044e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <HAL_RCC_OscConfig+0x27c>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fe fe6c 	bl	800315c <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004488:	f7fe fe68 	bl	800315c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e173      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <HAL_RCC_OscConfig+0x274>)
 800449c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x234>
 80044a6:	e01b      	b.n	80044e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a8:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <HAL_RCC_OscConfig+0x27c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ae:	f7fe fe55 	bl	800315c <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	e00e      	b.n	80044d4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b6:	f7fe fe51 	bl	800315c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d907      	bls.n	80044d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e15c      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
 80044c8:	40023800 	.word	0x40023800
 80044cc:	42470000 	.word	0x42470000
 80044d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d4:	4b8a      	ldr	r3, [pc, #552]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 80044d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ea      	bne.n	80044b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8097 	beq.w	800461c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ee:	2300      	movs	r3, #0
 80044f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f2:	4b83      	ldr	r3, [pc, #524]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	4b7f      	ldr	r3, [pc, #508]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	4a7e      	ldr	r2, [pc, #504]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 8004508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800450c:	6413      	str	r3, [r2, #64]	@ 0x40
 800450e:	4b7c      	ldr	r3, [pc, #496]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451a:	2301      	movs	r3, #1
 800451c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451e:	4b79      	ldr	r3, [pc, #484]	@ (8004704 <HAL_RCC_OscConfig+0x4b0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d118      	bne.n	800455c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452a:	4b76      	ldr	r3, [pc, #472]	@ (8004704 <HAL_RCC_OscConfig+0x4b0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a75      	ldr	r2, [pc, #468]	@ (8004704 <HAL_RCC_OscConfig+0x4b0>)
 8004530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004536:	f7fe fe11 	bl	800315c <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453e:	f7fe fe0d 	bl	800315c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e118      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004550:	4b6c      	ldr	r3, [pc, #432]	@ (8004704 <HAL_RCC_OscConfig+0x4b0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d106      	bne.n	8004572 <HAL_RCC_OscConfig+0x31e>
 8004564:	4b66      	ldr	r3, [pc, #408]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004568:	4a65      	ldr	r2, [pc, #404]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004570:	e01c      	b.n	80045ac <HAL_RCC_OscConfig+0x358>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b05      	cmp	r3, #5
 8004578:	d10c      	bne.n	8004594 <HAL_RCC_OscConfig+0x340>
 800457a:	4b61      	ldr	r3, [pc, #388]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	4a60      	ldr	r2, [pc, #384]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 8004580:	f043 0304 	orr.w	r3, r3, #4
 8004584:	6713      	str	r3, [r2, #112]	@ 0x70
 8004586:	4b5e      	ldr	r3, [pc, #376]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	4a5d      	ldr	r2, [pc, #372]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6713      	str	r3, [r2, #112]	@ 0x70
 8004592:	e00b      	b.n	80045ac <HAL_RCC_OscConfig+0x358>
 8004594:	4b5a      	ldr	r3, [pc, #360]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	4a59      	ldr	r2, [pc, #356]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a0:	4b57      	ldr	r3, [pc, #348]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a4:	4a56      	ldr	r2, [pc, #344]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 80045a6:	f023 0304 	bic.w	r3, r3, #4
 80045aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d015      	beq.n	80045e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7fe fdd2 	bl	800315c <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fe fdce 	bl	800315c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e0d7      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0ee      	beq.n	80045bc <HAL_RCC_OscConfig+0x368>
 80045de:	e014      	b.n	800460a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fe fdbc 	bl	800315c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fe fdb8 	bl	800315c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0c1      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fe:	4b40      	ldr	r3, [pc, #256]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1ee      	bne.n	80045e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d105      	bne.n	800461c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004610:	4b3b      	ldr	r3, [pc, #236]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 8004612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004614:	4a3a      	ldr	r2, [pc, #232]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 8004616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800461a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80ad 	beq.w	8004780 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004626:	4b36      	ldr	r3, [pc, #216]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
 800462e:	2b08      	cmp	r3, #8
 8004630:	d060      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d145      	bne.n	80046c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463a:	4b33      	ldr	r3, [pc, #204]	@ (8004708 <HAL_RCC_OscConfig+0x4b4>)
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fe fd8c 	bl	800315c <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004648:	f7fe fd88 	bl	800315c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e093      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465a:	4b29      	ldr	r3, [pc, #164]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69da      	ldr	r2, [r3, #28]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	019b      	lsls	r3, r3, #6
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	085b      	lsrs	r3, r3, #1
 800467e:	3b01      	subs	r3, #1
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	071b      	lsls	r3, r3, #28
 8004692:	491b      	ldr	r1, [pc, #108]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004698:	4b1b      	ldr	r3, [pc, #108]	@ (8004708 <HAL_RCC_OscConfig+0x4b4>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fe fd5d 	bl	800315c <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a6:	f7fe fd59 	bl	800315c <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e064      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b8:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x452>
 80046c4:	e05c      	b.n	8004780 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <HAL_RCC_OscConfig+0x4b4>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fe fd46 	bl	800315c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fe fd42 	bl	800315c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e04d      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	4b06      	ldr	r3, [pc, #24]	@ (8004700 <HAL_RCC_OscConfig+0x4ac>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x480>
 80046f2:	e045      	b.n	8004780 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d107      	bne.n	800470c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e040      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
 8004700:	40023800 	.word	0x40023800
 8004704:	40007000 	.word	0x40007000
 8004708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800470c:	4b1f      	ldr	r3, [pc, #124]	@ (800478c <HAL_RCC_OscConfig+0x538>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d030      	beq.n	800477c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d129      	bne.n	800477c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d122      	bne.n	800477c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800473c:	4013      	ands	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004744:	4293      	cmp	r3, r2
 8004746:	d119      	bne.n	800477c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	3b01      	subs	r3, #1
 8004756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d10f      	bne.n	800477c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004768:	429a      	cmp	r2, r3
 800476a:	d107      	bne.n	800477c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004776:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800

08004790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e07b      	b.n	800489a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d108      	bne.n	80047bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047b2:	d009      	beq.n	80047c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	61da      	str	r2, [r3, #28]
 80047ba:	e005      	b.n	80047c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fe fa44 	bl	8002c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484c:	ea42 0103 	orr.w	r1, r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	0c1b      	lsrs	r3, r3, #16
 8004866:	f003 0104 	and.w	r1, r3, #4
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486e:	f003 0210 	and.w	r2, r3, #16
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004888:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b088      	sub	sp, #32
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048b2:	f7fe fc53 	bl	800315c <HAL_GetTick>
 80048b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d001      	beq.n	80048cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
 80048ca:	e12a      	b.n	8004b22 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_SPI_Transmit+0x36>
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e122      	b.n	8004b22 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_SPI_Transmit+0x48>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e11b      	b.n	8004b22 <HAL_SPI_Transmit+0x280>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2203      	movs	r2, #3
 80048f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004938:	d10f      	bne.n	800495a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004948:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004958:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004964:	2b40      	cmp	r3, #64	@ 0x40
 8004966:	d007      	beq.n	8004978 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004976:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004980:	d152      	bne.n	8004a28 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_SPI_Transmit+0xee>
 800498a:	8b7b      	ldrh	r3, [r7, #26]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d145      	bne.n	8004a1c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004994:	881a      	ldrh	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a0:	1c9a      	adds	r2, r3, #2
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049b4:	e032      	b.n	8004a1c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d112      	bne.n	80049ea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c8:	881a      	ldrh	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	1c9a      	adds	r2, r3, #2
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049e8:	e018      	b.n	8004a1c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ea:	f7fe fbb7 	bl	800315c <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d803      	bhi.n	8004a02 <HAL_SPI_Transmit+0x160>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a00:	d102      	bne.n	8004a08 <HAL_SPI_Transmit+0x166>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d109      	bne.n	8004a1c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e082      	b.n	8004b22 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1c7      	bne.n	80049b6 <HAL_SPI_Transmit+0x114>
 8004a26:	e053      	b.n	8004ad0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_SPI_Transmit+0x194>
 8004a30:	8b7b      	ldrh	r3, [r7, #26]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d147      	bne.n	8004ac6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	330c      	adds	r3, #12
 8004a40:	7812      	ldrb	r2, [r2, #0]
 8004a42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a5c:	e033      	b.n	8004ac6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d113      	bne.n	8004a94 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	7812      	ldrb	r2, [r2, #0]
 8004a78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a92:	e018      	b.n	8004ac6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a94:	f7fe fb62 	bl	800315c <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d803      	bhi.n	8004aac <HAL_SPI_Transmit+0x20a>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aaa:	d102      	bne.n	8004ab2 <HAL_SPI_Transmit+0x210>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e02d      	b.n	8004b22 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1c6      	bne.n	8004a5e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fbd9 	bl	800528c <SPI_EndRxTxTransaction>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004b20:	2300      	movs	r3, #0
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b088      	sub	sp, #32
 8004b2e:	af02      	add	r7, sp, #8
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d001      	beq.n	8004b4a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004b46:	2302      	movs	r3, #2
 8004b48:	e104      	b.n	8004d54 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b52:	d112      	bne.n	8004b7a <HAL_SPI_Receive+0x50>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10e      	bne.n	8004b7a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b64:	88fa      	ldrh	r2, [r7, #6]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f8f3 	bl	8004d5c <HAL_SPI_TransmitReceive>
 8004b76:	4603      	mov	r3, r0
 8004b78:	e0ec      	b.n	8004d54 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b7a:	f7fe faef 	bl	800315c <HAL_GetTick>
 8004b7e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_SPI_Receive+0x62>
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0e1      	b.n	8004d54 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_SPI_Receive+0x74>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e0da      	b.n	8004d54 <HAL_SPI_Receive+0x22a>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2204      	movs	r2, #4
 8004baa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	88fa      	ldrh	r2, [r7, #6]
 8004bbe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bec:	d10f      	bne.n	8004c0e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c0c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c18:	2b40      	cmp	r3, #64	@ 0x40
 8004c1a:	d007      	beq.n	8004c2c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c2a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d170      	bne.n	8004d16 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c34:	e035      	b.n	8004ca2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d115      	bne.n	8004c70 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f103 020c 	add.w	r2, r3, #12
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c50:	7812      	ldrb	r2, [r2, #0]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c6e:	e018      	b.n	8004ca2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c70:	f7fe fa74 	bl	800315c <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d803      	bhi.n	8004c88 <HAL_SPI_Receive+0x15e>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c86:	d102      	bne.n	8004c8e <HAL_SPI_Receive+0x164>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e058      	b.n	8004d54 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1c4      	bne.n	8004c36 <HAL_SPI_Receive+0x10c>
 8004cac:	e038      	b.n	8004d20 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d113      	bne.n	8004ce4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc6:	b292      	uxth	r2, r2
 8004cc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ce2:	e018      	b.n	8004d16 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ce4:	f7fe fa3a 	bl	800315c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d803      	bhi.n	8004cfc <HAL_SPI_Receive+0x1d2>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cfa:	d102      	bne.n	8004d02 <HAL_SPI_Receive+0x1d8>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d109      	bne.n	8004d16 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e01e      	b.n	8004d54 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1c6      	bne.n	8004cae <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	6839      	ldr	r1, [r7, #0]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fa4b 	bl	80051c0 <SPI_EndRxTransaction>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004d52:	2300      	movs	r3, #0
  }
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08a      	sub	sp, #40	@ 0x28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d6e:	f7fe f9f5 	bl	800315c <HAL_GetTick>
 8004d72:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d7a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d82:	887b      	ldrh	r3, [r7, #2]
 8004d84:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d86:	7ffb      	ldrb	r3, [r7, #31]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d00c      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0x4a>
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d92:	d106      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x46>
 8004d9c:	7ffb      	ldrb	r3, [r7, #31]
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d001      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004da2:	2302      	movs	r3, #2
 8004da4:	e17f      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x5c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x5c>
 8004db2:	887b      	ldrh	r3, [r7, #2]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e174      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_SPI_TransmitReceive+0x6e>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e16d      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x34a>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d003      	beq.n	8004de6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2205      	movs	r2, #5
 8004de2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	887a      	ldrh	r2, [r7, #2]
 8004df6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	887a      	ldrh	r2, [r7, #2]
 8004e08:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e26:	2b40      	cmp	r3, #64	@ 0x40
 8004e28:	d007      	beq.n	8004e3a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e42:	d17e      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_SPI_TransmitReceive+0xf6>
 8004e4c:	8afb      	ldrh	r3, [r7, #22]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d16c      	bne.n	8004f2c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e56:	881a      	ldrh	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e62:	1c9a      	adds	r2, r3, #2
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e76:	e059      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d11b      	bne.n	8004ebe <HAL_SPI_TransmitReceive+0x162>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d016      	beq.n	8004ebe <HAL_SPI_TransmitReceive+0x162>
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d113      	bne.n	8004ebe <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9a:	881a      	ldrh	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	1c9a      	adds	r2, r3, #2
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d119      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x1a4>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d014      	beq.n	8004f00 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	b292      	uxth	r2, r2
 8004ee2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee8:	1c9a      	adds	r2, r3, #2
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004efc:	2301      	movs	r3, #1
 8004efe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f00:	f7fe f92c 	bl	800315c <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d80d      	bhi.n	8004f2c <HAL_SPI_TransmitReceive+0x1d0>
 8004f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f16:	d009      	beq.n	8004f2c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e0bc      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1a0      	bne.n	8004e78 <HAL_SPI_TransmitReceive+0x11c>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d19b      	bne.n	8004e78 <HAL_SPI_TransmitReceive+0x11c>
 8004f40:	e082      	b.n	8005048 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_SPI_TransmitReceive+0x1f4>
 8004f4a:	8afb      	ldrh	r3, [r7, #22]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d171      	bne.n	8005034 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	330c      	adds	r3, #12
 8004f5a:	7812      	ldrb	r2, [r2, #0]
 8004f5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f76:	e05d      	b.n	8005034 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d11c      	bne.n	8004fc0 <HAL_SPI_TransmitReceive+0x264>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d017      	beq.n	8004fc0 <HAL_SPI_TransmitReceive+0x264>
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d114      	bne.n	8004fc0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	7812      	ldrb	r2, [r2, #0]
 8004fa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d119      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x2a6>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d014      	beq.n	8005002 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ffe:	2301      	movs	r3, #1
 8005000:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005002:	f7fe f8ab 	bl	800315c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800500e:	429a      	cmp	r2, r3
 8005010:	d803      	bhi.n	800501a <HAL_SPI_TransmitReceive+0x2be>
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005018:	d102      	bne.n	8005020 <HAL_SPI_TransmitReceive+0x2c4>
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e038      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d19c      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x21c>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d197      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005048:	6a3a      	ldr	r2, [r7, #32]
 800504a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f91d 	bl	800528c <SPI_EndRxTxTransaction>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e01d      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10a      	bne.n	8005088 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80050a4:	2300      	movs	r3, #0
  }
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3728      	adds	r7, #40	@ 0x28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050c0:	f7fe f84c 	bl	800315c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	4413      	add	r3, r2
 80050ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050d0:	f7fe f844 	bl	800315c <HAL_GetTick>
 80050d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050d6:	4b39      	ldr	r3, [pc, #228]	@ (80051bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	015b      	lsls	r3, r3, #5
 80050dc:	0d1b      	lsrs	r3, r3, #20
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	fb02 f303 	mul.w	r3, r2, r3
 80050e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050e6:	e054      	b.n	8005192 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050ee:	d050      	beq.n	8005192 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050f0:	f7fe f834 	bl	800315c <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d902      	bls.n	8005106 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d13d      	bne.n	8005182 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005114:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800511e:	d111      	bne.n	8005144 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005128:	d004      	beq.n	8005134 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005132:	d107      	bne.n	8005144 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005142:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800514c:	d10f      	bne.n	800516e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800516c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e017      	b.n	80051b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	3b01      	subs	r3, #1
 8005190:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4013      	ands	r3, r2
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	bf0c      	ite	eq
 80051a2:	2301      	moveq	r3, #1
 80051a4:	2300      	movne	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d19b      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000004 	.word	0x20000004

080051c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051d4:	d111      	bne.n	80051fa <SPI_EndRxTransaction+0x3a>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051de:	d004      	beq.n	80051ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e8:	d107      	bne.n	80051fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005202:	d12a      	bne.n	800525a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800520c:	d012      	beq.n	8005234 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2200      	movs	r2, #0
 8005216:	2180      	movs	r1, #128	@ 0x80
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff ff49 	bl	80050b0 <SPI_WaitFlagStateUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d02d      	beq.n	8005280 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005228:	f043 0220 	orr.w	r2, r3, #32
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e026      	b.n	8005282 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2200      	movs	r2, #0
 800523c:	2101      	movs	r1, #1
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f7ff ff36 	bl	80050b0 <SPI_WaitFlagStateUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01a      	beq.n	8005280 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524e:	f043 0220 	orr.w	r2, r3, #32
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e013      	b.n	8005282 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2200      	movs	r2, #0
 8005262:	2101      	movs	r1, #1
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff ff23 	bl	80050b0 <SPI_WaitFlagStateUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e000      	b.n	8005282 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2201      	movs	r2, #1
 80052a0:	2102      	movs	r1, #2
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff ff04 	bl	80050b0 <SPI_WaitFlagStateUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d007      	beq.n	80052be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b2:	f043 0220 	orr.w	r2, r3, #32
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e032      	b.n	8005324 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052be:	4b1b      	ldr	r3, [pc, #108]	@ (800532c <SPI_EndRxTxTransaction+0xa0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005330 <SPI_EndRxTxTransaction+0xa4>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	0d5b      	lsrs	r3, r3, #21
 80052ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
 80052d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052dc:	d112      	bne.n	8005304 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	2180      	movs	r1, #128	@ 0x80
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7ff fee1 	bl	80050b0 <SPI_WaitFlagStateUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d016      	beq.n	8005322 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e00f      	b.n	8005324 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	3b01      	subs	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531a:	2b80      	cmp	r3, #128	@ 0x80
 800531c:	d0f2      	beq.n	8005304 <SPI_EndRxTxTransaction+0x78>
 800531e:	e000      	b.n	8005322 <SPI_EndRxTxTransaction+0x96>
        break;
 8005320:	bf00      	nop
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20000004 	.word	0x20000004
 8005330:	165e9f81 	.word	0x165e9f81

08005334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e041      	b.n	80053ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f839 	bl	80053d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f000 f9c0 	bl	80056f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d001      	beq.n	8005400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e04e      	b.n	800549e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a23      	ldr	r2, [pc, #140]	@ (80054ac <HAL_TIM_Base_Start_IT+0xc4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d022      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542a:	d01d      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1f      	ldr	r2, [pc, #124]	@ (80054b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d018      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1e      	ldr	r2, [pc, #120]	@ (80054b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d013      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1c      	ldr	r2, [pc, #112]	@ (80054b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00e      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1b      	ldr	r2, [pc, #108]	@ (80054bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d009      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a19      	ldr	r2, [pc, #100]	@ (80054c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a18      	ldr	r2, [pc, #96]	@ (80054c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d111      	bne.n	800548c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b06      	cmp	r3, #6
 8005478:	d010      	beq.n	800549c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0201 	orr.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548a:	e007      	b.n	800549c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800
 80054b8:	40000c00 	.word	0x40000c00
 80054bc:	40010400 	.word	0x40010400
 80054c0:	40014000 	.word	0x40014000
 80054c4:	40001800 	.word	0x40001800

080054c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d020      	beq.n	800552c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01b      	beq.n	800552c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0202 	mvn.w	r2, #2
 80054fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f8d2 	bl	80056bc <HAL_TIM_IC_CaptureCallback>
 8005518:	e005      	b.n	8005526 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f8c4 	bl	80056a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f8d5 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d020      	beq.n	8005578 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01b      	beq.n	8005578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0204 	mvn.w	r2, #4
 8005548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f8ac 	bl	80056bc <HAL_TIM_IC_CaptureCallback>
 8005564:	e005      	b.n	8005572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f89e 	bl	80056a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f8af 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d020      	beq.n	80055c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01b      	beq.n	80055c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0208 	mvn.w	r2, #8
 8005594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2204      	movs	r2, #4
 800559a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f886 	bl	80056bc <HAL_TIM_IC_CaptureCallback>
 80055b0:	e005      	b.n	80055be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f878 	bl	80056a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f889 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d020      	beq.n	8005610 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01b      	beq.n	8005610 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0210 	mvn.w	r2, #16
 80055e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2208      	movs	r2, #8
 80055e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f860 	bl	80056bc <HAL_TIM_IC_CaptureCallback>
 80055fc:	e005      	b.n	800560a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f852 	bl	80056a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f863 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0201 	mvn.w	r2, #1
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fd fa4e 	bl	8002ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f906 	bl	8005864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00c      	beq.n	800567c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f834 	bl	80056e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00c      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d007      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0220 	mvn.w	r2, #32
 8005698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f8d8 	bl	8005850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a46      	ldr	r2, [pc, #280]	@ (8005824 <TIM_Base_SetConfig+0x12c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d013      	beq.n	8005738 <TIM_Base_SetConfig+0x40>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005716:	d00f      	beq.n	8005738 <TIM_Base_SetConfig+0x40>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a43      	ldr	r2, [pc, #268]	@ (8005828 <TIM_Base_SetConfig+0x130>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00b      	beq.n	8005738 <TIM_Base_SetConfig+0x40>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a42      	ldr	r2, [pc, #264]	@ (800582c <TIM_Base_SetConfig+0x134>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d007      	beq.n	8005738 <TIM_Base_SetConfig+0x40>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a41      	ldr	r2, [pc, #260]	@ (8005830 <TIM_Base_SetConfig+0x138>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_Base_SetConfig+0x40>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a40      	ldr	r2, [pc, #256]	@ (8005834 <TIM_Base_SetConfig+0x13c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d108      	bne.n	800574a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a35      	ldr	r2, [pc, #212]	@ (8005824 <TIM_Base_SetConfig+0x12c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d02b      	beq.n	80057aa <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005758:	d027      	beq.n	80057aa <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a32      	ldr	r2, [pc, #200]	@ (8005828 <TIM_Base_SetConfig+0x130>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d023      	beq.n	80057aa <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a31      	ldr	r2, [pc, #196]	@ (800582c <TIM_Base_SetConfig+0x134>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d01f      	beq.n	80057aa <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a30      	ldr	r2, [pc, #192]	@ (8005830 <TIM_Base_SetConfig+0x138>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d01b      	beq.n	80057aa <TIM_Base_SetConfig+0xb2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a2f      	ldr	r2, [pc, #188]	@ (8005834 <TIM_Base_SetConfig+0x13c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d017      	beq.n	80057aa <TIM_Base_SetConfig+0xb2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a2e      	ldr	r2, [pc, #184]	@ (8005838 <TIM_Base_SetConfig+0x140>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <TIM_Base_SetConfig+0xb2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a2d      	ldr	r2, [pc, #180]	@ (800583c <TIM_Base_SetConfig+0x144>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00f      	beq.n	80057aa <TIM_Base_SetConfig+0xb2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a2c      	ldr	r2, [pc, #176]	@ (8005840 <TIM_Base_SetConfig+0x148>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00b      	beq.n	80057aa <TIM_Base_SetConfig+0xb2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a2b      	ldr	r2, [pc, #172]	@ (8005844 <TIM_Base_SetConfig+0x14c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d007      	beq.n	80057aa <TIM_Base_SetConfig+0xb2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a2a      	ldr	r2, [pc, #168]	@ (8005848 <TIM_Base_SetConfig+0x150>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d003      	beq.n	80057aa <TIM_Base_SetConfig+0xb2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a29      	ldr	r2, [pc, #164]	@ (800584c <TIM_Base_SetConfig+0x154>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d108      	bne.n	80057bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a10      	ldr	r2, [pc, #64]	@ (8005824 <TIM_Base_SetConfig+0x12c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <TIM_Base_SetConfig+0xf8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a12      	ldr	r2, [pc, #72]	@ (8005834 <TIM_Base_SetConfig+0x13c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d103      	bne.n	80057f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b01      	cmp	r3, #1
 8005808:	d105      	bne.n	8005816 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	611a      	str	r2, [r3, #16]
  }
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40010400 	.word	0x40010400
 8005838:	40014000 	.word	0x40014000
 800583c:	40014400 	.word	0x40014400
 8005840:	40014800 	.word	0x40014800
 8005844:	40001800 	.word	0x40001800
 8005848:	40001c00 	.word	0x40001c00
 800584c:	40002000 	.word	0x40002000

08005850 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e042      	b.n	8005910 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fd fa2e 	bl	8002d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2224      	movs	r2, #36	@ 0x24
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f973 	bl	8005ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695a      	ldr	r2, [r3, #20]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08a      	sub	sp, #40	@ 0x28
 800591c:	af02      	add	r7, sp, #8
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b20      	cmp	r3, #32
 8005936:	d175      	bne.n	8005a24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_UART_Transmit+0x2c>
 800593e:	88fb      	ldrh	r3, [r7, #6]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e06e      	b.n	8005a26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2221      	movs	r2, #33	@ 0x21
 8005952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005956:	f7fd fc01 	bl	800315c <HAL_GetTick>
 800595a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	88fa      	ldrh	r2, [r7, #6]
 8005966:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005970:	d108      	bne.n	8005984 <HAL_UART_Transmit+0x6c>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d104      	bne.n	8005984 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	e003      	b.n	800598c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005988:	2300      	movs	r3, #0
 800598a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800598c:	e02e      	b.n	80059ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2200      	movs	r2, #0
 8005996:	2180      	movs	r1, #128	@ 0x80
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f848 	bl	8005a2e <UART_WaitOnFlagUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e03a      	b.n	8005a26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10b      	bne.n	80059ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	3302      	adds	r3, #2
 80059ca:	61bb      	str	r3, [r7, #24]
 80059cc:	e007      	b.n	80059de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	781a      	ldrb	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	3301      	adds	r3, #1
 80059dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1cb      	bne.n	800598e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2200      	movs	r2, #0
 80059fe:	2140      	movs	r1, #64	@ 0x40
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f814 	bl	8005a2e <UART_WaitOnFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e006      	b.n	8005a26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	e000      	b.n	8005a26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a24:	2302      	movs	r3, #2
  }
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b086      	sub	sp, #24
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	603b      	str	r3, [r7, #0]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a3e:	e03b      	b.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a46:	d037      	beq.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a48:	f7fd fb88 	bl	800315c <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	6a3a      	ldr	r2, [r7, #32]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d302      	bcc.n	8005a5e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e03a      	b.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d023      	beq.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b80      	cmp	r3, #128	@ 0x80
 8005a74:	d020      	beq.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b40      	cmp	r3, #64	@ 0x40
 8005a7a:	d01d      	beq.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	d116      	bne.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f81d 	bl	8005ae0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e00f      	b.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d0b4      	beq.n	8005a40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b095      	sub	sp, #84	@ 0x54
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b08:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e5      	bne.n	8005ae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3314      	adds	r3, #20
 8005b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3314      	adds	r3, #20
 8005b3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d119      	bne.n	8005b8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	330c      	adds	r3, #12
 8005b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f023 0310 	bic.w	r3, r3, #16
 8005b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	330c      	adds	r3, #12
 8005b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b78:	61ba      	str	r2, [r7, #24]
 8005b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	613b      	str	r3, [r7, #16]
   return(result);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e5      	bne.n	8005b58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b9a:	bf00      	nop
 8005b9c:	3754      	adds	r7, #84	@ 0x54
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
	...

08005ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bac:	b0c0      	sub	sp, #256	@ 0x100
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc4:	68d9      	ldr	r1, [r3, #12]
 8005bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	ea40 0301 	orr.w	r3, r0, r1
 8005bd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c00:	f021 010c 	bic.w	r1, r1, #12
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c22:	6999      	ldr	r1, [r3, #24]
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	ea40 0301 	orr.w	r3, r0, r1
 8005c2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4b8f      	ldr	r3, [pc, #572]	@ (8005e74 <UART_SetConfig+0x2cc>)
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d005      	beq.n	8005c48 <UART_SetConfig+0xa0>
 8005c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b8d      	ldr	r3, [pc, #564]	@ (8005e78 <UART_SetConfig+0x2d0>)
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d104      	bne.n	8005c52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c48:	f7fe f88e 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 8005c4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c50:	e003      	b.n	8005c5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c52:	f7fe f875 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 8005c56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c64:	f040 810c 	bne.w	8005e80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c7a:	4622      	mov	r2, r4
 8005c7c:	462b      	mov	r3, r5
 8005c7e:	1891      	adds	r1, r2, r2
 8005c80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c82:	415b      	adcs	r3, r3
 8005c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	eb12 0801 	adds.w	r8, r2, r1
 8005c90:	4629      	mov	r1, r5
 8005c92:	eb43 0901 	adc.w	r9, r3, r1
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005caa:	4690      	mov	r8, r2
 8005cac:	4699      	mov	r9, r3
 8005cae:	4623      	mov	r3, r4
 8005cb0:	eb18 0303 	adds.w	r3, r8, r3
 8005cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cb8:	462b      	mov	r3, r5
 8005cba:	eb49 0303 	adc.w	r3, r9, r3
 8005cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	18db      	adds	r3, r3, r3
 8005cda:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cdc:	4613      	mov	r3, r2
 8005cde:	eb42 0303 	adc.w	r3, r2, r3
 8005ce2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ce4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ce8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005cec:	f7fa ffcc 	bl	8000c88 <__aeabi_uldivmod>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4b61      	ldr	r3, [pc, #388]	@ (8005e7c <UART_SetConfig+0x2d4>)
 8005cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	011c      	lsls	r4, r3, #4
 8005cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d10:	4642      	mov	r2, r8
 8005d12:	464b      	mov	r3, r9
 8005d14:	1891      	adds	r1, r2, r2
 8005d16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d18:	415b      	adcs	r3, r3
 8005d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d20:	4641      	mov	r1, r8
 8005d22:	eb12 0a01 	adds.w	sl, r2, r1
 8005d26:	4649      	mov	r1, r9
 8005d28:	eb43 0b01 	adc.w	fp, r3, r1
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d40:	4692      	mov	sl, r2
 8005d42:	469b      	mov	fp, r3
 8005d44:	4643      	mov	r3, r8
 8005d46:	eb1a 0303 	adds.w	r3, sl, r3
 8005d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d4e:	464b      	mov	r3, r9
 8005d50:	eb4b 0303 	adc.w	r3, fp, r3
 8005d54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	18db      	adds	r3, r3, r3
 8005d70:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d72:	4613      	mov	r3, r2
 8005d74:	eb42 0303 	adc.w	r3, r2, r3
 8005d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d82:	f7fa ff81 	bl	8000c88 <__aeabi_uldivmod>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e7c <UART_SetConfig+0x2d4>)
 8005d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d92:	095b      	lsrs	r3, r3, #5
 8005d94:	2264      	movs	r2, #100	@ 0x64
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
 8005d9a:	1acb      	subs	r3, r1, r3
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005da2:	4b36      	ldr	r3, [pc, #216]	@ (8005e7c <UART_SetConfig+0x2d4>)
 8005da4:	fba3 2302 	umull	r2, r3, r3, r2
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005db0:	441c      	add	r4, r3
 8005db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005dc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	1891      	adds	r1, r2, r2
 8005dca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005dcc:	415b      	adcs	r3, r3
 8005dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	1851      	adds	r1, r2, r1
 8005dd8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005dda:	4649      	mov	r1, r9
 8005ddc:	414b      	adcs	r3, r1
 8005dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005dec:	4659      	mov	r1, fp
 8005dee:	00cb      	lsls	r3, r1, #3
 8005df0:	4651      	mov	r1, sl
 8005df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005df6:	4651      	mov	r1, sl
 8005df8:	00ca      	lsls	r2, r1, #3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4642      	mov	r2, r8
 8005e02:	189b      	adds	r3, r3, r2
 8005e04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e08:	464b      	mov	r3, r9
 8005e0a:	460a      	mov	r2, r1
 8005e0c:	eb42 0303 	adc.w	r3, r2, r3
 8005e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e28:	460b      	mov	r3, r1
 8005e2a:	18db      	adds	r3, r3, r3
 8005e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e2e:	4613      	mov	r3, r2
 8005e30:	eb42 0303 	adc.w	r3, r2, r3
 8005e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e3e:	f7fa ff23 	bl	8000c88 <__aeabi_uldivmod>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4b0d      	ldr	r3, [pc, #52]	@ (8005e7c <UART_SetConfig+0x2d4>)
 8005e48:	fba3 1302 	umull	r1, r3, r3, r2
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	2164      	movs	r1, #100	@ 0x64
 8005e50:	fb01 f303 	mul.w	r3, r1, r3
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	3332      	adds	r3, #50	@ 0x32
 8005e5a:	4a08      	ldr	r2, [pc, #32]	@ (8005e7c <UART_SetConfig+0x2d4>)
 8005e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	f003 0207 	and.w	r2, r3, #7
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4422      	add	r2, r4
 8005e6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e70:	e106      	b.n	8006080 <UART_SetConfig+0x4d8>
 8005e72:	bf00      	nop
 8005e74:	40011000 	.word	0x40011000
 8005e78:	40011400 	.word	0x40011400
 8005e7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e92:	4642      	mov	r2, r8
 8005e94:	464b      	mov	r3, r9
 8005e96:	1891      	adds	r1, r2, r2
 8005e98:	6239      	str	r1, [r7, #32]
 8005e9a:	415b      	adcs	r3, r3
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ea2:	4641      	mov	r1, r8
 8005ea4:	1854      	adds	r4, r2, r1
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	eb43 0501 	adc.w	r5, r3, r1
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	00eb      	lsls	r3, r5, #3
 8005eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eba:	00e2      	lsls	r2, r4, #3
 8005ebc:	4614      	mov	r4, r2
 8005ebe:	461d      	mov	r5, r3
 8005ec0:	4643      	mov	r3, r8
 8005ec2:	18e3      	adds	r3, r4, r3
 8005ec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ec8:	464b      	mov	r3, r9
 8005eca:	eb45 0303 	adc.w	r3, r5, r3
 8005ece:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ede:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005eee:	4629      	mov	r1, r5
 8005ef0:	008b      	lsls	r3, r1, #2
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ef8:	4621      	mov	r1, r4
 8005efa:	008a      	lsls	r2, r1, #2
 8005efc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f00:	f7fa fec2 	bl	8000c88 <__aeabi_uldivmod>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4b60      	ldr	r3, [pc, #384]	@ (800608c <UART_SetConfig+0x4e4>)
 8005f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	011c      	lsls	r4, r3, #4
 8005f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f24:	4642      	mov	r2, r8
 8005f26:	464b      	mov	r3, r9
 8005f28:	1891      	adds	r1, r2, r2
 8005f2a:	61b9      	str	r1, [r7, #24]
 8005f2c:	415b      	adcs	r3, r3
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f34:	4641      	mov	r1, r8
 8005f36:	1851      	adds	r1, r2, r1
 8005f38:	6139      	str	r1, [r7, #16]
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	414b      	adcs	r3, r1
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	00cb      	lsls	r3, r1, #3
 8005f50:	4651      	mov	r1, sl
 8005f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f56:	4651      	mov	r1, sl
 8005f58:	00ca      	lsls	r2, r1, #3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4642      	mov	r2, r8
 8005f62:	189b      	adds	r3, r3, r2
 8005f64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f68:	464b      	mov	r3, r9
 8005f6a:	460a      	mov	r2, r1
 8005f6c:	eb42 0303 	adc.w	r3, r2, r3
 8005f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f8c:	4649      	mov	r1, r9
 8005f8e:	008b      	lsls	r3, r1, #2
 8005f90:	4641      	mov	r1, r8
 8005f92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f96:	4641      	mov	r1, r8
 8005f98:	008a      	lsls	r2, r1, #2
 8005f9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f9e:	f7fa fe73 	bl	8000c88 <__aeabi_uldivmod>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4b38      	ldr	r3, [pc, #224]	@ (800608c <UART_SetConfig+0x4e4>)
 8005faa:	fba3 2301 	umull	r2, r3, r3, r1
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	2264      	movs	r2, #100	@ 0x64
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	1acb      	subs	r3, r1, r3
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	3332      	adds	r3, #50	@ 0x32
 8005fbc:	4a33      	ldr	r2, [pc, #204]	@ (800608c <UART_SetConfig+0x4e4>)
 8005fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fc8:	441c      	add	r4, r3
 8005fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fce:	2200      	movs	r2, #0
 8005fd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fd2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005fd4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fd8:	4642      	mov	r2, r8
 8005fda:	464b      	mov	r3, r9
 8005fdc:	1891      	adds	r1, r2, r2
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	415b      	adcs	r3, r3
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fe8:	4641      	mov	r1, r8
 8005fea:	1851      	adds	r1, r2, r1
 8005fec:	6039      	str	r1, [r7, #0]
 8005fee:	4649      	mov	r1, r9
 8005ff0:	414b      	adcs	r3, r1
 8005ff2:	607b      	str	r3, [r7, #4]
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006000:	4659      	mov	r1, fp
 8006002:	00cb      	lsls	r3, r1, #3
 8006004:	4651      	mov	r1, sl
 8006006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800600a:	4651      	mov	r1, sl
 800600c:	00ca      	lsls	r2, r1, #3
 800600e:	4610      	mov	r0, r2
 8006010:	4619      	mov	r1, r3
 8006012:	4603      	mov	r3, r0
 8006014:	4642      	mov	r2, r8
 8006016:	189b      	adds	r3, r3, r2
 8006018:	66bb      	str	r3, [r7, #104]	@ 0x68
 800601a:	464b      	mov	r3, r9
 800601c:	460a      	mov	r2, r1
 800601e:	eb42 0303 	adc.w	r3, r2, r3
 8006022:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	663b      	str	r3, [r7, #96]	@ 0x60
 800602e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800603c:	4649      	mov	r1, r9
 800603e:	008b      	lsls	r3, r1, #2
 8006040:	4641      	mov	r1, r8
 8006042:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006046:	4641      	mov	r1, r8
 8006048:	008a      	lsls	r2, r1, #2
 800604a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800604e:	f7fa fe1b 	bl	8000c88 <__aeabi_uldivmod>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4b0d      	ldr	r3, [pc, #52]	@ (800608c <UART_SetConfig+0x4e4>)
 8006058:	fba3 1302 	umull	r1, r3, r3, r2
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	2164      	movs	r1, #100	@ 0x64
 8006060:	fb01 f303 	mul.w	r3, r1, r3
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	3332      	adds	r3, #50	@ 0x32
 800606a:	4a08      	ldr	r2, [pc, #32]	@ (800608c <UART_SetConfig+0x4e4>)
 800606c:	fba2 2303 	umull	r2, r3, r2, r3
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	f003 020f 	and.w	r2, r3, #15
 8006076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4422      	add	r2, r4
 800607e:	609a      	str	r2, [r3, #8]
}
 8006080:	bf00      	nop
 8006082:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006086:	46bd      	mov	sp, r7
 8006088:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800608c:	51eb851f 	.word	0x51eb851f

08006090 <calloc>:
 8006090:	4b02      	ldr	r3, [pc, #8]	@ (800609c <calloc+0xc>)
 8006092:	460a      	mov	r2, r1
 8006094:	4601      	mov	r1, r0
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	f000 b802 	b.w	80060a0 <_calloc_r>
 800609c:	2000001c 	.word	0x2000001c

080060a0 <_calloc_r>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	fba1 5402 	umull	r5, r4, r1, r2
 80060a6:	b934      	cbnz	r4, 80060b6 <_calloc_r+0x16>
 80060a8:	4629      	mov	r1, r5
 80060aa:	f000 fb09 	bl	80066c0 <_malloc_r>
 80060ae:	4606      	mov	r6, r0
 80060b0:	b928      	cbnz	r0, 80060be <_calloc_r+0x1e>
 80060b2:	4630      	mov	r0, r6
 80060b4:	bd70      	pop	{r4, r5, r6, pc}
 80060b6:	220c      	movs	r2, #12
 80060b8:	6002      	str	r2, [r0, #0]
 80060ba:	2600      	movs	r6, #0
 80060bc:	e7f9      	b.n	80060b2 <_calloc_r+0x12>
 80060be:	462a      	mov	r2, r5
 80060c0:	4621      	mov	r1, r4
 80060c2:	f000 fdf9 	bl	8006cb8 <memset>
 80060c6:	e7f4      	b.n	80060b2 <_calloc_r+0x12>

080060c8 <__cvt>:
 80060c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060cc:	ec57 6b10 	vmov	r6, r7, d0
 80060d0:	2f00      	cmp	r7, #0
 80060d2:	460c      	mov	r4, r1
 80060d4:	4619      	mov	r1, r3
 80060d6:	463b      	mov	r3, r7
 80060d8:	bfbb      	ittet	lt
 80060da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80060de:	461f      	movlt	r7, r3
 80060e0:	2300      	movge	r3, #0
 80060e2:	232d      	movlt	r3, #45	@ 0x2d
 80060e4:	700b      	strb	r3, [r1, #0]
 80060e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80060ec:	4691      	mov	r9, r2
 80060ee:	f023 0820 	bic.w	r8, r3, #32
 80060f2:	bfbc      	itt	lt
 80060f4:	4632      	movlt	r2, r6
 80060f6:	4616      	movlt	r6, r2
 80060f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80060fc:	d005      	beq.n	800610a <__cvt+0x42>
 80060fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006102:	d100      	bne.n	8006106 <__cvt+0x3e>
 8006104:	3401      	adds	r4, #1
 8006106:	2102      	movs	r1, #2
 8006108:	e000      	b.n	800610c <__cvt+0x44>
 800610a:	2103      	movs	r1, #3
 800610c:	ab03      	add	r3, sp, #12
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	ab02      	add	r3, sp, #8
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	ec47 6b10 	vmov	d0, r6, r7
 8006118:	4653      	mov	r3, sl
 800611a:	4622      	mov	r2, r4
 800611c:	f000 feac 	bl	8006e78 <_dtoa_r>
 8006120:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006124:	4605      	mov	r5, r0
 8006126:	d119      	bne.n	800615c <__cvt+0x94>
 8006128:	f019 0f01 	tst.w	r9, #1
 800612c:	d00e      	beq.n	800614c <__cvt+0x84>
 800612e:	eb00 0904 	add.w	r9, r0, r4
 8006132:	2200      	movs	r2, #0
 8006134:	2300      	movs	r3, #0
 8006136:	4630      	mov	r0, r6
 8006138:	4639      	mov	r1, r7
 800613a:	f7fa fce5 	bl	8000b08 <__aeabi_dcmpeq>
 800613e:	b108      	cbz	r0, 8006144 <__cvt+0x7c>
 8006140:	f8cd 900c 	str.w	r9, [sp, #12]
 8006144:	2230      	movs	r2, #48	@ 0x30
 8006146:	9b03      	ldr	r3, [sp, #12]
 8006148:	454b      	cmp	r3, r9
 800614a:	d31e      	bcc.n	800618a <__cvt+0xc2>
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006150:	1b5b      	subs	r3, r3, r5
 8006152:	4628      	mov	r0, r5
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	b004      	add	sp, #16
 8006158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800615c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006160:	eb00 0904 	add.w	r9, r0, r4
 8006164:	d1e5      	bne.n	8006132 <__cvt+0x6a>
 8006166:	7803      	ldrb	r3, [r0, #0]
 8006168:	2b30      	cmp	r3, #48	@ 0x30
 800616a:	d10a      	bne.n	8006182 <__cvt+0xba>
 800616c:	2200      	movs	r2, #0
 800616e:	2300      	movs	r3, #0
 8006170:	4630      	mov	r0, r6
 8006172:	4639      	mov	r1, r7
 8006174:	f7fa fcc8 	bl	8000b08 <__aeabi_dcmpeq>
 8006178:	b918      	cbnz	r0, 8006182 <__cvt+0xba>
 800617a:	f1c4 0401 	rsb	r4, r4, #1
 800617e:	f8ca 4000 	str.w	r4, [sl]
 8006182:	f8da 3000 	ldr.w	r3, [sl]
 8006186:	4499      	add	r9, r3
 8006188:	e7d3      	b.n	8006132 <__cvt+0x6a>
 800618a:	1c59      	adds	r1, r3, #1
 800618c:	9103      	str	r1, [sp, #12]
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	e7d9      	b.n	8006146 <__cvt+0x7e>

08006192 <__exponent>:
 8006192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006194:	2900      	cmp	r1, #0
 8006196:	bfba      	itte	lt
 8006198:	4249      	neglt	r1, r1
 800619a:	232d      	movlt	r3, #45	@ 0x2d
 800619c:	232b      	movge	r3, #43	@ 0x2b
 800619e:	2909      	cmp	r1, #9
 80061a0:	7002      	strb	r2, [r0, #0]
 80061a2:	7043      	strb	r3, [r0, #1]
 80061a4:	dd29      	ble.n	80061fa <__exponent+0x68>
 80061a6:	f10d 0307 	add.w	r3, sp, #7
 80061aa:	461d      	mov	r5, r3
 80061ac:	270a      	movs	r7, #10
 80061ae:	461a      	mov	r2, r3
 80061b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80061b4:	fb07 1416 	mls	r4, r7, r6, r1
 80061b8:	3430      	adds	r4, #48	@ 0x30
 80061ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80061be:	460c      	mov	r4, r1
 80061c0:	2c63      	cmp	r4, #99	@ 0x63
 80061c2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80061c6:	4631      	mov	r1, r6
 80061c8:	dcf1      	bgt.n	80061ae <__exponent+0x1c>
 80061ca:	3130      	adds	r1, #48	@ 0x30
 80061cc:	1e94      	subs	r4, r2, #2
 80061ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80061d2:	1c41      	adds	r1, r0, #1
 80061d4:	4623      	mov	r3, r4
 80061d6:	42ab      	cmp	r3, r5
 80061d8:	d30a      	bcc.n	80061f0 <__exponent+0x5e>
 80061da:	f10d 0309 	add.w	r3, sp, #9
 80061de:	1a9b      	subs	r3, r3, r2
 80061e0:	42ac      	cmp	r4, r5
 80061e2:	bf88      	it	hi
 80061e4:	2300      	movhi	r3, #0
 80061e6:	3302      	adds	r3, #2
 80061e8:	4403      	add	r3, r0
 80061ea:	1a18      	subs	r0, r3, r0
 80061ec:	b003      	add	sp, #12
 80061ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80061f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80061f8:	e7ed      	b.n	80061d6 <__exponent+0x44>
 80061fa:	2330      	movs	r3, #48	@ 0x30
 80061fc:	3130      	adds	r1, #48	@ 0x30
 80061fe:	7083      	strb	r3, [r0, #2]
 8006200:	70c1      	strb	r1, [r0, #3]
 8006202:	1d03      	adds	r3, r0, #4
 8006204:	e7f1      	b.n	80061ea <__exponent+0x58>
	...

08006208 <_printf_float>:
 8006208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620c:	b08d      	sub	sp, #52	@ 0x34
 800620e:	460c      	mov	r4, r1
 8006210:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006214:	4616      	mov	r6, r2
 8006216:	461f      	mov	r7, r3
 8006218:	4605      	mov	r5, r0
 800621a:	f000 fd93 	bl	8006d44 <_localeconv_r>
 800621e:	6803      	ldr	r3, [r0, #0]
 8006220:	9304      	str	r3, [sp, #16]
 8006222:	4618      	mov	r0, r3
 8006224:	f7fa f844 	bl	80002b0 <strlen>
 8006228:	2300      	movs	r3, #0
 800622a:	930a      	str	r3, [sp, #40]	@ 0x28
 800622c:	f8d8 3000 	ldr.w	r3, [r8]
 8006230:	9005      	str	r0, [sp, #20]
 8006232:	3307      	adds	r3, #7
 8006234:	f023 0307 	bic.w	r3, r3, #7
 8006238:	f103 0208 	add.w	r2, r3, #8
 800623c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006240:	f8d4 b000 	ldr.w	fp, [r4]
 8006244:	f8c8 2000 	str.w	r2, [r8]
 8006248:	e9d3 8900 	ldrd	r8, r9, [r3]
 800624c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006250:	9307      	str	r3, [sp, #28]
 8006252:	f8cd 8018 	str.w	r8, [sp, #24]
 8006256:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800625a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800625e:	4b9c      	ldr	r3, [pc, #624]	@ (80064d0 <_printf_float+0x2c8>)
 8006260:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006264:	f7fa fc82 	bl	8000b6c <__aeabi_dcmpun>
 8006268:	bb70      	cbnz	r0, 80062c8 <_printf_float+0xc0>
 800626a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800626e:	4b98      	ldr	r3, [pc, #608]	@ (80064d0 <_printf_float+0x2c8>)
 8006270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006274:	f7fa fc5c 	bl	8000b30 <__aeabi_dcmple>
 8006278:	bb30      	cbnz	r0, 80062c8 <_printf_float+0xc0>
 800627a:	2200      	movs	r2, #0
 800627c:	2300      	movs	r3, #0
 800627e:	4640      	mov	r0, r8
 8006280:	4649      	mov	r1, r9
 8006282:	f7fa fc4b 	bl	8000b1c <__aeabi_dcmplt>
 8006286:	b110      	cbz	r0, 800628e <_printf_float+0x86>
 8006288:	232d      	movs	r3, #45	@ 0x2d
 800628a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800628e:	4a91      	ldr	r2, [pc, #580]	@ (80064d4 <_printf_float+0x2cc>)
 8006290:	4b91      	ldr	r3, [pc, #580]	@ (80064d8 <_printf_float+0x2d0>)
 8006292:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006296:	bf8c      	ite	hi
 8006298:	4690      	movhi	r8, r2
 800629a:	4698      	movls	r8, r3
 800629c:	2303      	movs	r3, #3
 800629e:	6123      	str	r3, [r4, #16]
 80062a0:	f02b 0304 	bic.w	r3, fp, #4
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	f04f 0900 	mov.w	r9, #0
 80062aa:	9700      	str	r7, [sp, #0]
 80062ac:	4633      	mov	r3, r6
 80062ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80062b0:	4621      	mov	r1, r4
 80062b2:	4628      	mov	r0, r5
 80062b4:	f000 fa84 	bl	80067c0 <_printf_common>
 80062b8:	3001      	adds	r0, #1
 80062ba:	f040 808d 	bne.w	80063d8 <_printf_float+0x1d0>
 80062be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062c2:	b00d      	add	sp, #52	@ 0x34
 80062c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	4640      	mov	r0, r8
 80062ce:	4649      	mov	r1, r9
 80062d0:	f7fa fc4c 	bl	8000b6c <__aeabi_dcmpun>
 80062d4:	b140      	cbz	r0, 80062e8 <_printf_float+0xe0>
 80062d6:	464b      	mov	r3, r9
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bfbc      	itt	lt
 80062dc:	232d      	movlt	r3, #45	@ 0x2d
 80062de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80062e2:	4a7e      	ldr	r2, [pc, #504]	@ (80064dc <_printf_float+0x2d4>)
 80062e4:	4b7e      	ldr	r3, [pc, #504]	@ (80064e0 <_printf_float+0x2d8>)
 80062e6:	e7d4      	b.n	8006292 <_printf_float+0x8a>
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80062ee:	9206      	str	r2, [sp, #24]
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	d13b      	bne.n	800636c <_printf_float+0x164>
 80062f4:	2306      	movs	r3, #6
 80062f6:	6063      	str	r3, [r4, #4]
 80062f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80062fc:	2300      	movs	r3, #0
 80062fe:	6022      	str	r2, [r4, #0]
 8006300:	9303      	str	r3, [sp, #12]
 8006302:	ab0a      	add	r3, sp, #40	@ 0x28
 8006304:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006308:	ab09      	add	r3, sp, #36	@ 0x24
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	6861      	ldr	r1, [r4, #4]
 800630e:	ec49 8b10 	vmov	d0, r8, r9
 8006312:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006316:	4628      	mov	r0, r5
 8006318:	f7ff fed6 	bl	80060c8 <__cvt>
 800631c:	9b06      	ldr	r3, [sp, #24]
 800631e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006320:	2b47      	cmp	r3, #71	@ 0x47
 8006322:	4680      	mov	r8, r0
 8006324:	d129      	bne.n	800637a <_printf_float+0x172>
 8006326:	1cc8      	adds	r0, r1, #3
 8006328:	db02      	blt.n	8006330 <_printf_float+0x128>
 800632a:	6863      	ldr	r3, [r4, #4]
 800632c:	4299      	cmp	r1, r3
 800632e:	dd41      	ble.n	80063b4 <_printf_float+0x1ac>
 8006330:	f1aa 0a02 	sub.w	sl, sl, #2
 8006334:	fa5f fa8a 	uxtb.w	sl, sl
 8006338:	3901      	subs	r1, #1
 800633a:	4652      	mov	r2, sl
 800633c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006340:	9109      	str	r1, [sp, #36]	@ 0x24
 8006342:	f7ff ff26 	bl	8006192 <__exponent>
 8006346:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006348:	1813      	adds	r3, r2, r0
 800634a:	2a01      	cmp	r2, #1
 800634c:	4681      	mov	r9, r0
 800634e:	6123      	str	r3, [r4, #16]
 8006350:	dc02      	bgt.n	8006358 <_printf_float+0x150>
 8006352:	6822      	ldr	r2, [r4, #0]
 8006354:	07d2      	lsls	r2, r2, #31
 8006356:	d501      	bpl.n	800635c <_printf_float+0x154>
 8006358:	3301      	adds	r3, #1
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0a2      	beq.n	80062aa <_printf_float+0xa2>
 8006364:	232d      	movs	r3, #45	@ 0x2d
 8006366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800636a:	e79e      	b.n	80062aa <_printf_float+0xa2>
 800636c:	9a06      	ldr	r2, [sp, #24]
 800636e:	2a47      	cmp	r2, #71	@ 0x47
 8006370:	d1c2      	bne.n	80062f8 <_printf_float+0xf0>
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1c0      	bne.n	80062f8 <_printf_float+0xf0>
 8006376:	2301      	movs	r3, #1
 8006378:	e7bd      	b.n	80062f6 <_printf_float+0xee>
 800637a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800637e:	d9db      	bls.n	8006338 <_printf_float+0x130>
 8006380:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006384:	d118      	bne.n	80063b8 <_printf_float+0x1b0>
 8006386:	2900      	cmp	r1, #0
 8006388:	6863      	ldr	r3, [r4, #4]
 800638a:	dd0b      	ble.n	80063a4 <_printf_float+0x19c>
 800638c:	6121      	str	r1, [r4, #16]
 800638e:	b913      	cbnz	r3, 8006396 <_printf_float+0x18e>
 8006390:	6822      	ldr	r2, [r4, #0]
 8006392:	07d0      	lsls	r0, r2, #31
 8006394:	d502      	bpl.n	800639c <_printf_float+0x194>
 8006396:	3301      	adds	r3, #1
 8006398:	440b      	add	r3, r1
 800639a:	6123      	str	r3, [r4, #16]
 800639c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800639e:	f04f 0900 	mov.w	r9, #0
 80063a2:	e7db      	b.n	800635c <_printf_float+0x154>
 80063a4:	b913      	cbnz	r3, 80063ac <_printf_float+0x1a4>
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	07d2      	lsls	r2, r2, #31
 80063aa:	d501      	bpl.n	80063b0 <_printf_float+0x1a8>
 80063ac:	3302      	adds	r3, #2
 80063ae:	e7f4      	b.n	800639a <_printf_float+0x192>
 80063b0:	2301      	movs	r3, #1
 80063b2:	e7f2      	b.n	800639a <_printf_float+0x192>
 80063b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80063b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063ba:	4299      	cmp	r1, r3
 80063bc:	db05      	blt.n	80063ca <_printf_float+0x1c2>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	6121      	str	r1, [r4, #16]
 80063c2:	07d8      	lsls	r0, r3, #31
 80063c4:	d5ea      	bpl.n	800639c <_printf_float+0x194>
 80063c6:	1c4b      	adds	r3, r1, #1
 80063c8:	e7e7      	b.n	800639a <_printf_float+0x192>
 80063ca:	2900      	cmp	r1, #0
 80063cc:	bfd4      	ite	le
 80063ce:	f1c1 0202 	rsble	r2, r1, #2
 80063d2:	2201      	movgt	r2, #1
 80063d4:	4413      	add	r3, r2
 80063d6:	e7e0      	b.n	800639a <_printf_float+0x192>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	055a      	lsls	r2, r3, #21
 80063dc:	d407      	bmi.n	80063ee <_printf_float+0x1e6>
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	4642      	mov	r2, r8
 80063e2:	4631      	mov	r1, r6
 80063e4:	4628      	mov	r0, r5
 80063e6:	47b8      	blx	r7
 80063e8:	3001      	adds	r0, #1
 80063ea:	d12b      	bne.n	8006444 <_printf_float+0x23c>
 80063ec:	e767      	b.n	80062be <_printf_float+0xb6>
 80063ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063f2:	f240 80dd 	bls.w	80065b0 <_printf_float+0x3a8>
 80063f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80063fa:	2200      	movs	r2, #0
 80063fc:	2300      	movs	r3, #0
 80063fe:	f7fa fb83 	bl	8000b08 <__aeabi_dcmpeq>
 8006402:	2800      	cmp	r0, #0
 8006404:	d033      	beq.n	800646e <_printf_float+0x266>
 8006406:	4a37      	ldr	r2, [pc, #220]	@ (80064e4 <_printf_float+0x2dc>)
 8006408:	2301      	movs	r3, #1
 800640a:	4631      	mov	r1, r6
 800640c:	4628      	mov	r0, r5
 800640e:	47b8      	blx	r7
 8006410:	3001      	adds	r0, #1
 8006412:	f43f af54 	beq.w	80062be <_printf_float+0xb6>
 8006416:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800641a:	4543      	cmp	r3, r8
 800641c:	db02      	blt.n	8006424 <_printf_float+0x21c>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	07d8      	lsls	r0, r3, #31
 8006422:	d50f      	bpl.n	8006444 <_printf_float+0x23c>
 8006424:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006428:	4631      	mov	r1, r6
 800642a:	4628      	mov	r0, r5
 800642c:	47b8      	blx	r7
 800642e:	3001      	adds	r0, #1
 8006430:	f43f af45 	beq.w	80062be <_printf_float+0xb6>
 8006434:	f04f 0900 	mov.w	r9, #0
 8006438:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800643c:	f104 0a1a 	add.w	sl, r4, #26
 8006440:	45c8      	cmp	r8, r9
 8006442:	dc09      	bgt.n	8006458 <_printf_float+0x250>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	079b      	lsls	r3, r3, #30
 8006448:	f100 8103 	bmi.w	8006652 <_printf_float+0x44a>
 800644c:	68e0      	ldr	r0, [r4, #12]
 800644e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006450:	4298      	cmp	r0, r3
 8006452:	bfb8      	it	lt
 8006454:	4618      	movlt	r0, r3
 8006456:	e734      	b.n	80062c2 <_printf_float+0xba>
 8006458:	2301      	movs	r3, #1
 800645a:	4652      	mov	r2, sl
 800645c:	4631      	mov	r1, r6
 800645e:	4628      	mov	r0, r5
 8006460:	47b8      	blx	r7
 8006462:	3001      	adds	r0, #1
 8006464:	f43f af2b 	beq.w	80062be <_printf_float+0xb6>
 8006468:	f109 0901 	add.w	r9, r9, #1
 800646c:	e7e8      	b.n	8006440 <_printf_float+0x238>
 800646e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006470:	2b00      	cmp	r3, #0
 8006472:	dc39      	bgt.n	80064e8 <_printf_float+0x2e0>
 8006474:	4a1b      	ldr	r2, [pc, #108]	@ (80064e4 <_printf_float+0x2dc>)
 8006476:	2301      	movs	r3, #1
 8006478:	4631      	mov	r1, r6
 800647a:	4628      	mov	r0, r5
 800647c:	47b8      	blx	r7
 800647e:	3001      	adds	r0, #1
 8006480:	f43f af1d 	beq.w	80062be <_printf_float+0xb6>
 8006484:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006488:	ea59 0303 	orrs.w	r3, r9, r3
 800648c:	d102      	bne.n	8006494 <_printf_float+0x28c>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	07d9      	lsls	r1, r3, #31
 8006492:	d5d7      	bpl.n	8006444 <_printf_float+0x23c>
 8006494:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006498:	4631      	mov	r1, r6
 800649a:	4628      	mov	r0, r5
 800649c:	47b8      	blx	r7
 800649e:	3001      	adds	r0, #1
 80064a0:	f43f af0d 	beq.w	80062be <_printf_float+0xb6>
 80064a4:	f04f 0a00 	mov.w	sl, #0
 80064a8:	f104 0b1a 	add.w	fp, r4, #26
 80064ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ae:	425b      	negs	r3, r3
 80064b0:	4553      	cmp	r3, sl
 80064b2:	dc01      	bgt.n	80064b8 <_printf_float+0x2b0>
 80064b4:	464b      	mov	r3, r9
 80064b6:	e793      	b.n	80063e0 <_printf_float+0x1d8>
 80064b8:	2301      	movs	r3, #1
 80064ba:	465a      	mov	r2, fp
 80064bc:	4631      	mov	r1, r6
 80064be:	4628      	mov	r0, r5
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	f43f aefb 	beq.w	80062be <_printf_float+0xb6>
 80064c8:	f10a 0a01 	add.w	sl, sl, #1
 80064cc:	e7ee      	b.n	80064ac <_printf_float+0x2a4>
 80064ce:	bf00      	nop
 80064d0:	7fefffff 	.word	0x7fefffff
 80064d4:	080091a0 	.word	0x080091a0
 80064d8:	0800919c 	.word	0x0800919c
 80064dc:	080091a8 	.word	0x080091a8
 80064e0:	080091a4 	.word	0x080091a4
 80064e4:	080091ac 	.word	0x080091ac
 80064e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064ee:	4553      	cmp	r3, sl
 80064f0:	bfa8      	it	ge
 80064f2:	4653      	movge	r3, sl
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	4699      	mov	r9, r3
 80064f8:	dc36      	bgt.n	8006568 <_printf_float+0x360>
 80064fa:	f04f 0b00 	mov.w	fp, #0
 80064fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006502:	f104 021a 	add.w	r2, r4, #26
 8006506:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006508:	9306      	str	r3, [sp, #24]
 800650a:	eba3 0309 	sub.w	r3, r3, r9
 800650e:	455b      	cmp	r3, fp
 8006510:	dc31      	bgt.n	8006576 <_printf_float+0x36e>
 8006512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006514:	459a      	cmp	sl, r3
 8006516:	dc3a      	bgt.n	800658e <_printf_float+0x386>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	07da      	lsls	r2, r3, #31
 800651c:	d437      	bmi.n	800658e <_printf_float+0x386>
 800651e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006520:	ebaa 0903 	sub.w	r9, sl, r3
 8006524:	9b06      	ldr	r3, [sp, #24]
 8006526:	ebaa 0303 	sub.w	r3, sl, r3
 800652a:	4599      	cmp	r9, r3
 800652c:	bfa8      	it	ge
 800652e:	4699      	movge	r9, r3
 8006530:	f1b9 0f00 	cmp.w	r9, #0
 8006534:	dc33      	bgt.n	800659e <_printf_float+0x396>
 8006536:	f04f 0800 	mov.w	r8, #0
 800653a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800653e:	f104 0b1a 	add.w	fp, r4, #26
 8006542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006544:	ebaa 0303 	sub.w	r3, sl, r3
 8006548:	eba3 0309 	sub.w	r3, r3, r9
 800654c:	4543      	cmp	r3, r8
 800654e:	f77f af79 	ble.w	8006444 <_printf_float+0x23c>
 8006552:	2301      	movs	r3, #1
 8006554:	465a      	mov	r2, fp
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	47b8      	blx	r7
 800655c:	3001      	adds	r0, #1
 800655e:	f43f aeae 	beq.w	80062be <_printf_float+0xb6>
 8006562:	f108 0801 	add.w	r8, r8, #1
 8006566:	e7ec      	b.n	8006542 <_printf_float+0x33a>
 8006568:	4642      	mov	r2, r8
 800656a:	4631      	mov	r1, r6
 800656c:	4628      	mov	r0, r5
 800656e:	47b8      	blx	r7
 8006570:	3001      	adds	r0, #1
 8006572:	d1c2      	bne.n	80064fa <_printf_float+0x2f2>
 8006574:	e6a3      	b.n	80062be <_printf_float+0xb6>
 8006576:	2301      	movs	r3, #1
 8006578:	4631      	mov	r1, r6
 800657a:	4628      	mov	r0, r5
 800657c:	9206      	str	r2, [sp, #24]
 800657e:	47b8      	blx	r7
 8006580:	3001      	adds	r0, #1
 8006582:	f43f ae9c 	beq.w	80062be <_printf_float+0xb6>
 8006586:	9a06      	ldr	r2, [sp, #24]
 8006588:	f10b 0b01 	add.w	fp, fp, #1
 800658c:	e7bb      	b.n	8006506 <_printf_float+0x2fe>
 800658e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006592:	4631      	mov	r1, r6
 8006594:	4628      	mov	r0, r5
 8006596:	47b8      	blx	r7
 8006598:	3001      	adds	r0, #1
 800659a:	d1c0      	bne.n	800651e <_printf_float+0x316>
 800659c:	e68f      	b.n	80062be <_printf_float+0xb6>
 800659e:	9a06      	ldr	r2, [sp, #24]
 80065a0:	464b      	mov	r3, r9
 80065a2:	4442      	add	r2, r8
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	d1c3      	bne.n	8006536 <_printf_float+0x32e>
 80065ae:	e686      	b.n	80062be <_printf_float+0xb6>
 80065b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065b4:	f1ba 0f01 	cmp.w	sl, #1
 80065b8:	dc01      	bgt.n	80065be <_printf_float+0x3b6>
 80065ba:	07db      	lsls	r3, r3, #31
 80065bc:	d536      	bpl.n	800662c <_printf_float+0x424>
 80065be:	2301      	movs	r3, #1
 80065c0:	4642      	mov	r2, r8
 80065c2:	4631      	mov	r1, r6
 80065c4:	4628      	mov	r0, r5
 80065c6:	47b8      	blx	r7
 80065c8:	3001      	adds	r0, #1
 80065ca:	f43f ae78 	beq.w	80062be <_printf_float+0xb6>
 80065ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065d2:	4631      	mov	r1, r6
 80065d4:	4628      	mov	r0, r5
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	f43f ae70 	beq.w	80062be <_printf_float+0xb6>
 80065de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065e2:	2200      	movs	r2, #0
 80065e4:	2300      	movs	r3, #0
 80065e6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80065ea:	f7fa fa8d 	bl	8000b08 <__aeabi_dcmpeq>
 80065ee:	b9c0      	cbnz	r0, 8006622 <_printf_float+0x41a>
 80065f0:	4653      	mov	r3, sl
 80065f2:	f108 0201 	add.w	r2, r8, #1
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	d10c      	bne.n	800661a <_printf_float+0x412>
 8006600:	e65d      	b.n	80062be <_printf_float+0xb6>
 8006602:	2301      	movs	r3, #1
 8006604:	465a      	mov	r2, fp
 8006606:	4631      	mov	r1, r6
 8006608:	4628      	mov	r0, r5
 800660a:	47b8      	blx	r7
 800660c:	3001      	adds	r0, #1
 800660e:	f43f ae56 	beq.w	80062be <_printf_float+0xb6>
 8006612:	f108 0801 	add.w	r8, r8, #1
 8006616:	45d0      	cmp	r8, sl
 8006618:	dbf3      	blt.n	8006602 <_printf_float+0x3fa>
 800661a:	464b      	mov	r3, r9
 800661c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006620:	e6df      	b.n	80063e2 <_printf_float+0x1da>
 8006622:	f04f 0800 	mov.w	r8, #0
 8006626:	f104 0b1a 	add.w	fp, r4, #26
 800662a:	e7f4      	b.n	8006616 <_printf_float+0x40e>
 800662c:	2301      	movs	r3, #1
 800662e:	4642      	mov	r2, r8
 8006630:	e7e1      	b.n	80065f6 <_printf_float+0x3ee>
 8006632:	2301      	movs	r3, #1
 8006634:	464a      	mov	r2, r9
 8006636:	4631      	mov	r1, r6
 8006638:	4628      	mov	r0, r5
 800663a:	47b8      	blx	r7
 800663c:	3001      	adds	r0, #1
 800663e:	f43f ae3e 	beq.w	80062be <_printf_float+0xb6>
 8006642:	f108 0801 	add.w	r8, r8, #1
 8006646:	68e3      	ldr	r3, [r4, #12]
 8006648:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800664a:	1a5b      	subs	r3, r3, r1
 800664c:	4543      	cmp	r3, r8
 800664e:	dcf0      	bgt.n	8006632 <_printf_float+0x42a>
 8006650:	e6fc      	b.n	800644c <_printf_float+0x244>
 8006652:	f04f 0800 	mov.w	r8, #0
 8006656:	f104 0919 	add.w	r9, r4, #25
 800665a:	e7f4      	b.n	8006646 <_printf_float+0x43e>

0800665c <malloc>:
 800665c:	4b02      	ldr	r3, [pc, #8]	@ (8006668 <malloc+0xc>)
 800665e:	4601      	mov	r1, r0
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	f000 b82d 	b.w	80066c0 <_malloc_r>
 8006666:	bf00      	nop
 8006668:	2000001c 	.word	0x2000001c

0800666c <free>:
 800666c:	4b02      	ldr	r3, [pc, #8]	@ (8006678 <free+0xc>)
 800666e:	4601      	mov	r1, r0
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	f001 b9d1 	b.w	8007a18 <_free_r>
 8006676:	bf00      	nop
 8006678:	2000001c 	.word	0x2000001c

0800667c <sbrk_aligned>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4e0f      	ldr	r6, [pc, #60]	@ (80066bc <sbrk_aligned+0x40>)
 8006680:	460c      	mov	r4, r1
 8006682:	6831      	ldr	r1, [r6, #0]
 8006684:	4605      	mov	r5, r0
 8006686:	b911      	cbnz	r1, 800668e <sbrk_aligned+0x12>
 8006688:	f000 fb1e 	bl	8006cc8 <_sbrk_r>
 800668c:	6030      	str	r0, [r6, #0]
 800668e:	4621      	mov	r1, r4
 8006690:	4628      	mov	r0, r5
 8006692:	f000 fb19 	bl	8006cc8 <_sbrk_r>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d103      	bne.n	80066a2 <sbrk_aligned+0x26>
 800669a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800669e:	4620      	mov	r0, r4
 80066a0:	bd70      	pop	{r4, r5, r6, pc}
 80066a2:	1cc4      	adds	r4, r0, #3
 80066a4:	f024 0403 	bic.w	r4, r4, #3
 80066a8:	42a0      	cmp	r0, r4
 80066aa:	d0f8      	beq.n	800669e <sbrk_aligned+0x22>
 80066ac:	1a21      	subs	r1, r4, r0
 80066ae:	4628      	mov	r0, r5
 80066b0:	f000 fb0a 	bl	8006cc8 <_sbrk_r>
 80066b4:	3001      	adds	r0, #1
 80066b6:	d1f2      	bne.n	800669e <sbrk_aligned+0x22>
 80066b8:	e7ef      	b.n	800669a <sbrk_aligned+0x1e>
 80066ba:	bf00      	nop
 80066bc:	20000570 	.word	0x20000570

080066c0 <_malloc_r>:
 80066c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c4:	1ccd      	adds	r5, r1, #3
 80066c6:	f025 0503 	bic.w	r5, r5, #3
 80066ca:	3508      	adds	r5, #8
 80066cc:	2d0c      	cmp	r5, #12
 80066ce:	bf38      	it	cc
 80066d0:	250c      	movcc	r5, #12
 80066d2:	2d00      	cmp	r5, #0
 80066d4:	4606      	mov	r6, r0
 80066d6:	db01      	blt.n	80066dc <_malloc_r+0x1c>
 80066d8:	42a9      	cmp	r1, r5
 80066da:	d904      	bls.n	80066e6 <_malloc_r+0x26>
 80066dc:	230c      	movs	r3, #12
 80066de:	6033      	str	r3, [r6, #0]
 80066e0:	2000      	movs	r0, #0
 80066e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067bc <_malloc_r+0xfc>
 80066ea:	f000 f9f5 	bl	8006ad8 <__malloc_lock>
 80066ee:	f8d8 3000 	ldr.w	r3, [r8]
 80066f2:	461c      	mov	r4, r3
 80066f4:	bb44      	cbnz	r4, 8006748 <_malloc_r+0x88>
 80066f6:	4629      	mov	r1, r5
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7ff ffbf 	bl	800667c <sbrk_aligned>
 80066fe:	1c43      	adds	r3, r0, #1
 8006700:	4604      	mov	r4, r0
 8006702:	d158      	bne.n	80067b6 <_malloc_r+0xf6>
 8006704:	f8d8 4000 	ldr.w	r4, [r8]
 8006708:	4627      	mov	r7, r4
 800670a:	2f00      	cmp	r7, #0
 800670c:	d143      	bne.n	8006796 <_malloc_r+0xd6>
 800670e:	2c00      	cmp	r4, #0
 8006710:	d04b      	beq.n	80067aa <_malloc_r+0xea>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	4639      	mov	r1, r7
 8006716:	4630      	mov	r0, r6
 8006718:	eb04 0903 	add.w	r9, r4, r3
 800671c:	f000 fad4 	bl	8006cc8 <_sbrk_r>
 8006720:	4581      	cmp	r9, r0
 8006722:	d142      	bne.n	80067aa <_malloc_r+0xea>
 8006724:	6821      	ldr	r1, [r4, #0]
 8006726:	1a6d      	subs	r5, r5, r1
 8006728:	4629      	mov	r1, r5
 800672a:	4630      	mov	r0, r6
 800672c:	f7ff ffa6 	bl	800667c <sbrk_aligned>
 8006730:	3001      	adds	r0, #1
 8006732:	d03a      	beq.n	80067aa <_malloc_r+0xea>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	442b      	add	r3, r5
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	f8d8 3000 	ldr.w	r3, [r8]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	bb62      	cbnz	r2, 800679c <_malloc_r+0xdc>
 8006742:	f8c8 7000 	str.w	r7, [r8]
 8006746:	e00f      	b.n	8006768 <_malloc_r+0xa8>
 8006748:	6822      	ldr	r2, [r4, #0]
 800674a:	1b52      	subs	r2, r2, r5
 800674c:	d420      	bmi.n	8006790 <_malloc_r+0xd0>
 800674e:	2a0b      	cmp	r2, #11
 8006750:	d917      	bls.n	8006782 <_malloc_r+0xc2>
 8006752:	1961      	adds	r1, r4, r5
 8006754:	42a3      	cmp	r3, r4
 8006756:	6025      	str	r5, [r4, #0]
 8006758:	bf18      	it	ne
 800675a:	6059      	strne	r1, [r3, #4]
 800675c:	6863      	ldr	r3, [r4, #4]
 800675e:	bf08      	it	eq
 8006760:	f8c8 1000 	streq.w	r1, [r8]
 8006764:	5162      	str	r2, [r4, r5]
 8006766:	604b      	str	r3, [r1, #4]
 8006768:	4630      	mov	r0, r6
 800676a:	f000 f9bb 	bl	8006ae4 <__malloc_unlock>
 800676e:	f104 000b 	add.w	r0, r4, #11
 8006772:	1d23      	adds	r3, r4, #4
 8006774:	f020 0007 	bic.w	r0, r0, #7
 8006778:	1ac2      	subs	r2, r0, r3
 800677a:	bf1c      	itt	ne
 800677c:	1a1b      	subne	r3, r3, r0
 800677e:	50a3      	strne	r3, [r4, r2]
 8006780:	e7af      	b.n	80066e2 <_malloc_r+0x22>
 8006782:	6862      	ldr	r2, [r4, #4]
 8006784:	42a3      	cmp	r3, r4
 8006786:	bf0c      	ite	eq
 8006788:	f8c8 2000 	streq.w	r2, [r8]
 800678c:	605a      	strne	r2, [r3, #4]
 800678e:	e7eb      	b.n	8006768 <_malloc_r+0xa8>
 8006790:	4623      	mov	r3, r4
 8006792:	6864      	ldr	r4, [r4, #4]
 8006794:	e7ae      	b.n	80066f4 <_malloc_r+0x34>
 8006796:	463c      	mov	r4, r7
 8006798:	687f      	ldr	r7, [r7, #4]
 800679a:	e7b6      	b.n	800670a <_malloc_r+0x4a>
 800679c:	461a      	mov	r2, r3
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	42a3      	cmp	r3, r4
 80067a2:	d1fb      	bne.n	800679c <_malloc_r+0xdc>
 80067a4:	2300      	movs	r3, #0
 80067a6:	6053      	str	r3, [r2, #4]
 80067a8:	e7de      	b.n	8006768 <_malloc_r+0xa8>
 80067aa:	230c      	movs	r3, #12
 80067ac:	6033      	str	r3, [r6, #0]
 80067ae:	4630      	mov	r0, r6
 80067b0:	f000 f998 	bl	8006ae4 <__malloc_unlock>
 80067b4:	e794      	b.n	80066e0 <_malloc_r+0x20>
 80067b6:	6005      	str	r5, [r0, #0]
 80067b8:	e7d6      	b.n	8006768 <_malloc_r+0xa8>
 80067ba:	bf00      	nop
 80067bc:	20000574 	.word	0x20000574

080067c0 <_printf_common>:
 80067c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	4616      	mov	r6, r2
 80067c6:	4698      	mov	r8, r3
 80067c8:	688a      	ldr	r2, [r1, #8]
 80067ca:	690b      	ldr	r3, [r1, #16]
 80067cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	bfb8      	it	lt
 80067d4:	4613      	movlt	r3, r2
 80067d6:	6033      	str	r3, [r6, #0]
 80067d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067dc:	4607      	mov	r7, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	b10a      	cbz	r2, 80067e6 <_printf_common+0x26>
 80067e2:	3301      	adds	r3, #1
 80067e4:	6033      	str	r3, [r6, #0]
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	0699      	lsls	r1, r3, #26
 80067ea:	bf42      	ittt	mi
 80067ec:	6833      	ldrmi	r3, [r6, #0]
 80067ee:	3302      	addmi	r3, #2
 80067f0:	6033      	strmi	r3, [r6, #0]
 80067f2:	6825      	ldr	r5, [r4, #0]
 80067f4:	f015 0506 	ands.w	r5, r5, #6
 80067f8:	d106      	bne.n	8006808 <_printf_common+0x48>
 80067fa:	f104 0a19 	add.w	sl, r4, #25
 80067fe:	68e3      	ldr	r3, [r4, #12]
 8006800:	6832      	ldr	r2, [r6, #0]
 8006802:	1a9b      	subs	r3, r3, r2
 8006804:	42ab      	cmp	r3, r5
 8006806:	dc26      	bgt.n	8006856 <_printf_common+0x96>
 8006808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800680c:	6822      	ldr	r2, [r4, #0]
 800680e:	3b00      	subs	r3, #0
 8006810:	bf18      	it	ne
 8006812:	2301      	movne	r3, #1
 8006814:	0692      	lsls	r2, r2, #26
 8006816:	d42b      	bmi.n	8006870 <_printf_common+0xb0>
 8006818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800681c:	4641      	mov	r1, r8
 800681e:	4638      	mov	r0, r7
 8006820:	47c8      	blx	r9
 8006822:	3001      	adds	r0, #1
 8006824:	d01e      	beq.n	8006864 <_printf_common+0xa4>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	6922      	ldr	r2, [r4, #16]
 800682a:	f003 0306 	and.w	r3, r3, #6
 800682e:	2b04      	cmp	r3, #4
 8006830:	bf02      	ittt	eq
 8006832:	68e5      	ldreq	r5, [r4, #12]
 8006834:	6833      	ldreq	r3, [r6, #0]
 8006836:	1aed      	subeq	r5, r5, r3
 8006838:	68a3      	ldr	r3, [r4, #8]
 800683a:	bf0c      	ite	eq
 800683c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006840:	2500      	movne	r5, #0
 8006842:	4293      	cmp	r3, r2
 8006844:	bfc4      	itt	gt
 8006846:	1a9b      	subgt	r3, r3, r2
 8006848:	18ed      	addgt	r5, r5, r3
 800684a:	2600      	movs	r6, #0
 800684c:	341a      	adds	r4, #26
 800684e:	42b5      	cmp	r5, r6
 8006850:	d11a      	bne.n	8006888 <_printf_common+0xc8>
 8006852:	2000      	movs	r0, #0
 8006854:	e008      	b.n	8006868 <_printf_common+0xa8>
 8006856:	2301      	movs	r3, #1
 8006858:	4652      	mov	r2, sl
 800685a:	4641      	mov	r1, r8
 800685c:	4638      	mov	r0, r7
 800685e:	47c8      	blx	r9
 8006860:	3001      	adds	r0, #1
 8006862:	d103      	bne.n	800686c <_printf_common+0xac>
 8006864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686c:	3501      	adds	r5, #1
 800686e:	e7c6      	b.n	80067fe <_printf_common+0x3e>
 8006870:	18e1      	adds	r1, r4, r3
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	2030      	movs	r0, #48	@ 0x30
 8006876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800687a:	4422      	add	r2, r4
 800687c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006884:	3302      	adds	r3, #2
 8006886:	e7c7      	b.n	8006818 <_printf_common+0x58>
 8006888:	2301      	movs	r3, #1
 800688a:	4622      	mov	r2, r4
 800688c:	4641      	mov	r1, r8
 800688e:	4638      	mov	r0, r7
 8006890:	47c8      	blx	r9
 8006892:	3001      	adds	r0, #1
 8006894:	d0e6      	beq.n	8006864 <_printf_common+0xa4>
 8006896:	3601      	adds	r6, #1
 8006898:	e7d9      	b.n	800684e <_printf_common+0x8e>
	...

0800689c <_printf_i>:
 800689c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	7e0f      	ldrb	r7, [r1, #24]
 80068a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068a4:	2f78      	cmp	r7, #120	@ 0x78
 80068a6:	4691      	mov	r9, r2
 80068a8:	4680      	mov	r8, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	469a      	mov	sl, r3
 80068ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068b2:	d807      	bhi.n	80068c4 <_printf_i+0x28>
 80068b4:	2f62      	cmp	r7, #98	@ 0x62
 80068b6:	d80a      	bhi.n	80068ce <_printf_i+0x32>
 80068b8:	2f00      	cmp	r7, #0
 80068ba:	f000 80d1 	beq.w	8006a60 <_printf_i+0x1c4>
 80068be:	2f58      	cmp	r7, #88	@ 0x58
 80068c0:	f000 80b8 	beq.w	8006a34 <_printf_i+0x198>
 80068c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068cc:	e03a      	b.n	8006944 <_printf_i+0xa8>
 80068ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068d2:	2b15      	cmp	r3, #21
 80068d4:	d8f6      	bhi.n	80068c4 <_printf_i+0x28>
 80068d6:	a101      	add	r1, pc, #4	@ (adr r1, 80068dc <_printf_i+0x40>)
 80068d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068dc:	08006935 	.word	0x08006935
 80068e0:	08006949 	.word	0x08006949
 80068e4:	080068c5 	.word	0x080068c5
 80068e8:	080068c5 	.word	0x080068c5
 80068ec:	080068c5 	.word	0x080068c5
 80068f0:	080068c5 	.word	0x080068c5
 80068f4:	08006949 	.word	0x08006949
 80068f8:	080068c5 	.word	0x080068c5
 80068fc:	080068c5 	.word	0x080068c5
 8006900:	080068c5 	.word	0x080068c5
 8006904:	080068c5 	.word	0x080068c5
 8006908:	08006a47 	.word	0x08006a47
 800690c:	08006973 	.word	0x08006973
 8006910:	08006a01 	.word	0x08006a01
 8006914:	080068c5 	.word	0x080068c5
 8006918:	080068c5 	.word	0x080068c5
 800691c:	08006a69 	.word	0x08006a69
 8006920:	080068c5 	.word	0x080068c5
 8006924:	08006973 	.word	0x08006973
 8006928:	080068c5 	.word	0x080068c5
 800692c:	080068c5 	.word	0x080068c5
 8006930:	08006a09 	.word	0x08006a09
 8006934:	6833      	ldr	r3, [r6, #0]
 8006936:	1d1a      	adds	r2, r3, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6032      	str	r2, [r6, #0]
 800693c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006944:	2301      	movs	r3, #1
 8006946:	e09c      	b.n	8006a82 <_printf_i+0x1e6>
 8006948:	6833      	ldr	r3, [r6, #0]
 800694a:	6820      	ldr	r0, [r4, #0]
 800694c:	1d19      	adds	r1, r3, #4
 800694e:	6031      	str	r1, [r6, #0]
 8006950:	0606      	lsls	r6, r0, #24
 8006952:	d501      	bpl.n	8006958 <_printf_i+0xbc>
 8006954:	681d      	ldr	r5, [r3, #0]
 8006956:	e003      	b.n	8006960 <_printf_i+0xc4>
 8006958:	0645      	lsls	r5, r0, #25
 800695a:	d5fb      	bpl.n	8006954 <_printf_i+0xb8>
 800695c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006960:	2d00      	cmp	r5, #0
 8006962:	da03      	bge.n	800696c <_printf_i+0xd0>
 8006964:	232d      	movs	r3, #45	@ 0x2d
 8006966:	426d      	negs	r5, r5
 8006968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800696c:	4858      	ldr	r0, [pc, #352]	@ (8006ad0 <_printf_i+0x234>)
 800696e:	230a      	movs	r3, #10
 8006970:	e011      	b.n	8006996 <_printf_i+0xfa>
 8006972:	6821      	ldr	r1, [r4, #0]
 8006974:	6833      	ldr	r3, [r6, #0]
 8006976:	0608      	lsls	r0, r1, #24
 8006978:	f853 5b04 	ldr.w	r5, [r3], #4
 800697c:	d402      	bmi.n	8006984 <_printf_i+0xe8>
 800697e:	0649      	lsls	r1, r1, #25
 8006980:	bf48      	it	mi
 8006982:	b2ad      	uxthmi	r5, r5
 8006984:	2f6f      	cmp	r7, #111	@ 0x6f
 8006986:	4852      	ldr	r0, [pc, #328]	@ (8006ad0 <_printf_i+0x234>)
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	bf14      	ite	ne
 800698c:	230a      	movne	r3, #10
 800698e:	2308      	moveq	r3, #8
 8006990:	2100      	movs	r1, #0
 8006992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006996:	6866      	ldr	r6, [r4, #4]
 8006998:	60a6      	str	r6, [r4, #8]
 800699a:	2e00      	cmp	r6, #0
 800699c:	db05      	blt.n	80069aa <_printf_i+0x10e>
 800699e:	6821      	ldr	r1, [r4, #0]
 80069a0:	432e      	orrs	r6, r5
 80069a2:	f021 0104 	bic.w	r1, r1, #4
 80069a6:	6021      	str	r1, [r4, #0]
 80069a8:	d04b      	beq.n	8006a42 <_printf_i+0x1a6>
 80069aa:	4616      	mov	r6, r2
 80069ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80069b0:	fb03 5711 	mls	r7, r3, r1, r5
 80069b4:	5dc7      	ldrb	r7, [r0, r7]
 80069b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069ba:	462f      	mov	r7, r5
 80069bc:	42bb      	cmp	r3, r7
 80069be:	460d      	mov	r5, r1
 80069c0:	d9f4      	bls.n	80069ac <_printf_i+0x110>
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d10b      	bne.n	80069de <_printf_i+0x142>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	07df      	lsls	r7, r3, #31
 80069ca:	d508      	bpl.n	80069de <_printf_i+0x142>
 80069cc:	6923      	ldr	r3, [r4, #16]
 80069ce:	6861      	ldr	r1, [r4, #4]
 80069d0:	4299      	cmp	r1, r3
 80069d2:	bfde      	ittt	le
 80069d4:	2330      	movle	r3, #48	@ 0x30
 80069d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80069de:	1b92      	subs	r2, r2, r6
 80069e0:	6122      	str	r2, [r4, #16]
 80069e2:	f8cd a000 	str.w	sl, [sp]
 80069e6:	464b      	mov	r3, r9
 80069e8:	aa03      	add	r2, sp, #12
 80069ea:	4621      	mov	r1, r4
 80069ec:	4640      	mov	r0, r8
 80069ee:	f7ff fee7 	bl	80067c0 <_printf_common>
 80069f2:	3001      	adds	r0, #1
 80069f4:	d14a      	bne.n	8006a8c <_printf_i+0x1f0>
 80069f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069fa:	b004      	add	sp, #16
 80069fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	f043 0320 	orr.w	r3, r3, #32
 8006a06:	6023      	str	r3, [r4, #0]
 8006a08:	4832      	ldr	r0, [pc, #200]	@ (8006ad4 <_printf_i+0x238>)
 8006a0a:	2778      	movs	r7, #120	@ 0x78
 8006a0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	6831      	ldr	r1, [r6, #0]
 8006a14:	061f      	lsls	r7, r3, #24
 8006a16:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a1a:	d402      	bmi.n	8006a22 <_printf_i+0x186>
 8006a1c:	065f      	lsls	r7, r3, #25
 8006a1e:	bf48      	it	mi
 8006a20:	b2ad      	uxthmi	r5, r5
 8006a22:	6031      	str	r1, [r6, #0]
 8006a24:	07d9      	lsls	r1, r3, #31
 8006a26:	bf44      	itt	mi
 8006a28:	f043 0320 	orrmi.w	r3, r3, #32
 8006a2c:	6023      	strmi	r3, [r4, #0]
 8006a2e:	b11d      	cbz	r5, 8006a38 <_printf_i+0x19c>
 8006a30:	2310      	movs	r3, #16
 8006a32:	e7ad      	b.n	8006990 <_printf_i+0xf4>
 8006a34:	4826      	ldr	r0, [pc, #152]	@ (8006ad0 <_printf_i+0x234>)
 8006a36:	e7e9      	b.n	8006a0c <_printf_i+0x170>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	f023 0320 	bic.w	r3, r3, #32
 8006a3e:	6023      	str	r3, [r4, #0]
 8006a40:	e7f6      	b.n	8006a30 <_printf_i+0x194>
 8006a42:	4616      	mov	r6, r2
 8006a44:	e7bd      	b.n	80069c2 <_printf_i+0x126>
 8006a46:	6833      	ldr	r3, [r6, #0]
 8006a48:	6825      	ldr	r5, [r4, #0]
 8006a4a:	6961      	ldr	r1, [r4, #20]
 8006a4c:	1d18      	adds	r0, r3, #4
 8006a4e:	6030      	str	r0, [r6, #0]
 8006a50:	062e      	lsls	r6, r5, #24
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	d501      	bpl.n	8006a5a <_printf_i+0x1be>
 8006a56:	6019      	str	r1, [r3, #0]
 8006a58:	e002      	b.n	8006a60 <_printf_i+0x1c4>
 8006a5a:	0668      	lsls	r0, r5, #25
 8006a5c:	d5fb      	bpl.n	8006a56 <_printf_i+0x1ba>
 8006a5e:	8019      	strh	r1, [r3, #0]
 8006a60:	2300      	movs	r3, #0
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	4616      	mov	r6, r2
 8006a66:	e7bc      	b.n	80069e2 <_printf_i+0x146>
 8006a68:	6833      	ldr	r3, [r6, #0]
 8006a6a:	1d1a      	adds	r2, r3, #4
 8006a6c:	6032      	str	r2, [r6, #0]
 8006a6e:	681e      	ldr	r6, [r3, #0]
 8006a70:	6862      	ldr	r2, [r4, #4]
 8006a72:	2100      	movs	r1, #0
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7f9 fbcb 	bl	8000210 <memchr>
 8006a7a:	b108      	cbz	r0, 8006a80 <_printf_i+0x1e4>
 8006a7c:	1b80      	subs	r0, r0, r6
 8006a7e:	6060      	str	r0, [r4, #4]
 8006a80:	6863      	ldr	r3, [r4, #4]
 8006a82:	6123      	str	r3, [r4, #16]
 8006a84:	2300      	movs	r3, #0
 8006a86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a8a:	e7aa      	b.n	80069e2 <_printf_i+0x146>
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	4632      	mov	r2, r6
 8006a90:	4649      	mov	r1, r9
 8006a92:	4640      	mov	r0, r8
 8006a94:	47d0      	blx	sl
 8006a96:	3001      	adds	r0, #1
 8006a98:	d0ad      	beq.n	80069f6 <_printf_i+0x15a>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	079b      	lsls	r3, r3, #30
 8006a9e:	d413      	bmi.n	8006ac8 <_printf_i+0x22c>
 8006aa0:	68e0      	ldr	r0, [r4, #12]
 8006aa2:	9b03      	ldr	r3, [sp, #12]
 8006aa4:	4298      	cmp	r0, r3
 8006aa6:	bfb8      	it	lt
 8006aa8:	4618      	movlt	r0, r3
 8006aaa:	e7a6      	b.n	80069fa <_printf_i+0x15e>
 8006aac:	2301      	movs	r3, #1
 8006aae:	4632      	mov	r2, r6
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	47d0      	blx	sl
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d09d      	beq.n	80069f6 <_printf_i+0x15a>
 8006aba:	3501      	adds	r5, #1
 8006abc:	68e3      	ldr	r3, [r4, #12]
 8006abe:	9903      	ldr	r1, [sp, #12]
 8006ac0:	1a5b      	subs	r3, r3, r1
 8006ac2:	42ab      	cmp	r3, r5
 8006ac4:	dcf2      	bgt.n	8006aac <_printf_i+0x210>
 8006ac6:	e7eb      	b.n	8006aa0 <_printf_i+0x204>
 8006ac8:	2500      	movs	r5, #0
 8006aca:	f104 0619 	add.w	r6, r4, #25
 8006ace:	e7f5      	b.n	8006abc <_printf_i+0x220>
 8006ad0:	080091ae 	.word	0x080091ae
 8006ad4:	080091bf 	.word	0x080091bf

08006ad8 <__malloc_lock>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	@ (8006ae0 <__malloc_lock+0x8>)
 8006ada:	f000 b930 	b.w	8006d3e <__retarget_lock_acquire_recursive>
 8006ade:	bf00      	nop
 8006ae0:	200006b4 	.word	0x200006b4

08006ae4 <__malloc_unlock>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	@ (8006aec <__malloc_unlock+0x8>)
 8006ae6:	f000 b92b 	b.w	8006d40 <__retarget_lock_release_recursive>
 8006aea:	bf00      	nop
 8006aec:	200006b4 	.word	0x200006b4

08006af0 <siprintf>:
 8006af0:	b40e      	push	{r1, r2, r3}
 8006af2:	b510      	push	{r4, lr}
 8006af4:	b09d      	sub	sp, #116	@ 0x74
 8006af6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006af8:	9002      	str	r0, [sp, #8]
 8006afa:	9006      	str	r0, [sp, #24]
 8006afc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b00:	480a      	ldr	r0, [pc, #40]	@ (8006b2c <siprintf+0x3c>)
 8006b02:	9107      	str	r1, [sp, #28]
 8006b04:	9104      	str	r1, [sp, #16]
 8006b06:	490a      	ldr	r1, [pc, #40]	@ (8006b30 <siprintf+0x40>)
 8006b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b0c:	9105      	str	r1, [sp, #20]
 8006b0e:	2400      	movs	r4, #0
 8006b10:	a902      	add	r1, sp, #8
 8006b12:	6800      	ldr	r0, [r0, #0]
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006b18:	f001 f824 	bl	8007b64 <_svfiprintf_r>
 8006b1c:	9b02      	ldr	r3, [sp, #8]
 8006b1e:	701c      	strb	r4, [r3, #0]
 8006b20:	b01d      	add	sp, #116	@ 0x74
 8006b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b26:	b003      	add	sp, #12
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	2000001c 	.word	0x2000001c
 8006b30:	ffff0208 	.word	0xffff0208

08006b34 <std>:
 8006b34:	2300      	movs	r3, #0
 8006b36:	b510      	push	{r4, lr}
 8006b38:	4604      	mov	r4, r0
 8006b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b42:	6083      	str	r3, [r0, #8]
 8006b44:	8181      	strh	r1, [r0, #12]
 8006b46:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b48:	81c2      	strh	r2, [r0, #14]
 8006b4a:	6183      	str	r3, [r0, #24]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	2208      	movs	r2, #8
 8006b50:	305c      	adds	r0, #92	@ 0x5c
 8006b52:	f000 f8b1 	bl	8006cb8 <memset>
 8006b56:	4b0d      	ldr	r3, [pc, #52]	@ (8006b8c <std+0x58>)
 8006b58:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b90 <std+0x5c>)
 8006b5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b94 <std+0x60>)
 8006b60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b62:	4b0d      	ldr	r3, [pc, #52]	@ (8006b98 <std+0x64>)
 8006b64:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b66:	4b0d      	ldr	r3, [pc, #52]	@ (8006b9c <std+0x68>)
 8006b68:	6224      	str	r4, [r4, #32]
 8006b6a:	429c      	cmp	r4, r3
 8006b6c:	d006      	beq.n	8006b7c <std+0x48>
 8006b6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b72:	4294      	cmp	r4, r2
 8006b74:	d002      	beq.n	8006b7c <std+0x48>
 8006b76:	33d0      	adds	r3, #208	@ 0xd0
 8006b78:	429c      	cmp	r4, r3
 8006b7a:	d105      	bne.n	8006b88 <std+0x54>
 8006b7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b84:	f000 b8da 	b.w	8006d3c <__retarget_lock_init_recursive>
 8006b88:	bd10      	pop	{r4, pc}
 8006b8a:	bf00      	nop
 8006b8c:	080085a9 	.word	0x080085a9
 8006b90:	080085cb 	.word	0x080085cb
 8006b94:	08008603 	.word	0x08008603
 8006b98:	08008627 	.word	0x08008627
 8006b9c:	20000578 	.word	0x20000578

08006ba0 <stdio_exit_handler>:
 8006ba0:	4a02      	ldr	r2, [pc, #8]	@ (8006bac <stdio_exit_handler+0xc>)
 8006ba2:	4903      	ldr	r1, [pc, #12]	@ (8006bb0 <stdio_exit_handler+0x10>)
 8006ba4:	4803      	ldr	r0, [pc, #12]	@ (8006bb4 <stdio_exit_handler+0x14>)
 8006ba6:	f000 b869 	b.w	8006c7c <_fwalk_sglue>
 8006baa:	bf00      	nop
 8006bac:	20000010 	.word	0x20000010
 8006bb0:	08007e65 	.word	0x08007e65
 8006bb4:	20000020 	.word	0x20000020

08006bb8 <cleanup_stdio>:
 8006bb8:	6841      	ldr	r1, [r0, #4]
 8006bba:	4b0c      	ldr	r3, [pc, #48]	@ (8006bec <cleanup_stdio+0x34>)
 8006bbc:	4299      	cmp	r1, r3
 8006bbe:	b510      	push	{r4, lr}
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	d001      	beq.n	8006bc8 <cleanup_stdio+0x10>
 8006bc4:	f001 f94e 	bl	8007e64 <_fflush_r>
 8006bc8:	68a1      	ldr	r1, [r4, #8]
 8006bca:	4b09      	ldr	r3, [pc, #36]	@ (8006bf0 <cleanup_stdio+0x38>)
 8006bcc:	4299      	cmp	r1, r3
 8006bce:	d002      	beq.n	8006bd6 <cleanup_stdio+0x1e>
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f001 f947 	bl	8007e64 <_fflush_r>
 8006bd6:	68e1      	ldr	r1, [r4, #12]
 8006bd8:	4b06      	ldr	r3, [pc, #24]	@ (8006bf4 <cleanup_stdio+0x3c>)
 8006bda:	4299      	cmp	r1, r3
 8006bdc:	d004      	beq.n	8006be8 <cleanup_stdio+0x30>
 8006bde:	4620      	mov	r0, r4
 8006be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be4:	f001 b93e 	b.w	8007e64 <_fflush_r>
 8006be8:	bd10      	pop	{r4, pc}
 8006bea:	bf00      	nop
 8006bec:	20000578 	.word	0x20000578
 8006bf0:	200005e0 	.word	0x200005e0
 8006bf4:	20000648 	.word	0x20000648

08006bf8 <global_stdio_init.part.0>:
 8006bf8:	b510      	push	{r4, lr}
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <global_stdio_init.part.0+0x30>)
 8006bfc:	4c0b      	ldr	r4, [pc, #44]	@ (8006c2c <global_stdio_init.part.0+0x34>)
 8006bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8006c30 <global_stdio_init.part.0+0x38>)
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	4620      	mov	r0, r4
 8006c04:	2200      	movs	r2, #0
 8006c06:	2104      	movs	r1, #4
 8006c08:	f7ff ff94 	bl	8006b34 <std>
 8006c0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c10:	2201      	movs	r2, #1
 8006c12:	2109      	movs	r1, #9
 8006c14:	f7ff ff8e 	bl	8006b34 <std>
 8006c18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c22:	2112      	movs	r1, #18
 8006c24:	f7ff bf86 	b.w	8006b34 <std>
 8006c28:	200006b0 	.word	0x200006b0
 8006c2c:	20000578 	.word	0x20000578
 8006c30:	08006ba1 	.word	0x08006ba1

08006c34 <__sfp_lock_acquire>:
 8006c34:	4801      	ldr	r0, [pc, #4]	@ (8006c3c <__sfp_lock_acquire+0x8>)
 8006c36:	f000 b882 	b.w	8006d3e <__retarget_lock_acquire_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	200006b5 	.word	0x200006b5

08006c40 <__sfp_lock_release>:
 8006c40:	4801      	ldr	r0, [pc, #4]	@ (8006c48 <__sfp_lock_release+0x8>)
 8006c42:	f000 b87d 	b.w	8006d40 <__retarget_lock_release_recursive>
 8006c46:	bf00      	nop
 8006c48:	200006b5 	.word	0x200006b5

08006c4c <__sinit>:
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	4604      	mov	r4, r0
 8006c50:	f7ff fff0 	bl	8006c34 <__sfp_lock_acquire>
 8006c54:	6a23      	ldr	r3, [r4, #32]
 8006c56:	b11b      	cbz	r3, 8006c60 <__sinit+0x14>
 8006c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c5c:	f7ff bff0 	b.w	8006c40 <__sfp_lock_release>
 8006c60:	4b04      	ldr	r3, [pc, #16]	@ (8006c74 <__sinit+0x28>)
 8006c62:	6223      	str	r3, [r4, #32]
 8006c64:	4b04      	ldr	r3, [pc, #16]	@ (8006c78 <__sinit+0x2c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1f5      	bne.n	8006c58 <__sinit+0xc>
 8006c6c:	f7ff ffc4 	bl	8006bf8 <global_stdio_init.part.0>
 8006c70:	e7f2      	b.n	8006c58 <__sinit+0xc>
 8006c72:	bf00      	nop
 8006c74:	08006bb9 	.word	0x08006bb9
 8006c78:	200006b0 	.word	0x200006b0

08006c7c <_fwalk_sglue>:
 8006c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c80:	4607      	mov	r7, r0
 8006c82:	4688      	mov	r8, r1
 8006c84:	4614      	mov	r4, r2
 8006c86:	2600      	movs	r6, #0
 8006c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c90:	d505      	bpl.n	8006c9e <_fwalk_sglue+0x22>
 8006c92:	6824      	ldr	r4, [r4, #0]
 8006c94:	2c00      	cmp	r4, #0
 8006c96:	d1f7      	bne.n	8006c88 <_fwalk_sglue+0xc>
 8006c98:	4630      	mov	r0, r6
 8006c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9e:	89ab      	ldrh	r3, [r5, #12]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d907      	bls.n	8006cb4 <_fwalk_sglue+0x38>
 8006ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	d003      	beq.n	8006cb4 <_fwalk_sglue+0x38>
 8006cac:	4629      	mov	r1, r5
 8006cae:	4638      	mov	r0, r7
 8006cb0:	47c0      	blx	r8
 8006cb2:	4306      	orrs	r6, r0
 8006cb4:	3568      	adds	r5, #104	@ 0x68
 8006cb6:	e7e9      	b.n	8006c8c <_fwalk_sglue+0x10>

08006cb8 <memset>:
 8006cb8:	4402      	add	r2, r0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d100      	bne.n	8006cc2 <memset+0xa>
 8006cc0:	4770      	bx	lr
 8006cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cc6:	e7f9      	b.n	8006cbc <memset+0x4>

08006cc8 <_sbrk_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4d06      	ldr	r5, [pc, #24]	@ (8006ce4 <_sbrk_r+0x1c>)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4604      	mov	r4, r0
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	f7fc f99a 	bl	800300c <_sbrk>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_sbrk_r+0x1a>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_sbrk_r+0x1a>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	200006b8 	.word	0x200006b8

08006ce8 <__errno>:
 8006ce8:	4b01      	ldr	r3, [pc, #4]	@ (8006cf0 <__errno+0x8>)
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	2000001c 	.word	0x2000001c

08006cf4 <__libc_init_array>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	4d0d      	ldr	r5, [pc, #52]	@ (8006d2c <__libc_init_array+0x38>)
 8006cf8:	4c0d      	ldr	r4, [pc, #52]	@ (8006d30 <__libc_init_array+0x3c>)
 8006cfa:	1b64      	subs	r4, r4, r5
 8006cfc:	10a4      	asrs	r4, r4, #2
 8006cfe:	2600      	movs	r6, #0
 8006d00:	42a6      	cmp	r6, r4
 8006d02:	d109      	bne.n	8006d18 <__libc_init_array+0x24>
 8006d04:	4d0b      	ldr	r5, [pc, #44]	@ (8006d34 <__libc_init_array+0x40>)
 8006d06:	4c0c      	ldr	r4, [pc, #48]	@ (8006d38 <__libc_init_array+0x44>)
 8006d08:	f002 f81c 	bl	8008d44 <_init>
 8006d0c:	1b64      	subs	r4, r4, r5
 8006d0e:	10a4      	asrs	r4, r4, #2
 8006d10:	2600      	movs	r6, #0
 8006d12:	42a6      	cmp	r6, r4
 8006d14:	d105      	bne.n	8006d22 <__libc_init_array+0x2e>
 8006d16:	bd70      	pop	{r4, r5, r6, pc}
 8006d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1c:	4798      	blx	r3
 8006d1e:	3601      	adds	r6, #1
 8006d20:	e7ee      	b.n	8006d00 <__libc_init_array+0xc>
 8006d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d26:	4798      	blx	r3
 8006d28:	3601      	adds	r6, #1
 8006d2a:	e7f2      	b.n	8006d12 <__libc_init_array+0x1e>
 8006d2c:	0800951c 	.word	0x0800951c
 8006d30:	0800951c 	.word	0x0800951c
 8006d34:	0800951c 	.word	0x0800951c
 8006d38:	08009520 	.word	0x08009520

08006d3c <__retarget_lock_init_recursive>:
 8006d3c:	4770      	bx	lr

08006d3e <__retarget_lock_acquire_recursive>:
 8006d3e:	4770      	bx	lr

08006d40 <__retarget_lock_release_recursive>:
 8006d40:	4770      	bx	lr
	...

08006d44 <_localeconv_r>:
 8006d44:	4800      	ldr	r0, [pc, #0]	@ (8006d48 <_localeconv_r+0x4>)
 8006d46:	4770      	bx	lr
 8006d48:	2000015c 	.word	0x2000015c

08006d4c <memcpy>:
 8006d4c:	440a      	add	r2, r1
 8006d4e:	4291      	cmp	r1, r2
 8006d50:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006d54:	d100      	bne.n	8006d58 <memcpy+0xc>
 8006d56:	4770      	bx	lr
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d62:	4291      	cmp	r1, r2
 8006d64:	d1f9      	bne.n	8006d5a <memcpy+0xe>
 8006d66:	bd10      	pop	{r4, pc}

08006d68 <quorem>:
 8006d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6c:	6903      	ldr	r3, [r0, #16]
 8006d6e:	690c      	ldr	r4, [r1, #16]
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	4607      	mov	r7, r0
 8006d74:	db7e      	blt.n	8006e74 <quorem+0x10c>
 8006d76:	3c01      	subs	r4, #1
 8006d78:	f101 0814 	add.w	r8, r1, #20
 8006d7c:	00a3      	lsls	r3, r4, #2
 8006d7e:	f100 0514 	add.w	r5, r0, #20
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d92:	3301      	adds	r3, #1
 8006d94:	429a      	cmp	r2, r3
 8006d96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d9a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d9e:	d32e      	bcc.n	8006dfe <quorem+0x96>
 8006da0:	f04f 0a00 	mov.w	sl, #0
 8006da4:	46c4      	mov	ip, r8
 8006da6:	46ae      	mov	lr, r5
 8006da8:	46d3      	mov	fp, sl
 8006daa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006dae:	b298      	uxth	r0, r3
 8006db0:	fb06 a000 	mla	r0, r6, r0, sl
 8006db4:	0c02      	lsrs	r2, r0, #16
 8006db6:	0c1b      	lsrs	r3, r3, #16
 8006db8:	fb06 2303 	mla	r3, r6, r3, r2
 8006dbc:	f8de 2000 	ldr.w	r2, [lr]
 8006dc0:	b280      	uxth	r0, r0
 8006dc2:	b292      	uxth	r2, r2
 8006dc4:	1a12      	subs	r2, r2, r0
 8006dc6:	445a      	add	r2, fp
 8006dc8:	f8de 0000 	ldr.w	r0, [lr]
 8006dcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006dd6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006dda:	b292      	uxth	r2, r2
 8006ddc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006de0:	45e1      	cmp	r9, ip
 8006de2:	f84e 2b04 	str.w	r2, [lr], #4
 8006de6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006dea:	d2de      	bcs.n	8006daa <quorem+0x42>
 8006dec:	9b00      	ldr	r3, [sp, #0]
 8006dee:	58eb      	ldr	r3, [r5, r3]
 8006df0:	b92b      	cbnz	r3, 8006dfe <quorem+0x96>
 8006df2:	9b01      	ldr	r3, [sp, #4]
 8006df4:	3b04      	subs	r3, #4
 8006df6:	429d      	cmp	r5, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	d32f      	bcc.n	8006e5c <quorem+0xf4>
 8006dfc:	613c      	str	r4, [r7, #16]
 8006dfe:	4638      	mov	r0, r7
 8006e00:	f001 faca 	bl	8008398 <__mcmp>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	db25      	blt.n	8006e54 <quorem+0xec>
 8006e08:	4629      	mov	r1, r5
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e10:	f8d1 c000 	ldr.w	ip, [r1]
 8006e14:	fa1f fe82 	uxth.w	lr, r2
 8006e18:	fa1f f38c 	uxth.w	r3, ip
 8006e1c:	eba3 030e 	sub.w	r3, r3, lr
 8006e20:	4403      	add	r3, r0
 8006e22:	0c12      	lsrs	r2, r2, #16
 8006e24:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e28:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e32:	45c1      	cmp	r9, r8
 8006e34:	f841 3b04 	str.w	r3, [r1], #4
 8006e38:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e3c:	d2e6      	bcs.n	8006e0c <quorem+0xa4>
 8006e3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e46:	b922      	cbnz	r2, 8006e52 <quorem+0xea>
 8006e48:	3b04      	subs	r3, #4
 8006e4a:	429d      	cmp	r5, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	d30b      	bcc.n	8006e68 <quorem+0x100>
 8006e50:	613c      	str	r4, [r7, #16]
 8006e52:	3601      	adds	r6, #1
 8006e54:	4630      	mov	r0, r6
 8006e56:	b003      	add	sp, #12
 8006e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5c:	6812      	ldr	r2, [r2, #0]
 8006e5e:	3b04      	subs	r3, #4
 8006e60:	2a00      	cmp	r2, #0
 8006e62:	d1cb      	bne.n	8006dfc <quorem+0x94>
 8006e64:	3c01      	subs	r4, #1
 8006e66:	e7c6      	b.n	8006df6 <quorem+0x8e>
 8006e68:	6812      	ldr	r2, [r2, #0]
 8006e6a:	3b04      	subs	r3, #4
 8006e6c:	2a00      	cmp	r2, #0
 8006e6e:	d1ef      	bne.n	8006e50 <quorem+0xe8>
 8006e70:	3c01      	subs	r4, #1
 8006e72:	e7ea      	b.n	8006e4a <quorem+0xe2>
 8006e74:	2000      	movs	r0, #0
 8006e76:	e7ee      	b.n	8006e56 <quorem+0xee>

08006e78 <_dtoa_r>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	69c7      	ldr	r7, [r0, #28]
 8006e7e:	b097      	sub	sp, #92	@ 0x5c
 8006e80:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006e84:	ec55 4b10 	vmov	r4, r5, d0
 8006e88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006e8a:	9107      	str	r1, [sp, #28]
 8006e8c:	4681      	mov	r9, r0
 8006e8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e90:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e92:	b97f      	cbnz	r7, 8006eb4 <_dtoa_r+0x3c>
 8006e94:	2010      	movs	r0, #16
 8006e96:	f7ff fbe1 	bl	800665c <malloc>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006ea0:	b920      	cbnz	r0, 8006eac <_dtoa_r+0x34>
 8006ea2:	4ba9      	ldr	r3, [pc, #676]	@ (8007148 <_dtoa_r+0x2d0>)
 8006ea4:	21ef      	movs	r1, #239	@ 0xef
 8006ea6:	48a9      	ldr	r0, [pc, #676]	@ (800714c <_dtoa_r+0x2d4>)
 8006ea8:	f001 fc50 	bl	800874c <__assert_func>
 8006eac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006eb0:	6007      	str	r7, [r0, #0]
 8006eb2:	60c7      	str	r7, [r0, #12]
 8006eb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006eb8:	6819      	ldr	r1, [r3, #0]
 8006eba:	b159      	cbz	r1, 8006ed4 <_dtoa_r+0x5c>
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	604a      	str	r2, [r1, #4]
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	4093      	lsls	r3, r2
 8006ec4:	608b      	str	r3, [r1, #8]
 8006ec6:	4648      	mov	r0, r9
 8006ec8:	f001 f834 	bl	8007f34 <_Bfree>
 8006ecc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	1e2b      	subs	r3, r5, #0
 8006ed6:	bfb9      	ittee	lt
 8006ed8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006edc:	9305      	strlt	r3, [sp, #20]
 8006ede:	2300      	movge	r3, #0
 8006ee0:	6033      	strge	r3, [r6, #0]
 8006ee2:	9f05      	ldr	r7, [sp, #20]
 8006ee4:	4b9a      	ldr	r3, [pc, #616]	@ (8007150 <_dtoa_r+0x2d8>)
 8006ee6:	bfbc      	itt	lt
 8006ee8:	2201      	movlt	r2, #1
 8006eea:	6032      	strlt	r2, [r6, #0]
 8006eec:	43bb      	bics	r3, r7
 8006eee:	d112      	bne.n	8006f16 <_dtoa_r+0x9e>
 8006ef0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ef2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006efc:	4323      	orrs	r3, r4
 8006efe:	f000 855a 	beq.w	80079b6 <_dtoa_r+0xb3e>
 8006f02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007164 <_dtoa_r+0x2ec>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 855c 	beq.w	80079c6 <_dtoa_r+0xb4e>
 8006f0e:	f10a 0303 	add.w	r3, sl, #3
 8006f12:	f000 bd56 	b.w	80079c2 <_dtoa_r+0xb4a>
 8006f16:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	ec51 0b17 	vmov	r0, r1, d7
 8006f20:	2300      	movs	r3, #0
 8006f22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006f26:	f7f9 fdef 	bl	8000b08 <__aeabi_dcmpeq>
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	b158      	cbz	r0, 8006f46 <_dtoa_r+0xce>
 8006f2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f30:	2301      	movs	r3, #1
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f36:	b113      	cbz	r3, 8006f3e <_dtoa_r+0xc6>
 8006f38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006f3a:	4b86      	ldr	r3, [pc, #536]	@ (8007154 <_dtoa_r+0x2dc>)
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007168 <_dtoa_r+0x2f0>
 8006f42:	f000 bd40 	b.w	80079c6 <_dtoa_r+0xb4e>
 8006f46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006f4a:	aa14      	add	r2, sp, #80	@ 0x50
 8006f4c:	a915      	add	r1, sp, #84	@ 0x54
 8006f4e:	4648      	mov	r0, r9
 8006f50:	f001 fad2 	bl	80084f8 <__d2b>
 8006f54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f58:	9002      	str	r0, [sp, #8]
 8006f5a:	2e00      	cmp	r6, #0
 8006f5c:	d078      	beq.n	8007050 <_dtoa_r+0x1d8>
 8006f5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f78:	4619      	mov	r1, r3
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	4b76      	ldr	r3, [pc, #472]	@ (8007158 <_dtoa_r+0x2e0>)
 8006f7e:	f7f9 f9a3 	bl	80002c8 <__aeabi_dsub>
 8006f82:	a36b      	add	r3, pc, #428	@ (adr r3, 8007130 <_dtoa_r+0x2b8>)
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f7f9 fb56 	bl	8000638 <__aeabi_dmul>
 8006f8c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007138 <_dtoa_r+0x2c0>)
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f7f9 f99b 	bl	80002cc <__adddf3>
 8006f96:	4604      	mov	r4, r0
 8006f98:	4630      	mov	r0, r6
 8006f9a:	460d      	mov	r5, r1
 8006f9c:	f7f9 fae2 	bl	8000564 <__aeabi_i2d>
 8006fa0:	a367      	add	r3, pc, #412	@ (adr r3, 8007140 <_dtoa_r+0x2c8>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	f7f9 fb47 	bl	8000638 <__aeabi_dmul>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	f7f9 f98b 	bl	80002cc <__adddf3>
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	460d      	mov	r5, r1
 8006fba:	f7f9 fded 	bl	8000b98 <__aeabi_d2iz>
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	4607      	mov	r7, r0
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	f7f9 fda8 	bl	8000b1c <__aeabi_dcmplt>
 8006fcc:	b140      	cbz	r0, 8006fe0 <_dtoa_r+0x168>
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f7f9 fac8 	bl	8000564 <__aeabi_i2d>
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	462b      	mov	r3, r5
 8006fd8:	f7f9 fd96 	bl	8000b08 <__aeabi_dcmpeq>
 8006fdc:	b900      	cbnz	r0, 8006fe0 <_dtoa_r+0x168>
 8006fde:	3f01      	subs	r7, #1
 8006fe0:	2f16      	cmp	r7, #22
 8006fe2:	d852      	bhi.n	800708a <_dtoa_r+0x212>
 8006fe4:	4b5d      	ldr	r3, [pc, #372]	@ (800715c <_dtoa_r+0x2e4>)
 8006fe6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006ff2:	f7f9 fd93 	bl	8000b1c <__aeabi_dcmplt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d049      	beq.n	800708e <_dtoa_r+0x216>
 8006ffa:	3f01      	subs	r7, #1
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007000:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007002:	1b9b      	subs	r3, r3, r6
 8007004:	1e5a      	subs	r2, r3, #1
 8007006:	bf45      	ittet	mi
 8007008:	f1c3 0301 	rsbmi	r3, r3, #1
 800700c:	9300      	strmi	r3, [sp, #0]
 800700e:	2300      	movpl	r3, #0
 8007010:	2300      	movmi	r3, #0
 8007012:	9206      	str	r2, [sp, #24]
 8007014:	bf54      	ite	pl
 8007016:	9300      	strpl	r3, [sp, #0]
 8007018:	9306      	strmi	r3, [sp, #24]
 800701a:	2f00      	cmp	r7, #0
 800701c:	db39      	blt.n	8007092 <_dtoa_r+0x21a>
 800701e:	9b06      	ldr	r3, [sp, #24]
 8007020:	970d      	str	r7, [sp, #52]	@ 0x34
 8007022:	443b      	add	r3, r7
 8007024:	9306      	str	r3, [sp, #24]
 8007026:	2300      	movs	r3, #0
 8007028:	9308      	str	r3, [sp, #32]
 800702a:	9b07      	ldr	r3, [sp, #28]
 800702c:	2b09      	cmp	r3, #9
 800702e:	d863      	bhi.n	80070f8 <_dtoa_r+0x280>
 8007030:	2b05      	cmp	r3, #5
 8007032:	bfc4      	itt	gt
 8007034:	3b04      	subgt	r3, #4
 8007036:	9307      	strgt	r3, [sp, #28]
 8007038:	9b07      	ldr	r3, [sp, #28]
 800703a:	f1a3 0302 	sub.w	r3, r3, #2
 800703e:	bfcc      	ite	gt
 8007040:	2400      	movgt	r4, #0
 8007042:	2401      	movle	r4, #1
 8007044:	2b03      	cmp	r3, #3
 8007046:	d863      	bhi.n	8007110 <_dtoa_r+0x298>
 8007048:	e8df f003 	tbb	[pc, r3]
 800704c:	2b375452 	.word	0x2b375452
 8007050:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007054:	441e      	add	r6, r3
 8007056:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800705a:	2b20      	cmp	r3, #32
 800705c:	bfc1      	itttt	gt
 800705e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007062:	409f      	lslgt	r7, r3
 8007064:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007068:	fa24 f303 	lsrgt.w	r3, r4, r3
 800706c:	bfd6      	itet	le
 800706e:	f1c3 0320 	rsble	r3, r3, #32
 8007072:	ea47 0003 	orrgt.w	r0, r7, r3
 8007076:	fa04 f003 	lslle.w	r0, r4, r3
 800707a:	f7f9 fa63 	bl	8000544 <__aeabi_ui2d>
 800707e:	2201      	movs	r2, #1
 8007080:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007084:	3e01      	subs	r6, #1
 8007086:	9212      	str	r2, [sp, #72]	@ 0x48
 8007088:	e776      	b.n	8006f78 <_dtoa_r+0x100>
 800708a:	2301      	movs	r3, #1
 800708c:	e7b7      	b.n	8006ffe <_dtoa_r+0x186>
 800708e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007090:	e7b6      	b.n	8007000 <_dtoa_r+0x188>
 8007092:	9b00      	ldr	r3, [sp, #0]
 8007094:	1bdb      	subs	r3, r3, r7
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	427b      	negs	r3, r7
 800709a:	9308      	str	r3, [sp, #32]
 800709c:	2300      	movs	r3, #0
 800709e:	930d      	str	r3, [sp, #52]	@ 0x34
 80070a0:	e7c3      	b.n	800702a <_dtoa_r+0x1b2>
 80070a2:	2301      	movs	r3, #1
 80070a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070a8:	eb07 0b03 	add.w	fp, r7, r3
 80070ac:	f10b 0301 	add.w	r3, fp, #1
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	9303      	str	r3, [sp, #12]
 80070b4:	bfb8      	it	lt
 80070b6:	2301      	movlt	r3, #1
 80070b8:	e006      	b.n	80070c8 <_dtoa_r+0x250>
 80070ba:	2301      	movs	r3, #1
 80070bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	dd28      	ble.n	8007116 <_dtoa_r+0x29e>
 80070c4:	469b      	mov	fp, r3
 80070c6:	9303      	str	r3, [sp, #12]
 80070c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80070cc:	2100      	movs	r1, #0
 80070ce:	2204      	movs	r2, #4
 80070d0:	f102 0514 	add.w	r5, r2, #20
 80070d4:	429d      	cmp	r5, r3
 80070d6:	d926      	bls.n	8007126 <_dtoa_r+0x2ae>
 80070d8:	6041      	str	r1, [r0, #4]
 80070da:	4648      	mov	r0, r9
 80070dc:	f000 feea 	bl	8007eb4 <_Balloc>
 80070e0:	4682      	mov	sl, r0
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d142      	bne.n	800716c <_dtoa_r+0x2f4>
 80070e6:	4b1e      	ldr	r3, [pc, #120]	@ (8007160 <_dtoa_r+0x2e8>)
 80070e8:	4602      	mov	r2, r0
 80070ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80070ee:	e6da      	b.n	8006ea6 <_dtoa_r+0x2e>
 80070f0:	2300      	movs	r3, #0
 80070f2:	e7e3      	b.n	80070bc <_dtoa_r+0x244>
 80070f4:	2300      	movs	r3, #0
 80070f6:	e7d5      	b.n	80070a4 <_dtoa_r+0x22c>
 80070f8:	2401      	movs	r4, #1
 80070fa:	2300      	movs	r3, #0
 80070fc:	9307      	str	r3, [sp, #28]
 80070fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8007100:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8007104:	2200      	movs	r2, #0
 8007106:	f8cd b00c 	str.w	fp, [sp, #12]
 800710a:	2312      	movs	r3, #18
 800710c:	920c      	str	r2, [sp, #48]	@ 0x30
 800710e:	e7db      	b.n	80070c8 <_dtoa_r+0x250>
 8007110:	2301      	movs	r3, #1
 8007112:	9309      	str	r3, [sp, #36]	@ 0x24
 8007114:	e7f4      	b.n	8007100 <_dtoa_r+0x288>
 8007116:	f04f 0b01 	mov.w	fp, #1
 800711a:	f8cd b00c 	str.w	fp, [sp, #12]
 800711e:	465b      	mov	r3, fp
 8007120:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007124:	e7d0      	b.n	80070c8 <_dtoa_r+0x250>
 8007126:	3101      	adds	r1, #1
 8007128:	0052      	lsls	r2, r2, #1
 800712a:	e7d1      	b.n	80070d0 <_dtoa_r+0x258>
 800712c:	f3af 8000 	nop.w
 8007130:	636f4361 	.word	0x636f4361
 8007134:	3fd287a7 	.word	0x3fd287a7
 8007138:	8b60c8b3 	.word	0x8b60c8b3
 800713c:	3fc68a28 	.word	0x3fc68a28
 8007140:	509f79fb 	.word	0x509f79fb
 8007144:	3fd34413 	.word	0x3fd34413
 8007148:	080091dd 	.word	0x080091dd
 800714c:	080091f4 	.word	0x080091f4
 8007150:	7ff00000 	.word	0x7ff00000
 8007154:	080091ad 	.word	0x080091ad
 8007158:	3ff80000 	.word	0x3ff80000
 800715c:	08009348 	.word	0x08009348
 8007160:	0800924c 	.word	0x0800924c
 8007164:	080091d9 	.word	0x080091d9
 8007168:	080091ac 	.word	0x080091ac
 800716c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007170:	6018      	str	r0, [r3, #0]
 8007172:	9b03      	ldr	r3, [sp, #12]
 8007174:	2b0e      	cmp	r3, #14
 8007176:	f200 80a1 	bhi.w	80072bc <_dtoa_r+0x444>
 800717a:	2c00      	cmp	r4, #0
 800717c:	f000 809e 	beq.w	80072bc <_dtoa_r+0x444>
 8007180:	2f00      	cmp	r7, #0
 8007182:	dd33      	ble.n	80071ec <_dtoa_r+0x374>
 8007184:	4b9c      	ldr	r3, [pc, #624]	@ (80073f8 <_dtoa_r+0x580>)
 8007186:	f007 020f 	and.w	r2, r7, #15
 800718a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800718e:	ed93 7b00 	vldr	d7, [r3]
 8007192:	05f8      	lsls	r0, r7, #23
 8007194:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007198:	ea4f 1427 	mov.w	r4, r7, asr #4
 800719c:	d516      	bpl.n	80071cc <_dtoa_r+0x354>
 800719e:	4b97      	ldr	r3, [pc, #604]	@ (80073fc <_dtoa_r+0x584>)
 80071a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071a8:	f7f9 fb70 	bl	800088c <__aeabi_ddiv>
 80071ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071b0:	f004 040f 	and.w	r4, r4, #15
 80071b4:	2603      	movs	r6, #3
 80071b6:	4d91      	ldr	r5, [pc, #580]	@ (80073fc <_dtoa_r+0x584>)
 80071b8:	b954      	cbnz	r4, 80071d0 <_dtoa_r+0x358>
 80071ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071c2:	f7f9 fb63 	bl	800088c <__aeabi_ddiv>
 80071c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071ca:	e028      	b.n	800721e <_dtoa_r+0x3a6>
 80071cc:	2602      	movs	r6, #2
 80071ce:	e7f2      	b.n	80071b6 <_dtoa_r+0x33e>
 80071d0:	07e1      	lsls	r1, r4, #31
 80071d2:	d508      	bpl.n	80071e6 <_dtoa_r+0x36e>
 80071d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80071d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071dc:	f7f9 fa2c 	bl	8000638 <__aeabi_dmul>
 80071e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80071e4:	3601      	adds	r6, #1
 80071e6:	1064      	asrs	r4, r4, #1
 80071e8:	3508      	adds	r5, #8
 80071ea:	e7e5      	b.n	80071b8 <_dtoa_r+0x340>
 80071ec:	f000 80af 	beq.w	800734e <_dtoa_r+0x4d6>
 80071f0:	427c      	negs	r4, r7
 80071f2:	4b81      	ldr	r3, [pc, #516]	@ (80073f8 <_dtoa_r+0x580>)
 80071f4:	4d81      	ldr	r5, [pc, #516]	@ (80073fc <_dtoa_r+0x584>)
 80071f6:	f004 020f 	and.w	r2, r4, #15
 80071fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007206:	f7f9 fa17 	bl	8000638 <__aeabi_dmul>
 800720a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800720e:	1124      	asrs	r4, r4, #4
 8007210:	2300      	movs	r3, #0
 8007212:	2602      	movs	r6, #2
 8007214:	2c00      	cmp	r4, #0
 8007216:	f040 808f 	bne.w	8007338 <_dtoa_r+0x4c0>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1d3      	bne.n	80071c6 <_dtoa_r+0x34e>
 800721e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007220:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 8094 	beq.w	8007352 <_dtoa_r+0x4da>
 800722a:	4b75      	ldr	r3, [pc, #468]	@ (8007400 <_dtoa_r+0x588>)
 800722c:	2200      	movs	r2, #0
 800722e:	4620      	mov	r0, r4
 8007230:	4629      	mov	r1, r5
 8007232:	f7f9 fc73 	bl	8000b1c <__aeabi_dcmplt>
 8007236:	2800      	cmp	r0, #0
 8007238:	f000 808b 	beq.w	8007352 <_dtoa_r+0x4da>
 800723c:	9b03      	ldr	r3, [sp, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8087 	beq.w	8007352 <_dtoa_r+0x4da>
 8007244:	f1bb 0f00 	cmp.w	fp, #0
 8007248:	dd34      	ble.n	80072b4 <_dtoa_r+0x43c>
 800724a:	4620      	mov	r0, r4
 800724c:	4b6d      	ldr	r3, [pc, #436]	@ (8007404 <_dtoa_r+0x58c>)
 800724e:	2200      	movs	r2, #0
 8007250:	4629      	mov	r1, r5
 8007252:	f7f9 f9f1 	bl	8000638 <__aeabi_dmul>
 8007256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800725a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800725e:	3601      	adds	r6, #1
 8007260:	465c      	mov	r4, fp
 8007262:	4630      	mov	r0, r6
 8007264:	f7f9 f97e 	bl	8000564 <__aeabi_i2d>
 8007268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800726c:	f7f9 f9e4 	bl	8000638 <__aeabi_dmul>
 8007270:	4b65      	ldr	r3, [pc, #404]	@ (8007408 <_dtoa_r+0x590>)
 8007272:	2200      	movs	r2, #0
 8007274:	f7f9 f82a 	bl	80002cc <__adddf3>
 8007278:	4605      	mov	r5, r0
 800727a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800727e:	2c00      	cmp	r4, #0
 8007280:	d16a      	bne.n	8007358 <_dtoa_r+0x4e0>
 8007282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007286:	4b61      	ldr	r3, [pc, #388]	@ (800740c <_dtoa_r+0x594>)
 8007288:	2200      	movs	r2, #0
 800728a:	f7f9 f81d 	bl	80002c8 <__aeabi_dsub>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007296:	462a      	mov	r2, r5
 8007298:	4633      	mov	r3, r6
 800729a:	f7f9 fc5d 	bl	8000b58 <__aeabi_dcmpgt>
 800729e:	2800      	cmp	r0, #0
 80072a0:	f040 8298 	bne.w	80077d4 <_dtoa_r+0x95c>
 80072a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072a8:	462a      	mov	r2, r5
 80072aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80072ae:	f7f9 fc35 	bl	8000b1c <__aeabi_dcmplt>
 80072b2:	bb38      	cbnz	r0, 8007304 <_dtoa_r+0x48c>
 80072b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80072b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f2c0 8157 	blt.w	8007572 <_dtoa_r+0x6fa>
 80072c4:	2f0e      	cmp	r7, #14
 80072c6:	f300 8154 	bgt.w	8007572 <_dtoa_r+0x6fa>
 80072ca:	4b4b      	ldr	r3, [pc, #300]	@ (80073f8 <_dtoa_r+0x580>)
 80072cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072d0:	ed93 7b00 	vldr	d7, [r3]
 80072d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	ed8d 7b00 	vstr	d7, [sp]
 80072dc:	f280 80e5 	bge.w	80074aa <_dtoa_r+0x632>
 80072e0:	9b03      	ldr	r3, [sp, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f300 80e1 	bgt.w	80074aa <_dtoa_r+0x632>
 80072e8:	d10c      	bne.n	8007304 <_dtoa_r+0x48c>
 80072ea:	4b48      	ldr	r3, [pc, #288]	@ (800740c <_dtoa_r+0x594>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	ec51 0b17 	vmov	r0, r1, d7
 80072f2:	f7f9 f9a1 	bl	8000638 <__aeabi_dmul>
 80072f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072fa:	f7f9 fc23 	bl	8000b44 <__aeabi_dcmpge>
 80072fe:	2800      	cmp	r0, #0
 8007300:	f000 8266 	beq.w	80077d0 <_dtoa_r+0x958>
 8007304:	2400      	movs	r4, #0
 8007306:	4625      	mov	r5, r4
 8007308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800730a:	4656      	mov	r6, sl
 800730c:	ea6f 0803 	mvn.w	r8, r3
 8007310:	2700      	movs	r7, #0
 8007312:	4621      	mov	r1, r4
 8007314:	4648      	mov	r0, r9
 8007316:	f000 fe0d 	bl	8007f34 <_Bfree>
 800731a:	2d00      	cmp	r5, #0
 800731c:	f000 80bd 	beq.w	800749a <_dtoa_r+0x622>
 8007320:	b12f      	cbz	r7, 800732e <_dtoa_r+0x4b6>
 8007322:	42af      	cmp	r7, r5
 8007324:	d003      	beq.n	800732e <_dtoa_r+0x4b6>
 8007326:	4639      	mov	r1, r7
 8007328:	4648      	mov	r0, r9
 800732a:	f000 fe03 	bl	8007f34 <_Bfree>
 800732e:	4629      	mov	r1, r5
 8007330:	4648      	mov	r0, r9
 8007332:	f000 fdff 	bl	8007f34 <_Bfree>
 8007336:	e0b0      	b.n	800749a <_dtoa_r+0x622>
 8007338:	07e2      	lsls	r2, r4, #31
 800733a:	d505      	bpl.n	8007348 <_dtoa_r+0x4d0>
 800733c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007340:	f7f9 f97a 	bl	8000638 <__aeabi_dmul>
 8007344:	3601      	adds	r6, #1
 8007346:	2301      	movs	r3, #1
 8007348:	1064      	asrs	r4, r4, #1
 800734a:	3508      	adds	r5, #8
 800734c:	e762      	b.n	8007214 <_dtoa_r+0x39c>
 800734e:	2602      	movs	r6, #2
 8007350:	e765      	b.n	800721e <_dtoa_r+0x3a6>
 8007352:	9c03      	ldr	r4, [sp, #12]
 8007354:	46b8      	mov	r8, r7
 8007356:	e784      	b.n	8007262 <_dtoa_r+0x3ea>
 8007358:	4b27      	ldr	r3, [pc, #156]	@ (80073f8 <_dtoa_r+0x580>)
 800735a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800735c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007360:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007364:	4454      	add	r4, sl
 8007366:	2900      	cmp	r1, #0
 8007368:	d054      	beq.n	8007414 <_dtoa_r+0x59c>
 800736a:	4929      	ldr	r1, [pc, #164]	@ (8007410 <_dtoa_r+0x598>)
 800736c:	2000      	movs	r0, #0
 800736e:	f7f9 fa8d 	bl	800088c <__aeabi_ddiv>
 8007372:	4633      	mov	r3, r6
 8007374:	462a      	mov	r2, r5
 8007376:	f7f8 ffa7 	bl	80002c8 <__aeabi_dsub>
 800737a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800737e:	4656      	mov	r6, sl
 8007380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007384:	f7f9 fc08 	bl	8000b98 <__aeabi_d2iz>
 8007388:	4605      	mov	r5, r0
 800738a:	f7f9 f8eb 	bl	8000564 <__aeabi_i2d>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007396:	f7f8 ff97 	bl	80002c8 <__aeabi_dsub>
 800739a:	3530      	adds	r5, #48	@ 0x30
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073a4:	f806 5b01 	strb.w	r5, [r6], #1
 80073a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80073ac:	f7f9 fbb6 	bl	8000b1c <__aeabi_dcmplt>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d172      	bne.n	800749a <_dtoa_r+0x622>
 80073b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073b8:	4911      	ldr	r1, [pc, #68]	@ (8007400 <_dtoa_r+0x588>)
 80073ba:	2000      	movs	r0, #0
 80073bc:	f7f8 ff84 	bl	80002c8 <__aeabi_dsub>
 80073c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80073c4:	f7f9 fbaa 	bl	8000b1c <__aeabi_dcmplt>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	f040 80b4 	bne.w	8007536 <_dtoa_r+0x6be>
 80073ce:	42a6      	cmp	r6, r4
 80073d0:	f43f af70 	beq.w	80072b4 <_dtoa_r+0x43c>
 80073d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80073d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007404 <_dtoa_r+0x58c>)
 80073da:	2200      	movs	r2, #0
 80073dc:	f7f9 f92c 	bl	8000638 <__aeabi_dmul>
 80073e0:	4b08      	ldr	r3, [pc, #32]	@ (8007404 <_dtoa_r+0x58c>)
 80073e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80073e6:	2200      	movs	r2, #0
 80073e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073ec:	f7f9 f924 	bl	8000638 <__aeabi_dmul>
 80073f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073f4:	e7c4      	b.n	8007380 <_dtoa_r+0x508>
 80073f6:	bf00      	nop
 80073f8:	08009348 	.word	0x08009348
 80073fc:	08009320 	.word	0x08009320
 8007400:	3ff00000 	.word	0x3ff00000
 8007404:	40240000 	.word	0x40240000
 8007408:	401c0000 	.word	0x401c0000
 800740c:	40140000 	.word	0x40140000
 8007410:	3fe00000 	.word	0x3fe00000
 8007414:	4631      	mov	r1, r6
 8007416:	4628      	mov	r0, r5
 8007418:	f7f9 f90e 	bl	8000638 <__aeabi_dmul>
 800741c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007420:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007422:	4656      	mov	r6, sl
 8007424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007428:	f7f9 fbb6 	bl	8000b98 <__aeabi_d2iz>
 800742c:	4605      	mov	r5, r0
 800742e:	f7f9 f899 	bl	8000564 <__aeabi_i2d>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800743a:	f7f8 ff45 	bl	80002c8 <__aeabi_dsub>
 800743e:	3530      	adds	r5, #48	@ 0x30
 8007440:	f806 5b01 	strb.w	r5, [r6], #1
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	42a6      	cmp	r6, r4
 800744a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800744e:	f04f 0200 	mov.w	r2, #0
 8007452:	d124      	bne.n	800749e <_dtoa_r+0x626>
 8007454:	4baf      	ldr	r3, [pc, #700]	@ (8007714 <_dtoa_r+0x89c>)
 8007456:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800745a:	f7f8 ff37 	bl	80002cc <__adddf3>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007466:	f7f9 fb77 	bl	8000b58 <__aeabi_dcmpgt>
 800746a:	2800      	cmp	r0, #0
 800746c:	d163      	bne.n	8007536 <_dtoa_r+0x6be>
 800746e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007472:	49a8      	ldr	r1, [pc, #672]	@ (8007714 <_dtoa_r+0x89c>)
 8007474:	2000      	movs	r0, #0
 8007476:	f7f8 ff27 	bl	80002c8 <__aeabi_dsub>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007482:	f7f9 fb4b 	bl	8000b1c <__aeabi_dcmplt>
 8007486:	2800      	cmp	r0, #0
 8007488:	f43f af14 	beq.w	80072b4 <_dtoa_r+0x43c>
 800748c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800748e:	1e73      	subs	r3, r6, #1
 8007490:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007492:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007496:	2b30      	cmp	r3, #48	@ 0x30
 8007498:	d0f8      	beq.n	800748c <_dtoa_r+0x614>
 800749a:	4647      	mov	r7, r8
 800749c:	e03b      	b.n	8007516 <_dtoa_r+0x69e>
 800749e:	4b9e      	ldr	r3, [pc, #632]	@ (8007718 <_dtoa_r+0x8a0>)
 80074a0:	f7f9 f8ca 	bl	8000638 <__aeabi_dmul>
 80074a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074a8:	e7bc      	b.n	8007424 <_dtoa_r+0x5ac>
 80074aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80074ae:	4656      	mov	r6, sl
 80074b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074b4:	4620      	mov	r0, r4
 80074b6:	4629      	mov	r1, r5
 80074b8:	f7f9 f9e8 	bl	800088c <__aeabi_ddiv>
 80074bc:	f7f9 fb6c 	bl	8000b98 <__aeabi_d2iz>
 80074c0:	4680      	mov	r8, r0
 80074c2:	f7f9 f84f 	bl	8000564 <__aeabi_i2d>
 80074c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ca:	f7f9 f8b5 	bl	8000638 <__aeabi_dmul>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4620      	mov	r0, r4
 80074d4:	4629      	mov	r1, r5
 80074d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80074da:	f7f8 fef5 	bl	80002c8 <__aeabi_dsub>
 80074de:	f806 4b01 	strb.w	r4, [r6], #1
 80074e2:	9d03      	ldr	r5, [sp, #12]
 80074e4:	eba6 040a 	sub.w	r4, r6, sl
 80074e8:	42a5      	cmp	r5, r4
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	d133      	bne.n	8007558 <_dtoa_r+0x6e0>
 80074f0:	f7f8 feec 	bl	80002cc <__adddf3>
 80074f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074f8:	4604      	mov	r4, r0
 80074fa:	460d      	mov	r5, r1
 80074fc:	f7f9 fb2c 	bl	8000b58 <__aeabi_dcmpgt>
 8007500:	b9c0      	cbnz	r0, 8007534 <_dtoa_r+0x6bc>
 8007502:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007506:	4620      	mov	r0, r4
 8007508:	4629      	mov	r1, r5
 800750a:	f7f9 fafd 	bl	8000b08 <__aeabi_dcmpeq>
 800750e:	b110      	cbz	r0, 8007516 <_dtoa_r+0x69e>
 8007510:	f018 0f01 	tst.w	r8, #1
 8007514:	d10e      	bne.n	8007534 <_dtoa_r+0x6bc>
 8007516:	9902      	ldr	r1, [sp, #8]
 8007518:	4648      	mov	r0, r9
 800751a:	f000 fd0b 	bl	8007f34 <_Bfree>
 800751e:	2300      	movs	r3, #0
 8007520:	7033      	strb	r3, [r6, #0]
 8007522:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007524:	3701      	adds	r7, #1
 8007526:	601f      	str	r7, [r3, #0]
 8007528:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 824b 	beq.w	80079c6 <_dtoa_r+0xb4e>
 8007530:	601e      	str	r6, [r3, #0]
 8007532:	e248      	b.n	80079c6 <_dtoa_r+0xb4e>
 8007534:	46b8      	mov	r8, r7
 8007536:	4633      	mov	r3, r6
 8007538:	461e      	mov	r6, r3
 800753a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800753e:	2a39      	cmp	r2, #57	@ 0x39
 8007540:	d106      	bne.n	8007550 <_dtoa_r+0x6d8>
 8007542:	459a      	cmp	sl, r3
 8007544:	d1f8      	bne.n	8007538 <_dtoa_r+0x6c0>
 8007546:	2230      	movs	r2, #48	@ 0x30
 8007548:	f108 0801 	add.w	r8, r8, #1
 800754c:	f88a 2000 	strb.w	r2, [sl]
 8007550:	781a      	ldrb	r2, [r3, #0]
 8007552:	3201      	adds	r2, #1
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	e7a0      	b.n	800749a <_dtoa_r+0x622>
 8007558:	4b6f      	ldr	r3, [pc, #444]	@ (8007718 <_dtoa_r+0x8a0>)
 800755a:	2200      	movs	r2, #0
 800755c:	f7f9 f86c 	bl	8000638 <__aeabi_dmul>
 8007560:	2200      	movs	r2, #0
 8007562:	2300      	movs	r3, #0
 8007564:	4604      	mov	r4, r0
 8007566:	460d      	mov	r5, r1
 8007568:	f7f9 face 	bl	8000b08 <__aeabi_dcmpeq>
 800756c:	2800      	cmp	r0, #0
 800756e:	d09f      	beq.n	80074b0 <_dtoa_r+0x638>
 8007570:	e7d1      	b.n	8007516 <_dtoa_r+0x69e>
 8007572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007574:	2a00      	cmp	r2, #0
 8007576:	f000 80ea 	beq.w	800774e <_dtoa_r+0x8d6>
 800757a:	9a07      	ldr	r2, [sp, #28]
 800757c:	2a01      	cmp	r2, #1
 800757e:	f300 80cd 	bgt.w	800771c <_dtoa_r+0x8a4>
 8007582:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007584:	2a00      	cmp	r2, #0
 8007586:	f000 80c1 	beq.w	800770c <_dtoa_r+0x894>
 800758a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800758e:	9c08      	ldr	r4, [sp, #32]
 8007590:	9e00      	ldr	r6, [sp, #0]
 8007592:	9a00      	ldr	r2, [sp, #0]
 8007594:	441a      	add	r2, r3
 8007596:	9200      	str	r2, [sp, #0]
 8007598:	9a06      	ldr	r2, [sp, #24]
 800759a:	2101      	movs	r1, #1
 800759c:	441a      	add	r2, r3
 800759e:	4648      	mov	r0, r9
 80075a0:	9206      	str	r2, [sp, #24]
 80075a2:	f000 fd7b 	bl	800809c <__i2b>
 80075a6:	4605      	mov	r5, r0
 80075a8:	b166      	cbz	r6, 80075c4 <_dtoa_r+0x74c>
 80075aa:	9b06      	ldr	r3, [sp, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	dd09      	ble.n	80075c4 <_dtoa_r+0x74c>
 80075b0:	42b3      	cmp	r3, r6
 80075b2:	9a00      	ldr	r2, [sp, #0]
 80075b4:	bfa8      	it	ge
 80075b6:	4633      	movge	r3, r6
 80075b8:	1ad2      	subs	r2, r2, r3
 80075ba:	9200      	str	r2, [sp, #0]
 80075bc:	9a06      	ldr	r2, [sp, #24]
 80075be:	1af6      	subs	r6, r6, r3
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	9306      	str	r3, [sp, #24]
 80075c4:	9b08      	ldr	r3, [sp, #32]
 80075c6:	b30b      	cbz	r3, 800760c <_dtoa_r+0x794>
 80075c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80c6 	beq.w	800775c <_dtoa_r+0x8e4>
 80075d0:	2c00      	cmp	r4, #0
 80075d2:	f000 80c0 	beq.w	8007756 <_dtoa_r+0x8de>
 80075d6:	4629      	mov	r1, r5
 80075d8:	4622      	mov	r2, r4
 80075da:	4648      	mov	r0, r9
 80075dc:	f000 fe16 	bl	800820c <__pow5mult>
 80075e0:	9a02      	ldr	r2, [sp, #8]
 80075e2:	4601      	mov	r1, r0
 80075e4:	4605      	mov	r5, r0
 80075e6:	4648      	mov	r0, r9
 80075e8:	f000 fd6e 	bl	80080c8 <__multiply>
 80075ec:	9902      	ldr	r1, [sp, #8]
 80075ee:	4680      	mov	r8, r0
 80075f0:	4648      	mov	r0, r9
 80075f2:	f000 fc9f 	bl	8007f34 <_Bfree>
 80075f6:	9b08      	ldr	r3, [sp, #32]
 80075f8:	1b1b      	subs	r3, r3, r4
 80075fa:	9308      	str	r3, [sp, #32]
 80075fc:	f000 80b1 	beq.w	8007762 <_dtoa_r+0x8ea>
 8007600:	9a08      	ldr	r2, [sp, #32]
 8007602:	4641      	mov	r1, r8
 8007604:	4648      	mov	r0, r9
 8007606:	f000 fe01 	bl	800820c <__pow5mult>
 800760a:	9002      	str	r0, [sp, #8]
 800760c:	2101      	movs	r1, #1
 800760e:	4648      	mov	r0, r9
 8007610:	f000 fd44 	bl	800809c <__i2b>
 8007614:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007616:	4604      	mov	r4, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 81d8 	beq.w	80079ce <_dtoa_r+0xb56>
 800761e:	461a      	mov	r2, r3
 8007620:	4601      	mov	r1, r0
 8007622:	4648      	mov	r0, r9
 8007624:	f000 fdf2 	bl	800820c <__pow5mult>
 8007628:	9b07      	ldr	r3, [sp, #28]
 800762a:	2b01      	cmp	r3, #1
 800762c:	4604      	mov	r4, r0
 800762e:	f300 809f 	bgt.w	8007770 <_dtoa_r+0x8f8>
 8007632:	9b04      	ldr	r3, [sp, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f040 8097 	bne.w	8007768 <_dtoa_r+0x8f0>
 800763a:	9b05      	ldr	r3, [sp, #20]
 800763c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007640:	2b00      	cmp	r3, #0
 8007642:	f040 8093 	bne.w	800776c <_dtoa_r+0x8f4>
 8007646:	9b05      	ldr	r3, [sp, #20]
 8007648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800764c:	0d1b      	lsrs	r3, r3, #20
 800764e:	051b      	lsls	r3, r3, #20
 8007650:	b133      	cbz	r3, 8007660 <_dtoa_r+0x7e8>
 8007652:	9b00      	ldr	r3, [sp, #0]
 8007654:	3301      	adds	r3, #1
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	9b06      	ldr	r3, [sp, #24]
 800765a:	3301      	adds	r3, #1
 800765c:	9306      	str	r3, [sp, #24]
 800765e:	2301      	movs	r3, #1
 8007660:	9308      	str	r3, [sp, #32]
 8007662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 81b8 	beq.w	80079da <_dtoa_r+0xb62>
 800766a:	6923      	ldr	r3, [r4, #16]
 800766c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007670:	6918      	ldr	r0, [r3, #16]
 8007672:	f000 fcc7 	bl	8008004 <__hi0bits>
 8007676:	f1c0 0020 	rsb	r0, r0, #32
 800767a:	9b06      	ldr	r3, [sp, #24]
 800767c:	4418      	add	r0, r3
 800767e:	f010 001f 	ands.w	r0, r0, #31
 8007682:	f000 8082 	beq.w	800778a <_dtoa_r+0x912>
 8007686:	f1c0 0320 	rsb	r3, r0, #32
 800768a:	2b04      	cmp	r3, #4
 800768c:	dd73      	ble.n	8007776 <_dtoa_r+0x8fe>
 800768e:	9b00      	ldr	r3, [sp, #0]
 8007690:	f1c0 001c 	rsb	r0, r0, #28
 8007694:	4403      	add	r3, r0
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	9b06      	ldr	r3, [sp, #24]
 800769a:	4403      	add	r3, r0
 800769c:	4406      	add	r6, r0
 800769e:	9306      	str	r3, [sp, #24]
 80076a0:	9b00      	ldr	r3, [sp, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	dd05      	ble.n	80076b2 <_dtoa_r+0x83a>
 80076a6:	9902      	ldr	r1, [sp, #8]
 80076a8:	461a      	mov	r2, r3
 80076aa:	4648      	mov	r0, r9
 80076ac:	f000 fe08 	bl	80082c0 <__lshift>
 80076b0:	9002      	str	r0, [sp, #8]
 80076b2:	9b06      	ldr	r3, [sp, #24]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dd05      	ble.n	80076c4 <_dtoa_r+0x84c>
 80076b8:	4621      	mov	r1, r4
 80076ba:	461a      	mov	r2, r3
 80076bc:	4648      	mov	r0, r9
 80076be:	f000 fdff 	bl	80082c0 <__lshift>
 80076c2:	4604      	mov	r4, r0
 80076c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d061      	beq.n	800778e <_dtoa_r+0x916>
 80076ca:	9802      	ldr	r0, [sp, #8]
 80076cc:	4621      	mov	r1, r4
 80076ce:	f000 fe63 	bl	8008398 <__mcmp>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	da5b      	bge.n	800778e <_dtoa_r+0x916>
 80076d6:	2300      	movs	r3, #0
 80076d8:	9902      	ldr	r1, [sp, #8]
 80076da:	220a      	movs	r2, #10
 80076dc:	4648      	mov	r0, r9
 80076de:	f000 fc4b 	bl	8007f78 <__multadd>
 80076e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e4:	9002      	str	r0, [sp, #8]
 80076e6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 8177 	beq.w	80079de <_dtoa_r+0xb66>
 80076f0:	4629      	mov	r1, r5
 80076f2:	2300      	movs	r3, #0
 80076f4:	220a      	movs	r2, #10
 80076f6:	4648      	mov	r0, r9
 80076f8:	f000 fc3e 	bl	8007f78 <__multadd>
 80076fc:	f1bb 0f00 	cmp.w	fp, #0
 8007700:	4605      	mov	r5, r0
 8007702:	dc6f      	bgt.n	80077e4 <_dtoa_r+0x96c>
 8007704:	9b07      	ldr	r3, [sp, #28]
 8007706:	2b02      	cmp	r3, #2
 8007708:	dc49      	bgt.n	800779e <_dtoa_r+0x926>
 800770a:	e06b      	b.n	80077e4 <_dtoa_r+0x96c>
 800770c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800770e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007712:	e73c      	b.n	800758e <_dtoa_r+0x716>
 8007714:	3fe00000 	.word	0x3fe00000
 8007718:	40240000 	.word	0x40240000
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	1e5c      	subs	r4, r3, #1
 8007720:	9b08      	ldr	r3, [sp, #32]
 8007722:	42a3      	cmp	r3, r4
 8007724:	db09      	blt.n	800773a <_dtoa_r+0x8c2>
 8007726:	1b1c      	subs	r4, r3, r4
 8007728:	9b03      	ldr	r3, [sp, #12]
 800772a:	2b00      	cmp	r3, #0
 800772c:	f6bf af30 	bge.w	8007590 <_dtoa_r+0x718>
 8007730:	9b00      	ldr	r3, [sp, #0]
 8007732:	9a03      	ldr	r2, [sp, #12]
 8007734:	1a9e      	subs	r6, r3, r2
 8007736:	2300      	movs	r3, #0
 8007738:	e72b      	b.n	8007592 <_dtoa_r+0x71a>
 800773a:	9b08      	ldr	r3, [sp, #32]
 800773c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800773e:	9408      	str	r4, [sp, #32]
 8007740:	1ae3      	subs	r3, r4, r3
 8007742:	441a      	add	r2, r3
 8007744:	9e00      	ldr	r6, [sp, #0]
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	920d      	str	r2, [sp, #52]	@ 0x34
 800774a:	2400      	movs	r4, #0
 800774c:	e721      	b.n	8007592 <_dtoa_r+0x71a>
 800774e:	9c08      	ldr	r4, [sp, #32]
 8007750:	9e00      	ldr	r6, [sp, #0]
 8007752:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007754:	e728      	b.n	80075a8 <_dtoa_r+0x730>
 8007756:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800775a:	e751      	b.n	8007600 <_dtoa_r+0x788>
 800775c:	9a08      	ldr	r2, [sp, #32]
 800775e:	9902      	ldr	r1, [sp, #8]
 8007760:	e750      	b.n	8007604 <_dtoa_r+0x78c>
 8007762:	f8cd 8008 	str.w	r8, [sp, #8]
 8007766:	e751      	b.n	800760c <_dtoa_r+0x794>
 8007768:	2300      	movs	r3, #0
 800776a:	e779      	b.n	8007660 <_dtoa_r+0x7e8>
 800776c:	9b04      	ldr	r3, [sp, #16]
 800776e:	e777      	b.n	8007660 <_dtoa_r+0x7e8>
 8007770:	2300      	movs	r3, #0
 8007772:	9308      	str	r3, [sp, #32]
 8007774:	e779      	b.n	800766a <_dtoa_r+0x7f2>
 8007776:	d093      	beq.n	80076a0 <_dtoa_r+0x828>
 8007778:	9a00      	ldr	r2, [sp, #0]
 800777a:	331c      	adds	r3, #28
 800777c:	441a      	add	r2, r3
 800777e:	9200      	str	r2, [sp, #0]
 8007780:	9a06      	ldr	r2, [sp, #24]
 8007782:	441a      	add	r2, r3
 8007784:	441e      	add	r6, r3
 8007786:	9206      	str	r2, [sp, #24]
 8007788:	e78a      	b.n	80076a0 <_dtoa_r+0x828>
 800778a:	4603      	mov	r3, r0
 800778c:	e7f4      	b.n	8007778 <_dtoa_r+0x900>
 800778e:	9b03      	ldr	r3, [sp, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	46b8      	mov	r8, r7
 8007794:	dc20      	bgt.n	80077d8 <_dtoa_r+0x960>
 8007796:	469b      	mov	fp, r3
 8007798:	9b07      	ldr	r3, [sp, #28]
 800779a:	2b02      	cmp	r3, #2
 800779c:	dd1e      	ble.n	80077dc <_dtoa_r+0x964>
 800779e:	f1bb 0f00 	cmp.w	fp, #0
 80077a2:	f47f adb1 	bne.w	8007308 <_dtoa_r+0x490>
 80077a6:	4621      	mov	r1, r4
 80077a8:	465b      	mov	r3, fp
 80077aa:	2205      	movs	r2, #5
 80077ac:	4648      	mov	r0, r9
 80077ae:	f000 fbe3 	bl	8007f78 <__multadd>
 80077b2:	4601      	mov	r1, r0
 80077b4:	4604      	mov	r4, r0
 80077b6:	9802      	ldr	r0, [sp, #8]
 80077b8:	f000 fdee 	bl	8008398 <__mcmp>
 80077bc:	2800      	cmp	r0, #0
 80077be:	f77f ada3 	ble.w	8007308 <_dtoa_r+0x490>
 80077c2:	4656      	mov	r6, sl
 80077c4:	2331      	movs	r3, #49	@ 0x31
 80077c6:	f806 3b01 	strb.w	r3, [r6], #1
 80077ca:	f108 0801 	add.w	r8, r8, #1
 80077ce:	e59f      	b.n	8007310 <_dtoa_r+0x498>
 80077d0:	9c03      	ldr	r4, [sp, #12]
 80077d2:	46b8      	mov	r8, r7
 80077d4:	4625      	mov	r5, r4
 80077d6:	e7f4      	b.n	80077c2 <_dtoa_r+0x94a>
 80077d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80077dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 8101 	beq.w	80079e6 <_dtoa_r+0xb6e>
 80077e4:	2e00      	cmp	r6, #0
 80077e6:	dd05      	ble.n	80077f4 <_dtoa_r+0x97c>
 80077e8:	4629      	mov	r1, r5
 80077ea:	4632      	mov	r2, r6
 80077ec:	4648      	mov	r0, r9
 80077ee:	f000 fd67 	bl	80082c0 <__lshift>
 80077f2:	4605      	mov	r5, r0
 80077f4:	9b08      	ldr	r3, [sp, #32]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d05c      	beq.n	80078b4 <_dtoa_r+0xa3c>
 80077fa:	6869      	ldr	r1, [r5, #4]
 80077fc:	4648      	mov	r0, r9
 80077fe:	f000 fb59 	bl	8007eb4 <_Balloc>
 8007802:	4606      	mov	r6, r0
 8007804:	b928      	cbnz	r0, 8007812 <_dtoa_r+0x99a>
 8007806:	4b82      	ldr	r3, [pc, #520]	@ (8007a10 <_dtoa_r+0xb98>)
 8007808:	4602      	mov	r2, r0
 800780a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800780e:	f7ff bb4a 	b.w	8006ea6 <_dtoa_r+0x2e>
 8007812:	692a      	ldr	r2, [r5, #16]
 8007814:	3202      	adds	r2, #2
 8007816:	0092      	lsls	r2, r2, #2
 8007818:	f105 010c 	add.w	r1, r5, #12
 800781c:	300c      	adds	r0, #12
 800781e:	f7ff fa95 	bl	8006d4c <memcpy>
 8007822:	2201      	movs	r2, #1
 8007824:	4631      	mov	r1, r6
 8007826:	4648      	mov	r0, r9
 8007828:	f000 fd4a 	bl	80082c0 <__lshift>
 800782c:	f10a 0301 	add.w	r3, sl, #1
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	eb0a 030b 	add.w	r3, sl, fp
 8007836:	9308      	str	r3, [sp, #32]
 8007838:	9b04      	ldr	r3, [sp, #16]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	462f      	mov	r7, r5
 8007840:	9306      	str	r3, [sp, #24]
 8007842:	4605      	mov	r5, r0
 8007844:	9b00      	ldr	r3, [sp, #0]
 8007846:	9802      	ldr	r0, [sp, #8]
 8007848:	4621      	mov	r1, r4
 800784a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800784e:	f7ff fa8b 	bl	8006d68 <quorem>
 8007852:	4603      	mov	r3, r0
 8007854:	3330      	adds	r3, #48	@ 0x30
 8007856:	9003      	str	r0, [sp, #12]
 8007858:	4639      	mov	r1, r7
 800785a:	9802      	ldr	r0, [sp, #8]
 800785c:	9309      	str	r3, [sp, #36]	@ 0x24
 800785e:	f000 fd9b 	bl	8008398 <__mcmp>
 8007862:	462a      	mov	r2, r5
 8007864:	9004      	str	r0, [sp, #16]
 8007866:	4621      	mov	r1, r4
 8007868:	4648      	mov	r0, r9
 800786a:	f000 fdb1 	bl	80083d0 <__mdiff>
 800786e:	68c2      	ldr	r2, [r0, #12]
 8007870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007872:	4606      	mov	r6, r0
 8007874:	bb02      	cbnz	r2, 80078b8 <_dtoa_r+0xa40>
 8007876:	4601      	mov	r1, r0
 8007878:	9802      	ldr	r0, [sp, #8]
 800787a:	f000 fd8d 	bl	8008398 <__mcmp>
 800787e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007880:	4602      	mov	r2, r0
 8007882:	4631      	mov	r1, r6
 8007884:	4648      	mov	r0, r9
 8007886:	920c      	str	r2, [sp, #48]	@ 0x30
 8007888:	9309      	str	r3, [sp, #36]	@ 0x24
 800788a:	f000 fb53 	bl	8007f34 <_Bfree>
 800788e:	9b07      	ldr	r3, [sp, #28]
 8007890:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007892:	9e00      	ldr	r6, [sp, #0]
 8007894:	ea42 0103 	orr.w	r1, r2, r3
 8007898:	9b06      	ldr	r3, [sp, #24]
 800789a:	4319      	orrs	r1, r3
 800789c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800789e:	d10d      	bne.n	80078bc <_dtoa_r+0xa44>
 80078a0:	2b39      	cmp	r3, #57	@ 0x39
 80078a2:	d027      	beq.n	80078f4 <_dtoa_r+0xa7c>
 80078a4:	9a04      	ldr	r2, [sp, #16]
 80078a6:	2a00      	cmp	r2, #0
 80078a8:	dd01      	ble.n	80078ae <_dtoa_r+0xa36>
 80078aa:	9b03      	ldr	r3, [sp, #12]
 80078ac:	3331      	adds	r3, #49	@ 0x31
 80078ae:	f88b 3000 	strb.w	r3, [fp]
 80078b2:	e52e      	b.n	8007312 <_dtoa_r+0x49a>
 80078b4:	4628      	mov	r0, r5
 80078b6:	e7b9      	b.n	800782c <_dtoa_r+0x9b4>
 80078b8:	2201      	movs	r2, #1
 80078ba:	e7e2      	b.n	8007882 <_dtoa_r+0xa0a>
 80078bc:	9904      	ldr	r1, [sp, #16]
 80078be:	2900      	cmp	r1, #0
 80078c0:	db04      	blt.n	80078cc <_dtoa_r+0xa54>
 80078c2:	9807      	ldr	r0, [sp, #28]
 80078c4:	4301      	orrs	r1, r0
 80078c6:	9806      	ldr	r0, [sp, #24]
 80078c8:	4301      	orrs	r1, r0
 80078ca:	d120      	bne.n	800790e <_dtoa_r+0xa96>
 80078cc:	2a00      	cmp	r2, #0
 80078ce:	ddee      	ble.n	80078ae <_dtoa_r+0xa36>
 80078d0:	9902      	ldr	r1, [sp, #8]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	2201      	movs	r2, #1
 80078d6:	4648      	mov	r0, r9
 80078d8:	f000 fcf2 	bl	80082c0 <__lshift>
 80078dc:	4621      	mov	r1, r4
 80078de:	9002      	str	r0, [sp, #8]
 80078e0:	f000 fd5a 	bl	8008398 <__mcmp>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	9b00      	ldr	r3, [sp, #0]
 80078e8:	dc02      	bgt.n	80078f0 <_dtoa_r+0xa78>
 80078ea:	d1e0      	bne.n	80078ae <_dtoa_r+0xa36>
 80078ec:	07da      	lsls	r2, r3, #31
 80078ee:	d5de      	bpl.n	80078ae <_dtoa_r+0xa36>
 80078f0:	2b39      	cmp	r3, #57	@ 0x39
 80078f2:	d1da      	bne.n	80078aa <_dtoa_r+0xa32>
 80078f4:	2339      	movs	r3, #57	@ 0x39
 80078f6:	f88b 3000 	strb.w	r3, [fp]
 80078fa:	4633      	mov	r3, r6
 80078fc:	461e      	mov	r6, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007904:	2a39      	cmp	r2, #57	@ 0x39
 8007906:	d04e      	beq.n	80079a6 <_dtoa_r+0xb2e>
 8007908:	3201      	adds	r2, #1
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	e501      	b.n	8007312 <_dtoa_r+0x49a>
 800790e:	2a00      	cmp	r2, #0
 8007910:	dd03      	ble.n	800791a <_dtoa_r+0xaa2>
 8007912:	2b39      	cmp	r3, #57	@ 0x39
 8007914:	d0ee      	beq.n	80078f4 <_dtoa_r+0xa7c>
 8007916:	3301      	adds	r3, #1
 8007918:	e7c9      	b.n	80078ae <_dtoa_r+0xa36>
 800791a:	9a00      	ldr	r2, [sp, #0]
 800791c:	9908      	ldr	r1, [sp, #32]
 800791e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007922:	428a      	cmp	r2, r1
 8007924:	d028      	beq.n	8007978 <_dtoa_r+0xb00>
 8007926:	9902      	ldr	r1, [sp, #8]
 8007928:	2300      	movs	r3, #0
 800792a:	220a      	movs	r2, #10
 800792c:	4648      	mov	r0, r9
 800792e:	f000 fb23 	bl	8007f78 <__multadd>
 8007932:	42af      	cmp	r7, r5
 8007934:	9002      	str	r0, [sp, #8]
 8007936:	f04f 0300 	mov.w	r3, #0
 800793a:	f04f 020a 	mov.w	r2, #10
 800793e:	4639      	mov	r1, r7
 8007940:	4648      	mov	r0, r9
 8007942:	d107      	bne.n	8007954 <_dtoa_r+0xadc>
 8007944:	f000 fb18 	bl	8007f78 <__multadd>
 8007948:	4607      	mov	r7, r0
 800794a:	4605      	mov	r5, r0
 800794c:	9b00      	ldr	r3, [sp, #0]
 800794e:	3301      	adds	r3, #1
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	e777      	b.n	8007844 <_dtoa_r+0x9cc>
 8007954:	f000 fb10 	bl	8007f78 <__multadd>
 8007958:	4629      	mov	r1, r5
 800795a:	4607      	mov	r7, r0
 800795c:	2300      	movs	r3, #0
 800795e:	220a      	movs	r2, #10
 8007960:	4648      	mov	r0, r9
 8007962:	f000 fb09 	bl	8007f78 <__multadd>
 8007966:	4605      	mov	r5, r0
 8007968:	e7f0      	b.n	800794c <_dtoa_r+0xad4>
 800796a:	f1bb 0f00 	cmp.w	fp, #0
 800796e:	bfcc      	ite	gt
 8007970:	465e      	movgt	r6, fp
 8007972:	2601      	movle	r6, #1
 8007974:	4456      	add	r6, sl
 8007976:	2700      	movs	r7, #0
 8007978:	9902      	ldr	r1, [sp, #8]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	2201      	movs	r2, #1
 800797e:	4648      	mov	r0, r9
 8007980:	f000 fc9e 	bl	80082c0 <__lshift>
 8007984:	4621      	mov	r1, r4
 8007986:	9002      	str	r0, [sp, #8]
 8007988:	f000 fd06 	bl	8008398 <__mcmp>
 800798c:	2800      	cmp	r0, #0
 800798e:	dcb4      	bgt.n	80078fa <_dtoa_r+0xa82>
 8007990:	d102      	bne.n	8007998 <_dtoa_r+0xb20>
 8007992:	9b00      	ldr	r3, [sp, #0]
 8007994:	07db      	lsls	r3, r3, #31
 8007996:	d4b0      	bmi.n	80078fa <_dtoa_r+0xa82>
 8007998:	4633      	mov	r3, r6
 800799a:	461e      	mov	r6, r3
 800799c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079a0:	2a30      	cmp	r2, #48	@ 0x30
 80079a2:	d0fa      	beq.n	800799a <_dtoa_r+0xb22>
 80079a4:	e4b5      	b.n	8007312 <_dtoa_r+0x49a>
 80079a6:	459a      	cmp	sl, r3
 80079a8:	d1a8      	bne.n	80078fc <_dtoa_r+0xa84>
 80079aa:	2331      	movs	r3, #49	@ 0x31
 80079ac:	f108 0801 	add.w	r8, r8, #1
 80079b0:	f88a 3000 	strb.w	r3, [sl]
 80079b4:	e4ad      	b.n	8007312 <_dtoa_r+0x49a>
 80079b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007a14 <_dtoa_r+0xb9c>
 80079bc:	b11b      	cbz	r3, 80079c6 <_dtoa_r+0xb4e>
 80079be:	f10a 0308 	add.w	r3, sl, #8
 80079c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	4650      	mov	r0, sl
 80079c8:	b017      	add	sp, #92	@ 0x5c
 80079ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ce:	9b07      	ldr	r3, [sp, #28]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	f77f ae2e 	ble.w	8007632 <_dtoa_r+0x7ba>
 80079d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079d8:	9308      	str	r3, [sp, #32]
 80079da:	2001      	movs	r0, #1
 80079dc:	e64d      	b.n	800767a <_dtoa_r+0x802>
 80079de:	f1bb 0f00 	cmp.w	fp, #0
 80079e2:	f77f aed9 	ble.w	8007798 <_dtoa_r+0x920>
 80079e6:	4656      	mov	r6, sl
 80079e8:	9802      	ldr	r0, [sp, #8]
 80079ea:	4621      	mov	r1, r4
 80079ec:	f7ff f9bc 	bl	8006d68 <quorem>
 80079f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80079f4:	f806 3b01 	strb.w	r3, [r6], #1
 80079f8:	eba6 020a 	sub.w	r2, r6, sl
 80079fc:	4593      	cmp	fp, r2
 80079fe:	ddb4      	ble.n	800796a <_dtoa_r+0xaf2>
 8007a00:	9902      	ldr	r1, [sp, #8]
 8007a02:	2300      	movs	r3, #0
 8007a04:	220a      	movs	r2, #10
 8007a06:	4648      	mov	r0, r9
 8007a08:	f000 fab6 	bl	8007f78 <__multadd>
 8007a0c:	9002      	str	r0, [sp, #8]
 8007a0e:	e7eb      	b.n	80079e8 <_dtoa_r+0xb70>
 8007a10:	0800924c 	.word	0x0800924c
 8007a14:	080091d0 	.word	0x080091d0

08007a18 <_free_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	2900      	cmp	r1, #0
 8007a1e:	d041      	beq.n	8007aa4 <_free_r+0x8c>
 8007a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a24:	1f0c      	subs	r4, r1, #4
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	bfb8      	it	lt
 8007a2a:	18e4      	addlt	r4, r4, r3
 8007a2c:	f7ff f854 	bl	8006ad8 <__malloc_lock>
 8007a30:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa8 <_free_r+0x90>)
 8007a32:	6813      	ldr	r3, [r2, #0]
 8007a34:	b933      	cbnz	r3, 8007a44 <_free_r+0x2c>
 8007a36:	6063      	str	r3, [r4, #4]
 8007a38:	6014      	str	r4, [r2, #0]
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a40:	f7ff b850 	b.w	8006ae4 <__malloc_unlock>
 8007a44:	42a3      	cmp	r3, r4
 8007a46:	d908      	bls.n	8007a5a <_free_r+0x42>
 8007a48:	6820      	ldr	r0, [r4, #0]
 8007a4a:	1821      	adds	r1, r4, r0
 8007a4c:	428b      	cmp	r3, r1
 8007a4e:	bf01      	itttt	eq
 8007a50:	6819      	ldreq	r1, [r3, #0]
 8007a52:	685b      	ldreq	r3, [r3, #4]
 8007a54:	1809      	addeq	r1, r1, r0
 8007a56:	6021      	streq	r1, [r4, #0]
 8007a58:	e7ed      	b.n	8007a36 <_free_r+0x1e>
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	b10b      	cbz	r3, 8007a64 <_free_r+0x4c>
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	d9fa      	bls.n	8007a5a <_free_r+0x42>
 8007a64:	6811      	ldr	r1, [r2, #0]
 8007a66:	1850      	adds	r0, r2, r1
 8007a68:	42a0      	cmp	r0, r4
 8007a6a:	d10b      	bne.n	8007a84 <_free_r+0x6c>
 8007a6c:	6820      	ldr	r0, [r4, #0]
 8007a6e:	4401      	add	r1, r0
 8007a70:	1850      	adds	r0, r2, r1
 8007a72:	4283      	cmp	r3, r0
 8007a74:	6011      	str	r1, [r2, #0]
 8007a76:	d1e0      	bne.n	8007a3a <_free_r+0x22>
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	6053      	str	r3, [r2, #4]
 8007a7e:	4408      	add	r0, r1
 8007a80:	6010      	str	r0, [r2, #0]
 8007a82:	e7da      	b.n	8007a3a <_free_r+0x22>
 8007a84:	d902      	bls.n	8007a8c <_free_r+0x74>
 8007a86:	230c      	movs	r3, #12
 8007a88:	602b      	str	r3, [r5, #0]
 8007a8a:	e7d6      	b.n	8007a3a <_free_r+0x22>
 8007a8c:	6820      	ldr	r0, [r4, #0]
 8007a8e:	1821      	adds	r1, r4, r0
 8007a90:	428b      	cmp	r3, r1
 8007a92:	bf04      	itt	eq
 8007a94:	6819      	ldreq	r1, [r3, #0]
 8007a96:	685b      	ldreq	r3, [r3, #4]
 8007a98:	6063      	str	r3, [r4, #4]
 8007a9a:	bf04      	itt	eq
 8007a9c:	1809      	addeq	r1, r1, r0
 8007a9e:	6021      	streq	r1, [r4, #0]
 8007aa0:	6054      	str	r4, [r2, #4]
 8007aa2:	e7ca      	b.n	8007a3a <_free_r+0x22>
 8007aa4:	bd38      	pop	{r3, r4, r5, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000574 	.word	0x20000574

08007aac <__ssputs_r>:
 8007aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab0:	688e      	ldr	r6, [r1, #8]
 8007ab2:	461f      	mov	r7, r3
 8007ab4:	42be      	cmp	r6, r7
 8007ab6:	680b      	ldr	r3, [r1, #0]
 8007ab8:	4682      	mov	sl, r0
 8007aba:	460c      	mov	r4, r1
 8007abc:	4690      	mov	r8, r2
 8007abe:	d82d      	bhi.n	8007b1c <__ssputs_r+0x70>
 8007ac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ac4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ac8:	d026      	beq.n	8007b18 <__ssputs_r+0x6c>
 8007aca:	6965      	ldr	r5, [r4, #20]
 8007acc:	6909      	ldr	r1, [r1, #16]
 8007ace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ad2:	eba3 0901 	sub.w	r9, r3, r1
 8007ad6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ada:	1c7b      	adds	r3, r7, #1
 8007adc:	444b      	add	r3, r9
 8007ade:	106d      	asrs	r5, r5, #1
 8007ae0:	429d      	cmp	r5, r3
 8007ae2:	bf38      	it	cc
 8007ae4:	461d      	movcc	r5, r3
 8007ae6:	0553      	lsls	r3, r2, #21
 8007ae8:	d527      	bpl.n	8007b3a <__ssputs_r+0x8e>
 8007aea:	4629      	mov	r1, r5
 8007aec:	f7fe fde8 	bl	80066c0 <_malloc_r>
 8007af0:	4606      	mov	r6, r0
 8007af2:	b360      	cbz	r0, 8007b4e <__ssputs_r+0xa2>
 8007af4:	6921      	ldr	r1, [r4, #16]
 8007af6:	464a      	mov	r2, r9
 8007af8:	f7ff f928 	bl	8006d4c <memcpy>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b06:	81a3      	strh	r3, [r4, #12]
 8007b08:	6126      	str	r6, [r4, #16]
 8007b0a:	6165      	str	r5, [r4, #20]
 8007b0c:	444e      	add	r6, r9
 8007b0e:	eba5 0509 	sub.w	r5, r5, r9
 8007b12:	6026      	str	r6, [r4, #0]
 8007b14:	60a5      	str	r5, [r4, #8]
 8007b16:	463e      	mov	r6, r7
 8007b18:	42be      	cmp	r6, r7
 8007b1a:	d900      	bls.n	8007b1e <__ssputs_r+0x72>
 8007b1c:	463e      	mov	r6, r7
 8007b1e:	6820      	ldr	r0, [r4, #0]
 8007b20:	4632      	mov	r2, r6
 8007b22:	4641      	mov	r1, r8
 8007b24:	f000 fdb1 	bl	800868a <memmove>
 8007b28:	68a3      	ldr	r3, [r4, #8]
 8007b2a:	1b9b      	subs	r3, r3, r6
 8007b2c:	60a3      	str	r3, [r4, #8]
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	4433      	add	r3, r6
 8007b32:	6023      	str	r3, [r4, #0]
 8007b34:	2000      	movs	r0, #0
 8007b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3a:	462a      	mov	r2, r5
 8007b3c:	f000 fd77 	bl	800862e <_realloc_r>
 8007b40:	4606      	mov	r6, r0
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d1e0      	bne.n	8007b08 <__ssputs_r+0x5c>
 8007b46:	6921      	ldr	r1, [r4, #16]
 8007b48:	4650      	mov	r0, sl
 8007b4a:	f7ff ff65 	bl	8007a18 <_free_r>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	f8ca 3000 	str.w	r3, [sl]
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b5a:	81a3      	strh	r3, [r4, #12]
 8007b5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b60:	e7e9      	b.n	8007b36 <__ssputs_r+0x8a>
	...

08007b64 <_svfiprintf_r>:
 8007b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b68:	4698      	mov	r8, r3
 8007b6a:	898b      	ldrh	r3, [r1, #12]
 8007b6c:	061b      	lsls	r3, r3, #24
 8007b6e:	b09d      	sub	sp, #116	@ 0x74
 8007b70:	4607      	mov	r7, r0
 8007b72:	460d      	mov	r5, r1
 8007b74:	4614      	mov	r4, r2
 8007b76:	d510      	bpl.n	8007b9a <_svfiprintf_r+0x36>
 8007b78:	690b      	ldr	r3, [r1, #16]
 8007b7a:	b973      	cbnz	r3, 8007b9a <_svfiprintf_r+0x36>
 8007b7c:	2140      	movs	r1, #64	@ 0x40
 8007b7e:	f7fe fd9f 	bl	80066c0 <_malloc_r>
 8007b82:	6028      	str	r0, [r5, #0]
 8007b84:	6128      	str	r0, [r5, #16]
 8007b86:	b930      	cbnz	r0, 8007b96 <_svfiprintf_r+0x32>
 8007b88:	230c      	movs	r3, #12
 8007b8a:	603b      	str	r3, [r7, #0]
 8007b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b90:	b01d      	add	sp, #116	@ 0x74
 8007b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b96:	2340      	movs	r3, #64	@ 0x40
 8007b98:	616b      	str	r3, [r5, #20]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b9e:	2320      	movs	r3, #32
 8007ba0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ba8:	2330      	movs	r3, #48	@ 0x30
 8007baa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d48 <_svfiprintf_r+0x1e4>
 8007bae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bb2:	f04f 0901 	mov.w	r9, #1
 8007bb6:	4623      	mov	r3, r4
 8007bb8:	469a      	mov	sl, r3
 8007bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bbe:	b10a      	cbz	r2, 8007bc4 <_svfiprintf_r+0x60>
 8007bc0:	2a25      	cmp	r2, #37	@ 0x25
 8007bc2:	d1f9      	bne.n	8007bb8 <_svfiprintf_r+0x54>
 8007bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8007bc8:	d00b      	beq.n	8007be2 <_svfiprintf_r+0x7e>
 8007bca:	465b      	mov	r3, fp
 8007bcc:	4622      	mov	r2, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	f7ff ff6b 	bl	8007aac <__ssputs_r>
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	f000 80a7 	beq.w	8007d2a <_svfiprintf_r+0x1c6>
 8007bdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bde:	445a      	add	r2, fp
 8007be0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007be2:	f89a 3000 	ldrb.w	r3, [sl]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 809f 	beq.w	8007d2a <_svfiprintf_r+0x1c6>
 8007bec:	2300      	movs	r3, #0
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bf6:	f10a 0a01 	add.w	sl, sl, #1
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	9307      	str	r3, [sp, #28]
 8007bfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c02:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c04:	4654      	mov	r4, sl
 8007c06:	2205      	movs	r2, #5
 8007c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c0c:	484e      	ldr	r0, [pc, #312]	@ (8007d48 <_svfiprintf_r+0x1e4>)
 8007c0e:	f7f8 faff 	bl	8000210 <memchr>
 8007c12:	9a04      	ldr	r2, [sp, #16]
 8007c14:	b9d8      	cbnz	r0, 8007c4e <_svfiprintf_r+0xea>
 8007c16:	06d0      	lsls	r0, r2, #27
 8007c18:	bf44      	itt	mi
 8007c1a:	2320      	movmi	r3, #32
 8007c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c20:	0711      	lsls	r1, r2, #28
 8007c22:	bf44      	itt	mi
 8007c24:	232b      	movmi	r3, #43	@ 0x2b
 8007c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c30:	d015      	beq.n	8007c5e <_svfiprintf_r+0xfa>
 8007c32:	9a07      	ldr	r2, [sp, #28]
 8007c34:	4654      	mov	r4, sl
 8007c36:	2000      	movs	r0, #0
 8007c38:	f04f 0c0a 	mov.w	ip, #10
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c42:	3b30      	subs	r3, #48	@ 0x30
 8007c44:	2b09      	cmp	r3, #9
 8007c46:	d94b      	bls.n	8007ce0 <_svfiprintf_r+0x17c>
 8007c48:	b1b0      	cbz	r0, 8007c78 <_svfiprintf_r+0x114>
 8007c4a:	9207      	str	r2, [sp, #28]
 8007c4c:	e014      	b.n	8007c78 <_svfiprintf_r+0x114>
 8007c4e:	eba0 0308 	sub.w	r3, r0, r8
 8007c52:	fa09 f303 	lsl.w	r3, r9, r3
 8007c56:	4313      	orrs	r3, r2
 8007c58:	9304      	str	r3, [sp, #16]
 8007c5a:	46a2      	mov	sl, r4
 8007c5c:	e7d2      	b.n	8007c04 <_svfiprintf_r+0xa0>
 8007c5e:	9b03      	ldr	r3, [sp, #12]
 8007c60:	1d19      	adds	r1, r3, #4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	9103      	str	r1, [sp, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bfbb      	ittet	lt
 8007c6a:	425b      	neglt	r3, r3
 8007c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c70:	9307      	strge	r3, [sp, #28]
 8007c72:	9307      	strlt	r3, [sp, #28]
 8007c74:	bfb8      	it	lt
 8007c76:	9204      	strlt	r2, [sp, #16]
 8007c78:	7823      	ldrb	r3, [r4, #0]
 8007c7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c7c:	d10a      	bne.n	8007c94 <_svfiprintf_r+0x130>
 8007c7e:	7863      	ldrb	r3, [r4, #1]
 8007c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c82:	d132      	bne.n	8007cea <_svfiprintf_r+0x186>
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	1d1a      	adds	r2, r3, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	9203      	str	r2, [sp, #12]
 8007c8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c90:	3402      	adds	r4, #2
 8007c92:	9305      	str	r3, [sp, #20]
 8007c94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d58 <_svfiprintf_r+0x1f4>
 8007c98:	7821      	ldrb	r1, [r4, #0]
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	4650      	mov	r0, sl
 8007c9e:	f7f8 fab7 	bl	8000210 <memchr>
 8007ca2:	b138      	cbz	r0, 8007cb4 <_svfiprintf_r+0x150>
 8007ca4:	9b04      	ldr	r3, [sp, #16]
 8007ca6:	eba0 000a 	sub.w	r0, r0, sl
 8007caa:	2240      	movs	r2, #64	@ 0x40
 8007cac:	4082      	lsls	r2, r0
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	3401      	adds	r4, #1
 8007cb2:	9304      	str	r3, [sp, #16]
 8007cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb8:	4824      	ldr	r0, [pc, #144]	@ (8007d4c <_svfiprintf_r+0x1e8>)
 8007cba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cbe:	2206      	movs	r2, #6
 8007cc0:	f7f8 faa6 	bl	8000210 <memchr>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d036      	beq.n	8007d36 <_svfiprintf_r+0x1d2>
 8007cc8:	4b21      	ldr	r3, [pc, #132]	@ (8007d50 <_svfiprintf_r+0x1ec>)
 8007cca:	bb1b      	cbnz	r3, 8007d14 <_svfiprintf_r+0x1b0>
 8007ccc:	9b03      	ldr	r3, [sp, #12]
 8007cce:	3307      	adds	r3, #7
 8007cd0:	f023 0307 	bic.w	r3, r3, #7
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	9303      	str	r3, [sp, #12]
 8007cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cda:	4433      	add	r3, r6
 8007cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cde:	e76a      	b.n	8007bb6 <_svfiprintf_r+0x52>
 8007ce0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	e7a8      	b.n	8007c3c <_svfiprintf_r+0xd8>
 8007cea:	2300      	movs	r3, #0
 8007cec:	3401      	adds	r4, #1
 8007cee:	9305      	str	r3, [sp, #20]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	f04f 0c0a 	mov.w	ip, #10
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cfc:	3a30      	subs	r2, #48	@ 0x30
 8007cfe:	2a09      	cmp	r2, #9
 8007d00:	d903      	bls.n	8007d0a <_svfiprintf_r+0x1a6>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0c6      	beq.n	8007c94 <_svfiprintf_r+0x130>
 8007d06:	9105      	str	r1, [sp, #20]
 8007d08:	e7c4      	b.n	8007c94 <_svfiprintf_r+0x130>
 8007d0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d0e:	4604      	mov	r4, r0
 8007d10:	2301      	movs	r3, #1
 8007d12:	e7f0      	b.n	8007cf6 <_svfiprintf_r+0x192>
 8007d14:	ab03      	add	r3, sp, #12
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	462a      	mov	r2, r5
 8007d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8007d54 <_svfiprintf_r+0x1f0>)
 8007d1c:	a904      	add	r1, sp, #16
 8007d1e:	4638      	mov	r0, r7
 8007d20:	f7fe fa72 	bl	8006208 <_printf_float>
 8007d24:	1c42      	adds	r2, r0, #1
 8007d26:	4606      	mov	r6, r0
 8007d28:	d1d6      	bne.n	8007cd8 <_svfiprintf_r+0x174>
 8007d2a:	89ab      	ldrh	r3, [r5, #12]
 8007d2c:	065b      	lsls	r3, r3, #25
 8007d2e:	f53f af2d 	bmi.w	8007b8c <_svfiprintf_r+0x28>
 8007d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d34:	e72c      	b.n	8007b90 <_svfiprintf_r+0x2c>
 8007d36:	ab03      	add	r3, sp, #12
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	462a      	mov	r2, r5
 8007d3c:	4b05      	ldr	r3, [pc, #20]	@ (8007d54 <_svfiprintf_r+0x1f0>)
 8007d3e:	a904      	add	r1, sp, #16
 8007d40:	4638      	mov	r0, r7
 8007d42:	f7fe fdab 	bl	800689c <_printf_i>
 8007d46:	e7ed      	b.n	8007d24 <_svfiprintf_r+0x1c0>
 8007d48:	0800925d 	.word	0x0800925d
 8007d4c:	08009267 	.word	0x08009267
 8007d50:	08006209 	.word	0x08006209
 8007d54:	08007aad 	.word	0x08007aad
 8007d58:	08009263 	.word	0x08009263

08007d5c <__sflush_r>:
 8007d5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d64:	0716      	lsls	r6, r2, #28
 8007d66:	4605      	mov	r5, r0
 8007d68:	460c      	mov	r4, r1
 8007d6a:	d454      	bmi.n	8007e16 <__sflush_r+0xba>
 8007d6c:	684b      	ldr	r3, [r1, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	dc02      	bgt.n	8007d78 <__sflush_r+0x1c>
 8007d72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dd48      	ble.n	8007e0a <__sflush_r+0xae>
 8007d78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d7a:	2e00      	cmp	r6, #0
 8007d7c:	d045      	beq.n	8007e0a <__sflush_r+0xae>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d84:	682f      	ldr	r7, [r5, #0]
 8007d86:	6a21      	ldr	r1, [r4, #32]
 8007d88:	602b      	str	r3, [r5, #0]
 8007d8a:	d030      	beq.n	8007dee <__sflush_r+0x92>
 8007d8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	0759      	lsls	r1, r3, #29
 8007d92:	d505      	bpl.n	8007da0 <__sflush_r+0x44>
 8007d94:	6863      	ldr	r3, [r4, #4]
 8007d96:	1ad2      	subs	r2, r2, r3
 8007d98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d9a:	b10b      	cbz	r3, 8007da0 <__sflush_r+0x44>
 8007d9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d9e:	1ad2      	subs	r2, r2, r3
 8007da0:	2300      	movs	r3, #0
 8007da2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007da4:	6a21      	ldr	r1, [r4, #32]
 8007da6:	4628      	mov	r0, r5
 8007da8:	47b0      	blx	r6
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	d106      	bne.n	8007dbe <__sflush_r+0x62>
 8007db0:	6829      	ldr	r1, [r5, #0]
 8007db2:	291d      	cmp	r1, #29
 8007db4:	d82b      	bhi.n	8007e0e <__sflush_r+0xb2>
 8007db6:	4a2a      	ldr	r2, [pc, #168]	@ (8007e60 <__sflush_r+0x104>)
 8007db8:	40ca      	lsrs	r2, r1
 8007dba:	07d6      	lsls	r6, r2, #31
 8007dbc:	d527      	bpl.n	8007e0e <__sflush_r+0xb2>
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	6062      	str	r2, [r4, #4]
 8007dc2:	04d9      	lsls	r1, r3, #19
 8007dc4:	6922      	ldr	r2, [r4, #16]
 8007dc6:	6022      	str	r2, [r4, #0]
 8007dc8:	d504      	bpl.n	8007dd4 <__sflush_r+0x78>
 8007dca:	1c42      	adds	r2, r0, #1
 8007dcc:	d101      	bne.n	8007dd2 <__sflush_r+0x76>
 8007dce:	682b      	ldr	r3, [r5, #0]
 8007dd0:	b903      	cbnz	r3, 8007dd4 <__sflush_r+0x78>
 8007dd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007dd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dd6:	602f      	str	r7, [r5, #0]
 8007dd8:	b1b9      	cbz	r1, 8007e0a <__sflush_r+0xae>
 8007dda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007dde:	4299      	cmp	r1, r3
 8007de0:	d002      	beq.n	8007de8 <__sflush_r+0x8c>
 8007de2:	4628      	mov	r0, r5
 8007de4:	f7ff fe18 	bl	8007a18 <_free_r>
 8007de8:	2300      	movs	r3, #0
 8007dea:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dec:	e00d      	b.n	8007e0a <__sflush_r+0xae>
 8007dee:	2301      	movs	r3, #1
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b0      	blx	r6
 8007df4:	4602      	mov	r2, r0
 8007df6:	1c50      	adds	r0, r2, #1
 8007df8:	d1c9      	bne.n	8007d8e <__sflush_r+0x32>
 8007dfa:	682b      	ldr	r3, [r5, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0c6      	beq.n	8007d8e <__sflush_r+0x32>
 8007e00:	2b1d      	cmp	r3, #29
 8007e02:	d001      	beq.n	8007e08 <__sflush_r+0xac>
 8007e04:	2b16      	cmp	r3, #22
 8007e06:	d11e      	bne.n	8007e46 <__sflush_r+0xea>
 8007e08:	602f      	str	r7, [r5, #0]
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	e022      	b.n	8007e54 <__sflush_r+0xf8>
 8007e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e12:	b21b      	sxth	r3, r3
 8007e14:	e01b      	b.n	8007e4e <__sflush_r+0xf2>
 8007e16:	690f      	ldr	r7, [r1, #16]
 8007e18:	2f00      	cmp	r7, #0
 8007e1a:	d0f6      	beq.n	8007e0a <__sflush_r+0xae>
 8007e1c:	0793      	lsls	r3, r2, #30
 8007e1e:	680e      	ldr	r6, [r1, #0]
 8007e20:	bf08      	it	eq
 8007e22:	694b      	ldreq	r3, [r1, #20]
 8007e24:	600f      	str	r7, [r1, #0]
 8007e26:	bf18      	it	ne
 8007e28:	2300      	movne	r3, #0
 8007e2a:	eba6 0807 	sub.w	r8, r6, r7
 8007e2e:	608b      	str	r3, [r1, #8]
 8007e30:	f1b8 0f00 	cmp.w	r8, #0
 8007e34:	dde9      	ble.n	8007e0a <__sflush_r+0xae>
 8007e36:	6a21      	ldr	r1, [r4, #32]
 8007e38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e3a:	4643      	mov	r3, r8
 8007e3c:	463a      	mov	r2, r7
 8007e3e:	4628      	mov	r0, r5
 8007e40:	47b0      	blx	r6
 8007e42:	2800      	cmp	r0, #0
 8007e44:	dc08      	bgt.n	8007e58 <__sflush_r+0xfc>
 8007e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e4e:	81a3      	strh	r3, [r4, #12]
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e58:	4407      	add	r7, r0
 8007e5a:	eba8 0800 	sub.w	r8, r8, r0
 8007e5e:	e7e7      	b.n	8007e30 <__sflush_r+0xd4>
 8007e60:	20400001 	.word	0x20400001

08007e64 <_fflush_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	690b      	ldr	r3, [r1, #16]
 8007e68:	4605      	mov	r5, r0
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	b913      	cbnz	r3, 8007e74 <_fflush_r+0x10>
 8007e6e:	2500      	movs	r5, #0
 8007e70:	4628      	mov	r0, r5
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	b118      	cbz	r0, 8007e7e <_fflush_r+0x1a>
 8007e76:	6a03      	ldr	r3, [r0, #32]
 8007e78:	b90b      	cbnz	r3, 8007e7e <_fflush_r+0x1a>
 8007e7a:	f7fe fee7 	bl	8006c4c <__sinit>
 8007e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0f3      	beq.n	8007e6e <_fflush_r+0xa>
 8007e86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e88:	07d0      	lsls	r0, r2, #31
 8007e8a:	d404      	bmi.n	8007e96 <_fflush_r+0x32>
 8007e8c:	0599      	lsls	r1, r3, #22
 8007e8e:	d402      	bmi.n	8007e96 <_fflush_r+0x32>
 8007e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e92:	f7fe ff54 	bl	8006d3e <__retarget_lock_acquire_recursive>
 8007e96:	4628      	mov	r0, r5
 8007e98:	4621      	mov	r1, r4
 8007e9a:	f7ff ff5f 	bl	8007d5c <__sflush_r>
 8007e9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ea0:	07da      	lsls	r2, r3, #31
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	d4e4      	bmi.n	8007e70 <_fflush_r+0xc>
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	059b      	lsls	r3, r3, #22
 8007eaa:	d4e1      	bmi.n	8007e70 <_fflush_r+0xc>
 8007eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eae:	f7fe ff47 	bl	8006d40 <__retarget_lock_release_recursive>
 8007eb2:	e7dd      	b.n	8007e70 <_fflush_r+0xc>

08007eb4 <_Balloc>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	69c6      	ldr	r6, [r0, #28]
 8007eb8:	4604      	mov	r4, r0
 8007eba:	460d      	mov	r5, r1
 8007ebc:	b976      	cbnz	r6, 8007edc <_Balloc+0x28>
 8007ebe:	2010      	movs	r0, #16
 8007ec0:	f7fe fbcc 	bl	800665c <malloc>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	61e0      	str	r0, [r4, #28]
 8007ec8:	b920      	cbnz	r0, 8007ed4 <_Balloc+0x20>
 8007eca:	4b18      	ldr	r3, [pc, #96]	@ (8007f2c <_Balloc+0x78>)
 8007ecc:	4818      	ldr	r0, [pc, #96]	@ (8007f30 <_Balloc+0x7c>)
 8007ece:	216b      	movs	r1, #107	@ 0x6b
 8007ed0:	f000 fc3c 	bl	800874c <__assert_func>
 8007ed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ed8:	6006      	str	r6, [r0, #0]
 8007eda:	60c6      	str	r6, [r0, #12]
 8007edc:	69e6      	ldr	r6, [r4, #28]
 8007ede:	68f3      	ldr	r3, [r6, #12]
 8007ee0:	b183      	cbz	r3, 8007f04 <_Balloc+0x50>
 8007ee2:	69e3      	ldr	r3, [r4, #28]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007eea:	b9b8      	cbnz	r0, 8007f1c <_Balloc+0x68>
 8007eec:	2101      	movs	r1, #1
 8007eee:	fa01 f605 	lsl.w	r6, r1, r5
 8007ef2:	1d72      	adds	r2, r6, #5
 8007ef4:	0092      	lsls	r2, r2, #2
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f7fe f8d2 	bl	80060a0 <_calloc_r>
 8007efc:	b160      	cbz	r0, 8007f18 <_Balloc+0x64>
 8007efe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f02:	e00e      	b.n	8007f22 <_Balloc+0x6e>
 8007f04:	2221      	movs	r2, #33	@ 0x21
 8007f06:	2104      	movs	r1, #4
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f7fe f8c9 	bl	80060a0 <_calloc_r>
 8007f0e:	69e3      	ldr	r3, [r4, #28]
 8007f10:	60f0      	str	r0, [r6, #12]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e4      	bne.n	8007ee2 <_Balloc+0x2e>
 8007f18:	2000      	movs	r0, #0
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	6802      	ldr	r2, [r0, #0]
 8007f1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f22:	2300      	movs	r3, #0
 8007f24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f28:	e7f7      	b.n	8007f1a <_Balloc+0x66>
 8007f2a:	bf00      	nop
 8007f2c:	080091dd 	.word	0x080091dd
 8007f30:	0800926e 	.word	0x0800926e

08007f34 <_Bfree>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	69c6      	ldr	r6, [r0, #28]
 8007f38:	4605      	mov	r5, r0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	b976      	cbnz	r6, 8007f5c <_Bfree+0x28>
 8007f3e:	2010      	movs	r0, #16
 8007f40:	f7fe fb8c 	bl	800665c <malloc>
 8007f44:	4602      	mov	r2, r0
 8007f46:	61e8      	str	r0, [r5, #28]
 8007f48:	b920      	cbnz	r0, 8007f54 <_Bfree+0x20>
 8007f4a:	4b09      	ldr	r3, [pc, #36]	@ (8007f70 <_Bfree+0x3c>)
 8007f4c:	4809      	ldr	r0, [pc, #36]	@ (8007f74 <_Bfree+0x40>)
 8007f4e:	218f      	movs	r1, #143	@ 0x8f
 8007f50:	f000 fbfc 	bl	800874c <__assert_func>
 8007f54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f58:	6006      	str	r6, [r0, #0]
 8007f5a:	60c6      	str	r6, [r0, #12]
 8007f5c:	b13c      	cbz	r4, 8007f6e <_Bfree+0x3a>
 8007f5e:	69eb      	ldr	r3, [r5, #28]
 8007f60:	6862      	ldr	r2, [r4, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f68:	6021      	str	r1, [r4, #0]
 8007f6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f6e:	bd70      	pop	{r4, r5, r6, pc}
 8007f70:	080091dd 	.word	0x080091dd
 8007f74:	0800926e 	.word	0x0800926e

08007f78 <__multadd>:
 8007f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f7c:	690d      	ldr	r5, [r1, #16]
 8007f7e:	4607      	mov	r7, r0
 8007f80:	460c      	mov	r4, r1
 8007f82:	461e      	mov	r6, r3
 8007f84:	f101 0c14 	add.w	ip, r1, #20
 8007f88:	2000      	movs	r0, #0
 8007f8a:	f8dc 3000 	ldr.w	r3, [ip]
 8007f8e:	b299      	uxth	r1, r3
 8007f90:	fb02 6101 	mla	r1, r2, r1, r6
 8007f94:	0c1e      	lsrs	r6, r3, #16
 8007f96:	0c0b      	lsrs	r3, r1, #16
 8007f98:	fb02 3306 	mla	r3, r2, r6, r3
 8007f9c:	b289      	uxth	r1, r1
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fa4:	4285      	cmp	r5, r0
 8007fa6:	f84c 1b04 	str.w	r1, [ip], #4
 8007faa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fae:	dcec      	bgt.n	8007f8a <__multadd+0x12>
 8007fb0:	b30e      	cbz	r6, 8007ff6 <__multadd+0x7e>
 8007fb2:	68a3      	ldr	r3, [r4, #8]
 8007fb4:	42ab      	cmp	r3, r5
 8007fb6:	dc19      	bgt.n	8007fec <__multadd+0x74>
 8007fb8:	6861      	ldr	r1, [r4, #4]
 8007fba:	4638      	mov	r0, r7
 8007fbc:	3101      	adds	r1, #1
 8007fbe:	f7ff ff79 	bl	8007eb4 <_Balloc>
 8007fc2:	4680      	mov	r8, r0
 8007fc4:	b928      	cbnz	r0, 8007fd2 <__multadd+0x5a>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8007ffc <__multadd+0x84>)
 8007fca:	480d      	ldr	r0, [pc, #52]	@ (8008000 <__multadd+0x88>)
 8007fcc:	21ba      	movs	r1, #186	@ 0xba
 8007fce:	f000 fbbd 	bl	800874c <__assert_func>
 8007fd2:	6922      	ldr	r2, [r4, #16]
 8007fd4:	3202      	adds	r2, #2
 8007fd6:	f104 010c 	add.w	r1, r4, #12
 8007fda:	0092      	lsls	r2, r2, #2
 8007fdc:	300c      	adds	r0, #12
 8007fde:	f7fe feb5 	bl	8006d4c <memcpy>
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	f7ff ffa5 	bl	8007f34 <_Bfree>
 8007fea:	4644      	mov	r4, r8
 8007fec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ff0:	3501      	adds	r5, #1
 8007ff2:	615e      	str	r6, [r3, #20]
 8007ff4:	6125      	str	r5, [r4, #16]
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ffc:	0800924c 	.word	0x0800924c
 8008000:	0800926e 	.word	0x0800926e

08008004 <__hi0bits>:
 8008004:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008008:	4603      	mov	r3, r0
 800800a:	bf36      	itet	cc
 800800c:	0403      	lslcc	r3, r0, #16
 800800e:	2000      	movcs	r0, #0
 8008010:	2010      	movcc	r0, #16
 8008012:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008016:	bf3c      	itt	cc
 8008018:	021b      	lslcc	r3, r3, #8
 800801a:	3008      	addcc	r0, #8
 800801c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008020:	bf3c      	itt	cc
 8008022:	011b      	lslcc	r3, r3, #4
 8008024:	3004      	addcc	r0, #4
 8008026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800802a:	bf3c      	itt	cc
 800802c:	009b      	lslcc	r3, r3, #2
 800802e:	3002      	addcc	r0, #2
 8008030:	2b00      	cmp	r3, #0
 8008032:	db05      	blt.n	8008040 <__hi0bits+0x3c>
 8008034:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008038:	f100 0001 	add.w	r0, r0, #1
 800803c:	bf08      	it	eq
 800803e:	2020      	moveq	r0, #32
 8008040:	4770      	bx	lr

08008042 <__lo0bits>:
 8008042:	6803      	ldr	r3, [r0, #0]
 8008044:	4602      	mov	r2, r0
 8008046:	f013 0007 	ands.w	r0, r3, #7
 800804a:	d00b      	beq.n	8008064 <__lo0bits+0x22>
 800804c:	07d9      	lsls	r1, r3, #31
 800804e:	d421      	bmi.n	8008094 <__lo0bits+0x52>
 8008050:	0798      	lsls	r0, r3, #30
 8008052:	bf49      	itett	mi
 8008054:	085b      	lsrmi	r3, r3, #1
 8008056:	089b      	lsrpl	r3, r3, #2
 8008058:	2001      	movmi	r0, #1
 800805a:	6013      	strmi	r3, [r2, #0]
 800805c:	bf5c      	itt	pl
 800805e:	6013      	strpl	r3, [r2, #0]
 8008060:	2002      	movpl	r0, #2
 8008062:	4770      	bx	lr
 8008064:	b299      	uxth	r1, r3
 8008066:	b909      	cbnz	r1, 800806c <__lo0bits+0x2a>
 8008068:	0c1b      	lsrs	r3, r3, #16
 800806a:	2010      	movs	r0, #16
 800806c:	b2d9      	uxtb	r1, r3
 800806e:	b909      	cbnz	r1, 8008074 <__lo0bits+0x32>
 8008070:	3008      	adds	r0, #8
 8008072:	0a1b      	lsrs	r3, r3, #8
 8008074:	0719      	lsls	r1, r3, #28
 8008076:	bf04      	itt	eq
 8008078:	091b      	lsreq	r3, r3, #4
 800807a:	3004      	addeq	r0, #4
 800807c:	0799      	lsls	r1, r3, #30
 800807e:	bf04      	itt	eq
 8008080:	089b      	lsreq	r3, r3, #2
 8008082:	3002      	addeq	r0, #2
 8008084:	07d9      	lsls	r1, r3, #31
 8008086:	d403      	bmi.n	8008090 <__lo0bits+0x4e>
 8008088:	085b      	lsrs	r3, r3, #1
 800808a:	f100 0001 	add.w	r0, r0, #1
 800808e:	d003      	beq.n	8008098 <__lo0bits+0x56>
 8008090:	6013      	str	r3, [r2, #0]
 8008092:	4770      	bx	lr
 8008094:	2000      	movs	r0, #0
 8008096:	4770      	bx	lr
 8008098:	2020      	movs	r0, #32
 800809a:	4770      	bx	lr

0800809c <__i2b>:
 800809c:	b510      	push	{r4, lr}
 800809e:	460c      	mov	r4, r1
 80080a0:	2101      	movs	r1, #1
 80080a2:	f7ff ff07 	bl	8007eb4 <_Balloc>
 80080a6:	4602      	mov	r2, r0
 80080a8:	b928      	cbnz	r0, 80080b6 <__i2b+0x1a>
 80080aa:	4b05      	ldr	r3, [pc, #20]	@ (80080c0 <__i2b+0x24>)
 80080ac:	4805      	ldr	r0, [pc, #20]	@ (80080c4 <__i2b+0x28>)
 80080ae:	f240 1145 	movw	r1, #325	@ 0x145
 80080b2:	f000 fb4b 	bl	800874c <__assert_func>
 80080b6:	2301      	movs	r3, #1
 80080b8:	6144      	str	r4, [r0, #20]
 80080ba:	6103      	str	r3, [r0, #16]
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	bf00      	nop
 80080c0:	0800924c 	.word	0x0800924c
 80080c4:	0800926e 	.word	0x0800926e

080080c8 <__multiply>:
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	4617      	mov	r7, r2
 80080ce:	690a      	ldr	r2, [r1, #16]
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	bfa8      	it	ge
 80080d6:	463b      	movge	r3, r7
 80080d8:	4689      	mov	r9, r1
 80080da:	bfa4      	itt	ge
 80080dc:	460f      	movge	r7, r1
 80080de:	4699      	movge	r9, r3
 80080e0:	693d      	ldr	r5, [r7, #16]
 80080e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	eb05 060a 	add.w	r6, r5, sl
 80080ee:	42b3      	cmp	r3, r6
 80080f0:	b085      	sub	sp, #20
 80080f2:	bfb8      	it	lt
 80080f4:	3101      	addlt	r1, #1
 80080f6:	f7ff fedd 	bl	8007eb4 <_Balloc>
 80080fa:	b930      	cbnz	r0, 800810a <__multiply+0x42>
 80080fc:	4602      	mov	r2, r0
 80080fe:	4b41      	ldr	r3, [pc, #260]	@ (8008204 <__multiply+0x13c>)
 8008100:	4841      	ldr	r0, [pc, #260]	@ (8008208 <__multiply+0x140>)
 8008102:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008106:	f000 fb21 	bl	800874c <__assert_func>
 800810a:	f100 0414 	add.w	r4, r0, #20
 800810e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008112:	4623      	mov	r3, r4
 8008114:	2200      	movs	r2, #0
 8008116:	4573      	cmp	r3, lr
 8008118:	d320      	bcc.n	800815c <__multiply+0x94>
 800811a:	f107 0814 	add.w	r8, r7, #20
 800811e:	f109 0114 	add.w	r1, r9, #20
 8008122:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008126:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800812a:	9302      	str	r3, [sp, #8]
 800812c:	1beb      	subs	r3, r5, r7
 800812e:	3b15      	subs	r3, #21
 8008130:	f023 0303 	bic.w	r3, r3, #3
 8008134:	3304      	adds	r3, #4
 8008136:	3715      	adds	r7, #21
 8008138:	42bd      	cmp	r5, r7
 800813a:	bf38      	it	cc
 800813c:	2304      	movcc	r3, #4
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	9b02      	ldr	r3, [sp, #8]
 8008142:	9103      	str	r1, [sp, #12]
 8008144:	428b      	cmp	r3, r1
 8008146:	d80c      	bhi.n	8008162 <__multiply+0x9a>
 8008148:	2e00      	cmp	r6, #0
 800814a:	dd03      	ble.n	8008154 <__multiply+0x8c>
 800814c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008150:	2b00      	cmp	r3, #0
 8008152:	d055      	beq.n	8008200 <__multiply+0x138>
 8008154:	6106      	str	r6, [r0, #16]
 8008156:	b005      	add	sp, #20
 8008158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815c:	f843 2b04 	str.w	r2, [r3], #4
 8008160:	e7d9      	b.n	8008116 <__multiply+0x4e>
 8008162:	f8b1 a000 	ldrh.w	sl, [r1]
 8008166:	f1ba 0f00 	cmp.w	sl, #0
 800816a:	d01f      	beq.n	80081ac <__multiply+0xe4>
 800816c:	46c4      	mov	ip, r8
 800816e:	46a1      	mov	r9, r4
 8008170:	2700      	movs	r7, #0
 8008172:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008176:	f8d9 3000 	ldr.w	r3, [r9]
 800817a:	fa1f fb82 	uxth.w	fp, r2
 800817e:	b29b      	uxth	r3, r3
 8008180:	fb0a 330b 	mla	r3, sl, fp, r3
 8008184:	443b      	add	r3, r7
 8008186:	f8d9 7000 	ldr.w	r7, [r9]
 800818a:	0c12      	lsrs	r2, r2, #16
 800818c:	0c3f      	lsrs	r7, r7, #16
 800818e:	fb0a 7202 	mla	r2, sl, r2, r7
 8008192:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008196:	b29b      	uxth	r3, r3
 8008198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800819c:	4565      	cmp	r5, ip
 800819e:	f849 3b04 	str.w	r3, [r9], #4
 80081a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80081a6:	d8e4      	bhi.n	8008172 <__multiply+0xaa>
 80081a8:	9b01      	ldr	r3, [sp, #4]
 80081aa:	50e7      	str	r7, [r4, r3]
 80081ac:	9b03      	ldr	r3, [sp, #12]
 80081ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80081b2:	3104      	adds	r1, #4
 80081b4:	f1b9 0f00 	cmp.w	r9, #0
 80081b8:	d020      	beq.n	80081fc <__multiply+0x134>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	4647      	mov	r7, r8
 80081be:	46a4      	mov	ip, r4
 80081c0:	f04f 0a00 	mov.w	sl, #0
 80081c4:	f8b7 b000 	ldrh.w	fp, [r7]
 80081c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80081cc:	fb09 220b 	mla	r2, r9, fp, r2
 80081d0:	4452      	add	r2, sl
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081d8:	f84c 3b04 	str.w	r3, [ip], #4
 80081dc:	f857 3b04 	ldr.w	r3, [r7], #4
 80081e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081e4:	f8bc 3000 	ldrh.w	r3, [ip]
 80081e8:	fb09 330a 	mla	r3, r9, sl, r3
 80081ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80081f0:	42bd      	cmp	r5, r7
 80081f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081f6:	d8e5      	bhi.n	80081c4 <__multiply+0xfc>
 80081f8:	9a01      	ldr	r2, [sp, #4]
 80081fa:	50a3      	str	r3, [r4, r2]
 80081fc:	3404      	adds	r4, #4
 80081fe:	e79f      	b.n	8008140 <__multiply+0x78>
 8008200:	3e01      	subs	r6, #1
 8008202:	e7a1      	b.n	8008148 <__multiply+0x80>
 8008204:	0800924c 	.word	0x0800924c
 8008208:	0800926e 	.word	0x0800926e

0800820c <__pow5mult>:
 800820c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008210:	4615      	mov	r5, r2
 8008212:	f012 0203 	ands.w	r2, r2, #3
 8008216:	4607      	mov	r7, r0
 8008218:	460e      	mov	r6, r1
 800821a:	d007      	beq.n	800822c <__pow5mult+0x20>
 800821c:	4c25      	ldr	r4, [pc, #148]	@ (80082b4 <__pow5mult+0xa8>)
 800821e:	3a01      	subs	r2, #1
 8008220:	2300      	movs	r3, #0
 8008222:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008226:	f7ff fea7 	bl	8007f78 <__multadd>
 800822a:	4606      	mov	r6, r0
 800822c:	10ad      	asrs	r5, r5, #2
 800822e:	d03d      	beq.n	80082ac <__pow5mult+0xa0>
 8008230:	69fc      	ldr	r4, [r7, #28]
 8008232:	b97c      	cbnz	r4, 8008254 <__pow5mult+0x48>
 8008234:	2010      	movs	r0, #16
 8008236:	f7fe fa11 	bl	800665c <malloc>
 800823a:	4602      	mov	r2, r0
 800823c:	61f8      	str	r0, [r7, #28]
 800823e:	b928      	cbnz	r0, 800824c <__pow5mult+0x40>
 8008240:	4b1d      	ldr	r3, [pc, #116]	@ (80082b8 <__pow5mult+0xac>)
 8008242:	481e      	ldr	r0, [pc, #120]	@ (80082bc <__pow5mult+0xb0>)
 8008244:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008248:	f000 fa80 	bl	800874c <__assert_func>
 800824c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008250:	6004      	str	r4, [r0, #0]
 8008252:	60c4      	str	r4, [r0, #12]
 8008254:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800825c:	b94c      	cbnz	r4, 8008272 <__pow5mult+0x66>
 800825e:	f240 2171 	movw	r1, #625	@ 0x271
 8008262:	4638      	mov	r0, r7
 8008264:	f7ff ff1a 	bl	800809c <__i2b>
 8008268:	2300      	movs	r3, #0
 800826a:	f8c8 0008 	str.w	r0, [r8, #8]
 800826e:	4604      	mov	r4, r0
 8008270:	6003      	str	r3, [r0, #0]
 8008272:	f04f 0900 	mov.w	r9, #0
 8008276:	07eb      	lsls	r3, r5, #31
 8008278:	d50a      	bpl.n	8008290 <__pow5mult+0x84>
 800827a:	4631      	mov	r1, r6
 800827c:	4622      	mov	r2, r4
 800827e:	4638      	mov	r0, r7
 8008280:	f7ff ff22 	bl	80080c8 <__multiply>
 8008284:	4631      	mov	r1, r6
 8008286:	4680      	mov	r8, r0
 8008288:	4638      	mov	r0, r7
 800828a:	f7ff fe53 	bl	8007f34 <_Bfree>
 800828e:	4646      	mov	r6, r8
 8008290:	106d      	asrs	r5, r5, #1
 8008292:	d00b      	beq.n	80082ac <__pow5mult+0xa0>
 8008294:	6820      	ldr	r0, [r4, #0]
 8008296:	b938      	cbnz	r0, 80082a8 <__pow5mult+0x9c>
 8008298:	4622      	mov	r2, r4
 800829a:	4621      	mov	r1, r4
 800829c:	4638      	mov	r0, r7
 800829e:	f7ff ff13 	bl	80080c8 <__multiply>
 80082a2:	6020      	str	r0, [r4, #0]
 80082a4:	f8c0 9000 	str.w	r9, [r0]
 80082a8:	4604      	mov	r4, r0
 80082aa:	e7e4      	b.n	8008276 <__pow5mult+0x6a>
 80082ac:	4630      	mov	r0, r6
 80082ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082b2:	bf00      	nop
 80082b4:	08009310 	.word	0x08009310
 80082b8:	080091dd 	.word	0x080091dd
 80082bc:	0800926e 	.word	0x0800926e

080082c0 <__lshift>:
 80082c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c4:	460c      	mov	r4, r1
 80082c6:	6849      	ldr	r1, [r1, #4]
 80082c8:	6923      	ldr	r3, [r4, #16]
 80082ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082ce:	68a3      	ldr	r3, [r4, #8]
 80082d0:	4607      	mov	r7, r0
 80082d2:	4691      	mov	r9, r2
 80082d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082d8:	f108 0601 	add.w	r6, r8, #1
 80082dc:	42b3      	cmp	r3, r6
 80082de:	db0b      	blt.n	80082f8 <__lshift+0x38>
 80082e0:	4638      	mov	r0, r7
 80082e2:	f7ff fde7 	bl	8007eb4 <_Balloc>
 80082e6:	4605      	mov	r5, r0
 80082e8:	b948      	cbnz	r0, 80082fe <__lshift+0x3e>
 80082ea:	4602      	mov	r2, r0
 80082ec:	4b28      	ldr	r3, [pc, #160]	@ (8008390 <__lshift+0xd0>)
 80082ee:	4829      	ldr	r0, [pc, #164]	@ (8008394 <__lshift+0xd4>)
 80082f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80082f4:	f000 fa2a 	bl	800874c <__assert_func>
 80082f8:	3101      	adds	r1, #1
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	e7ee      	b.n	80082dc <__lshift+0x1c>
 80082fe:	2300      	movs	r3, #0
 8008300:	f100 0114 	add.w	r1, r0, #20
 8008304:	f100 0210 	add.w	r2, r0, #16
 8008308:	4618      	mov	r0, r3
 800830a:	4553      	cmp	r3, sl
 800830c:	db33      	blt.n	8008376 <__lshift+0xb6>
 800830e:	6920      	ldr	r0, [r4, #16]
 8008310:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008314:	f104 0314 	add.w	r3, r4, #20
 8008318:	f019 091f 	ands.w	r9, r9, #31
 800831c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008320:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008324:	d02b      	beq.n	800837e <__lshift+0xbe>
 8008326:	f1c9 0e20 	rsb	lr, r9, #32
 800832a:	468a      	mov	sl, r1
 800832c:	2200      	movs	r2, #0
 800832e:	6818      	ldr	r0, [r3, #0]
 8008330:	fa00 f009 	lsl.w	r0, r0, r9
 8008334:	4310      	orrs	r0, r2
 8008336:	f84a 0b04 	str.w	r0, [sl], #4
 800833a:	f853 2b04 	ldr.w	r2, [r3], #4
 800833e:	459c      	cmp	ip, r3
 8008340:	fa22 f20e 	lsr.w	r2, r2, lr
 8008344:	d8f3      	bhi.n	800832e <__lshift+0x6e>
 8008346:	ebac 0304 	sub.w	r3, ip, r4
 800834a:	3b15      	subs	r3, #21
 800834c:	f023 0303 	bic.w	r3, r3, #3
 8008350:	3304      	adds	r3, #4
 8008352:	f104 0015 	add.w	r0, r4, #21
 8008356:	4560      	cmp	r0, ip
 8008358:	bf88      	it	hi
 800835a:	2304      	movhi	r3, #4
 800835c:	50ca      	str	r2, [r1, r3]
 800835e:	b10a      	cbz	r2, 8008364 <__lshift+0xa4>
 8008360:	f108 0602 	add.w	r6, r8, #2
 8008364:	3e01      	subs	r6, #1
 8008366:	4638      	mov	r0, r7
 8008368:	612e      	str	r6, [r5, #16]
 800836a:	4621      	mov	r1, r4
 800836c:	f7ff fde2 	bl	8007f34 <_Bfree>
 8008370:	4628      	mov	r0, r5
 8008372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008376:	f842 0f04 	str.w	r0, [r2, #4]!
 800837a:	3301      	adds	r3, #1
 800837c:	e7c5      	b.n	800830a <__lshift+0x4a>
 800837e:	3904      	subs	r1, #4
 8008380:	f853 2b04 	ldr.w	r2, [r3], #4
 8008384:	f841 2f04 	str.w	r2, [r1, #4]!
 8008388:	459c      	cmp	ip, r3
 800838a:	d8f9      	bhi.n	8008380 <__lshift+0xc0>
 800838c:	e7ea      	b.n	8008364 <__lshift+0xa4>
 800838e:	bf00      	nop
 8008390:	0800924c 	.word	0x0800924c
 8008394:	0800926e 	.word	0x0800926e

08008398 <__mcmp>:
 8008398:	690a      	ldr	r2, [r1, #16]
 800839a:	4603      	mov	r3, r0
 800839c:	6900      	ldr	r0, [r0, #16]
 800839e:	1a80      	subs	r0, r0, r2
 80083a0:	b530      	push	{r4, r5, lr}
 80083a2:	d10e      	bne.n	80083c2 <__mcmp+0x2a>
 80083a4:	3314      	adds	r3, #20
 80083a6:	3114      	adds	r1, #20
 80083a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80083b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083b8:	4295      	cmp	r5, r2
 80083ba:	d003      	beq.n	80083c4 <__mcmp+0x2c>
 80083bc:	d205      	bcs.n	80083ca <__mcmp+0x32>
 80083be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083c2:	bd30      	pop	{r4, r5, pc}
 80083c4:	42a3      	cmp	r3, r4
 80083c6:	d3f3      	bcc.n	80083b0 <__mcmp+0x18>
 80083c8:	e7fb      	b.n	80083c2 <__mcmp+0x2a>
 80083ca:	2001      	movs	r0, #1
 80083cc:	e7f9      	b.n	80083c2 <__mcmp+0x2a>
	...

080083d0 <__mdiff>:
 80083d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	4689      	mov	r9, r1
 80083d6:	4606      	mov	r6, r0
 80083d8:	4611      	mov	r1, r2
 80083da:	4648      	mov	r0, r9
 80083dc:	4614      	mov	r4, r2
 80083de:	f7ff ffdb 	bl	8008398 <__mcmp>
 80083e2:	1e05      	subs	r5, r0, #0
 80083e4:	d112      	bne.n	800840c <__mdiff+0x3c>
 80083e6:	4629      	mov	r1, r5
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7ff fd63 	bl	8007eb4 <_Balloc>
 80083ee:	4602      	mov	r2, r0
 80083f0:	b928      	cbnz	r0, 80083fe <__mdiff+0x2e>
 80083f2:	4b3f      	ldr	r3, [pc, #252]	@ (80084f0 <__mdiff+0x120>)
 80083f4:	f240 2137 	movw	r1, #567	@ 0x237
 80083f8:	483e      	ldr	r0, [pc, #248]	@ (80084f4 <__mdiff+0x124>)
 80083fa:	f000 f9a7 	bl	800874c <__assert_func>
 80083fe:	2301      	movs	r3, #1
 8008400:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008404:	4610      	mov	r0, r2
 8008406:	b003      	add	sp, #12
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840c:	bfbc      	itt	lt
 800840e:	464b      	movlt	r3, r9
 8008410:	46a1      	movlt	r9, r4
 8008412:	4630      	mov	r0, r6
 8008414:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008418:	bfba      	itte	lt
 800841a:	461c      	movlt	r4, r3
 800841c:	2501      	movlt	r5, #1
 800841e:	2500      	movge	r5, #0
 8008420:	f7ff fd48 	bl	8007eb4 <_Balloc>
 8008424:	4602      	mov	r2, r0
 8008426:	b918      	cbnz	r0, 8008430 <__mdiff+0x60>
 8008428:	4b31      	ldr	r3, [pc, #196]	@ (80084f0 <__mdiff+0x120>)
 800842a:	f240 2145 	movw	r1, #581	@ 0x245
 800842e:	e7e3      	b.n	80083f8 <__mdiff+0x28>
 8008430:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008434:	6926      	ldr	r6, [r4, #16]
 8008436:	60c5      	str	r5, [r0, #12]
 8008438:	f109 0310 	add.w	r3, r9, #16
 800843c:	f109 0514 	add.w	r5, r9, #20
 8008440:	f104 0e14 	add.w	lr, r4, #20
 8008444:	f100 0b14 	add.w	fp, r0, #20
 8008448:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800844c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008450:	9301      	str	r3, [sp, #4]
 8008452:	46d9      	mov	r9, fp
 8008454:	f04f 0c00 	mov.w	ip, #0
 8008458:	9b01      	ldr	r3, [sp, #4]
 800845a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800845e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	fa1f f38a 	uxth.w	r3, sl
 8008468:	4619      	mov	r1, r3
 800846a:	b283      	uxth	r3, r0
 800846c:	1acb      	subs	r3, r1, r3
 800846e:	0c00      	lsrs	r0, r0, #16
 8008470:	4463      	add	r3, ip
 8008472:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008476:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800847a:	b29b      	uxth	r3, r3
 800847c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008480:	4576      	cmp	r6, lr
 8008482:	f849 3b04 	str.w	r3, [r9], #4
 8008486:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800848a:	d8e5      	bhi.n	8008458 <__mdiff+0x88>
 800848c:	1b33      	subs	r3, r6, r4
 800848e:	3b15      	subs	r3, #21
 8008490:	f023 0303 	bic.w	r3, r3, #3
 8008494:	3415      	adds	r4, #21
 8008496:	3304      	adds	r3, #4
 8008498:	42a6      	cmp	r6, r4
 800849a:	bf38      	it	cc
 800849c:	2304      	movcc	r3, #4
 800849e:	441d      	add	r5, r3
 80084a0:	445b      	add	r3, fp
 80084a2:	461e      	mov	r6, r3
 80084a4:	462c      	mov	r4, r5
 80084a6:	4544      	cmp	r4, r8
 80084a8:	d30e      	bcc.n	80084c8 <__mdiff+0xf8>
 80084aa:	f108 0103 	add.w	r1, r8, #3
 80084ae:	1b49      	subs	r1, r1, r5
 80084b0:	f021 0103 	bic.w	r1, r1, #3
 80084b4:	3d03      	subs	r5, #3
 80084b6:	45a8      	cmp	r8, r5
 80084b8:	bf38      	it	cc
 80084ba:	2100      	movcc	r1, #0
 80084bc:	440b      	add	r3, r1
 80084be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084c2:	b191      	cbz	r1, 80084ea <__mdiff+0x11a>
 80084c4:	6117      	str	r7, [r2, #16]
 80084c6:	e79d      	b.n	8008404 <__mdiff+0x34>
 80084c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80084cc:	46e6      	mov	lr, ip
 80084ce:	0c08      	lsrs	r0, r1, #16
 80084d0:	fa1c fc81 	uxtah	ip, ip, r1
 80084d4:	4471      	add	r1, lr
 80084d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80084da:	b289      	uxth	r1, r1
 80084dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80084e0:	f846 1b04 	str.w	r1, [r6], #4
 80084e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084e8:	e7dd      	b.n	80084a6 <__mdiff+0xd6>
 80084ea:	3f01      	subs	r7, #1
 80084ec:	e7e7      	b.n	80084be <__mdiff+0xee>
 80084ee:	bf00      	nop
 80084f0:	0800924c 	.word	0x0800924c
 80084f4:	0800926e 	.word	0x0800926e

080084f8 <__d2b>:
 80084f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084fc:	460f      	mov	r7, r1
 80084fe:	2101      	movs	r1, #1
 8008500:	ec59 8b10 	vmov	r8, r9, d0
 8008504:	4616      	mov	r6, r2
 8008506:	f7ff fcd5 	bl	8007eb4 <_Balloc>
 800850a:	4604      	mov	r4, r0
 800850c:	b930      	cbnz	r0, 800851c <__d2b+0x24>
 800850e:	4602      	mov	r2, r0
 8008510:	4b23      	ldr	r3, [pc, #140]	@ (80085a0 <__d2b+0xa8>)
 8008512:	4824      	ldr	r0, [pc, #144]	@ (80085a4 <__d2b+0xac>)
 8008514:	f240 310f 	movw	r1, #783	@ 0x30f
 8008518:	f000 f918 	bl	800874c <__assert_func>
 800851c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008524:	b10d      	cbz	r5, 800852a <__d2b+0x32>
 8008526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	f1b8 0300 	subs.w	r3, r8, #0
 8008530:	d023      	beq.n	800857a <__d2b+0x82>
 8008532:	4668      	mov	r0, sp
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	f7ff fd84 	bl	8008042 <__lo0bits>
 800853a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800853e:	b1d0      	cbz	r0, 8008576 <__d2b+0x7e>
 8008540:	f1c0 0320 	rsb	r3, r0, #32
 8008544:	fa02 f303 	lsl.w	r3, r2, r3
 8008548:	430b      	orrs	r3, r1
 800854a:	40c2      	lsrs	r2, r0
 800854c:	6163      	str	r3, [r4, #20]
 800854e:	9201      	str	r2, [sp, #4]
 8008550:	9b01      	ldr	r3, [sp, #4]
 8008552:	61a3      	str	r3, [r4, #24]
 8008554:	2b00      	cmp	r3, #0
 8008556:	bf0c      	ite	eq
 8008558:	2201      	moveq	r2, #1
 800855a:	2202      	movne	r2, #2
 800855c:	6122      	str	r2, [r4, #16]
 800855e:	b1a5      	cbz	r5, 800858a <__d2b+0x92>
 8008560:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008564:	4405      	add	r5, r0
 8008566:	603d      	str	r5, [r7, #0]
 8008568:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800856c:	6030      	str	r0, [r6, #0]
 800856e:	4620      	mov	r0, r4
 8008570:	b003      	add	sp, #12
 8008572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008576:	6161      	str	r1, [r4, #20]
 8008578:	e7ea      	b.n	8008550 <__d2b+0x58>
 800857a:	a801      	add	r0, sp, #4
 800857c:	f7ff fd61 	bl	8008042 <__lo0bits>
 8008580:	9b01      	ldr	r3, [sp, #4]
 8008582:	6163      	str	r3, [r4, #20]
 8008584:	3020      	adds	r0, #32
 8008586:	2201      	movs	r2, #1
 8008588:	e7e8      	b.n	800855c <__d2b+0x64>
 800858a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800858e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008592:	6038      	str	r0, [r7, #0]
 8008594:	6918      	ldr	r0, [r3, #16]
 8008596:	f7ff fd35 	bl	8008004 <__hi0bits>
 800859a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800859e:	e7e5      	b.n	800856c <__d2b+0x74>
 80085a0:	0800924c 	.word	0x0800924c
 80085a4:	0800926e 	.word	0x0800926e

080085a8 <__sread>:
 80085a8:	b510      	push	{r4, lr}
 80085aa:	460c      	mov	r4, r1
 80085ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b0:	f000 f898 	bl	80086e4 <_read_r>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	bfab      	itete	ge
 80085b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085ba:	89a3      	ldrhlt	r3, [r4, #12]
 80085bc:	181b      	addge	r3, r3, r0
 80085be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085c2:	bfac      	ite	ge
 80085c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085c6:	81a3      	strhlt	r3, [r4, #12]
 80085c8:	bd10      	pop	{r4, pc}

080085ca <__swrite>:
 80085ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ce:	461f      	mov	r7, r3
 80085d0:	898b      	ldrh	r3, [r1, #12]
 80085d2:	05db      	lsls	r3, r3, #23
 80085d4:	4605      	mov	r5, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	4616      	mov	r6, r2
 80085da:	d505      	bpl.n	80085e8 <__swrite+0x1e>
 80085dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e0:	2302      	movs	r3, #2
 80085e2:	2200      	movs	r2, #0
 80085e4:	f000 f86c 	bl	80086c0 <_lseek_r>
 80085e8:	89a3      	ldrh	r3, [r4, #12]
 80085ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085f2:	81a3      	strh	r3, [r4, #12]
 80085f4:	4632      	mov	r2, r6
 80085f6:	463b      	mov	r3, r7
 80085f8:	4628      	mov	r0, r5
 80085fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085fe:	f000 b883 	b.w	8008708 <_write_r>

08008602 <__sseek>:
 8008602:	b510      	push	{r4, lr}
 8008604:	460c      	mov	r4, r1
 8008606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800860a:	f000 f859 	bl	80086c0 <_lseek_r>
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	bf15      	itete	ne
 8008614:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008616:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800861a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800861e:	81a3      	strheq	r3, [r4, #12]
 8008620:	bf18      	it	ne
 8008622:	81a3      	strhne	r3, [r4, #12]
 8008624:	bd10      	pop	{r4, pc}

08008626 <__sclose>:
 8008626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800862a:	f000 b87f 	b.w	800872c <_close_r>

0800862e <_realloc_r>:
 800862e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008632:	4607      	mov	r7, r0
 8008634:	4614      	mov	r4, r2
 8008636:	460d      	mov	r5, r1
 8008638:	b921      	cbnz	r1, 8008644 <_realloc_r+0x16>
 800863a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800863e:	4611      	mov	r1, r2
 8008640:	f7fe b83e 	b.w	80066c0 <_malloc_r>
 8008644:	b92a      	cbnz	r2, 8008652 <_realloc_r+0x24>
 8008646:	f7ff f9e7 	bl	8007a18 <_free_r>
 800864a:	4625      	mov	r5, r4
 800864c:	4628      	mov	r0, r5
 800864e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008652:	f000 f8ab 	bl	80087ac <_malloc_usable_size_r>
 8008656:	4284      	cmp	r4, r0
 8008658:	4606      	mov	r6, r0
 800865a:	d802      	bhi.n	8008662 <_realloc_r+0x34>
 800865c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008660:	d8f4      	bhi.n	800864c <_realloc_r+0x1e>
 8008662:	4621      	mov	r1, r4
 8008664:	4638      	mov	r0, r7
 8008666:	f7fe f82b 	bl	80066c0 <_malloc_r>
 800866a:	4680      	mov	r8, r0
 800866c:	b908      	cbnz	r0, 8008672 <_realloc_r+0x44>
 800866e:	4645      	mov	r5, r8
 8008670:	e7ec      	b.n	800864c <_realloc_r+0x1e>
 8008672:	42b4      	cmp	r4, r6
 8008674:	4622      	mov	r2, r4
 8008676:	4629      	mov	r1, r5
 8008678:	bf28      	it	cs
 800867a:	4632      	movcs	r2, r6
 800867c:	f7fe fb66 	bl	8006d4c <memcpy>
 8008680:	4629      	mov	r1, r5
 8008682:	4638      	mov	r0, r7
 8008684:	f7ff f9c8 	bl	8007a18 <_free_r>
 8008688:	e7f1      	b.n	800866e <_realloc_r+0x40>

0800868a <memmove>:
 800868a:	4288      	cmp	r0, r1
 800868c:	b510      	push	{r4, lr}
 800868e:	eb01 0402 	add.w	r4, r1, r2
 8008692:	d902      	bls.n	800869a <memmove+0x10>
 8008694:	4284      	cmp	r4, r0
 8008696:	4623      	mov	r3, r4
 8008698:	d807      	bhi.n	80086aa <memmove+0x20>
 800869a:	1e43      	subs	r3, r0, #1
 800869c:	42a1      	cmp	r1, r4
 800869e:	d008      	beq.n	80086b2 <memmove+0x28>
 80086a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086a8:	e7f8      	b.n	800869c <memmove+0x12>
 80086aa:	4402      	add	r2, r0
 80086ac:	4601      	mov	r1, r0
 80086ae:	428a      	cmp	r2, r1
 80086b0:	d100      	bne.n	80086b4 <memmove+0x2a>
 80086b2:	bd10      	pop	{r4, pc}
 80086b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086bc:	e7f7      	b.n	80086ae <memmove+0x24>
	...

080086c0 <_lseek_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4d07      	ldr	r5, [pc, #28]	@ (80086e0 <_lseek_r+0x20>)
 80086c4:	4604      	mov	r4, r0
 80086c6:	4608      	mov	r0, r1
 80086c8:	4611      	mov	r1, r2
 80086ca:	2200      	movs	r2, #0
 80086cc:	602a      	str	r2, [r5, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	f7fa fc8f 	bl	8002ff2 <_lseek>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	d102      	bne.n	80086de <_lseek_r+0x1e>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	b103      	cbz	r3, 80086de <_lseek_r+0x1e>
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	200006b8 	.word	0x200006b8

080086e4 <_read_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4d07      	ldr	r5, [pc, #28]	@ (8008704 <_read_r+0x20>)
 80086e8:	4604      	mov	r4, r0
 80086ea:	4608      	mov	r0, r1
 80086ec:	4611      	mov	r1, r2
 80086ee:	2200      	movs	r2, #0
 80086f0:	602a      	str	r2, [r5, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	f7fa fc1d 	bl	8002f32 <_read>
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	d102      	bne.n	8008702 <_read_r+0x1e>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	b103      	cbz	r3, 8008702 <_read_r+0x1e>
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	bd38      	pop	{r3, r4, r5, pc}
 8008704:	200006b8 	.word	0x200006b8

08008708 <_write_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4d07      	ldr	r5, [pc, #28]	@ (8008728 <_write_r+0x20>)
 800870c:	4604      	mov	r4, r0
 800870e:	4608      	mov	r0, r1
 8008710:	4611      	mov	r1, r2
 8008712:	2200      	movs	r2, #0
 8008714:	602a      	str	r2, [r5, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	f7fa fc28 	bl	8002f6c <_write>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d102      	bne.n	8008726 <_write_r+0x1e>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	b103      	cbz	r3, 8008726 <_write_r+0x1e>
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	200006b8 	.word	0x200006b8

0800872c <_close_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	4d06      	ldr	r5, [pc, #24]	@ (8008748 <_close_r+0x1c>)
 8008730:	2300      	movs	r3, #0
 8008732:	4604      	mov	r4, r0
 8008734:	4608      	mov	r0, r1
 8008736:	602b      	str	r3, [r5, #0]
 8008738:	f7fa fc34 	bl	8002fa4 <_close>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d102      	bne.n	8008746 <_close_r+0x1a>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	b103      	cbz	r3, 8008746 <_close_r+0x1a>
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	200006b8 	.word	0x200006b8

0800874c <__assert_func>:
 800874c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800874e:	4614      	mov	r4, r2
 8008750:	461a      	mov	r2, r3
 8008752:	4b09      	ldr	r3, [pc, #36]	@ (8008778 <__assert_func+0x2c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4605      	mov	r5, r0
 8008758:	68d8      	ldr	r0, [r3, #12]
 800875a:	b14c      	cbz	r4, 8008770 <__assert_func+0x24>
 800875c:	4b07      	ldr	r3, [pc, #28]	@ (800877c <__assert_func+0x30>)
 800875e:	9100      	str	r1, [sp, #0]
 8008760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008764:	4906      	ldr	r1, [pc, #24]	@ (8008780 <__assert_func+0x34>)
 8008766:	462b      	mov	r3, r5
 8008768:	f000 f828 	bl	80087bc <fiprintf>
 800876c:	f000 f845 	bl	80087fa <abort>
 8008770:	4b04      	ldr	r3, [pc, #16]	@ (8008784 <__assert_func+0x38>)
 8008772:	461c      	mov	r4, r3
 8008774:	e7f3      	b.n	800875e <__assert_func+0x12>
 8008776:	bf00      	nop
 8008778:	2000001c 	.word	0x2000001c
 800877c:	080092d1 	.word	0x080092d1
 8008780:	080092de 	.word	0x080092de
 8008784:	0800930c 	.word	0x0800930c

08008788 <__ascii_mbtowc>:
 8008788:	b082      	sub	sp, #8
 800878a:	b901      	cbnz	r1, 800878e <__ascii_mbtowc+0x6>
 800878c:	a901      	add	r1, sp, #4
 800878e:	b142      	cbz	r2, 80087a2 <__ascii_mbtowc+0x1a>
 8008790:	b14b      	cbz	r3, 80087a6 <__ascii_mbtowc+0x1e>
 8008792:	7813      	ldrb	r3, [r2, #0]
 8008794:	600b      	str	r3, [r1, #0]
 8008796:	7812      	ldrb	r2, [r2, #0]
 8008798:	1e10      	subs	r0, r2, #0
 800879a:	bf18      	it	ne
 800879c:	2001      	movne	r0, #1
 800879e:	b002      	add	sp, #8
 80087a0:	4770      	bx	lr
 80087a2:	4610      	mov	r0, r2
 80087a4:	e7fb      	b.n	800879e <__ascii_mbtowc+0x16>
 80087a6:	f06f 0001 	mvn.w	r0, #1
 80087aa:	e7f8      	b.n	800879e <__ascii_mbtowc+0x16>

080087ac <_malloc_usable_size_r>:
 80087ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087b0:	1f18      	subs	r0, r3, #4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	bfbc      	itt	lt
 80087b6:	580b      	ldrlt	r3, [r1, r0]
 80087b8:	18c0      	addlt	r0, r0, r3
 80087ba:	4770      	bx	lr

080087bc <fiprintf>:
 80087bc:	b40e      	push	{r1, r2, r3}
 80087be:	b503      	push	{r0, r1, lr}
 80087c0:	4601      	mov	r1, r0
 80087c2:	ab03      	add	r3, sp, #12
 80087c4:	4805      	ldr	r0, [pc, #20]	@ (80087dc <fiprintf+0x20>)
 80087c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ca:	6800      	ldr	r0, [r0, #0]
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	f000 f845 	bl	800885c <_vfiprintf_r>
 80087d2:	b002      	add	sp, #8
 80087d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087d8:	b003      	add	sp, #12
 80087da:	4770      	bx	lr
 80087dc:	2000001c 	.word	0x2000001c

080087e0 <__ascii_wctomb>:
 80087e0:	4603      	mov	r3, r0
 80087e2:	4608      	mov	r0, r1
 80087e4:	b141      	cbz	r1, 80087f8 <__ascii_wctomb+0x18>
 80087e6:	2aff      	cmp	r2, #255	@ 0xff
 80087e8:	d904      	bls.n	80087f4 <__ascii_wctomb+0x14>
 80087ea:	228a      	movs	r2, #138	@ 0x8a
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087f2:	4770      	bx	lr
 80087f4:	700a      	strb	r2, [r1, #0]
 80087f6:	2001      	movs	r0, #1
 80087f8:	4770      	bx	lr

080087fa <abort>:
 80087fa:	b508      	push	{r3, lr}
 80087fc:	2006      	movs	r0, #6
 80087fe:	f000 fa63 	bl	8008cc8 <raise>
 8008802:	2001      	movs	r0, #1
 8008804:	f7fa fb8a 	bl	8002f1c <_exit>

08008808 <__sfputc_r>:
 8008808:	6893      	ldr	r3, [r2, #8]
 800880a:	3b01      	subs	r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	b410      	push	{r4}
 8008810:	6093      	str	r3, [r2, #8]
 8008812:	da08      	bge.n	8008826 <__sfputc_r+0x1e>
 8008814:	6994      	ldr	r4, [r2, #24]
 8008816:	42a3      	cmp	r3, r4
 8008818:	db01      	blt.n	800881e <__sfputc_r+0x16>
 800881a:	290a      	cmp	r1, #10
 800881c:	d103      	bne.n	8008826 <__sfputc_r+0x1e>
 800881e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008822:	f000 b933 	b.w	8008a8c <__swbuf_r>
 8008826:	6813      	ldr	r3, [r2, #0]
 8008828:	1c58      	adds	r0, r3, #1
 800882a:	6010      	str	r0, [r2, #0]
 800882c:	7019      	strb	r1, [r3, #0]
 800882e:	4608      	mov	r0, r1
 8008830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008834:	4770      	bx	lr

08008836 <__sfputs_r>:
 8008836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008838:	4606      	mov	r6, r0
 800883a:	460f      	mov	r7, r1
 800883c:	4614      	mov	r4, r2
 800883e:	18d5      	adds	r5, r2, r3
 8008840:	42ac      	cmp	r4, r5
 8008842:	d101      	bne.n	8008848 <__sfputs_r+0x12>
 8008844:	2000      	movs	r0, #0
 8008846:	e007      	b.n	8008858 <__sfputs_r+0x22>
 8008848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884c:	463a      	mov	r2, r7
 800884e:	4630      	mov	r0, r6
 8008850:	f7ff ffda 	bl	8008808 <__sfputc_r>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d1f3      	bne.n	8008840 <__sfputs_r+0xa>
 8008858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800885c <_vfiprintf_r>:
 800885c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008860:	460d      	mov	r5, r1
 8008862:	b09d      	sub	sp, #116	@ 0x74
 8008864:	4614      	mov	r4, r2
 8008866:	4698      	mov	r8, r3
 8008868:	4606      	mov	r6, r0
 800886a:	b118      	cbz	r0, 8008874 <_vfiprintf_r+0x18>
 800886c:	6a03      	ldr	r3, [r0, #32]
 800886e:	b90b      	cbnz	r3, 8008874 <_vfiprintf_r+0x18>
 8008870:	f7fe f9ec 	bl	8006c4c <__sinit>
 8008874:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008876:	07d9      	lsls	r1, r3, #31
 8008878:	d405      	bmi.n	8008886 <_vfiprintf_r+0x2a>
 800887a:	89ab      	ldrh	r3, [r5, #12]
 800887c:	059a      	lsls	r2, r3, #22
 800887e:	d402      	bmi.n	8008886 <_vfiprintf_r+0x2a>
 8008880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008882:	f7fe fa5c 	bl	8006d3e <__retarget_lock_acquire_recursive>
 8008886:	89ab      	ldrh	r3, [r5, #12]
 8008888:	071b      	lsls	r3, r3, #28
 800888a:	d501      	bpl.n	8008890 <_vfiprintf_r+0x34>
 800888c:	692b      	ldr	r3, [r5, #16]
 800888e:	b99b      	cbnz	r3, 80088b8 <_vfiprintf_r+0x5c>
 8008890:	4629      	mov	r1, r5
 8008892:	4630      	mov	r0, r6
 8008894:	f000 f938 	bl	8008b08 <__swsetup_r>
 8008898:	b170      	cbz	r0, 80088b8 <_vfiprintf_r+0x5c>
 800889a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800889c:	07dc      	lsls	r4, r3, #31
 800889e:	d504      	bpl.n	80088aa <_vfiprintf_r+0x4e>
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088a4:	b01d      	add	sp, #116	@ 0x74
 80088a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088aa:	89ab      	ldrh	r3, [r5, #12]
 80088ac:	0598      	lsls	r0, r3, #22
 80088ae:	d4f7      	bmi.n	80088a0 <_vfiprintf_r+0x44>
 80088b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088b2:	f7fe fa45 	bl	8006d40 <__retarget_lock_release_recursive>
 80088b6:	e7f3      	b.n	80088a0 <_vfiprintf_r+0x44>
 80088b8:	2300      	movs	r3, #0
 80088ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80088bc:	2320      	movs	r3, #32
 80088be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80088c6:	2330      	movs	r3, #48	@ 0x30
 80088c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a78 <_vfiprintf_r+0x21c>
 80088cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088d0:	f04f 0901 	mov.w	r9, #1
 80088d4:	4623      	mov	r3, r4
 80088d6:	469a      	mov	sl, r3
 80088d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088dc:	b10a      	cbz	r2, 80088e2 <_vfiprintf_r+0x86>
 80088de:	2a25      	cmp	r2, #37	@ 0x25
 80088e0:	d1f9      	bne.n	80088d6 <_vfiprintf_r+0x7a>
 80088e2:	ebba 0b04 	subs.w	fp, sl, r4
 80088e6:	d00b      	beq.n	8008900 <_vfiprintf_r+0xa4>
 80088e8:	465b      	mov	r3, fp
 80088ea:	4622      	mov	r2, r4
 80088ec:	4629      	mov	r1, r5
 80088ee:	4630      	mov	r0, r6
 80088f0:	f7ff ffa1 	bl	8008836 <__sfputs_r>
 80088f4:	3001      	adds	r0, #1
 80088f6:	f000 80a7 	beq.w	8008a48 <_vfiprintf_r+0x1ec>
 80088fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088fc:	445a      	add	r2, fp
 80088fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008900:	f89a 3000 	ldrb.w	r3, [sl]
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 809f 	beq.w	8008a48 <_vfiprintf_r+0x1ec>
 800890a:	2300      	movs	r3, #0
 800890c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008914:	f10a 0a01 	add.w	sl, sl, #1
 8008918:	9304      	str	r3, [sp, #16]
 800891a:	9307      	str	r3, [sp, #28]
 800891c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008920:	931a      	str	r3, [sp, #104]	@ 0x68
 8008922:	4654      	mov	r4, sl
 8008924:	2205      	movs	r2, #5
 8008926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800892a:	4853      	ldr	r0, [pc, #332]	@ (8008a78 <_vfiprintf_r+0x21c>)
 800892c:	f7f7 fc70 	bl	8000210 <memchr>
 8008930:	9a04      	ldr	r2, [sp, #16]
 8008932:	b9d8      	cbnz	r0, 800896c <_vfiprintf_r+0x110>
 8008934:	06d1      	lsls	r1, r2, #27
 8008936:	bf44      	itt	mi
 8008938:	2320      	movmi	r3, #32
 800893a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800893e:	0713      	lsls	r3, r2, #28
 8008940:	bf44      	itt	mi
 8008942:	232b      	movmi	r3, #43	@ 0x2b
 8008944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008948:	f89a 3000 	ldrb.w	r3, [sl]
 800894c:	2b2a      	cmp	r3, #42	@ 0x2a
 800894e:	d015      	beq.n	800897c <_vfiprintf_r+0x120>
 8008950:	9a07      	ldr	r2, [sp, #28]
 8008952:	4654      	mov	r4, sl
 8008954:	2000      	movs	r0, #0
 8008956:	f04f 0c0a 	mov.w	ip, #10
 800895a:	4621      	mov	r1, r4
 800895c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008960:	3b30      	subs	r3, #48	@ 0x30
 8008962:	2b09      	cmp	r3, #9
 8008964:	d94b      	bls.n	80089fe <_vfiprintf_r+0x1a2>
 8008966:	b1b0      	cbz	r0, 8008996 <_vfiprintf_r+0x13a>
 8008968:	9207      	str	r2, [sp, #28]
 800896a:	e014      	b.n	8008996 <_vfiprintf_r+0x13a>
 800896c:	eba0 0308 	sub.w	r3, r0, r8
 8008970:	fa09 f303 	lsl.w	r3, r9, r3
 8008974:	4313      	orrs	r3, r2
 8008976:	9304      	str	r3, [sp, #16]
 8008978:	46a2      	mov	sl, r4
 800897a:	e7d2      	b.n	8008922 <_vfiprintf_r+0xc6>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	1d19      	adds	r1, r3, #4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	9103      	str	r1, [sp, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	bfbb      	ittet	lt
 8008988:	425b      	neglt	r3, r3
 800898a:	f042 0202 	orrlt.w	r2, r2, #2
 800898e:	9307      	strge	r3, [sp, #28]
 8008990:	9307      	strlt	r3, [sp, #28]
 8008992:	bfb8      	it	lt
 8008994:	9204      	strlt	r2, [sp, #16]
 8008996:	7823      	ldrb	r3, [r4, #0]
 8008998:	2b2e      	cmp	r3, #46	@ 0x2e
 800899a:	d10a      	bne.n	80089b2 <_vfiprintf_r+0x156>
 800899c:	7863      	ldrb	r3, [r4, #1]
 800899e:	2b2a      	cmp	r3, #42	@ 0x2a
 80089a0:	d132      	bne.n	8008a08 <_vfiprintf_r+0x1ac>
 80089a2:	9b03      	ldr	r3, [sp, #12]
 80089a4:	1d1a      	adds	r2, r3, #4
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	9203      	str	r2, [sp, #12]
 80089aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089ae:	3402      	adds	r4, #2
 80089b0:	9305      	str	r3, [sp, #20]
 80089b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a88 <_vfiprintf_r+0x22c>
 80089b6:	7821      	ldrb	r1, [r4, #0]
 80089b8:	2203      	movs	r2, #3
 80089ba:	4650      	mov	r0, sl
 80089bc:	f7f7 fc28 	bl	8000210 <memchr>
 80089c0:	b138      	cbz	r0, 80089d2 <_vfiprintf_r+0x176>
 80089c2:	9b04      	ldr	r3, [sp, #16]
 80089c4:	eba0 000a 	sub.w	r0, r0, sl
 80089c8:	2240      	movs	r2, #64	@ 0x40
 80089ca:	4082      	lsls	r2, r0
 80089cc:	4313      	orrs	r3, r2
 80089ce:	3401      	adds	r4, #1
 80089d0:	9304      	str	r3, [sp, #16]
 80089d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d6:	4829      	ldr	r0, [pc, #164]	@ (8008a7c <_vfiprintf_r+0x220>)
 80089d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089dc:	2206      	movs	r2, #6
 80089de:	f7f7 fc17 	bl	8000210 <memchr>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d03f      	beq.n	8008a66 <_vfiprintf_r+0x20a>
 80089e6:	4b26      	ldr	r3, [pc, #152]	@ (8008a80 <_vfiprintf_r+0x224>)
 80089e8:	bb1b      	cbnz	r3, 8008a32 <_vfiprintf_r+0x1d6>
 80089ea:	9b03      	ldr	r3, [sp, #12]
 80089ec:	3307      	adds	r3, #7
 80089ee:	f023 0307 	bic.w	r3, r3, #7
 80089f2:	3308      	adds	r3, #8
 80089f4:	9303      	str	r3, [sp, #12]
 80089f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f8:	443b      	add	r3, r7
 80089fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80089fc:	e76a      	b.n	80088d4 <_vfiprintf_r+0x78>
 80089fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a02:	460c      	mov	r4, r1
 8008a04:	2001      	movs	r0, #1
 8008a06:	e7a8      	b.n	800895a <_vfiprintf_r+0xfe>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	3401      	adds	r4, #1
 8008a0c:	9305      	str	r3, [sp, #20]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	f04f 0c0a 	mov.w	ip, #10
 8008a14:	4620      	mov	r0, r4
 8008a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a1a:	3a30      	subs	r2, #48	@ 0x30
 8008a1c:	2a09      	cmp	r2, #9
 8008a1e:	d903      	bls.n	8008a28 <_vfiprintf_r+0x1cc>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d0c6      	beq.n	80089b2 <_vfiprintf_r+0x156>
 8008a24:	9105      	str	r1, [sp, #20]
 8008a26:	e7c4      	b.n	80089b2 <_vfiprintf_r+0x156>
 8008a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e7f0      	b.n	8008a14 <_vfiprintf_r+0x1b8>
 8008a32:	ab03      	add	r3, sp, #12
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	462a      	mov	r2, r5
 8008a38:	4b12      	ldr	r3, [pc, #72]	@ (8008a84 <_vfiprintf_r+0x228>)
 8008a3a:	a904      	add	r1, sp, #16
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f7fd fbe3 	bl	8006208 <_printf_float>
 8008a42:	4607      	mov	r7, r0
 8008a44:	1c78      	adds	r0, r7, #1
 8008a46:	d1d6      	bne.n	80089f6 <_vfiprintf_r+0x19a>
 8008a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a4a:	07d9      	lsls	r1, r3, #31
 8008a4c:	d405      	bmi.n	8008a5a <_vfiprintf_r+0x1fe>
 8008a4e:	89ab      	ldrh	r3, [r5, #12]
 8008a50:	059a      	lsls	r2, r3, #22
 8008a52:	d402      	bmi.n	8008a5a <_vfiprintf_r+0x1fe>
 8008a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a56:	f7fe f973 	bl	8006d40 <__retarget_lock_release_recursive>
 8008a5a:	89ab      	ldrh	r3, [r5, #12]
 8008a5c:	065b      	lsls	r3, r3, #25
 8008a5e:	f53f af1f 	bmi.w	80088a0 <_vfiprintf_r+0x44>
 8008a62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a64:	e71e      	b.n	80088a4 <_vfiprintf_r+0x48>
 8008a66:	ab03      	add	r3, sp, #12
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	4b05      	ldr	r3, [pc, #20]	@ (8008a84 <_vfiprintf_r+0x228>)
 8008a6e:	a904      	add	r1, sp, #16
 8008a70:	4630      	mov	r0, r6
 8008a72:	f7fd ff13 	bl	800689c <_printf_i>
 8008a76:	e7e4      	b.n	8008a42 <_vfiprintf_r+0x1e6>
 8008a78:	0800925d 	.word	0x0800925d
 8008a7c:	08009267 	.word	0x08009267
 8008a80:	08006209 	.word	0x08006209
 8008a84:	08008837 	.word	0x08008837
 8008a88:	08009263 	.word	0x08009263

08008a8c <__swbuf_r>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	460e      	mov	r6, r1
 8008a90:	4614      	mov	r4, r2
 8008a92:	4605      	mov	r5, r0
 8008a94:	b118      	cbz	r0, 8008a9e <__swbuf_r+0x12>
 8008a96:	6a03      	ldr	r3, [r0, #32]
 8008a98:	b90b      	cbnz	r3, 8008a9e <__swbuf_r+0x12>
 8008a9a:	f7fe f8d7 	bl	8006c4c <__sinit>
 8008a9e:	69a3      	ldr	r3, [r4, #24]
 8008aa0:	60a3      	str	r3, [r4, #8]
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	071a      	lsls	r2, r3, #28
 8008aa6:	d501      	bpl.n	8008aac <__swbuf_r+0x20>
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	b943      	cbnz	r3, 8008abe <__swbuf_r+0x32>
 8008aac:	4621      	mov	r1, r4
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f000 f82a 	bl	8008b08 <__swsetup_r>
 8008ab4:	b118      	cbz	r0, 8008abe <__swbuf_r+0x32>
 8008ab6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008aba:	4638      	mov	r0, r7
 8008abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	6922      	ldr	r2, [r4, #16]
 8008ac2:	1a98      	subs	r0, r3, r2
 8008ac4:	6963      	ldr	r3, [r4, #20]
 8008ac6:	b2f6      	uxtb	r6, r6
 8008ac8:	4283      	cmp	r3, r0
 8008aca:	4637      	mov	r7, r6
 8008acc:	dc05      	bgt.n	8008ada <__swbuf_r+0x4e>
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f7ff f9c7 	bl	8007e64 <_fflush_r>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d1ed      	bne.n	8008ab6 <__swbuf_r+0x2a>
 8008ada:	68a3      	ldr	r3, [r4, #8]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	60a3      	str	r3, [r4, #8]
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	6022      	str	r2, [r4, #0]
 8008ae6:	701e      	strb	r6, [r3, #0]
 8008ae8:	6962      	ldr	r2, [r4, #20]
 8008aea:	1c43      	adds	r3, r0, #1
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d004      	beq.n	8008afa <__swbuf_r+0x6e>
 8008af0:	89a3      	ldrh	r3, [r4, #12]
 8008af2:	07db      	lsls	r3, r3, #31
 8008af4:	d5e1      	bpl.n	8008aba <__swbuf_r+0x2e>
 8008af6:	2e0a      	cmp	r6, #10
 8008af8:	d1df      	bne.n	8008aba <__swbuf_r+0x2e>
 8008afa:	4621      	mov	r1, r4
 8008afc:	4628      	mov	r0, r5
 8008afe:	f7ff f9b1 	bl	8007e64 <_fflush_r>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d0d9      	beq.n	8008aba <__swbuf_r+0x2e>
 8008b06:	e7d6      	b.n	8008ab6 <__swbuf_r+0x2a>

08008b08 <__swsetup_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4b29      	ldr	r3, [pc, #164]	@ (8008bb0 <__swsetup_r+0xa8>)
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	6818      	ldr	r0, [r3, #0]
 8008b10:	460c      	mov	r4, r1
 8008b12:	b118      	cbz	r0, 8008b1c <__swsetup_r+0x14>
 8008b14:	6a03      	ldr	r3, [r0, #32]
 8008b16:	b90b      	cbnz	r3, 8008b1c <__swsetup_r+0x14>
 8008b18:	f7fe f898 	bl	8006c4c <__sinit>
 8008b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b20:	0719      	lsls	r1, r3, #28
 8008b22:	d422      	bmi.n	8008b6a <__swsetup_r+0x62>
 8008b24:	06da      	lsls	r2, r3, #27
 8008b26:	d407      	bmi.n	8008b38 <__swsetup_r+0x30>
 8008b28:	2209      	movs	r2, #9
 8008b2a:	602a      	str	r2, [r5, #0]
 8008b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b30:	81a3      	strh	r3, [r4, #12]
 8008b32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b36:	e033      	b.n	8008ba0 <__swsetup_r+0x98>
 8008b38:	0758      	lsls	r0, r3, #29
 8008b3a:	d512      	bpl.n	8008b62 <__swsetup_r+0x5a>
 8008b3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b3e:	b141      	cbz	r1, 8008b52 <__swsetup_r+0x4a>
 8008b40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b44:	4299      	cmp	r1, r3
 8008b46:	d002      	beq.n	8008b4e <__swsetup_r+0x46>
 8008b48:	4628      	mov	r0, r5
 8008b4a:	f7fe ff65 	bl	8007a18 <_free_r>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b58:	81a3      	strh	r3, [r4, #12]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	6063      	str	r3, [r4, #4]
 8008b5e:	6923      	ldr	r3, [r4, #16]
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	f043 0308 	orr.w	r3, r3, #8
 8008b68:	81a3      	strh	r3, [r4, #12]
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	b94b      	cbnz	r3, 8008b82 <__swsetup_r+0x7a>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b78:	d003      	beq.n	8008b82 <__swsetup_r+0x7a>
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	f000 f83f 	bl	8008c00 <__smakebuf_r>
 8008b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b86:	f013 0201 	ands.w	r2, r3, #1
 8008b8a:	d00a      	beq.n	8008ba2 <__swsetup_r+0x9a>
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	60a2      	str	r2, [r4, #8]
 8008b90:	6962      	ldr	r2, [r4, #20]
 8008b92:	4252      	negs	r2, r2
 8008b94:	61a2      	str	r2, [r4, #24]
 8008b96:	6922      	ldr	r2, [r4, #16]
 8008b98:	b942      	cbnz	r2, 8008bac <__swsetup_r+0xa4>
 8008b9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b9e:	d1c5      	bne.n	8008b2c <__swsetup_r+0x24>
 8008ba0:	bd38      	pop	{r3, r4, r5, pc}
 8008ba2:	0799      	lsls	r1, r3, #30
 8008ba4:	bf58      	it	pl
 8008ba6:	6962      	ldrpl	r2, [r4, #20]
 8008ba8:	60a2      	str	r2, [r4, #8]
 8008baa:	e7f4      	b.n	8008b96 <__swsetup_r+0x8e>
 8008bac:	2000      	movs	r0, #0
 8008bae:	e7f7      	b.n	8008ba0 <__swsetup_r+0x98>
 8008bb0:	2000001c 	.word	0x2000001c

08008bb4 <__swhatbuf_r>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	b096      	sub	sp, #88	@ 0x58
 8008bc0:	4615      	mov	r5, r2
 8008bc2:	461e      	mov	r6, r3
 8008bc4:	da0d      	bge.n	8008be2 <__swhatbuf_r+0x2e>
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bcc:	f04f 0100 	mov.w	r1, #0
 8008bd0:	bf14      	ite	ne
 8008bd2:	2340      	movne	r3, #64	@ 0x40
 8008bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008bd8:	2000      	movs	r0, #0
 8008bda:	6031      	str	r1, [r6, #0]
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	b016      	add	sp, #88	@ 0x58
 8008be0:	bd70      	pop	{r4, r5, r6, pc}
 8008be2:	466a      	mov	r2, sp
 8008be4:	f000 f89c 	bl	8008d20 <_fstat_r>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	dbec      	blt.n	8008bc6 <__swhatbuf_r+0x12>
 8008bec:	9901      	ldr	r1, [sp, #4]
 8008bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bf6:	4259      	negs	r1, r3
 8008bf8:	4159      	adcs	r1, r3
 8008bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bfe:	e7eb      	b.n	8008bd8 <__swhatbuf_r+0x24>

08008c00 <__smakebuf_r>:
 8008c00:	898b      	ldrh	r3, [r1, #12]
 8008c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c04:	079d      	lsls	r5, r3, #30
 8008c06:	4606      	mov	r6, r0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	d507      	bpl.n	8008c1c <__smakebuf_r+0x1c>
 8008c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	2301      	movs	r3, #1
 8008c16:	6163      	str	r3, [r4, #20]
 8008c18:	b003      	add	sp, #12
 8008c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1c:	ab01      	add	r3, sp, #4
 8008c1e:	466a      	mov	r2, sp
 8008c20:	f7ff ffc8 	bl	8008bb4 <__swhatbuf_r>
 8008c24:	9f00      	ldr	r7, [sp, #0]
 8008c26:	4605      	mov	r5, r0
 8008c28:	4639      	mov	r1, r7
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f7fd fd48 	bl	80066c0 <_malloc_r>
 8008c30:	b948      	cbnz	r0, 8008c46 <__smakebuf_r+0x46>
 8008c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c36:	059a      	lsls	r2, r3, #22
 8008c38:	d4ee      	bmi.n	8008c18 <__smakebuf_r+0x18>
 8008c3a:	f023 0303 	bic.w	r3, r3, #3
 8008c3e:	f043 0302 	orr.w	r3, r3, #2
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	e7e2      	b.n	8008c0c <__smakebuf_r+0xc>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	6020      	str	r0, [r4, #0]
 8008c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	9b01      	ldr	r3, [sp, #4]
 8008c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c56:	b15b      	cbz	r3, 8008c70 <__smakebuf_r+0x70>
 8008c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f000 f83b 	bl	8008cd8 <_isatty_r>
 8008c62:	b128      	cbz	r0, 8008c70 <__smakebuf_r+0x70>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	f023 0303 	bic.w	r3, r3, #3
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	431d      	orrs	r5, r3
 8008c74:	81a5      	strh	r5, [r4, #12]
 8008c76:	e7cf      	b.n	8008c18 <__smakebuf_r+0x18>

08008c78 <_raise_r>:
 8008c78:	291f      	cmp	r1, #31
 8008c7a:	b538      	push	{r3, r4, r5, lr}
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	460c      	mov	r4, r1
 8008c80:	d904      	bls.n	8008c8c <_raise_r+0x14>
 8008c82:	2316      	movs	r3, #22
 8008c84:	6003      	str	r3, [r0, #0]
 8008c86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c8e:	b112      	cbz	r2, 8008c96 <_raise_r+0x1e>
 8008c90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c94:	b94b      	cbnz	r3, 8008caa <_raise_r+0x32>
 8008c96:	4628      	mov	r0, r5
 8008c98:	f000 f840 	bl	8008d1c <_getpid_r>
 8008c9c:	4622      	mov	r2, r4
 8008c9e:	4601      	mov	r1, r0
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca6:	f000 b827 	b.w	8008cf8 <_kill_r>
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d00a      	beq.n	8008cc4 <_raise_r+0x4c>
 8008cae:	1c59      	adds	r1, r3, #1
 8008cb0:	d103      	bne.n	8008cba <_raise_r+0x42>
 8008cb2:	2316      	movs	r3, #22
 8008cb4:	6003      	str	r3, [r0, #0]
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	e7e7      	b.n	8008c8a <_raise_r+0x12>
 8008cba:	2100      	movs	r1, #0
 8008cbc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	4798      	blx	r3
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	e7e0      	b.n	8008c8a <_raise_r+0x12>

08008cc8 <raise>:
 8008cc8:	4b02      	ldr	r3, [pc, #8]	@ (8008cd4 <raise+0xc>)
 8008cca:	4601      	mov	r1, r0
 8008ccc:	6818      	ldr	r0, [r3, #0]
 8008cce:	f7ff bfd3 	b.w	8008c78 <_raise_r>
 8008cd2:	bf00      	nop
 8008cd4:	2000001c 	.word	0x2000001c

08008cd8 <_isatty_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4d06      	ldr	r5, [pc, #24]	@ (8008cf4 <_isatty_r+0x1c>)
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	602b      	str	r3, [r5, #0]
 8008ce4:	f7fa f97a 	bl	8002fdc <_isatty>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d102      	bne.n	8008cf2 <_isatty_r+0x1a>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	b103      	cbz	r3, 8008cf2 <_isatty_r+0x1a>
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	200006b8 	.word	0x200006b8

08008cf8 <_kill_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d07      	ldr	r5, [pc, #28]	@ (8008d18 <_kill_r+0x20>)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4604      	mov	r4, r0
 8008d00:	4608      	mov	r0, r1
 8008d02:	4611      	mov	r1, r2
 8008d04:	602b      	str	r3, [r5, #0]
 8008d06:	f7fa f8f9 	bl	8002efc <_kill>
 8008d0a:	1c43      	adds	r3, r0, #1
 8008d0c:	d102      	bne.n	8008d14 <_kill_r+0x1c>
 8008d0e:	682b      	ldr	r3, [r5, #0]
 8008d10:	b103      	cbz	r3, 8008d14 <_kill_r+0x1c>
 8008d12:	6023      	str	r3, [r4, #0]
 8008d14:	bd38      	pop	{r3, r4, r5, pc}
 8008d16:	bf00      	nop
 8008d18:	200006b8 	.word	0x200006b8

08008d1c <_getpid_r>:
 8008d1c:	f7fa b8e6 	b.w	8002eec <_getpid>

08008d20 <_fstat_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	@ (8008d40 <_fstat_r+0x20>)
 8008d24:	2300      	movs	r3, #0
 8008d26:	4604      	mov	r4, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	602b      	str	r3, [r5, #0]
 8008d2e:	f7fa f945 	bl	8002fbc <_fstat>
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	d102      	bne.n	8008d3c <_fstat_r+0x1c>
 8008d36:	682b      	ldr	r3, [r5, #0]
 8008d38:	b103      	cbz	r3, 8008d3c <_fstat_r+0x1c>
 8008d3a:	6023      	str	r3, [r4, #0]
 8008d3c:	bd38      	pop	{r3, r4, r5, pc}
 8008d3e:	bf00      	nop
 8008d40:	200006b8 	.word	0x200006b8

08008d44 <_init>:
 8008d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d46:	bf00      	nop
 8008d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d4a:	bc08      	pop	{r3}
 8008d4c:	469e      	mov	lr, r3
 8008d4e:	4770      	bx	lr

08008d50 <_fini>:
 8008d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d52:	bf00      	nop
 8008d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d56:	bc08      	pop	{r3}
 8008d58:	469e      	mov	lr, r3
 8008d5a:	4770      	bx	lr
