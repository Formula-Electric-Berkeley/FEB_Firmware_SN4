
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008744  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  08008918  08008918  00018918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090ec  080090ec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f4  080090f4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080090fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200001e0  080092dc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  080092dc  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f28  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a48  00000000  00000000  0003217b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00034bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2f  00000000  00000000  00035cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ac2  00000000  00000000  000369ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d0c  00000000  00000000  0005a4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4a09  00000000  00000000  0006e1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005838  00000000  00000000  00142bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00148400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080088fc 	.word	0x080088fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080088fc 	.word	0x080088fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <get_gpio_pin>:
*/


// ******************************** Helper Functions ********************************

static uint8_t get_gpio_pin(uint8_t mux) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	if (mux == 0) {
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <get_gpio_pin+0x14>
		return 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e00f      	b.n	8000fb8 <get_gpio_pin+0x34>
	} else if (mux == 1) {
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d101      	bne.n	8000fa2 <get_gpio_pin+0x1e>
		return 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00a      	b.n	8000fb8 <get_gpio_pin+0x34>
	} else if (mux == 2) {
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d101      	bne.n	8000fac <get_gpio_pin+0x28>
		return 5;
 8000fa8:	2305      	movs	r3, #5
 8000faa:	e005      	b.n	8000fb8 <get_gpio_pin+0x34>
	} else if (mux == 3) {
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d101      	bne.n	8000fb6 <get_gpio_pin+0x32>
		return 6;
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	e000      	b.n	8000fb8 <get_gpio_pin+0x34>
	} else {
		return -1;
 8000fb6:	23ff      	movs	r3, #255	; 0xff
	}
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <get_sensor>:

static uint8_t get_sensor(uint8_t mux, uint8_t channel) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	return mux * 8 + channel;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	4413      	add	r3, r2
 8000fde:	b2db      	uxtb	r3, r3
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <convert_voltage>:

static float convert_voltage(uint16_t raw_code) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	return raw_code * 0.0001;
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fab1 	bl	8000564 <__aeabi_i2d>
 8001002:	a309      	add	r3, pc, #36	; (adr r3, 8001028 <convert_voltage+0x38>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff fb16 	bl	8000638 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fde8 	bl	8000be8 <__aeabi_d2f>
 8001018:	4603      	mov	r3, r0
 800101a:	ee07 3a90 	vmov	s15, r3
}
 800101e:	eeb0 0a67 	vmov.f32	s0, s15
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	eb1c432d 	.word	0xeb1c432d
 800102c:	3f1a36e2 	.word	0x3f1a36e2

08001030 <FEB_ADBMS_Init>:

// ******************************** Functions ********************************

void FEB_ADBMS_Init() {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af06      	add	r7, sp, #24
	ADBMS6830B_init_cfg(FEB_NUM_IC, accumulator.IC_Config);
 8001036:	4915      	ldr	r1, [pc, #84]	; (800108c <FEB_ADBMS_Init+0x5c>)
 8001038:	2001      	movs	r0, #1
 800103a:	f000 fa4f 	bl	80014dc <ADBMS6830B_init_cfg>
	for (uint8_t ic; ic < FEB_NUM_IC; ic++) {
 800103e:	e016      	b.n	800106e <FEB_ADBMS_Init+0x3e>
		ADBMS6830B_set_cfgr(ic, accumulator.IC_Config, refon, cth_bits, gpio_bits, dcc_bits, dcto_bits, uv, ov);
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <FEB_ADBMS_Init+0x60>)
 8001042:	7819      	ldrb	r1, [r3, #0]
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <FEB_ADBMS_Init+0x64>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	4a13      	ldr	r2, [pc, #76]	; (8001098 <FEB_ADBMS_Init+0x68>)
 800104a:	8812      	ldrh	r2, [r2, #0]
 800104c:	79f8      	ldrb	r0, [r7, #7]
 800104e:	9204      	str	r2, [sp, #16]
 8001050:	9303      	str	r3, [sp, #12]
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <FEB_ADBMS_Init+0x6c>)
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <FEB_ADBMS_Init+0x70>)
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <FEB_ADBMS_Init+0x74>)
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <FEB_ADBMS_Init+0x78>)
 8001060:	460a      	mov	r2, r1
 8001062:	490a      	ldr	r1, [pc, #40]	; (800108c <FEB_ADBMS_Init+0x5c>)
 8001064:	f000 fad7 	bl	8001616 <ADBMS6830B_set_cfgr>
	for (uint8_t ic; ic < FEB_NUM_IC; ic++) {
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	3301      	adds	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0e5      	beq.n	8001040 <FEB_ADBMS_Init+0x10>
	}
	ADBMS6830B_reset_crc_count(FEB_NUM_IC, accumulator.IC_Config);
 8001074:	4905      	ldr	r1, [pc, #20]	; (800108c <FEB_ADBMS_Init+0x5c>)
 8001076:	2001      	movs	r0, #1
 8001078:	f000 fa65 	bl	8001546 <ADBMS6830B_reset_crc_count>
	ADBMS6830B_init_reg_limits(FEB_NUM_IC, accumulator.IC_Config);
 800107c:	4903      	ldr	r1, [pc, #12]	; (800108c <FEB_ADBMS_Init+0x5c>)
 800107e:	2001      	movs	r0, #1
 8001080:	f000 fd76 	bl	8001b70 <ADBMS6830B_init_reg_limits>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200002c8 	.word	0x200002c8
 8001090:	20000000 	.word	0x20000000
 8001094:	20000008 	.word	0x20000008
 8001098:	2000000a 	.word	0x2000000a
 800109c:	200003c8 	.word	0x200003c8
 80010a0:	200003bc 	.word	0x200003bc
 80010a4:	200003b0 	.word	0x200003b0
 80010a8:	20000004 	.word	0x20000004

080010ac <FEB_ADBMS_AcquireData>:

void FEB_ADBMS_AcquireData() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

	/* Voltage */
	start_adc_cell_voltage_measurements();
 80010b2:	f000 f820 	bl	80010f6 <start_adc_cell_voltage_measurements>
	read_cell_voltages();
 80010b6:	f000 f831 	bl	800111c <read_cell_voltages>
	store_cell_voltages();
 80010ba:	f000 f83d 	bl	8001138 <store_cell_voltages>
	validate_voltages();
 80010be:	f000 f87d 	bl	80011bc <validate_voltages>

	/* Temperature */
	for (uint8_t channel = 0; channel < 8; channel++) {
 80010c2:	2300      	movs	r3, #0
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	e00e      	b.n	80010e6 <FEB_ADBMS_AcquireData+0x3a>
		configure_gpio_bits(channel);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f8a4 	bl	8001218 <configure_gpio_bits>
		start_aux_voltage_measurements();
 80010d0:	f000 f912 	bl	80012f8 <start_aux_voltage_measurements>
		read_aux_voltages();
 80010d4:	f000 f91e 	bl	8001314 <read_aux_voltages>
		store_cell_temps(channel);
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f928 	bl	8001330 <store_cell_temps>
	for (uint8_t channel = 0; channel < 8; channel++) {
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	3301      	adds	r3, #1
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b07      	cmp	r3, #7
 80010ea:	d9ed      	bls.n	80010c8 <FEB_ADBMS_AcquireData+0x1c>
	}

}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <start_adc_cell_voltage_measurements>:

// ******************************** Voltage ********************************

void start_adc_cell_voltage_measurements() {
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af02      	add	r7, sp, #8
	wakeup_sleep(FEB_NUM_IC);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f001 fa15 	bl	800252c <wakeup_sleep>
	ADBMS6830B_adcv(RD_ON, DCP_ON, CONTINUOUS, RSTF_OFF, OW_OFF_ALL_CH);
 8001102:	2300      	movs	r3, #0
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	2201      	movs	r2, #1
 800110a:	2101      	movs	r1, #1
 800110c:	2001      	movs	r0, #1
 800110e:	f000 fd7c 	bl	8001c0a <ADBMS6830B_adcv>
	ADBMS6830B_pollAdc();
 8001112:	f000 fdad 	bl	8001c70 <ADBMS6830B_pollAdc>
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <read_cell_voltages>:

void read_cell_voltages() {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 8001120:	2001      	movs	r0, #1
 8001122:	f001 fa03 	bl	800252c <wakeup_sleep>
	ADBMS6830B_rdcv(FEB_NUM_IC, accumulator.IC_Config);
 8001126:	4903      	ldr	r1, [pc, #12]	; (8001134 <read_cell_voltages+0x18>)
 8001128:	2001      	movs	r0, #1
 800112a:	f000 fde3 	bl	8001cf4 <ADBMS6830B_rdcv>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200002c8 	.word	0x200002c8

08001138 <store_cell_voltages>:

void store_cell_voltages() {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	accumulator.total_voltage_V = 0;
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <store_cell_voltages+0x80>)
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e02c      	b.n	80011a6 <store_cell_voltages+0x6e>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 800114c:	2300      	movs	r3, #0
 800114e:	71bb      	strb	r3, [r7, #6]
 8001150:	e023      	b.n	800119a <store_cell_voltages+0x62>
			uint8_t ic = bank;
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	717b      	strb	r3, [r7, #5]
			float actual_voltage = convert_voltage(accumulator.IC_Config[bank].cells.c_codes[ic]);
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	797b      	ldrb	r3, [r7, #5]
 800115a:	4917      	ldr	r1, [pc, #92]	; (80011b8 <store_cell_voltages+0x80>)
 800115c:	2074      	movs	r0, #116	; 0x74
 800115e:	fb00 f202 	mul.w	r2, r0, r2
 8001162:	4413      	add	r3, r2
 8001164:	3370      	adds	r3, #112	; 0x70
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	440b      	add	r3, r1
 800116a:	895b      	ldrh	r3, [r3, #10]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff3f 	bl	8000ff0 <convert_voltage>
 8001172:	ed87 0a00 	vstr	s0, [r7]
			accumulator.banks[bank].cells[cell].voltage_V = actual_voltage;
 8001176:	79fa      	ldrb	r2, [r7, #7]
 8001178:	79b9      	ldrb	r1, [r7, #6]
 800117a:	480f      	ldr	r0, [pc, #60]	; (80011b8 <store_cell_voltages+0x80>)
 800117c:	4613      	mov	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	1a9b      	subs	r3, r3, r2
 8001182:	00da      	lsls	r2, r3, #3
 8001184:	1ad2      	subs	r2, r2, r3
 8001186:	1853      	adds	r3, r2, r1
 8001188:	3322      	adds	r3, #34	; 0x22
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4403      	add	r3, r0
 800118e:	3304      	adds	r3, #4
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	601a      	str	r2, [r3, #0]
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	3301      	adds	r3, #1
 8001198:	71bb      	strb	r3, [r7, #6]
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d9d8      	bls.n	8001152 <store_cell_voltages+0x1a>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	3301      	adds	r3, #1
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0cf      	beq.n	800114c <store_cell_voltages+0x14>
		}
	}
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001fc 	.word	0x200001fc

080011bc <validate_voltages>:

void validate_voltages() {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	e01d      	b.n	8001204 <validate_voltages+0x48>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	71bb      	strb	r3, [r7, #6]
 80011cc:	e014      	b.n	80011f8 <validate_voltages+0x3c>
			float voltage = accumulator.banks[bank].cells[cell].voltage_V;
 80011ce:	79fa      	ldrb	r2, [r7, #7]
 80011d0:	79b9      	ldrb	r1, [r7, #6]
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <validate_voltages+0x58>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	00da      	lsls	r2, r3, #3
 80011dc:	1ad2      	subs	r2, r2, r3
 80011de:	1853      	adds	r3, r2, r1
 80011e0:	3322      	adds	r3, #34	; 0x22
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4403      	add	r3, r0
 80011e6:	3304      	adds	r3, #4
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	603b      	str	r3, [r7, #0]
			if (voltage > FEB_CELL_MAX_VOLT || voltage < FEB_CELL_MIN_VOLT) {
 80011ec:	6838      	ldr	r0, [r7, #0]
 80011ee:	f7ff f9cb 	bl	8000588 <__aeabi_f2d>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell ++) {
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	3301      	adds	r3, #1
 80011f6:	71bb      	strb	r3, [r7, #6]
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	d9e7      	bls.n	80011ce <validate_voltages+0x12>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	3301      	adds	r3, #1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0de      	beq.n	80011c8 <validate_voltages+0xc>
				/* Some error handling */
			}
		}
	}
}
 800120a:	bf00      	nop
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200001fc 	.word	0x200001fc

08001218 <configure_gpio_bits>:

// ******************************** Temperature ********************************



void configure_gpio_bits(uint8_t channel) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af06      	add	r7, sp, #24
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	gpio_bits[0] = 0b1; /* ADC Channel */
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <configure_gpio_bits+0xc0>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
	gpio_bits[1] = 0b1; /* ADC Channel */
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <configure_gpio_bits+0xc0>)
 800122a:	2201      	movs	r2, #1
 800122c:	705a      	strb	r2, [r3, #1]
	gpio_bits[2] = (channel >> 0) & 0b1; /* MUX Sel 1 */
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf14      	ite	ne
 8001238:	2301      	movne	r3, #1
 800123a:	2300      	moveq	r3, #0
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <configure_gpio_bits+0xc0>)
 8001240:	709a      	strb	r2, [r3, #2]
	gpio_bits[3] = (channel >> 1) & 0b1; /* MUX Sel 1 */
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	085b      	lsrs	r3, r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf14      	ite	ne
 8001250:	2301      	movne	r3, #1
 8001252:	2300      	moveq	r3, #0
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <configure_gpio_bits+0xc0>)
 8001258:	70da      	strb	r2, [r3, #3]
	gpio_bits[4] = (channel >> 2) & 0b1; /* MUX Sel 1 */
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <configure_gpio_bits+0xc0>)
 8001270:	711a      	strb	r2, [r3, #4]
	gpio_bits[5] = 0b1; /* ADC Channel */
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <configure_gpio_bits+0xc0>)
 8001274:	2201      	movs	r2, #1
 8001276:	715a      	strb	r2, [r3, #5]
	gpio_bits[6] = 0b1; /* ADC Channel */
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <configure_gpio_bits+0xc0>)
 800127a:	2201      	movs	r2, #1
 800127c:	719a      	strb	r2, [r3, #6]
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	e016      	b.n	80012b2 <configure_gpio_bits+0x9a>
		ADBMS6830B_set_cfgr(ic, accumulator.IC_Config, refon, cth_bits, gpio_bits, dcc_bits, dcto_bits, uv, ov);
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <configure_gpio_bits+0xc4>)
 8001286:	7819      	ldrb	r1, [r3, #0]
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <configure_gpio_bits+0xc8>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <configure_gpio_bits+0xcc>)
 800128e:	8812      	ldrh	r2, [r2, #0]
 8001290:	7bf8      	ldrb	r0, [r7, #15]
 8001292:	9204      	str	r2, [sp, #16]
 8001294:	9303      	str	r3, [sp, #12]
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <configure_gpio_bits+0xd0>)
 8001298:	9302      	str	r3, [sp, #8]
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <configure_gpio_bits+0xd4>)
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <configure_gpio_bits+0xc0>)
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <configure_gpio_bits+0xd8>)
 80012a4:	460a      	mov	r2, r1
 80012a6:	4913      	ldr	r1, [pc, #76]	; (80012f4 <configure_gpio_bits+0xdc>)
 80012a8:	f000 f9b5 	bl	8001616 <ADBMS6830B_set_cfgr>
	for (uint8_t ic = 0; ic < FEB_NUM_IC; ic++) {
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	3301      	adds	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0e5      	beq.n	8001284 <configure_gpio_bits+0x6c>
	}
	wakeup_sleep(FEB_NUM_IC);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f001 f937 	bl	800252c <wakeup_sleep>
	ADBMS6830B_wrcfga(FEB_NUM_IC, accumulator.IC_Config);
 80012be:	490d      	ldr	r1, [pc, #52]	; (80012f4 <configure_gpio_bits+0xdc>)
 80012c0:	2001      	movs	r0, #1
 80012c2:	f000 fe43 	bl	8001f4c <ADBMS6830B_wrcfga>
	ADBMS6830B_wrcfgb(FEB_NUM_IC, accumulator.IC_Config);
 80012c6:	490b      	ldr	r1, [pc, #44]	; (80012f4 <configure_gpio_bits+0xdc>)
 80012c8:	2001      	movs	r0, #1
 80012ca:	f000 febe 	bl	800204a <ADBMS6830B_wrcfgb>

}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200003b0 	.word	0x200003b0
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000008 	.word	0x20000008
 80012e4:	2000000a 	.word	0x2000000a
 80012e8:	200003c8 	.word	0x200003c8
 80012ec:	200003bc 	.word	0x200003bc
 80012f0:	20000004 	.word	0x20000004
 80012f4:	200002c8 	.word	0x200002c8

080012f8 <start_aux_voltage_measurements>:

void start_aux_voltage_measurements() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 80012fc:	2001      	movs	r0, #1
 80012fe:	f001 f915 	bl	800252c <wakeup_sleep>
	ADBMS6830B_adax(AUX_OW_OFF, PUP_DOWN, AUX_ALL);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2000      	movs	r0, #0
 8001308:	f000 ff1f 	bl	800214a <ADBMS6830B_adax>
	ADBMS6830B_pollAdc();
 800130c:	f000 fcb0 	bl	8001c70 <ADBMS6830B_pollAdc>
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <read_aux_voltages>:

void read_aux_voltages() {
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 8001318:	2001      	movs	r0, #1
 800131a:	f001 f907 	bl	800252c <wakeup_sleep>
	ADBMS6830B_rdaux(FEB_NUM_IC, accumulator.IC_Config);
 800131e:	4903      	ldr	r1, [pc, #12]	; (800132c <read_aux_voltages+0x18>)
 8001320:	2001      	movs	r0, #1
 8001322:	f000 ff3d 	bl	80021a0 <ADBMS6830B_rdaux>
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200002c8 	.word	0x200002c8

08001330 <store_cell_temps>:

void store_cell_temps(uint8_t channel) {
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e03b      	b.n	80013b8 <store_cell_temps+0x88>
		for (uint8_t mux = 0; mux < 4; mux++) {
 8001340:	2300      	movs	r3, #0
 8001342:	73bb      	strb	r3, [r7, #14]
 8001344:	e032      	b.n	80013ac <store_cell_temps+0x7c>
			uint8_t gpio = get_gpio_pin(mux);
 8001346:	7bbb      	ldrb	r3, [r7, #14]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fe1b 	bl	8000f84 <get_gpio_pin>
 800134e:	4603      	mov	r3, r0
 8001350:	737b      	strb	r3, [r7, #13]
			uint8_t raw_code = accumulator.IC_Config[bank].aux.a_codes[gpio];
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	7b7b      	ldrb	r3, [r7, #13]
 8001356:	491c      	ldr	r1, [pc, #112]	; (80013c8 <store_cell_temps+0x98>)
 8001358:	2074      	movs	r0, #116	; 0x74
 800135a:	fb00 f202 	mul.w	r2, r0, r2
 800135e:	4413      	add	r3, r2
 8001360:	3388      	adds	r3, #136	; 0x88
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	440b      	add	r3, r1
 8001366:	889b      	ldrh	r3, [r3, #4]
 8001368:	733b      	strb	r3, [r7, #12]
			uint8_t sensor = get_sensor(mux, channel);
 800136a:	79fa      	ldrb	r2, [r7, #7]
 800136c:	7bbb      	ldrb	r3, [r7, #14]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fe27 	bl	8000fc4 <get_sensor>
 8001376:	4603      	mov	r3, r0
 8001378:	72fb      	strb	r3, [r7, #11]
			accumulator.banks[bank].temp_sensor_readings_V[sensor] = convert_voltage(raw_code);
 800137a:	7b3b      	ldrb	r3, [r7, #12]
 800137c:	b29b      	uxth	r3, r3
 800137e:	7bfc      	ldrb	r4, [r7, #15]
 8001380:	7afd      	ldrb	r5, [r7, #11]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe34 	bl	8000ff0 <convert_voltage>
 8001388:	eef0 7a40 	vmov.f32	s15, s0
 800138c:	490e      	ldr	r1, [pc, #56]	; (80013c8 <store_cell_temps+0x98>)
 800138e:	4623      	mov	r3, r4
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	1b1b      	subs	r3, r3, r4
 8001394:	00da      	lsls	r2, r3, #3
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	1953      	adds	r3, r2, r5
 800139a:	3302      	adds	r3, #2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	3304      	adds	r3, #4
 80013a2:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t mux = 0; mux < 4; mux++) {
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	3301      	adds	r3, #1
 80013aa:	73bb      	strb	r3, [r7, #14]
 80013ac:	7bbb      	ldrb	r3, [r7, #14]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d9c9      	bls.n	8001346 <store_cell_temps+0x16>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	3301      	adds	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0c0      	beq.n	8001340 <store_cell_temps+0x10>
		}
	}
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdb0      	pop	{r4, r5, r7, pc}
 80013c8:	200001fc 	.word	0x200001fc

080013cc <FEB_ADBMS_UART_Transmit>:

void FEB_ADBMS_UART_Transmit() {
 80013cc:	b5b0      	push	{r4, r5, r7, lr}
 80013ce:	b0a4      	sub	sp, #144	; 0x90
 80013d0:	af02      	add	r7, sp, #8
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80013d8:	e06e      	b.n	80014b8 <FEB_ADBMS_UART_Transmit+0xec>
		char UART_str[128];
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80013e0:	e02c      	b.n	800143c <FEB_ADBMS_UART_Transmit+0x70>
			sprintf(UART_str, "Bank: %d, Cell: %d, Voltage: %f\n", bank, cell, accumulator.banks[bank].cells[cell].voltage_V);
 80013e2:	f897 4087 	ldrb.w	r4, [r7, #135]	; 0x87
 80013e6:	f897 5086 	ldrb.w	r5, [r7, #134]	; 0x86
 80013ea:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80013ee:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 80013f2:	4836      	ldr	r0, [pc, #216]	; (80014cc <FEB_ADBMS_UART_Transmit+0x100>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	00da      	lsls	r2, r3, #3
 80013fc:	1ad2      	subs	r2, r2, r3
 80013fe:	1853      	adds	r3, r2, r1
 8001400:	3322      	adds	r3, #34	; 0x22
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4403      	add	r3, r0
 8001406:	3304      	adds	r3, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f8bc 	bl	8000588 <__aeabi_f2d>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	1d38      	adds	r0, r7, #4
 8001416:	e9cd 2300 	strd	r2, r3, [sp]
 800141a:	462b      	mov	r3, r5
 800141c:	4622      	mov	r2, r4
 800141e:	492c      	ldr	r1, [pc, #176]	; (80014d0 <FEB_ADBMS_UART_Transmit+0x104>)
 8001420:	f005 f914 	bl	800664c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, 1024, 100);
 8001424:	1d39      	adds	r1, r7, #4
 8001426:	2364      	movs	r3, #100	; 0x64
 8001428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142c:	4829      	ldr	r0, [pc, #164]	; (80014d4 <FEB_ADBMS_UART_Transmit+0x108>)
 800142e:	f004 f876 	bl	800551e <HAL_UART_Transmit>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_BANK; cell++) {
 8001432:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001436:	3301      	adds	r3, #1
 8001438:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800143c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d9ce      	bls.n	80013e2 <FEB_ADBMS_UART_Transmit+0x16>
		}

		for (uint8_t sensor = 0; sensor < FEB_NUM_TEMP_SENSE_PER_BANK; sensor++) {
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 800144a:	e02c      	b.n	80014a6 <FEB_ADBMS_UART_Transmit+0xda>
			sprintf(UART_str, "Bank: %d, Sensor: %d, Voltage: %f\n", bank, sensor, accumulator.banks[bank].temp_sensor_readings_V[sensor]);
 800144c:	f897 4087 	ldrb.w	r4, [r7, #135]	; 0x87
 8001450:	f897 5085 	ldrb.w	r5, [r7, #133]	; 0x85
 8001454:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001458:	f897 1085 	ldrb.w	r1, [r7, #133]	; 0x85
 800145c:	481b      	ldr	r0, [pc, #108]	; (80014cc <FEB_ADBMS_UART_Transmit+0x100>)
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	1a9b      	subs	r3, r3, r2
 8001464:	00da      	lsls	r2, r3, #3
 8001466:	1ad2      	subs	r2, r2, r3
 8001468:	1853      	adds	r3, r2, r1
 800146a:	3302      	adds	r3, #2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4403      	add	r3, r0
 8001470:	3304      	adds	r3, #4
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f887 	bl	8000588 <__aeabi_f2d>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	1d38      	adds	r0, r7, #4
 8001480:	e9cd 2300 	strd	r2, r3, [sp]
 8001484:	462b      	mov	r3, r5
 8001486:	4622      	mov	r2, r4
 8001488:	4913      	ldr	r1, [pc, #76]	; (80014d8 <FEB_ADBMS_UART_Transmit+0x10c>)
 800148a:	f005 f8df 	bl	800664c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) UART_str, 1024, 100);
 800148e:	1d39      	adds	r1, r7, #4
 8001490:	2364      	movs	r3, #100	; 0x64
 8001492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001496:	480f      	ldr	r0, [pc, #60]	; (80014d4 <FEB_ADBMS_UART_Transmit+0x108>)
 8001498:	f004 f841 	bl	800551e <HAL_UART_Transmit>
		for (uint8_t sensor = 0; sensor < FEB_NUM_TEMP_SENSE_PER_BANK; sensor++) {
 800149c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80014a0:	3301      	adds	r3, #1
 80014a2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80014a6:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80014aa:	2b1f      	cmp	r3, #31
 80014ac:	d9ce      	bls.n	800144c <FEB_ADBMS_UART_Transmit+0x80>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 80014ae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80014b2:	3301      	adds	r3, #1
 80014b4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80014b8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d08c      	beq.n	80013da <FEB_ADBMS_UART_Transmit+0xe>
		}
	}
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3788      	adds	r7, #136	; 0x88
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bdb0      	pop	{r4, r5, r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200001fc 	.word	0x200001fc
 80014d0:	08008918 	.word	0x08008918
 80014d4:	2000042c 	.word	0x2000042c
 80014d8:	0800893c 	.word	0x0800893c

080014dc <ADBMS6830B_init_cfg>:

/* Helper function to initialize CFG variables */
void ADBMS6830B_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e020      	b.n	8001530 <ADBMS6830B_init_cfg+0x54>
	{
		for (int j =0; j<6; j++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	e017      	b.n	8001524 <ADBMS6830B_init_cfg+0x48>
		{
		  ic[current_ic].configa.tx_data[j] = 0;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	22e8      	movs	r2, #232	; 0xe8
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	441a      	add	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4413      	add	r3, r2
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
          ic[current_ic].configb.tx_data[j] = 0;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	22e8      	movs	r2, #232	; 0xe8
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	441a      	add	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4413      	add	r3, r2
 8001518:	330f      	adds	r3, #15
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
		for (int j =0; j<6; j++)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	3301      	adds	r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b05      	cmp	r3, #5
 8001528:	dde4      	ble.n	80014f4 <ADBMS6830B_init_cfg+0x18>
	for (uint8_t current_ic = 0; current_ic<total_ic;current_ic++)
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	3301      	adds	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	429a      	cmp	r2, r3
 8001536:	d3da      	bcc.n	80014ee <ADBMS6830B_init_cfg+0x12>
		}
	}
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <ADBMS6830B_reset_crc_count>:

/* Helper Function to reset PEC counters */
void ADBMS6830B_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8001546:	b480      	push	{r7}
 8001548:	b087      	sub	sp, #28
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	6039      	str	r1, [r7, #0]
 8001550:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e053      	b.n	8001600 <ADBMS6830B_reset_crc_count+0xba>
	{
		ic[current_ic].crc_count.pec_count = 0;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	22e8      	movs	r2, #232	; 0xe8
 800155c:	fb02 f303 	mul.w	r3, r2, r3
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	4413      	add	r3, r2
 8001564:	2200      	movs	r2, #0
 8001566:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		ic[current_ic].crc_count.cfgr_pec = 0;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	22e8      	movs	r2, #232	; 0xe8
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	4413      	add	r3, r2
 8001576:	2200      	movs	r2, #0
 8001578:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		for (int i=0; i<6; i++)
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	e00e      	b.n	80015a0 <ADBMS6830B_reset_crc_count+0x5a>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	22e8      	movs	r2, #232	; 0xe8
 8001586:	fb02 f303 	mul.w	r3, r2, r3
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	441a      	add	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	3360      	adds	r3, #96	; 0x60
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	2200      	movs	r2, #0
 8001598:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<6; i++)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	3301      	adds	r3, #1
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	dded      	ble.n	8001582 <ADBMS6830B_reset_crc_count+0x3c>

		}
		for (int i=0; i<4; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	e00e      	b.n	80015ca <ADBMS6830B_reset_crc_count+0x84>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	22e8      	movs	r2, #232	; 0xe8
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	441a      	add	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3368      	adds	r3, #104	; 0x68
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	2200      	movs	r2, #0
 80015c2:	805a      	strh	r2, [r3, #2]
		for (int i=0; i<4; i++)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3301      	adds	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	dded      	ble.n	80015ac <ADBMS6830B_reset_crc_count+0x66>
		}
		for (int i=0; i<2; i++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	e00e      	b.n	80015f4 <ADBMS6830B_reset_crc_count+0xae>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	22e8      	movs	r2, #232	; 0xe8
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	441a      	add	r2, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	336c      	adds	r3, #108	; 0x6c
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	2200      	movs	r2, #0
 80015ec:	805a      	strh	r2, [r3, #2]
		for (int i=0; i<2; i++)
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3301      	adds	r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	dded      	ble.n	80015d6 <ADBMS6830B_reset_crc_count+0x90>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	429a      	cmp	r2, r3
 8001606:	dba7      	blt.n	8001558 <ADBMS6830B_reset_crc_count+0x12>
		}
	}
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <ADBMS6830B_set_cfgr>:
					 bool dcc[12], // The DCC bits
					 bool dcto[4], // The Dcto bits
					 uint16_t uv, // The UV value
					 uint16_t  ov // The OV value
					 )
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	4613      	mov	r3, r2
 8001626:	73bb      	strb	r3, [r7, #14]
	ADBMS6830B_set_cfgr_refon(nIC,ic,refon);
 8001628:	7bba      	ldrb	r2, [r7, #14]
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f828 	bl	8001684 <ADBMS6830B_set_cfgr_refon>
	ADBMS6830B_set_cfgr_cth(nIC,ic,cth);
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f856 	bl	80016ec <ADBMS6830B_set_cfgr_cth>
	ADBMS6830B_set_cfgr_gpio(nIC,ic,gpio);
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f89e 	bl	8001788 <ADBMS6830B_set_cfgr_gpio>
	ADBMS6830B_set_cfgr_dis(nIC,ic,dcc);
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f927 	bl	80018a6 <ADBMS6830B_set_cfgr_dis>
	ADBMS6830B_set_cfgr_dcto(nIC,ic,dcto);
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	6a3a      	ldr	r2, [r7, #32]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f9b0 	bl	80019c4 <ADBMS6830B_set_cfgr_dcto>
	ADBMS6830B_set_cfgr_uv(nIC, ic, uv);
 8001664:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f9f8 	bl	8001a60 <ADBMS6830B_set_cfgr_uv>
	ADBMS6830B_set_cfgr_ov(nIC, ic, ov);
 8001670:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fa38 	bl	8001aec <ADBMS6830B_set_cfgr_ov>
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <ADBMS6830B_set_cfgr_refon>:

/* Helper function to set the REFON bit */
void ADBMS6830B_set_cfgr_refon(uint8_t nIC, cell_asic *ic, bool refon)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	4613      	mov	r3, r2
 8001692:	71bb      	strb	r3, [r7, #6]
	if (refon) ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]|0x80;
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d011      	beq.n	80016be <ADBMS6830B_set_cfgr_refon+0x3a>
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	22e8      	movs	r2, #232	; 0xe8
 800169e:	fb02 f303 	mul.w	r3, r2, r3
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	4413      	add	r3, r2
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	21e8      	movs	r1, #232	; 0xe8
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	6839      	ldr	r1, [r7, #0]
 80016b2:	440b      	add	r3, r1
 80016b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]
	else ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]&0x7F;
}
 80016bc:	e010      	b.n	80016e0 <ADBMS6830B_set_cfgr_refon+0x5c>
	else ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0]&0x7F;
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	22e8      	movs	r2, #232	; 0xe8
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	4413      	add	r3, r2
 80016ca:	781a      	ldrb	r2, [r3, #0]
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	21e8      	movs	r1, #232	; 0xe8
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	6839      	ldr	r1, [r7, #0]
 80016d6:	440b      	add	r3, r1
 80016d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	701a      	strb	r2, [r3, #0]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <ADBMS6830B_set_cfgr_cth>:

/* Helper function to set CTH bits */
void ADBMS6830B_set_cfgr_cth(uint8_t nIC, cell_asic *ic, bool cth[3])
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 3; i++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e039      	b.n	8001774 <ADBMS6830B_set_cfgr_cth+0x88>
        if (cth[i]) {
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d017      	beq.n	800173c <ADBMS6830B_set_cfgr_cth+0x50>
            ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0] | (0b01 << i);
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	22e8      	movs	r2, #232	; 0xe8
 8001710:	fb02 f303 	mul.w	r3, r2, r3
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	4413      	add	r3, r2
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b25a      	sxtb	r2, r3
 800171c:	2101      	movs	r1, #1
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	b25b      	sxtb	r3, r3
 8001726:	4313      	orrs	r3, r2
 8001728:	b259      	sxtb	r1, r3
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	22e8      	movs	r2, #232	; 0xe8
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	4413      	add	r3, r2
 8001736:	b2ca      	uxtb	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e018      	b.n	800176e <ADBMS6830B_set_cfgr_cth+0x82>
        } else {
            ic[nIC].configa.tx_data[0] = ic[nIC].configa.tx_data[0] & ~(0b01 << i);
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	22e8      	movs	r2, #232	; 0xe8
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	4413      	add	r3, r2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b25a      	sxtb	r2, r3
 800174c:	2101      	movs	r1, #1
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	b25b      	sxtb	r3, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	b25b      	sxtb	r3, r3
 800175a:	4013      	ands	r3, r2
 800175c:	b259      	sxtb	r1, r3
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	22e8      	movs	r2, #232	; 0xe8
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	4413      	add	r3, r2
 800176a:	b2ca      	uxtb	r2, r1
 800176c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b02      	cmp	r3, #2
 8001778:	ddc2      	ble.n	8001700 <ADBMS6830B_set_cfgr_cth+0x14>
        }
    }
}
 800177a:	bf00      	nop
 800177c:	bf00      	nop
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <ADBMS6830B_set_cfgr_gpio>:

/* Helper function to set GPIO bits */
void ADBMS6830B_set_cfgr_gpio(uint8_t nIC, cell_asic *ic,bool gpio[10])
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	e039      	b.n	8001810 <ADBMS6830B_set_cfgr_gpio+0x88>
		if (gpio[i]) {
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d017      	beq.n	80017d8 <ADBMS6830B_set_cfgr_gpio+0x50>
            ic[nIC].configa.tx_data[3] = ic[nIC].configa.tx_data[3] | (0b01 << i);
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	22e8      	movs	r2, #232	; 0xe8
 80017ac:	fb02 f303 	mul.w	r3, r2, r3
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	4413      	add	r3, r2
 80017b4:	78db      	ldrb	r3, [r3, #3]
 80017b6:	b25a      	sxtb	r2, r3
 80017b8:	2101      	movs	r1, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b259      	sxtb	r1, r3
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	22e8      	movs	r2, #232	; 0xe8
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	4413      	add	r3, r2
 80017d2:	b2ca      	uxtb	r2, r1
 80017d4:	70da      	strb	r2, [r3, #3]
 80017d6:	e018      	b.n	800180a <ADBMS6830B_set_cfgr_gpio+0x82>
        } else {
             ic[nIC].configa.tx_data[3] = ic[nIC].configa.tx_data[3] & ~(0b01 << i);
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	22e8      	movs	r2, #232	; 0xe8
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	4413      	add	r3, r2
 80017e4:	78db      	ldrb	r3, [r3, #3]
 80017e6:	b25a      	sxtb	r2, r3
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	4013      	ands	r3, r2
 80017f8:	b259      	sxtb	r1, r3
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	22e8      	movs	r2, #232	; 0xe8
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	4413      	add	r3, r2
 8001806:	b2ca      	uxtb	r2, r1
 8001808:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < 8; i++) {
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b07      	cmp	r3, #7
 8001814:	ddc2      	ble.n	800179c <ADBMS6830B_set_cfgr_gpio+0x14>
        }
	}

    for (int i = 0; i < 2; i++) {
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	e03a      	b.n	8001892 <ADBMS6830B_set_cfgr_gpio+0x10a>
        if (gpio[i + 8]) {
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	3308      	adds	r3, #8
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d017      	beq.n	800185a <ADBMS6830B_set_cfgr_gpio+0xd2>
            ic[nIC].configa.tx_data[4] = ic[nIC].configa.tx_data[4] | (0b01 << i);
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	22e8      	movs	r2, #232	; 0xe8
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	4413      	add	r3, r2
 8001836:	791b      	ldrb	r3, [r3, #4]
 8001838:	b25a      	sxtb	r2, r3
 800183a:	2101      	movs	r1, #1
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	b25b      	sxtb	r3, r3
 8001844:	4313      	orrs	r3, r2
 8001846:	b259      	sxtb	r1, r3
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	22e8      	movs	r2, #232	; 0xe8
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	4413      	add	r3, r2
 8001854:	b2ca      	uxtb	r2, r1
 8001856:	711a      	strb	r2, [r3, #4]
 8001858:	e018      	b.n	800188c <ADBMS6830B_set_cfgr_gpio+0x104>
        } else {
             ic[nIC].configa.tx_data[4] = ic[nIC].configa.tx_data[4] & ~(0b01 << i);
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	22e8      	movs	r2, #232	; 0xe8
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	4413      	add	r3, r2
 8001866:	791b      	ldrb	r3, [r3, #4]
 8001868:	b25a      	sxtb	r2, r3
 800186a:	2101      	movs	r1, #1
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	b25b      	sxtb	r3, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	b25b      	sxtb	r3, r3
 8001878:	4013      	ands	r3, r2
 800187a:	b259      	sxtb	r1, r3
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	22e8      	movs	r2, #232	; 0xe8
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	4413      	add	r3, r2
 8001888:	b2ca      	uxtb	r2, r1
 800188a:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < 2; i++) {
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	3301      	adds	r3, #1
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b01      	cmp	r3, #1
 8001896:	ddc1      	ble.n	800181c <ADBMS6830B_set_cfgr_gpio+0x94>
        }
    }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <ADBMS6830B_set_cfgr_dis>:

/* Helper function to control discharge */
void ADBMS6830B_set_cfgr_dis(uint8_t nIC, cell_asic *ic, bool dcc[12])
{
 80018a6:	b480      	push	{r7}
 80018a8:	b087      	sub	sp, #28
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++) {
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e039      	b.n	800192e <ADBMS6830B_set_cfgr_dis+0x88>
		if (dcc[i]) {
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d017      	beq.n	80018f6 <ADBMS6830B_set_cfgr_dis+0x50>
            ic[nIC].configb.tx_data[4] = ic[nIC].configb.tx_data[4] | (0b01 << i);
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	22e8      	movs	r2, #232	; 0xe8
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	4413      	add	r3, r2
 80018d2:	7cdb      	ldrb	r3, [r3, #19]
 80018d4:	b25a      	sxtb	r2, r3
 80018d6:	2101      	movs	r1, #1
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b259      	sxtb	r1, r3
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	22e8      	movs	r2, #232	; 0xe8
 80018e8:	fb02 f303 	mul.w	r3, r2, r3
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	4413      	add	r3, r2
 80018f0:	b2ca      	uxtb	r2, r1
 80018f2:	74da      	strb	r2, [r3, #19]
 80018f4:	e018      	b.n	8001928 <ADBMS6830B_set_cfgr_dis+0x82>
        } else {
             ic[nIC].configb.tx_data[4] = ic[nIC].configb.tx_data[4] & ~(0b01 << i);
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	22e8      	movs	r2, #232	; 0xe8
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	4413      	add	r3, r2
 8001902:	7cdb      	ldrb	r3, [r3, #19]
 8001904:	b25a      	sxtb	r2, r3
 8001906:	2101      	movs	r1, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	b25b      	sxtb	r3, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	b25b      	sxtb	r3, r3
 8001914:	4013      	ands	r3, r2
 8001916:	b259      	sxtb	r1, r3
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	22e8      	movs	r2, #232	; 0xe8
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	4413      	add	r3, r2
 8001924:	b2ca      	uxtb	r2, r1
 8001926:	74da      	strb	r2, [r3, #19]
	for (int i = 0; i < 8; i++) {
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2b07      	cmp	r3, #7
 8001932:	ddc2      	ble.n	80018ba <ADBMS6830B_set_cfgr_dis+0x14>
        }
	}

    for (int i = 0; i < 8; i++) {
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	e03a      	b.n	80019b0 <ADBMS6830B_set_cfgr_dis+0x10a>
        if (dcc[i + 8]) {
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	3308      	adds	r3, #8
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d017      	beq.n	8001978 <ADBMS6830B_set_cfgr_dis+0xd2>
            ic[nIC].configb.tx_data[5] = ic[nIC].configb.tx_data[5] | (0b01 << i);
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	22e8      	movs	r2, #232	; 0xe8
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	4413      	add	r3, r2
 8001954:	7d1b      	ldrb	r3, [r3, #20]
 8001956:	b25a      	sxtb	r2, r3
 8001958:	2101      	movs	r1, #1
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	b25b      	sxtb	r3, r3
 8001962:	4313      	orrs	r3, r2
 8001964:	b259      	sxtb	r1, r3
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	22e8      	movs	r2, #232	; 0xe8
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	4413      	add	r3, r2
 8001972:	b2ca      	uxtb	r2, r1
 8001974:	751a      	strb	r2, [r3, #20]
 8001976:	e018      	b.n	80019aa <ADBMS6830B_set_cfgr_dis+0x104>
        } else {
             ic[nIC].configb.tx_data[5] = ic[nIC].configb.tx_data[5] & ~(0b01 << i);
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	22e8      	movs	r2, #232	; 0xe8
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	4413      	add	r3, r2
 8001984:	7d1b      	ldrb	r3, [r3, #20]
 8001986:	b25a      	sxtb	r2, r3
 8001988:	2101      	movs	r1, #1
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	b25b      	sxtb	r3, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	b25b      	sxtb	r3, r3
 8001996:	4013      	ands	r3, r2
 8001998:	b259      	sxtb	r1, r3
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	22e8      	movs	r2, #232	; 0xe8
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	4413      	add	r3, r2
 80019a6:	b2ca      	uxtb	r2, r1
 80019a8:	751a      	strb	r2, [r3, #20]
    for (int i = 0; i < 8; i++) {
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	3301      	adds	r3, #1
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b07      	cmp	r3, #7
 80019b4:	ddc1      	ble.n	800193a <ADBMS6830B_set_cfgr_dis+0x94>
        }
    }
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <ADBMS6830B_set_cfgr_dcto>:

/* Helper function to control discharge time value */
void ADBMS6830B_set_cfgr_dcto(uint8_t nIC, cell_asic *ic, bool dcto[4])
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 6; i++) {
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e039      	b.n	8001a4c <ADBMS6830B_set_cfgr_dcto+0x88>
		if (dcto[i]) {
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d017      	beq.n	8001a14 <ADBMS6830B_set_cfgr_dcto+0x50>
            ic[nIC].configb.tx_data[3] = ic[nIC].configb.tx_data[3] | (0b01 << i);
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	22e8      	movs	r2, #232	; 0xe8
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	4413      	add	r3, r2
 80019f0:	7c9b      	ldrb	r3, [r3, #18]
 80019f2:	b25a      	sxtb	r2, r3
 80019f4:	2101      	movs	r1, #1
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b259      	sxtb	r1, r3
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	22e8      	movs	r2, #232	; 0xe8
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b2ca      	uxtb	r2, r1
 8001a10:	749a      	strb	r2, [r3, #18]
 8001a12:	e018      	b.n	8001a46 <ADBMS6830B_set_cfgr_dcto+0x82>
        } else {
             ic[nIC].configb.tx_data[3] = ic[nIC].configb.tx_data[3] & ~(0b01 << i);
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	22e8      	movs	r2, #232	; 0xe8
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	4413      	add	r3, r2
 8001a20:	7c9b      	ldrb	r3, [r3, #18]
 8001a22:	b25a      	sxtb	r2, r3
 8001a24:	2101      	movs	r1, #1
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	4013      	ands	r3, r2
 8001a34:	b259      	sxtb	r1, r3
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	22e8      	movs	r2, #232	; 0xe8
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	4413      	add	r3, r2
 8001a42:	b2ca      	uxtb	r2, r1
 8001a44:	749a      	strb	r2, [r3, #18]
	for (int i = 0; i < 6; i++) {
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	ddc2      	ble.n	80019d8 <ADBMS6830B_set_cfgr_dcto+0x14>
        }
	}
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <ADBMS6830B_set_cfgr_uv>:

/* Helper Function to set UV value in CFG register */
void ADBMS6830B_set_cfgr_uv(uint8_t nIC, cell_asic *ic, uint16_t uv)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (uv / 16) - 1;
 8001a70:	88bb      	ldrh	r3, [r7, #4]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3b01      	subs	r3, #1
 8001a78:	81fb      	strh	r3, [r7, #14]
	ic[nIC].configb.tx_data[0] = 0x00FF & tmp;
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	22e8      	movs	r2, #232	; 0xe8
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	89fa      	ldrh	r2, [r7, #14]
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	73da      	strb	r2, [r3, #15]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] & 0xF0;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	22e8      	movs	r2, #232	; 0xe8
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	7c1a      	ldrb	r2, [r3, #16]
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	21e8      	movs	r1, #232	; 0xe8
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	6839      	ldr	r1, [r7, #0]
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f022 020f 	bic.w	r2, r2, #15
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	741a      	strb	r2, [r3, #16]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] | ((0x0F00 & tmp) >> 8);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	22e8      	movs	r2, #232	; 0xe8
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	4413      	add	r3, r2
 8001aba:	7c1b      	ldrb	r3, [r3, #16]
 8001abc:	b25a      	sxtb	r2, r3
 8001abe:	89fb      	ldrh	r3, [r7, #14]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	b25b      	sxtb	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b259      	sxtb	r1, r3
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	22e8      	movs	r2, #232	; 0xe8
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	b2ca      	uxtb	r2, r1
 8001ade:	741a      	strb	r2, [r3, #16]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <ADBMS6830B_set_cfgr_ov>:

/* Helper function to set OV value in CFG register */
void ADBMS6830B_set_cfgr_ov(uint8_t nIC, cell_asic *ic, uint16_t ov)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
 8001af8:	4613      	mov	r3, r2
 8001afa:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = (ov / 16);
 8001afc:	88bb      	ldrh	r3, [r7, #4]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	81fb      	strh	r3, [r7, #14]
	ic[nIC].configb.tx_data[2] = 0x00FF & (tmp >> 4);
 8001b02:	89fb      	ldrh	r3, [r7, #14]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	b299      	uxth	r1, r3
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	22e8      	movs	r2, #232	; 0xe8
 8001b0c:	fb02 f303 	mul.w	r3, r2, r3
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	b2ca      	uxtb	r2, r1
 8001b16:	745a      	strb	r2, [r3, #17]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] & 0x0F;
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	22e8      	movs	r2, #232	; 0xe8
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	7c1a      	ldrb	r2, [r3, #16]
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	21e8      	movs	r1, #232	; 0xe8
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	6839      	ldr	r1, [r7, #0]
 8001b30:	440b      	add	r3, r1
 8001b32:	f002 020f 	and.w	r2, r2, #15
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	741a      	strb	r2, [r3, #16]
	ic[nIC].configb.tx_data[1] = ic[nIC].configb.tx_data[1] | ((0x000F & tmp) << 4);
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	22e8      	movs	r2, #232	; 0xe8
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	7c1b      	ldrb	r3, [r3, #16]
 8001b48:	b25a      	sxtb	r2, r3
 8001b4a:	89fb      	ldrh	r3, [r7, #14]
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b259      	sxtb	r1, r3
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	22e8      	movs	r2, #232	; 0xe8
 8001b58:	fb02 f303 	mul.w	r3, r2, r3
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	b2ca      	uxtb	r2, r1
 8001b62:	741a      	strb	r2, [r3, #16]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <ADBMS6830B_init_reg_limits>:

/* Initialize the Register limits */
void ADBMS6830B_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e038      	b.n	8001bf4 <ADBMS6830B_init_reg_limits+0x84>
    ic[cic].ic_reg.cell_channels = 20;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	22e8      	movs	r2, #232	; 0xe8
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	2214      	movs	r2, #20
 8001b90:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
    ic[cic].ic_reg.stat_channels = 4; //Doesn't matter?
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	22e8      	movs	r2, #232	; 0xe8
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
    ic[cic].ic_reg.aux_channels = 6; //Doesn't matter?
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	22e8      	movs	r2, #232	; 0xe8
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	2206      	movs	r2, #6
 8001bb4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    ic[cic].ic_reg.num_cv_reg = 6;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	22e8      	movs	r2, #232	; 0xe8
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	2206      	movs	r2, #6
 8001bc6:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    ic[cic].ic_reg.num_gpio_reg = 4;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	22e8      	movs	r2, #232	; 0xe8
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
    ic[cic].ic_reg.num_stat_reg = 5;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	22e8      	movs	r2, #232	; 0xe8
 8001be0:	fb02 f303 	mul.w	r3, r2, r3
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	2205      	movs	r2, #5
 8001bea:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3c2      	bcc.n	8001b82 <ADBMS6830B_init_reg_limits+0x12>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <ADBMS6830B_adcv>:
				   uint8_t DCP, //Discharge Permit
				   uint8_t CONT, //Cell Channels to be measured
				   uint8_t RSTF, //Reset Filter
				   uint8_t OW //Open-wire bits
                 )
{
 8001c0a:	b590      	push	{r4, r7, lr}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4604      	mov	r4, r0
 8001c12:	4608      	mov	r0, r1
 8001c14:	4611      	mov	r1, r2
 8001c16:	461a      	mov	r2, r3
 8001c18:	4623      	mov	r3, r4
 8001c1a:	71fb      	strb	r3, [r7, #7]
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71bb      	strb	r3, [r7, #6]
 8001c20:	460b      	mov	r3, r1
 8001c22:	717b      	strb	r3, [r7, #5]
 8001c24:	4613      	mov	r3, r2
 8001c26:	713b      	strb	r3, [r7, #4]
	uint8_t cmd[2];

	cmd[0] = 0x02 + RD;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x60 | (CONT << 7) | (DCP << 4) | (RSTF << 2) | OW;
 8001c30:	797b      	ldrb	r3, [r7, #5]
 8001c32:	01db      	lsls	r3, r3, #7
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c3a:	b25a      	sxtb	r2, r3
 8001c3c:	79bb      	ldrb	r3, [r7, #6]
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b25a      	sxtb	r2, r3
 8001c46:	793b      	ldrb	r3, [r7, #4]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	b25b      	sxtb	r3, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b25a      	sxtb	r2, r3
 8001c50:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 fbb1 	bl	80023c8 <cmd_68>
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd90      	pop	{r4, r7, pc}
	...

08001c70 <ADBMS6830B_pollAdc>:

/* This function will block operation until the ADC has finished it's conversion */
uint32_t ADBMS6830B_pollAdc()
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001c82:	2307      	movs	r3, #7
 8001c84:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x18;
 8001c86:	2318      	movs	r3, #24
 8001c88:	717b      	strb	r3, [r7, #5]
	cmd_pec = pec15_calc(2, cmd);
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f000 fb30 	bl	80022f4 <pec15_calc>
 8001c94:	4603      	mov	r3, r0
 8001c96:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001c98:	893b      	ldrh	r3, [r7, #8]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8001ca2:	893b      	ldrh	r3, [r7, #8]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	71fb      	strb	r3, [r7, #7]

	FEB_cs_low();
 8001ca8:	f000 fe16 	bl	80028d8 <FEB_cs_low>
	FEB_spi_write_array(4, cmd);
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	4619      	mov	r1, r3
 8001cb0:	2004      	movs	r0, #4
 8001cb2:	f000 fe29 	bl	8002908 <FEB_spi_write_array>
	while ((counter < 200000) && (finished == 0))
 8001cb6:	e00d      	b.n	8001cd4 <ADBMS6830B_pollAdc+0x64>
	{
		current_time = FEB_spi_read_byte(0xff);
 8001cb8:	20ff      	movs	r0, #255	; 0xff
 8001cba:	f000 fe6f 	bl	800299c <FEB_spi_read_byte>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0)
 8001cc2:	7abb      	ldrb	r3, [r7, #10]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <ADBMS6830B_pollAdc+0x5e>
		{
			finished = 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	72fb      	strb	r3, [r7, #11]
 8001ccc:	e002      	b.n	8001cd4 <ADBMS6830B_pollAdc+0x64>
		}
		else
		{
			counter = counter + 10;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	330a      	adds	r3, #10
 8001cd2:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <ADBMS6830B_pollAdc+0x80>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d802      	bhi.n	8001ce2 <ADBMS6830B_pollAdc+0x72>
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0ea      	beq.n	8001cb8 <ADBMS6830B_pollAdc+0x48>
		}
	}
	FEB_cs_high();
 8001ce2:	f000 fe05 	bl	80028f0 <FEB_cs_high>

	return(counter);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	00030d3f 	.word	0x00030d3f

08001cf4 <ADBMS6830B_rdcv>:
and store the cell voltages in c_codes variable.
*/
uint8_t ADBMS6830B_rdcv(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b08b      	sub	sp, #44	; 0x2c
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 8001d00:	2308      	movs	r3, #8
 8001d02:	75fb      	strb	r3, [r7, #23]

	int8_t pec_error = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	77fb      	strb	r3, [r7, #31]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	77bb      	strb	r3, [r7, #30]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 fa4f 	bl	80061b4 <malloc>
 8001d16:	4603      	mov	r3, r0
 8001d18:	613b      	str	r3, [r7, #16]

	for (uint8_t cell_reg = 1; cell_reg <= ic[0].ic_reg.num_cv_reg; cell_reg++) {
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	777b      	strb	r3, [r7, #29]
 8001d1e:	e08b      	b.n	8001e38 <ADBMS6830B_rdcv+0x144>
		uint8_t cmd[4];
		switch(cell_reg) {
 8001d20:	7f7b      	ldrb	r3, [r7, #29]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d82d      	bhi.n	8001d84 <ADBMS6830B_rdcv+0x90>
 8001d28:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <ADBMS6830B_rdcv+0x3c>)
 8001d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2e:	bf00      	nop
 8001d30:	08001d49 	.word	0x08001d49
 8001d34:	08001d53 	.word	0x08001d53
 8001d38:	08001d5d 	.word	0x08001d5d
 8001d3c:	08001d67 	.word	0x08001d67
 8001d40:	08001d71 	.word	0x08001d71
 8001d44:	08001d7b 	.word	0x08001d7b
			case 1: //Reg A
				cmd[0] = 0x00;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x04;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	727b      	strb	r3, [r7, #9]
				break;
 8001d50:	e018      	b.n	8001d84 <ADBMS6830B_rdcv+0x90>
			case 2: //Reg B
				cmd[0] = 0x00;
 8001d52:	2300      	movs	r3, #0
 8001d54:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x06;
 8001d56:	2306      	movs	r3, #6
 8001d58:	727b      	strb	r3, [r7, #9]
				break;
 8001d5a:	e013      	b.n	8001d84 <ADBMS6830B_rdcv+0x90>
			case 3: //Reg C
				cmd[0] = 0x00;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x08;
 8001d60:	2308      	movs	r3, #8
 8001d62:	727b      	strb	r3, [r7, #9]
				break;
 8001d64:	e00e      	b.n	8001d84 <ADBMS6830B_rdcv+0x90>
			case 4: //Reg D
				cmd[0] = 0x00;
 8001d66:	2300      	movs	r3, #0
 8001d68:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x0A;
 8001d6a:	230a      	movs	r3, #10
 8001d6c:	727b      	strb	r3, [r7, #9]
				break;
 8001d6e:	e009      	b.n	8001d84 <ADBMS6830B_rdcv+0x90>
			case 5: //Reg E
				cmd[0] = 0x00;
 8001d70:	2300      	movs	r3, #0
 8001d72:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x09;
 8001d74:	2309      	movs	r3, #9
 8001d76:	727b      	strb	r3, [r7, #9]
				break;
 8001d78:	e004      	b.n	8001d84 <ADBMS6830B_rdcv+0x90>
			case 6: //Reg F
				cmd[0] = 0x00;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x0B;
 8001d7e:	230b      	movs	r3, #11
 8001d80:	727b      	strb	r3, [r7, #9]
				break;
 8001d82:	bf00      	nop
		}
		uint16_t cmd_pec = pec15_calc(2, cmd);
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f000 fab2 	bl	80022f4 <pec15_calc>
 8001d90:	4603      	mov	r3, r0
 8001d92:	81fb      	strh	r3, [r7, #14]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(cmd_pec);
 8001d9e:	89fb      	ldrh	r3, [r7, #14]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	72fb      	strb	r3, [r7, #11]
		FEB_cs_low();
 8001da4:	f000 fd98 	bl	80028d8 <FEB_cs_low>
		FEB_spi_write_read(cmd, 4, cell_data, (REG_LEN * total_ic));
 8001da8:	7dfa      	ldrb	r2, [r7, #23]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	fb12 f303 	smulbb	r3, r2, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f107 0008 	add.w	r0, r7, #8
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	2104      	movs	r1, #4
 8001dba:	f000 fdb9 	bl	8002930 <FEB_spi_write_read>
		FEB_cs_high();
 8001dbe:	f000 fd97 	bl	80028f0 <FEB_cs_high>

		//parse data
		for (int curr_ic = 0; curr_ic < total_ic; curr_ic++) {
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	e030      	b.n	8001e2a <ADBMS6830B_rdcv+0x136>
			if (ic->isospi_reverse == false) {
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8001dce:	f083 0301 	eor.w	r3, r3, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <ADBMS6830B_rdcv+0xea>
				c_ic = curr_ic;
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	77bb      	strb	r3, [r7, #30]
 8001ddc:	e006      	b.n	8001dec <ADBMS6830B_rdcv+0xf8>
			} else {
				c_ic = total_ic - curr_ic - 1;
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	79fa      	ldrb	r2, [r7, #7]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	3b01      	subs	r3, #1
 8001dea:	77bb      	strb	r3, [r7, #30]
			}
			pec_error += parse_cells(c_ic, cell_reg, cell_data, &ic[c_ic].cells.c_codes[0], &ic[c_ic].cells.pec_match[0]);
 8001dec:	7fbb      	ldrb	r3, [r7, #30]
 8001dee:	22e8      	movs	r2, #232	; 0xe8
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	f103 041e 	add.w	r4, r3, #30
 8001dfc:	7fbb      	ldrb	r3, [r7, #30]
 8001dfe:	22e8      	movs	r2, #232	; 0xe8
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	3342      	adds	r3, #66	; 0x42
 8001e0a:	7f79      	ldrb	r1, [r7, #29]
 8001e0c:	7fb8      	ldrb	r0, [r7, #30]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4623      	mov	r3, r4
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	f000 f826 	bl	8001e64 <parse_cells>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	7ffb      	ldrb	r3, [r7, #31]
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	77fb      	strb	r3, [r7, #31]
		for (int curr_ic = 0; curr_ic < total_ic; curr_ic++) {
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	3301      	adds	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	dbca      	blt.n	8001dc8 <ADBMS6830B_rdcv+0xd4>
	for (uint8_t cell_reg = 1; cell_reg <= ic[0].ic_reg.num_cv_reg; cell_reg++) {
 8001e32:	7f7b      	ldrb	r3, [r7, #29]
 8001e34:	3301      	adds	r3, #1
 8001e36:	777b      	strb	r3, [r7, #29]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001e3e:	7f7a      	ldrb	r2, [r7, #29]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f67f af6d 	bls.w	8001d20 <ADBMS6830B_rdcv+0x2c>
		}
	}

	ADBMS6830B_check_pec(total_ic, CELL, ic);
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fb8d 	bl	800256c <ADBMS6830B_check_pec>
	free(cell_data);
 8001e52:	6938      	ldr	r0, [r7, #16]
 8001e54:	f004 f9b6 	bl	80061c4 <free>
	return(pec_error);
 8001e58:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	bf00      	nop

08001e64 <parse_cells>:
					uint8_t cell_reg,  // Type of register
					uint8_t cell_data[], // Unparsed data
					uint16_t *cell_codes, // Parsed data
					uint8_t *ic_pec // PEC error
					)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60ba      	str	r2, [r7, #8]
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
 8001e72:	460b      	mov	r3, r1
 8001e74:	73bb      	strb	r3, [r7, #14]
	const uint8_t BYT_IN_REG = 6;
 8001e76:	2306      	movs	r3, #6
 8001e78:	773b      	strb	r3, [r7, #28]
	const uint8_t CELL_IN_REG = 3;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	76fb      	strb	r3, [r7, #27]
	int8_t pec_error = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = current_ic * NUM_RX_BYT; //data counter
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	77bb      	strb	r3, [r7, #30]


	for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8001e88:	2300      	movs	r3, #0
 8001e8a:	777b      	strb	r3, [r7, #29]
 8001e8c:	e020      	b.n	8001ed0 <parse_cells+0x6c>
	{																		// loops once for each of the 3 codes in the register

		parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);//Each code is received as two bytes and is combined to
 8001e8e:	7fbb      	ldrb	r3, [r7, #30]
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	7fbb      	ldrb	r3, [r7, #30]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	440b      	add	r3, r1
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	82bb      	strh	r3, [r7, #20]
																				   // create the parsed code
		cell_codes[current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001eac:	7f7a      	ldrb	r2, [r7, #29]
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	7ef9      	ldrb	r1, [r7, #27]
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	8aba      	ldrh	r2, [r7, #20]
 8001ec2:	801a      	strh	r2, [r3, #0]

		data_counter = data_counter + 2;                       //Because the codes are two bytes, the data counter
 8001ec4:	7fbb      	ldrb	r3, [r7, #30]
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	77bb      	strb	r3, [r7, #30]
	for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++) // This loop parses the read back data into the register codes, it
 8001eca:	7f7b      	ldrb	r3, [r7, #29]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	777b      	strb	r3, [r7, #29]
 8001ed0:	7f7a      	ldrb	r2, [r7, #29]
 8001ed2:	7efb      	ldrb	r3, [r7, #27]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d3da      	bcc.n	8001e8e <parse_cells+0x2a>
															  //must increment by two for each parsed code
	}
	received_pec = ((cell_data[data_counter] & 0x03) << 8) | cell_data[data_counter + 1]; //The received PEC for the current_ic is transmitted as the 7th and 8th
 8001ed8:	7fbb      	ldrb	r3, [r7, #30]
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	4413      	add	r3, r2
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee8:	b21a      	sxth	r2, r3
 8001eea:	7fbb      	ldrb	r3, [r7, #30]
 8001eec:	3301      	adds	r3, #1
 8001eee:	68b9      	ldr	r1, [r7, #8]
 8001ef0:	440b      	add	r3, r1
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	833b      	strh	r3, [r7, #24]
																			   //after the 6 cell voltage data bytes. Command counter is first 6 bits of first byte, which we don't care bout, so we do & 0x03
	data_pec = pec10_calc(BYT_IN_REG, &cell_data[(current_ic) * NUM_RX_BYT]);
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	461a      	mov	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	441a      	add	r2, r3
 8001f06:	7f3b      	ldrb	r3, [r7, #28]
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fa26 	bl	800235c <pec10_calc>
 8001f10:	4603      	mov	r3, r0
 8001f12:	82fb      	strh	r3, [r7, #22]

	if (received_pec != data_pec)
 8001f14:	8b3a      	ldrh	r2, [r7, #24]
 8001f16:	8afb      	ldrh	r3, [r7, #22]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d008      	beq.n	8001f2e <parse_cells+0xca>
	{
		pec_error = 1;                             //The pec_error variable is simply set negative if any PEC errors
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	77fb      	strb	r3, [r7, #31]
		ic_pec[cell_reg-1]=1;
 8001f20:	7bbb      	ldrb	r3, [r7, #14]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f26:	4413      	add	r3, r2
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
 8001f2c:	e005      	b.n	8001f3a <parse_cells+0xd6>
	}
	else
	{
		ic_pec[cell_reg-1]=0;
 8001f2e:	7bbb      	ldrb	r3, [r7, #14]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f34:	4413      	add	r3, r2
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
	}
	data_counter=data_counter+2;
 8001f3a:	7fbb      	ldrb	r3, [r7, #30]
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	77bb      	strb	r3, [r7, #30]

	return(pec_error);
 8001f40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <ADBMS6830B_wrcfga>:

/* Write the ADBMS6830B CFGRA */
void ADBMS6830B_wrcfga(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0c4      	sub	sp, #272	; 0x110
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4602      	mov	r2, r0
 8001f54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f5c:	6019      	str	r1, [r3, #0]
 8001f5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f62:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001f66:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x01} ;
 8001f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f6c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8001f82:	e048      	b.n	8002016 <ADBMS6830B_wrcfga+0xca>
	{
		if (ic->isospi_reverse == false)
 8001f84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8001f92:	f083 0301 	eor.w	r3, r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d004      	beq.n	8001fa6 <ADBMS6830B_wrcfga+0x5a>
		{
			c_ic = current_ic;
 8001f9c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001fa0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 8001fa4:	e00b      	b.n	8001fbe <ADBMS6830B_wrcfga+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 8001fa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001faa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8001fc4:	e01e      	b.n	8002004 <ADBMS6830B_wrcfga+0xb8>
		{
			write_buffer[write_count] = ic[c_ic].configa.tx_data[data];
 8001fc6:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001fca:	22e8      	movs	r2, #232	; 0xe8
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001fd4:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	18d1      	adds	r1, r2, r3
 8001fdc:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8001fe0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001fe4:	5c89      	ldrb	r1, [r1, r2]
 8001fe6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001fea:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8001fee:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8001ff0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 8001ffa:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8001ffe:	3301      	adds	r3, #1
 8002000:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002004:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002008:	2b05      	cmp	r3, #5
 800200a:	d9dc      	bls.n	8001fc6 <ADBMS6830B_wrcfga+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 800200c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002010:	3301      	adds	r3, #1
 8002012:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002016:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800201a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800201e:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d3ad      	bcc.n	8001f84 <ADBMS6830B_wrcfga+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002028:	f107 0208 	add.w	r2, r7, #8
 800202c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002030:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002034:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f9ec 	bl	8002418 <write_68>
}
 8002040:	bf00      	nop
 8002042:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <ADBMS6830B_wrcfgb>:

/* Write the ADBMS6830B CFGRB */
void ADBMS6830B_wrcfgb(uint8_t total_ic, //The number of ICs being written to
                    cell_asic ic[] // A two dimensional array of the configuration data that will be written
                   )
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b0c4      	sub	sp, #272	; 0x110
 800204e:	af00      	add	r7, sp, #0
 8002050:	4602      	mov	r2, r0
 8002052:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002056:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800205a:	6019      	str	r1, [r3, #0]
 800205c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002060:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002064:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[2] = {0x00 , 0x24} ;
 8002066:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800206a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t c_ic = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 800207a:	2300      	movs	r3, #0
 800207c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002080:	e049      	b.n	8002116 <ADBMS6830B_wrcfgb+0xcc>
	{
		if (ic->isospi_reverse == false)
 8002082:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002086:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002090:	f083 0301 	eor.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <ADBMS6830B_wrcfgb+0x5a>
		{
			c_ic = current_ic;
 800209a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800209e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
 80020a2:	e00b      	b.n	80020bc <ADBMS6830B_wrcfgb+0x72>
		}
		else
		{
			c_ic = total_ic - current_ic - 1;
 80020a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020a8:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		}

		for (uint8_t data = 0; data<6; data++)
 80020bc:	2300      	movs	r3, #0
 80020be:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 80020c2:	e01f      	b.n	8002104 <ADBMS6830B_wrcfgb+0xba>
		{
			write_buffer[write_count] = ic[c_ic].configb.tx_data[data];
 80020c4:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80020c8:	22e8      	movs	r2, #232	; 0xe8
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020d2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	18d1      	adds	r1, r2, r3
 80020da:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80020de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80020e2:	440a      	add	r2, r1
 80020e4:	7bd1      	ldrb	r1, [r2, #15]
 80020e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020ea:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80020ee:	54d1      	strb	r1, [r2, r3]
			write_count++;
 80020f0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80020f4:	3301      	adds	r3, #1
 80020f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint8_t data = 0; data<6; data++)
 80020fa:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80020fe:	3301      	adds	r3, #1
 8002100:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8002104:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002108:	2b05      	cmp	r3, #5
 800210a:	d9db      	bls.n	80020c4 <ADBMS6830B_wrcfgb+0x7a>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 800210c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002110:	3301      	adds	r3, #1
 8002112:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8002116:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800211a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800211e:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d3ac      	bcc.n	8002082 <ADBMS6830B_wrcfgb+0x38>
		}
	}
	write_68(total_ic, cmd, write_buffer);
 8002128:	f107 0208 	add.w	r2, r7, #8
 800212c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002130:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002134:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f96c 	bl	8002418 <write_68>
}
 8002140:	bf00      	nop
 8002142:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <ADBMS6830B_adax>:
/* Start ADC Conversion for GPIO and Vref2  */
void ADBMS6830B_adax(uint8_t OW, //Open Wire Detection
				  uint8_t PUP, //Pull up/pull down current sources during measurement
				  uint8_t CH //GPIO Channels to be measured
				  )
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	71fb      	strb	r3, [r7, #7]
 8002154:	460b      	mov	r3, r1
 8002156:	71bb      	strb	r3, [r7, #6]
 8002158:	4613      	mov	r3, r2
 800215a:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];

	cmd[0] = OW + 0x04;
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	3304      	adds	r3, #4
 8002160:	b2db      	uxtb	r3, r3
 8002162:	733b      	strb	r3, [r7, #12]
	cmd[1] = (PUP << 7) + ((CH & 0x10) << 2) + (CH & 0xF) + 0x10;
 8002164:	79bb      	ldrb	r3, [r7, #6]
 8002166:	01db      	lsls	r3, r3, #7
 8002168:	b2da      	uxtb	r2, r3
 800216a:	797b      	ldrb	r3, [r7, #5]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002174:	b2db      	uxtb	r3, r3
 8002176:	4413      	add	r3, r2
 8002178:	b2da      	uxtb	r2, r3
 800217a:	797b      	ldrb	r3, [r7, #5]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	b2db      	uxtb	r3, r3
 8002182:	4413      	add	r3, r2
 8002184:	b2db      	uxtb	r3, r3
 8002186:	3310      	adds	r3, #16
 8002188:	b2db      	uxtb	r3, r3
 800218a:	737b      	strb	r3, [r7, #13]

	cmd_68(cmd);
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f919 	bl	80023c8 <cmd_68>
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <ADBMS6830B_rdaux>:
*/

uint8_t ADBMS6830B_rdaux(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b08b      	sub	sp, #44	; 0x2c
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
	const uint8_t REG_LEN = 8; //Number of bytes in each ICs register + 2 bytes for the PEC
 80021ac:	2308      	movs	r3, #8
 80021ae:	75fb      	strb	r3, [r7, #23]

	int8_t pec_error = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	77fb      	strb	r3, [r7, #31]
	uint8_t *cell_data;
	uint8_t c_ic = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	77bb      	strb	r3, [r7, #30]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT * total_ic) * sizeof(uint8_t));
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 fff9 	bl	80061b4 <malloc>
 80021c2:	4603      	mov	r3, r0
 80021c4:	613b      	str	r3, [r7, #16]

	for (uint8_t cell_reg = 1; cell_reg <= ic[0].ic_reg.num_cv_reg; cell_reg++) {
 80021c6:	2301      	movs	r3, #1
 80021c8:	777b      	strb	r3, [r7, #29]
 80021ca:	e07d      	b.n	80022c8 <ADBMS6830B_rdaux+0x128>
		uint8_t cmd[4];
		switch(cell_reg) {
 80021cc:	7f7b      	ldrb	r3, [r7, #29]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d81f      	bhi.n	8002214 <ADBMS6830B_rdaux+0x74>
 80021d4:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <ADBMS6830B_rdaux+0x3c>)
 80021d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021da:	bf00      	nop
 80021dc:	080021ed 	.word	0x080021ed
 80021e0:	080021f7 	.word	0x080021f7
 80021e4:	08002201 	.word	0x08002201
 80021e8:	0800220b 	.word	0x0800220b
			case 1: //Reg A
				cmd[0] = 0x00;
 80021ec:	2300      	movs	r3, #0
 80021ee:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x19;
 80021f0:	2319      	movs	r3, #25
 80021f2:	727b      	strb	r3, [r7, #9]
				break;
 80021f4:	e00e      	b.n	8002214 <ADBMS6830B_rdaux+0x74>
			case 2: //Reg B
				cmd[0] = 0x00;
 80021f6:	2300      	movs	r3, #0
 80021f8:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1A;
 80021fa:	231a      	movs	r3, #26
 80021fc:	727b      	strb	r3, [r7, #9]
				break;
 80021fe:	e009      	b.n	8002214 <ADBMS6830B_rdaux+0x74>
			case 3: //Reg C
				cmd[0] = 0x00;
 8002200:	2300      	movs	r3, #0
 8002202:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1B;
 8002204:	231b      	movs	r3, #27
 8002206:	727b      	strb	r3, [r7, #9]
				break;
 8002208:	e004      	b.n	8002214 <ADBMS6830B_rdaux+0x74>
			case 4: //Reg D
				cmd[0] = 0x00;
 800220a:	2300      	movs	r3, #0
 800220c:	723b      	strb	r3, [r7, #8]
				cmd[1] = 0x1F;
 800220e:	231f      	movs	r3, #31
 8002210:	727b      	strb	r3, [r7, #9]
				break;
 8002212:	bf00      	nop
		}
		uint16_t cmd_pec = pec15_calc(2, cmd);
 8002214:	f107 0308 	add.w	r3, r7, #8
 8002218:	4619      	mov	r1, r3
 800221a:	2002      	movs	r0, #2
 800221c:	f000 f86a 	bl	80022f4 <pec15_calc>
 8002220:	4603      	mov	r3, r0
 8002222:	81fb      	strh	r3, [r7, #14]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	b29b      	uxth	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(cmd_pec);
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	72fb      	strb	r3, [r7, #11]
		FEB_cs_low();
 8002234:	f000 fb50 	bl	80028d8 <FEB_cs_low>
		FEB_spi_write_read(cmd, 4, cell_data, (REG_LEN * total_ic));
 8002238:	7dfa      	ldrb	r2, [r7, #23]
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	fb12 f303 	smulbb	r3, r2, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f107 0008 	add.w	r0, r7, #8
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	2104      	movs	r1, #4
 800224a:	f000 fb71 	bl	8002930 <FEB_spi_write_read>
		FEB_cs_high();
 800224e:	f000 fb4f 	bl	80028f0 <FEB_cs_high>

		//parse data
		for (int curr_ic = 0; curr_ic < total_ic; curr_ic++) {
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e030      	b.n	80022ba <ADBMS6830B_rdaux+0x11a>
			if (ic->isospi_reverse == false) {
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800225e:	f083 0301 	eor.w	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <ADBMS6830B_rdaux+0xce>
				c_ic = curr_ic;
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	77bb      	strb	r3, [r7, #30]
 800226c:	e006      	b.n	800227c <ADBMS6830B_rdaux+0xdc>
			} else {
				c_ic = total_ic - curr_ic - 1;
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	79fa      	ldrb	r2, [r7, #7]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	77bb      	strb	r3, [r7, #30]
			}
			pec_error += parse_cells(c_ic, cell_reg, cell_data, &ic[c_ic].aux.a_codes[0], &ic[c_ic].aux.pec_match[0]);
 800227c:	7fbb      	ldrb	r3, [r7, #30]
 800227e:	22e8      	movs	r2, #232	; 0xe8
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	4413      	add	r3, r2
 8002288:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800228c:	7fbb      	ldrb	r3, [r7, #30]
 800228e:	22e8      	movs	r2, #232	; 0xe8
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	4413      	add	r3, r2
 8002298:	335c      	adds	r3, #92	; 0x5c
 800229a:	7f79      	ldrb	r1, [r7, #29]
 800229c:	7fb8      	ldrb	r0, [r7, #30]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	4623      	mov	r3, r4
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	f7ff fdde 	bl	8001e64 <parse_cells>
 80022a8:	4603      	mov	r3, r0
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	7ffb      	ldrb	r3, [r7, #31]
 80022ae:	4413      	add	r3, r2
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	77fb      	strb	r3, [r7, #31]
		for (int curr_ic = 0; curr_ic < total_ic; curr_ic++) {
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	3301      	adds	r3, #1
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	429a      	cmp	r2, r3
 80022c0:	dbca      	blt.n	8002258 <ADBMS6830B_rdaux+0xb8>
	for (uint8_t cell_reg = 1; cell_reg <= ic[0].ic_reg.num_cv_reg; cell_reg++) {
 80022c2:	7f7b      	ldrb	r3, [r7, #29]
 80022c4:	3301      	adds	r3, #1
 80022c6:	777b      	strb	r3, [r7, #29]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80022ce:	7f7a      	ldrb	r2, [r7, #29]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f67f af7b 	bls.w	80021cc <ADBMS6830B_rdaux+0x2c>
		}
	}

	ADBMS6830B_check_pec(total_ic, CELL, ic);
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	2102      	movs	r1, #2
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 f945 	bl	800256c <ADBMS6830B_check_pec>
	free(cell_data);
 80022e2:	6938      	ldr	r0, [r7, #16]
 80022e4:	f003 ff6e 	bl	80061c4 <free>
	return(pec_error);
 80022e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3724      	adds	r7, #36	; 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd90      	pop	{r4, r7, pc}
 80022f2:	bf00      	nop

080022f4 <pec15_calc>:

/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8002300:	2310      	movs	r3, #16
 8002302:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8002304:	2300      	movs	r3, #0
 8002306:	737b      	strb	r3, [r7, #13]
 8002308:	e019      	b.n	800233e <pec15_calc+0x4a>
	{
		addr = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	09db      	lsrs	r3, r3, #7
 800230e:	b29a      	uxth	r2, r3
 8002310:	7b7b      	ldrb	r3, [r7, #13]
 8002312:	6839      	ldr	r1, [r7, #0]
 8002314:	440b      	add	r3, r1
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	4053      	eors	r3, r2
 800231c:	b29b      	uxth	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8002322:	89fb      	ldrh	r3, [r7, #14]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	b21a      	sxth	r2, r3
 8002328:	897b      	ldrh	r3, [r7, #10]
 800232a:	490b      	ldr	r1, [pc, #44]	; (8002358 <pec15_calc+0x64>)
 800232c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002330:	b21b      	sxth	r3, r3
 8002332:	4053      	eors	r3, r2
 8002334:	b21b      	sxth	r3, r3
 8002336:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8002338:	7b7b      	ldrb	r3, [r7, #13]
 800233a:	3301      	adds	r3, #1
 800233c:	737b      	strb	r3, [r7, #13]
 800233e:	7b7a      	ldrb	r2, [r7, #13]
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	429a      	cmp	r2, r3
 8002344:	d3e1      	bcc.n	800230a <pec15_calc+0x16>
	}

	return(remainder * 2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002346:	89fb      	ldrh	r3, [r7, #14]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	b29b      	uxth	r3, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	08008960 	.word	0x08008960

0800235c <pec10_calc>:

/* Calculates  and returns the CRC10 */
uint16_t pec10_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8002368:	2310      	movs	r3, #16
 800236a:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 800236c:	2300      	movs	r3, #0
 800236e:	737b      	strb	r3, [r7, #13]
 8002370:	e01d      	b.n	80023ae <pec10_calc+0x52>
	{
		addr = ((remainder >> 2) ^ data[i]) & 0xff;//calculate PEC table address
 8002372:	89fb      	ldrh	r3, [r7, #14]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	b29a      	uxth	r2, r3
 8002378:	7b7b      	ldrb	r3, [r7, #13]
 800237a:	6839      	ldr	r1, [r7, #0]
 800237c:	440b      	add	r3, r1
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	4053      	eors	r3, r2
 8002384:	b29b      	uxth	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc10Table[addr];
 800238a:	89fb      	ldrh	r3, [r7, #14]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	b21a      	sxth	r2, r3
 8002390:	897b      	ldrh	r3, [r7, #10]
 8002392:	490c      	ldr	r1, [pc, #48]	; (80023c4 <pec10_calc+0x68>)
 8002394:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002398:	b21b      	sxth	r3, r3
 800239a:	4053      	eors	r3, r2
 800239c:	b21b      	sxth	r3, r3
 800239e:	81fb      	strh	r3, [r7, #14]
		remainder &= 0x3FF; //Ensure remainder stays within 10 bits
 80023a0:	89fb      	ldrh	r3, [r7, #14]
 80023a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a6:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80023a8:	7b7b      	ldrb	r3, [r7, #13]
 80023aa:	3301      	adds	r3, #1
 80023ac:	737b      	strb	r3, [r7, #13]
 80023ae:	7b7a      	ldrb	r2, [r7, #13]
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d3dd      	bcc.n	8002372 <pec10_calc+0x16>
	}

	return(remainder); // No 0 in LSB
 80023b6:	89fb      	ldrh	r3, [r7, #14]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	08008b60 	.word	0x08008b60

080023c8 <cmd_68>:

/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 80023dc:	f107 0308 	add.w	r3, r7, #8
 80023e0:	4619      	mov	r1, r3
 80023e2:	2002      	movs	r0, #2
 80023e4:	f7ff ff86 	bl	80022f4 <pec15_calc>
 80023e8:	4603      	mov	r3, r0
 80023ea:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80023ec:	89fb      	ldrh	r3, [r7, #14]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	72fb      	strb	r3, [r7, #11]

	FEB_cs_low();
 80023fc:	f000 fa6c 	bl	80028d8 <FEB_cs_low>
	FEB_spi_write_array(4,cmd);
 8002400:	f107 0308 	add.w	r3, r7, #8
 8002404:	4619      	mov	r1, r3
 8002406:	2004      	movs	r0, #4
 8002408:	f000 fa7e 	bl	8002908 <FEB_spi_write_array>
	FEB_cs_high();
 800240c:	f000 fa70 	bl	80028f0 <FEB_cs_high>
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	73fb      	strb	r3, [r7, #15]
	const uint8_t BYTES_IN_REG = 6;
 8002426:	2306      	movs	r3, #6
 8002428:	773b      	strb	r3, [r7, #28]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	3304      	adds	r3, #4
 8002432:	76fb      	strb	r3, [r7, #27]
	uint8_t *cmd;
	uint16_t data_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index;

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 8002434:	7efb      	ldrb	r3, [r7, #27]
 8002436:	4618      	mov	r0, r3
 8002438:	f003 febc 	bl	80061b4 <malloc>
 800243c:	4603      	mov	r3, r0
 800243e:	617b      	str	r3, [r7, #20]
	cmd[0] = tx_cmd[0];
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781a      	ldrb	r2, [r3, #0]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	701a      	strb	r2, [r3, #0]
	cmd[1] = tx_cmd[1];
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	7852      	ldrb	r2, [r2, #1]
 8002450:	701a      	strb	r2, [r3, #0]
	cmd_pec = pec15_calc(2, cmd);
 8002452:	6979      	ldr	r1, [r7, #20]
 8002454:	2002      	movs	r0, #2
 8002456:	f7ff ff4d 	bl	80022f4 <pec15_calc>
 800245a:	4603      	mov	r3, r0
 800245c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800245e:	8a7b      	ldrh	r3, [r7, #18]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	b29a      	uxth	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3302      	adds	r3, #2
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3303      	adds	r3, #3
 8002470:	8a7a      	ldrh	r2, [r7, #18]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8002476:	2304      	movs	r3, #4
 8002478:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each ADBMS630B, this loops starts with the last IC on the stack.
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	77bb      	strb	r3, [r7, #30]
 800247e:	e042      	b.n	8002506 <write_68+0xee>
    {	                                                                            //The first configuration written is received by the last IC in the daisy chain
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002480:	2300      	movs	r3, #0
 8002482:	777b      	strb	r3, [r7, #29]
 8002484:	e016      	b.n	80024b4 <write_68+0x9c>
		{
			cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8002486:	7fbb      	ldrb	r3, [r7, #30]
 8002488:	1e5a      	subs	r2, r3, #1
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	461a      	mov	r2, r3
 8002494:	7f7b      	ldrb	r3, [r7, #29]
 8002496:	4413      	add	r3, r2
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	441a      	add	r2, r3
 800249e:	7ffb      	ldrb	r3, [r7, #31]
 80024a0:	6979      	ldr	r1, [r7, #20]
 80024a2:	440b      	add	r3, r1
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 80024a8:	7ffb      	ldrb	r3, [r7, #31]
 80024aa:	3301      	adds	r3, #1
 80024ac:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80024ae:	7f7b      	ldrb	r3, [r7, #29]
 80024b0:	3301      	adds	r3, #1
 80024b2:	777b      	strb	r3, [r7, #29]
 80024b4:	7f7a      	ldrb	r2, [r7, #29]
 80024b6:	7f3b      	ldrb	r3, [r7, #28]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d3e4      	bcc.n	8002486 <write_68+0x6e>
		}

		data_pec = (uint16_t)pec10_calc(BYTES_IN_REG, &data[(current_ic-1)*6]);    // Calculating the PEC for each ICs configuration register data
 80024bc:	7fbb      	ldrb	r3, [r7, #30]
 80024be:	1e5a      	subs	r2, r3, #1
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	461a      	mov	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	441a      	add	r2, r3
 80024ce:	7f3b      	ldrb	r3, [r7, #28]
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff42 	bl	800235c <pec10_calc>
 80024d8:	4603      	mov	r3, r0
 80024da:	823b      	strh	r3, [r7, #16]
		cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 80024dc:	8a3b      	ldrh	r3, [r7, #16]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	b299      	uxth	r1, r3
 80024e2:	7ffb      	ldrb	r3, [r7, #31]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4413      	add	r3, r2
 80024e8:	b2ca      	uxtb	r2, r1
 80024ea:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)data_pec;
 80024ec:	7ffb      	ldrb	r3, [r7, #31]
 80024ee:	3301      	adds	r3, #1
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4413      	add	r3, r2
 80024f4:	8a3a      	ldrh	r2, [r7, #16]
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80024fa:	7ffb      	ldrb	r3, [r7, #31]
 80024fc:	3302      	adds	r3, #2
 80024fe:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--)               // Executes for each ADBMS630B, this loops starts with the last IC on the stack.
 8002500:	7fbb      	ldrb	r3, [r7, #30]
 8002502:	3b01      	subs	r3, #1
 8002504:	77bb      	strb	r3, [r7, #30]
 8002506:	7fbb      	ldrb	r3, [r7, #30]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1b9      	bne.n	8002480 <write_68+0x68>
	}

	FEB_cs_low();
 800250c:	f000 f9e4 	bl	80028d8 <FEB_cs_low>
	FEB_spi_write_array(CMD_LEN, cmd);
 8002510:	7efb      	ldrb	r3, [r7, #27]
 8002512:	6979      	ldr	r1, [r7, #20]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f9f7 	bl	8002908 <FEB_spi_write_array>
	FEB_cs_high();
 800251a:	f000 f9e9 	bl	80028f0 <FEB_cs_high>

	free(cmd);
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f003 fe50 	bl	80061c4 <free>
}
 8002524:	bf00      	nop
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <wakeup_sleep>:

/* Generic wakeup command to wake the ADBMS6830B from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < total_ic; i++) {
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	e00d      	b.n	8002558 <wakeup_sleep+0x2c>
	   FEB_cs_low();
 800253c:	f000 f9cc 	bl	80028d8 <FEB_cs_low>
	   FEB_delay_u(300); // Guarantees the ADBMS6830B will be in standby
 8002540:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002544:	f000 f9bc 	bl	80028c0 <FEB_delay_u>
	   FEB_cs_high();
 8002548:	f000 f9d2 	bl	80028f0 <FEB_cs_high>
	   FEB_delay_u(10);
 800254c:	200a      	movs	r0, #10
 800254e:	f000 f9b7 	bl	80028c0 <FEB_delay_u>
	for (int i = 0; i < total_ic; i++) {
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	3301      	adds	r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	dbed      	blt.n	800253c <wakeup_sleep+0x10>
	}
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <ADBMS6830B_check_pec>:

void ADBMS6830B_check_pec(uint8_t total_ic, //Number of ICs in the system
					   uint8_t reg, //Type of Register
					   cell_asic *ic //A two dimensional array that stores the data
					   )
{
 800256c:	b480      	push	{r7}
 800256e:	b08b      	sub	sp, #44	; 0x2c
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	603a      	str	r2, [r7, #0]
 8002576:	71fb      	strb	r3, [r7, #7]
 8002578:	460b      	mov	r3, r1
 800257a:	71bb      	strb	r3, [r7, #6]
	switch (reg)
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	2b04      	cmp	r3, #4
 8002580:	f200 8197 	bhi.w	80028b2 <ADBMS6830B_check_pec+0x346>
 8002584:	a201      	add	r2, pc, #4	; (adr r2, 800258c <ADBMS6830B_check_pec+0x20>)
 8002586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258a:	bf00      	nop
 800258c:	080025a1 	.word	0x080025a1
 8002590:	0800261f 	.word	0x0800261f
 8002594:	0800269d 	.word	0x0800269d
 8002598:	0800274f 	.word	0x0800274f
 800259c:	08002801 	.word	0x08002801
	{
		case CFGRA:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
 80025a4:	e036      	b.n	8002614 <ADBMS6830B_check_pec+0xa8>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configa.rx_pec_match;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	22e8      	movs	r2, #232	; 0xe8
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	22e8      	movs	r2, #232	; 0xe8
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	7b9b      	ldrb	r3, [r3, #14]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	20e8      	movs	r0, #232	; 0xe8
 80025ca:	fb00 f303 	mul.w	r3, r0, r3
 80025ce:	6838      	ldr	r0, [r7, #0]
 80025d0:	4403      	add	r3, r0
 80025d2:	440a      	add	r2, r1
 80025d4:	b292      	uxth	r2, r2
 80025d6:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configa.rx_pec_match;
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	22e8      	movs	r2, #232	; 0xe8
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	22e8      	movs	r2, #232	; 0xe8
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	7b9b      	ldrb	r3, [r3, #14]
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	20e8      	movs	r0, #232	; 0xe8
 80025fe:	fb00 f303 	mul.w	r3, r0, r3
 8002602:	6838      	ldr	r0, [r7, #0]
 8002604:	4403      	add	r3, r0
 8002606:	440a      	add	r2, r1
 8002608:	b292      	uxth	r2, r2
 800260a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	3301      	adds	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002618:	429a      	cmp	r2, r3
 800261a:	dbc4      	blt.n	80025a6 <ADBMS6830B_check_pec+0x3a>
		  }
		break;
 800261c:	e14a      	b.n	80028b4 <ADBMS6830B_check_pec+0x348>

		case CFGRB:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
 8002622:	e036      	b.n	8002692 <ADBMS6830B_check_pec+0x126>
		  {
			ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].configb.rx_pec_match;
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	22e8      	movs	r2, #232	; 0xe8
 8002628:	fb02 f303 	mul.w	r3, r2, r3
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	4413      	add	r3, r2
 8002630:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	22e8      	movs	r2, #232	; 0xe8
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4413      	add	r3, r2
 8002640:	7f5b      	ldrb	r3, [r3, #29]
 8002642:	b29a      	uxth	r2, r3
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	20e8      	movs	r0, #232	; 0xe8
 8002648:	fb00 f303 	mul.w	r3, r0, r3
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	4403      	add	r3, r0
 8002650:	440a      	add	r2, r1
 8002652:	b292      	uxth	r2, r2
 8002654:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			ic[current_ic].crc_count.cfgr_pec = ic[current_ic].crc_count.cfgr_pec + ic[current_ic].configb.rx_pec_match;
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	22e8      	movs	r2, #232	; 0xe8
 800265c:	fb02 f303 	mul.w	r3, r2, r3
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	4413      	add	r3, r2
 8002664:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	22e8      	movs	r2, #232	; 0xe8
 800266c:	fb02 f303 	mul.w	r3, r2, r3
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	4413      	add	r3, r2
 8002674:	7f5b      	ldrb	r3, [r3, #29]
 8002676:	b29a      	uxth	r2, r3
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	20e8      	movs	r0, #232	; 0xe8
 800267c:	fb00 f303 	mul.w	r3, r0, r3
 8002680:	6838      	ldr	r0, [r7, #0]
 8002682:	4403      	add	r3, r0
 8002684:	440a      	add	r2, r1
 8002686:	b292      	uxth	r2, r2
 8002688:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	3301      	adds	r3, #1
 8002690:	623b      	str	r3, [r7, #32]
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	6a3a      	ldr	r2, [r7, #32]
 8002696:	429a      	cmp	r2, r3
 8002698:	dbc4      	blt.n	8002624 <ADBMS6830B_check_pec+0xb8>
		  }
		break;
 800269a:	e10b      	b.n	80028b4 <ADBMS6830B_check_pec+0x348>
		case CELL:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	e050      	b.n	8002744 <ADBMS6830B_check_pec+0x1d8>
		  {
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e043      	b.n	8002730 <ADBMS6830B_check_pec+0x1c4>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].cells.pec_match[i];
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	22e8      	movs	r2, #232	; 0xe8
 80026ac:	fb02 f303 	mul.w	r3, r2, r3
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	22e8      	movs	r2, #232	; 0xe8
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	441a      	add	r2, r3
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	3342      	adds	r3, #66	; 0x42
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	20e8      	movs	r0, #232	; 0xe8
 80026d2:	fb00 f303 	mul.w	r3, r0, r3
 80026d6:	6838      	ldr	r0, [r7, #0]
 80026d8:	4403      	add	r3, r0
 80026da:	440a      	add	r2, r1
 80026dc:	b292      	uxth	r2, r2
 80026de:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			  ic[current_ic].crc_count.cell_pec[i] = ic[current_ic].crc_count.cell_pec[i] + ic[current_ic].cells.pec_match[i];
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	22e8      	movs	r2, #232	; 0xe8
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	441a      	add	r2, r3
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	3360      	adds	r3, #96	; 0x60
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	88d9      	ldrh	r1, [r3, #6]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	22e8      	movs	r2, #232	; 0xe8
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	441a      	add	r2, r3
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4413      	add	r3, r2
 8002708:	3342      	adds	r3, #66	; 0x42
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	20e8      	movs	r0, #232	; 0xe8
 8002712:	fb00 f202 	mul.w	r2, r0, r2
 8002716:	6838      	ldr	r0, [r7, #0]
 8002718:	4402      	add	r2, r0
 800271a:	440b      	add	r3, r1
 800271c:	b299      	uxth	r1, r3
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	3360      	adds	r3, #96	; 0x60
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	460a      	mov	r2, r1
 8002728:	80da      	strh	r2, [r3, #6]
			for (int i=0; i<ic[0].ic_reg.num_cv_reg; i++)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	3301      	adds	r3, #1
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8002736:	461a      	mov	r2, r3
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	4293      	cmp	r3, r2
 800273c:	dbb4      	blt.n	80026a8 <ADBMS6830B_check_pec+0x13c>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3301      	adds	r3, #1
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	429a      	cmp	r2, r3
 800274a:	dbaa      	blt.n	80026a2 <ADBMS6830B_check_pec+0x136>
			}
		  }
		break;
 800274c:	e0b2      	b.n	80028b4 <ADBMS6830B_check_pec+0x348>
		case AUX:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e050      	b.n	80027f6 <ADBMS6830B_check_pec+0x28a>
		  {
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	e043      	b.n	80027e2 <ADBMS6830B_check_pec+0x276>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + (ic[current_ic].aux.pec_match[i]);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	22e8      	movs	r2, #232	; 0xe8
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	4413      	add	r3, r2
 8002766:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	22e8      	movs	r2, #232	; 0xe8
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	441a      	add	r2, r3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	335c      	adds	r3, #92	; 0x5c
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	b29a      	uxth	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	20e8      	movs	r0, #232	; 0xe8
 8002784:	fb00 f303 	mul.w	r3, r0, r3
 8002788:	6838      	ldr	r0, [r7, #0]
 800278a:	4403      	add	r3, r0
 800278c:	440a      	add	r2, r1
 800278e:	b292      	uxth	r2, r2
 8002790:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			  ic[current_ic].crc_count.aux_pec[i] = ic[current_ic].crc_count.aux_pec[i] + (ic[current_ic].aux.pec_match[i]);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	22e8      	movs	r2, #232	; 0xe8
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	441a      	add	r2, r3
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	3368      	adds	r3, #104	; 0x68
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	8859      	ldrh	r1, [r3, #2]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	22e8      	movs	r2, #232	; 0xe8
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	441a      	add	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4413      	add	r3, r2
 80027ba:	335c      	adds	r3, #92	; 0x5c
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	20e8      	movs	r0, #232	; 0xe8
 80027c4:	fb00 f202 	mul.w	r2, r0, r2
 80027c8:	6838      	ldr	r0, [r7, #0]
 80027ca:	4402      	add	r2, r0
 80027cc:	440b      	add	r3, r1
 80027ce:	b299      	uxth	r1, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	3368      	adds	r3, #104	; 0x68
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	460a      	mov	r2, r1
 80027da:	805a      	strh	r2, [r3, #2]
			for (int i=0; i<ic[0].ic_reg.num_gpio_reg; i++)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	3301      	adds	r3, #1
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80027e8:	461a      	mov	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4293      	cmp	r3, r2
 80027ee:	dbb4      	blt.n	800275a <ADBMS6830B_check_pec+0x1ee>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	3301      	adds	r3, #1
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	dbaa      	blt.n	8002754 <ADBMS6830B_check_pec+0x1e8>
			}
		  }

		break;
 80027fe:	e059      	b.n	80028b4 <ADBMS6830B_check_pec+0x348>
		case STAT:
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	e050      	b.n	80028a8 <ADBMS6830B_check_pec+0x33c>
		  {

			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	e043      	b.n	8002894 <ADBMS6830B_check_pec+0x328>
			{
			  ic[current_ic].crc_count.pec_count = ic[current_ic].crc_count.pec_count + ic[current_ic].stat.pec_match[i];
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	22e8      	movs	r2, #232	; 0xe8
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	22e8      	movs	r2, #232	; 0xe8
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	441a      	add	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4413      	add	r3, r2
 800282c:	336d      	adds	r3, #109	; 0x6d
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	20e8      	movs	r0, #232	; 0xe8
 8002836:	fb00 f303 	mul.w	r3, r0, r3
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	4403      	add	r3, r0
 800283e:	440a      	add	r2, r1
 8002840:	b292      	uxth	r2, r2
 8002842:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
			  ic[current_ic].crc_count.stat_pec[i] = ic[current_ic].crc_count.stat_pec[i] + ic[current_ic].stat.pec_match[i];
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	22e8      	movs	r2, #232	; 0xe8
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	441a      	add	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	336c      	adds	r3, #108	; 0x6c
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	8859      	ldrh	r1, [r3, #2]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	22e8      	movs	r2, #232	; 0xe8
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	441a      	add	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4413      	add	r3, r2
 800286c:	336d      	adds	r3, #109	; 0x6d
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b29b      	uxth	r3, r3
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	20e8      	movs	r0, #232	; 0xe8
 8002876:	fb00 f202 	mul.w	r2, r0, r2
 800287a:	6838      	ldr	r0, [r7, #0]
 800287c:	4402      	add	r2, r0
 800287e:	440b      	add	r3, r1
 8002880:	b299      	uxth	r1, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	336c      	adds	r3, #108	; 0x6c
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	460a      	mov	r2, r1
 800288c:	805a      	strh	r2, [r3, #2]
			for (int i=0; i<ic[0].ic_reg.num_stat_reg-1; i++)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3301      	adds	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 800289a:	3b01      	subs	r3, #1
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	dbb4      	blt.n	800280c <ADBMS6830B_check_pec+0x2a0>
		  for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3301      	adds	r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	dbaa      	blt.n	8002806 <ADBMS6830B_check_pec+0x29a>
			}
		  }
		break;
 80028b0:	e000      	b.n	80028b4 <ADBMS6830B_check_pec+0x348>
		default:
		break;
 80028b2:	bf00      	nop
	}
}
 80028b4:	bf00      	nop
 80028b6:	372c      	adds	r7, #44	; 0x2c
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <FEB_delay_u>:
static relay_status_t relay_status;
static uint8_t shutdown_close_guard = 0; //guard for shutdown relay

// ******************************** SPI ********************************

void FEB_delay_u(uint16_t micro) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(1);
 80028ca:	2001      	movs	r0, #1
 80028cc:	f000 fcb6 	bl	800323c <HAL_Delay>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <FEB_cs_low>:

void FEB_delay_m(uint16_t milli) {
	HAL_Delay(milli);
}

void FEB_cs_low() {
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80028dc:	2200      	movs	r2, #0
 80028de:	2108      	movs	r1, #8
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <FEB_cs_low+0x14>)
 80028e2:	f000 ff45 	bl	8003770 <HAL_GPIO_WritePin>
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40020800 	.word	0x40020800

080028f0 <FEB_cs_high>:

void FEB_cs_high() {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80028f4:	2201      	movs	r2, #1
 80028f6:	2108      	movs	r1, #8
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <FEB_cs_high+0x14>)
 80028fa:	f000 ff39 	bl	8003770 <HAL_GPIO_WritePin>
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40020800 	.word	0x40020800

08002908 <FEB_spi_write_array>:

void FEB_spi_write_array(uint8_t len, uint8_t data[]) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, data, len, 100);
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	b29a      	uxth	r2, r3
 8002918:	2364      	movs	r3, #100	; 0x64
 800291a:	6839      	ldr	r1, [r7, #0]
 800291c:	4803      	ldr	r0, [pc, #12]	; (800292c <FEB_spi_write_array+0x24>)
 800291e:	f001 fde4 	bl	80044ea <HAL_SPI_Transmit>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200003d4 	.word	0x200003d4

08002930 <FEB_spi_write_read>:

void FEB_spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	461a      	mov	r2, r3
 800293c:	460b      	mov	r3, r1
 800293e:	72fb      	strb	r3, [r7, #11]
 8002940:	4613      	mov	r3, r2
 8002942:	72bb      	strb	r3, [r7, #10]
	for (uint8_t i = 0; i < tx_len; i++) {
 8002944:	2300      	movs	r3, #0
 8002946:	75fb      	strb	r3, [r7, #23]
 8002948:	e00a      	b.n	8002960 <FEB_spi_write_read+0x30>
		HAL_SPI_Transmit(&hspi1, &tx_Data[i], 1, 100);
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	18d1      	adds	r1, r2, r3
 8002950:	2364      	movs	r3, #100	; 0x64
 8002952:	2201      	movs	r2, #1
 8002954:	4810      	ldr	r0, [pc, #64]	; (8002998 <FEB_spi_write_read+0x68>)
 8002956:	f001 fdc8 	bl	80044ea <HAL_SPI_Transmit>
	for (uint8_t i = 0; i < tx_len; i++) {
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	3301      	adds	r3, #1
 800295e:	75fb      	strb	r3, [r7, #23]
 8002960:	7dfa      	ldrb	r2, [r7, #23]
 8002962:	7afb      	ldrb	r3, [r7, #11]
 8002964:	429a      	cmp	r2, r3
 8002966:	d3f0      	bcc.n	800294a <FEB_spi_write_read+0x1a>
	}

	for (uint8_t i = 0; i < rx_len; i++) {
 8002968:	2300      	movs	r3, #0
 800296a:	75bb      	strb	r3, [r7, #22]
 800296c:	e00a      	b.n	8002984 <FEB_spi_write_read+0x54>
		HAL_SPI_Receive(&hspi1, &rx_data[i], 1, 100);
 800296e:	7dbb      	ldrb	r3, [r7, #22]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	18d1      	adds	r1, r2, r3
 8002974:	2364      	movs	r3, #100	; 0x64
 8002976:	2201      	movs	r2, #1
 8002978:	4807      	ldr	r0, [pc, #28]	; (8002998 <FEB_spi_write_read+0x68>)
 800297a:	f001 fef2 	bl	8004762 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < rx_len; i++) {
 800297e:	7dbb      	ldrb	r3, [r7, #22]
 8002980:	3301      	adds	r3, #1
 8002982:	75bb      	strb	r3, [r7, #22]
 8002984:	7dba      	ldrb	r2, [r7, #22]
 8002986:	7abb      	ldrb	r3, [r7, #10]
 8002988:	429a      	cmp	r2, r3
 800298a:	d3f0      	bcc.n	800296e <FEB_spi_write_read+0x3e>
	}
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	200003d4 	.word	0x200003d4

0800299c <FEB_spi_read_byte>:

uint8_t FEB_spi_read_byte(uint8_t tx_data) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	HAL_SPI_Receive(&hspi1, &data, 1, 100);
 80029a6:	f107 010f 	add.w	r1, r7, #15
 80029aa:	2364      	movs	r3, #100	; 0x64
 80029ac:	2201      	movs	r2, #1
 80029ae:	4804      	ldr	r0, [pc, #16]	; (80029c0 <FEB_spi_read_byte+0x24>)
 80029b0:	f001 fed7 	bl	8004762 <HAL_SPI_Receive>
	return data;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200003d4 	.word	0x200003d4

080029c4 <FEB_Main_Setup>:
#include "FEB_Main.h"
#include "FEB_ADBMS6830B.h"

// ******************************** Functions ********************************

void FEB_Main_Setup() {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
	//SM setup
	FEB_ADBMS_Init();
 80029c8:	f7fe fb32 	bl	8001030 <FEB_ADBMS_Init>
	//CAN Filter Config Setup
	//IVT Setup
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <FEB_Main_Task1_VT>:

void FEB_Main_Task1_VT() {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	FEB_ADBMS_AcquireData();
 80029d4:	f7fe fb6a 	bl	80010ac <FEB_ADBMS_AcquireData>
	FEB_ADBMS_UART_Transmit();
 80029d8:	f7fe fcf8 	bl	80013cc <FEB_ADBMS_UART_Transmit>
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}

080029e0 <FEB_Main_Task2_SM>:

void FEB_Main_Task2_SM() {
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0

}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <FEB_Main_Task3_Charge>:

void FEB_Main_Task3_Charge() {
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0

}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <FEB_Main_Task4_Balance>:

void FEB_Main_Task4_Balance() {
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0

}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <FEB_Main_Task5_IVT>:

void FEB_Main_Task5_IVT() {
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0

}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <FEB_Main_Task6_CAN>:

void FEB_Main_Task6_CAN() {
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0

}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a2a:	f000 fbc5 	bl	80031b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a2e:	f000 f815 	bl	8002a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a32:	f000 f8e1 	bl	8002bf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a36:	f000 f8b5 	bl	8002ba4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002a3a:	f000 f87d 	bl	8002b38 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  FEB_Main_Setup();
 8002a3e:	f7ff ffc1 	bl	80029c4 <FEB_Main_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FEB_Main_Task1_VT();
 8002a42:	f7ff ffc5 	bl	80029d0 <FEB_Main_Task1_VT>
	  FEB_Main_Task2_SM();
 8002a46:	f7ff ffcb 	bl	80029e0 <FEB_Main_Task2_SM>
	  FEB_Main_Task3_Charge();
 8002a4a:	f7ff ffd0 	bl	80029ee <FEB_Main_Task3_Charge>
	  FEB_Main_Task4_Balance();
 8002a4e:	f7ff ffd5 	bl	80029fc <FEB_Main_Task4_Balance>
	  FEB_Main_Task5_IVT();
 8002a52:	f7ff ffda 	bl	8002a0a <FEB_Main_Task5_IVT>
	  FEB_Main_Task6_CAN();
 8002a56:	f7ff ffdf 	bl	8002a18 <FEB_Main_Task6_CAN>
  {
 8002a5a:	e7f2      	b.n	8002a42 <main+0x1c>

08002a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b094      	sub	sp, #80	; 0x50
 8002a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a62:	f107 031c 	add.w	r3, r7, #28
 8002a66:	2234      	movs	r2, #52	; 0x34
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 febe 	bl	80067ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a70:	f107 0308 	add.w	r3, r7, #8
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	2300      	movs	r3, #0
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <SystemClock_Config+0xd4>)
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	4a29      	ldr	r2, [pc, #164]	; (8002b30 <SystemClock_Config+0xd4>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a90:	4b27      	ldr	r3, [pc, #156]	; (8002b30 <SystemClock_Config+0xd4>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <SystemClock_Config+0xd8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002aa8:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <SystemClock_Config+0xd8>)
 8002aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <SystemClock_Config+0xd8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002abc:	2302      	movs	r3, #2
 8002abe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002acc:	2300      	movs	r3, #0
 8002ace:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ad4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002ad8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ada:	2304      	movs	r3, #4
 8002adc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	4618      	mov	r0, r3
 8002aec:	f001 f9d6 	bl	8003e9c <HAL_RCC_OscConfig>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002af6:	f000 f8f7 	bl	8002ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002afa:	230f      	movs	r3, #15
 8002afc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002afe:	2302      	movs	r3, #2
 8002b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	2102      	movs	r1, #2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fe44 	bl	80037a4 <HAL_RCC_ClockConfig>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002b22:	f000 f8e1 	bl	8002ce8 <Error_Handler>
  }
}
 8002b26:	bf00      	nop
 8002b28:	3750      	adds	r7, #80	; 0x50
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40007000 	.word	0x40007000

08002b38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b3e:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <MX_SPI1_Init+0x68>)
 8002b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b62:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b84:	220a      	movs	r2, #10
 8002b86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b88:	4804      	ldr	r0, [pc, #16]	; (8002b9c <MX_SPI1_Init+0x64>)
 8002b8a:	f001 fc25 	bl	80043d8 <HAL_SPI_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b94:	f000 f8a8 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	200003d4 	.word	0x200003d4
 8002ba0:	40013000 	.word	0x40013000

08002ba4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <MX_USART2_UART_Init+0x4c>)
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <MX_USART2_UART_Init+0x50>)
 8002bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <MX_USART2_UART_Init+0x4c>)
 8002bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <MX_USART2_UART_Init+0x4c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <MX_USART2_UART_Init+0x4c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <MX_USART2_UART_Init+0x4c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <MX_USART2_UART_Init+0x4c>)
 8002bca:	220c      	movs	r2, #12
 8002bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <MX_USART2_UART_Init+0x4c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <MX_USART2_UART_Init+0x4c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bda:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <MX_USART2_UART_Init+0x4c>)
 8002bdc:	f002 fc52 	bl	8005484 <HAL_UART_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002be6:	f000 f87f 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	2000042c 	.word	0x2000042c
 8002bf4:	40004400 	.word	0x40004400

08002bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <MX_GPIO_Init+0xc4>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a29      	ldr	r2, [pc, #164]	; (8002cbc <MX_GPIO_Init+0xc4>)
 8002c18:	f043 0304 	orr.w	r3, r3, #4
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <MX_GPIO_Init+0xc4>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <MX_GPIO_Init+0xc4>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4a22      	ldr	r2, [pc, #136]	; (8002cbc <MX_GPIO_Init+0xc4>)
 8002c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <MX_GPIO_Init+0xc4>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <MX_GPIO_Init+0xc4>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a1b      	ldr	r2, [pc, #108]	; (8002cbc <MX_GPIO_Init+0xc4>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <MX_GPIO_Init+0xc4>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <MX_GPIO_Init+0xc4>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <MX_GPIO_Init+0xc4>)
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <MX_GPIO_Init+0xc4>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	480a      	ldr	r0, [pc, #40]	; (8002cc0 <MX_GPIO_Init+0xc8>)
 8002c96:	f000 fbd7 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : WAKE_Pin INTR_Pin */
  GPIO_InitStruct.Pin = WAKE_Pin|INTR_Pin;
 8002c9a:	2306      	movs	r3, #6
 8002c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	4619      	mov	r1, r3
 8002cac:	4804      	ldr	r0, [pc, #16]	; (8002cc0 <MX_GPIO_Init+0xc8>)
 8002cae:	f000 fbcb 	bl	8003448 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cb2:	bf00      	nop
 8002cb4:	3728      	adds	r7, #40	; 0x28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40020800 	.word	0x40020800

08002cc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cd6:	f000 fa91 	bl	80031fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40010000 	.word	0x40010000

08002ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cec:	b672      	cpsid	i
}
 8002cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <Error_Handler+0x8>
	...

08002cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <HAL_MspInit+0x4c>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <HAL_MspInit+0x4c>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <HAL_MspInit+0x4c>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	607b      	str	r3, [r7, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_MspInit+0x4c>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <HAL_MspInit+0x4c>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_MspInit+0x4c>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800

08002d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <HAL_SPI_MspInit+0x84>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d12b      	bne.n	8002dbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <HAL_SPI_MspInit+0x88>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_SPI_MspInit+0x88>)
 8002d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d74:	6453      	str	r3, [r2, #68]	; 0x44
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_SPI_MspInit+0x88>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_SPI_MspInit+0x88>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <HAL_SPI_MspInit+0x88>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_SPI_MspInit+0x88>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d9e:	23e0      	movs	r3, #224	; 0xe0
 8002da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002daa:	2303      	movs	r3, #3
 8002dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dae:	2305      	movs	r3, #5
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4619      	mov	r1, r3
 8002db8:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <HAL_SPI_MspInit+0x8c>)
 8002dba:	f000 fb45 	bl	8003448 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002dbe:	bf00      	nop
 8002dc0:	3728      	adds	r7, #40	; 0x28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40013000 	.word	0x40013000
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020000 	.word	0x40020000

08002dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <HAL_UART_MspInit+0x84>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d12b      	bne.n	8002e4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_UART_MspInit+0x88>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <HAL_UART_MspInit+0x88>)
 8002e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_UART_MspInit+0x88>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_UART_MspInit+0x88>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <HAL_UART_MspInit+0x88>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6313      	str	r3, [r2, #48]	; 0x30
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <HAL_UART_MspInit+0x88>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e2e:	230c      	movs	r3, #12
 8002e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e3e:	2307      	movs	r3, #7
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	4805      	ldr	r0, [pc, #20]	; (8002e60 <HAL_UART_MspInit+0x8c>)
 8002e4a:	f000 fafd 	bl	8003448 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e4e:	bf00      	nop
 8002e50:	3728      	adds	r7, #40	; 0x28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40004400 	.word	0x40004400
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40020000 	.word	0x40020000

08002e64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08c      	sub	sp, #48	; 0x30
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002e74:	2300      	movs	r3, #0
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_InitTick+0xd0>)
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	4a2d      	ldr	r2, [pc, #180]	; (8002f34 <HAL_InitTick+0xd0>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6453      	str	r3, [r2, #68]	; 0x44
 8002e84:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <HAL_InitTick+0xd0>)
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e90:	f107 020c 	add.w	r2, r7, #12
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fd9c 	bl	80039d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002ea0:	f000 fd86 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 8002ea4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	4a23      	ldr	r2, [pc, #140]	; (8002f38 <HAL_InitTick+0xd4>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	0c9b      	lsrs	r3, r3, #18
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <HAL_InitTick+0xd8>)
 8002eb6:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <HAL_InitTick+0xdc>)
 8002eb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002eba:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_InitTick+0xd8>)
 8002ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ec0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ec2:	4a1e      	ldr	r2, [pc, #120]	; (8002f3c <HAL_InitTick+0xd8>)
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <HAL_InitTick+0xd8>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ece:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_InitTick+0xd8>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_InitTick+0xd8>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002eda:	4818      	ldr	r0, [pc, #96]	; (8002f3c <HAL_InitTick+0xd8>)
 8002edc:	f002 f824 	bl	8004f28 <HAL_TIM_Base_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11b      	bne.n	8002f26 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002eee:	4813      	ldr	r0, [pc, #76]	; (8002f3c <HAL_InitTick+0xd8>)
 8002ef0:	f002 f874 	bl	8004fdc <HAL_TIM_Base_Start_IT>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002efa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d111      	bne.n	8002f26 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f02:	2019      	movs	r0, #25
 8002f04:	f000 fa92 	bl	800342c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b0f      	cmp	r3, #15
 8002f0c:	d808      	bhi.n	8002f20 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	2019      	movs	r0, #25
 8002f14:	f000 fa6e 	bl	80033f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <HAL_InitTick+0xe0>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e002      	b.n	8002f26 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3730      	adds	r7, #48	; 0x30
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	431bde83 	.word	0x431bde83
 8002f3c:	20000470 	.word	0x20000470
 8002f40:	40010000 	.word	0x40010000
 8002f44:	20000010 	.word	0x20000010

08002f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f4c:	e7fe      	b.n	8002f4c <NMI_Handler+0x4>

08002f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f52:	e7fe      	b.n	8002f52 <HardFault_Handler+0x4>

08002f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f58:	e7fe      	b.n	8002f58 <MemManage_Handler+0x4>

08002f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f5e:	e7fe      	b.n	8002f5e <BusFault_Handler+0x4>

08002f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f64:	e7fe      	b.n	8002f64 <UsageFault_Handler+0x4>

08002f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f66:	b480      	push	{r7}
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fa4:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002fa6:	f002 f889 	bl	80050bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000470 	.word	0x20000470

08002fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return 1;
 8002fb8:	2301      	movs	r3, #1
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <_kill>:

int _kill(int pid, int sig)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fce:	f003 fc29 	bl	8006824 <__errno>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2216      	movs	r2, #22
 8002fd6:	601a      	str	r2, [r3, #0]
  return -1;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <_exit>:

void _exit (int status)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ffe7 	bl	8002fc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ff6:	e7fe      	b.n	8002ff6 <_exit+0x12>

08002ff8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e00a      	b.n	8003020 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800300a:	f3af 8000 	nop.w
 800300e:	4601      	mov	r1, r0
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	60ba      	str	r2, [r7, #8]
 8003016:	b2ca      	uxtb	r2, r1
 8003018:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	3301      	adds	r3, #1
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	429a      	cmp	r2, r3
 8003026:	dbf0      	blt.n	800300a <_read+0x12>
  }

  return len;
 8003028:	687b      	ldr	r3, [r7, #4]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	e009      	b.n	8003058 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	60ba      	str	r2, [r7, #8]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3301      	adds	r3, #1
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	429a      	cmp	r2, r3
 800305e:	dbf1      	blt.n	8003044 <_write+0x12>
  }
  return len;
 8003060:	687b      	ldr	r3, [r7, #4]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <_close>:

int _close(int file)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003092:	605a      	str	r2, [r3, #4]
  return 0;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <_isatty>:

int _isatty(int file)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030aa:	2301      	movs	r3, #1
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <_sbrk+0x5c>)
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <_sbrk+0x60>)
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <_sbrk+0x64>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <_sbrk+0x64>)
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <_sbrk+0x68>)
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <_sbrk+0x64>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d207      	bcs.n	8003114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003104:	f003 fb8e 	bl	8006824 <__errno>
 8003108:	4603      	mov	r3, r0
 800310a:	220c      	movs	r2, #12
 800310c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800310e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003112:	e009      	b.n	8003128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <_sbrk+0x64>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <_sbrk+0x64>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <_sbrk+0x64>)
 8003124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003126:	68fb      	ldr	r3, [r7, #12]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20020000 	.word	0x20020000
 8003134:	00000400 	.word	0x00000400
 8003138:	200004b8 	.word	0x200004b8
 800313c:	20000610 	.word	0x20000610

08003140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <SystemInit+0x20>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	4a05      	ldr	r2, [pc, #20]	; (8003160 <SystemInit+0x20>)
 800314c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800319c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003168:	480d      	ldr	r0, [pc, #52]	; (80031a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800316a:	490e      	ldr	r1, [pc, #56]	; (80031a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800316c:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003170:	e002      	b.n	8003178 <LoopCopyDataInit>

08003172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003176:	3304      	adds	r3, #4

08003178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800317a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800317c:	d3f9      	bcc.n	8003172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800317e:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003180:	4c0b      	ldr	r4, [pc, #44]	; (80031b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003184:	e001      	b.n	800318a <LoopFillZerobss>

08003186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003188:	3204      	adds	r2, #4

0800318a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800318a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800318c:	d3fb      	bcc.n	8003186 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800318e:	f7ff ffd7 	bl	8003140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003192:	f003 fb4d 	bl	8006830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003196:	f7ff fc46 	bl	8002a26 <main>
  bx  lr    
 800319a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800319c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031a4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80031a8:	080090fc 	.word	0x080090fc
  ldr r2, =_sbss
 80031ac:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80031b0:	2000060c 	.word	0x2000060c

080031b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031b4:	e7fe      	b.n	80031b4 <ADC_IRQHandler>
	...

080031b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <HAL_Init+0x40>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0d      	ldr	r2, [pc, #52]	; (80031f8 <HAL_Init+0x40>)
 80031c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_Init+0x40>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <HAL_Init+0x40>)
 80031ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <HAL_Init+0x40>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <HAL_Init+0x40>)
 80031da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e0:	2003      	movs	r0, #3
 80031e2:	f000 f8fc 	bl	80033de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031e6:	200f      	movs	r0, #15
 80031e8:	f7ff fe3c 	bl	8002e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031ec:	f7ff fd82 	bl	8002cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023c00 	.word	0x40023c00

080031fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_IncTick+0x20>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_IncTick+0x24>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4413      	add	r3, r2
 800320c:	4a04      	ldr	r2, [pc, #16]	; (8003220 <HAL_IncTick+0x24>)
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000014 	.word	0x20000014
 8003220:	200004bc 	.word	0x200004bc

08003224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return uwTick;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_GetTick+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	200004bc 	.word	0x200004bc

0800323c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003244:	f7ff ffee 	bl	8003224 <HAL_GetTick>
 8003248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003254:	d005      	beq.n	8003262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_Delay+0x44>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003262:	bf00      	nop
 8003264:	f7ff ffde 	bl	8003224 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d8f7      	bhi.n	8003264 <HAL_Delay+0x28>
  {
  }
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000014 	.word	0x20000014

08003284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003294:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032a0:	4013      	ands	r3, r2
 80032a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032b6:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <__NVIC_SetPriorityGrouping+0x44>)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	60d3      	str	r3, [r2, #12]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <__NVIC_GetPriorityGrouping+0x18>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	0a1b      	lsrs	r3, r3, #8
 80032d6:	f003 0307 	and.w	r3, r3, #7
}
 80032da:	4618      	mov	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	db0b      	blt.n	8003312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	f003 021f 	and.w	r2, r3, #31
 8003300:	4907      	ldr	r1, [pc, #28]	; (8003320 <__NVIC_EnableIRQ+0x38>)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	2001      	movs	r0, #1
 800330a:	fa00 f202 	lsl.w	r2, r0, r2
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000e100 	.word	0xe000e100

08003324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	2b00      	cmp	r3, #0
 8003336:	db0a      	blt.n	800334e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	490c      	ldr	r1, [pc, #48]	; (8003370 <__NVIC_SetPriority+0x4c>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	440b      	add	r3, r1
 8003348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800334c:	e00a      	b.n	8003364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4908      	ldr	r1, [pc, #32]	; (8003374 <__NVIC_SetPriority+0x50>)
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	3b04      	subs	r3, #4
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	440b      	add	r3, r1
 8003362:	761a      	strb	r2, [r3, #24]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000e100 	.word	0xe000e100
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f1c3 0307 	rsb	r3, r3, #7
 8003392:	2b04      	cmp	r3, #4
 8003394:	bf28      	it	cs
 8003396:	2304      	movcs	r3, #4
 8003398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3304      	adds	r3, #4
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d902      	bls.n	80033a8 <NVIC_EncodePriority+0x30>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3b03      	subs	r3, #3
 80033a6:	e000      	b.n	80033aa <NVIC_EncodePriority+0x32>
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	401a      	ands	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	43d9      	mvns	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	4313      	orrs	r3, r2
         );
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3724      	adds	r7, #36	; 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ff4c 	bl	8003284 <__NVIC_SetPriorityGrouping>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003406:	f7ff ff61 	bl	80032cc <__NVIC_GetPriorityGrouping>
 800340a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	6978      	ldr	r0, [r7, #20]
 8003412:	f7ff ffb1 	bl	8003378 <NVIC_EncodePriority>
 8003416:	4602      	mov	r2, r0
 8003418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff ff80 	bl	8003324 <__NVIC_SetPriority>
}
 8003424:	bf00      	nop
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff ff54 	bl	80032e8 <__NVIC_EnableIRQ>
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003448:	b480      	push	{r7}
 800344a:	b089      	sub	sp, #36	; 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800345a:	2300      	movs	r3, #0
 800345c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	e165      	b.n	8003730 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003464:	2201      	movs	r2, #1
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	429a      	cmp	r2, r3
 800347e:	f040 8154 	bne.w	800372a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d005      	beq.n	800349a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003496:	2b02      	cmp	r3, #2
 8003498:	d130      	bne.n	80034fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	2203      	movs	r2, #3
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034d0:	2201      	movs	r2, #1
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 0201 	and.w	r2, r3, #1
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b03      	cmp	r3, #3
 8003506:	d017      	beq.n	8003538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	2203      	movs	r2, #3
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d123      	bne.n	800358c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	08da      	lsrs	r2, r3, #3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3208      	adds	r2, #8
 800354c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	220f      	movs	r2, #15
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	08da      	lsrs	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3208      	adds	r2, #8
 8003586:	69b9      	ldr	r1, [r7, #24]
 8003588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	2203      	movs	r2, #3
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0203 	and.w	r2, r3, #3
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80ae 	beq.w	800372a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	4b5d      	ldr	r3, [pc, #372]	; (8003748 <HAL_GPIO_Init+0x300>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	4a5c      	ldr	r2, [pc, #368]	; (8003748 <HAL_GPIO_Init+0x300>)
 80035d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035dc:	6453      	str	r3, [r2, #68]	; 0x44
 80035de:	4b5a      	ldr	r3, [pc, #360]	; (8003748 <HAL_GPIO_Init+0x300>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ea:	4a58      	ldr	r2, [pc, #352]	; (800374c <HAL_GPIO_Init+0x304>)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	3302      	adds	r3, #2
 80035f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	220f      	movs	r2, #15
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4f      	ldr	r2, [pc, #316]	; (8003750 <HAL_GPIO_Init+0x308>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d025      	beq.n	8003662 <HAL_GPIO_Init+0x21a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4e      	ldr	r2, [pc, #312]	; (8003754 <HAL_GPIO_Init+0x30c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01f      	beq.n	800365e <HAL_GPIO_Init+0x216>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4d      	ldr	r2, [pc, #308]	; (8003758 <HAL_GPIO_Init+0x310>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d019      	beq.n	800365a <HAL_GPIO_Init+0x212>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4c      	ldr	r2, [pc, #304]	; (800375c <HAL_GPIO_Init+0x314>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_GPIO_Init+0x20e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4b      	ldr	r2, [pc, #300]	; (8003760 <HAL_GPIO_Init+0x318>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00d      	beq.n	8003652 <HAL_GPIO_Init+0x20a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a4a      	ldr	r2, [pc, #296]	; (8003764 <HAL_GPIO_Init+0x31c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <HAL_GPIO_Init+0x206>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a49      	ldr	r2, [pc, #292]	; (8003768 <HAL_GPIO_Init+0x320>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_GPIO_Init+0x202>
 8003646:	2306      	movs	r3, #6
 8003648:	e00c      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 800364a:	2307      	movs	r3, #7
 800364c:	e00a      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 800364e:	2305      	movs	r3, #5
 8003650:	e008      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 8003652:	2304      	movs	r3, #4
 8003654:	e006      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 8003656:	2303      	movs	r3, #3
 8003658:	e004      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 800365a:	2302      	movs	r3, #2
 800365c:	e002      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_GPIO_Init+0x21c>
 8003662:	2300      	movs	r3, #0
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	f002 0203 	and.w	r2, r2, #3
 800366a:	0092      	lsls	r2, r2, #2
 800366c:	4093      	lsls	r3, r2
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003674:	4935      	ldr	r1, [pc, #212]	; (800374c <HAL_GPIO_Init+0x304>)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	3302      	adds	r3, #2
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003682:	4b3a      	ldr	r3, [pc, #232]	; (800376c <HAL_GPIO_Init+0x324>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036a6:	4a31      	ldr	r2, [pc, #196]	; (800376c <HAL_GPIO_Init+0x324>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036ac:	4b2f      	ldr	r3, [pc, #188]	; (800376c <HAL_GPIO_Init+0x324>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036d0:	4a26      	ldr	r2, [pc, #152]	; (800376c <HAL_GPIO_Init+0x324>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036d6:	4b25      	ldr	r3, [pc, #148]	; (800376c <HAL_GPIO_Init+0x324>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036fa:	4a1c      	ldr	r2, [pc, #112]	; (800376c <HAL_GPIO_Init+0x324>)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003700:	4b1a      	ldr	r3, [pc, #104]	; (800376c <HAL_GPIO_Init+0x324>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003724:	4a11      	ldr	r2, [pc, #68]	; (800376c <HAL_GPIO_Init+0x324>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3301      	adds	r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	f67f ae96 	bls.w	8003464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	3724      	adds	r7, #36	; 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	40013800 	.word	0x40013800
 8003750:	40020000 	.word	0x40020000
 8003754:	40020400 	.word	0x40020400
 8003758:	40020800 	.word	0x40020800
 800375c:	40020c00 	.word	0x40020c00
 8003760:	40021000 	.word	0x40021000
 8003764:	40021400 	.word	0x40021400
 8003768:	40021800 	.word	0x40021800
 800376c:	40013c00 	.word	0x40013c00

08003770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]
 800377c:	4613      	mov	r3, r2
 800377e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003780:	787b      	ldrb	r3, [r7, #1]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800378c:	e003      	b.n	8003796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	041a      	lsls	r2, r3, #16
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	619a      	str	r2, [r3, #24]
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0cc      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b8:	4b68      	ldr	r3, [pc, #416]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d90c      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b65      	ldr	r3, [pc, #404]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b63      	ldr	r3, [pc, #396]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0b8      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f8:	4b59      	ldr	r3, [pc, #356]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a58      	ldr	r2, [pc, #352]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003810:	4b53      	ldr	r3, [pc, #332]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a52      	ldr	r2, [pc, #328]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800381a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381c:	4b50      	ldr	r3, [pc, #320]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	494d      	ldr	r1, [pc, #308]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d044      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	4b47      	ldr	r3, [pc, #284]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d119      	bne.n	8003882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e07f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d003      	beq.n	8003862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800385e:	2b03      	cmp	r3, #3
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003862:	4b3f      	ldr	r3, [pc, #252]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e06f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003872:	4b3b      	ldr	r3, [pc, #236]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e067      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003882:	4b37      	ldr	r3, [pc, #220]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f023 0203 	bic.w	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4934      	ldr	r1, [pc, #208]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003894:	f7ff fcc6 	bl	8003224 <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	e00a      	b.n	80038b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800389c:	f7ff fcc2 	bl	8003224 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e04f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 020c 	and.w	r2, r3, #12
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d1eb      	bne.n	800389c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c4:	4b25      	ldr	r3, [pc, #148]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d20c      	bcs.n	80038ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b22      	ldr	r3, [pc, #136]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e032      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f8:	4b19      	ldr	r3, [pc, #100]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4916      	ldr	r1, [pc, #88]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	490e      	ldr	r1, [pc, #56]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800392a:	f000 f887 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 800392e:	4602      	mov	r2, r0
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	490a      	ldr	r1, [pc, #40]	; (8003964 <HAL_RCC_ClockConfig+0x1c0>)
 800393c:	5ccb      	ldrb	r3, [r1, r3]
 800393e:	fa22 f303 	lsr.w	r3, r2, r3
 8003942:	4a09      	ldr	r2, [pc, #36]	; (8003968 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x1c8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fa8a 	bl	8002e64 <HAL_InitTick>

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023c00 	.word	0x40023c00
 8003960:	40023800 	.word	0x40023800
 8003964:	08008d60 	.word	0x08008d60
 8003968:	2000000c 	.word	0x2000000c
 800396c:	20000010 	.word	0x20000010

08003970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <HAL_RCC_GetHCLKFreq+0x14>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	2000000c 	.word	0x2000000c

08003988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800398c:	f7ff fff0 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0a9b      	lsrs	r3, r3, #10
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4903      	ldr	r1, [pc, #12]	; (80039ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	08008d70 	.word	0x08008d70

080039b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039b4:	f7ff ffdc 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0b5b      	lsrs	r3, r3, #13
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4903      	ldr	r1, [pc, #12]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	08008d70 	.word	0x08008d70

080039d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	220f      	movs	r2, #15
 80039e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0203 	and.w	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	08db      	lsrs	r3, r3, #3
 8003a12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <HAL_RCC_GetClockConfig+0x60>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 020f 	and.w	r2, r3, #15
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	601a      	str	r2, [r3, #0]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40023c00 	.word	0x40023c00

08003a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a40:	b0ae      	sub	sp, #184	; 0xb8
 8003a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a62:	4bcb      	ldr	r3, [pc, #812]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	f200 8206 	bhi.w	8003e7c <HAL_RCC_GetSysClockFreq+0x440>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003aad 	.word	0x08003aad
 8003a7c:	08003e7d 	.word	0x08003e7d
 8003a80:	08003e7d 	.word	0x08003e7d
 8003a84:	08003e7d 	.word	0x08003e7d
 8003a88:	08003ab5 	.word	0x08003ab5
 8003a8c:	08003e7d 	.word	0x08003e7d
 8003a90:	08003e7d 	.word	0x08003e7d
 8003a94:	08003e7d 	.word	0x08003e7d
 8003a98:	08003abd 	.word	0x08003abd
 8003a9c:	08003e7d 	.word	0x08003e7d
 8003aa0:	08003e7d 	.word	0x08003e7d
 8003aa4:	08003e7d 	.word	0x08003e7d
 8003aa8:	08003cad 	.word	0x08003cad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aac:	4bb9      	ldr	r3, [pc, #740]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x358>)
 8003aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003ab2:	e1e7      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ab4:	4bb8      	ldr	r3, [pc, #736]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003aba:	e1e3      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003abc:	4bb4      	ldr	r3, [pc, #720]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ac8:	4bb1      	ldr	r3, [pc, #708]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d071      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad4:	4bae      	ldr	r3, [pc, #696]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	099b      	lsrs	r3, r3, #6
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ae0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003af6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003afa:	4622      	mov	r2, r4
 8003afc:	462b      	mov	r3, r5
 8003afe:	f04f 0000 	mov.w	r0, #0
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	0159      	lsls	r1, r3, #5
 8003b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b0c:	0150      	lsls	r0, r2, #5
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4621      	mov	r1, r4
 8003b14:	1a51      	subs	r1, r2, r1
 8003b16:	6439      	str	r1, [r7, #64]	; 0x40
 8003b18:	4629      	mov	r1, r5
 8003b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003b2c:	4649      	mov	r1, r9
 8003b2e:	018b      	lsls	r3, r1, #6
 8003b30:	4641      	mov	r1, r8
 8003b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b36:	4641      	mov	r1, r8
 8003b38:	018a      	lsls	r2, r1, #6
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	1a51      	subs	r1, r2, r1
 8003b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b40:	4649      	mov	r1, r9
 8003b42:	eb63 0301 	sbc.w	r3, r3, r1
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003b54:	4649      	mov	r1, r9
 8003b56:	00cb      	lsls	r3, r1, #3
 8003b58:	4641      	mov	r1, r8
 8003b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b5e:	4641      	mov	r1, r8
 8003b60:	00ca      	lsls	r2, r1, #3
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	4603      	mov	r3, r0
 8003b68:	4622      	mov	r2, r4
 8003b6a:	189b      	adds	r3, r3, r2
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6e:	462b      	mov	r3, r5
 8003b70:	460a      	mov	r2, r1
 8003b72:	eb42 0303 	adc.w	r3, r2, r3
 8003b76:	637b      	str	r3, [r7, #52]	; 0x34
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b84:	4629      	mov	r1, r5
 8003b86:	024b      	lsls	r3, r1, #9
 8003b88:	4621      	mov	r1, r4
 8003b8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b8e:	4621      	mov	r1, r4
 8003b90:	024a      	lsls	r2, r1, #9
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ba0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ba4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003ba8:	f7fd f86e 	bl	8000c88 <__aeabi_uldivmod>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bb6:	e067      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb8:	4b75      	ldr	r3, [pc, #468]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	099b      	lsrs	r3, r3, #6
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bc4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003bc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bd6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003bda:	4622      	mov	r2, r4
 8003bdc:	462b      	mov	r3, r5
 8003bde:	f04f 0000 	mov.w	r0, #0
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	0159      	lsls	r1, r3, #5
 8003be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bec:	0150      	lsls	r0, r2, #5
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	1a51      	subs	r1, r2, r1
 8003bf6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003c0c:	4649      	mov	r1, r9
 8003c0e:	018b      	lsls	r3, r1, #6
 8003c10:	4641      	mov	r1, r8
 8003c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c16:	4641      	mov	r1, r8
 8003c18:	018a      	lsls	r2, r1, #6
 8003c1a:	4641      	mov	r1, r8
 8003c1c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c20:	4649      	mov	r1, r9
 8003c22:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c3a:	4692      	mov	sl, r2
 8003c3c:	469b      	mov	fp, r3
 8003c3e:	4623      	mov	r3, r4
 8003c40:	eb1a 0303 	adds.w	r3, sl, r3
 8003c44:	623b      	str	r3, [r7, #32]
 8003c46:	462b      	mov	r3, r5
 8003c48:	eb4b 0303 	adc.w	r3, fp, r3
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	028b      	lsls	r3, r1, #10
 8003c5e:	4621      	mov	r1, r4
 8003c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c64:	4621      	mov	r1, r4
 8003c66:	028a      	lsls	r2, r1, #10
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c70:	2200      	movs	r2, #0
 8003c72:	673b      	str	r3, [r7, #112]	; 0x70
 8003c74:	677a      	str	r2, [r7, #116]	; 0x74
 8003c76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c7a:	f7fd f805 	bl	8000c88 <__aeabi_uldivmod>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4613      	mov	r3, r2
 8003c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c88:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	0c1b      	lsrs	r3, r3, #16
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	3301      	adds	r3, #1
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003caa:	e0eb      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cac:	4b38      	ldr	r3, [pc, #224]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cb8:	4b35      	ldr	r3, [pc, #212]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d06b      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc4:	4b32      	ldr	r3, [pc, #200]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	099b      	lsrs	r3, r3, #6
 8003cca:	2200      	movs	r2, #0
 8003ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8003cd8:	2300      	movs	r3, #0
 8003cda:	667b      	str	r3, [r7, #100]	; 0x64
 8003cdc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ce0:	4622      	mov	r2, r4
 8003ce2:	462b      	mov	r3, r5
 8003ce4:	f04f 0000 	mov.w	r0, #0
 8003ce8:	f04f 0100 	mov.w	r1, #0
 8003cec:	0159      	lsls	r1, r3, #5
 8003cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf2:	0150      	lsls	r0, r2, #5
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	1a51      	subs	r1, r2, r1
 8003cfc:	61b9      	str	r1, [r7, #24]
 8003cfe:	4629      	mov	r1, r5
 8003d00:	eb63 0301 	sbc.w	r3, r3, r1
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003d12:	4659      	mov	r1, fp
 8003d14:	018b      	lsls	r3, r1, #6
 8003d16:	4651      	mov	r1, sl
 8003d18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d1c:	4651      	mov	r1, sl
 8003d1e:	018a      	lsls	r2, r1, #6
 8003d20:	4651      	mov	r1, sl
 8003d22:	ebb2 0801 	subs.w	r8, r2, r1
 8003d26:	4659      	mov	r1, fp
 8003d28:	eb63 0901 	sbc.w	r9, r3, r1
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d40:	4690      	mov	r8, r2
 8003d42:	4699      	mov	r9, r3
 8003d44:	4623      	mov	r3, r4
 8003d46:	eb18 0303 	adds.w	r3, r8, r3
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	eb49 0303 	adc.w	r3, r9, r3
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d60:	4629      	mov	r1, r5
 8003d62:	024b      	lsls	r3, r1, #9
 8003d64:	4621      	mov	r1, r4
 8003d66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	024a      	lsls	r2, r1, #9
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4619      	mov	r1, r3
 8003d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d76:	2200      	movs	r2, #0
 8003d78:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d80:	f7fc ff82 	bl	8000c88 <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4613      	mov	r3, r2
 8003d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d8e:	e065      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x420>
 8003d90:	40023800 	.word	0x40023800
 8003d94:	00f42400 	.word	0x00f42400
 8003d98:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9c:	4b3d      	ldr	r3, [pc, #244]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	099b      	lsrs	r3, r3, #6
 8003da2:	2200      	movs	r2, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	4611      	mov	r1, r2
 8003da8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dac:	653b      	str	r3, [r7, #80]	; 0x50
 8003dae:	2300      	movs	r3, #0
 8003db0:	657b      	str	r3, [r7, #84]	; 0x54
 8003db2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003db6:	4642      	mov	r2, r8
 8003db8:	464b      	mov	r3, r9
 8003dba:	f04f 0000 	mov.w	r0, #0
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	0159      	lsls	r1, r3, #5
 8003dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc8:	0150      	lsls	r0, r2, #5
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4641      	mov	r1, r8
 8003dd0:	1a51      	subs	r1, r2, r1
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003de8:	4659      	mov	r1, fp
 8003dea:	018b      	lsls	r3, r1, #6
 8003dec:	4651      	mov	r1, sl
 8003dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003df2:	4651      	mov	r1, sl
 8003df4:	018a      	lsls	r2, r1, #6
 8003df6:	4651      	mov	r1, sl
 8003df8:	1a54      	subs	r4, r2, r1
 8003dfa:	4659      	mov	r1, fp
 8003dfc:	eb63 0501 	sbc.w	r5, r3, r1
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	00eb      	lsls	r3, r5, #3
 8003e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e0e:	00e2      	lsls	r2, r4, #3
 8003e10:	4614      	mov	r4, r2
 8003e12:	461d      	mov	r5, r3
 8003e14:	4643      	mov	r3, r8
 8003e16:	18e3      	adds	r3, r4, r3
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	eb45 0303 	adc.w	r3, r5, r3
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e2e:	4629      	mov	r1, r5
 8003e30:	028b      	lsls	r3, r1, #10
 8003e32:	4621      	mov	r1, r4
 8003e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e38:	4621      	mov	r1, r4
 8003e3a:	028a      	lsls	r2, r1, #10
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e44:	2200      	movs	r2, #0
 8003e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e4e:	f7fc ff1b 	bl	8000c88 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4613      	mov	r3, r2
 8003e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e5c:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	0f1b      	lsrs	r3, r3, #28
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003e6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e7a:	e003      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	37b8      	adds	r7, #184	; 0xb8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800
 8003e98:	00f42400 	.word	0x00f42400

08003e9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e28d      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8083 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ebc:	4b94      	ldr	r3, [pc, #592]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d019      	beq.n	8003efc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ec8:	4b91      	ldr	r3, [pc, #580]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ed4:	4b8e      	ldr	r3, [pc, #568]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee0:	d00c      	beq.n	8003efc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee2:	4b8b      	ldr	r3, [pc, #556]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	d112      	bne.n	8003f14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eee:	4b88      	ldr	r3, [pc, #544]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efa:	d10b      	bne.n	8003f14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efc:	4b84      	ldr	r3, [pc, #528]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d05b      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x124>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d157      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e25a      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d106      	bne.n	8003f2c <HAL_RCC_OscConfig+0x90>
 8003f1e:	4b7c      	ldr	r3, [pc, #496]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a7b      	ldr	r2, [pc, #492]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e01d      	b.n	8003f68 <HAL_RCC_OscConfig+0xcc>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0xb4>
 8003f36:	4b76      	ldr	r3, [pc, #472]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a75      	ldr	r2, [pc, #468]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4b73      	ldr	r3, [pc, #460]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a72      	ldr	r2, [pc, #456]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCC_OscConfig+0xcc>
 8003f50:	4b6f      	ldr	r3, [pc, #444]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a6e      	ldr	r2, [pc, #440]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	4b6c      	ldr	r3, [pc, #432]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a6b      	ldr	r2, [pc, #428]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d013      	beq.n	8003f98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7ff f958 	bl	8003224 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f78:	f7ff f954 	bl	8003224 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e21f      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8a:	4b61      	ldr	r3, [pc, #388]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0xdc>
 8003f96:	e014      	b.n	8003fc2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7ff f944 	bl	8003224 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa0:	f7ff f940 	bl	8003224 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e20b      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb2:	4b57      	ldr	r3, [pc, #348]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x104>
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d06f      	beq.n	80040ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fce:	4b50      	ldr	r3, [pc, #320]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d017      	beq.n	800400a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fda:	4b4d      	ldr	r3, [pc, #308]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d105      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fe6:	4b4a      	ldr	r3, [pc, #296]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff2:	4b47      	ldr	r3, [pc, #284]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ffa:	2b0c      	cmp	r3, #12
 8003ffc:	d11c      	bne.n	8004038 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ffe:	4b44      	ldr	r3, [pc, #272]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d116      	bne.n	8004038 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	4b41      	ldr	r3, [pc, #260]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_RCC_OscConfig+0x186>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d001      	beq.n	8004022 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e1d3      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4937      	ldr	r1, [pc, #220]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	e03a      	b.n	80040ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d020      	beq.n	8004082 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004040:	4b34      	ldr	r3, [pc, #208]	; (8004114 <HAL_RCC_OscConfig+0x278>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7ff f8ed 	bl	8003224 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800404e:	f7ff f8e9 	bl	8003224 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e1b4      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004060:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406c:	4b28      	ldr	r3, [pc, #160]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4925      	ldr	r1, [pc, #148]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 800407c:	4313      	orrs	r3, r2
 800407e:	600b      	str	r3, [r1, #0]
 8004080:	e015      	b.n	80040ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004082:	4b24      	ldr	r3, [pc, #144]	; (8004114 <HAL_RCC_OscConfig+0x278>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7ff f8cc 	bl	8003224 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004090:	f7ff f8c8 	bl	8003224 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e193      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a2:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d036      	beq.n	8004128 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c2:	4b15      	ldr	r3, [pc, #84]	; (8004118 <HAL_RCC_OscConfig+0x27c>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7ff f8ac 	bl	8003224 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d0:	f7ff f8a8 	bl	8003224 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e173      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_RCC_OscConfig+0x274>)
 80040e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x234>
 80040ee:	e01b      	b.n	8004128 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_OscConfig+0x27c>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f6:	f7ff f895 	bl	8003224 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fc:	e00e      	b.n	800411c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fe:	f7ff f891 	bl	8003224 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d907      	bls.n	800411c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e15c      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
 8004110:	40023800 	.word	0x40023800
 8004114:	42470000 	.word	0x42470000
 8004118:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411c:	4b8a      	ldr	r3, [pc, #552]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 800411e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1ea      	bne.n	80040fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8097 	beq.w	8004264 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413a:	4b83      	ldr	r3, [pc, #524]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10f      	bne.n	8004166 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	4b7f      	ldr	r3, [pc, #508]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	4a7e      	ldr	r2, [pc, #504]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004154:	6413      	str	r3, [r2, #64]	; 0x40
 8004156:	4b7c      	ldr	r3, [pc, #496]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004166:	4b79      	ldr	r3, [pc, #484]	; (800434c <HAL_RCC_OscConfig+0x4b0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d118      	bne.n	80041a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004172:	4b76      	ldr	r3, [pc, #472]	; (800434c <HAL_RCC_OscConfig+0x4b0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a75      	ldr	r2, [pc, #468]	; (800434c <HAL_RCC_OscConfig+0x4b0>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417e:	f7ff f851 	bl	8003224 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004186:	f7ff f84d 	bl	8003224 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e118      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	4b6c      	ldr	r3, [pc, #432]	; (800434c <HAL_RCC_OscConfig+0x4b0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d106      	bne.n	80041ba <HAL_RCC_OscConfig+0x31e>
 80041ac:	4b66      	ldr	r3, [pc, #408]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4a65      	ldr	r2, [pc, #404]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
 80041b8:	e01c      	b.n	80041f4 <HAL_RCC_OscConfig+0x358>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b05      	cmp	r3, #5
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0x340>
 80041c2:	4b61      	ldr	r3, [pc, #388]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	4a60      	ldr	r2, [pc, #384]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	f043 0304 	orr.w	r3, r3, #4
 80041cc:	6713      	str	r3, [r2, #112]	; 0x70
 80041ce:	4b5e      	ldr	r3, [pc, #376]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	4a5d      	ldr	r2, [pc, #372]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70
 80041da:	e00b      	b.n	80041f4 <HAL_RCC_OscConfig+0x358>
 80041dc:	4b5a      	ldr	r3, [pc, #360]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	4a59      	ldr	r2, [pc, #356]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	6713      	str	r3, [r2, #112]	; 0x70
 80041e8:	4b57      	ldr	r3, [pc, #348]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	4a56      	ldr	r2, [pc, #344]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 80041ee:	f023 0304 	bic.w	r3, r3, #4
 80041f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d015      	beq.n	8004228 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7ff f812 	bl	8003224 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7ff f80e 	bl	8003224 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0d7      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421a:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0ee      	beq.n	8004204 <HAL_RCC_OscConfig+0x368>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fe fffc 	bl	8003224 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422e:	e00a      	b.n	8004246 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004230:	f7fe fff8 	bl	8003224 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	; 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e0c1      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004246:	4b40      	ldr	r3, [pc, #256]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1ee      	bne.n	8004230 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d105      	bne.n	8004264 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004258:	4b3b      	ldr	r3, [pc, #236]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	4a3a      	ldr	r2, [pc, #232]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 800425e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004262:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80ad 	beq.w	80043c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800426e:	4b36      	ldr	r3, [pc, #216]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b08      	cmp	r3, #8
 8004278:	d060      	beq.n	800433c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d145      	bne.n	800430e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004282:	4b33      	ldr	r3, [pc, #204]	; (8004350 <HAL_RCC_OscConfig+0x4b4>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fe ffcc 	bl	8003224 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004290:	f7fe ffc8 	bl	8003224 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e093      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	4b29      	ldr	r3, [pc, #164]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	019b      	lsls	r3, r3, #6
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	085b      	lsrs	r3, r3, #1
 80042c6:	3b01      	subs	r3, #1
 80042c8:	041b      	lsls	r3, r3, #16
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	061b      	lsls	r3, r3, #24
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	071b      	lsls	r3, r3, #28
 80042da:	491b      	ldr	r1, [pc, #108]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <HAL_RCC_OscConfig+0x4b4>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e6:	f7fe ff9d 	bl	8003224 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fe ff99 	bl	8003224 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e064      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x452>
 800430c:	e05c      	b.n	80043c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <HAL_RCC_OscConfig+0x4b4>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe ff86 	bl	8003224 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431c:	f7fe ff82 	bl	8003224 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e04d      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_RCC_OscConfig+0x4ac>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x480>
 800433a:	e045      	b.n	80043c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e040      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
 8004348:	40023800 	.word	0x40023800
 800434c:	40007000 	.word	0x40007000
 8004350:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004354:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <HAL_RCC_OscConfig+0x538>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d030      	beq.n	80043c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d129      	bne.n	80043c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d122      	bne.n	80043c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004384:	4013      	ands	r3, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800438a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800438c:	4293      	cmp	r3, r2
 800438e:	d119      	bne.n	80043c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	3b01      	subs	r3, #1
 800439e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d10f      	bne.n	80043c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d107      	bne.n	80043c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800

080043d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e07b      	b.n	80044e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d108      	bne.n	8004404 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fa:	d009      	beq.n	8004410 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	61da      	str	r2, [r3, #28]
 8004402:	e005      	b.n	8004410 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fe fc8a 	bl	8002d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004446:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004494:	ea42 0103 	orr.w	r1, r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0104 	and.w	r1, r3, #4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	f003 0210 	and.w	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b088      	sub	sp, #32
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_SPI_Transmit+0x22>
 8004508:	2302      	movs	r3, #2
 800450a:	e126      	b.n	800475a <HAL_SPI_Transmit+0x270>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004514:	f7fe fe86 	bl	8003224 <HAL_GetTick>
 8004518:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	d002      	beq.n	8004530 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800452a:	2302      	movs	r3, #2
 800452c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800452e:	e10b      	b.n	8004748 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_SPI_Transmit+0x52>
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004540:	e102      	b.n	8004748 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2203      	movs	r2, #3
 8004546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004588:	d10f      	bne.n	80045aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004598:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d007      	beq.n	80045c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d0:	d14b      	bne.n	800466a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_SPI_Transmit+0xf6>
 80045da:	8afb      	ldrh	r3, [r7, #22]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d13e      	bne.n	800465e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	881a      	ldrh	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	1c9a      	adds	r2, r3, #2
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004604:	e02b      	b.n	800465e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d112      	bne.n	800463a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	881a      	ldrh	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	86da      	strh	r2, [r3, #54]	; 0x36
 8004638:	e011      	b.n	800465e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800463a:	f7fe fdf3 	bl	8003224 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d803      	bhi.n	8004652 <HAL_SPI_Transmit+0x168>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004650:	d102      	bne.n	8004658 <HAL_SPI_Transmit+0x16e>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d102      	bne.n	800465e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800465c:	e074      	b.n	8004748 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ce      	bne.n	8004606 <HAL_SPI_Transmit+0x11c>
 8004668:	e04c      	b.n	8004704 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_SPI_Transmit+0x18e>
 8004672:	8afb      	ldrh	r3, [r7, #22]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d140      	bne.n	80046fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	7812      	ldrb	r2, [r2, #0]
 8004684:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800469e:	e02c      	b.n	80046fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d113      	bne.n	80046d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	7812      	ldrb	r2, [r2, #0]
 80046ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80046d4:	e011      	b.n	80046fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d6:	f7fe fda5 	bl	8003224 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d803      	bhi.n	80046ee <HAL_SPI_Transmit+0x204>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ec:	d102      	bne.n	80046f4 <HAL_SPI_Transmit+0x20a>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046f8:	e026      	b.n	8004748 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1cd      	bne.n	80046a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fbcb 	bl	8004ea4 <SPI_EndRxTxTransaction>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e000      	b.n	8004748 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004746:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004758:	7ffb      	ldrb	r3, [r7, #31]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b088      	sub	sp, #32
 8004766:	af02      	add	r7, sp, #8
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	603b      	str	r3, [r7, #0]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477e:	d112      	bne.n	80047a6 <HAL_SPI_Receive+0x44>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10e      	bne.n	80047a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2204      	movs	r2, #4
 800478c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004790:	88fa      	ldrh	r2, [r7, #6]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f8f1 	bl	8004984 <HAL_SPI_TransmitReceive>
 80047a2:	4603      	mov	r3, r0
 80047a4:	e0ea      	b.n	800497c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_SPI_Receive+0x52>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e0e3      	b.n	800497c <HAL_SPI_Receive+0x21a>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047bc:	f7fe fd32 	bl	8003224 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d002      	beq.n	80047d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80047ce:	2302      	movs	r3, #2
 80047d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047d2:	e0ca      	b.n	800496a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_SPI_Receive+0x7e>
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047e4:	e0c1      	b.n	800496a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2204      	movs	r2, #4
 80047ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	88fa      	ldrh	r2, [r7, #6]
 80047fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482c:	d10f      	bne.n	800484e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800483c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800484c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	d007      	beq.n	800486c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800486a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d162      	bne.n	800493a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004874:	e02e      	b.n	80048d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	d115      	bne.n	80048b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f103 020c 	add.w	r2, r3, #12
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048ae:	e011      	b.n	80048d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b0:	f7fe fcb8 	bl	8003224 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d803      	bhi.n	80048c8 <HAL_SPI_Receive+0x166>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048c6:	d102      	bne.n	80048ce <HAL_SPI_Receive+0x16c>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048d2:	e04a      	b.n	800496a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1cb      	bne.n	8004876 <HAL_SPI_Receive+0x114>
 80048de:	e031      	b.n	8004944 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d113      	bne.n	8004916 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	b292      	uxth	r2, r2
 80048fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	1c9a      	adds	r2, r3, #2
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004914:	e011      	b.n	800493a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004916:	f7fe fc85 	bl	8003224 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d803      	bhi.n	800492e <HAL_SPI_Receive+0x1cc>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800492c:	d102      	bne.n	8004934 <HAL_SPI_Receive+0x1d2>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004938:	e017      	b.n	800496a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1cd      	bne.n	80048e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	6839      	ldr	r1, [r7, #0]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fa45 	bl	8004dd8 <SPI_EndRxTransaction>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
 8004966:	e000      	b.n	800496a <HAL_SPI_Receive+0x208>
  }

error :
 8004968:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800497a:	7dfb      	ldrb	r3, [r7, #23]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08c      	sub	sp, #48	; 0x30
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004992:	2301      	movs	r3, #1
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_SPI_TransmitReceive+0x26>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e18a      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x33c>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b2:	f7fe fc37 	bl	8003224 <HAL_GetTick>
 80049b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049c8:	887b      	ldrh	r3, [r7, #2]
 80049ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d00f      	beq.n	80049f4 <HAL_SPI_TransmitReceive+0x70>
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049da:	d107      	bne.n	80049ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <HAL_SPI_TransmitReceive+0x68>
 80049e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d003      	beq.n	80049f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049f2:	e15b      	b.n	8004cac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0x82>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0x82>
 8004a00:	887b      	ldrh	r3, [r7, #2]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a0c:	e14e      	b.n	8004cac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d003      	beq.n	8004a22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2205      	movs	r2, #5
 8004a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	887a      	ldrh	r2, [r7, #2]
 8004a32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	887a      	ldrh	r2, [r7, #2]
 8004a44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	887a      	ldrh	r2, [r7, #2]
 8004a4a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d007      	beq.n	8004a76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7e:	d178      	bne.n	8004b72 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <HAL_SPI_TransmitReceive+0x10a>
 8004a88:	8b7b      	ldrh	r3, [r7, #26]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d166      	bne.n	8004b5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	881a      	ldrh	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	1c9a      	adds	r2, r3, #2
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab2:	e053      	b.n	8004b5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d11b      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x176>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d016      	beq.n	8004afa <HAL_SPI_TransmitReceive+0x176>
 8004acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d113      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	881a      	ldrh	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	1c9a      	adds	r2, r3, #2
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d119      	bne.n	8004b3c <HAL_SPI_TransmitReceive+0x1b8>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d014      	beq.n	8004b3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	b292      	uxth	r2, r2
 8004b1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	1c9a      	adds	r2, r3, #2
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b3c:	f7fe fb72 	bl	8003224 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d807      	bhi.n	8004b5c <HAL_SPI_TransmitReceive+0x1d8>
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b52:	d003      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b5a:	e0a7      	b.n	8004cac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1a6      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0x130>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1a1      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0x130>
 8004b70:	e07c      	b.n	8004c6c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_TransmitReceive+0x1fc>
 8004b7a:	8b7b      	ldrh	r3, [r7, #26]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d16b      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	7812      	ldrb	r2, [r2, #0]
 8004b8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba6:	e057      	b.n	8004c58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d11c      	bne.n	8004bf0 <HAL_SPI_TransmitReceive+0x26c>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d017      	beq.n	8004bf0 <HAL_SPI_TransmitReceive+0x26c>
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d114      	bne.n	8004bf0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	7812      	ldrb	r2, [r2, #0]
 8004bd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d119      	bne.n	8004c32 <HAL_SPI_TransmitReceive+0x2ae>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d014      	beq.n	8004c32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c32:	f7fe faf7 	bl	8003224 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d803      	bhi.n	8004c4a <HAL_SPI_TransmitReceive+0x2c6>
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c48:	d102      	bne.n	8004c50 <HAL_SPI_TransmitReceive+0x2cc>
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d103      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c56:	e029      	b.n	8004cac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1a2      	bne.n	8004ba8 <HAL_SPI_TransmitReceive+0x224>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d19d      	bne.n	8004ba8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f917 	bl	8004ea4 <SPI_EndRxTxTransaction>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d006      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c88:	e010      	b.n	8004cac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10b      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	e000      	b.n	8004cac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004caa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3730      	adds	r7, #48	; 0x30
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cd8:	f7fe faa4 	bl	8003224 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ce8:	f7fe fa9c 	bl	8003224 <HAL_GetTick>
 8004cec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cee:	4b39      	ldr	r3, [pc, #228]	; (8004dd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	015b      	lsls	r3, r3, #5
 8004cf4:	0d1b      	lsrs	r3, r3, #20
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cfe:	e054      	b.n	8004daa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d06:	d050      	beq.n	8004daa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d08:	f7fe fa8c 	bl	8003224 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d902      	bls.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d13d      	bne.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d36:	d111      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d40:	d004      	beq.n	8004d4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4a:	d107      	bne.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d64:	d10f      	bne.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e017      	b.n	8004dca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	bf0c      	ite	eq
 8004dba:	2301      	moveq	r3, #1
 8004dbc:	2300      	movne	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d19b      	bne.n	8004d00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	2000000c 	.word	0x2000000c

08004dd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dec:	d111      	bne.n	8004e12 <SPI_EndRxTransaction+0x3a>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df6:	d004      	beq.n	8004e02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e00:	d107      	bne.n	8004e12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1a:	d12a      	bne.n	8004e72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e24:	d012      	beq.n	8004e4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2180      	movs	r1, #128	; 0x80
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff ff49 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02d      	beq.n	8004e98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e026      	b.n	8004e9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2200      	movs	r2, #0
 8004e54:	2101      	movs	r1, #1
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7ff ff36 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01a      	beq.n	8004e98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e013      	b.n	8004e9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff ff23 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8c:	f043 0220 	orr.w	r2, r3, #32
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e000      	b.n	8004e9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <SPI_EndRxTxTransaction+0x7c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <SPI_EndRxTxTransaction+0x80>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	0d5b      	lsrs	r3, r3, #21
 8004ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ec0:	fb02 f303 	mul.w	r3, r2, r3
 8004ec4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ece:	d112      	bne.n	8004ef6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2180      	movs	r1, #128	; 0x80
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff fef4 	bl	8004cc8 <SPI_WaitFlagStateUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d016      	beq.n	8004f14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	f043 0220 	orr.w	r2, r3, #32
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e00f      	b.n	8004f16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0c:	2b80      	cmp	r3, #128	; 0x80
 8004f0e:	d0f2      	beq.n	8004ef6 <SPI_EndRxTxTransaction+0x52>
 8004f10:	e000      	b.n	8004f14 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f12:	bf00      	nop
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	2000000c 	.word	0x2000000c
 8004f24:	165e9f81 	.word	0x165e9f81

08004f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e041      	b.n	8004fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f839 	bl	8004fc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f000 f9d8 	bl	800531c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d001      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e04e      	b.n	8005092 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a23      	ldr	r2, [pc, #140]	; (80050a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d022      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501e:	d01d      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1f      	ldr	r2, [pc, #124]	; (80050a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d018      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1e      	ldr	r2, [pc, #120]	; (80050a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d013      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1c      	ldr	r2, [pc, #112]	; (80050ac <HAL_TIM_Base_Start_IT+0xd0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00e      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1b      	ldr	r2, [pc, #108]	; (80050b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d009      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a19      	ldr	r2, [pc, #100]	; (80050b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d004      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x80>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a18      	ldr	r2, [pc, #96]	; (80050b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d111      	bne.n	8005080 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b06      	cmp	r3, #6
 800506c:	d010      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0201 	orr.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	e007      	b.n	8005090 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40000c00 	.word	0x40000c00
 80050b0:	40010400 	.word	0x40010400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40001800 	.word	0x40001800

080050bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d122      	bne.n	8005118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d11b      	bne.n	8005118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0202 	mvn.w	r2, #2
 80050e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f8ee 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f8e0 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f8f1 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b04      	cmp	r3, #4
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b04      	cmp	r3, #4
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0204 	mvn.w	r2, #4
 800513c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f8c4 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8b6 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8c7 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b08      	cmp	r3, #8
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b08      	cmp	r3, #8
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0208 	mvn.w	r2, #8
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2204      	movs	r2, #4
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f89a 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f88c 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f89d 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0210 	mvn.w	r2, #16
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2208      	movs	r2, #8
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f870 	bl	80052e0 <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f862 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f873 	bl	80052f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b01      	cmp	r3, #1
 8005220:	d10e      	bne.n	8005240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	d107      	bne.n	8005240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0201 	mvn.w	r2, #1
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fd fd42 	bl	8002cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524a:	2b80      	cmp	r3, #128	; 0x80
 800524c:	d10e      	bne.n	800526c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005258:	2b80      	cmp	r3, #128	; 0x80
 800525a:	d107      	bne.n	800526c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f902 	bl	8005470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005276:	2b40      	cmp	r3, #64	; 0x40
 8005278:	d10e      	bne.n	8005298 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005284:	2b40      	cmp	r3, #64	; 0x40
 8005286:	d107      	bne.n	8005298 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f838 	bl	8005308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d10e      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d107      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0220 	mvn.w	r2, #32
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f8cc 	bl	800545c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c4:	bf00      	nop
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a40      	ldr	r2, [pc, #256]	; (8005430 <TIM_Base_SetConfig+0x114>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <TIM_Base_SetConfig+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533a:	d00f      	beq.n	800535c <TIM_Base_SetConfig+0x40>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a3d      	ldr	r2, [pc, #244]	; (8005434 <TIM_Base_SetConfig+0x118>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00b      	beq.n	800535c <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a3c      	ldr	r2, [pc, #240]	; (8005438 <TIM_Base_SetConfig+0x11c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d007      	beq.n	800535c <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a3b      	ldr	r2, [pc, #236]	; (800543c <TIM_Base_SetConfig+0x120>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d003      	beq.n	800535c <TIM_Base_SetConfig+0x40>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a3a      	ldr	r2, [pc, #232]	; (8005440 <TIM_Base_SetConfig+0x124>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d108      	bne.n	800536e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a2f      	ldr	r2, [pc, #188]	; (8005430 <TIM_Base_SetConfig+0x114>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d02b      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537c:	d027      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2c      	ldr	r2, [pc, #176]	; (8005434 <TIM_Base_SetConfig+0x118>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d023      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2b      	ldr	r2, [pc, #172]	; (8005438 <TIM_Base_SetConfig+0x11c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01f      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2a      	ldr	r2, [pc, #168]	; (800543c <TIM_Base_SetConfig+0x120>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d01b      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a29      	ldr	r2, [pc, #164]	; (8005440 <TIM_Base_SetConfig+0x124>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d017      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a28      	ldr	r2, [pc, #160]	; (8005444 <TIM_Base_SetConfig+0x128>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a27      	ldr	r2, [pc, #156]	; (8005448 <TIM_Base_SetConfig+0x12c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00f      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a26      	ldr	r2, [pc, #152]	; (800544c <TIM_Base_SetConfig+0x130>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00b      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a25      	ldr	r2, [pc, #148]	; (8005450 <TIM_Base_SetConfig+0x134>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d007      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a24      	ldr	r2, [pc, #144]	; (8005454 <TIM_Base_SetConfig+0x138>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d003      	beq.n	80053ce <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a23      	ldr	r2, [pc, #140]	; (8005458 <TIM_Base_SetConfig+0x13c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d108      	bne.n	80053e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <TIM_Base_SetConfig+0x114>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_Base_SetConfig+0xf8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a0c      	ldr	r2, [pc, #48]	; (8005440 <TIM_Base_SetConfig+0x124>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d103      	bne.n	800541c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	615a      	str	r2, [r3, #20]
}
 8005422:	bf00      	nop
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	40010400 	.word	0x40010400
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800
 8005450:	40001800 	.word	0x40001800
 8005454:	40001c00 	.word	0x40001c00
 8005458:	40002000 	.word	0x40002000

0800545c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e03f      	b.n	8005516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fd fc92 	bl	8002dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2224      	movs	r2, #36	; 0x24
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f929 	bl	8005720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695a      	ldr	r2, [r3, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b08a      	sub	sp, #40	; 0x28
 8005522:	af02      	add	r7, sp, #8
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	603b      	str	r3, [r7, #0]
 800552a:	4613      	mov	r3, r2
 800552c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b20      	cmp	r3, #32
 800553c:	d17c      	bne.n	8005638 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <HAL_UART_Transmit+0x2c>
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e075      	b.n	800563a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_UART_Transmit+0x3e>
 8005558:	2302      	movs	r3, #2
 800555a:	e06e      	b.n	800563a <HAL_UART_Transmit+0x11c>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2221      	movs	r2, #33	; 0x21
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005572:	f7fd fe57 	bl	8003224 <HAL_GetTick>
 8005576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	88fa      	ldrh	r2, [r7, #6]
 800557c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	88fa      	ldrh	r2, [r7, #6]
 8005582:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558c:	d108      	bne.n	80055a0 <HAL_UART_Transmit+0x82>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d104      	bne.n	80055a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	e003      	b.n	80055a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055b0:	e02a      	b.n	8005608 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2200      	movs	r2, #0
 80055ba:	2180      	movs	r1, #128	; 0x80
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f840 	bl	8005642 <UART_WaitOnFlagUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e036      	b.n	800563a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10b      	bne.n	80055ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	3302      	adds	r3, #2
 80055e6:	61bb      	str	r3, [r7, #24]
 80055e8:	e007      	b.n	80055fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	3301      	adds	r3, #1
 80055f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1cf      	bne.n	80055b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2200      	movs	r2, #0
 800561a:	2140      	movs	r1, #64	; 0x40
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f810 	bl	8005642 <UART_WaitOnFlagUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e006      	b.n	800563a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e000      	b.n	800563a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005638:	2302      	movs	r3, #2
  }
}
 800563a:	4618      	mov	r0, r3
 800563c:	3720      	adds	r7, #32
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b090      	sub	sp, #64	; 0x40
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	603b      	str	r3, [r7, #0]
 800564e:	4613      	mov	r3, r2
 8005650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005652:	e050      	b.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800565a:	d04c      	beq.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800565c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <UART_WaitOnFlagUntilTimeout+0x30>
 8005662:	f7fd fddf 	bl	8003224 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800566e:	429a      	cmp	r2, r3
 8005670:	d241      	bcs.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	330c      	adds	r3, #12
 8005690:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005692:	637a      	str	r2, [r7, #52]	; 0x34
 8005694:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e5      	bne.n	8005672 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3314      	adds	r3, #20
 80056ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	613b      	str	r3, [r7, #16]
   return(result);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3314      	adds	r3, #20
 80056c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056c6:	623a      	str	r2, [r7, #32]
 80056c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	69f9      	ldr	r1, [r7, #28]
 80056cc:	6a3a      	ldr	r2, [r7, #32]
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e5      	bne.n	80056a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e00f      	b.n	8005716 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4013      	ands	r3, r2
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	429a      	cmp	r2, r3
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	429a      	cmp	r2, r3
 8005712:	d09f      	beq.n	8005654 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3740      	adds	r7, #64	; 0x40
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005724:	b0c0      	sub	sp, #256	; 0x100
 8005726:	af00      	add	r7, sp, #0
 8005728:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573c:	68d9      	ldr	r1, [r3, #12]
 800573e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	ea40 0301 	orr.w	r3, r0, r1
 8005748:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	431a      	orrs	r2, r3
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	431a      	orrs	r2, r3
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005778:	f021 010c 	bic.w	r1, r1, #12
 800577c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005786:	430b      	orrs	r3, r1
 8005788:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579a:	6999      	ldr	r1, [r3, #24]
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	ea40 0301 	orr.w	r3, r0, r1
 80057a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4b8f      	ldr	r3, [pc, #572]	; (80059ec <UART_SetConfig+0x2cc>)
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d005      	beq.n	80057c0 <UART_SetConfig+0xa0>
 80057b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b8d      	ldr	r3, [pc, #564]	; (80059f0 <UART_SetConfig+0x2d0>)
 80057bc:	429a      	cmp	r2, r3
 80057be:	d104      	bne.n	80057ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057c0:	f7fe f8f6 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 80057c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80057c8:	e003      	b.n	80057d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ca:	f7fe f8dd 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 80057ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057dc:	f040 810c 	bne.w	80059f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057e4:	2200      	movs	r2, #0
 80057e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057f2:	4622      	mov	r2, r4
 80057f4:	462b      	mov	r3, r5
 80057f6:	1891      	adds	r1, r2, r2
 80057f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80057fa:	415b      	adcs	r3, r3
 80057fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005802:	4621      	mov	r1, r4
 8005804:	eb12 0801 	adds.w	r8, r2, r1
 8005808:	4629      	mov	r1, r5
 800580a:	eb43 0901 	adc.w	r9, r3, r1
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800581a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800581e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005822:	4690      	mov	r8, r2
 8005824:	4699      	mov	r9, r3
 8005826:	4623      	mov	r3, r4
 8005828:	eb18 0303 	adds.w	r3, r8, r3
 800582c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005830:	462b      	mov	r3, r5
 8005832:	eb49 0303 	adc.w	r3, r9, r3
 8005836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005846:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800584a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800584e:	460b      	mov	r3, r1
 8005850:	18db      	adds	r3, r3, r3
 8005852:	653b      	str	r3, [r7, #80]	; 0x50
 8005854:	4613      	mov	r3, r2
 8005856:	eb42 0303 	adc.w	r3, r2, r3
 800585a:	657b      	str	r3, [r7, #84]	; 0x54
 800585c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005860:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005864:	f7fb fa10 	bl	8000c88 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4b61      	ldr	r3, [pc, #388]	; (80059f4 <UART_SetConfig+0x2d4>)
 800586e:	fba3 2302 	umull	r2, r3, r3, r2
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	011c      	lsls	r4, r3, #4
 8005876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587a:	2200      	movs	r2, #0
 800587c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005880:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005884:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005888:	4642      	mov	r2, r8
 800588a:	464b      	mov	r3, r9
 800588c:	1891      	adds	r1, r2, r2
 800588e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005890:	415b      	adcs	r3, r3
 8005892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005894:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005898:	4641      	mov	r1, r8
 800589a:	eb12 0a01 	adds.w	sl, r2, r1
 800589e:	4649      	mov	r1, r9
 80058a0:	eb43 0b01 	adc.w	fp, r3, r1
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058b8:	4692      	mov	sl, r2
 80058ba:	469b      	mov	fp, r3
 80058bc:	4643      	mov	r3, r8
 80058be:	eb1a 0303 	adds.w	r3, sl, r3
 80058c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058c6:	464b      	mov	r3, r9
 80058c8:	eb4b 0303 	adc.w	r3, fp, r3
 80058cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058e4:	460b      	mov	r3, r1
 80058e6:	18db      	adds	r3, r3, r3
 80058e8:	643b      	str	r3, [r7, #64]	; 0x40
 80058ea:	4613      	mov	r3, r2
 80058ec:	eb42 0303 	adc.w	r3, r2, r3
 80058f0:	647b      	str	r3, [r7, #68]	; 0x44
 80058f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058fa:	f7fb f9c5 	bl	8000c88 <__aeabi_uldivmod>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4611      	mov	r1, r2
 8005904:	4b3b      	ldr	r3, [pc, #236]	; (80059f4 <UART_SetConfig+0x2d4>)
 8005906:	fba3 2301 	umull	r2, r3, r3, r1
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	2264      	movs	r2, #100	; 0x64
 800590e:	fb02 f303 	mul.w	r3, r2, r3
 8005912:	1acb      	subs	r3, r1, r3
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800591a:	4b36      	ldr	r3, [pc, #216]	; (80059f4 <UART_SetConfig+0x2d4>)
 800591c:	fba3 2302 	umull	r2, r3, r3, r2
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005928:	441c      	add	r4, r3
 800592a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800592e:	2200      	movs	r2, #0
 8005930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005934:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005938:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	1891      	adds	r1, r2, r2
 8005942:	63b9      	str	r1, [r7, #56]	; 0x38
 8005944:	415b      	adcs	r3, r3
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800594c:	4641      	mov	r1, r8
 800594e:	1851      	adds	r1, r2, r1
 8005950:	6339      	str	r1, [r7, #48]	; 0x30
 8005952:	4649      	mov	r1, r9
 8005954:	414b      	adcs	r3, r1
 8005956:	637b      	str	r3, [r7, #52]	; 0x34
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005964:	4659      	mov	r1, fp
 8005966:	00cb      	lsls	r3, r1, #3
 8005968:	4651      	mov	r1, sl
 800596a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800596e:	4651      	mov	r1, sl
 8005970:	00ca      	lsls	r2, r1, #3
 8005972:	4610      	mov	r0, r2
 8005974:	4619      	mov	r1, r3
 8005976:	4603      	mov	r3, r0
 8005978:	4642      	mov	r2, r8
 800597a:	189b      	adds	r3, r3, r2
 800597c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005980:	464b      	mov	r3, r9
 8005982:	460a      	mov	r2, r1
 8005984:	eb42 0303 	adc.w	r3, r2, r3
 8005988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005998:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800599c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80059a0:	460b      	mov	r3, r1
 80059a2:	18db      	adds	r3, r3, r3
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a6:	4613      	mov	r3, r2
 80059a8:	eb42 0303 	adc.w	r3, r2, r3
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80059b6:	f7fb f967 	bl	8000c88 <__aeabi_uldivmod>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <UART_SetConfig+0x2d4>)
 80059c0:	fba3 1302 	umull	r1, r3, r3, r2
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	2164      	movs	r1, #100	; 0x64
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	3332      	adds	r3, #50	; 0x32
 80059d2:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <UART_SetConfig+0x2d4>)
 80059d4:	fba2 2303 	umull	r2, r3, r2, r3
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	f003 0207 	and.w	r2, r3, #7
 80059de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4422      	add	r2, r4
 80059e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059e8:	e106      	b.n	8005bf8 <UART_SetConfig+0x4d8>
 80059ea:	bf00      	nop
 80059ec:	40011000 	.word	0x40011000
 80059f0:	40011400 	.word	0x40011400
 80059f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a0a:	4642      	mov	r2, r8
 8005a0c:	464b      	mov	r3, r9
 8005a0e:	1891      	adds	r1, r2, r2
 8005a10:	6239      	str	r1, [r7, #32]
 8005a12:	415b      	adcs	r3, r3
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
 8005a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a1a:	4641      	mov	r1, r8
 8005a1c:	1854      	adds	r4, r2, r1
 8005a1e:	4649      	mov	r1, r9
 8005a20:	eb43 0501 	adc.w	r5, r3, r1
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	00eb      	lsls	r3, r5, #3
 8005a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a32:	00e2      	lsls	r2, r4, #3
 8005a34:	4614      	mov	r4, r2
 8005a36:	461d      	mov	r5, r3
 8005a38:	4643      	mov	r3, r8
 8005a3a:	18e3      	adds	r3, r4, r3
 8005a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a40:	464b      	mov	r3, r9
 8005a42:	eb45 0303 	adc.w	r3, r5, r3
 8005a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a66:	4629      	mov	r1, r5
 8005a68:	008b      	lsls	r3, r1, #2
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a70:	4621      	mov	r1, r4
 8005a72:	008a      	lsls	r2, r1, #2
 8005a74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a78:	f7fb f906 	bl	8000c88 <__aeabi_uldivmod>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4b60      	ldr	r3, [pc, #384]	; (8005c04 <UART_SetConfig+0x4e4>)
 8005a82:	fba3 2302 	umull	r2, r3, r3, r2
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	011c      	lsls	r4, r3, #4
 8005a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	464b      	mov	r3, r9
 8005aa0:	1891      	adds	r1, r2, r2
 8005aa2:	61b9      	str	r1, [r7, #24]
 8005aa4:	415b      	adcs	r3, r3
 8005aa6:	61fb      	str	r3, [r7, #28]
 8005aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aac:	4641      	mov	r1, r8
 8005aae:	1851      	adds	r1, r2, r1
 8005ab0:	6139      	str	r1, [r7, #16]
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	414b      	adcs	r3, r1
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ac4:	4659      	mov	r1, fp
 8005ac6:	00cb      	lsls	r3, r1, #3
 8005ac8:	4651      	mov	r1, sl
 8005aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ace:	4651      	mov	r1, sl
 8005ad0:	00ca      	lsls	r2, r1, #3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4642      	mov	r2, r8
 8005ada:	189b      	adds	r3, r3, r2
 8005adc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	460a      	mov	r2, r1
 8005ae4:	eb42 0303 	adc.w	r3, r2, r3
 8005ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005af6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b04:	4649      	mov	r1, r9
 8005b06:	008b      	lsls	r3, r1, #2
 8005b08:	4641      	mov	r1, r8
 8005b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b0e:	4641      	mov	r1, r8
 8005b10:	008a      	lsls	r2, r1, #2
 8005b12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b16:	f7fb f8b7 	bl	8000c88 <__aeabi_uldivmod>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4b38      	ldr	r3, [pc, #224]	; (8005c04 <UART_SetConfig+0x4e4>)
 8005b22:	fba3 2301 	umull	r2, r3, r3, r1
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	2264      	movs	r2, #100	; 0x64
 8005b2a:	fb02 f303 	mul.w	r3, r2, r3
 8005b2e:	1acb      	subs	r3, r1, r3
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	3332      	adds	r3, #50	; 0x32
 8005b34:	4a33      	ldr	r2, [pc, #204]	; (8005c04 <UART_SetConfig+0x4e4>)
 8005b36:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b40:	441c      	add	r4, r3
 8005b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b46:	2200      	movs	r2, #0
 8005b48:	673b      	str	r3, [r7, #112]	; 0x70
 8005b4a:	677a      	str	r2, [r7, #116]	; 0x74
 8005b4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b50:	4642      	mov	r2, r8
 8005b52:	464b      	mov	r3, r9
 8005b54:	1891      	adds	r1, r2, r2
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	415b      	adcs	r3, r3
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b60:	4641      	mov	r1, r8
 8005b62:	1851      	adds	r1, r2, r1
 8005b64:	6039      	str	r1, [r7, #0]
 8005b66:	4649      	mov	r1, r9
 8005b68:	414b      	adcs	r3, r1
 8005b6a:	607b      	str	r3, [r7, #4]
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b78:	4659      	mov	r1, fp
 8005b7a:	00cb      	lsls	r3, r1, #3
 8005b7c:	4651      	mov	r1, sl
 8005b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b82:	4651      	mov	r1, sl
 8005b84:	00ca      	lsls	r2, r1, #3
 8005b86:	4610      	mov	r0, r2
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	189b      	adds	r3, r3, r2
 8005b90:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b92:	464b      	mov	r3, r9
 8005b94:	460a      	mov	r2, r1
 8005b96:	eb42 0303 	adc.w	r3, r2, r3
 8005b9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ba6:	667a      	str	r2, [r7, #100]	; 0x64
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	008b      	lsls	r3, r1, #2
 8005bb8:	4641      	mov	r1, r8
 8005bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bbe:	4641      	mov	r1, r8
 8005bc0:	008a      	lsls	r2, r1, #2
 8005bc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005bc6:	f7fb f85f 	bl	8000c88 <__aeabi_uldivmod>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <UART_SetConfig+0x4e4>)
 8005bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	2164      	movs	r1, #100	; 0x64
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	3332      	adds	r3, #50	; 0x32
 8005be2:	4a08      	ldr	r2, [pc, #32]	; (8005c04 <UART_SetConfig+0x4e4>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	f003 020f 	and.w	r2, r3, #15
 8005bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4422      	add	r2, r4
 8005bf6:	609a      	str	r2, [r3, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c04:	51eb851f 	.word	0x51eb851f

08005c08 <__cvt>:
 8005c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c0c:	ec55 4b10 	vmov	r4, r5, d0
 8005c10:	2d00      	cmp	r5, #0
 8005c12:	460e      	mov	r6, r1
 8005c14:	4619      	mov	r1, r3
 8005c16:	462b      	mov	r3, r5
 8005c18:	bfbb      	ittet	lt
 8005c1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c1e:	461d      	movlt	r5, r3
 8005c20:	2300      	movge	r3, #0
 8005c22:	232d      	movlt	r3, #45	; 0x2d
 8005c24:	700b      	strb	r3, [r1, #0]
 8005c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c2c:	4691      	mov	r9, r2
 8005c2e:	f023 0820 	bic.w	r8, r3, #32
 8005c32:	bfbc      	itt	lt
 8005c34:	4622      	movlt	r2, r4
 8005c36:	4614      	movlt	r4, r2
 8005c38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c3c:	d005      	beq.n	8005c4a <__cvt+0x42>
 8005c3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c42:	d100      	bne.n	8005c46 <__cvt+0x3e>
 8005c44:	3601      	adds	r6, #1
 8005c46:	2102      	movs	r1, #2
 8005c48:	e000      	b.n	8005c4c <__cvt+0x44>
 8005c4a:	2103      	movs	r1, #3
 8005c4c:	ab03      	add	r3, sp, #12
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	ab02      	add	r3, sp, #8
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	ec45 4b10 	vmov	d0, r4, r5
 8005c58:	4653      	mov	r3, sl
 8005c5a:	4632      	mov	r2, r6
 8005c5c:	f000 fe98 	bl	8006990 <_dtoa_r>
 8005c60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c64:	4607      	mov	r7, r0
 8005c66:	d102      	bne.n	8005c6e <__cvt+0x66>
 8005c68:	f019 0f01 	tst.w	r9, #1
 8005c6c:	d022      	beq.n	8005cb4 <__cvt+0xac>
 8005c6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c72:	eb07 0906 	add.w	r9, r7, r6
 8005c76:	d110      	bne.n	8005c9a <__cvt+0x92>
 8005c78:	783b      	ldrb	r3, [r7, #0]
 8005c7a:	2b30      	cmp	r3, #48	; 0x30
 8005c7c:	d10a      	bne.n	8005c94 <__cvt+0x8c>
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2300      	movs	r3, #0
 8005c82:	4620      	mov	r0, r4
 8005c84:	4629      	mov	r1, r5
 8005c86:	f7fa ff3f 	bl	8000b08 <__aeabi_dcmpeq>
 8005c8a:	b918      	cbnz	r0, 8005c94 <__cvt+0x8c>
 8005c8c:	f1c6 0601 	rsb	r6, r6, #1
 8005c90:	f8ca 6000 	str.w	r6, [sl]
 8005c94:	f8da 3000 	ldr.w	r3, [sl]
 8005c98:	4499      	add	r9, r3
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	f7fa ff31 	bl	8000b08 <__aeabi_dcmpeq>
 8005ca6:	b108      	cbz	r0, 8005cac <__cvt+0xa4>
 8005ca8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cac:	2230      	movs	r2, #48	; 0x30
 8005cae:	9b03      	ldr	r3, [sp, #12]
 8005cb0:	454b      	cmp	r3, r9
 8005cb2:	d307      	bcc.n	8005cc4 <__cvt+0xbc>
 8005cb4:	9b03      	ldr	r3, [sp, #12]
 8005cb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cb8:	1bdb      	subs	r3, r3, r7
 8005cba:	4638      	mov	r0, r7
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	b004      	add	sp, #16
 8005cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc4:	1c59      	adds	r1, r3, #1
 8005cc6:	9103      	str	r1, [sp, #12]
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	e7f0      	b.n	8005cae <__cvt+0xa6>

08005ccc <__exponent>:
 8005ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	bfb8      	it	lt
 8005cd4:	4249      	neglt	r1, r1
 8005cd6:	f803 2b02 	strb.w	r2, [r3], #2
 8005cda:	bfb4      	ite	lt
 8005cdc:	222d      	movlt	r2, #45	; 0x2d
 8005cde:	222b      	movge	r2, #43	; 0x2b
 8005ce0:	2909      	cmp	r1, #9
 8005ce2:	7042      	strb	r2, [r0, #1]
 8005ce4:	dd2a      	ble.n	8005d3c <__exponent+0x70>
 8005ce6:	f10d 0207 	add.w	r2, sp, #7
 8005cea:	4617      	mov	r7, r2
 8005cec:	260a      	movs	r6, #10
 8005cee:	4694      	mov	ip, r2
 8005cf0:	fb91 f5f6 	sdiv	r5, r1, r6
 8005cf4:	fb06 1415 	mls	r4, r6, r5, r1
 8005cf8:	3430      	adds	r4, #48	; 0x30
 8005cfa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005cfe:	460c      	mov	r4, r1
 8005d00:	2c63      	cmp	r4, #99	; 0x63
 8005d02:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005d06:	4629      	mov	r1, r5
 8005d08:	dcf1      	bgt.n	8005cee <__exponent+0x22>
 8005d0a:	3130      	adds	r1, #48	; 0x30
 8005d0c:	f1ac 0402 	sub.w	r4, ip, #2
 8005d10:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d14:	1c41      	adds	r1, r0, #1
 8005d16:	4622      	mov	r2, r4
 8005d18:	42ba      	cmp	r2, r7
 8005d1a:	d30a      	bcc.n	8005d32 <__exponent+0x66>
 8005d1c:	f10d 0209 	add.w	r2, sp, #9
 8005d20:	eba2 020c 	sub.w	r2, r2, ip
 8005d24:	42bc      	cmp	r4, r7
 8005d26:	bf88      	it	hi
 8005d28:	2200      	movhi	r2, #0
 8005d2a:	4413      	add	r3, r2
 8005d2c:	1a18      	subs	r0, r3, r0
 8005d2e:	b003      	add	sp, #12
 8005d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d32:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005d36:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005d3a:	e7ed      	b.n	8005d18 <__exponent+0x4c>
 8005d3c:	2330      	movs	r3, #48	; 0x30
 8005d3e:	3130      	adds	r1, #48	; 0x30
 8005d40:	7083      	strb	r3, [r0, #2]
 8005d42:	70c1      	strb	r1, [r0, #3]
 8005d44:	1d03      	adds	r3, r0, #4
 8005d46:	e7f1      	b.n	8005d2c <__exponent+0x60>

08005d48 <_printf_float>:
 8005d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4c:	ed2d 8b02 	vpush	{d8}
 8005d50:	b08d      	sub	sp, #52	; 0x34
 8005d52:	460c      	mov	r4, r1
 8005d54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d58:	4616      	mov	r6, r2
 8005d5a:	461f      	mov	r7, r3
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	f000 fd4d 	bl	80067fc <_localeconv_r>
 8005d62:	f8d0 a000 	ldr.w	sl, [r0]
 8005d66:	4650      	mov	r0, sl
 8005d68:	f7fa faa2 	bl	80002b0 <strlen>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	9305      	str	r3, [sp, #20]
 8005d74:	f8d8 3000 	ldr.w	r3, [r8]
 8005d78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d7c:	3307      	adds	r3, #7
 8005d7e:	f023 0307 	bic.w	r3, r3, #7
 8005d82:	f103 0208 	add.w	r2, r3, #8
 8005d86:	f8c8 2000 	str.w	r2, [r8]
 8005d8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d92:	9307      	str	r3, [sp, #28]
 8005d94:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d98:	ee08 0a10 	vmov	s16, r0
 8005d9c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005da4:	4b9e      	ldr	r3, [pc, #632]	; (8006020 <_printf_float+0x2d8>)
 8005da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005daa:	f7fa fedf 	bl	8000b6c <__aeabi_dcmpun>
 8005dae:	bb88      	cbnz	r0, 8005e14 <_printf_float+0xcc>
 8005db0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005db4:	4b9a      	ldr	r3, [pc, #616]	; (8006020 <_printf_float+0x2d8>)
 8005db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dba:	f7fa feb9 	bl	8000b30 <__aeabi_dcmple>
 8005dbe:	bb48      	cbnz	r0, 8005e14 <_printf_float+0xcc>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	f7fa fea8 	bl	8000b1c <__aeabi_dcmplt>
 8005dcc:	b110      	cbz	r0, 8005dd4 <_printf_float+0x8c>
 8005dce:	232d      	movs	r3, #45	; 0x2d
 8005dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dd4:	4a93      	ldr	r2, [pc, #588]	; (8006024 <_printf_float+0x2dc>)
 8005dd6:	4b94      	ldr	r3, [pc, #592]	; (8006028 <_printf_float+0x2e0>)
 8005dd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ddc:	bf94      	ite	ls
 8005dde:	4690      	movls	r8, r2
 8005de0:	4698      	movhi	r8, r3
 8005de2:	2303      	movs	r3, #3
 8005de4:	6123      	str	r3, [r4, #16]
 8005de6:	9b05      	ldr	r3, [sp, #20]
 8005de8:	f023 0304 	bic.w	r3, r3, #4
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	f04f 0900 	mov.w	r9, #0
 8005df2:	9700      	str	r7, [sp, #0]
 8005df4:	4633      	mov	r3, r6
 8005df6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f000 fa8a 	bl	8006314 <_printf_common>
 8005e00:	3001      	adds	r0, #1
 8005e02:	f040 8090 	bne.w	8005f26 <_printf_float+0x1de>
 8005e06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e0a:	b00d      	add	sp, #52	; 0x34
 8005e0c:	ecbd 8b02 	vpop	{d8}
 8005e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e14:	4642      	mov	r2, r8
 8005e16:	464b      	mov	r3, r9
 8005e18:	4640      	mov	r0, r8
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	f7fa fea6 	bl	8000b6c <__aeabi_dcmpun>
 8005e20:	b140      	cbz	r0, 8005e34 <_printf_float+0xec>
 8005e22:	464b      	mov	r3, r9
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	bfbc      	itt	lt
 8005e28:	232d      	movlt	r3, #45	; 0x2d
 8005e2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e2e:	4a7f      	ldr	r2, [pc, #508]	; (800602c <_printf_float+0x2e4>)
 8005e30:	4b7f      	ldr	r3, [pc, #508]	; (8006030 <_printf_float+0x2e8>)
 8005e32:	e7d1      	b.n	8005dd8 <_printf_float+0x90>
 8005e34:	6863      	ldr	r3, [r4, #4]
 8005e36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e3a:	9206      	str	r2, [sp, #24]
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	d13f      	bne.n	8005ec0 <_printf_float+0x178>
 8005e40:	2306      	movs	r3, #6
 8005e42:	6063      	str	r3, [r4, #4]
 8005e44:	9b05      	ldr	r3, [sp, #20]
 8005e46:	6861      	ldr	r1, [r4, #4]
 8005e48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9303      	str	r3, [sp, #12]
 8005e50:	ab0a      	add	r3, sp, #40	; 0x28
 8005e52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e56:	ab09      	add	r3, sp, #36	; 0x24
 8005e58:	ec49 8b10 	vmov	d0, r8, r9
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	6022      	str	r2, [r4, #0]
 8005e60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e64:	4628      	mov	r0, r5
 8005e66:	f7ff fecf 	bl	8005c08 <__cvt>
 8005e6a:	9b06      	ldr	r3, [sp, #24]
 8005e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e6e:	2b47      	cmp	r3, #71	; 0x47
 8005e70:	4680      	mov	r8, r0
 8005e72:	d108      	bne.n	8005e86 <_printf_float+0x13e>
 8005e74:	1cc8      	adds	r0, r1, #3
 8005e76:	db02      	blt.n	8005e7e <_printf_float+0x136>
 8005e78:	6863      	ldr	r3, [r4, #4]
 8005e7a:	4299      	cmp	r1, r3
 8005e7c:	dd41      	ble.n	8005f02 <_printf_float+0x1ba>
 8005e7e:	f1ab 0302 	sub.w	r3, fp, #2
 8005e82:	fa5f fb83 	uxtb.w	fp, r3
 8005e86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e8a:	d820      	bhi.n	8005ece <_printf_float+0x186>
 8005e8c:	3901      	subs	r1, #1
 8005e8e:	465a      	mov	r2, fp
 8005e90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e94:	9109      	str	r1, [sp, #36]	; 0x24
 8005e96:	f7ff ff19 	bl	8005ccc <__exponent>
 8005e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e9c:	1813      	adds	r3, r2, r0
 8005e9e:	2a01      	cmp	r2, #1
 8005ea0:	4681      	mov	r9, r0
 8005ea2:	6123      	str	r3, [r4, #16]
 8005ea4:	dc02      	bgt.n	8005eac <_printf_float+0x164>
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	07d2      	lsls	r2, r2, #31
 8005eaa:	d501      	bpl.n	8005eb0 <_printf_float+0x168>
 8005eac:	3301      	adds	r3, #1
 8005eae:	6123      	str	r3, [r4, #16]
 8005eb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d09c      	beq.n	8005df2 <_printf_float+0xaa>
 8005eb8:	232d      	movs	r3, #45	; 0x2d
 8005eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ebe:	e798      	b.n	8005df2 <_printf_float+0xaa>
 8005ec0:	9a06      	ldr	r2, [sp, #24]
 8005ec2:	2a47      	cmp	r2, #71	; 0x47
 8005ec4:	d1be      	bne.n	8005e44 <_printf_float+0xfc>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1bc      	bne.n	8005e44 <_printf_float+0xfc>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e7b9      	b.n	8005e42 <_printf_float+0xfa>
 8005ece:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ed2:	d118      	bne.n	8005f06 <_printf_float+0x1be>
 8005ed4:	2900      	cmp	r1, #0
 8005ed6:	6863      	ldr	r3, [r4, #4]
 8005ed8:	dd0b      	ble.n	8005ef2 <_printf_float+0x1aa>
 8005eda:	6121      	str	r1, [r4, #16]
 8005edc:	b913      	cbnz	r3, 8005ee4 <_printf_float+0x19c>
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	07d0      	lsls	r0, r2, #31
 8005ee2:	d502      	bpl.n	8005eea <_printf_float+0x1a2>
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	440b      	add	r3, r1
 8005ee8:	6123      	str	r3, [r4, #16]
 8005eea:	65a1      	str	r1, [r4, #88]	; 0x58
 8005eec:	f04f 0900 	mov.w	r9, #0
 8005ef0:	e7de      	b.n	8005eb0 <_printf_float+0x168>
 8005ef2:	b913      	cbnz	r3, 8005efa <_printf_float+0x1b2>
 8005ef4:	6822      	ldr	r2, [r4, #0]
 8005ef6:	07d2      	lsls	r2, r2, #31
 8005ef8:	d501      	bpl.n	8005efe <_printf_float+0x1b6>
 8005efa:	3302      	adds	r3, #2
 8005efc:	e7f4      	b.n	8005ee8 <_printf_float+0x1a0>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e7f2      	b.n	8005ee8 <_printf_float+0x1a0>
 8005f02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f08:	4299      	cmp	r1, r3
 8005f0a:	db05      	blt.n	8005f18 <_printf_float+0x1d0>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	6121      	str	r1, [r4, #16]
 8005f10:	07d8      	lsls	r0, r3, #31
 8005f12:	d5ea      	bpl.n	8005eea <_printf_float+0x1a2>
 8005f14:	1c4b      	adds	r3, r1, #1
 8005f16:	e7e7      	b.n	8005ee8 <_printf_float+0x1a0>
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	bfd4      	ite	le
 8005f1c:	f1c1 0202 	rsble	r2, r1, #2
 8005f20:	2201      	movgt	r2, #1
 8005f22:	4413      	add	r3, r2
 8005f24:	e7e0      	b.n	8005ee8 <_printf_float+0x1a0>
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	055a      	lsls	r2, r3, #21
 8005f2a:	d407      	bmi.n	8005f3c <_printf_float+0x1f4>
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	4642      	mov	r2, r8
 8005f30:	4631      	mov	r1, r6
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b8      	blx	r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	d12c      	bne.n	8005f94 <_printf_float+0x24c>
 8005f3a:	e764      	b.n	8005e06 <_printf_float+0xbe>
 8005f3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f40:	f240 80e0 	bls.w	8006104 <_printf_float+0x3bc>
 8005f44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f7fa fddc 	bl	8000b08 <__aeabi_dcmpeq>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d034      	beq.n	8005fbe <_printf_float+0x276>
 8005f54:	4a37      	ldr	r2, [pc, #220]	; (8006034 <_printf_float+0x2ec>)
 8005f56:	2301      	movs	r3, #1
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	47b8      	blx	r7
 8005f5e:	3001      	adds	r0, #1
 8005f60:	f43f af51 	beq.w	8005e06 <_printf_float+0xbe>
 8005f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	db02      	blt.n	8005f72 <_printf_float+0x22a>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	07d8      	lsls	r0, r3, #31
 8005f70:	d510      	bpl.n	8005f94 <_printf_float+0x24c>
 8005f72:	ee18 3a10 	vmov	r3, s16
 8005f76:	4652      	mov	r2, sl
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	47b8      	blx	r7
 8005f7e:	3001      	adds	r0, #1
 8005f80:	f43f af41 	beq.w	8005e06 <_printf_float+0xbe>
 8005f84:	f04f 0800 	mov.w	r8, #0
 8005f88:	f104 091a 	add.w	r9, r4, #26
 8005f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	4543      	cmp	r3, r8
 8005f92:	dc09      	bgt.n	8005fa8 <_printf_float+0x260>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	079b      	lsls	r3, r3, #30
 8005f98:	f100 8107 	bmi.w	80061aa <_printf_float+0x462>
 8005f9c:	68e0      	ldr	r0, [r4, #12]
 8005f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fa0:	4298      	cmp	r0, r3
 8005fa2:	bfb8      	it	lt
 8005fa4:	4618      	movlt	r0, r3
 8005fa6:	e730      	b.n	8005e0a <_printf_float+0xc2>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	464a      	mov	r2, r9
 8005fac:	4631      	mov	r1, r6
 8005fae:	4628      	mov	r0, r5
 8005fb0:	47b8      	blx	r7
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	f43f af27 	beq.w	8005e06 <_printf_float+0xbe>
 8005fb8:	f108 0801 	add.w	r8, r8, #1
 8005fbc:	e7e6      	b.n	8005f8c <_printf_float+0x244>
 8005fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	dc39      	bgt.n	8006038 <_printf_float+0x2f0>
 8005fc4:	4a1b      	ldr	r2, [pc, #108]	; (8006034 <_printf_float+0x2ec>)
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f43f af19 	beq.w	8005e06 <_printf_float+0xbe>
 8005fd4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	d102      	bne.n	8005fe2 <_printf_float+0x29a>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	07d9      	lsls	r1, r3, #31
 8005fe0:	d5d8      	bpl.n	8005f94 <_printf_float+0x24c>
 8005fe2:	ee18 3a10 	vmov	r3, s16
 8005fe6:	4652      	mov	r2, sl
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b8      	blx	r7
 8005fee:	3001      	adds	r0, #1
 8005ff0:	f43f af09 	beq.w	8005e06 <_printf_float+0xbe>
 8005ff4:	f04f 0900 	mov.w	r9, #0
 8005ff8:	f104 0a1a 	add.w	sl, r4, #26
 8005ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffe:	425b      	negs	r3, r3
 8006000:	454b      	cmp	r3, r9
 8006002:	dc01      	bgt.n	8006008 <_printf_float+0x2c0>
 8006004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006006:	e792      	b.n	8005f2e <_printf_float+0x1e6>
 8006008:	2301      	movs	r3, #1
 800600a:	4652      	mov	r2, sl
 800600c:	4631      	mov	r1, r6
 800600e:	4628      	mov	r0, r5
 8006010:	47b8      	blx	r7
 8006012:	3001      	adds	r0, #1
 8006014:	f43f aef7 	beq.w	8005e06 <_printf_float+0xbe>
 8006018:	f109 0901 	add.w	r9, r9, #1
 800601c:	e7ee      	b.n	8005ffc <_printf_float+0x2b4>
 800601e:	bf00      	nop
 8006020:	7fefffff 	.word	0x7fefffff
 8006024:	08008d78 	.word	0x08008d78
 8006028:	08008d7c 	.word	0x08008d7c
 800602c:	08008d80 	.word	0x08008d80
 8006030:	08008d84 	.word	0x08008d84
 8006034:	08008d88 	.word	0x08008d88
 8006038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800603a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800603c:	429a      	cmp	r2, r3
 800603e:	bfa8      	it	ge
 8006040:	461a      	movge	r2, r3
 8006042:	2a00      	cmp	r2, #0
 8006044:	4691      	mov	r9, r2
 8006046:	dc37      	bgt.n	80060b8 <_printf_float+0x370>
 8006048:	f04f 0b00 	mov.w	fp, #0
 800604c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006050:	f104 021a 	add.w	r2, r4, #26
 8006054:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006056:	9305      	str	r3, [sp, #20]
 8006058:	eba3 0309 	sub.w	r3, r3, r9
 800605c:	455b      	cmp	r3, fp
 800605e:	dc33      	bgt.n	80060c8 <_printf_float+0x380>
 8006060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006064:	429a      	cmp	r2, r3
 8006066:	db3b      	blt.n	80060e0 <_printf_float+0x398>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	07da      	lsls	r2, r3, #31
 800606c:	d438      	bmi.n	80060e0 <_printf_float+0x398>
 800606e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006072:	eba2 0903 	sub.w	r9, r2, r3
 8006076:	9b05      	ldr	r3, [sp, #20]
 8006078:	1ad2      	subs	r2, r2, r3
 800607a:	4591      	cmp	r9, r2
 800607c:	bfa8      	it	ge
 800607e:	4691      	movge	r9, r2
 8006080:	f1b9 0f00 	cmp.w	r9, #0
 8006084:	dc35      	bgt.n	80060f2 <_printf_float+0x3aa>
 8006086:	f04f 0800 	mov.w	r8, #0
 800608a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800608e:	f104 0a1a 	add.w	sl, r4, #26
 8006092:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006096:	1a9b      	subs	r3, r3, r2
 8006098:	eba3 0309 	sub.w	r3, r3, r9
 800609c:	4543      	cmp	r3, r8
 800609e:	f77f af79 	ble.w	8005f94 <_printf_float+0x24c>
 80060a2:	2301      	movs	r3, #1
 80060a4:	4652      	mov	r2, sl
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	f43f aeaa 	beq.w	8005e06 <_printf_float+0xbe>
 80060b2:	f108 0801 	add.w	r8, r8, #1
 80060b6:	e7ec      	b.n	8006092 <_printf_float+0x34a>
 80060b8:	4613      	mov	r3, r2
 80060ba:	4631      	mov	r1, r6
 80060bc:	4642      	mov	r2, r8
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	d1c0      	bne.n	8006048 <_printf_float+0x300>
 80060c6:	e69e      	b.n	8005e06 <_printf_float+0xbe>
 80060c8:	2301      	movs	r3, #1
 80060ca:	4631      	mov	r1, r6
 80060cc:	4628      	mov	r0, r5
 80060ce:	9205      	str	r2, [sp, #20]
 80060d0:	47b8      	blx	r7
 80060d2:	3001      	adds	r0, #1
 80060d4:	f43f ae97 	beq.w	8005e06 <_printf_float+0xbe>
 80060d8:	9a05      	ldr	r2, [sp, #20]
 80060da:	f10b 0b01 	add.w	fp, fp, #1
 80060de:	e7b9      	b.n	8006054 <_printf_float+0x30c>
 80060e0:	ee18 3a10 	vmov	r3, s16
 80060e4:	4652      	mov	r2, sl
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	d1be      	bne.n	800606e <_printf_float+0x326>
 80060f0:	e689      	b.n	8005e06 <_printf_float+0xbe>
 80060f2:	9a05      	ldr	r2, [sp, #20]
 80060f4:	464b      	mov	r3, r9
 80060f6:	4442      	add	r2, r8
 80060f8:	4631      	mov	r1, r6
 80060fa:	4628      	mov	r0, r5
 80060fc:	47b8      	blx	r7
 80060fe:	3001      	adds	r0, #1
 8006100:	d1c1      	bne.n	8006086 <_printf_float+0x33e>
 8006102:	e680      	b.n	8005e06 <_printf_float+0xbe>
 8006104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006106:	2a01      	cmp	r2, #1
 8006108:	dc01      	bgt.n	800610e <_printf_float+0x3c6>
 800610a:	07db      	lsls	r3, r3, #31
 800610c:	d53a      	bpl.n	8006184 <_printf_float+0x43c>
 800610e:	2301      	movs	r3, #1
 8006110:	4642      	mov	r2, r8
 8006112:	4631      	mov	r1, r6
 8006114:	4628      	mov	r0, r5
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	f43f ae74 	beq.w	8005e06 <_printf_float+0xbe>
 800611e:	ee18 3a10 	vmov	r3, s16
 8006122:	4652      	mov	r2, sl
 8006124:	4631      	mov	r1, r6
 8006126:	4628      	mov	r0, r5
 8006128:	47b8      	blx	r7
 800612a:	3001      	adds	r0, #1
 800612c:	f43f ae6b 	beq.w	8005e06 <_printf_float+0xbe>
 8006130:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006134:	2200      	movs	r2, #0
 8006136:	2300      	movs	r3, #0
 8006138:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800613c:	f7fa fce4 	bl	8000b08 <__aeabi_dcmpeq>
 8006140:	b9d8      	cbnz	r0, 800617a <_printf_float+0x432>
 8006142:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006146:	f108 0201 	add.w	r2, r8, #1
 800614a:	4631      	mov	r1, r6
 800614c:	4628      	mov	r0, r5
 800614e:	47b8      	blx	r7
 8006150:	3001      	adds	r0, #1
 8006152:	d10e      	bne.n	8006172 <_printf_float+0x42a>
 8006154:	e657      	b.n	8005e06 <_printf_float+0xbe>
 8006156:	2301      	movs	r3, #1
 8006158:	4652      	mov	r2, sl
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	f43f ae50 	beq.w	8005e06 <_printf_float+0xbe>
 8006166:	f108 0801 	add.w	r8, r8, #1
 800616a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616c:	3b01      	subs	r3, #1
 800616e:	4543      	cmp	r3, r8
 8006170:	dcf1      	bgt.n	8006156 <_printf_float+0x40e>
 8006172:	464b      	mov	r3, r9
 8006174:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006178:	e6da      	b.n	8005f30 <_printf_float+0x1e8>
 800617a:	f04f 0800 	mov.w	r8, #0
 800617e:	f104 0a1a 	add.w	sl, r4, #26
 8006182:	e7f2      	b.n	800616a <_printf_float+0x422>
 8006184:	2301      	movs	r3, #1
 8006186:	4642      	mov	r2, r8
 8006188:	e7df      	b.n	800614a <_printf_float+0x402>
 800618a:	2301      	movs	r3, #1
 800618c:	464a      	mov	r2, r9
 800618e:	4631      	mov	r1, r6
 8006190:	4628      	mov	r0, r5
 8006192:	47b8      	blx	r7
 8006194:	3001      	adds	r0, #1
 8006196:	f43f ae36 	beq.w	8005e06 <_printf_float+0xbe>
 800619a:	f108 0801 	add.w	r8, r8, #1
 800619e:	68e3      	ldr	r3, [r4, #12]
 80061a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061a2:	1a5b      	subs	r3, r3, r1
 80061a4:	4543      	cmp	r3, r8
 80061a6:	dcf0      	bgt.n	800618a <_printf_float+0x442>
 80061a8:	e6f8      	b.n	8005f9c <_printf_float+0x254>
 80061aa:	f04f 0800 	mov.w	r8, #0
 80061ae:	f104 0919 	add.w	r9, r4, #25
 80061b2:	e7f4      	b.n	800619e <_printf_float+0x456>

080061b4 <malloc>:
 80061b4:	4b02      	ldr	r3, [pc, #8]	; (80061c0 <malloc+0xc>)
 80061b6:	4601      	mov	r1, r0
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	f000 b82b 	b.w	8006214 <_malloc_r>
 80061be:	bf00      	nop
 80061c0:	20000070 	.word	0x20000070

080061c4 <free>:
 80061c4:	4b02      	ldr	r3, [pc, #8]	; (80061d0 <free+0xc>)
 80061c6:	4601      	mov	r1, r0
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	f001 b9d3 	b.w	8007574 <_free_r>
 80061ce:	bf00      	nop
 80061d0:	20000070 	.word	0x20000070

080061d4 <sbrk_aligned>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	4e0e      	ldr	r6, [pc, #56]	; (8006210 <sbrk_aligned+0x3c>)
 80061d8:	460c      	mov	r4, r1
 80061da:	6831      	ldr	r1, [r6, #0]
 80061dc:	4605      	mov	r5, r0
 80061de:	b911      	cbnz	r1, 80061e6 <sbrk_aligned+0x12>
 80061e0:	f000 fb10 	bl	8006804 <_sbrk_r>
 80061e4:	6030      	str	r0, [r6, #0]
 80061e6:	4621      	mov	r1, r4
 80061e8:	4628      	mov	r0, r5
 80061ea:	f000 fb0b 	bl	8006804 <_sbrk_r>
 80061ee:	1c43      	adds	r3, r0, #1
 80061f0:	d00a      	beq.n	8006208 <sbrk_aligned+0x34>
 80061f2:	1cc4      	adds	r4, r0, #3
 80061f4:	f024 0403 	bic.w	r4, r4, #3
 80061f8:	42a0      	cmp	r0, r4
 80061fa:	d007      	beq.n	800620c <sbrk_aligned+0x38>
 80061fc:	1a21      	subs	r1, r4, r0
 80061fe:	4628      	mov	r0, r5
 8006200:	f000 fb00 	bl	8006804 <_sbrk_r>
 8006204:	3001      	adds	r0, #1
 8006206:	d101      	bne.n	800620c <sbrk_aligned+0x38>
 8006208:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800620c:	4620      	mov	r0, r4
 800620e:	bd70      	pop	{r4, r5, r6, pc}
 8006210:	200004c4 	.word	0x200004c4

08006214 <_malloc_r>:
 8006214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006218:	1ccd      	adds	r5, r1, #3
 800621a:	f025 0503 	bic.w	r5, r5, #3
 800621e:	3508      	adds	r5, #8
 8006220:	2d0c      	cmp	r5, #12
 8006222:	bf38      	it	cc
 8006224:	250c      	movcc	r5, #12
 8006226:	2d00      	cmp	r5, #0
 8006228:	4607      	mov	r7, r0
 800622a:	db01      	blt.n	8006230 <_malloc_r+0x1c>
 800622c:	42a9      	cmp	r1, r5
 800622e:	d905      	bls.n	800623c <_malloc_r+0x28>
 8006230:	230c      	movs	r3, #12
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	2600      	movs	r6, #0
 8006236:	4630      	mov	r0, r6
 8006238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800623c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006310 <_malloc_r+0xfc>
 8006240:	f000 f9f8 	bl	8006634 <__malloc_lock>
 8006244:	f8d8 3000 	ldr.w	r3, [r8]
 8006248:	461c      	mov	r4, r3
 800624a:	bb5c      	cbnz	r4, 80062a4 <_malloc_r+0x90>
 800624c:	4629      	mov	r1, r5
 800624e:	4638      	mov	r0, r7
 8006250:	f7ff ffc0 	bl	80061d4 <sbrk_aligned>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	4604      	mov	r4, r0
 8006258:	d155      	bne.n	8006306 <_malloc_r+0xf2>
 800625a:	f8d8 4000 	ldr.w	r4, [r8]
 800625e:	4626      	mov	r6, r4
 8006260:	2e00      	cmp	r6, #0
 8006262:	d145      	bne.n	80062f0 <_malloc_r+0xdc>
 8006264:	2c00      	cmp	r4, #0
 8006266:	d048      	beq.n	80062fa <_malloc_r+0xe6>
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	4631      	mov	r1, r6
 800626c:	4638      	mov	r0, r7
 800626e:	eb04 0903 	add.w	r9, r4, r3
 8006272:	f000 fac7 	bl	8006804 <_sbrk_r>
 8006276:	4581      	cmp	r9, r0
 8006278:	d13f      	bne.n	80062fa <_malloc_r+0xe6>
 800627a:	6821      	ldr	r1, [r4, #0]
 800627c:	1a6d      	subs	r5, r5, r1
 800627e:	4629      	mov	r1, r5
 8006280:	4638      	mov	r0, r7
 8006282:	f7ff ffa7 	bl	80061d4 <sbrk_aligned>
 8006286:	3001      	adds	r0, #1
 8006288:	d037      	beq.n	80062fa <_malloc_r+0xe6>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	442b      	add	r3, r5
 800628e:	6023      	str	r3, [r4, #0]
 8006290:	f8d8 3000 	ldr.w	r3, [r8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d038      	beq.n	800630a <_malloc_r+0xf6>
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	42a2      	cmp	r2, r4
 800629c:	d12b      	bne.n	80062f6 <_malloc_r+0xe2>
 800629e:	2200      	movs	r2, #0
 80062a0:	605a      	str	r2, [r3, #4]
 80062a2:	e00f      	b.n	80062c4 <_malloc_r+0xb0>
 80062a4:	6822      	ldr	r2, [r4, #0]
 80062a6:	1b52      	subs	r2, r2, r5
 80062a8:	d41f      	bmi.n	80062ea <_malloc_r+0xd6>
 80062aa:	2a0b      	cmp	r2, #11
 80062ac:	d917      	bls.n	80062de <_malloc_r+0xca>
 80062ae:	1961      	adds	r1, r4, r5
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	6025      	str	r5, [r4, #0]
 80062b4:	bf18      	it	ne
 80062b6:	6059      	strne	r1, [r3, #4]
 80062b8:	6863      	ldr	r3, [r4, #4]
 80062ba:	bf08      	it	eq
 80062bc:	f8c8 1000 	streq.w	r1, [r8]
 80062c0:	5162      	str	r2, [r4, r5]
 80062c2:	604b      	str	r3, [r1, #4]
 80062c4:	4638      	mov	r0, r7
 80062c6:	f104 060b 	add.w	r6, r4, #11
 80062ca:	f000 f9b9 	bl	8006640 <__malloc_unlock>
 80062ce:	f026 0607 	bic.w	r6, r6, #7
 80062d2:	1d23      	adds	r3, r4, #4
 80062d4:	1af2      	subs	r2, r6, r3
 80062d6:	d0ae      	beq.n	8006236 <_malloc_r+0x22>
 80062d8:	1b9b      	subs	r3, r3, r6
 80062da:	50a3      	str	r3, [r4, r2]
 80062dc:	e7ab      	b.n	8006236 <_malloc_r+0x22>
 80062de:	42a3      	cmp	r3, r4
 80062e0:	6862      	ldr	r2, [r4, #4]
 80062e2:	d1dd      	bne.n	80062a0 <_malloc_r+0x8c>
 80062e4:	f8c8 2000 	str.w	r2, [r8]
 80062e8:	e7ec      	b.n	80062c4 <_malloc_r+0xb0>
 80062ea:	4623      	mov	r3, r4
 80062ec:	6864      	ldr	r4, [r4, #4]
 80062ee:	e7ac      	b.n	800624a <_malloc_r+0x36>
 80062f0:	4634      	mov	r4, r6
 80062f2:	6876      	ldr	r6, [r6, #4]
 80062f4:	e7b4      	b.n	8006260 <_malloc_r+0x4c>
 80062f6:	4613      	mov	r3, r2
 80062f8:	e7cc      	b.n	8006294 <_malloc_r+0x80>
 80062fa:	230c      	movs	r3, #12
 80062fc:	603b      	str	r3, [r7, #0]
 80062fe:	4638      	mov	r0, r7
 8006300:	f000 f99e 	bl	8006640 <__malloc_unlock>
 8006304:	e797      	b.n	8006236 <_malloc_r+0x22>
 8006306:	6025      	str	r5, [r4, #0]
 8006308:	e7dc      	b.n	80062c4 <_malloc_r+0xb0>
 800630a:	605b      	str	r3, [r3, #4]
 800630c:	deff      	udf	#255	; 0xff
 800630e:	bf00      	nop
 8006310:	200004c0 	.word	0x200004c0

08006314 <_printf_common>:
 8006314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006318:	4616      	mov	r6, r2
 800631a:	4699      	mov	r9, r3
 800631c:	688a      	ldr	r2, [r1, #8]
 800631e:	690b      	ldr	r3, [r1, #16]
 8006320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006324:	4293      	cmp	r3, r2
 8006326:	bfb8      	it	lt
 8006328:	4613      	movlt	r3, r2
 800632a:	6033      	str	r3, [r6, #0]
 800632c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006330:	4607      	mov	r7, r0
 8006332:	460c      	mov	r4, r1
 8006334:	b10a      	cbz	r2, 800633a <_printf_common+0x26>
 8006336:	3301      	adds	r3, #1
 8006338:	6033      	str	r3, [r6, #0]
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	0699      	lsls	r1, r3, #26
 800633e:	bf42      	ittt	mi
 8006340:	6833      	ldrmi	r3, [r6, #0]
 8006342:	3302      	addmi	r3, #2
 8006344:	6033      	strmi	r3, [r6, #0]
 8006346:	6825      	ldr	r5, [r4, #0]
 8006348:	f015 0506 	ands.w	r5, r5, #6
 800634c:	d106      	bne.n	800635c <_printf_common+0x48>
 800634e:	f104 0a19 	add.w	sl, r4, #25
 8006352:	68e3      	ldr	r3, [r4, #12]
 8006354:	6832      	ldr	r2, [r6, #0]
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	42ab      	cmp	r3, r5
 800635a:	dc26      	bgt.n	80063aa <_printf_common+0x96>
 800635c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006360:	1e13      	subs	r3, r2, #0
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	bf18      	it	ne
 8006366:	2301      	movne	r3, #1
 8006368:	0692      	lsls	r2, r2, #26
 800636a:	d42b      	bmi.n	80063c4 <_printf_common+0xb0>
 800636c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006370:	4649      	mov	r1, r9
 8006372:	4638      	mov	r0, r7
 8006374:	47c0      	blx	r8
 8006376:	3001      	adds	r0, #1
 8006378:	d01e      	beq.n	80063b8 <_printf_common+0xa4>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	6922      	ldr	r2, [r4, #16]
 800637e:	f003 0306 	and.w	r3, r3, #6
 8006382:	2b04      	cmp	r3, #4
 8006384:	bf02      	ittt	eq
 8006386:	68e5      	ldreq	r5, [r4, #12]
 8006388:	6833      	ldreq	r3, [r6, #0]
 800638a:	1aed      	subeq	r5, r5, r3
 800638c:	68a3      	ldr	r3, [r4, #8]
 800638e:	bf0c      	ite	eq
 8006390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006394:	2500      	movne	r5, #0
 8006396:	4293      	cmp	r3, r2
 8006398:	bfc4      	itt	gt
 800639a:	1a9b      	subgt	r3, r3, r2
 800639c:	18ed      	addgt	r5, r5, r3
 800639e:	2600      	movs	r6, #0
 80063a0:	341a      	adds	r4, #26
 80063a2:	42b5      	cmp	r5, r6
 80063a4:	d11a      	bne.n	80063dc <_printf_common+0xc8>
 80063a6:	2000      	movs	r0, #0
 80063a8:	e008      	b.n	80063bc <_printf_common+0xa8>
 80063aa:	2301      	movs	r3, #1
 80063ac:	4652      	mov	r2, sl
 80063ae:	4649      	mov	r1, r9
 80063b0:	4638      	mov	r0, r7
 80063b2:	47c0      	blx	r8
 80063b4:	3001      	adds	r0, #1
 80063b6:	d103      	bne.n	80063c0 <_printf_common+0xac>
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c0:	3501      	adds	r5, #1
 80063c2:	e7c6      	b.n	8006352 <_printf_common+0x3e>
 80063c4:	18e1      	adds	r1, r4, r3
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	2030      	movs	r0, #48	; 0x30
 80063ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063ce:	4422      	add	r2, r4
 80063d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063d8:	3302      	adds	r3, #2
 80063da:	e7c7      	b.n	800636c <_printf_common+0x58>
 80063dc:	2301      	movs	r3, #1
 80063de:	4622      	mov	r2, r4
 80063e0:	4649      	mov	r1, r9
 80063e2:	4638      	mov	r0, r7
 80063e4:	47c0      	blx	r8
 80063e6:	3001      	adds	r0, #1
 80063e8:	d0e6      	beq.n	80063b8 <_printf_common+0xa4>
 80063ea:	3601      	adds	r6, #1
 80063ec:	e7d9      	b.n	80063a2 <_printf_common+0x8e>
	...

080063f0 <_printf_i>:
 80063f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	7e0f      	ldrb	r7, [r1, #24]
 80063f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063f8:	2f78      	cmp	r7, #120	; 0x78
 80063fa:	4691      	mov	r9, r2
 80063fc:	4680      	mov	r8, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	469a      	mov	sl, r3
 8006402:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006406:	d807      	bhi.n	8006418 <_printf_i+0x28>
 8006408:	2f62      	cmp	r7, #98	; 0x62
 800640a:	d80a      	bhi.n	8006422 <_printf_i+0x32>
 800640c:	2f00      	cmp	r7, #0
 800640e:	f000 80d4 	beq.w	80065ba <_printf_i+0x1ca>
 8006412:	2f58      	cmp	r7, #88	; 0x58
 8006414:	f000 80c0 	beq.w	8006598 <_printf_i+0x1a8>
 8006418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800641c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006420:	e03a      	b.n	8006498 <_printf_i+0xa8>
 8006422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006426:	2b15      	cmp	r3, #21
 8006428:	d8f6      	bhi.n	8006418 <_printf_i+0x28>
 800642a:	a101      	add	r1, pc, #4	; (adr r1, 8006430 <_printf_i+0x40>)
 800642c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006430:	08006489 	.word	0x08006489
 8006434:	0800649d 	.word	0x0800649d
 8006438:	08006419 	.word	0x08006419
 800643c:	08006419 	.word	0x08006419
 8006440:	08006419 	.word	0x08006419
 8006444:	08006419 	.word	0x08006419
 8006448:	0800649d 	.word	0x0800649d
 800644c:	08006419 	.word	0x08006419
 8006450:	08006419 	.word	0x08006419
 8006454:	08006419 	.word	0x08006419
 8006458:	08006419 	.word	0x08006419
 800645c:	080065a1 	.word	0x080065a1
 8006460:	080064c9 	.word	0x080064c9
 8006464:	0800655b 	.word	0x0800655b
 8006468:	08006419 	.word	0x08006419
 800646c:	08006419 	.word	0x08006419
 8006470:	080065c3 	.word	0x080065c3
 8006474:	08006419 	.word	0x08006419
 8006478:	080064c9 	.word	0x080064c9
 800647c:	08006419 	.word	0x08006419
 8006480:	08006419 	.word	0x08006419
 8006484:	08006563 	.word	0x08006563
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	1d1a      	adds	r2, r3, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	602a      	str	r2, [r5, #0]
 8006490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006498:	2301      	movs	r3, #1
 800649a:	e09f      	b.n	80065dc <_printf_i+0x1ec>
 800649c:	6820      	ldr	r0, [r4, #0]
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	0607      	lsls	r7, r0, #24
 80064a2:	f103 0104 	add.w	r1, r3, #4
 80064a6:	6029      	str	r1, [r5, #0]
 80064a8:	d501      	bpl.n	80064ae <_printf_i+0xbe>
 80064aa:	681e      	ldr	r6, [r3, #0]
 80064ac:	e003      	b.n	80064b6 <_printf_i+0xc6>
 80064ae:	0646      	lsls	r6, r0, #25
 80064b0:	d5fb      	bpl.n	80064aa <_printf_i+0xba>
 80064b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80064b6:	2e00      	cmp	r6, #0
 80064b8:	da03      	bge.n	80064c2 <_printf_i+0xd2>
 80064ba:	232d      	movs	r3, #45	; 0x2d
 80064bc:	4276      	negs	r6, r6
 80064be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c2:	485a      	ldr	r0, [pc, #360]	; (800662c <_printf_i+0x23c>)
 80064c4:	230a      	movs	r3, #10
 80064c6:	e012      	b.n	80064ee <_printf_i+0xfe>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	6820      	ldr	r0, [r4, #0]
 80064cc:	1d19      	adds	r1, r3, #4
 80064ce:	6029      	str	r1, [r5, #0]
 80064d0:	0605      	lsls	r5, r0, #24
 80064d2:	d501      	bpl.n	80064d8 <_printf_i+0xe8>
 80064d4:	681e      	ldr	r6, [r3, #0]
 80064d6:	e002      	b.n	80064de <_printf_i+0xee>
 80064d8:	0641      	lsls	r1, r0, #25
 80064da:	d5fb      	bpl.n	80064d4 <_printf_i+0xe4>
 80064dc:	881e      	ldrh	r6, [r3, #0]
 80064de:	4853      	ldr	r0, [pc, #332]	; (800662c <_printf_i+0x23c>)
 80064e0:	2f6f      	cmp	r7, #111	; 0x6f
 80064e2:	bf0c      	ite	eq
 80064e4:	2308      	moveq	r3, #8
 80064e6:	230a      	movne	r3, #10
 80064e8:	2100      	movs	r1, #0
 80064ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064ee:	6865      	ldr	r5, [r4, #4]
 80064f0:	60a5      	str	r5, [r4, #8]
 80064f2:	2d00      	cmp	r5, #0
 80064f4:	bfa2      	ittt	ge
 80064f6:	6821      	ldrge	r1, [r4, #0]
 80064f8:	f021 0104 	bicge.w	r1, r1, #4
 80064fc:	6021      	strge	r1, [r4, #0]
 80064fe:	b90e      	cbnz	r6, 8006504 <_printf_i+0x114>
 8006500:	2d00      	cmp	r5, #0
 8006502:	d04b      	beq.n	800659c <_printf_i+0x1ac>
 8006504:	4615      	mov	r5, r2
 8006506:	fbb6 f1f3 	udiv	r1, r6, r3
 800650a:	fb03 6711 	mls	r7, r3, r1, r6
 800650e:	5dc7      	ldrb	r7, [r0, r7]
 8006510:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006514:	4637      	mov	r7, r6
 8006516:	42bb      	cmp	r3, r7
 8006518:	460e      	mov	r6, r1
 800651a:	d9f4      	bls.n	8006506 <_printf_i+0x116>
 800651c:	2b08      	cmp	r3, #8
 800651e:	d10b      	bne.n	8006538 <_printf_i+0x148>
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	07de      	lsls	r6, r3, #31
 8006524:	d508      	bpl.n	8006538 <_printf_i+0x148>
 8006526:	6923      	ldr	r3, [r4, #16]
 8006528:	6861      	ldr	r1, [r4, #4]
 800652a:	4299      	cmp	r1, r3
 800652c:	bfde      	ittt	le
 800652e:	2330      	movle	r3, #48	; 0x30
 8006530:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006534:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006538:	1b52      	subs	r2, r2, r5
 800653a:	6122      	str	r2, [r4, #16]
 800653c:	f8cd a000 	str.w	sl, [sp]
 8006540:	464b      	mov	r3, r9
 8006542:	aa03      	add	r2, sp, #12
 8006544:	4621      	mov	r1, r4
 8006546:	4640      	mov	r0, r8
 8006548:	f7ff fee4 	bl	8006314 <_printf_common>
 800654c:	3001      	adds	r0, #1
 800654e:	d14a      	bne.n	80065e6 <_printf_i+0x1f6>
 8006550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006554:	b004      	add	sp, #16
 8006556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	f043 0320 	orr.w	r3, r3, #32
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	4833      	ldr	r0, [pc, #204]	; (8006630 <_printf_i+0x240>)
 8006564:	2778      	movs	r7, #120	; 0x78
 8006566:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	6829      	ldr	r1, [r5, #0]
 800656e:	061f      	lsls	r7, r3, #24
 8006570:	f851 6b04 	ldr.w	r6, [r1], #4
 8006574:	d402      	bmi.n	800657c <_printf_i+0x18c>
 8006576:	065f      	lsls	r7, r3, #25
 8006578:	bf48      	it	mi
 800657a:	b2b6      	uxthmi	r6, r6
 800657c:	07df      	lsls	r7, r3, #31
 800657e:	bf48      	it	mi
 8006580:	f043 0320 	orrmi.w	r3, r3, #32
 8006584:	6029      	str	r1, [r5, #0]
 8006586:	bf48      	it	mi
 8006588:	6023      	strmi	r3, [r4, #0]
 800658a:	b91e      	cbnz	r6, 8006594 <_printf_i+0x1a4>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	f023 0320 	bic.w	r3, r3, #32
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	2310      	movs	r3, #16
 8006596:	e7a7      	b.n	80064e8 <_printf_i+0xf8>
 8006598:	4824      	ldr	r0, [pc, #144]	; (800662c <_printf_i+0x23c>)
 800659a:	e7e4      	b.n	8006566 <_printf_i+0x176>
 800659c:	4615      	mov	r5, r2
 800659e:	e7bd      	b.n	800651c <_printf_i+0x12c>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	6826      	ldr	r6, [r4, #0]
 80065a4:	6961      	ldr	r1, [r4, #20]
 80065a6:	1d18      	adds	r0, r3, #4
 80065a8:	6028      	str	r0, [r5, #0]
 80065aa:	0635      	lsls	r5, r6, #24
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	d501      	bpl.n	80065b4 <_printf_i+0x1c4>
 80065b0:	6019      	str	r1, [r3, #0]
 80065b2:	e002      	b.n	80065ba <_printf_i+0x1ca>
 80065b4:	0670      	lsls	r0, r6, #25
 80065b6:	d5fb      	bpl.n	80065b0 <_printf_i+0x1c0>
 80065b8:	8019      	strh	r1, [r3, #0]
 80065ba:	2300      	movs	r3, #0
 80065bc:	6123      	str	r3, [r4, #16]
 80065be:	4615      	mov	r5, r2
 80065c0:	e7bc      	b.n	800653c <_printf_i+0x14c>
 80065c2:	682b      	ldr	r3, [r5, #0]
 80065c4:	1d1a      	adds	r2, r3, #4
 80065c6:	602a      	str	r2, [r5, #0]
 80065c8:	681d      	ldr	r5, [r3, #0]
 80065ca:	6862      	ldr	r2, [r4, #4]
 80065cc:	2100      	movs	r1, #0
 80065ce:	4628      	mov	r0, r5
 80065d0:	f7f9 fe1e 	bl	8000210 <memchr>
 80065d4:	b108      	cbz	r0, 80065da <_printf_i+0x1ea>
 80065d6:	1b40      	subs	r0, r0, r5
 80065d8:	6060      	str	r0, [r4, #4]
 80065da:	6863      	ldr	r3, [r4, #4]
 80065dc:	6123      	str	r3, [r4, #16]
 80065de:	2300      	movs	r3, #0
 80065e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e4:	e7aa      	b.n	800653c <_printf_i+0x14c>
 80065e6:	6923      	ldr	r3, [r4, #16]
 80065e8:	462a      	mov	r2, r5
 80065ea:	4649      	mov	r1, r9
 80065ec:	4640      	mov	r0, r8
 80065ee:	47d0      	blx	sl
 80065f0:	3001      	adds	r0, #1
 80065f2:	d0ad      	beq.n	8006550 <_printf_i+0x160>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	079b      	lsls	r3, r3, #30
 80065f8:	d413      	bmi.n	8006622 <_printf_i+0x232>
 80065fa:	68e0      	ldr	r0, [r4, #12]
 80065fc:	9b03      	ldr	r3, [sp, #12]
 80065fe:	4298      	cmp	r0, r3
 8006600:	bfb8      	it	lt
 8006602:	4618      	movlt	r0, r3
 8006604:	e7a6      	b.n	8006554 <_printf_i+0x164>
 8006606:	2301      	movs	r3, #1
 8006608:	4632      	mov	r2, r6
 800660a:	4649      	mov	r1, r9
 800660c:	4640      	mov	r0, r8
 800660e:	47d0      	blx	sl
 8006610:	3001      	adds	r0, #1
 8006612:	d09d      	beq.n	8006550 <_printf_i+0x160>
 8006614:	3501      	adds	r5, #1
 8006616:	68e3      	ldr	r3, [r4, #12]
 8006618:	9903      	ldr	r1, [sp, #12]
 800661a:	1a5b      	subs	r3, r3, r1
 800661c:	42ab      	cmp	r3, r5
 800661e:	dcf2      	bgt.n	8006606 <_printf_i+0x216>
 8006620:	e7eb      	b.n	80065fa <_printf_i+0x20a>
 8006622:	2500      	movs	r5, #0
 8006624:	f104 0619 	add.w	r6, r4, #25
 8006628:	e7f5      	b.n	8006616 <_printf_i+0x226>
 800662a:	bf00      	nop
 800662c:	08008d8a 	.word	0x08008d8a
 8006630:	08008d9b 	.word	0x08008d9b

08006634 <__malloc_lock>:
 8006634:	4801      	ldr	r0, [pc, #4]	; (800663c <__malloc_lock+0x8>)
 8006636:	f000 b91f 	b.w	8006878 <__retarget_lock_acquire_recursive>
 800663a:	bf00      	nop
 800663c:	20000604 	.word	0x20000604

08006640 <__malloc_unlock>:
 8006640:	4801      	ldr	r0, [pc, #4]	; (8006648 <__malloc_unlock+0x8>)
 8006642:	f000 b91a 	b.w	800687a <__retarget_lock_release_recursive>
 8006646:	bf00      	nop
 8006648:	20000604 	.word	0x20000604

0800664c <siprintf>:
 800664c:	b40e      	push	{r1, r2, r3}
 800664e:	b500      	push	{lr}
 8006650:	b09c      	sub	sp, #112	; 0x70
 8006652:	ab1d      	add	r3, sp, #116	; 0x74
 8006654:	9002      	str	r0, [sp, #8]
 8006656:	9006      	str	r0, [sp, #24]
 8006658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800665c:	4809      	ldr	r0, [pc, #36]	; (8006684 <siprintf+0x38>)
 800665e:	9107      	str	r1, [sp, #28]
 8006660:	9104      	str	r1, [sp, #16]
 8006662:	4909      	ldr	r1, [pc, #36]	; (8006688 <siprintf+0x3c>)
 8006664:	f853 2b04 	ldr.w	r2, [r3], #4
 8006668:	9105      	str	r1, [sp, #20]
 800666a:	6800      	ldr	r0, [r0, #0]
 800666c:	9301      	str	r3, [sp, #4]
 800666e:	a902      	add	r1, sp, #8
 8006670:	f001 f826 	bl	80076c0 <_svfiprintf_r>
 8006674:	9b02      	ldr	r3, [sp, #8]
 8006676:	2200      	movs	r2, #0
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	b01c      	add	sp, #112	; 0x70
 800667c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006680:	b003      	add	sp, #12
 8006682:	4770      	bx	lr
 8006684:	20000070 	.word	0x20000070
 8006688:	ffff0208 	.word	0xffff0208

0800668c <std>:
 800668c:	2300      	movs	r3, #0
 800668e:	b510      	push	{r4, lr}
 8006690:	4604      	mov	r4, r0
 8006692:	e9c0 3300 	strd	r3, r3, [r0]
 8006696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800669a:	6083      	str	r3, [r0, #8]
 800669c:	8181      	strh	r1, [r0, #12]
 800669e:	6643      	str	r3, [r0, #100]	; 0x64
 80066a0:	81c2      	strh	r2, [r0, #14]
 80066a2:	6183      	str	r3, [r0, #24]
 80066a4:	4619      	mov	r1, r3
 80066a6:	2208      	movs	r2, #8
 80066a8:	305c      	adds	r0, #92	; 0x5c
 80066aa:	f000 f89f 	bl	80067ec <memset>
 80066ae:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <std+0x38>)
 80066b0:	6263      	str	r3, [r4, #36]	; 0x24
 80066b2:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <std+0x3c>)
 80066b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80066b6:	4b05      	ldr	r3, [pc, #20]	; (80066cc <std+0x40>)
 80066b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <std+0x44>)
 80066bc:	6224      	str	r4, [r4, #32]
 80066be:	6323      	str	r3, [r4, #48]	; 0x30
 80066c0:	bd10      	pop	{r4, pc}
 80066c2:	bf00      	nop
 80066c4:	08008111 	.word	0x08008111
 80066c8:	08008133 	.word	0x08008133
 80066cc:	0800816b 	.word	0x0800816b
 80066d0:	0800818f 	.word	0x0800818f

080066d4 <stdio_exit_handler>:
 80066d4:	4a02      	ldr	r2, [pc, #8]	; (80066e0 <stdio_exit_handler+0xc>)
 80066d6:	4903      	ldr	r1, [pc, #12]	; (80066e4 <stdio_exit_handler+0x10>)
 80066d8:	4803      	ldr	r0, [pc, #12]	; (80066e8 <stdio_exit_handler+0x14>)
 80066da:	f000 b869 	b.w	80067b0 <_fwalk_sglue>
 80066de:	bf00      	nop
 80066e0:	20000018 	.word	0x20000018
 80066e4:	080079c9 	.word	0x080079c9
 80066e8:	20000024 	.word	0x20000024

080066ec <cleanup_stdio>:
 80066ec:	6841      	ldr	r1, [r0, #4]
 80066ee:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <cleanup_stdio+0x34>)
 80066f0:	4299      	cmp	r1, r3
 80066f2:	b510      	push	{r4, lr}
 80066f4:	4604      	mov	r4, r0
 80066f6:	d001      	beq.n	80066fc <cleanup_stdio+0x10>
 80066f8:	f001 f966 	bl	80079c8 <_fflush_r>
 80066fc:	68a1      	ldr	r1, [r4, #8]
 80066fe:	4b09      	ldr	r3, [pc, #36]	; (8006724 <cleanup_stdio+0x38>)
 8006700:	4299      	cmp	r1, r3
 8006702:	d002      	beq.n	800670a <cleanup_stdio+0x1e>
 8006704:	4620      	mov	r0, r4
 8006706:	f001 f95f 	bl	80079c8 <_fflush_r>
 800670a:	68e1      	ldr	r1, [r4, #12]
 800670c:	4b06      	ldr	r3, [pc, #24]	; (8006728 <cleanup_stdio+0x3c>)
 800670e:	4299      	cmp	r1, r3
 8006710:	d004      	beq.n	800671c <cleanup_stdio+0x30>
 8006712:	4620      	mov	r0, r4
 8006714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006718:	f001 b956 	b.w	80079c8 <_fflush_r>
 800671c:	bd10      	pop	{r4, pc}
 800671e:	bf00      	nop
 8006720:	200004c8 	.word	0x200004c8
 8006724:	20000530 	.word	0x20000530
 8006728:	20000598 	.word	0x20000598

0800672c <global_stdio_init.part.0>:
 800672c:	b510      	push	{r4, lr}
 800672e:	4b0b      	ldr	r3, [pc, #44]	; (800675c <global_stdio_init.part.0+0x30>)
 8006730:	4c0b      	ldr	r4, [pc, #44]	; (8006760 <global_stdio_init.part.0+0x34>)
 8006732:	4a0c      	ldr	r2, [pc, #48]	; (8006764 <global_stdio_init.part.0+0x38>)
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	4620      	mov	r0, r4
 8006738:	2200      	movs	r2, #0
 800673a:	2104      	movs	r1, #4
 800673c:	f7ff ffa6 	bl	800668c <std>
 8006740:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006744:	2201      	movs	r2, #1
 8006746:	2109      	movs	r1, #9
 8006748:	f7ff ffa0 	bl	800668c <std>
 800674c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006750:	2202      	movs	r2, #2
 8006752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006756:	2112      	movs	r1, #18
 8006758:	f7ff bf98 	b.w	800668c <std>
 800675c:	20000600 	.word	0x20000600
 8006760:	200004c8 	.word	0x200004c8
 8006764:	080066d5 	.word	0x080066d5

08006768 <__sfp_lock_acquire>:
 8006768:	4801      	ldr	r0, [pc, #4]	; (8006770 <__sfp_lock_acquire+0x8>)
 800676a:	f000 b885 	b.w	8006878 <__retarget_lock_acquire_recursive>
 800676e:	bf00      	nop
 8006770:	20000605 	.word	0x20000605

08006774 <__sfp_lock_release>:
 8006774:	4801      	ldr	r0, [pc, #4]	; (800677c <__sfp_lock_release+0x8>)
 8006776:	f000 b880 	b.w	800687a <__retarget_lock_release_recursive>
 800677a:	bf00      	nop
 800677c:	20000605 	.word	0x20000605

08006780 <__sinit>:
 8006780:	b510      	push	{r4, lr}
 8006782:	4604      	mov	r4, r0
 8006784:	f7ff fff0 	bl	8006768 <__sfp_lock_acquire>
 8006788:	6a23      	ldr	r3, [r4, #32]
 800678a:	b11b      	cbz	r3, 8006794 <__sinit+0x14>
 800678c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006790:	f7ff bff0 	b.w	8006774 <__sfp_lock_release>
 8006794:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <__sinit+0x28>)
 8006796:	6223      	str	r3, [r4, #32]
 8006798:	4b04      	ldr	r3, [pc, #16]	; (80067ac <__sinit+0x2c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1f5      	bne.n	800678c <__sinit+0xc>
 80067a0:	f7ff ffc4 	bl	800672c <global_stdio_init.part.0>
 80067a4:	e7f2      	b.n	800678c <__sinit+0xc>
 80067a6:	bf00      	nop
 80067a8:	080066ed 	.word	0x080066ed
 80067ac:	20000600 	.word	0x20000600

080067b0 <_fwalk_sglue>:
 80067b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067b4:	4607      	mov	r7, r0
 80067b6:	4688      	mov	r8, r1
 80067b8:	4614      	mov	r4, r2
 80067ba:	2600      	movs	r6, #0
 80067bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067c0:	f1b9 0901 	subs.w	r9, r9, #1
 80067c4:	d505      	bpl.n	80067d2 <_fwalk_sglue+0x22>
 80067c6:	6824      	ldr	r4, [r4, #0]
 80067c8:	2c00      	cmp	r4, #0
 80067ca:	d1f7      	bne.n	80067bc <_fwalk_sglue+0xc>
 80067cc:	4630      	mov	r0, r6
 80067ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067d2:	89ab      	ldrh	r3, [r5, #12]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d907      	bls.n	80067e8 <_fwalk_sglue+0x38>
 80067d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067dc:	3301      	adds	r3, #1
 80067de:	d003      	beq.n	80067e8 <_fwalk_sglue+0x38>
 80067e0:	4629      	mov	r1, r5
 80067e2:	4638      	mov	r0, r7
 80067e4:	47c0      	blx	r8
 80067e6:	4306      	orrs	r6, r0
 80067e8:	3568      	adds	r5, #104	; 0x68
 80067ea:	e7e9      	b.n	80067c0 <_fwalk_sglue+0x10>

080067ec <memset>:
 80067ec:	4402      	add	r2, r0
 80067ee:	4603      	mov	r3, r0
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d100      	bne.n	80067f6 <memset+0xa>
 80067f4:	4770      	bx	lr
 80067f6:	f803 1b01 	strb.w	r1, [r3], #1
 80067fa:	e7f9      	b.n	80067f0 <memset+0x4>

080067fc <_localeconv_r>:
 80067fc:	4800      	ldr	r0, [pc, #0]	; (8006800 <_localeconv_r+0x4>)
 80067fe:	4770      	bx	lr
 8006800:	20000164 	.word	0x20000164

08006804 <_sbrk_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4d06      	ldr	r5, [pc, #24]	; (8006820 <_sbrk_r+0x1c>)
 8006808:	2300      	movs	r3, #0
 800680a:	4604      	mov	r4, r0
 800680c:	4608      	mov	r0, r1
 800680e:	602b      	str	r3, [r5, #0]
 8006810:	f7fc fc60 	bl	80030d4 <_sbrk>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d102      	bne.n	800681e <_sbrk_r+0x1a>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	b103      	cbz	r3, 800681e <_sbrk_r+0x1a>
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	bd38      	pop	{r3, r4, r5, pc}
 8006820:	20000608 	.word	0x20000608

08006824 <__errno>:
 8006824:	4b01      	ldr	r3, [pc, #4]	; (800682c <__errno+0x8>)
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	20000070 	.word	0x20000070

08006830 <__libc_init_array>:
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	4d0d      	ldr	r5, [pc, #52]	; (8006868 <__libc_init_array+0x38>)
 8006834:	4c0d      	ldr	r4, [pc, #52]	; (800686c <__libc_init_array+0x3c>)
 8006836:	1b64      	subs	r4, r4, r5
 8006838:	10a4      	asrs	r4, r4, #2
 800683a:	2600      	movs	r6, #0
 800683c:	42a6      	cmp	r6, r4
 800683e:	d109      	bne.n	8006854 <__libc_init_array+0x24>
 8006840:	4d0b      	ldr	r5, [pc, #44]	; (8006870 <__libc_init_array+0x40>)
 8006842:	4c0c      	ldr	r4, [pc, #48]	; (8006874 <__libc_init_array+0x44>)
 8006844:	f002 f85a 	bl	80088fc <_init>
 8006848:	1b64      	subs	r4, r4, r5
 800684a:	10a4      	asrs	r4, r4, #2
 800684c:	2600      	movs	r6, #0
 800684e:	42a6      	cmp	r6, r4
 8006850:	d105      	bne.n	800685e <__libc_init_array+0x2e>
 8006852:	bd70      	pop	{r4, r5, r6, pc}
 8006854:	f855 3b04 	ldr.w	r3, [r5], #4
 8006858:	4798      	blx	r3
 800685a:	3601      	adds	r6, #1
 800685c:	e7ee      	b.n	800683c <__libc_init_array+0xc>
 800685e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006862:	4798      	blx	r3
 8006864:	3601      	adds	r6, #1
 8006866:	e7f2      	b.n	800684e <__libc_init_array+0x1e>
 8006868:	080090f4 	.word	0x080090f4
 800686c:	080090f4 	.word	0x080090f4
 8006870:	080090f4 	.word	0x080090f4
 8006874:	080090f8 	.word	0x080090f8

08006878 <__retarget_lock_acquire_recursive>:
 8006878:	4770      	bx	lr

0800687a <__retarget_lock_release_recursive>:
 800687a:	4770      	bx	lr

0800687c <quorem>:
 800687c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006880:	6903      	ldr	r3, [r0, #16]
 8006882:	690c      	ldr	r4, [r1, #16]
 8006884:	42a3      	cmp	r3, r4
 8006886:	4607      	mov	r7, r0
 8006888:	db7e      	blt.n	8006988 <quorem+0x10c>
 800688a:	3c01      	subs	r4, #1
 800688c:	f101 0814 	add.w	r8, r1, #20
 8006890:	f100 0514 	add.w	r5, r0, #20
 8006894:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800689e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068a2:	3301      	adds	r3, #1
 80068a4:	429a      	cmp	r2, r3
 80068a6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80068b2:	d331      	bcc.n	8006918 <quorem+0x9c>
 80068b4:	f04f 0e00 	mov.w	lr, #0
 80068b8:	4640      	mov	r0, r8
 80068ba:	46ac      	mov	ip, r5
 80068bc:	46f2      	mov	sl, lr
 80068be:	f850 2b04 	ldr.w	r2, [r0], #4
 80068c2:	b293      	uxth	r3, r2
 80068c4:	fb06 e303 	mla	r3, r6, r3, lr
 80068c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068cc:	0c1a      	lsrs	r2, r3, #16
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	ebaa 0303 	sub.w	r3, sl, r3
 80068d4:	f8dc a000 	ldr.w	sl, [ip]
 80068d8:	fa13 f38a 	uxtah	r3, r3, sl
 80068dc:	fb06 220e 	mla	r2, r6, lr, r2
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	9b00      	ldr	r3, [sp, #0]
 80068e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068e8:	b292      	uxth	r2, r2
 80068ea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80068ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068f2:	f8bd 3000 	ldrh.w	r3, [sp]
 80068f6:	4581      	cmp	r9, r0
 80068f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068fc:	f84c 3b04 	str.w	r3, [ip], #4
 8006900:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006904:	d2db      	bcs.n	80068be <quorem+0x42>
 8006906:	f855 300b 	ldr.w	r3, [r5, fp]
 800690a:	b92b      	cbnz	r3, 8006918 <quorem+0x9c>
 800690c:	9b01      	ldr	r3, [sp, #4]
 800690e:	3b04      	subs	r3, #4
 8006910:	429d      	cmp	r5, r3
 8006912:	461a      	mov	r2, r3
 8006914:	d32c      	bcc.n	8006970 <quorem+0xf4>
 8006916:	613c      	str	r4, [r7, #16]
 8006918:	4638      	mov	r0, r7
 800691a:	f001 faf9 	bl	8007f10 <__mcmp>
 800691e:	2800      	cmp	r0, #0
 8006920:	db22      	blt.n	8006968 <quorem+0xec>
 8006922:	3601      	adds	r6, #1
 8006924:	4629      	mov	r1, r5
 8006926:	2000      	movs	r0, #0
 8006928:	f858 2b04 	ldr.w	r2, [r8], #4
 800692c:	f8d1 c000 	ldr.w	ip, [r1]
 8006930:	b293      	uxth	r3, r2
 8006932:	1ac3      	subs	r3, r0, r3
 8006934:	0c12      	lsrs	r2, r2, #16
 8006936:	fa13 f38c 	uxtah	r3, r3, ip
 800693a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800693e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006942:	b29b      	uxth	r3, r3
 8006944:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006948:	45c1      	cmp	r9, r8
 800694a:	f841 3b04 	str.w	r3, [r1], #4
 800694e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006952:	d2e9      	bcs.n	8006928 <quorem+0xac>
 8006954:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006958:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800695c:	b922      	cbnz	r2, 8006968 <quorem+0xec>
 800695e:	3b04      	subs	r3, #4
 8006960:	429d      	cmp	r5, r3
 8006962:	461a      	mov	r2, r3
 8006964:	d30a      	bcc.n	800697c <quorem+0x100>
 8006966:	613c      	str	r4, [r7, #16]
 8006968:	4630      	mov	r0, r6
 800696a:	b003      	add	sp, #12
 800696c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	3b04      	subs	r3, #4
 8006974:	2a00      	cmp	r2, #0
 8006976:	d1ce      	bne.n	8006916 <quorem+0x9a>
 8006978:	3c01      	subs	r4, #1
 800697a:	e7c9      	b.n	8006910 <quorem+0x94>
 800697c:	6812      	ldr	r2, [r2, #0]
 800697e:	3b04      	subs	r3, #4
 8006980:	2a00      	cmp	r2, #0
 8006982:	d1f0      	bne.n	8006966 <quorem+0xea>
 8006984:	3c01      	subs	r4, #1
 8006986:	e7eb      	b.n	8006960 <quorem+0xe4>
 8006988:	2000      	movs	r0, #0
 800698a:	e7ee      	b.n	800696a <quorem+0xee>
 800698c:	0000      	movs	r0, r0
	...

08006990 <_dtoa_r>:
 8006990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	ed2d 8b04 	vpush	{d8-d9}
 8006998:	69c5      	ldr	r5, [r0, #28]
 800699a:	b093      	sub	sp, #76	; 0x4c
 800699c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80069a0:	ec57 6b10 	vmov	r6, r7, d0
 80069a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80069a8:	9107      	str	r1, [sp, #28]
 80069aa:	4604      	mov	r4, r0
 80069ac:	920a      	str	r2, [sp, #40]	; 0x28
 80069ae:	930d      	str	r3, [sp, #52]	; 0x34
 80069b0:	b975      	cbnz	r5, 80069d0 <_dtoa_r+0x40>
 80069b2:	2010      	movs	r0, #16
 80069b4:	f7ff fbfe 	bl	80061b4 <malloc>
 80069b8:	4602      	mov	r2, r0
 80069ba:	61e0      	str	r0, [r4, #28]
 80069bc:	b920      	cbnz	r0, 80069c8 <_dtoa_r+0x38>
 80069be:	4bae      	ldr	r3, [pc, #696]	; (8006c78 <_dtoa_r+0x2e8>)
 80069c0:	21ef      	movs	r1, #239	; 0xef
 80069c2:	48ae      	ldr	r0, [pc, #696]	; (8006c7c <_dtoa_r+0x2ec>)
 80069c4:	f001 fc84 	bl	80082d0 <__assert_func>
 80069c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069cc:	6005      	str	r5, [r0, #0]
 80069ce:	60c5      	str	r5, [r0, #12]
 80069d0:	69e3      	ldr	r3, [r4, #28]
 80069d2:	6819      	ldr	r1, [r3, #0]
 80069d4:	b151      	cbz	r1, 80069ec <_dtoa_r+0x5c>
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	604a      	str	r2, [r1, #4]
 80069da:	2301      	movs	r3, #1
 80069dc:	4093      	lsls	r3, r2
 80069de:	608b      	str	r3, [r1, #8]
 80069e0:	4620      	mov	r0, r4
 80069e2:	f001 f859 	bl	8007a98 <_Bfree>
 80069e6:	69e3      	ldr	r3, [r4, #28]
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	1e3b      	subs	r3, r7, #0
 80069ee:	bfbb      	ittet	lt
 80069f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069f4:	9303      	strlt	r3, [sp, #12]
 80069f6:	2300      	movge	r3, #0
 80069f8:	2201      	movlt	r2, #1
 80069fa:	bfac      	ite	ge
 80069fc:	f8c8 3000 	strge.w	r3, [r8]
 8006a00:	f8c8 2000 	strlt.w	r2, [r8]
 8006a04:	4b9e      	ldr	r3, [pc, #632]	; (8006c80 <_dtoa_r+0x2f0>)
 8006a06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a0a:	ea33 0308 	bics.w	r3, r3, r8
 8006a0e:	d11b      	bne.n	8006a48 <_dtoa_r+0xb8>
 8006a10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a12:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a1c:	4333      	orrs	r3, r6
 8006a1e:	f000 8593 	beq.w	8007548 <_dtoa_r+0xbb8>
 8006a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a24:	b963      	cbnz	r3, 8006a40 <_dtoa_r+0xb0>
 8006a26:	4b97      	ldr	r3, [pc, #604]	; (8006c84 <_dtoa_r+0x2f4>)
 8006a28:	e027      	b.n	8006a7a <_dtoa_r+0xea>
 8006a2a:	4b97      	ldr	r3, [pc, #604]	; (8006c88 <_dtoa_r+0x2f8>)
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	9800      	ldr	r0, [sp, #0]
 8006a36:	b013      	add	sp, #76	; 0x4c
 8006a38:	ecbd 8b04 	vpop	{d8-d9}
 8006a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a40:	4b90      	ldr	r3, [pc, #576]	; (8006c84 <_dtoa_r+0x2f4>)
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	3303      	adds	r3, #3
 8006a46:	e7f3      	b.n	8006a30 <_dtoa_r+0xa0>
 8006a48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	ec51 0b17 	vmov	r0, r1, d7
 8006a52:	eeb0 8a47 	vmov.f32	s16, s14
 8006a56:	eef0 8a67 	vmov.f32	s17, s15
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f7fa f854 	bl	8000b08 <__aeabi_dcmpeq>
 8006a60:	4681      	mov	r9, r0
 8006a62:	b160      	cbz	r0, 8006a7e <_dtoa_r+0xee>
 8006a64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a66:	2301      	movs	r3, #1
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 8568 	beq.w	8007542 <_dtoa_r+0xbb2>
 8006a72:	4b86      	ldr	r3, [pc, #536]	; (8006c8c <_dtoa_r+0x2fc>)
 8006a74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	e7da      	b.n	8006a34 <_dtoa_r+0xa4>
 8006a7e:	aa10      	add	r2, sp, #64	; 0x40
 8006a80:	a911      	add	r1, sp, #68	; 0x44
 8006a82:	4620      	mov	r0, r4
 8006a84:	eeb0 0a48 	vmov.f32	s0, s16
 8006a88:	eef0 0a68 	vmov.f32	s1, s17
 8006a8c:	f001 fae6 	bl	800805c <__d2b>
 8006a90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006a94:	4682      	mov	sl, r0
 8006a96:	2d00      	cmp	r5, #0
 8006a98:	d07f      	beq.n	8006b9a <_dtoa_r+0x20a>
 8006a9a:	ee18 3a90 	vmov	r3, s17
 8006a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aa2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006aa6:	ec51 0b18 	vmov	r0, r1, d8
 8006aaa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006aae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ab2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4b75      	ldr	r3, [pc, #468]	; (8006c90 <_dtoa_r+0x300>)
 8006abc:	f7f9 fc04 	bl	80002c8 <__aeabi_dsub>
 8006ac0:	a367      	add	r3, pc, #412	; (adr r3, 8006c60 <_dtoa_r+0x2d0>)
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f7f9 fdb7 	bl	8000638 <__aeabi_dmul>
 8006aca:	a367      	add	r3, pc, #412	; (adr r3, 8006c68 <_dtoa_r+0x2d8>)
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f7f9 fbfc 	bl	80002cc <__adddf3>
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	460f      	mov	r7, r1
 8006ada:	f7f9 fd43 	bl	8000564 <__aeabi_i2d>
 8006ade:	a364      	add	r3, pc, #400	; (adr r3, 8006c70 <_dtoa_r+0x2e0>)
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f7f9 fda8 	bl	8000638 <__aeabi_dmul>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4630      	mov	r0, r6
 8006aee:	4639      	mov	r1, r7
 8006af0:	f7f9 fbec 	bl	80002cc <__adddf3>
 8006af4:	4606      	mov	r6, r0
 8006af6:	460f      	mov	r7, r1
 8006af8:	f7fa f84e 	bl	8000b98 <__aeabi_d2iz>
 8006afc:	2200      	movs	r2, #0
 8006afe:	4683      	mov	fp, r0
 8006b00:	2300      	movs	r3, #0
 8006b02:	4630      	mov	r0, r6
 8006b04:	4639      	mov	r1, r7
 8006b06:	f7fa f809 	bl	8000b1c <__aeabi_dcmplt>
 8006b0a:	b148      	cbz	r0, 8006b20 <_dtoa_r+0x190>
 8006b0c:	4658      	mov	r0, fp
 8006b0e:	f7f9 fd29 	bl	8000564 <__aeabi_i2d>
 8006b12:	4632      	mov	r2, r6
 8006b14:	463b      	mov	r3, r7
 8006b16:	f7f9 fff7 	bl	8000b08 <__aeabi_dcmpeq>
 8006b1a:	b908      	cbnz	r0, 8006b20 <_dtoa_r+0x190>
 8006b1c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006b20:	f1bb 0f16 	cmp.w	fp, #22
 8006b24:	d857      	bhi.n	8006bd6 <_dtoa_r+0x246>
 8006b26:	4b5b      	ldr	r3, [pc, #364]	; (8006c94 <_dtoa_r+0x304>)
 8006b28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	ec51 0b18 	vmov	r0, r1, d8
 8006b34:	f7f9 fff2 	bl	8000b1c <__aeabi_dcmplt>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d04e      	beq.n	8006bda <_dtoa_r+0x24a>
 8006b3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006b40:	2300      	movs	r3, #0
 8006b42:	930c      	str	r3, [sp, #48]	; 0x30
 8006b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b46:	1b5b      	subs	r3, r3, r5
 8006b48:	1e5a      	subs	r2, r3, #1
 8006b4a:	bf45      	ittet	mi
 8006b4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b50:	9305      	strmi	r3, [sp, #20]
 8006b52:	2300      	movpl	r3, #0
 8006b54:	2300      	movmi	r3, #0
 8006b56:	9206      	str	r2, [sp, #24]
 8006b58:	bf54      	ite	pl
 8006b5a:	9305      	strpl	r3, [sp, #20]
 8006b5c:	9306      	strmi	r3, [sp, #24]
 8006b5e:	f1bb 0f00 	cmp.w	fp, #0
 8006b62:	db3c      	blt.n	8006bde <_dtoa_r+0x24e>
 8006b64:	9b06      	ldr	r3, [sp, #24]
 8006b66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006b6a:	445b      	add	r3, fp
 8006b6c:	9306      	str	r3, [sp, #24]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9308      	str	r3, [sp, #32]
 8006b72:	9b07      	ldr	r3, [sp, #28]
 8006b74:	2b09      	cmp	r3, #9
 8006b76:	d868      	bhi.n	8006c4a <_dtoa_r+0x2ba>
 8006b78:	2b05      	cmp	r3, #5
 8006b7a:	bfc4      	itt	gt
 8006b7c:	3b04      	subgt	r3, #4
 8006b7e:	9307      	strgt	r3, [sp, #28]
 8006b80:	9b07      	ldr	r3, [sp, #28]
 8006b82:	f1a3 0302 	sub.w	r3, r3, #2
 8006b86:	bfcc      	ite	gt
 8006b88:	2500      	movgt	r5, #0
 8006b8a:	2501      	movle	r5, #1
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	f200 8085 	bhi.w	8006c9c <_dtoa_r+0x30c>
 8006b92:	e8df f003 	tbb	[pc, r3]
 8006b96:	3b2e      	.short	0x3b2e
 8006b98:	5839      	.short	0x5839
 8006b9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b9e:	441d      	add	r5, r3
 8006ba0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	bfc1      	itttt	gt
 8006ba8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bac:	fa08 f803 	lslgt.w	r8, r8, r3
 8006bb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006bb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006bb8:	bfd6      	itet	le
 8006bba:	f1c3 0320 	rsble	r3, r3, #32
 8006bbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8006bc2:	fa06 f003 	lslle.w	r0, r6, r3
 8006bc6:	f7f9 fcbd 	bl	8000544 <__aeabi_ui2d>
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006bd0:	3d01      	subs	r5, #1
 8006bd2:	920e      	str	r2, [sp, #56]	; 0x38
 8006bd4:	e76f      	b.n	8006ab6 <_dtoa_r+0x126>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e7b3      	b.n	8006b42 <_dtoa_r+0x1b2>
 8006bda:	900c      	str	r0, [sp, #48]	; 0x30
 8006bdc:	e7b2      	b.n	8006b44 <_dtoa_r+0x1b4>
 8006bde:	9b05      	ldr	r3, [sp, #20]
 8006be0:	eba3 030b 	sub.w	r3, r3, fp
 8006be4:	9305      	str	r3, [sp, #20]
 8006be6:	f1cb 0300 	rsb	r3, fp, #0
 8006bea:	9308      	str	r3, [sp, #32]
 8006bec:	2300      	movs	r3, #0
 8006bee:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bf0:	e7bf      	b.n	8006b72 <_dtoa_r+0x1e2>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dc52      	bgt.n	8006ca2 <_dtoa_r+0x312>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	9301      	str	r3, [sp, #4]
 8006c00:	9304      	str	r3, [sp, #16]
 8006c02:	461a      	mov	r2, r3
 8006c04:	920a      	str	r2, [sp, #40]	; 0x28
 8006c06:	e00b      	b.n	8006c20 <_dtoa_r+0x290>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e7f3      	b.n	8006bf4 <_dtoa_r+0x264>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c12:	445b      	add	r3, fp
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	3301      	adds	r3, #1
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	9304      	str	r3, [sp, #16]
 8006c1c:	bfb8      	it	lt
 8006c1e:	2301      	movlt	r3, #1
 8006c20:	69e0      	ldr	r0, [r4, #28]
 8006c22:	2100      	movs	r1, #0
 8006c24:	2204      	movs	r2, #4
 8006c26:	f102 0614 	add.w	r6, r2, #20
 8006c2a:	429e      	cmp	r6, r3
 8006c2c:	d93d      	bls.n	8006caa <_dtoa_r+0x31a>
 8006c2e:	6041      	str	r1, [r0, #4]
 8006c30:	4620      	mov	r0, r4
 8006c32:	f000 fef1 	bl	8007a18 <_Balloc>
 8006c36:	9000      	str	r0, [sp, #0]
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d139      	bne.n	8006cb0 <_dtoa_r+0x320>
 8006c3c:	4b16      	ldr	r3, [pc, #88]	; (8006c98 <_dtoa_r+0x308>)
 8006c3e:	4602      	mov	r2, r0
 8006c40:	f240 11af 	movw	r1, #431	; 0x1af
 8006c44:	e6bd      	b.n	80069c2 <_dtoa_r+0x32>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e7e1      	b.n	8006c0e <_dtoa_r+0x27e>
 8006c4a:	2501      	movs	r5, #1
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	9307      	str	r3, [sp, #28]
 8006c50:	9509      	str	r5, [sp, #36]	; 0x24
 8006c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	9304      	str	r3, [sp, #16]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2312      	movs	r3, #18
 8006c5e:	e7d1      	b.n	8006c04 <_dtoa_r+0x274>
 8006c60:	636f4361 	.word	0x636f4361
 8006c64:	3fd287a7 	.word	0x3fd287a7
 8006c68:	8b60c8b3 	.word	0x8b60c8b3
 8006c6c:	3fc68a28 	.word	0x3fc68a28
 8006c70:	509f79fb 	.word	0x509f79fb
 8006c74:	3fd34413 	.word	0x3fd34413
 8006c78:	08008db9 	.word	0x08008db9
 8006c7c:	08008dd0 	.word	0x08008dd0
 8006c80:	7ff00000 	.word	0x7ff00000
 8006c84:	08008db5 	.word	0x08008db5
 8006c88:	08008dac 	.word	0x08008dac
 8006c8c:	08008d89 	.word	0x08008d89
 8006c90:	3ff80000 	.word	0x3ff80000
 8006c94:	08008ed0 	.word	0x08008ed0
 8006c98:	08008e28 	.word	0x08008e28
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca0:	e7d7      	b.n	8006c52 <_dtoa_r+0x2c2>
 8006ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	9304      	str	r3, [sp, #16]
 8006ca8:	e7ba      	b.n	8006c20 <_dtoa_r+0x290>
 8006caa:	3101      	adds	r1, #1
 8006cac:	0052      	lsls	r2, r2, #1
 8006cae:	e7ba      	b.n	8006c26 <_dtoa_r+0x296>
 8006cb0:	69e3      	ldr	r3, [r4, #28]
 8006cb2:	9a00      	ldr	r2, [sp, #0]
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	9b04      	ldr	r3, [sp, #16]
 8006cb8:	2b0e      	cmp	r3, #14
 8006cba:	f200 80a8 	bhi.w	8006e0e <_dtoa_r+0x47e>
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	f000 80a5 	beq.w	8006e0e <_dtoa_r+0x47e>
 8006cc4:	f1bb 0f00 	cmp.w	fp, #0
 8006cc8:	dd38      	ble.n	8006d3c <_dtoa_r+0x3ac>
 8006cca:	4bc0      	ldr	r3, [pc, #768]	; (8006fcc <_dtoa_r+0x63c>)
 8006ccc:	f00b 020f 	and.w	r2, fp, #15
 8006cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006cd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006cdc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006ce0:	d019      	beq.n	8006d16 <_dtoa_r+0x386>
 8006ce2:	4bbb      	ldr	r3, [pc, #748]	; (8006fd0 <_dtoa_r+0x640>)
 8006ce4:	ec51 0b18 	vmov	r0, r1, d8
 8006ce8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cec:	f7f9 fdce 	bl	800088c <__aeabi_ddiv>
 8006cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cf4:	f008 080f 	and.w	r8, r8, #15
 8006cf8:	2503      	movs	r5, #3
 8006cfa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006fd0 <_dtoa_r+0x640>
 8006cfe:	f1b8 0f00 	cmp.w	r8, #0
 8006d02:	d10a      	bne.n	8006d1a <_dtoa_r+0x38a>
 8006d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d08:	4632      	mov	r2, r6
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	f7f9 fdbe 	bl	800088c <__aeabi_ddiv>
 8006d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d14:	e02b      	b.n	8006d6e <_dtoa_r+0x3de>
 8006d16:	2502      	movs	r5, #2
 8006d18:	e7ef      	b.n	8006cfa <_dtoa_r+0x36a>
 8006d1a:	f018 0f01 	tst.w	r8, #1
 8006d1e:	d008      	beq.n	8006d32 <_dtoa_r+0x3a2>
 8006d20:	4630      	mov	r0, r6
 8006d22:	4639      	mov	r1, r7
 8006d24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d28:	f7f9 fc86 	bl	8000638 <__aeabi_dmul>
 8006d2c:	3501      	adds	r5, #1
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460f      	mov	r7, r1
 8006d32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d36:	f109 0908 	add.w	r9, r9, #8
 8006d3a:	e7e0      	b.n	8006cfe <_dtoa_r+0x36e>
 8006d3c:	f000 809f 	beq.w	8006e7e <_dtoa_r+0x4ee>
 8006d40:	f1cb 0600 	rsb	r6, fp, #0
 8006d44:	4ba1      	ldr	r3, [pc, #644]	; (8006fcc <_dtoa_r+0x63c>)
 8006d46:	4fa2      	ldr	r7, [pc, #648]	; (8006fd0 <_dtoa_r+0x640>)
 8006d48:	f006 020f 	and.w	r2, r6, #15
 8006d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	ec51 0b18 	vmov	r0, r1, d8
 8006d58:	f7f9 fc6e 	bl	8000638 <__aeabi_dmul>
 8006d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d60:	1136      	asrs	r6, r6, #4
 8006d62:	2300      	movs	r3, #0
 8006d64:	2502      	movs	r5, #2
 8006d66:	2e00      	cmp	r6, #0
 8006d68:	d17e      	bne.n	8006e68 <_dtoa_r+0x4d8>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1d0      	bne.n	8006d10 <_dtoa_r+0x380>
 8006d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8084 	beq.w	8006e82 <_dtoa_r+0x4f2>
 8006d7a:	4b96      	ldr	r3, [pc, #600]	; (8006fd4 <_dtoa_r+0x644>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 fecb 	bl	8000b1c <__aeabi_dcmplt>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d07b      	beq.n	8006e82 <_dtoa_r+0x4f2>
 8006d8a:	9b04      	ldr	r3, [sp, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d078      	beq.n	8006e82 <_dtoa_r+0x4f2>
 8006d90:	9b01      	ldr	r3, [sp, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	dd39      	ble.n	8006e0a <_dtoa_r+0x47a>
 8006d96:	4b90      	ldr	r3, [pc, #576]	; (8006fd8 <_dtoa_r+0x648>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	f7f9 fc4b 	bl	8000638 <__aeabi_dmul>
 8006da2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da6:	9e01      	ldr	r6, [sp, #4]
 8006da8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006dac:	3501      	adds	r5, #1
 8006dae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006db2:	4628      	mov	r0, r5
 8006db4:	f7f9 fbd6 	bl	8000564 <__aeabi_i2d>
 8006db8:	4642      	mov	r2, r8
 8006dba:	464b      	mov	r3, r9
 8006dbc:	f7f9 fc3c 	bl	8000638 <__aeabi_dmul>
 8006dc0:	4b86      	ldr	r3, [pc, #536]	; (8006fdc <_dtoa_r+0x64c>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f7f9 fa82 	bl	80002cc <__adddf3>
 8006dc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd0:	9303      	str	r3, [sp, #12]
 8006dd2:	2e00      	cmp	r6, #0
 8006dd4:	d158      	bne.n	8006e88 <_dtoa_r+0x4f8>
 8006dd6:	4b82      	ldr	r3, [pc, #520]	; (8006fe0 <_dtoa_r+0x650>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4649      	mov	r1, r9
 8006dde:	f7f9 fa73 	bl	80002c8 <__aeabi_dsub>
 8006de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006de6:	4680      	mov	r8, r0
 8006de8:	4689      	mov	r9, r1
 8006dea:	f7f9 feb5 	bl	8000b58 <__aeabi_dcmpgt>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	f040 8296 	bne.w	8007320 <_dtoa_r+0x990>
 8006df4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006df8:	4640      	mov	r0, r8
 8006dfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dfe:	4649      	mov	r1, r9
 8006e00:	f7f9 fe8c 	bl	8000b1c <__aeabi_dcmplt>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	f040 8289 	bne.w	800731c <_dtoa_r+0x98c>
 8006e0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f2c0 814e 	blt.w	80070b2 <_dtoa_r+0x722>
 8006e16:	f1bb 0f0e 	cmp.w	fp, #14
 8006e1a:	f300 814a 	bgt.w	80070b2 <_dtoa_r+0x722>
 8006e1e:	4b6b      	ldr	r3, [pc, #428]	; (8006fcc <_dtoa_r+0x63c>)
 8006e20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f280 80dc 	bge.w	8006fe8 <_dtoa_r+0x658>
 8006e30:	9b04      	ldr	r3, [sp, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f300 80d8 	bgt.w	8006fe8 <_dtoa_r+0x658>
 8006e38:	f040 826f 	bne.w	800731a <_dtoa_r+0x98a>
 8006e3c:	4b68      	ldr	r3, [pc, #416]	; (8006fe0 <_dtoa_r+0x650>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4640      	mov	r0, r8
 8006e42:	4649      	mov	r1, r9
 8006e44:	f7f9 fbf8 	bl	8000638 <__aeabi_dmul>
 8006e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e4c:	f7f9 fe7a 	bl	8000b44 <__aeabi_dcmpge>
 8006e50:	9e04      	ldr	r6, [sp, #16]
 8006e52:	4637      	mov	r7, r6
 8006e54:	2800      	cmp	r0, #0
 8006e56:	f040 8245 	bne.w	80072e4 <_dtoa_r+0x954>
 8006e5a:	9d00      	ldr	r5, [sp, #0]
 8006e5c:	2331      	movs	r3, #49	; 0x31
 8006e5e:	f805 3b01 	strb.w	r3, [r5], #1
 8006e62:	f10b 0b01 	add.w	fp, fp, #1
 8006e66:	e241      	b.n	80072ec <_dtoa_r+0x95c>
 8006e68:	07f2      	lsls	r2, r6, #31
 8006e6a:	d505      	bpl.n	8006e78 <_dtoa_r+0x4e8>
 8006e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e70:	f7f9 fbe2 	bl	8000638 <__aeabi_dmul>
 8006e74:	3501      	adds	r5, #1
 8006e76:	2301      	movs	r3, #1
 8006e78:	1076      	asrs	r6, r6, #1
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	e773      	b.n	8006d66 <_dtoa_r+0x3d6>
 8006e7e:	2502      	movs	r5, #2
 8006e80:	e775      	b.n	8006d6e <_dtoa_r+0x3de>
 8006e82:	9e04      	ldr	r6, [sp, #16]
 8006e84:	465f      	mov	r7, fp
 8006e86:	e792      	b.n	8006dae <_dtoa_r+0x41e>
 8006e88:	9900      	ldr	r1, [sp, #0]
 8006e8a:	4b50      	ldr	r3, [pc, #320]	; (8006fcc <_dtoa_r+0x63c>)
 8006e8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e90:	4431      	add	r1, r6
 8006e92:	9102      	str	r1, [sp, #8]
 8006e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e96:	eeb0 9a47 	vmov.f32	s18, s14
 8006e9a:	eef0 9a67 	vmov.f32	s19, s15
 8006e9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ea6:	2900      	cmp	r1, #0
 8006ea8:	d044      	beq.n	8006f34 <_dtoa_r+0x5a4>
 8006eaa:	494e      	ldr	r1, [pc, #312]	; (8006fe4 <_dtoa_r+0x654>)
 8006eac:	2000      	movs	r0, #0
 8006eae:	f7f9 fced 	bl	800088c <__aeabi_ddiv>
 8006eb2:	ec53 2b19 	vmov	r2, r3, d9
 8006eb6:	f7f9 fa07 	bl	80002c8 <__aeabi_dsub>
 8006eba:	9d00      	ldr	r5, [sp, #0]
 8006ebc:	ec41 0b19 	vmov	d9, r0, r1
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	f7f9 fe68 	bl	8000b98 <__aeabi_d2iz>
 8006ec8:	4606      	mov	r6, r0
 8006eca:	f7f9 fb4b 	bl	8000564 <__aeabi_i2d>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	f7f9 f9f7 	bl	80002c8 <__aeabi_dsub>
 8006eda:	3630      	adds	r6, #48	; 0x30
 8006edc:	f805 6b01 	strb.w	r6, [r5], #1
 8006ee0:	ec53 2b19 	vmov	r2, r3, d9
 8006ee4:	4680      	mov	r8, r0
 8006ee6:	4689      	mov	r9, r1
 8006ee8:	f7f9 fe18 	bl	8000b1c <__aeabi_dcmplt>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d164      	bne.n	8006fba <_dtoa_r+0x62a>
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	4937      	ldr	r1, [pc, #220]	; (8006fd4 <_dtoa_r+0x644>)
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	f7f9 f9e6 	bl	80002c8 <__aeabi_dsub>
 8006efc:	ec53 2b19 	vmov	r2, r3, d9
 8006f00:	f7f9 fe0c 	bl	8000b1c <__aeabi_dcmplt>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	f040 80b6 	bne.w	8007076 <_dtoa_r+0x6e6>
 8006f0a:	9b02      	ldr	r3, [sp, #8]
 8006f0c:	429d      	cmp	r5, r3
 8006f0e:	f43f af7c 	beq.w	8006e0a <_dtoa_r+0x47a>
 8006f12:	4b31      	ldr	r3, [pc, #196]	; (8006fd8 <_dtoa_r+0x648>)
 8006f14:	ec51 0b19 	vmov	r0, r1, d9
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f7f9 fb8d 	bl	8000638 <__aeabi_dmul>
 8006f1e:	4b2e      	ldr	r3, [pc, #184]	; (8006fd8 <_dtoa_r+0x648>)
 8006f20:	ec41 0b19 	vmov	d9, r0, r1
 8006f24:	2200      	movs	r2, #0
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f7f9 fb85 	bl	8000638 <__aeabi_dmul>
 8006f2e:	4680      	mov	r8, r0
 8006f30:	4689      	mov	r9, r1
 8006f32:	e7c5      	b.n	8006ec0 <_dtoa_r+0x530>
 8006f34:	ec51 0b17 	vmov	r0, r1, d7
 8006f38:	f7f9 fb7e 	bl	8000638 <__aeabi_dmul>
 8006f3c:	9b02      	ldr	r3, [sp, #8]
 8006f3e:	9d00      	ldr	r5, [sp, #0]
 8006f40:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f42:	ec41 0b19 	vmov	d9, r0, r1
 8006f46:	4649      	mov	r1, r9
 8006f48:	4640      	mov	r0, r8
 8006f4a:	f7f9 fe25 	bl	8000b98 <__aeabi_d2iz>
 8006f4e:	4606      	mov	r6, r0
 8006f50:	f7f9 fb08 	bl	8000564 <__aeabi_i2d>
 8006f54:	3630      	adds	r6, #48	; 0x30
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	f7f9 f9b3 	bl	80002c8 <__aeabi_dsub>
 8006f62:	f805 6b01 	strb.w	r6, [r5], #1
 8006f66:	9b02      	ldr	r3, [sp, #8]
 8006f68:	429d      	cmp	r5, r3
 8006f6a:	4680      	mov	r8, r0
 8006f6c:	4689      	mov	r9, r1
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	d124      	bne.n	8006fbe <_dtoa_r+0x62e>
 8006f74:	4b1b      	ldr	r3, [pc, #108]	; (8006fe4 <_dtoa_r+0x654>)
 8006f76:	ec51 0b19 	vmov	r0, r1, d9
 8006f7a:	f7f9 f9a7 	bl	80002cc <__adddf3>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 fde7 	bl	8000b58 <__aeabi_dcmpgt>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d173      	bne.n	8007076 <_dtoa_r+0x6e6>
 8006f8e:	ec53 2b19 	vmov	r2, r3, d9
 8006f92:	4914      	ldr	r1, [pc, #80]	; (8006fe4 <_dtoa_r+0x654>)
 8006f94:	2000      	movs	r0, #0
 8006f96:	f7f9 f997 	bl	80002c8 <__aeabi_dsub>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	f7f9 fdbb 	bl	8000b1c <__aeabi_dcmplt>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f43f af2f 	beq.w	8006e0a <_dtoa_r+0x47a>
 8006fac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fae:	1e6b      	subs	r3, r5, #1
 8006fb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fb6:	2b30      	cmp	r3, #48	; 0x30
 8006fb8:	d0f8      	beq.n	8006fac <_dtoa_r+0x61c>
 8006fba:	46bb      	mov	fp, r7
 8006fbc:	e04a      	b.n	8007054 <_dtoa_r+0x6c4>
 8006fbe:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <_dtoa_r+0x648>)
 8006fc0:	f7f9 fb3a 	bl	8000638 <__aeabi_dmul>
 8006fc4:	4680      	mov	r8, r0
 8006fc6:	4689      	mov	r9, r1
 8006fc8:	e7bd      	b.n	8006f46 <_dtoa_r+0x5b6>
 8006fca:	bf00      	nop
 8006fcc:	08008ed0 	.word	0x08008ed0
 8006fd0:	08008ea8 	.word	0x08008ea8
 8006fd4:	3ff00000 	.word	0x3ff00000
 8006fd8:	40240000 	.word	0x40240000
 8006fdc:	401c0000 	.word	0x401c0000
 8006fe0:	40140000 	.word	0x40140000
 8006fe4:	3fe00000 	.word	0x3fe00000
 8006fe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fec:	9d00      	ldr	r5, [sp, #0]
 8006fee:	4642      	mov	r2, r8
 8006ff0:	464b      	mov	r3, r9
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	f7f9 fc49 	bl	800088c <__aeabi_ddiv>
 8006ffa:	f7f9 fdcd 	bl	8000b98 <__aeabi_d2iz>
 8006ffe:	9001      	str	r0, [sp, #4]
 8007000:	f7f9 fab0 	bl	8000564 <__aeabi_i2d>
 8007004:	4642      	mov	r2, r8
 8007006:	464b      	mov	r3, r9
 8007008:	f7f9 fb16 	bl	8000638 <__aeabi_dmul>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 f958 	bl	80002c8 <__aeabi_dsub>
 8007018:	9e01      	ldr	r6, [sp, #4]
 800701a:	9f04      	ldr	r7, [sp, #16]
 800701c:	3630      	adds	r6, #48	; 0x30
 800701e:	f805 6b01 	strb.w	r6, [r5], #1
 8007022:	9e00      	ldr	r6, [sp, #0]
 8007024:	1bae      	subs	r6, r5, r6
 8007026:	42b7      	cmp	r7, r6
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	d134      	bne.n	8007098 <_dtoa_r+0x708>
 800702e:	f7f9 f94d 	bl	80002cc <__adddf3>
 8007032:	4642      	mov	r2, r8
 8007034:	464b      	mov	r3, r9
 8007036:	4606      	mov	r6, r0
 8007038:	460f      	mov	r7, r1
 800703a:	f7f9 fd8d 	bl	8000b58 <__aeabi_dcmpgt>
 800703e:	b9c8      	cbnz	r0, 8007074 <_dtoa_r+0x6e4>
 8007040:	4642      	mov	r2, r8
 8007042:	464b      	mov	r3, r9
 8007044:	4630      	mov	r0, r6
 8007046:	4639      	mov	r1, r7
 8007048:	f7f9 fd5e 	bl	8000b08 <__aeabi_dcmpeq>
 800704c:	b110      	cbz	r0, 8007054 <_dtoa_r+0x6c4>
 800704e:	9b01      	ldr	r3, [sp, #4]
 8007050:	07db      	lsls	r3, r3, #31
 8007052:	d40f      	bmi.n	8007074 <_dtoa_r+0x6e4>
 8007054:	4651      	mov	r1, sl
 8007056:	4620      	mov	r0, r4
 8007058:	f000 fd1e 	bl	8007a98 <_Bfree>
 800705c:	2300      	movs	r3, #0
 800705e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007060:	702b      	strb	r3, [r5, #0]
 8007062:	f10b 0301 	add.w	r3, fp, #1
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800706a:	2b00      	cmp	r3, #0
 800706c:	f43f ace2 	beq.w	8006a34 <_dtoa_r+0xa4>
 8007070:	601d      	str	r5, [r3, #0]
 8007072:	e4df      	b.n	8006a34 <_dtoa_r+0xa4>
 8007074:	465f      	mov	r7, fp
 8007076:	462b      	mov	r3, r5
 8007078:	461d      	mov	r5, r3
 800707a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800707e:	2a39      	cmp	r2, #57	; 0x39
 8007080:	d106      	bne.n	8007090 <_dtoa_r+0x700>
 8007082:	9a00      	ldr	r2, [sp, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d1f7      	bne.n	8007078 <_dtoa_r+0x6e8>
 8007088:	9900      	ldr	r1, [sp, #0]
 800708a:	2230      	movs	r2, #48	; 0x30
 800708c:	3701      	adds	r7, #1
 800708e:	700a      	strb	r2, [r1, #0]
 8007090:	781a      	ldrb	r2, [r3, #0]
 8007092:	3201      	adds	r2, #1
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	e790      	b.n	8006fba <_dtoa_r+0x62a>
 8007098:	4ba3      	ldr	r3, [pc, #652]	; (8007328 <_dtoa_r+0x998>)
 800709a:	2200      	movs	r2, #0
 800709c:	f7f9 facc 	bl	8000638 <__aeabi_dmul>
 80070a0:	2200      	movs	r2, #0
 80070a2:	2300      	movs	r3, #0
 80070a4:	4606      	mov	r6, r0
 80070a6:	460f      	mov	r7, r1
 80070a8:	f7f9 fd2e 	bl	8000b08 <__aeabi_dcmpeq>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d09e      	beq.n	8006fee <_dtoa_r+0x65e>
 80070b0:	e7d0      	b.n	8007054 <_dtoa_r+0x6c4>
 80070b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070b4:	2a00      	cmp	r2, #0
 80070b6:	f000 80ca 	beq.w	800724e <_dtoa_r+0x8be>
 80070ba:	9a07      	ldr	r2, [sp, #28]
 80070bc:	2a01      	cmp	r2, #1
 80070be:	f300 80ad 	bgt.w	800721c <_dtoa_r+0x88c>
 80070c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070c4:	2a00      	cmp	r2, #0
 80070c6:	f000 80a5 	beq.w	8007214 <_dtoa_r+0x884>
 80070ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070ce:	9e08      	ldr	r6, [sp, #32]
 80070d0:	9d05      	ldr	r5, [sp, #20]
 80070d2:	9a05      	ldr	r2, [sp, #20]
 80070d4:	441a      	add	r2, r3
 80070d6:	9205      	str	r2, [sp, #20]
 80070d8:	9a06      	ldr	r2, [sp, #24]
 80070da:	2101      	movs	r1, #1
 80070dc:	441a      	add	r2, r3
 80070de:	4620      	mov	r0, r4
 80070e0:	9206      	str	r2, [sp, #24]
 80070e2:	f000 fd8f 	bl	8007c04 <__i2b>
 80070e6:	4607      	mov	r7, r0
 80070e8:	b165      	cbz	r5, 8007104 <_dtoa_r+0x774>
 80070ea:	9b06      	ldr	r3, [sp, #24]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	dd09      	ble.n	8007104 <_dtoa_r+0x774>
 80070f0:	42ab      	cmp	r3, r5
 80070f2:	9a05      	ldr	r2, [sp, #20]
 80070f4:	bfa8      	it	ge
 80070f6:	462b      	movge	r3, r5
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	9205      	str	r2, [sp, #20]
 80070fc:	9a06      	ldr	r2, [sp, #24]
 80070fe:	1aed      	subs	r5, r5, r3
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	9306      	str	r3, [sp, #24]
 8007104:	9b08      	ldr	r3, [sp, #32]
 8007106:	b1f3      	cbz	r3, 8007146 <_dtoa_r+0x7b6>
 8007108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 80a3 	beq.w	8007256 <_dtoa_r+0x8c6>
 8007110:	2e00      	cmp	r6, #0
 8007112:	dd10      	ble.n	8007136 <_dtoa_r+0x7a6>
 8007114:	4639      	mov	r1, r7
 8007116:	4632      	mov	r2, r6
 8007118:	4620      	mov	r0, r4
 800711a:	f000 fe33 	bl	8007d84 <__pow5mult>
 800711e:	4652      	mov	r2, sl
 8007120:	4601      	mov	r1, r0
 8007122:	4607      	mov	r7, r0
 8007124:	4620      	mov	r0, r4
 8007126:	f000 fd83 	bl	8007c30 <__multiply>
 800712a:	4651      	mov	r1, sl
 800712c:	4680      	mov	r8, r0
 800712e:	4620      	mov	r0, r4
 8007130:	f000 fcb2 	bl	8007a98 <_Bfree>
 8007134:	46c2      	mov	sl, r8
 8007136:	9b08      	ldr	r3, [sp, #32]
 8007138:	1b9a      	subs	r2, r3, r6
 800713a:	d004      	beq.n	8007146 <_dtoa_r+0x7b6>
 800713c:	4651      	mov	r1, sl
 800713e:	4620      	mov	r0, r4
 8007140:	f000 fe20 	bl	8007d84 <__pow5mult>
 8007144:	4682      	mov	sl, r0
 8007146:	2101      	movs	r1, #1
 8007148:	4620      	mov	r0, r4
 800714a:	f000 fd5b 	bl	8007c04 <__i2b>
 800714e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007150:	2b00      	cmp	r3, #0
 8007152:	4606      	mov	r6, r0
 8007154:	f340 8081 	ble.w	800725a <_dtoa_r+0x8ca>
 8007158:	461a      	mov	r2, r3
 800715a:	4601      	mov	r1, r0
 800715c:	4620      	mov	r0, r4
 800715e:	f000 fe11 	bl	8007d84 <__pow5mult>
 8007162:	9b07      	ldr	r3, [sp, #28]
 8007164:	2b01      	cmp	r3, #1
 8007166:	4606      	mov	r6, r0
 8007168:	dd7a      	ble.n	8007260 <_dtoa_r+0x8d0>
 800716a:	f04f 0800 	mov.w	r8, #0
 800716e:	6933      	ldr	r3, [r6, #16]
 8007170:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007174:	6918      	ldr	r0, [r3, #16]
 8007176:	f000 fcf7 	bl	8007b68 <__hi0bits>
 800717a:	f1c0 0020 	rsb	r0, r0, #32
 800717e:	9b06      	ldr	r3, [sp, #24]
 8007180:	4418      	add	r0, r3
 8007182:	f010 001f 	ands.w	r0, r0, #31
 8007186:	f000 8094 	beq.w	80072b2 <_dtoa_r+0x922>
 800718a:	f1c0 0320 	rsb	r3, r0, #32
 800718e:	2b04      	cmp	r3, #4
 8007190:	f340 8085 	ble.w	800729e <_dtoa_r+0x90e>
 8007194:	9b05      	ldr	r3, [sp, #20]
 8007196:	f1c0 001c 	rsb	r0, r0, #28
 800719a:	4403      	add	r3, r0
 800719c:	9305      	str	r3, [sp, #20]
 800719e:	9b06      	ldr	r3, [sp, #24]
 80071a0:	4403      	add	r3, r0
 80071a2:	4405      	add	r5, r0
 80071a4:	9306      	str	r3, [sp, #24]
 80071a6:	9b05      	ldr	r3, [sp, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	dd05      	ble.n	80071b8 <_dtoa_r+0x828>
 80071ac:	4651      	mov	r1, sl
 80071ae:	461a      	mov	r2, r3
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fe41 	bl	8007e38 <__lshift>
 80071b6:	4682      	mov	sl, r0
 80071b8:	9b06      	ldr	r3, [sp, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	dd05      	ble.n	80071ca <_dtoa_r+0x83a>
 80071be:	4631      	mov	r1, r6
 80071c0:	461a      	mov	r2, r3
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 fe38 	bl	8007e38 <__lshift>
 80071c8:	4606      	mov	r6, r0
 80071ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d072      	beq.n	80072b6 <_dtoa_r+0x926>
 80071d0:	4631      	mov	r1, r6
 80071d2:	4650      	mov	r0, sl
 80071d4:	f000 fe9c 	bl	8007f10 <__mcmp>
 80071d8:	2800      	cmp	r0, #0
 80071da:	da6c      	bge.n	80072b6 <_dtoa_r+0x926>
 80071dc:	2300      	movs	r3, #0
 80071de:	4651      	mov	r1, sl
 80071e0:	220a      	movs	r2, #10
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 fc7a 	bl	8007adc <__multadd>
 80071e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80071ee:	4682      	mov	sl, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 81b0 	beq.w	8007556 <_dtoa_r+0xbc6>
 80071f6:	2300      	movs	r3, #0
 80071f8:	4639      	mov	r1, r7
 80071fa:	220a      	movs	r2, #10
 80071fc:	4620      	mov	r0, r4
 80071fe:	f000 fc6d 	bl	8007adc <__multadd>
 8007202:	9b01      	ldr	r3, [sp, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	4607      	mov	r7, r0
 8007208:	f300 8096 	bgt.w	8007338 <_dtoa_r+0x9a8>
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	2b02      	cmp	r3, #2
 8007210:	dc59      	bgt.n	80072c6 <_dtoa_r+0x936>
 8007212:	e091      	b.n	8007338 <_dtoa_r+0x9a8>
 8007214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800721a:	e758      	b.n	80070ce <_dtoa_r+0x73e>
 800721c:	9b04      	ldr	r3, [sp, #16]
 800721e:	1e5e      	subs	r6, r3, #1
 8007220:	9b08      	ldr	r3, [sp, #32]
 8007222:	42b3      	cmp	r3, r6
 8007224:	bfbf      	itttt	lt
 8007226:	9b08      	ldrlt	r3, [sp, #32]
 8007228:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800722a:	9608      	strlt	r6, [sp, #32]
 800722c:	1af3      	sublt	r3, r6, r3
 800722e:	bfb4      	ite	lt
 8007230:	18d2      	addlt	r2, r2, r3
 8007232:	1b9e      	subge	r6, r3, r6
 8007234:	9b04      	ldr	r3, [sp, #16]
 8007236:	bfbc      	itt	lt
 8007238:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800723a:	2600      	movlt	r6, #0
 800723c:	2b00      	cmp	r3, #0
 800723e:	bfb7      	itett	lt
 8007240:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007244:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007248:	1a9d      	sublt	r5, r3, r2
 800724a:	2300      	movlt	r3, #0
 800724c:	e741      	b.n	80070d2 <_dtoa_r+0x742>
 800724e:	9e08      	ldr	r6, [sp, #32]
 8007250:	9d05      	ldr	r5, [sp, #20]
 8007252:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007254:	e748      	b.n	80070e8 <_dtoa_r+0x758>
 8007256:	9a08      	ldr	r2, [sp, #32]
 8007258:	e770      	b.n	800713c <_dtoa_r+0x7ac>
 800725a:	9b07      	ldr	r3, [sp, #28]
 800725c:	2b01      	cmp	r3, #1
 800725e:	dc19      	bgt.n	8007294 <_dtoa_r+0x904>
 8007260:	9b02      	ldr	r3, [sp, #8]
 8007262:	b9bb      	cbnz	r3, 8007294 <_dtoa_r+0x904>
 8007264:	9b03      	ldr	r3, [sp, #12]
 8007266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800726a:	b99b      	cbnz	r3, 8007294 <_dtoa_r+0x904>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007272:	0d1b      	lsrs	r3, r3, #20
 8007274:	051b      	lsls	r3, r3, #20
 8007276:	b183      	cbz	r3, 800729a <_dtoa_r+0x90a>
 8007278:	9b05      	ldr	r3, [sp, #20]
 800727a:	3301      	adds	r3, #1
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	9b06      	ldr	r3, [sp, #24]
 8007280:	3301      	adds	r3, #1
 8007282:	9306      	str	r3, [sp, #24]
 8007284:	f04f 0801 	mov.w	r8, #1
 8007288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800728a:	2b00      	cmp	r3, #0
 800728c:	f47f af6f 	bne.w	800716e <_dtoa_r+0x7de>
 8007290:	2001      	movs	r0, #1
 8007292:	e774      	b.n	800717e <_dtoa_r+0x7ee>
 8007294:	f04f 0800 	mov.w	r8, #0
 8007298:	e7f6      	b.n	8007288 <_dtoa_r+0x8f8>
 800729a:	4698      	mov	r8, r3
 800729c:	e7f4      	b.n	8007288 <_dtoa_r+0x8f8>
 800729e:	d082      	beq.n	80071a6 <_dtoa_r+0x816>
 80072a0:	9a05      	ldr	r2, [sp, #20]
 80072a2:	331c      	adds	r3, #28
 80072a4:	441a      	add	r2, r3
 80072a6:	9205      	str	r2, [sp, #20]
 80072a8:	9a06      	ldr	r2, [sp, #24]
 80072aa:	441a      	add	r2, r3
 80072ac:	441d      	add	r5, r3
 80072ae:	9206      	str	r2, [sp, #24]
 80072b0:	e779      	b.n	80071a6 <_dtoa_r+0x816>
 80072b2:	4603      	mov	r3, r0
 80072b4:	e7f4      	b.n	80072a0 <_dtoa_r+0x910>
 80072b6:	9b04      	ldr	r3, [sp, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	dc37      	bgt.n	800732c <_dtoa_r+0x99c>
 80072bc:	9b07      	ldr	r3, [sp, #28]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	dd34      	ble.n	800732c <_dtoa_r+0x99c>
 80072c2:	9b04      	ldr	r3, [sp, #16]
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	b963      	cbnz	r3, 80072e4 <_dtoa_r+0x954>
 80072ca:	4631      	mov	r1, r6
 80072cc:	2205      	movs	r2, #5
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 fc04 	bl	8007adc <__multadd>
 80072d4:	4601      	mov	r1, r0
 80072d6:	4606      	mov	r6, r0
 80072d8:	4650      	mov	r0, sl
 80072da:	f000 fe19 	bl	8007f10 <__mcmp>
 80072de:	2800      	cmp	r0, #0
 80072e0:	f73f adbb 	bgt.w	8006e5a <_dtoa_r+0x4ca>
 80072e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e6:	9d00      	ldr	r5, [sp, #0]
 80072e8:	ea6f 0b03 	mvn.w	fp, r3
 80072ec:	f04f 0800 	mov.w	r8, #0
 80072f0:	4631      	mov	r1, r6
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 fbd0 	bl	8007a98 <_Bfree>
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	f43f aeab 	beq.w	8007054 <_dtoa_r+0x6c4>
 80072fe:	f1b8 0f00 	cmp.w	r8, #0
 8007302:	d005      	beq.n	8007310 <_dtoa_r+0x980>
 8007304:	45b8      	cmp	r8, r7
 8007306:	d003      	beq.n	8007310 <_dtoa_r+0x980>
 8007308:	4641      	mov	r1, r8
 800730a:	4620      	mov	r0, r4
 800730c:	f000 fbc4 	bl	8007a98 <_Bfree>
 8007310:	4639      	mov	r1, r7
 8007312:	4620      	mov	r0, r4
 8007314:	f000 fbc0 	bl	8007a98 <_Bfree>
 8007318:	e69c      	b.n	8007054 <_dtoa_r+0x6c4>
 800731a:	2600      	movs	r6, #0
 800731c:	4637      	mov	r7, r6
 800731e:	e7e1      	b.n	80072e4 <_dtoa_r+0x954>
 8007320:	46bb      	mov	fp, r7
 8007322:	4637      	mov	r7, r6
 8007324:	e599      	b.n	8006e5a <_dtoa_r+0x4ca>
 8007326:	bf00      	nop
 8007328:	40240000 	.word	0x40240000
 800732c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 80c8 	beq.w	80074c4 <_dtoa_r+0xb34>
 8007334:	9b04      	ldr	r3, [sp, #16]
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	2d00      	cmp	r5, #0
 800733a:	dd05      	ble.n	8007348 <_dtoa_r+0x9b8>
 800733c:	4639      	mov	r1, r7
 800733e:	462a      	mov	r2, r5
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fd79 	bl	8007e38 <__lshift>
 8007346:	4607      	mov	r7, r0
 8007348:	f1b8 0f00 	cmp.w	r8, #0
 800734c:	d05b      	beq.n	8007406 <_dtoa_r+0xa76>
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fb61 	bl	8007a18 <_Balloc>
 8007356:	4605      	mov	r5, r0
 8007358:	b928      	cbnz	r0, 8007366 <_dtoa_r+0x9d6>
 800735a:	4b83      	ldr	r3, [pc, #524]	; (8007568 <_dtoa_r+0xbd8>)
 800735c:	4602      	mov	r2, r0
 800735e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007362:	f7ff bb2e 	b.w	80069c2 <_dtoa_r+0x32>
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	3202      	adds	r2, #2
 800736a:	0092      	lsls	r2, r2, #2
 800736c:	f107 010c 	add.w	r1, r7, #12
 8007370:	300c      	adds	r0, #12
 8007372:	f000 ff9f 	bl	80082b4 <memcpy>
 8007376:	2201      	movs	r2, #1
 8007378:	4629      	mov	r1, r5
 800737a:	4620      	mov	r0, r4
 800737c:	f000 fd5c 	bl	8007e38 <__lshift>
 8007380:	9b00      	ldr	r3, [sp, #0]
 8007382:	3301      	adds	r3, #1
 8007384:	9304      	str	r3, [sp, #16]
 8007386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800738a:	4413      	add	r3, r2
 800738c:	9308      	str	r3, [sp, #32]
 800738e:	9b02      	ldr	r3, [sp, #8]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	46b8      	mov	r8, r7
 8007396:	9306      	str	r3, [sp, #24]
 8007398:	4607      	mov	r7, r0
 800739a:	9b04      	ldr	r3, [sp, #16]
 800739c:	4631      	mov	r1, r6
 800739e:	3b01      	subs	r3, #1
 80073a0:	4650      	mov	r0, sl
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	f7ff fa6a 	bl	800687c <quorem>
 80073a8:	4641      	mov	r1, r8
 80073aa:	9002      	str	r0, [sp, #8]
 80073ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80073b0:	4650      	mov	r0, sl
 80073b2:	f000 fdad 	bl	8007f10 <__mcmp>
 80073b6:	463a      	mov	r2, r7
 80073b8:	9005      	str	r0, [sp, #20]
 80073ba:	4631      	mov	r1, r6
 80073bc:	4620      	mov	r0, r4
 80073be:	f000 fdc3 	bl	8007f48 <__mdiff>
 80073c2:	68c2      	ldr	r2, [r0, #12]
 80073c4:	4605      	mov	r5, r0
 80073c6:	bb02      	cbnz	r2, 800740a <_dtoa_r+0xa7a>
 80073c8:	4601      	mov	r1, r0
 80073ca:	4650      	mov	r0, sl
 80073cc:	f000 fda0 	bl	8007f10 <__mcmp>
 80073d0:	4602      	mov	r2, r0
 80073d2:	4629      	mov	r1, r5
 80073d4:	4620      	mov	r0, r4
 80073d6:	9209      	str	r2, [sp, #36]	; 0x24
 80073d8:	f000 fb5e 	bl	8007a98 <_Bfree>
 80073dc:	9b07      	ldr	r3, [sp, #28]
 80073de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073e0:	9d04      	ldr	r5, [sp, #16]
 80073e2:	ea43 0102 	orr.w	r1, r3, r2
 80073e6:	9b06      	ldr	r3, [sp, #24]
 80073e8:	4319      	orrs	r1, r3
 80073ea:	d110      	bne.n	800740e <_dtoa_r+0xa7e>
 80073ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073f0:	d029      	beq.n	8007446 <_dtoa_r+0xab6>
 80073f2:	9b05      	ldr	r3, [sp, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dd02      	ble.n	80073fe <_dtoa_r+0xa6e>
 80073f8:	9b02      	ldr	r3, [sp, #8]
 80073fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	f883 9000 	strb.w	r9, [r3]
 8007404:	e774      	b.n	80072f0 <_dtoa_r+0x960>
 8007406:	4638      	mov	r0, r7
 8007408:	e7ba      	b.n	8007380 <_dtoa_r+0x9f0>
 800740a:	2201      	movs	r2, #1
 800740c:	e7e1      	b.n	80073d2 <_dtoa_r+0xa42>
 800740e:	9b05      	ldr	r3, [sp, #20]
 8007410:	2b00      	cmp	r3, #0
 8007412:	db04      	blt.n	800741e <_dtoa_r+0xa8e>
 8007414:	9907      	ldr	r1, [sp, #28]
 8007416:	430b      	orrs	r3, r1
 8007418:	9906      	ldr	r1, [sp, #24]
 800741a:	430b      	orrs	r3, r1
 800741c:	d120      	bne.n	8007460 <_dtoa_r+0xad0>
 800741e:	2a00      	cmp	r2, #0
 8007420:	dded      	ble.n	80073fe <_dtoa_r+0xa6e>
 8007422:	4651      	mov	r1, sl
 8007424:	2201      	movs	r2, #1
 8007426:	4620      	mov	r0, r4
 8007428:	f000 fd06 	bl	8007e38 <__lshift>
 800742c:	4631      	mov	r1, r6
 800742e:	4682      	mov	sl, r0
 8007430:	f000 fd6e 	bl	8007f10 <__mcmp>
 8007434:	2800      	cmp	r0, #0
 8007436:	dc03      	bgt.n	8007440 <_dtoa_r+0xab0>
 8007438:	d1e1      	bne.n	80073fe <_dtoa_r+0xa6e>
 800743a:	f019 0f01 	tst.w	r9, #1
 800743e:	d0de      	beq.n	80073fe <_dtoa_r+0xa6e>
 8007440:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007444:	d1d8      	bne.n	80073f8 <_dtoa_r+0xa68>
 8007446:	9a01      	ldr	r2, [sp, #4]
 8007448:	2339      	movs	r3, #57	; 0x39
 800744a:	7013      	strb	r3, [r2, #0]
 800744c:	462b      	mov	r3, r5
 800744e:	461d      	mov	r5, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007456:	2a39      	cmp	r2, #57	; 0x39
 8007458:	d06c      	beq.n	8007534 <_dtoa_r+0xba4>
 800745a:	3201      	adds	r2, #1
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	e747      	b.n	80072f0 <_dtoa_r+0x960>
 8007460:	2a00      	cmp	r2, #0
 8007462:	dd07      	ble.n	8007474 <_dtoa_r+0xae4>
 8007464:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007468:	d0ed      	beq.n	8007446 <_dtoa_r+0xab6>
 800746a:	9a01      	ldr	r2, [sp, #4]
 800746c:	f109 0301 	add.w	r3, r9, #1
 8007470:	7013      	strb	r3, [r2, #0]
 8007472:	e73d      	b.n	80072f0 <_dtoa_r+0x960>
 8007474:	9b04      	ldr	r3, [sp, #16]
 8007476:	9a08      	ldr	r2, [sp, #32]
 8007478:	f803 9c01 	strb.w	r9, [r3, #-1]
 800747c:	4293      	cmp	r3, r2
 800747e:	d043      	beq.n	8007508 <_dtoa_r+0xb78>
 8007480:	4651      	mov	r1, sl
 8007482:	2300      	movs	r3, #0
 8007484:	220a      	movs	r2, #10
 8007486:	4620      	mov	r0, r4
 8007488:	f000 fb28 	bl	8007adc <__multadd>
 800748c:	45b8      	cmp	r8, r7
 800748e:	4682      	mov	sl, r0
 8007490:	f04f 0300 	mov.w	r3, #0
 8007494:	f04f 020a 	mov.w	r2, #10
 8007498:	4641      	mov	r1, r8
 800749a:	4620      	mov	r0, r4
 800749c:	d107      	bne.n	80074ae <_dtoa_r+0xb1e>
 800749e:	f000 fb1d 	bl	8007adc <__multadd>
 80074a2:	4680      	mov	r8, r0
 80074a4:	4607      	mov	r7, r0
 80074a6:	9b04      	ldr	r3, [sp, #16]
 80074a8:	3301      	adds	r3, #1
 80074aa:	9304      	str	r3, [sp, #16]
 80074ac:	e775      	b.n	800739a <_dtoa_r+0xa0a>
 80074ae:	f000 fb15 	bl	8007adc <__multadd>
 80074b2:	4639      	mov	r1, r7
 80074b4:	4680      	mov	r8, r0
 80074b6:	2300      	movs	r3, #0
 80074b8:	220a      	movs	r2, #10
 80074ba:	4620      	mov	r0, r4
 80074bc:	f000 fb0e 	bl	8007adc <__multadd>
 80074c0:	4607      	mov	r7, r0
 80074c2:	e7f0      	b.n	80074a6 <_dtoa_r+0xb16>
 80074c4:	9b04      	ldr	r3, [sp, #16]
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	9d00      	ldr	r5, [sp, #0]
 80074ca:	4631      	mov	r1, r6
 80074cc:	4650      	mov	r0, sl
 80074ce:	f7ff f9d5 	bl	800687c <quorem>
 80074d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80074d6:	9b00      	ldr	r3, [sp, #0]
 80074d8:	f805 9b01 	strb.w	r9, [r5], #1
 80074dc:	1aea      	subs	r2, r5, r3
 80074de:	9b01      	ldr	r3, [sp, #4]
 80074e0:	4293      	cmp	r3, r2
 80074e2:	dd07      	ble.n	80074f4 <_dtoa_r+0xb64>
 80074e4:	4651      	mov	r1, sl
 80074e6:	2300      	movs	r3, #0
 80074e8:	220a      	movs	r2, #10
 80074ea:	4620      	mov	r0, r4
 80074ec:	f000 faf6 	bl	8007adc <__multadd>
 80074f0:	4682      	mov	sl, r0
 80074f2:	e7ea      	b.n	80074ca <_dtoa_r+0xb3a>
 80074f4:	9b01      	ldr	r3, [sp, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bfc8      	it	gt
 80074fa:	461d      	movgt	r5, r3
 80074fc:	9b00      	ldr	r3, [sp, #0]
 80074fe:	bfd8      	it	le
 8007500:	2501      	movle	r5, #1
 8007502:	441d      	add	r5, r3
 8007504:	f04f 0800 	mov.w	r8, #0
 8007508:	4651      	mov	r1, sl
 800750a:	2201      	movs	r2, #1
 800750c:	4620      	mov	r0, r4
 800750e:	f000 fc93 	bl	8007e38 <__lshift>
 8007512:	4631      	mov	r1, r6
 8007514:	4682      	mov	sl, r0
 8007516:	f000 fcfb 	bl	8007f10 <__mcmp>
 800751a:	2800      	cmp	r0, #0
 800751c:	dc96      	bgt.n	800744c <_dtoa_r+0xabc>
 800751e:	d102      	bne.n	8007526 <_dtoa_r+0xb96>
 8007520:	f019 0f01 	tst.w	r9, #1
 8007524:	d192      	bne.n	800744c <_dtoa_r+0xabc>
 8007526:	462b      	mov	r3, r5
 8007528:	461d      	mov	r5, r3
 800752a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800752e:	2a30      	cmp	r2, #48	; 0x30
 8007530:	d0fa      	beq.n	8007528 <_dtoa_r+0xb98>
 8007532:	e6dd      	b.n	80072f0 <_dtoa_r+0x960>
 8007534:	9a00      	ldr	r2, [sp, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d189      	bne.n	800744e <_dtoa_r+0xabe>
 800753a:	f10b 0b01 	add.w	fp, fp, #1
 800753e:	2331      	movs	r3, #49	; 0x31
 8007540:	e796      	b.n	8007470 <_dtoa_r+0xae0>
 8007542:	4b0a      	ldr	r3, [pc, #40]	; (800756c <_dtoa_r+0xbdc>)
 8007544:	f7ff ba99 	b.w	8006a7a <_dtoa_r+0xea>
 8007548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800754a:	2b00      	cmp	r3, #0
 800754c:	f47f aa6d 	bne.w	8006a2a <_dtoa_r+0x9a>
 8007550:	4b07      	ldr	r3, [pc, #28]	; (8007570 <_dtoa_r+0xbe0>)
 8007552:	f7ff ba92 	b.w	8006a7a <_dtoa_r+0xea>
 8007556:	9b01      	ldr	r3, [sp, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	dcb5      	bgt.n	80074c8 <_dtoa_r+0xb38>
 800755c:	9b07      	ldr	r3, [sp, #28]
 800755e:	2b02      	cmp	r3, #2
 8007560:	f73f aeb1 	bgt.w	80072c6 <_dtoa_r+0x936>
 8007564:	e7b0      	b.n	80074c8 <_dtoa_r+0xb38>
 8007566:	bf00      	nop
 8007568:	08008e28 	.word	0x08008e28
 800756c:	08008d88 	.word	0x08008d88
 8007570:	08008dac 	.word	0x08008dac

08007574 <_free_r>:
 8007574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007576:	2900      	cmp	r1, #0
 8007578:	d044      	beq.n	8007604 <_free_r+0x90>
 800757a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800757e:	9001      	str	r0, [sp, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	f1a1 0404 	sub.w	r4, r1, #4
 8007586:	bfb8      	it	lt
 8007588:	18e4      	addlt	r4, r4, r3
 800758a:	f7ff f853 	bl	8006634 <__malloc_lock>
 800758e:	4a1e      	ldr	r2, [pc, #120]	; (8007608 <_free_r+0x94>)
 8007590:	9801      	ldr	r0, [sp, #4]
 8007592:	6813      	ldr	r3, [r2, #0]
 8007594:	b933      	cbnz	r3, 80075a4 <_free_r+0x30>
 8007596:	6063      	str	r3, [r4, #4]
 8007598:	6014      	str	r4, [r2, #0]
 800759a:	b003      	add	sp, #12
 800759c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075a0:	f7ff b84e 	b.w	8006640 <__malloc_unlock>
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	d908      	bls.n	80075ba <_free_r+0x46>
 80075a8:	6825      	ldr	r5, [r4, #0]
 80075aa:	1961      	adds	r1, r4, r5
 80075ac:	428b      	cmp	r3, r1
 80075ae:	bf01      	itttt	eq
 80075b0:	6819      	ldreq	r1, [r3, #0]
 80075b2:	685b      	ldreq	r3, [r3, #4]
 80075b4:	1949      	addeq	r1, r1, r5
 80075b6:	6021      	streq	r1, [r4, #0]
 80075b8:	e7ed      	b.n	8007596 <_free_r+0x22>
 80075ba:	461a      	mov	r2, r3
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	b10b      	cbz	r3, 80075c4 <_free_r+0x50>
 80075c0:	42a3      	cmp	r3, r4
 80075c2:	d9fa      	bls.n	80075ba <_free_r+0x46>
 80075c4:	6811      	ldr	r1, [r2, #0]
 80075c6:	1855      	adds	r5, r2, r1
 80075c8:	42a5      	cmp	r5, r4
 80075ca:	d10b      	bne.n	80075e4 <_free_r+0x70>
 80075cc:	6824      	ldr	r4, [r4, #0]
 80075ce:	4421      	add	r1, r4
 80075d0:	1854      	adds	r4, r2, r1
 80075d2:	42a3      	cmp	r3, r4
 80075d4:	6011      	str	r1, [r2, #0]
 80075d6:	d1e0      	bne.n	800759a <_free_r+0x26>
 80075d8:	681c      	ldr	r4, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	6053      	str	r3, [r2, #4]
 80075de:	440c      	add	r4, r1
 80075e0:	6014      	str	r4, [r2, #0]
 80075e2:	e7da      	b.n	800759a <_free_r+0x26>
 80075e4:	d902      	bls.n	80075ec <_free_r+0x78>
 80075e6:	230c      	movs	r3, #12
 80075e8:	6003      	str	r3, [r0, #0]
 80075ea:	e7d6      	b.n	800759a <_free_r+0x26>
 80075ec:	6825      	ldr	r5, [r4, #0]
 80075ee:	1961      	adds	r1, r4, r5
 80075f0:	428b      	cmp	r3, r1
 80075f2:	bf04      	itt	eq
 80075f4:	6819      	ldreq	r1, [r3, #0]
 80075f6:	685b      	ldreq	r3, [r3, #4]
 80075f8:	6063      	str	r3, [r4, #4]
 80075fa:	bf04      	itt	eq
 80075fc:	1949      	addeq	r1, r1, r5
 80075fe:	6021      	streq	r1, [r4, #0]
 8007600:	6054      	str	r4, [r2, #4]
 8007602:	e7ca      	b.n	800759a <_free_r+0x26>
 8007604:	b003      	add	sp, #12
 8007606:	bd30      	pop	{r4, r5, pc}
 8007608:	200004c0 	.word	0x200004c0

0800760c <__ssputs_r>:
 800760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	688e      	ldr	r6, [r1, #8]
 8007612:	461f      	mov	r7, r3
 8007614:	42be      	cmp	r6, r7
 8007616:	680b      	ldr	r3, [r1, #0]
 8007618:	4682      	mov	sl, r0
 800761a:	460c      	mov	r4, r1
 800761c:	4690      	mov	r8, r2
 800761e:	d82c      	bhi.n	800767a <__ssputs_r+0x6e>
 8007620:	898a      	ldrh	r2, [r1, #12]
 8007622:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007626:	d026      	beq.n	8007676 <__ssputs_r+0x6a>
 8007628:	6965      	ldr	r5, [r4, #20]
 800762a:	6909      	ldr	r1, [r1, #16]
 800762c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007630:	eba3 0901 	sub.w	r9, r3, r1
 8007634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007638:	1c7b      	adds	r3, r7, #1
 800763a:	444b      	add	r3, r9
 800763c:	106d      	asrs	r5, r5, #1
 800763e:	429d      	cmp	r5, r3
 8007640:	bf38      	it	cc
 8007642:	461d      	movcc	r5, r3
 8007644:	0553      	lsls	r3, r2, #21
 8007646:	d527      	bpl.n	8007698 <__ssputs_r+0x8c>
 8007648:	4629      	mov	r1, r5
 800764a:	f7fe fde3 	bl	8006214 <_malloc_r>
 800764e:	4606      	mov	r6, r0
 8007650:	b360      	cbz	r0, 80076ac <__ssputs_r+0xa0>
 8007652:	6921      	ldr	r1, [r4, #16]
 8007654:	464a      	mov	r2, r9
 8007656:	f000 fe2d 	bl	80082b4 <memcpy>
 800765a:	89a3      	ldrh	r3, [r4, #12]
 800765c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007664:	81a3      	strh	r3, [r4, #12]
 8007666:	6126      	str	r6, [r4, #16]
 8007668:	6165      	str	r5, [r4, #20]
 800766a:	444e      	add	r6, r9
 800766c:	eba5 0509 	sub.w	r5, r5, r9
 8007670:	6026      	str	r6, [r4, #0]
 8007672:	60a5      	str	r5, [r4, #8]
 8007674:	463e      	mov	r6, r7
 8007676:	42be      	cmp	r6, r7
 8007678:	d900      	bls.n	800767c <__ssputs_r+0x70>
 800767a:	463e      	mov	r6, r7
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	4632      	mov	r2, r6
 8007680:	4641      	mov	r1, r8
 8007682:	f000 fdb7 	bl	80081f4 <memmove>
 8007686:	68a3      	ldr	r3, [r4, #8]
 8007688:	1b9b      	subs	r3, r3, r6
 800768a:	60a3      	str	r3, [r4, #8]
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	4433      	add	r3, r6
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	2000      	movs	r0, #0
 8007694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007698:	462a      	mov	r2, r5
 800769a:	f000 fd7c 	bl	8008196 <_realloc_r>
 800769e:	4606      	mov	r6, r0
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d1e0      	bne.n	8007666 <__ssputs_r+0x5a>
 80076a4:	6921      	ldr	r1, [r4, #16]
 80076a6:	4650      	mov	r0, sl
 80076a8:	f7ff ff64 	bl	8007574 <_free_r>
 80076ac:	230c      	movs	r3, #12
 80076ae:	f8ca 3000 	str.w	r3, [sl]
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b8:	81a3      	strh	r3, [r4, #12]
 80076ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076be:	e7e9      	b.n	8007694 <__ssputs_r+0x88>

080076c0 <_svfiprintf_r>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	4698      	mov	r8, r3
 80076c6:	898b      	ldrh	r3, [r1, #12]
 80076c8:	061b      	lsls	r3, r3, #24
 80076ca:	b09d      	sub	sp, #116	; 0x74
 80076cc:	4607      	mov	r7, r0
 80076ce:	460d      	mov	r5, r1
 80076d0:	4614      	mov	r4, r2
 80076d2:	d50e      	bpl.n	80076f2 <_svfiprintf_r+0x32>
 80076d4:	690b      	ldr	r3, [r1, #16]
 80076d6:	b963      	cbnz	r3, 80076f2 <_svfiprintf_r+0x32>
 80076d8:	2140      	movs	r1, #64	; 0x40
 80076da:	f7fe fd9b 	bl	8006214 <_malloc_r>
 80076de:	6028      	str	r0, [r5, #0]
 80076e0:	6128      	str	r0, [r5, #16]
 80076e2:	b920      	cbnz	r0, 80076ee <_svfiprintf_r+0x2e>
 80076e4:	230c      	movs	r3, #12
 80076e6:	603b      	str	r3, [r7, #0]
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076ec:	e0d0      	b.n	8007890 <_svfiprintf_r+0x1d0>
 80076ee:	2340      	movs	r3, #64	; 0x40
 80076f0:	616b      	str	r3, [r5, #20]
 80076f2:	2300      	movs	r3, #0
 80076f4:	9309      	str	r3, [sp, #36]	; 0x24
 80076f6:	2320      	movs	r3, #32
 80076f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007700:	2330      	movs	r3, #48	; 0x30
 8007702:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078a8 <_svfiprintf_r+0x1e8>
 8007706:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800770a:	f04f 0901 	mov.w	r9, #1
 800770e:	4623      	mov	r3, r4
 8007710:	469a      	mov	sl, r3
 8007712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007716:	b10a      	cbz	r2, 800771c <_svfiprintf_r+0x5c>
 8007718:	2a25      	cmp	r2, #37	; 0x25
 800771a:	d1f9      	bne.n	8007710 <_svfiprintf_r+0x50>
 800771c:	ebba 0b04 	subs.w	fp, sl, r4
 8007720:	d00b      	beq.n	800773a <_svfiprintf_r+0x7a>
 8007722:	465b      	mov	r3, fp
 8007724:	4622      	mov	r2, r4
 8007726:	4629      	mov	r1, r5
 8007728:	4638      	mov	r0, r7
 800772a:	f7ff ff6f 	bl	800760c <__ssputs_r>
 800772e:	3001      	adds	r0, #1
 8007730:	f000 80a9 	beq.w	8007886 <_svfiprintf_r+0x1c6>
 8007734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007736:	445a      	add	r2, fp
 8007738:	9209      	str	r2, [sp, #36]	; 0x24
 800773a:	f89a 3000 	ldrb.w	r3, [sl]
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 80a1 	beq.w	8007886 <_svfiprintf_r+0x1c6>
 8007744:	2300      	movs	r3, #0
 8007746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800774a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800774e:	f10a 0a01 	add.w	sl, sl, #1
 8007752:	9304      	str	r3, [sp, #16]
 8007754:	9307      	str	r3, [sp, #28]
 8007756:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800775a:	931a      	str	r3, [sp, #104]	; 0x68
 800775c:	4654      	mov	r4, sl
 800775e:	2205      	movs	r2, #5
 8007760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007764:	4850      	ldr	r0, [pc, #320]	; (80078a8 <_svfiprintf_r+0x1e8>)
 8007766:	f7f8 fd53 	bl	8000210 <memchr>
 800776a:	9a04      	ldr	r2, [sp, #16]
 800776c:	b9d8      	cbnz	r0, 80077a6 <_svfiprintf_r+0xe6>
 800776e:	06d0      	lsls	r0, r2, #27
 8007770:	bf44      	itt	mi
 8007772:	2320      	movmi	r3, #32
 8007774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007778:	0711      	lsls	r1, r2, #28
 800777a:	bf44      	itt	mi
 800777c:	232b      	movmi	r3, #43	; 0x2b
 800777e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007782:	f89a 3000 	ldrb.w	r3, [sl]
 8007786:	2b2a      	cmp	r3, #42	; 0x2a
 8007788:	d015      	beq.n	80077b6 <_svfiprintf_r+0xf6>
 800778a:	9a07      	ldr	r2, [sp, #28]
 800778c:	4654      	mov	r4, sl
 800778e:	2000      	movs	r0, #0
 8007790:	f04f 0c0a 	mov.w	ip, #10
 8007794:	4621      	mov	r1, r4
 8007796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800779a:	3b30      	subs	r3, #48	; 0x30
 800779c:	2b09      	cmp	r3, #9
 800779e:	d94d      	bls.n	800783c <_svfiprintf_r+0x17c>
 80077a0:	b1b0      	cbz	r0, 80077d0 <_svfiprintf_r+0x110>
 80077a2:	9207      	str	r2, [sp, #28]
 80077a4:	e014      	b.n	80077d0 <_svfiprintf_r+0x110>
 80077a6:	eba0 0308 	sub.w	r3, r0, r8
 80077aa:	fa09 f303 	lsl.w	r3, r9, r3
 80077ae:	4313      	orrs	r3, r2
 80077b0:	9304      	str	r3, [sp, #16]
 80077b2:	46a2      	mov	sl, r4
 80077b4:	e7d2      	b.n	800775c <_svfiprintf_r+0x9c>
 80077b6:	9b03      	ldr	r3, [sp, #12]
 80077b8:	1d19      	adds	r1, r3, #4
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	9103      	str	r1, [sp, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bfbb      	ittet	lt
 80077c2:	425b      	neglt	r3, r3
 80077c4:	f042 0202 	orrlt.w	r2, r2, #2
 80077c8:	9307      	strge	r3, [sp, #28]
 80077ca:	9307      	strlt	r3, [sp, #28]
 80077cc:	bfb8      	it	lt
 80077ce:	9204      	strlt	r2, [sp, #16]
 80077d0:	7823      	ldrb	r3, [r4, #0]
 80077d2:	2b2e      	cmp	r3, #46	; 0x2e
 80077d4:	d10c      	bne.n	80077f0 <_svfiprintf_r+0x130>
 80077d6:	7863      	ldrb	r3, [r4, #1]
 80077d8:	2b2a      	cmp	r3, #42	; 0x2a
 80077da:	d134      	bne.n	8007846 <_svfiprintf_r+0x186>
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	1d1a      	adds	r2, r3, #4
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	9203      	str	r2, [sp, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bfb8      	it	lt
 80077e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80077ec:	3402      	adds	r4, #2
 80077ee:	9305      	str	r3, [sp, #20]
 80077f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80078b8 <_svfiprintf_r+0x1f8>
 80077f4:	7821      	ldrb	r1, [r4, #0]
 80077f6:	2203      	movs	r2, #3
 80077f8:	4650      	mov	r0, sl
 80077fa:	f7f8 fd09 	bl	8000210 <memchr>
 80077fe:	b138      	cbz	r0, 8007810 <_svfiprintf_r+0x150>
 8007800:	9b04      	ldr	r3, [sp, #16]
 8007802:	eba0 000a 	sub.w	r0, r0, sl
 8007806:	2240      	movs	r2, #64	; 0x40
 8007808:	4082      	lsls	r2, r0
 800780a:	4313      	orrs	r3, r2
 800780c:	3401      	adds	r4, #1
 800780e:	9304      	str	r3, [sp, #16]
 8007810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007814:	4825      	ldr	r0, [pc, #148]	; (80078ac <_svfiprintf_r+0x1ec>)
 8007816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800781a:	2206      	movs	r2, #6
 800781c:	f7f8 fcf8 	bl	8000210 <memchr>
 8007820:	2800      	cmp	r0, #0
 8007822:	d038      	beq.n	8007896 <_svfiprintf_r+0x1d6>
 8007824:	4b22      	ldr	r3, [pc, #136]	; (80078b0 <_svfiprintf_r+0x1f0>)
 8007826:	bb1b      	cbnz	r3, 8007870 <_svfiprintf_r+0x1b0>
 8007828:	9b03      	ldr	r3, [sp, #12]
 800782a:	3307      	adds	r3, #7
 800782c:	f023 0307 	bic.w	r3, r3, #7
 8007830:	3308      	adds	r3, #8
 8007832:	9303      	str	r3, [sp, #12]
 8007834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007836:	4433      	add	r3, r6
 8007838:	9309      	str	r3, [sp, #36]	; 0x24
 800783a:	e768      	b.n	800770e <_svfiprintf_r+0x4e>
 800783c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007840:	460c      	mov	r4, r1
 8007842:	2001      	movs	r0, #1
 8007844:	e7a6      	b.n	8007794 <_svfiprintf_r+0xd4>
 8007846:	2300      	movs	r3, #0
 8007848:	3401      	adds	r4, #1
 800784a:	9305      	str	r3, [sp, #20]
 800784c:	4619      	mov	r1, r3
 800784e:	f04f 0c0a 	mov.w	ip, #10
 8007852:	4620      	mov	r0, r4
 8007854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007858:	3a30      	subs	r2, #48	; 0x30
 800785a:	2a09      	cmp	r2, #9
 800785c:	d903      	bls.n	8007866 <_svfiprintf_r+0x1a6>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0c6      	beq.n	80077f0 <_svfiprintf_r+0x130>
 8007862:	9105      	str	r1, [sp, #20]
 8007864:	e7c4      	b.n	80077f0 <_svfiprintf_r+0x130>
 8007866:	fb0c 2101 	mla	r1, ip, r1, r2
 800786a:	4604      	mov	r4, r0
 800786c:	2301      	movs	r3, #1
 800786e:	e7f0      	b.n	8007852 <_svfiprintf_r+0x192>
 8007870:	ab03      	add	r3, sp, #12
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	462a      	mov	r2, r5
 8007876:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <_svfiprintf_r+0x1f4>)
 8007878:	a904      	add	r1, sp, #16
 800787a:	4638      	mov	r0, r7
 800787c:	f7fe fa64 	bl	8005d48 <_printf_float>
 8007880:	1c42      	adds	r2, r0, #1
 8007882:	4606      	mov	r6, r0
 8007884:	d1d6      	bne.n	8007834 <_svfiprintf_r+0x174>
 8007886:	89ab      	ldrh	r3, [r5, #12]
 8007888:	065b      	lsls	r3, r3, #25
 800788a:	f53f af2d 	bmi.w	80076e8 <_svfiprintf_r+0x28>
 800788e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007890:	b01d      	add	sp, #116	; 0x74
 8007892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007896:	ab03      	add	r3, sp, #12
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	462a      	mov	r2, r5
 800789c:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <_svfiprintf_r+0x1f4>)
 800789e:	a904      	add	r1, sp, #16
 80078a0:	4638      	mov	r0, r7
 80078a2:	f7fe fda5 	bl	80063f0 <_printf_i>
 80078a6:	e7eb      	b.n	8007880 <_svfiprintf_r+0x1c0>
 80078a8:	08008e39 	.word	0x08008e39
 80078ac:	08008e43 	.word	0x08008e43
 80078b0:	08005d49 	.word	0x08005d49
 80078b4:	0800760d 	.word	0x0800760d
 80078b8:	08008e3f 	.word	0x08008e3f

080078bc <__sflush_r>:
 80078bc:	898a      	ldrh	r2, [r1, #12]
 80078be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c2:	4605      	mov	r5, r0
 80078c4:	0710      	lsls	r0, r2, #28
 80078c6:	460c      	mov	r4, r1
 80078c8:	d458      	bmi.n	800797c <__sflush_r+0xc0>
 80078ca:	684b      	ldr	r3, [r1, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	dc05      	bgt.n	80078dc <__sflush_r+0x20>
 80078d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	dc02      	bgt.n	80078dc <__sflush_r+0x20>
 80078d6:	2000      	movs	r0, #0
 80078d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078de:	2e00      	cmp	r6, #0
 80078e0:	d0f9      	beq.n	80078d6 <__sflush_r+0x1a>
 80078e2:	2300      	movs	r3, #0
 80078e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078e8:	682f      	ldr	r7, [r5, #0]
 80078ea:	6a21      	ldr	r1, [r4, #32]
 80078ec:	602b      	str	r3, [r5, #0]
 80078ee:	d032      	beq.n	8007956 <__sflush_r+0x9a>
 80078f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	075a      	lsls	r2, r3, #29
 80078f6:	d505      	bpl.n	8007904 <__sflush_r+0x48>
 80078f8:	6863      	ldr	r3, [r4, #4]
 80078fa:	1ac0      	subs	r0, r0, r3
 80078fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078fe:	b10b      	cbz	r3, 8007904 <__sflush_r+0x48>
 8007900:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007902:	1ac0      	subs	r0, r0, r3
 8007904:	2300      	movs	r3, #0
 8007906:	4602      	mov	r2, r0
 8007908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800790a:	6a21      	ldr	r1, [r4, #32]
 800790c:	4628      	mov	r0, r5
 800790e:	47b0      	blx	r6
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	d106      	bne.n	8007924 <__sflush_r+0x68>
 8007916:	6829      	ldr	r1, [r5, #0]
 8007918:	291d      	cmp	r1, #29
 800791a:	d82b      	bhi.n	8007974 <__sflush_r+0xb8>
 800791c:	4a29      	ldr	r2, [pc, #164]	; (80079c4 <__sflush_r+0x108>)
 800791e:	410a      	asrs	r2, r1
 8007920:	07d6      	lsls	r6, r2, #31
 8007922:	d427      	bmi.n	8007974 <__sflush_r+0xb8>
 8007924:	2200      	movs	r2, #0
 8007926:	6062      	str	r2, [r4, #4]
 8007928:	04d9      	lsls	r1, r3, #19
 800792a:	6922      	ldr	r2, [r4, #16]
 800792c:	6022      	str	r2, [r4, #0]
 800792e:	d504      	bpl.n	800793a <__sflush_r+0x7e>
 8007930:	1c42      	adds	r2, r0, #1
 8007932:	d101      	bne.n	8007938 <__sflush_r+0x7c>
 8007934:	682b      	ldr	r3, [r5, #0]
 8007936:	b903      	cbnz	r3, 800793a <__sflush_r+0x7e>
 8007938:	6560      	str	r0, [r4, #84]	; 0x54
 800793a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800793c:	602f      	str	r7, [r5, #0]
 800793e:	2900      	cmp	r1, #0
 8007940:	d0c9      	beq.n	80078d6 <__sflush_r+0x1a>
 8007942:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007946:	4299      	cmp	r1, r3
 8007948:	d002      	beq.n	8007950 <__sflush_r+0x94>
 800794a:	4628      	mov	r0, r5
 800794c:	f7ff fe12 	bl	8007574 <_free_r>
 8007950:	2000      	movs	r0, #0
 8007952:	6360      	str	r0, [r4, #52]	; 0x34
 8007954:	e7c0      	b.n	80078d8 <__sflush_r+0x1c>
 8007956:	2301      	movs	r3, #1
 8007958:	4628      	mov	r0, r5
 800795a:	47b0      	blx	r6
 800795c:	1c41      	adds	r1, r0, #1
 800795e:	d1c8      	bne.n	80078f2 <__sflush_r+0x36>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0c5      	beq.n	80078f2 <__sflush_r+0x36>
 8007966:	2b1d      	cmp	r3, #29
 8007968:	d001      	beq.n	800796e <__sflush_r+0xb2>
 800796a:	2b16      	cmp	r3, #22
 800796c:	d101      	bne.n	8007972 <__sflush_r+0xb6>
 800796e:	602f      	str	r7, [r5, #0]
 8007970:	e7b1      	b.n	80078d6 <__sflush_r+0x1a>
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007978:	81a3      	strh	r3, [r4, #12]
 800797a:	e7ad      	b.n	80078d8 <__sflush_r+0x1c>
 800797c:	690f      	ldr	r7, [r1, #16]
 800797e:	2f00      	cmp	r7, #0
 8007980:	d0a9      	beq.n	80078d6 <__sflush_r+0x1a>
 8007982:	0793      	lsls	r3, r2, #30
 8007984:	680e      	ldr	r6, [r1, #0]
 8007986:	bf08      	it	eq
 8007988:	694b      	ldreq	r3, [r1, #20]
 800798a:	600f      	str	r7, [r1, #0]
 800798c:	bf18      	it	ne
 800798e:	2300      	movne	r3, #0
 8007990:	eba6 0807 	sub.w	r8, r6, r7
 8007994:	608b      	str	r3, [r1, #8]
 8007996:	f1b8 0f00 	cmp.w	r8, #0
 800799a:	dd9c      	ble.n	80078d6 <__sflush_r+0x1a>
 800799c:	6a21      	ldr	r1, [r4, #32]
 800799e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079a0:	4643      	mov	r3, r8
 80079a2:	463a      	mov	r2, r7
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b0      	blx	r6
 80079a8:	2800      	cmp	r0, #0
 80079aa:	dc06      	bgt.n	80079ba <__sflush_r+0xfe>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079b2:	81a3      	strh	r3, [r4, #12]
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079b8:	e78e      	b.n	80078d8 <__sflush_r+0x1c>
 80079ba:	4407      	add	r7, r0
 80079bc:	eba8 0800 	sub.w	r8, r8, r0
 80079c0:	e7e9      	b.n	8007996 <__sflush_r+0xda>
 80079c2:	bf00      	nop
 80079c4:	dfbffffe 	.word	0xdfbffffe

080079c8 <_fflush_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	690b      	ldr	r3, [r1, #16]
 80079cc:	4605      	mov	r5, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	b913      	cbnz	r3, 80079d8 <_fflush_r+0x10>
 80079d2:	2500      	movs	r5, #0
 80079d4:	4628      	mov	r0, r5
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	b118      	cbz	r0, 80079e2 <_fflush_r+0x1a>
 80079da:	6a03      	ldr	r3, [r0, #32]
 80079dc:	b90b      	cbnz	r3, 80079e2 <_fflush_r+0x1a>
 80079de:	f7fe fecf 	bl	8006780 <__sinit>
 80079e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f3      	beq.n	80079d2 <_fflush_r+0xa>
 80079ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079ec:	07d0      	lsls	r0, r2, #31
 80079ee:	d404      	bmi.n	80079fa <_fflush_r+0x32>
 80079f0:	0599      	lsls	r1, r3, #22
 80079f2:	d402      	bmi.n	80079fa <_fflush_r+0x32>
 80079f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079f6:	f7fe ff3f 	bl	8006878 <__retarget_lock_acquire_recursive>
 80079fa:	4628      	mov	r0, r5
 80079fc:	4621      	mov	r1, r4
 80079fe:	f7ff ff5d 	bl	80078bc <__sflush_r>
 8007a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a04:	07da      	lsls	r2, r3, #31
 8007a06:	4605      	mov	r5, r0
 8007a08:	d4e4      	bmi.n	80079d4 <_fflush_r+0xc>
 8007a0a:	89a3      	ldrh	r3, [r4, #12]
 8007a0c:	059b      	lsls	r3, r3, #22
 8007a0e:	d4e1      	bmi.n	80079d4 <_fflush_r+0xc>
 8007a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a12:	f7fe ff32 	bl	800687a <__retarget_lock_release_recursive>
 8007a16:	e7dd      	b.n	80079d4 <_fflush_r+0xc>

08007a18 <_Balloc>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	69c6      	ldr	r6, [r0, #28]
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	460d      	mov	r5, r1
 8007a20:	b976      	cbnz	r6, 8007a40 <_Balloc+0x28>
 8007a22:	2010      	movs	r0, #16
 8007a24:	f7fe fbc6 	bl	80061b4 <malloc>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	61e0      	str	r0, [r4, #28]
 8007a2c:	b920      	cbnz	r0, 8007a38 <_Balloc+0x20>
 8007a2e:	4b18      	ldr	r3, [pc, #96]	; (8007a90 <_Balloc+0x78>)
 8007a30:	4818      	ldr	r0, [pc, #96]	; (8007a94 <_Balloc+0x7c>)
 8007a32:	216b      	movs	r1, #107	; 0x6b
 8007a34:	f000 fc4c 	bl	80082d0 <__assert_func>
 8007a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a3c:	6006      	str	r6, [r0, #0]
 8007a3e:	60c6      	str	r6, [r0, #12]
 8007a40:	69e6      	ldr	r6, [r4, #28]
 8007a42:	68f3      	ldr	r3, [r6, #12]
 8007a44:	b183      	cbz	r3, 8007a68 <_Balloc+0x50>
 8007a46:	69e3      	ldr	r3, [r4, #28]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a4e:	b9b8      	cbnz	r0, 8007a80 <_Balloc+0x68>
 8007a50:	2101      	movs	r1, #1
 8007a52:	fa01 f605 	lsl.w	r6, r1, r5
 8007a56:	1d72      	adds	r2, r6, #5
 8007a58:	0092      	lsls	r2, r2, #2
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fc56 	bl	800830c <_calloc_r>
 8007a60:	b160      	cbz	r0, 8007a7c <_Balloc+0x64>
 8007a62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a66:	e00e      	b.n	8007a86 <_Balloc+0x6e>
 8007a68:	2221      	movs	r2, #33	; 0x21
 8007a6a:	2104      	movs	r1, #4
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 fc4d 	bl	800830c <_calloc_r>
 8007a72:	69e3      	ldr	r3, [r4, #28]
 8007a74:	60f0      	str	r0, [r6, #12]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e4      	bne.n	8007a46 <_Balloc+0x2e>
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	6802      	ldr	r2, [r0, #0]
 8007a82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a86:	2300      	movs	r3, #0
 8007a88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a8c:	e7f7      	b.n	8007a7e <_Balloc+0x66>
 8007a8e:	bf00      	nop
 8007a90:	08008db9 	.word	0x08008db9
 8007a94:	08008e4a 	.word	0x08008e4a

08007a98 <_Bfree>:
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	69c6      	ldr	r6, [r0, #28]
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	b976      	cbnz	r6, 8007ac0 <_Bfree+0x28>
 8007aa2:	2010      	movs	r0, #16
 8007aa4:	f7fe fb86 	bl	80061b4 <malloc>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	61e8      	str	r0, [r5, #28]
 8007aac:	b920      	cbnz	r0, 8007ab8 <_Bfree+0x20>
 8007aae:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <_Bfree+0x3c>)
 8007ab0:	4809      	ldr	r0, [pc, #36]	; (8007ad8 <_Bfree+0x40>)
 8007ab2:	218f      	movs	r1, #143	; 0x8f
 8007ab4:	f000 fc0c 	bl	80082d0 <__assert_func>
 8007ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007abc:	6006      	str	r6, [r0, #0]
 8007abe:	60c6      	str	r6, [r0, #12]
 8007ac0:	b13c      	cbz	r4, 8007ad2 <_Bfree+0x3a>
 8007ac2:	69eb      	ldr	r3, [r5, #28]
 8007ac4:	6862      	ldr	r2, [r4, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007acc:	6021      	str	r1, [r4, #0]
 8007ace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
 8007ad4:	08008db9 	.word	0x08008db9
 8007ad8:	08008e4a 	.word	0x08008e4a

08007adc <__multadd>:
 8007adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae0:	690d      	ldr	r5, [r1, #16]
 8007ae2:	4607      	mov	r7, r0
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	461e      	mov	r6, r3
 8007ae8:	f101 0c14 	add.w	ip, r1, #20
 8007aec:	2000      	movs	r0, #0
 8007aee:	f8dc 3000 	ldr.w	r3, [ip]
 8007af2:	b299      	uxth	r1, r3
 8007af4:	fb02 6101 	mla	r1, r2, r1, r6
 8007af8:	0c1e      	lsrs	r6, r3, #16
 8007afa:	0c0b      	lsrs	r3, r1, #16
 8007afc:	fb02 3306 	mla	r3, r2, r6, r3
 8007b00:	b289      	uxth	r1, r1
 8007b02:	3001      	adds	r0, #1
 8007b04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b08:	4285      	cmp	r5, r0
 8007b0a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b12:	dcec      	bgt.n	8007aee <__multadd+0x12>
 8007b14:	b30e      	cbz	r6, 8007b5a <__multadd+0x7e>
 8007b16:	68a3      	ldr	r3, [r4, #8]
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	dc19      	bgt.n	8007b50 <__multadd+0x74>
 8007b1c:	6861      	ldr	r1, [r4, #4]
 8007b1e:	4638      	mov	r0, r7
 8007b20:	3101      	adds	r1, #1
 8007b22:	f7ff ff79 	bl	8007a18 <_Balloc>
 8007b26:	4680      	mov	r8, r0
 8007b28:	b928      	cbnz	r0, 8007b36 <__multadd+0x5a>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <__multadd+0x84>)
 8007b2e:	480d      	ldr	r0, [pc, #52]	; (8007b64 <__multadd+0x88>)
 8007b30:	21ba      	movs	r1, #186	; 0xba
 8007b32:	f000 fbcd 	bl	80082d0 <__assert_func>
 8007b36:	6922      	ldr	r2, [r4, #16]
 8007b38:	3202      	adds	r2, #2
 8007b3a:	f104 010c 	add.w	r1, r4, #12
 8007b3e:	0092      	lsls	r2, r2, #2
 8007b40:	300c      	adds	r0, #12
 8007b42:	f000 fbb7 	bl	80082b4 <memcpy>
 8007b46:	4621      	mov	r1, r4
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f7ff ffa5 	bl	8007a98 <_Bfree>
 8007b4e:	4644      	mov	r4, r8
 8007b50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b54:	3501      	adds	r5, #1
 8007b56:	615e      	str	r6, [r3, #20]
 8007b58:	6125      	str	r5, [r4, #16]
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b60:	08008e28 	.word	0x08008e28
 8007b64:	08008e4a 	.word	0x08008e4a

08007b68 <__hi0bits>:
 8007b68:	0c03      	lsrs	r3, r0, #16
 8007b6a:	041b      	lsls	r3, r3, #16
 8007b6c:	b9d3      	cbnz	r3, 8007ba4 <__hi0bits+0x3c>
 8007b6e:	0400      	lsls	r0, r0, #16
 8007b70:	2310      	movs	r3, #16
 8007b72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b76:	bf04      	itt	eq
 8007b78:	0200      	lsleq	r0, r0, #8
 8007b7a:	3308      	addeq	r3, #8
 8007b7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b80:	bf04      	itt	eq
 8007b82:	0100      	lsleq	r0, r0, #4
 8007b84:	3304      	addeq	r3, #4
 8007b86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b8a:	bf04      	itt	eq
 8007b8c:	0080      	lsleq	r0, r0, #2
 8007b8e:	3302      	addeq	r3, #2
 8007b90:	2800      	cmp	r0, #0
 8007b92:	db05      	blt.n	8007ba0 <__hi0bits+0x38>
 8007b94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b98:	f103 0301 	add.w	r3, r3, #1
 8007b9c:	bf08      	it	eq
 8007b9e:	2320      	moveq	r3, #32
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	4770      	bx	lr
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e7e4      	b.n	8007b72 <__hi0bits+0xa>

08007ba8 <__lo0bits>:
 8007ba8:	6803      	ldr	r3, [r0, #0]
 8007baa:	f013 0207 	ands.w	r2, r3, #7
 8007bae:	d00c      	beq.n	8007bca <__lo0bits+0x22>
 8007bb0:	07d9      	lsls	r1, r3, #31
 8007bb2:	d422      	bmi.n	8007bfa <__lo0bits+0x52>
 8007bb4:	079a      	lsls	r2, r3, #30
 8007bb6:	bf49      	itett	mi
 8007bb8:	085b      	lsrmi	r3, r3, #1
 8007bba:	089b      	lsrpl	r3, r3, #2
 8007bbc:	6003      	strmi	r3, [r0, #0]
 8007bbe:	2201      	movmi	r2, #1
 8007bc0:	bf5c      	itt	pl
 8007bc2:	6003      	strpl	r3, [r0, #0]
 8007bc4:	2202      	movpl	r2, #2
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	4770      	bx	lr
 8007bca:	b299      	uxth	r1, r3
 8007bcc:	b909      	cbnz	r1, 8007bd2 <__lo0bits+0x2a>
 8007bce:	0c1b      	lsrs	r3, r3, #16
 8007bd0:	2210      	movs	r2, #16
 8007bd2:	b2d9      	uxtb	r1, r3
 8007bd4:	b909      	cbnz	r1, 8007bda <__lo0bits+0x32>
 8007bd6:	3208      	adds	r2, #8
 8007bd8:	0a1b      	lsrs	r3, r3, #8
 8007bda:	0719      	lsls	r1, r3, #28
 8007bdc:	bf04      	itt	eq
 8007bde:	091b      	lsreq	r3, r3, #4
 8007be0:	3204      	addeq	r2, #4
 8007be2:	0799      	lsls	r1, r3, #30
 8007be4:	bf04      	itt	eq
 8007be6:	089b      	lsreq	r3, r3, #2
 8007be8:	3202      	addeq	r2, #2
 8007bea:	07d9      	lsls	r1, r3, #31
 8007bec:	d403      	bmi.n	8007bf6 <__lo0bits+0x4e>
 8007bee:	085b      	lsrs	r3, r3, #1
 8007bf0:	f102 0201 	add.w	r2, r2, #1
 8007bf4:	d003      	beq.n	8007bfe <__lo0bits+0x56>
 8007bf6:	6003      	str	r3, [r0, #0]
 8007bf8:	e7e5      	b.n	8007bc6 <__lo0bits+0x1e>
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	e7e3      	b.n	8007bc6 <__lo0bits+0x1e>
 8007bfe:	2220      	movs	r2, #32
 8007c00:	e7e1      	b.n	8007bc6 <__lo0bits+0x1e>
	...

08007c04 <__i2b>:
 8007c04:	b510      	push	{r4, lr}
 8007c06:	460c      	mov	r4, r1
 8007c08:	2101      	movs	r1, #1
 8007c0a:	f7ff ff05 	bl	8007a18 <_Balloc>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	b928      	cbnz	r0, 8007c1e <__i2b+0x1a>
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <__i2b+0x24>)
 8007c14:	4805      	ldr	r0, [pc, #20]	; (8007c2c <__i2b+0x28>)
 8007c16:	f240 1145 	movw	r1, #325	; 0x145
 8007c1a:	f000 fb59 	bl	80082d0 <__assert_func>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	6144      	str	r4, [r0, #20]
 8007c22:	6103      	str	r3, [r0, #16]
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	bf00      	nop
 8007c28:	08008e28 	.word	0x08008e28
 8007c2c:	08008e4a 	.word	0x08008e4a

08007c30 <__multiply>:
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	4691      	mov	r9, r2
 8007c36:	690a      	ldr	r2, [r1, #16]
 8007c38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	bfb8      	it	lt
 8007c40:	460b      	movlt	r3, r1
 8007c42:	460c      	mov	r4, r1
 8007c44:	bfbc      	itt	lt
 8007c46:	464c      	movlt	r4, r9
 8007c48:	4699      	movlt	r9, r3
 8007c4a:	6927      	ldr	r7, [r4, #16]
 8007c4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c50:	68a3      	ldr	r3, [r4, #8]
 8007c52:	6861      	ldr	r1, [r4, #4]
 8007c54:	eb07 060a 	add.w	r6, r7, sl
 8007c58:	42b3      	cmp	r3, r6
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	bfb8      	it	lt
 8007c5e:	3101      	addlt	r1, #1
 8007c60:	f7ff feda 	bl	8007a18 <_Balloc>
 8007c64:	b930      	cbnz	r0, 8007c74 <__multiply+0x44>
 8007c66:	4602      	mov	r2, r0
 8007c68:	4b44      	ldr	r3, [pc, #272]	; (8007d7c <__multiply+0x14c>)
 8007c6a:	4845      	ldr	r0, [pc, #276]	; (8007d80 <__multiply+0x150>)
 8007c6c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007c70:	f000 fb2e 	bl	80082d0 <__assert_func>
 8007c74:	f100 0514 	add.w	r5, r0, #20
 8007c78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c7c:	462b      	mov	r3, r5
 8007c7e:	2200      	movs	r2, #0
 8007c80:	4543      	cmp	r3, r8
 8007c82:	d321      	bcc.n	8007cc8 <__multiply+0x98>
 8007c84:	f104 0314 	add.w	r3, r4, #20
 8007c88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c8c:	f109 0314 	add.w	r3, r9, #20
 8007c90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c94:	9202      	str	r2, [sp, #8]
 8007c96:	1b3a      	subs	r2, r7, r4
 8007c98:	3a15      	subs	r2, #21
 8007c9a:	f022 0203 	bic.w	r2, r2, #3
 8007c9e:	3204      	adds	r2, #4
 8007ca0:	f104 0115 	add.w	r1, r4, #21
 8007ca4:	428f      	cmp	r7, r1
 8007ca6:	bf38      	it	cc
 8007ca8:	2204      	movcc	r2, #4
 8007caa:	9201      	str	r2, [sp, #4]
 8007cac:	9a02      	ldr	r2, [sp, #8]
 8007cae:	9303      	str	r3, [sp, #12]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d80c      	bhi.n	8007cce <__multiply+0x9e>
 8007cb4:	2e00      	cmp	r6, #0
 8007cb6:	dd03      	ble.n	8007cc0 <__multiply+0x90>
 8007cb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d05b      	beq.n	8007d78 <__multiply+0x148>
 8007cc0:	6106      	str	r6, [r0, #16]
 8007cc2:	b005      	add	sp, #20
 8007cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc8:	f843 2b04 	str.w	r2, [r3], #4
 8007ccc:	e7d8      	b.n	8007c80 <__multiply+0x50>
 8007cce:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cd2:	f1ba 0f00 	cmp.w	sl, #0
 8007cd6:	d024      	beq.n	8007d22 <__multiply+0xf2>
 8007cd8:	f104 0e14 	add.w	lr, r4, #20
 8007cdc:	46a9      	mov	r9, r5
 8007cde:	f04f 0c00 	mov.w	ip, #0
 8007ce2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ce6:	f8d9 1000 	ldr.w	r1, [r9]
 8007cea:	fa1f fb82 	uxth.w	fp, r2
 8007cee:	b289      	uxth	r1, r1
 8007cf0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007cf4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8007cfc:	4461      	add	r1, ip
 8007cfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d02:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d0a:	b289      	uxth	r1, r1
 8007d0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d10:	4577      	cmp	r7, lr
 8007d12:	f849 1b04 	str.w	r1, [r9], #4
 8007d16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d1a:	d8e2      	bhi.n	8007ce2 <__multiply+0xb2>
 8007d1c:	9a01      	ldr	r2, [sp, #4]
 8007d1e:	f845 c002 	str.w	ip, [r5, r2]
 8007d22:	9a03      	ldr	r2, [sp, #12]
 8007d24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	f1b9 0f00 	cmp.w	r9, #0
 8007d2e:	d021      	beq.n	8007d74 <__multiply+0x144>
 8007d30:	6829      	ldr	r1, [r5, #0]
 8007d32:	f104 0c14 	add.w	ip, r4, #20
 8007d36:	46ae      	mov	lr, r5
 8007d38:	f04f 0a00 	mov.w	sl, #0
 8007d3c:	f8bc b000 	ldrh.w	fp, [ip]
 8007d40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d44:	fb09 220b 	mla	r2, r9, fp, r2
 8007d48:	4452      	add	r2, sl
 8007d4a:	b289      	uxth	r1, r1
 8007d4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d50:	f84e 1b04 	str.w	r1, [lr], #4
 8007d54:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007d58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d5c:	f8be 1000 	ldrh.w	r1, [lr]
 8007d60:	fb09 110a 	mla	r1, r9, sl, r1
 8007d64:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007d68:	4567      	cmp	r7, ip
 8007d6a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d6e:	d8e5      	bhi.n	8007d3c <__multiply+0x10c>
 8007d70:	9a01      	ldr	r2, [sp, #4]
 8007d72:	50a9      	str	r1, [r5, r2]
 8007d74:	3504      	adds	r5, #4
 8007d76:	e799      	b.n	8007cac <__multiply+0x7c>
 8007d78:	3e01      	subs	r6, #1
 8007d7a:	e79b      	b.n	8007cb4 <__multiply+0x84>
 8007d7c:	08008e28 	.word	0x08008e28
 8007d80:	08008e4a 	.word	0x08008e4a

08007d84 <__pow5mult>:
 8007d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d88:	4615      	mov	r5, r2
 8007d8a:	f012 0203 	ands.w	r2, r2, #3
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460f      	mov	r7, r1
 8007d92:	d007      	beq.n	8007da4 <__pow5mult+0x20>
 8007d94:	4c25      	ldr	r4, [pc, #148]	; (8007e2c <__pow5mult+0xa8>)
 8007d96:	3a01      	subs	r2, #1
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d9e:	f7ff fe9d 	bl	8007adc <__multadd>
 8007da2:	4607      	mov	r7, r0
 8007da4:	10ad      	asrs	r5, r5, #2
 8007da6:	d03d      	beq.n	8007e24 <__pow5mult+0xa0>
 8007da8:	69f4      	ldr	r4, [r6, #28]
 8007daa:	b97c      	cbnz	r4, 8007dcc <__pow5mult+0x48>
 8007dac:	2010      	movs	r0, #16
 8007dae:	f7fe fa01 	bl	80061b4 <malloc>
 8007db2:	4602      	mov	r2, r0
 8007db4:	61f0      	str	r0, [r6, #28]
 8007db6:	b928      	cbnz	r0, 8007dc4 <__pow5mult+0x40>
 8007db8:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <__pow5mult+0xac>)
 8007dba:	481e      	ldr	r0, [pc, #120]	; (8007e34 <__pow5mult+0xb0>)
 8007dbc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007dc0:	f000 fa86 	bl	80082d0 <__assert_func>
 8007dc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dc8:	6004      	str	r4, [r0, #0]
 8007dca:	60c4      	str	r4, [r0, #12]
 8007dcc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dd4:	b94c      	cbnz	r4, 8007dea <__pow5mult+0x66>
 8007dd6:	f240 2171 	movw	r1, #625	; 0x271
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f7ff ff12 	bl	8007c04 <__i2b>
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007de6:	4604      	mov	r4, r0
 8007de8:	6003      	str	r3, [r0, #0]
 8007dea:	f04f 0900 	mov.w	r9, #0
 8007dee:	07eb      	lsls	r3, r5, #31
 8007df0:	d50a      	bpl.n	8007e08 <__pow5mult+0x84>
 8007df2:	4639      	mov	r1, r7
 8007df4:	4622      	mov	r2, r4
 8007df6:	4630      	mov	r0, r6
 8007df8:	f7ff ff1a 	bl	8007c30 <__multiply>
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	4680      	mov	r8, r0
 8007e00:	4630      	mov	r0, r6
 8007e02:	f7ff fe49 	bl	8007a98 <_Bfree>
 8007e06:	4647      	mov	r7, r8
 8007e08:	106d      	asrs	r5, r5, #1
 8007e0a:	d00b      	beq.n	8007e24 <__pow5mult+0xa0>
 8007e0c:	6820      	ldr	r0, [r4, #0]
 8007e0e:	b938      	cbnz	r0, 8007e20 <__pow5mult+0x9c>
 8007e10:	4622      	mov	r2, r4
 8007e12:	4621      	mov	r1, r4
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff ff0b 	bl	8007c30 <__multiply>
 8007e1a:	6020      	str	r0, [r4, #0]
 8007e1c:	f8c0 9000 	str.w	r9, [r0]
 8007e20:	4604      	mov	r4, r0
 8007e22:	e7e4      	b.n	8007dee <__pow5mult+0x6a>
 8007e24:	4638      	mov	r0, r7
 8007e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2a:	bf00      	nop
 8007e2c:	08008f98 	.word	0x08008f98
 8007e30:	08008db9 	.word	0x08008db9
 8007e34:	08008e4a 	.word	0x08008e4a

08007e38 <__lshift>:
 8007e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	6849      	ldr	r1, [r1, #4]
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e46:	68a3      	ldr	r3, [r4, #8]
 8007e48:	4607      	mov	r7, r0
 8007e4a:	4691      	mov	r9, r2
 8007e4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e50:	f108 0601 	add.w	r6, r8, #1
 8007e54:	42b3      	cmp	r3, r6
 8007e56:	db0b      	blt.n	8007e70 <__lshift+0x38>
 8007e58:	4638      	mov	r0, r7
 8007e5a:	f7ff fddd 	bl	8007a18 <_Balloc>
 8007e5e:	4605      	mov	r5, r0
 8007e60:	b948      	cbnz	r0, 8007e76 <__lshift+0x3e>
 8007e62:	4602      	mov	r2, r0
 8007e64:	4b28      	ldr	r3, [pc, #160]	; (8007f08 <__lshift+0xd0>)
 8007e66:	4829      	ldr	r0, [pc, #164]	; (8007f0c <__lshift+0xd4>)
 8007e68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007e6c:	f000 fa30 	bl	80082d0 <__assert_func>
 8007e70:	3101      	adds	r1, #1
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	e7ee      	b.n	8007e54 <__lshift+0x1c>
 8007e76:	2300      	movs	r3, #0
 8007e78:	f100 0114 	add.w	r1, r0, #20
 8007e7c:	f100 0210 	add.w	r2, r0, #16
 8007e80:	4618      	mov	r0, r3
 8007e82:	4553      	cmp	r3, sl
 8007e84:	db33      	blt.n	8007eee <__lshift+0xb6>
 8007e86:	6920      	ldr	r0, [r4, #16]
 8007e88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e8c:	f104 0314 	add.w	r3, r4, #20
 8007e90:	f019 091f 	ands.w	r9, r9, #31
 8007e94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e9c:	d02b      	beq.n	8007ef6 <__lshift+0xbe>
 8007e9e:	f1c9 0e20 	rsb	lr, r9, #32
 8007ea2:	468a      	mov	sl, r1
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	fa00 f009 	lsl.w	r0, r0, r9
 8007eac:	4310      	orrs	r0, r2
 8007eae:	f84a 0b04 	str.w	r0, [sl], #4
 8007eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb6:	459c      	cmp	ip, r3
 8007eb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ebc:	d8f3      	bhi.n	8007ea6 <__lshift+0x6e>
 8007ebe:	ebac 0304 	sub.w	r3, ip, r4
 8007ec2:	3b15      	subs	r3, #21
 8007ec4:	f023 0303 	bic.w	r3, r3, #3
 8007ec8:	3304      	adds	r3, #4
 8007eca:	f104 0015 	add.w	r0, r4, #21
 8007ece:	4584      	cmp	ip, r0
 8007ed0:	bf38      	it	cc
 8007ed2:	2304      	movcc	r3, #4
 8007ed4:	50ca      	str	r2, [r1, r3]
 8007ed6:	b10a      	cbz	r2, 8007edc <__lshift+0xa4>
 8007ed8:	f108 0602 	add.w	r6, r8, #2
 8007edc:	3e01      	subs	r6, #1
 8007ede:	4638      	mov	r0, r7
 8007ee0:	612e      	str	r6, [r5, #16]
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	f7ff fdd8 	bl	8007a98 <_Bfree>
 8007ee8:	4628      	mov	r0, r5
 8007eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eee:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	e7c5      	b.n	8007e82 <__lshift+0x4a>
 8007ef6:	3904      	subs	r1, #4
 8007ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007efc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f00:	459c      	cmp	ip, r3
 8007f02:	d8f9      	bhi.n	8007ef8 <__lshift+0xc0>
 8007f04:	e7ea      	b.n	8007edc <__lshift+0xa4>
 8007f06:	bf00      	nop
 8007f08:	08008e28 	.word	0x08008e28
 8007f0c:	08008e4a 	.word	0x08008e4a

08007f10 <__mcmp>:
 8007f10:	b530      	push	{r4, r5, lr}
 8007f12:	6902      	ldr	r2, [r0, #16]
 8007f14:	690c      	ldr	r4, [r1, #16]
 8007f16:	1b12      	subs	r2, r2, r4
 8007f18:	d10e      	bne.n	8007f38 <__mcmp+0x28>
 8007f1a:	f100 0314 	add.w	r3, r0, #20
 8007f1e:	3114      	adds	r1, #20
 8007f20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f30:	42a5      	cmp	r5, r4
 8007f32:	d003      	beq.n	8007f3c <__mcmp+0x2c>
 8007f34:	d305      	bcc.n	8007f42 <__mcmp+0x32>
 8007f36:	2201      	movs	r2, #1
 8007f38:	4610      	mov	r0, r2
 8007f3a:	bd30      	pop	{r4, r5, pc}
 8007f3c:	4283      	cmp	r3, r0
 8007f3e:	d3f3      	bcc.n	8007f28 <__mcmp+0x18>
 8007f40:	e7fa      	b.n	8007f38 <__mcmp+0x28>
 8007f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f46:	e7f7      	b.n	8007f38 <__mcmp+0x28>

08007f48 <__mdiff>:
 8007f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	4606      	mov	r6, r0
 8007f50:	4611      	mov	r1, r2
 8007f52:	4620      	mov	r0, r4
 8007f54:	4690      	mov	r8, r2
 8007f56:	f7ff ffdb 	bl	8007f10 <__mcmp>
 8007f5a:	1e05      	subs	r5, r0, #0
 8007f5c:	d110      	bne.n	8007f80 <__mdiff+0x38>
 8007f5e:	4629      	mov	r1, r5
 8007f60:	4630      	mov	r0, r6
 8007f62:	f7ff fd59 	bl	8007a18 <_Balloc>
 8007f66:	b930      	cbnz	r0, 8007f76 <__mdiff+0x2e>
 8007f68:	4b3a      	ldr	r3, [pc, #232]	; (8008054 <__mdiff+0x10c>)
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	f240 2137 	movw	r1, #567	; 0x237
 8007f70:	4839      	ldr	r0, [pc, #228]	; (8008058 <__mdiff+0x110>)
 8007f72:	f000 f9ad 	bl	80082d0 <__assert_func>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f80:	bfa4      	itt	ge
 8007f82:	4643      	movge	r3, r8
 8007f84:	46a0      	movge	r8, r4
 8007f86:	4630      	mov	r0, r6
 8007f88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f8c:	bfa6      	itte	ge
 8007f8e:	461c      	movge	r4, r3
 8007f90:	2500      	movge	r5, #0
 8007f92:	2501      	movlt	r5, #1
 8007f94:	f7ff fd40 	bl	8007a18 <_Balloc>
 8007f98:	b920      	cbnz	r0, 8007fa4 <__mdiff+0x5c>
 8007f9a:	4b2e      	ldr	r3, [pc, #184]	; (8008054 <__mdiff+0x10c>)
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	f240 2145 	movw	r1, #581	; 0x245
 8007fa2:	e7e5      	b.n	8007f70 <__mdiff+0x28>
 8007fa4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fa8:	6926      	ldr	r6, [r4, #16]
 8007faa:	60c5      	str	r5, [r0, #12]
 8007fac:	f104 0914 	add.w	r9, r4, #20
 8007fb0:	f108 0514 	add.w	r5, r8, #20
 8007fb4:	f100 0e14 	add.w	lr, r0, #20
 8007fb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007fbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007fc0:	f108 0210 	add.w	r2, r8, #16
 8007fc4:	46f2      	mov	sl, lr
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007fcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007fd0:	fa11 f88b 	uxtah	r8, r1, fp
 8007fd4:	b299      	uxth	r1, r3
 8007fd6:	0c1b      	lsrs	r3, r3, #16
 8007fd8:	eba8 0801 	sub.w	r8, r8, r1
 8007fdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007fe0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007fe4:	fa1f f888 	uxth.w	r8, r8
 8007fe8:	1419      	asrs	r1, r3, #16
 8007fea:	454e      	cmp	r6, r9
 8007fec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ff0:	f84a 3b04 	str.w	r3, [sl], #4
 8007ff4:	d8e8      	bhi.n	8007fc8 <__mdiff+0x80>
 8007ff6:	1b33      	subs	r3, r6, r4
 8007ff8:	3b15      	subs	r3, #21
 8007ffa:	f023 0303 	bic.w	r3, r3, #3
 8007ffe:	3304      	adds	r3, #4
 8008000:	3415      	adds	r4, #21
 8008002:	42a6      	cmp	r6, r4
 8008004:	bf38      	it	cc
 8008006:	2304      	movcc	r3, #4
 8008008:	441d      	add	r5, r3
 800800a:	4473      	add	r3, lr
 800800c:	469e      	mov	lr, r3
 800800e:	462e      	mov	r6, r5
 8008010:	4566      	cmp	r6, ip
 8008012:	d30e      	bcc.n	8008032 <__mdiff+0xea>
 8008014:	f10c 0203 	add.w	r2, ip, #3
 8008018:	1b52      	subs	r2, r2, r5
 800801a:	f022 0203 	bic.w	r2, r2, #3
 800801e:	3d03      	subs	r5, #3
 8008020:	45ac      	cmp	ip, r5
 8008022:	bf38      	it	cc
 8008024:	2200      	movcc	r2, #0
 8008026:	4413      	add	r3, r2
 8008028:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800802c:	b17a      	cbz	r2, 800804e <__mdiff+0x106>
 800802e:	6107      	str	r7, [r0, #16]
 8008030:	e7a4      	b.n	8007f7c <__mdiff+0x34>
 8008032:	f856 8b04 	ldr.w	r8, [r6], #4
 8008036:	fa11 f288 	uxtah	r2, r1, r8
 800803a:	1414      	asrs	r4, r2, #16
 800803c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008040:	b292      	uxth	r2, r2
 8008042:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008046:	f84e 2b04 	str.w	r2, [lr], #4
 800804a:	1421      	asrs	r1, r4, #16
 800804c:	e7e0      	b.n	8008010 <__mdiff+0xc8>
 800804e:	3f01      	subs	r7, #1
 8008050:	e7ea      	b.n	8008028 <__mdiff+0xe0>
 8008052:	bf00      	nop
 8008054:	08008e28 	.word	0x08008e28
 8008058:	08008e4a 	.word	0x08008e4a

0800805c <__d2b>:
 800805c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008060:	460f      	mov	r7, r1
 8008062:	2101      	movs	r1, #1
 8008064:	ec59 8b10 	vmov	r8, r9, d0
 8008068:	4616      	mov	r6, r2
 800806a:	f7ff fcd5 	bl	8007a18 <_Balloc>
 800806e:	4604      	mov	r4, r0
 8008070:	b930      	cbnz	r0, 8008080 <__d2b+0x24>
 8008072:	4602      	mov	r2, r0
 8008074:	4b24      	ldr	r3, [pc, #144]	; (8008108 <__d2b+0xac>)
 8008076:	4825      	ldr	r0, [pc, #148]	; (800810c <__d2b+0xb0>)
 8008078:	f240 310f 	movw	r1, #783	; 0x30f
 800807c:	f000 f928 	bl	80082d0 <__assert_func>
 8008080:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008084:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008088:	bb2d      	cbnz	r5, 80080d6 <__d2b+0x7a>
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	f1b8 0300 	subs.w	r3, r8, #0
 8008090:	d026      	beq.n	80080e0 <__d2b+0x84>
 8008092:	4668      	mov	r0, sp
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	f7ff fd87 	bl	8007ba8 <__lo0bits>
 800809a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800809e:	b1e8      	cbz	r0, 80080dc <__d2b+0x80>
 80080a0:	f1c0 0320 	rsb	r3, r0, #32
 80080a4:	fa02 f303 	lsl.w	r3, r2, r3
 80080a8:	430b      	orrs	r3, r1
 80080aa:	40c2      	lsrs	r2, r0
 80080ac:	6163      	str	r3, [r4, #20]
 80080ae:	9201      	str	r2, [sp, #4]
 80080b0:	9b01      	ldr	r3, [sp, #4]
 80080b2:	61a3      	str	r3, [r4, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bf14      	ite	ne
 80080b8:	2202      	movne	r2, #2
 80080ba:	2201      	moveq	r2, #1
 80080bc:	6122      	str	r2, [r4, #16]
 80080be:	b1bd      	cbz	r5, 80080f0 <__d2b+0x94>
 80080c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080c4:	4405      	add	r5, r0
 80080c6:	603d      	str	r5, [r7, #0]
 80080c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080cc:	6030      	str	r0, [r6, #0]
 80080ce:	4620      	mov	r0, r4
 80080d0:	b003      	add	sp, #12
 80080d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080da:	e7d6      	b.n	800808a <__d2b+0x2e>
 80080dc:	6161      	str	r1, [r4, #20]
 80080de:	e7e7      	b.n	80080b0 <__d2b+0x54>
 80080e0:	a801      	add	r0, sp, #4
 80080e2:	f7ff fd61 	bl	8007ba8 <__lo0bits>
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	6163      	str	r3, [r4, #20]
 80080ea:	3020      	adds	r0, #32
 80080ec:	2201      	movs	r2, #1
 80080ee:	e7e5      	b.n	80080bc <__d2b+0x60>
 80080f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080f8:	6038      	str	r0, [r7, #0]
 80080fa:	6918      	ldr	r0, [r3, #16]
 80080fc:	f7ff fd34 	bl	8007b68 <__hi0bits>
 8008100:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008104:	e7e2      	b.n	80080cc <__d2b+0x70>
 8008106:	bf00      	nop
 8008108:	08008e28 	.word	0x08008e28
 800810c:	08008e4a 	.word	0x08008e4a

08008110 <__sread>:
 8008110:	b510      	push	{r4, lr}
 8008112:	460c      	mov	r4, r1
 8008114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008118:	f000 f8a8 	bl	800826c <_read_r>
 800811c:	2800      	cmp	r0, #0
 800811e:	bfab      	itete	ge
 8008120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008122:	89a3      	ldrhlt	r3, [r4, #12]
 8008124:	181b      	addge	r3, r3, r0
 8008126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800812a:	bfac      	ite	ge
 800812c:	6563      	strge	r3, [r4, #84]	; 0x54
 800812e:	81a3      	strhlt	r3, [r4, #12]
 8008130:	bd10      	pop	{r4, pc}

08008132 <__swrite>:
 8008132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008136:	461f      	mov	r7, r3
 8008138:	898b      	ldrh	r3, [r1, #12]
 800813a:	05db      	lsls	r3, r3, #23
 800813c:	4605      	mov	r5, r0
 800813e:	460c      	mov	r4, r1
 8008140:	4616      	mov	r6, r2
 8008142:	d505      	bpl.n	8008150 <__swrite+0x1e>
 8008144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008148:	2302      	movs	r3, #2
 800814a:	2200      	movs	r2, #0
 800814c:	f000 f87c 	bl	8008248 <_lseek_r>
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800815a:	81a3      	strh	r3, [r4, #12]
 800815c:	4632      	mov	r2, r6
 800815e:	463b      	mov	r3, r7
 8008160:	4628      	mov	r0, r5
 8008162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008166:	f000 b893 	b.w	8008290 <_write_r>

0800816a <__sseek>:
 800816a:	b510      	push	{r4, lr}
 800816c:	460c      	mov	r4, r1
 800816e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008172:	f000 f869 	bl	8008248 <_lseek_r>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	bf15      	itete	ne
 800817c:	6560      	strne	r0, [r4, #84]	; 0x54
 800817e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008186:	81a3      	strheq	r3, [r4, #12]
 8008188:	bf18      	it	ne
 800818a:	81a3      	strhne	r3, [r4, #12]
 800818c:	bd10      	pop	{r4, pc}

0800818e <__sclose>:
 800818e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008192:	f000 b849 	b.w	8008228 <_close_r>

08008196 <_realloc_r>:
 8008196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800819a:	4680      	mov	r8, r0
 800819c:	4614      	mov	r4, r2
 800819e:	460e      	mov	r6, r1
 80081a0:	b921      	cbnz	r1, 80081ac <_realloc_r+0x16>
 80081a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081a6:	4611      	mov	r1, r2
 80081a8:	f7fe b834 	b.w	8006214 <_malloc_r>
 80081ac:	b92a      	cbnz	r2, 80081ba <_realloc_r+0x24>
 80081ae:	f7ff f9e1 	bl	8007574 <_free_r>
 80081b2:	4625      	mov	r5, r4
 80081b4:	4628      	mov	r0, r5
 80081b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ba:	f000 f8cf 	bl	800835c <_malloc_usable_size_r>
 80081be:	4284      	cmp	r4, r0
 80081c0:	4607      	mov	r7, r0
 80081c2:	d802      	bhi.n	80081ca <_realloc_r+0x34>
 80081c4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081c8:	d812      	bhi.n	80081f0 <_realloc_r+0x5a>
 80081ca:	4621      	mov	r1, r4
 80081cc:	4640      	mov	r0, r8
 80081ce:	f7fe f821 	bl	8006214 <_malloc_r>
 80081d2:	4605      	mov	r5, r0
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d0ed      	beq.n	80081b4 <_realloc_r+0x1e>
 80081d8:	42bc      	cmp	r4, r7
 80081da:	4622      	mov	r2, r4
 80081dc:	4631      	mov	r1, r6
 80081de:	bf28      	it	cs
 80081e0:	463a      	movcs	r2, r7
 80081e2:	f000 f867 	bl	80082b4 <memcpy>
 80081e6:	4631      	mov	r1, r6
 80081e8:	4640      	mov	r0, r8
 80081ea:	f7ff f9c3 	bl	8007574 <_free_r>
 80081ee:	e7e1      	b.n	80081b4 <_realloc_r+0x1e>
 80081f0:	4635      	mov	r5, r6
 80081f2:	e7df      	b.n	80081b4 <_realloc_r+0x1e>

080081f4 <memmove>:
 80081f4:	4288      	cmp	r0, r1
 80081f6:	b510      	push	{r4, lr}
 80081f8:	eb01 0402 	add.w	r4, r1, r2
 80081fc:	d902      	bls.n	8008204 <memmove+0x10>
 80081fe:	4284      	cmp	r4, r0
 8008200:	4623      	mov	r3, r4
 8008202:	d807      	bhi.n	8008214 <memmove+0x20>
 8008204:	1e43      	subs	r3, r0, #1
 8008206:	42a1      	cmp	r1, r4
 8008208:	d008      	beq.n	800821c <memmove+0x28>
 800820a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800820e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008212:	e7f8      	b.n	8008206 <memmove+0x12>
 8008214:	4402      	add	r2, r0
 8008216:	4601      	mov	r1, r0
 8008218:	428a      	cmp	r2, r1
 800821a:	d100      	bne.n	800821e <memmove+0x2a>
 800821c:	bd10      	pop	{r4, pc}
 800821e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008226:	e7f7      	b.n	8008218 <memmove+0x24>

08008228 <_close_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4d06      	ldr	r5, [pc, #24]	; (8008244 <_close_r+0x1c>)
 800822c:	2300      	movs	r3, #0
 800822e:	4604      	mov	r4, r0
 8008230:	4608      	mov	r0, r1
 8008232:	602b      	str	r3, [r5, #0]
 8008234:	f7fa ff19 	bl	800306a <_close>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d102      	bne.n	8008242 <_close_r+0x1a>
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	b103      	cbz	r3, 8008242 <_close_r+0x1a>
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	20000608 	.word	0x20000608

08008248 <_lseek_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4d07      	ldr	r5, [pc, #28]	; (8008268 <_lseek_r+0x20>)
 800824c:	4604      	mov	r4, r0
 800824e:	4608      	mov	r0, r1
 8008250:	4611      	mov	r1, r2
 8008252:	2200      	movs	r2, #0
 8008254:	602a      	str	r2, [r5, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	f7fa ff2e 	bl	80030b8 <_lseek>
 800825c:	1c43      	adds	r3, r0, #1
 800825e:	d102      	bne.n	8008266 <_lseek_r+0x1e>
 8008260:	682b      	ldr	r3, [r5, #0]
 8008262:	b103      	cbz	r3, 8008266 <_lseek_r+0x1e>
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	bd38      	pop	{r3, r4, r5, pc}
 8008268:	20000608 	.word	0x20000608

0800826c <_read_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4d07      	ldr	r5, [pc, #28]	; (800828c <_read_r+0x20>)
 8008270:	4604      	mov	r4, r0
 8008272:	4608      	mov	r0, r1
 8008274:	4611      	mov	r1, r2
 8008276:	2200      	movs	r2, #0
 8008278:	602a      	str	r2, [r5, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	f7fa febc 	bl	8002ff8 <_read>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d102      	bne.n	800828a <_read_r+0x1e>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	b103      	cbz	r3, 800828a <_read_r+0x1e>
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	20000608 	.word	0x20000608

08008290 <_write_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4d07      	ldr	r5, [pc, #28]	; (80082b0 <_write_r+0x20>)
 8008294:	4604      	mov	r4, r0
 8008296:	4608      	mov	r0, r1
 8008298:	4611      	mov	r1, r2
 800829a:	2200      	movs	r2, #0
 800829c:	602a      	str	r2, [r5, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	f7fa fec7 	bl	8003032 <_write>
 80082a4:	1c43      	adds	r3, r0, #1
 80082a6:	d102      	bne.n	80082ae <_write_r+0x1e>
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	b103      	cbz	r3, 80082ae <_write_r+0x1e>
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	20000608 	.word	0x20000608

080082b4 <memcpy>:
 80082b4:	440a      	add	r2, r1
 80082b6:	4291      	cmp	r1, r2
 80082b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80082bc:	d100      	bne.n	80082c0 <memcpy+0xc>
 80082be:	4770      	bx	lr
 80082c0:	b510      	push	{r4, lr}
 80082c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ca:	4291      	cmp	r1, r2
 80082cc:	d1f9      	bne.n	80082c2 <memcpy+0xe>
 80082ce:	bd10      	pop	{r4, pc}

080082d0 <__assert_func>:
 80082d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082d2:	4614      	mov	r4, r2
 80082d4:	461a      	mov	r2, r3
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <__assert_func+0x2c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4605      	mov	r5, r0
 80082dc:	68d8      	ldr	r0, [r3, #12]
 80082de:	b14c      	cbz	r4, 80082f4 <__assert_func+0x24>
 80082e0:	4b07      	ldr	r3, [pc, #28]	; (8008300 <__assert_func+0x30>)
 80082e2:	9100      	str	r1, [sp, #0]
 80082e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082e8:	4906      	ldr	r1, [pc, #24]	; (8008304 <__assert_func+0x34>)
 80082ea:	462b      	mov	r3, r5
 80082ec:	f000 f83e 	bl	800836c <fiprintf>
 80082f0:	f000 f85b 	bl	80083aa <abort>
 80082f4:	4b04      	ldr	r3, [pc, #16]	; (8008308 <__assert_func+0x38>)
 80082f6:	461c      	mov	r4, r3
 80082f8:	e7f3      	b.n	80082e2 <__assert_func+0x12>
 80082fa:	bf00      	nop
 80082fc:	20000070 	.word	0x20000070
 8008300:	080090af 	.word	0x080090af
 8008304:	080090bc 	.word	0x080090bc
 8008308:	080090ea 	.word	0x080090ea

0800830c <_calloc_r>:
 800830c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800830e:	fba1 2402 	umull	r2, r4, r1, r2
 8008312:	b94c      	cbnz	r4, 8008328 <_calloc_r+0x1c>
 8008314:	4611      	mov	r1, r2
 8008316:	9201      	str	r2, [sp, #4]
 8008318:	f7fd ff7c 	bl	8006214 <_malloc_r>
 800831c:	9a01      	ldr	r2, [sp, #4]
 800831e:	4605      	mov	r5, r0
 8008320:	b930      	cbnz	r0, 8008330 <_calloc_r+0x24>
 8008322:	4628      	mov	r0, r5
 8008324:	b003      	add	sp, #12
 8008326:	bd30      	pop	{r4, r5, pc}
 8008328:	220c      	movs	r2, #12
 800832a:	6002      	str	r2, [r0, #0]
 800832c:	2500      	movs	r5, #0
 800832e:	e7f8      	b.n	8008322 <_calloc_r+0x16>
 8008330:	4621      	mov	r1, r4
 8008332:	f7fe fa5b 	bl	80067ec <memset>
 8008336:	e7f4      	b.n	8008322 <_calloc_r+0x16>

08008338 <__ascii_mbtowc>:
 8008338:	b082      	sub	sp, #8
 800833a:	b901      	cbnz	r1, 800833e <__ascii_mbtowc+0x6>
 800833c:	a901      	add	r1, sp, #4
 800833e:	b142      	cbz	r2, 8008352 <__ascii_mbtowc+0x1a>
 8008340:	b14b      	cbz	r3, 8008356 <__ascii_mbtowc+0x1e>
 8008342:	7813      	ldrb	r3, [r2, #0]
 8008344:	600b      	str	r3, [r1, #0]
 8008346:	7812      	ldrb	r2, [r2, #0]
 8008348:	1e10      	subs	r0, r2, #0
 800834a:	bf18      	it	ne
 800834c:	2001      	movne	r0, #1
 800834e:	b002      	add	sp, #8
 8008350:	4770      	bx	lr
 8008352:	4610      	mov	r0, r2
 8008354:	e7fb      	b.n	800834e <__ascii_mbtowc+0x16>
 8008356:	f06f 0001 	mvn.w	r0, #1
 800835a:	e7f8      	b.n	800834e <__ascii_mbtowc+0x16>

0800835c <_malloc_usable_size_r>:
 800835c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008360:	1f18      	subs	r0, r3, #4
 8008362:	2b00      	cmp	r3, #0
 8008364:	bfbc      	itt	lt
 8008366:	580b      	ldrlt	r3, [r1, r0]
 8008368:	18c0      	addlt	r0, r0, r3
 800836a:	4770      	bx	lr

0800836c <fiprintf>:
 800836c:	b40e      	push	{r1, r2, r3}
 800836e:	b503      	push	{r0, r1, lr}
 8008370:	4601      	mov	r1, r0
 8008372:	ab03      	add	r3, sp, #12
 8008374:	4805      	ldr	r0, [pc, #20]	; (800838c <fiprintf+0x20>)
 8008376:	f853 2b04 	ldr.w	r2, [r3], #4
 800837a:	6800      	ldr	r0, [r0, #0]
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	f000 f845 	bl	800840c <_vfiprintf_r>
 8008382:	b002      	add	sp, #8
 8008384:	f85d eb04 	ldr.w	lr, [sp], #4
 8008388:	b003      	add	sp, #12
 800838a:	4770      	bx	lr
 800838c:	20000070 	.word	0x20000070

08008390 <__ascii_wctomb>:
 8008390:	b149      	cbz	r1, 80083a6 <__ascii_wctomb+0x16>
 8008392:	2aff      	cmp	r2, #255	; 0xff
 8008394:	bf85      	ittet	hi
 8008396:	238a      	movhi	r3, #138	; 0x8a
 8008398:	6003      	strhi	r3, [r0, #0]
 800839a:	700a      	strbls	r2, [r1, #0]
 800839c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80083a0:	bf98      	it	ls
 80083a2:	2001      	movls	r0, #1
 80083a4:	4770      	bx	lr
 80083a6:	4608      	mov	r0, r1
 80083a8:	4770      	bx	lr

080083aa <abort>:
 80083aa:	b508      	push	{r3, lr}
 80083ac:	2006      	movs	r0, #6
 80083ae:	f000 fa89 	bl	80088c4 <raise>
 80083b2:	2001      	movs	r0, #1
 80083b4:	f7fa fe16 	bl	8002fe4 <_exit>

080083b8 <__sfputc_r>:
 80083b8:	6893      	ldr	r3, [r2, #8]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	2b00      	cmp	r3, #0
 80083be:	b410      	push	{r4}
 80083c0:	6093      	str	r3, [r2, #8]
 80083c2:	da08      	bge.n	80083d6 <__sfputc_r+0x1e>
 80083c4:	6994      	ldr	r4, [r2, #24]
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	db01      	blt.n	80083ce <__sfputc_r+0x16>
 80083ca:	290a      	cmp	r1, #10
 80083cc:	d103      	bne.n	80083d6 <__sfputc_r+0x1e>
 80083ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d2:	f000 b935 	b.w	8008640 <__swbuf_r>
 80083d6:	6813      	ldr	r3, [r2, #0]
 80083d8:	1c58      	adds	r0, r3, #1
 80083da:	6010      	str	r0, [r2, #0]
 80083dc:	7019      	strb	r1, [r3, #0]
 80083de:	4608      	mov	r0, r1
 80083e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <__sfputs_r>:
 80083e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e8:	4606      	mov	r6, r0
 80083ea:	460f      	mov	r7, r1
 80083ec:	4614      	mov	r4, r2
 80083ee:	18d5      	adds	r5, r2, r3
 80083f0:	42ac      	cmp	r4, r5
 80083f2:	d101      	bne.n	80083f8 <__sfputs_r+0x12>
 80083f4:	2000      	movs	r0, #0
 80083f6:	e007      	b.n	8008408 <__sfputs_r+0x22>
 80083f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083fc:	463a      	mov	r2, r7
 80083fe:	4630      	mov	r0, r6
 8008400:	f7ff ffda 	bl	80083b8 <__sfputc_r>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d1f3      	bne.n	80083f0 <__sfputs_r+0xa>
 8008408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800840c <_vfiprintf_r>:
 800840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008410:	460d      	mov	r5, r1
 8008412:	b09d      	sub	sp, #116	; 0x74
 8008414:	4614      	mov	r4, r2
 8008416:	4698      	mov	r8, r3
 8008418:	4606      	mov	r6, r0
 800841a:	b118      	cbz	r0, 8008424 <_vfiprintf_r+0x18>
 800841c:	6a03      	ldr	r3, [r0, #32]
 800841e:	b90b      	cbnz	r3, 8008424 <_vfiprintf_r+0x18>
 8008420:	f7fe f9ae 	bl	8006780 <__sinit>
 8008424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008426:	07d9      	lsls	r1, r3, #31
 8008428:	d405      	bmi.n	8008436 <_vfiprintf_r+0x2a>
 800842a:	89ab      	ldrh	r3, [r5, #12]
 800842c:	059a      	lsls	r2, r3, #22
 800842e:	d402      	bmi.n	8008436 <_vfiprintf_r+0x2a>
 8008430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008432:	f7fe fa21 	bl	8006878 <__retarget_lock_acquire_recursive>
 8008436:	89ab      	ldrh	r3, [r5, #12]
 8008438:	071b      	lsls	r3, r3, #28
 800843a:	d501      	bpl.n	8008440 <_vfiprintf_r+0x34>
 800843c:	692b      	ldr	r3, [r5, #16]
 800843e:	b99b      	cbnz	r3, 8008468 <_vfiprintf_r+0x5c>
 8008440:	4629      	mov	r1, r5
 8008442:	4630      	mov	r0, r6
 8008444:	f000 f93a 	bl	80086bc <__swsetup_r>
 8008448:	b170      	cbz	r0, 8008468 <_vfiprintf_r+0x5c>
 800844a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800844c:	07dc      	lsls	r4, r3, #31
 800844e:	d504      	bpl.n	800845a <_vfiprintf_r+0x4e>
 8008450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008454:	b01d      	add	sp, #116	; 0x74
 8008456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845a:	89ab      	ldrh	r3, [r5, #12]
 800845c:	0598      	lsls	r0, r3, #22
 800845e:	d4f7      	bmi.n	8008450 <_vfiprintf_r+0x44>
 8008460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008462:	f7fe fa0a 	bl	800687a <__retarget_lock_release_recursive>
 8008466:	e7f3      	b.n	8008450 <_vfiprintf_r+0x44>
 8008468:	2300      	movs	r3, #0
 800846a:	9309      	str	r3, [sp, #36]	; 0x24
 800846c:	2320      	movs	r3, #32
 800846e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008472:	f8cd 800c 	str.w	r8, [sp, #12]
 8008476:	2330      	movs	r3, #48	; 0x30
 8008478:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800862c <_vfiprintf_r+0x220>
 800847c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008480:	f04f 0901 	mov.w	r9, #1
 8008484:	4623      	mov	r3, r4
 8008486:	469a      	mov	sl, r3
 8008488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800848c:	b10a      	cbz	r2, 8008492 <_vfiprintf_r+0x86>
 800848e:	2a25      	cmp	r2, #37	; 0x25
 8008490:	d1f9      	bne.n	8008486 <_vfiprintf_r+0x7a>
 8008492:	ebba 0b04 	subs.w	fp, sl, r4
 8008496:	d00b      	beq.n	80084b0 <_vfiprintf_r+0xa4>
 8008498:	465b      	mov	r3, fp
 800849a:	4622      	mov	r2, r4
 800849c:	4629      	mov	r1, r5
 800849e:	4630      	mov	r0, r6
 80084a0:	f7ff ffa1 	bl	80083e6 <__sfputs_r>
 80084a4:	3001      	adds	r0, #1
 80084a6:	f000 80a9 	beq.w	80085fc <_vfiprintf_r+0x1f0>
 80084aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ac:	445a      	add	r2, fp
 80084ae:	9209      	str	r2, [sp, #36]	; 0x24
 80084b0:	f89a 3000 	ldrb.w	r3, [sl]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 80a1 	beq.w	80085fc <_vfiprintf_r+0x1f0>
 80084ba:	2300      	movs	r3, #0
 80084bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084c4:	f10a 0a01 	add.w	sl, sl, #1
 80084c8:	9304      	str	r3, [sp, #16]
 80084ca:	9307      	str	r3, [sp, #28]
 80084cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084d0:	931a      	str	r3, [sp, #104]	; 0x68
 80084d2:	4654      	mov	r4, sl
 80084d4:	2205      	movs	r2, #5
 80084d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084da:	4854      	ldr	r0, [pc, #336]	; (800862c <_vfiprintf_r+0x220>)
 80084dc:	f7f7 fe98 	bl	8000210 <memchr>
 80084e0:	9a04      	ldr	r2, [sp, #16]
 80084e2:	b9d8      	cbnz	r0, 800851c <_vfiprintf_r+0x110>
 80084e4:	06d1      	lsls	r1, r2, #27
 80084e6:	bf44      	itt	mi
 80084e8:	2320      	movmi	r3, #32
 80084ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ee:	0713      	lsls	r3, r2, #28
 80084f0:	bf44      	itt	mi
 80084f2:	232b      	movmi	r3, #43	; 0x2b
 80084f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084f8:	f89a 3000 	ldrb.w	r3, [sl]
 80084fc:	2b2a      	cmp	r3, #42	; 0x2a
 80084fe:	d015      	beq.n	800852c <_vfiprintf_r+0x120>
 8008500:	9a07      	ldr	r2, [sp, #28]
 8008502:	4654      	mov	r4, sl
 8008504:	2000      	movs	r0, #0
 8008506:	f04f 0c0a 	mov.w	ip, #10
 800850a:	4621      	mov	r1, r4
 800850c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008510:	3b30      	subs	r3, #48	; 0x30
 8008512:	2b09      	cmp	r3, #9
 8008514:	d94d      	bls.n	80085b2 <_vfiprintf_r+0x1a6>
 8008516:	b1b0      	cbz	r0, 8008546 <_vfiprintf_r+0x13a>
 8008518:	9207      	str	r2, [sp, #28]
 800851a:	e014      	b.n	8008546 <_vfiprintf_r+0x13a>
 800851c:	eba0 0308 	sub.w	r3, r0, r8
 8008520:	fa09 f303 	lsl.w	r3, r9, r3
 8008524:	4313      	orrs	r3, r2
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	46a2      	mov	sl, r4
 800852a:	e7d2      	b.n	80084d2 <_vfiprintf_r+0xc6>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	1d19      	adds	r1, r3, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	9103      	str	r1, [sp, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	bfbb      	ittet	lt
 8008538:	425b      	neglt	r3, r3
 800853a:	f042 0202 	orrlt.w	r2, r2, #2
 800853e:	9307      	strge	r3, [sp, #28]
 8008540:	9307      	strlt	r3, [sp, #28]
 8008542:	bfb8      	it	lt
 8008544:	9204      	strlt	r2, [sp, #16]
 8008546:	7823      	ldrb	r3, [r4, #0]
 8008548:	2b2e      	cmp	r3, #46	; 0x2e
 800854a:	d10c      	bne.n	8008566 <_vfiprintf_r+0x15a>
 800854c:	7863      	ldrb	r3, [r4, #1]
 800854e:	2b2a      	cmp	r3, #42	; 0x2a
 8008550:	d134      	bne.n	80085bc <_vfiprintf_r+0x1b0>
 8008552:	9b03      	ldr	r3, [sp, #12]
 8008554:	1d1a      	adds	r2, r3, #4
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	9203      	str	r2, [sp, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	bfb8      	it	lt
 800855e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008562:	3402      	adds	r4, #2
 8008564:	9305      	str	r3, [sp, #20]
 8008566:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800863c <_vfiprintf_r+0x230>
 800856a:	7821      	ldrb	r1, [r4, #0]
 800856c:	2203      	movs	r2, #3
 800856e:	4650      	mov	r0, sl
 8008570:	f7f7 fe4e 	bl	8000210 <memchr>
 8008574:	b138      	cbz	r0, 8008586 <_vfiprintf_r+0x17a>
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	eba0 000a 	sub.w	r0, r0, sl
 800857c:	2240      	movs	r2, #64	; 0x40
 800857e:	4082      	lsls	r2, r0
 8008580:	4313      	orrs	r3, r2
 8008582:	3401      	adds	r4, #1
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858a:	4829      	ldr	r0, [pc, #164]	; (8008630 <_vfiprintf_r+0x224>)
 800858c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008590:	2206      	movs	r2, #6
 8008592:	f7f7 fe3d 	bl	8000210 <memchr>
 8008596:	2800      	cmp	r0, #0
 8008598:	d03f      	beq.n	800861a <_vfiprintf_r+0x20e>
 800859a:	4b26      	ldr	r3, [pc, #152]	; (8008634 <_vfiprintf_r+0x228>)
 800859c:	bb1b      	cbnz	r3, 80085e6 <_vfiprintf_r+0x1da>
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	3307      	adds	r3, #7
 80085a2:	f023 0307 	bic.w	r3, r3, #7
 80085a6:	3308      	adds	r3, #8
 80085a8:	9303      	str	r3, [sp, #12]
 80085aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ac:	443b      	add	r3, r7
 80085ae:	9309      	str	r3, [sp, #36]	; 0x24
 80085b0:	e768      	b.n	8008484 <_vfiprintf_r+0x78>
 80085b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80085b6:	460c      	mov	r4, r1
 80085b8:	2001      	movs	r0, #1
 80085ba:	e7a6      	b.n	800850a <_vfiprintf_r+0xfe>
 80085bc:	2300      	movs	r3, #0
 80085be:	3401      	adds	r4, #1
 80085c0:	9305      	str	r3, [sp, #20]
 80085c2:	4619      	mov	r1, r3
 80085c4:	f04f 0c0a 	mov.w	ip, #10
 80085c8:	4620      	mov	r0, r4
 80085ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ce:	3a30      	subs	r2, #48	; 0x30
 80085d0:	2a09      	cmp	r2, #9
 80085d2:	d903      	bls.n	80085dc <_vfiprintf_r+0x1d0>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d0c6      	beq.n	8008566 <_vfiprintf_r+0x15a>
 80085d8:	9105      	str	r1, [sp, #20]
 80085da:	e7c4      	b.n	8008566 <_vfiprintf_r+0x15a>
 80085dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80085e0:	4604      	mov	r4, r0
 80085e2:	2301      	movs	r3, #1
 80085e4:	e7f0      	b.n	80085c8 <_vfiprintf_r+0x1bc>
 80085e6:	ab03      	add	r3, sp, #12
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	462a      	mov	r2, r5
 80085ec:	4b12      	ldr	r3, [pc, #72]	; (8008638 <_vfiprintf_r+0x22c>)
 80085ee:	a904      	add	r1, sp, #16
 80085f0:	4630      	mov	r0, r6
 80085f2:	f7fd fba9 	bl	8005d48 <_printf_float>
 80085f6:	4607      	mov	r7, r0
 80085f8:	1c78      	adds	r0, r7, #1
 80085fa:	d1d6      	bne.n	80085aa <_vfiprintf_r+0x19e>
 80085fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085fe:	07d9      	lsls	r1, r3, #31
 8008600:	d405      	bmi.n	800860e <_vfiprintf_r+0x202>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	059a      	lsls	r2, r3, #22
 8008606:	d402      	bmi.n	800860e <_vfiprintf_r+0x202>
 8008608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800860a:	f7fe f936 	bl	800687a <__retarget_lock_release_recursive>
 800860e:	89ab      	ldrh	r3, [r5, #12]
 8008610:	065b      	lsls	r3, r3, #25
 8008612:	f53f af1d 	bmi.w	8008450 <_vfiprintf_r+0x44>
 8008616:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008618:	e71c      	b.n	8008454 <_vfiprintf_r+0x48>
 800861a:	ab03      	add	r3, sp, #12
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	462a      	mov	r2, r5
 8008620:	4b05      	ldr	r3, [pc, #20]	; (8008638 <_vfiprintf_r+0x22c>)
 8008622:	a904      	add	r1, sp, #16
 8008624:	4630      	mov	r0, r6
 8008626:	f7fd fee3 	bl	80063f0 <_printf_i>
 800862a:	e7e4      	b.n	80085f6 <_vfiprintf_r+0x1ea>
 800862c:	08008e39 	.word	0x08008e39
 8008630:	08008e43 	.word	0x08008e43
 8008634:	08005d49 	.word	0x08005d49
 8008638:	080083e7 	.word	0x080083e7
 800863c:	08008e3f 	.word	0x08008e3f

08008640 <__swbuf_r>:
 8008640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008642:	460e      	mov	r6, r1
 8008644:	4614      	mov	r4, r2
 8008646:	4605      	mov	r5, r0
 8008648:	b118      	cbz	r0, 8008652 <__swbuf_r+0x12>
 800864a:	6a03      	ldr	r3, [r0, #32]
 800864c:	b90b      	cbnz	r3, 8008652 <__swbuf_r+0x12>
 800864e:	f7fe f897 	bl	8006780 <__sinit>
 8008652:	69a3      	ldr	r3, [r4, #24]
 8008654:	60a3      	str	r3, [r4, #8]
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	071a      	lsls	r2, r3, #28
 800865a:	d525      	bpl.n	80086a8 <__swbuf_r+0x68>
 800865c:	6923      	ldr	r3, [r4, #16]
 800865e:	b31b      	cbz	r3, 80086a8 <__swbuf_r+0x68>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	6922      	ldr	r2, [r4, #16]
 8008664:	1a98      	subs	r0, r3, r2
 8008666:	6963      	ldr	r3, [r4, #20]
 8008668:	b2f6      	uxtb	r6, r6
 800866a:	4283      	cmp	r3, r0
 800866c:	4637      	mov	r7, r6
 800866e:	dc04      	bgt.n	800867a <__swbuf_r+0x3a>
 8008670:	4621      	mov	r1, r4
 8008672:	4628      	mov	r0, r5
 8008674:	f7ff f9a8 	bl	80079c8 <_fflush_r>
 8008678:	b9e0      	cbnz	r0, 80086b4 <__swbuf_r+0x74>
 800867a:	68a3      	ldr	r3, [r4, #8]
 800867c:	3b01      	subs	r3, #1
 800867e:	60a3      	str	r3, [r4, #8]
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	6022      	str	r2, [r4, #0]
 8008686:	701e      	strb	r6, [r3, #0]
 8008688:	6962      	ldr	r2, [r4, #20]
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	429a      	cmp	r2, r3
 800868e:	d004      	beq.n	800869a <__swbuf_r+0x5a>
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	07db      	lsls	r3, r3, #31
 8008694:	d506      	bpl.n	80086a4 <__swbuf_r+0x64>
 8008696:	2e0a      	cmp	r6, #10
 8008698:	d104      	bne.n	80086a4 <__swbuf_r+0x64>
 800869a:	4621      	mov	r1, r4
 800869c:	4628      	mov	r0, r5
 800869e:	f7ff f993 	bl	80079c8 <_fflush_r>
 80086a2:	b938      	cbnz	r0, 80086b4 <__swbuf_r+0x74>
 80086a4:	4638      	mov	r0, r7
 80086a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a8:	4621      	mov	r1, r4
 80086aa:	4628      	mov	r0, r5
 80086ac:	f000 f806 	bl	80086bc <__swsetup_r>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d0d5      	beq.n	8008660 <__swbuf_r+0x20>
 80086b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80086b8:	e7f4      	b.n	80086a4 <__swbuf_r+0x64>
	...

080086bc <__swsetup_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4b2a      	ldr	r3, [pc, #168]	; (8008768 <__swsetup_r+0xac>)
 80086c0:	4605      	mov	r5, r0
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	460c      	mov	r4, r1
 80086c6:	b118      	cbz	r0, 80086d0 <__swsetup_r+0x14>
 80086c8:	6a03      	ldr	r3, [r0, #32]
 80086ca:	b90b      	cbnz	r3, 80086d0 <__swsetup_r+0x14>
 80086cc:	f7fe f858 	bl	8006780 <__sinit>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086d6:	0718      	lsls	r0, r3, #28
 80086d8:	d422      	bmi.n	8008720 <__swsetup_r+0x64>
 80086da:	06d9      	lsls	r1, r3, #27
 80086dc:	d407      	bmi.n	80086ee <__swsetup_r+0x32>
 80086de:	2309      	movs	r3, #9
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086ec:	e034      	b.n	8008758 <__swsetup_r+0x9c>
 80086ee:	0758      	lsls	r0, r3, #29
 80086f0:	d512      	bpl.n	8008718 <__swsetup_r+0x5c>
 80086f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086f4:	b141      	cbz	r1, 8008708 <__swsetup_r+0x4c>
 80086f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086fa:	4299      	cmp	r1, r3
 80086fc:	d002      	beq.n	8008704 <__swsetup_r+0x48>
 80086fe:	4628      	mov	r0, r5
 8008700:	f7fe ff38 	bl	8007574 <_free_r>
 8008704:	2300      	movs	r3, #0
 8008706:	6363      	str	r3, [r4, #52]	; 0x34
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	2300      	movs	r3, #0
 8008712:	6063      	str	r3, [r4, #4]
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	6023      	str	r3, [r4, #0]
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	f043 0308 	orr.w	r3, r3, #8
 800871e:	81a3      	strh	r3, [r4, #12]
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	b94b      	cbnz	r3, 8008738 <__swsetup_r+0x7c>
 8008724:	89a3      	ldrh	r3, [r4, #12]
 8008726:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800872a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800872e:	d003      	beq.n	8008738 <__swsetup_r+0x7c>
 8008730:	4621      	mov	r1, r4
 8008732:	4628      	mov	r0, r5
 8008734:	f000 f840 	bl	80087b8 <__smakebuf_r>
 8008738:	89a0      	ldrh	r0, [r4, #12]
 800873a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800873e:	f010 0301 	ands.w	r3, r0, #1
 8008742:	d00a      	beq.n	800875a <__swsetup_r+0x9e>
 8008744:	2300      	movs	r3, #0
 8008746:	60a3      	str	r3, [r4, #8]
 8008748:	6963      	ldr	r3, [r4, #20]
 800874a:	425b      	negs	r3, r3
 800874c:	61a3      	str	r3, [r4, #24]
 800874e:	6923      	ldr	r3, [r4, #16]
 8008750:	b943      	cbnz	r3, 8008764 <__swsetup_r+0xa8>
 8008752:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008756:	d1c4      	bne.n	80086e2 <__swsetup_r+0x26>
 8008758:	bd38      	pop	{r3, r4, r5, pc}
 800875a:	0781      	lsls	r1, r0, #30
 800875c:	bf58      	it	pl
 800875e:	6963      	ldrpl	r3, [r4, #20]
 8008760:	60a3      	str	r3, [r4, #8]
 8008762:	e7f4      	b.n	800874e <__swsetup_r+0x92>
 8008764:	2000      	movs	r0, #0
 8008766:	e7f7      	b.n	8008758 <__swsetup_r+0x9c>
 8008768:	20000070 	.word	0x20000070

0800876c <__swhatbuf_r>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	460c      	mov	r4, r1
 8008770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008774:	2900      	cmp	r1, #0
 8008776:	b096      	sub	sp, #88	; 0x58
 8008778:	4615      	mov	r5, r2
 800877a:	461e      	mov	r6, r3
 800877c:	da0d      	bge.n	800879a <__swhatbuf_r+0x2e>
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008784:	f04f 0100 	mov.w	r1, #0
 8008788:	bf0c      	ite	eq
 800878a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800878e:	2340      	movne	r3, #64	; 0x40
 8008790:	2000      	movs	r0, #0
 8008792:	6031      	str	r1, [r6, #0]
 8008794:	602b      	str	r3, [r5, #0]
 8008796:	b016      	add	sp, #88	; 0x58
 8008798:	bd70      	pop	{r4, r5, r6, pc}
 800879a:	466a      	mov	r2, sp
 800879c:	f000 f848 	bl	8008830 <_fstat_r>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	dbec      	blt.n	800877e <__swhatbuf_r+0x12>
 80087a4:	9901      	ldr	r1, [sp, #4]
 80087a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80087aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80087ae:	4259      	negs	r1, r3
 80087b0:	4159      	adcs	r1, r3
 80087b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087b6:	e7eb      	b.n	8008790 <__swhatbuf_r+0x24>

080087b8 <__smakebuf_r>:
 80087b8:	898b      	ldrh	r3, [r1, #12]
 80087ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087bc:	079d      	lsls	r5, r3, #30
 80087be:	4606      	mov	r6, r0
 80087c0:	460c      	mov	r4, r1
 80087c2:	d507      	bpl.n	80087d4 <__smakebuf_r+0x1c>
 80087c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	6123      	str	r3, [r4, #16]
 80087cc:	2301      	movs	r3, #1
 80087ce:	6163      	str	r3, [r4, #20]
 80087d0:	b002      	add	sp, #8
 80087d2:	bd70      	pop	{r4, r5, r6, pc}
 80087d4:	ab01      	add	r3, sp, #4
 80087d6:	466a      	mov	r2, sp
 80087d8:	f7ff ffc8 	bl	800876c <__swhatbuf_r>
 80087dc:	9900      	ldr	r1, [sp, #0]
 80087de:	4605      	mov	r5, r0
 80087e0:	4630      	mov	r0, r6
 80087e2:	f7fd fd17 	bl	8006214 <_malloc_r>
 80087e6:	b948      	cbnz	r0, 80087fc <__smakebuf_r+0x44>
 80087e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ec:	059a      	lsls	r2, r3, #22
 80087ee:	d4ef      	bmi.n	80087d0 <__smakebuf_r+0x18>
 80087f0:	f023 0303 	bic.w	r3, r3, #3
 80087f4:	f043 0302 	orr.w	r3, r3, #2
 80087f8:	81a3      	strh	r3, [r4, #12]
 80087fa:	e7e3      	b.n	80087c4 <__smakebuf_r+0xc>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	6020      	str	r0, [r4, #0]
 8008800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008804:	81a3      	strh	r3, [r4, #12]
 8008806:	9b00      	ldr	r3, [sp, #0]
 8008808:	6163      	str	r3, [r4, #20]
 800880a:	9b01      	ldr	r3, [sp, #4]
 800880c:	6120      	str	r0, [r4, #16]
 800880e:	b15b      	cbz	r3, 8008828 <__smakebuf_r+0x70>
 8008810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008814:	4630      	mov	r0, r6
 8008816:	f000 f81d 	bl	8008854 <_isatty_r>
 800881a:	b128      	cbz	r0, 8008828 <__smakebuf_r+0x70>
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	f023 0303 	bic.w	r3, r3, #3
 8008822:	f043 0301 	orr.w	r3, r3, #1
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	89a3      	ldrh	r3, [r4, #12]
 800882a:	431d      	orrs	r5, r3
 800882c:	81a5      	strh	r5, [r4, #12]
 800882e:	e7cf      	b.n	80087d0 <__smakebuf_r+0x18>

08008830 <_fstat_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d07      	ldr	r5, [pc, #28]	; (8008850 <_fstat_r+0x20>)
 8008834:	2300      	movs	r3, #0
 8008836:	4604      	mov	r4, r0
 8008838:	4608      	mov	r0, r1
 800883a:	4611      	mov	r1, r2
 800883c:	602b      	str	r3, [r5, #0]
 800883e:	f7fa fc20 	bl	8003082 <_fstat>
 8008842:	1c43      	adds	r3, r0, #1
 8008844:	d102      	bne.n	800884c <_fstat_r+0x1c>
 8008846:	682b      	ldr	r3, [r5, #0]
 8008848:	b103      	cbz	r3, 800884c <_fstat_r+0x1c>
 800884a:	6023      	str	r3, [r4, #0]
 800884c:	bd38      	pop	{r3, r4, r5, pc}
 800884e:	bf00      	nop
 8008850:	20000608 	.word	0x20000608

08008854 <_isatty_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d06      	ldr	r5, [pc, #24]	; (8008870 <_isatty_r+0x1c>)
 8008858:	2300      	movs	r3, #0
 800885a:	4604      	mov	r4, r0
 800885c:	4608      	mov	r0, r1
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	f7fa fc1f 	bl	80030a2 <_isatty>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_isatty_r+0x1a>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	b103      	cbz	r3, 800886e <_isatty_r+0x1a>
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	20000608 	.word	0x20000608

08008874 <_raise_r>:
 8008874:	291f      	cmp	r1, #31
 8008876:	b538      	push	{r3, r4, r5, lr}
 8008878:	4604      	mov	r4, r0
 800887a:	460d      	mov	r5, r1
 800887c:	d904      	bls.n	8008888 <_raise_r+0x14>
 800887e:	2316      	movs	r3, #22
 8008880:	6003      	str	r3, [r0, #0]
 8008882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800888a:	b112      	cbz	r2, 8008892 <_raise_r+0x1e>
 800888c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008890:	b94b      	cbnz	r3, 80088a6 <_raise_r+0x32>
 8008892:	4620      	mov	r0, r4
 8008894:	f000 f830 	bl	80088f8 <_getpid_r>
 8008898:	462a      	mov	r2, r5
 800889a:	4601      	mov	r1, r0
 800889c:	4620      	mov	r0, r4
 800889e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088a2:	f000 b817 	b.w	80088d4 <_kill_r>
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d00a      	beq.n	80088c0 <_raise_r+0x4c>
 80088aa:	1c59      	adds	r1, r3, #1
 80088ac:	d103      	bne.n	80088b6 <_raise_r+0x42>
 80088ae:	2316      	movs	r3, #22
 80088b0:	6003      	str	r3, [r0, #0]
 80088b2:	2001      	movs	r0, #1
 80088b4:	e7e7      	b.n	8008886 <_raise_r+0x12>
 80088b6:	2400      	movs	r4, #0
 80088b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088bc:	4628      	mov	r0, r5
 80088be:	4798      	blx	r3
 80088c0:	2000      	movs	r0, #0
 80088c2:	e7e0      	b.n	8008886 <_raise_r+0x12>

080088c4 <raise>:
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <raise+0xc>)
 80088c6:	4601      	mov	r1, r0
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f7ff bfd3 	b.w	8008874 <_raise_r>
 80088ce:	bf00      	nop
 80088d0:	20000070 	.word	0x20000070

080088d4 <_kill_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d07      	ldr	r5, [pc, #28]	; (80088f4 <_kill_r+0x20>)
 80088d8:	2300      	movs	r3, #0
 80088da:	4604      	mov	r4, r0
 80088dc:	4608      	mov	r0, r1
 80088de:	4611      	mov	r1, r2
 80088e0:	602b      	str	r3, [r5, #0]
 80088e2:	f7fa fb6f 	bl	8002fc4 <_kill>
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	d102      	bne.n	80088f0 <_kill_r+0x1c>
 80088ea:	682b      	ldr	r3, [r5, #0]
 80088ec:	b103      	cbz	r3, 80088f0 <_kill_r+0x1c>
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	bd38      	pop	{r3, r4, r5, pc}
 80088f2:	bf00      	nop
 80088f4:	20000608 	.word	0x20000608

080088f8 <_getpid_r>:
 80088f8:	f7fa bb5c 	b.w	8002fb4 <_getpid>

080088fc <_init>:
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fe:	bf00      	nop
 8008900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008902:	bc08      	pop	{r3}
 8008904:	469e      	mov	lr, r3
 8008906:	4770      	bx	lr

08008908 <_fini>:
 8008908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890a:	bf00      	nop
 800890c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890e:	bc08      	pop	{r3}
 8008910:	469e      	mov	lr, r3
 8008912:	4770      	bx	lr
