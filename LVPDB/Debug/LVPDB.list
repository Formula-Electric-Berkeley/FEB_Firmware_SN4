
LVPDB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  080095c0  080095c0  0000a5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009948  08009948  0000b1f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009948  08009948  0000a948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009950  08009950  0000b1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009950  08009950  0000a950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009954  08009954  0000a954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08009958  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  200001f8  08009b4c  0000b1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  08009b4c  0000b690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001484b  00000000  00000000  0000b224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a85  00000000  00000000  0001fa6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  000224f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6c  00000000  00000000  00023728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230e8  00000000  00000000  00024594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167c4  00000000  00000000  0004767c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db797  00000000  00000000  0005de40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001395d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005db8  00000000  00000000  0013961c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013f3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080095a4 	.word	0x080095a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	080095a4 	.word	0x080095a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c3c:	f000 b96a 	b.w	8000f14 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	460c      	mov	r4, r1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d14e      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c64:	4694      	mov	ip, r2
 8000c66:	458c      	cmp	ip, r1
 8000c68:	4686      	mov	lr, r0
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	d962      	bls.n	8000d36 <__udivmoddi4+0xde>
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0320 	rsb	r3, r2, #32
 8000c76:	4091      	lsls	r1, r2
 8000c78:	fa20 f303 	lsr.w	r3, r0, r3
 8000c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c80:	4319      	orrs	r1, r3
 8000c82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f f68c 	uxth.w	r6, ip
 8000c8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb07 1114 	mls	r1, r7, r4, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb04 f106 	mul.w	r1, r4, r6
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cae:	f080 8112 	bcs.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 810f 	bls.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb8:	3c02      	subs	r4, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a59      	subs	r1, r3, r1
 8000cbe:	fa1f f38e 	uxth.w	r3, lr
 8000cc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f606 	mul.w	r6, r0, r6
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x94>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cde:	f080 80fc 	bcs.w	8000eda <__udivmoddi4+0x282>
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	f240 80f9 	bls.w	8000eda <__udivmoddi4+0x282>
 8000ce8:	4463      	add	r3, ip
 8000cea:	3802      	subs	r0, #2
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	b11d      	cbz	r5, 8000cfe <__udivmoddi4+0xa6>
 8000cf6:	40d3      	lsrs	r3, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d905      	bls.n	8000d12 <__udivmoddi4+0xba>
 8000d06:	b10d      	cbz	r5, 8000d0c <__udivmoddi4+0xb4>
 8000d08:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e7f5      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d12:	fab3 f183 	clz	r1, r3
 8000d16:	2900      	cmp	r1, #0
 8000d18:	d146      	bne.n	8000da8 <__udivmoddi4+0x150>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xcc>
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	f0c0 80f0 	bcc.w	8000f04 <__udivmoddi4+0x2ac>
 8000d24:	1a86      	subs	r6, r0, r2
 8000d26:	eb64 0303 	sbc.w	r3, r4, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d0e6      	beq.n	8000cfe <__udivmoddi4+0xa6>
 8000d30:	e9c5 6300 	strd	r6, r3, [r5]
 8000d34:	e7e3      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	f040 8090 	bne.w	8000e5c <__udivmoddi4+0x204>
 8000d3c:	eba1 040c 	sub.w	r4, r1, ip
 8000d40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d44:	fa1f f78c 	uxth.w	r7, ip
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d52:	fb08 4416 	mls	r4, r8, r6, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb07 f006 	mul.w	r0, r7, r6
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x11c>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x11a>
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	f200 80cd 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d72:	4626      	mov	r6, r4
 8000d74:	1a1c      	subs	r4, r3, r0
 8000d76:	fa1f f38e 	uxth.w	r3, lr
 8000d7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb00 f707 	mul.w	r7, r0, r7
 8000d8a:	429f      	cmp	r7, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x148>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x146>
 8000d98:	429f      	cmp	r7, r3
 8000d9a:	f200 80b0 	bhi.w	8000efe <__udivmoddi4+0x2a6>
 8000d9e:	4620      	mov	r0, r4
 8000da0:	1bdb      	subs	r3, r3, r7
 8000da2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da6:	e7a5      	b.n	8000cf4 <__udivmoddi4+0x9c>
 8000da8:	f1c1 0620 	rsb	r6, r1, #32
 8000dac:	408b      	lsls	r3, r1
 8000dae:	fa22 f706 	lsr.w	r7, r2, r6
 8000db2:	431f      	orrs	r7, r3
 8000db4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dbc:	ea43 030c 	orr.w	r3, r3, ip
 8000dc0:	40f4      	lsrs	r4, r6
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	0c38      	lsrs	r0, r7, #16
 8000dc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dcc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dd0:	fa1f fc87 	uxth.w	ip, r7
 8000dd4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ddc:	fb0e f90c 	mul.w	r9, lr, ip
 8000de0:	45a1      	cmp	r9, r4
 8000de2:	fa02 f201 	lsl.w	r2, r2, r1
 8000de6:	d90a      	bls.n	8000dfe <__udivmoddi4+0x1a6>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dee:	f080 8084 	bcs.w	8000efa <__udivmoddi4+0x2a2>
 8000df2:	45a1      	cmp	r9, r4
 8000df4:	f240 8081 	bls.w	8000efa <__udivmoddi4+0x2a2>
 8000df8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	eba4 0409 	sub.w	r4, r4, r9
 8000e02:	fa1f f983 	uxth.w	r9, r3
 8000e06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e16:	45a4      	cmp	ip, r4
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x1d2>
 8000e1a:	193c      	adds	r4, r7, r4
 8000e1c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e20:	d267      	bcs.n	8000ef2 <__udivmoddi4+0x29a>
 8000e22:	45a4      	cmp	ip, r4
 8000e24:	d965      	bls.n	8000ef2 <__udivmoddi4+0x29a>
 8000e26:	3b02      	subs	r3, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e32:	eba4 040c 	sub.w	r4, r4, ip
 8000e36:	429c      	cmp	r4, r3
 8000e38:	46ce      	mov	lr, r9
 8000e3a:	469c      	mov	ip, r3
 8000e3c:	d351      	bcc.n	8000ee2 <__udivmoddi4+0x28a>
 8000e3e:	d04e      	beq.n	8000ede <__udivmoddi4+0x286>
 8000e40:	b155      	cbz	r5, 8000e58 <__udivmoddi4+0x200>
 8000e42:	ebb8 030e 	subs.w	r3, r8, lr
 8000e46:	eb64 040c 	sbc.w	r4, r4, ip
 8000e4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4e:	40cb      	lsrs	r3, r1
 8000e50:	431e      	orrs	r6, r3
 8000e52:	40cc      	lsrs	r4, r1
 8000e54:	e9c5 6400 	strd	r6, r4, [r5]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	e750      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f103 	lsr.w	r1, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	fa24 f303 	lsr.w	r3, r4, r3
 8000e6c:	4094      	lsls	r4, r2
 8000e6e:	430c      	orrs	r4, r1
 8000e70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e78:	fa1f f78c 	uxth.w	r7, ip
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3110 	mls	r1, r8, r0, r3
 8000e84:	0c23      	lsrs	r3, r4, #16
 8000e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8a:	fb00 f107 	mul.w	r1, r0, r7
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x24c>
 8000e92:	eb1c 0303 	adds.w	r3, ip, r3
 8000e96:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e9a:	d22c      	bcs.n	8000ef6 <__udivmoddi4+0x29e>
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	d92a      	bls.n	8000ef6 <__udivmoddi4+0x29e>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eac:	fb08 3311 	mls	r3, r8, r1, r3
 8000eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb4:	fb01 f307 	mul.w	r3, r1, r7
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x276>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ec4:	d213      	bcs.n	8000eee <__udivmoddi4+0x296>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d911      	bls.n	8000eee <__udivmoddi4+0x296>
 8000eca:	3902      	subs	r1, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	1ae4      	subs	r4, r4, r3
 8000ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ed4:	e739      	b.n	8000d4a <__udivmoddi4+0xf2>
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	e6f0      	b.n	8000cbc <__udivmoddi4+0x64>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e706      	b.n	8000cec <__udivmoddi4+0x94>
 8000ede:	45c8      	cmp	r8, r9
 8000ee0:	d2ae      	bcs.n	8000e40 <__udivmoddi4+0x1e8>
 8000ee2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ee6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eea:	3801      	subs	r0, #1
 8000eec:	e7a8      	b.n	8000e40 <__udivmoddi4+0x1e8>
 8000eee:	4631      	mov	r1, r6
 8000ef0:	e7ed      	b.n	8000ece <__udivmoddi4+0x276>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	e799      	b.n	8000e2a <__udivmoddi4+0x1d2>
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	e7d4      	b.n	8000ea4 <__udivmoddi4+0x24c>
 8000efa:	46d6      	mov	lr, sl
 8000efc:	e77f      	b.n	8000dfe <__udivmoddi4+0x1a6>
 8000efe:	4463      	add	r3, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e74d      	b.n	8000da0 <__udivmoddi4+0x148>
 8000f04:	4606      	mov	r6, r0
 8000f06:	4623      	mov	r3, r4
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e70f      	b.n	8000d2c <__udivmoddi4+0xd4>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	4463      	add	r3, ip
 8000f10:	e730      	b.n	8000d74 <__udivmoddi4+0x11c>
 8000f12:	bf00      	nop

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <FEB_CAN_Init>:
// Rx callback function
static void (*FEB_CAN_Rx_Callback)(CAN_RxHeaderTypeDef *, void *);

// **************************************** Functions ****************************************

void FEB_CAN_Init(void (*CAN_Callback)(CAN_RxHeaderTypeDef *, void *)) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	FEB_CAN_Filter_Config();
 8000f20:	f000 f812 	bl	8000f48 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000f24:	4806      	ldr	r0, [pc, #24]	@ (8000f40 <FEB_CAN_Init+0x28>)
 8000f26:	f002 f9df 	bl	80032e8 <HAL_CAN_Start>
        // Code Error - Shutdown
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <FEB_CAN_Init+0x28>)
 8000f2e:	f002 fc46 	bl	80037be <HAL_CAN_ActivateNotification>

	}

	FEB_CAN_Rx_Callback = CAN_Callback;
 8000f32:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <FEB_CAN_Init+0x2c>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000430 	.word	0x20000430
 8000f44:	2000025c 	.word	0x2000025c

08000f48 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	71fb      	strb	r3, [r7, #7]
	filter_bank = FEB_CAN_Filter(&hcan1, CAN_RX_FIFO0, filter_bank);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	461a      	mov	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	4804      	ldr	r0, [pc, #16]	@ (8000f6c <FEB_CAN_Filter_Config+0x24>)
 8000f5a:	f000 f809 	bl	8000f70 <FEB_CAN_Filter>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
//	filter_bank = FEB_CAN_ICS_Filter(&hcan1, CAN_RX_FIFO0, filter_bank);
	// Assign Filter
    // filter_bank = Function(&hcan2, CAN_RX_FIFO0, filter_bank);
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000430 	.word	0x20000430

08000f70 <FEB_CAN_Filter>:

uint8_t FEB_CAN_Filter(CAN_HandleTypeDef *hcan, unsigned char FIFO_assignment, uint8_t filter_bank) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	@ 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	70bb      	strb	r3, [r7, #2]
    // For multiple filters, create array of filter IDs and loop over IDs.

	CAN_FilterTypeDef filter_config;

    // Standard CAN - 2.0A - 11 bit
    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter_config.FilterBank = filter_bank;
 8000f84:	78bb      	ldrb	r3, [r7, #2]
 8000f86:	61fb      	str	r3, [r7, #28]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	61bb      	str	r3, [r7, #24]
	filter_config.FilterIdHigh = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
	filter_config.FilterIdLow = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
	filter_config.FilterMaskIdHigh = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
	filter_config.FilterMaskIdLow = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
	filter_config.SlaveStartFilterBank = 27;
 8000fa4:	231b      	movs	r3, #27
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    filter_bank++;
 8000fa8:	78bb      	ldrb	r3, [r7, #2]
 8000faa:	3301      	adds	r3, #1
 8000fac:	70bb      	strb	r3, [r7, #2]

	if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f002 f8b7 	bl	8003128 <HAL_CAN_ConfigFilter>
        // Code Error - Shutdown
	}

	return filter_bank;
 8000fba:	78bb      	ldrb	r3, [r7, #2]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3730      	adds	r7, #48	@ 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FEB_CAN_Rx_Header, FEB_CAN_Rx_Data) == HAL_OK) {
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000fce:	4a09      	ldr	r2, [pc, #36]	@ (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f002 fad1 	bl	800357a <HAL_CAN_GetRxMessage>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d104      	bne.n	8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>

		FEB_CAN_Rx_Callback(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4903      	ldr	r1, [pc, #12]	@ (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000fe4:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000fe6:	4798      	blx	r3
//		data.flags &= 0xF0FFFFFF;
//		data.flags |= ((uint32_t)id + 8) << 24;
//
//		FEB_CAN_Transmit(hcan, &data);
	}
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000250 	.word	0x20000250
 8000ff4:	2000022c 	.word	0x2000022c
 8000ff8:	2000025c 	.word	0x2000025c

08000ffc <FEB_CAN_Transmit>:

void FEB_CAN_Transmit(CAN_HandleTypeDef *hcan, FEB_LVPDB_CAN_Data *can_data) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
	uint8_t packetCount = (can_data->flags >> 24) & 0x000F;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	0e1b      	lsrs	r3, r3, #24
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	73fb      	strb	r3, [r7, #15]

	// Initialize Transmission Header
	FEB_CAN_Tx_Header.StdId = can_data->ids[packetCount];
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	3306      	adds	r3, #6
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	4a12      	ldr	r2, [pc, #72]	@ (800106c <FEB_CAN_Transmit+0x70>)
 8001022:	6013      	str	r3, [r2, #0]
	FEB_CAN_Tx_Header.IDE = CAN_ID_STD;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <FEB_CAN_Transmit+0x70>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <FEB_CAN_Transmit+0x70>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.DLC = 8;
 8001030:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <FEB_CAN_Transmit+0x70>)
 8001032:	2208      	movs	r2, #8
 8001034:	611a      	str	r2, [r3, #16]

	// Configure FEB_CAN_Tx_Data
    memcpy(FEB_CAN_Tx_Data, ((uint8_t *)(&can_data->flags) + (packetCount * 8)), 8);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	00d2      	lsls	r2, r2, #3
 800103e:	441a      	add	r2, r3
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <FEB_CAN_Transmit+0x74>)
 8001042:	6810      	ldr	r0, [r2, #0]
 8001044:	6851      	ldr	r1, [r2, #4]
 8001046:	c303      	stmia	r3!, {r0, r1}

    // Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 8001048:	bf00      	nop
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f002 fa60 	bl	8003510 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f9      	beq.n	800104a <FEB_CAN_Transmit+0x4e>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <FEB_CAN_Transmit+0x78>)
 8001058:	4a05      	ldr	r2, [pc, #20]	@ (8001070 <FEB_CAN_Transmit+0x74>)
 800105a:	4904      	ldr	r1, [pc, #16]	@ (800106c <FEB_CAN_Transmit+0x70>)
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f002 f987 	bl	8003370 <HAL_CAN_AddTxMessage>
		// Code Error - Shutdown
	}
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000214 	.word	0x20000214
 8001070:	20000248 	.word	0x20000248
 8001074:	20000258 	.word	0x20000258

08001078 <FEB_Main_Setup>:
uint16_t tps2482_bus_voltage[NUM_TPS2482];
double tps2482_shunt_voltage[NUM_TPS2482];

FEB_LVPDB_CAN_Data can_data;

void FEB_Main_Setup(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	@ 0x30
 800107c:	af02      	add	r7, sp, #8
	FEB_Variable_Init();
 800107e:	f000 fbb5 	bl	80017ec <FEB_Variable_Init>

	FEB_CAN_Init(FEB_CAN1_Rx_Callback);
 8001082:	4853      	ldr	r0, [pc, #332]	@ (80011d0 <FEB_Main_Setup+0x158>)
 8001084:	f7ff ff48 	bl	8000f18 <FEB_CAN_Init>

#if !TESTBENCH

	bool tps2482_en_res[NUM_TPS2482 - 1];
	bool tps2482_en_success = false;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	GPIO_PinState tps2482_pg_res[NUM_TPS2482];
	bool tps2482_pg_success = false;
 800108e:	2300      	movs	r3, #0
 8001090:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	int maxiter = 0; // Safety in case of infinite while
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]

	while ( !tps2482_en_success || !tps2482_pg_success ) {
 8001098:	e047      	b.n	800112a <FEB_Main_Setup+0xb2>
		if ( maxiter > 100 ) {
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	2b64      	cmp	r3, #100	@ 0x64
 800109e:	dc53      	bgt.n	8001148 <FEB_Main_Setup+0xd0>
			break; // Todo add failure case
		}

		// Assume successful enable
		bool b1 = true;
 80010a0:	2301      	movs	r3, #1
 80010a2:	77fb      	strb	r3, [r7, #31]
		bool b2 = true;
 80010a4:	2301      	movs	r3, #1
 80010a6:	77bb      	strb	r3, [r7, #30]

		TPS2482_Enable(tps2482_en_ports, tps2482_en_pins, tps2482_en_res, NUM_TPS2482 - 1);
 80010a8:	f107 0210 	add.w	r2, r7, #16
 80010ac:	2307      	movs	r3, #7
 80010ae:	4949      	ldr	r1, [pc, #292]	@ (80011d4 <FEB_Main_Setup+0x15c>)
 80010b0:	4849      	ldr	r0, [pc, #292]	@ (80011d8 <FEB_Main_Setup+0x160>)
 80010b2:	f001 f9db 	bl	800246c <TPS2482_Enable>
		TPS2482_GPIO_Read(tps2482_pg_ports, tps2482_pg_pins, tps2482_pg_res, NUM_TPS2482);
 80010b6:	f107 0208 	add.w	r2, r7, #8
 80010ba:	2308      	movs	r3, #8
 80010bc:	4947      	ldr	r1, [pc, #284]	@ (80011dc <FEB_Main_Setup+0x164>)
 80010be:	4848      	ldr	r0, [pc, #288]	@ (80011e0 <FEB_Main_Setup+0x168>)
 80010c0:	f001 f9ad 	bl	800241e <TPS2482_GPIO_Read>

		for ( uint8_t i = 0; i < NUM_TPS2482 - 1; i++ ) {
 80010c4:	2300      	movs	r3, #0
 80010c6:	777b      	strb	r3, [r7, #29]
 80010c8:	e00e      	b.n	80010e8 <FEB_Main_Setup+0x70>
			// If any don't enable properly b will be false and thus loop continues
			b1 &= tps2482_en_res[i];
 80010ca:	7ffb      	ldrb	r3, [r7, #31]
 80010cc:	7f7a      	ldrb	r2, [r7, #29]
 80010ce:	3228      	adds	r2, #40	@ 0x28
 80010d0:	443a      	add	r2, r7
 80010d2:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf14      	ite	ne
 80010dc:	2301      	movne	r3, #1
 80010de:	2300      	moveq	r3, #0
 80010e0:	77fb      	strb	r3, [r7, #31]
		for ( uint8_t i = 0; i < NUM_TPS2482 - 1; i++ ) {
 80010e2:	7f7b      	ldrb	r3, [r7, #29]
 80010e4:	3301      	adds	r3, #1
 80010e6:	777b      	strb	r3, [r7, #29]
 80010e8:	7f7b      	ldrb	r3, [r7, #29]
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d9ed      	bls.n	80010ca <FEB_Main_Setup+0x52>
		}

		for ( uint8_t i = 0; i < NUM_TPS2482; i++ ) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	773b      	strb	r3, [r7, #28]
 80010f2:	e00e      	b.n	8001112 <FEB_Main_Setup+0x9a>
			// If any don't power up properly b will be false and thus loop continues
			b2 &= tps2482_pg_res[i];
 80010f4:	7fbb      	ldrb	r3, [r7, #30]
 80010f6:	7f3a      	ldrb	r2, [r7, #28]
 80010f8:	3228      	adds	r2, #40	@ 0x28
 80010fa:	443a      	add	r2, r7
 80010fc:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf14      	ite	ne
 8001106:	2301      	movne	r3, #1
 8001108:	2300      	moveq	r3, #0
 800110a:	77bb      	strb	r3, [r7, #30]
		for ( uint8_t i = 0; i < NUM_TPS2482; i++ ) {
 800110c:	7f3b      	ldrb	r3, [r7, #28]
 800110e:	3301      	adds	r3, #1
 8001110:	773b      	strb	r3, [r7, #28]
 8001112:	7f3b      	ldrb	r3, [r7, #28]
 8001114:	2b07      	cmp	r3, #7
 8001116:	d9ed      	bls.n	80010f4 <FEB_Main_Setup+0x7c>
		}

		tps2482_en_success = b1;
 8001118:	7ffb      	ldrb	r3, [r7, #31]
 800111a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		tps2482_pg_success = b2;
 800111e:	7fbb      	ldrb	r3, [r7, #30]
 8001120:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		maxiter += 1;
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	3301      	adds	r3, #1
 8001128:	623b      	str	r3, [r7, #32]
	while ( !tps2482_en_success || !tps2482_pg_success ) {
 800112a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1b0      	bne.n	800109a <FEB_Main_Setup+0x22>
 8001138:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800113c:	f083 0301 	eor.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1a9      	bne.n	800109a <FEB_Main_Setup+0x22>
 8001146:	e000      	b.n	800114a <FEB_Main_Setup+0xd2>
			break; // Todo add failure case
 8001148:	bf00      	nop
	}

	bool tps2482_init_res[NUM_TPS2482];
	bool tps2482_init_success = false;
 800114a:	2300      	movs	r3, #0
 800114c:	76fb      	strb	r3, [r7, #27]
	maxiter = 0; // Safety in case of infinite while
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]

	while ( !tps2482_init_success ) {
 8001152:	e028      	b.n	80011a6 <FEB_Main_Setup+0x12e>
		if ( maxiter > 100 ) {
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	2b64      	cmp	r3, #100	@ 0x64
 8001158:	dc2c      	bgt.n	80011b4 <FEB_Main_Setup+0x13c>
			break; // Todo add failure case
		}

		// Assume successful init
		bool b = 0x01;
 800115a:	2301      	movs	r3, #1
 800115c:	76bb      	strb	r3, [r7, #26]

		TPS2482_Init(&hi2c1, tps2482_i2c_addresses, tps2482_configurations, tps2482_ids, tps2482_init_res, NUM_TPS2482);
 800115e:	2308      	movs	r3, #8
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	463b      	mov	r3, r7
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <FEB_Main_Setup+0x16c>)
 8001168:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <FEB_Main_Setup+0x170>)
 800116a:	4920      	ldr	r1, [pc, #128]	@ (80011ec <FEB_Main_Setup+0x174>)
 800116c:	4820      	ldr	r0, [pc, #128]	@ (80011f0 <FEB_Main_Setup+0x178>)
 800116e:	f000 fcbb 	bl	8001ae8 <TPS2482_Init>

		for ( uint8_t i = 0; i < NUM_TPS2482; i++ ) {
 8001172:	2300      	movs	r3, #0
 8001174:	767b      	strb	r3, [r7, #25]
 8001176:	e00e      	b.n	8001196 <FEB_Main_Setup+0x11e>
			// If any don't enable properly b will be false and thus loop continues
			b &= tps2482_init_res[i];
 8001178:	7ebb      	ldrb	r3, [r7, #26]
 800117a:	7e7a      	ldrb	r2, [r7, #25]
 800117c:	3228      	adds	r2, #40	@ 0x28
 800117e:	443a      	add	r2, r7
 8001180:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8001184:	4013      	ands	r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	bf14      	ite	ne
 800118a:	2301      	movne	r3, #1
 800118c:	2300      	moveq	r3, #0
 800118e:	76bb      	strb	r3, [r7, #26]
		for ( uint8_t i = 0; i < NUM_TPS2482; i++ ) {
 8001190:	7e7b      	ldrb	r3, [r7, #25]
 8001192:	3301      	adds	r3, #1
 8001194:	767b      	strb	r3, [r7, #25]
 8001196:	7e7b      	ldrb	r3, [r7, #25]
 8001198:	2b07      	cmp	r3, #7
 800119a:	d9ed      	bls.n	8001178 <FEB_Main_Setup+0x100>
		}

		tps2482_init_success = b;
 800119c:	7ebb      	ldrb	r3, [r7, #26]
 800119e:	76fb      	strb	r3, [r7, #27]
		maxiter += 1;
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	3301      	adds	r3, #1
 80011a4:	623b      	str	r3, [r7, #32]
	while ( !tps2482_init_success ) {
 80011a6:	7efb      	ldrb	r3, [r7, #27]
 80011a8:	f083 0301 	eor.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1d0      	bne.n	8001154 <FEB_Main_Setup+0xdc>
 80011b2:	e000      	b.n	80011b6 <FEB_Main_Setup+0x13e>
			break; // Todo add failure case
 80011b4:	bf00      	nop
	}

	// Initialize brake light to be off
	HAL_GPIO_WritePin(BL_SWITCH_GPIO_Port, BL_SWITCH_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2102      	movs	r1, #2
 80011ba:	480e      	ldr	r0, [pc, #56]	@ (80011f4 <FEB_Main_Setup+0x17c>)
 80011bc:	f003 f812 	bl	80041e4 <HAL_GPIO_WritePin>

#endif

	HAL_TIM_Base_Start_IT(&htim1);
 80011c0:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <FEB_Main_Setup+0x180>)
 80011c2:	f004 fe85 	bl	8005ed0 <HAL_TIM_Base_Start_IT>
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	@ 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	08001289 	.word	0x08001289
 80011d4:	200002d4 	.word	0x200002d4
 80011d8:	200002b8 	.word	0x200002b8
 80011dc:	20000304 	.word	0x20000304
 80011e0:	200002e4 	.word	0x200002e4
 80011e4:	20000268 	.word	0x20000268
 80011e8:	20000278 	.word	0x20000278
 80011ec:	20000260 	.word	0x20000260
 80011f0:	20000458 	.word	0x20000458
 80011f4:	40020000 	.word	0x40020000
 80011f8:	200004ac 	.word	0x200004ac

080011fc <FEB_Main_Loop>:

void FEB_Main_Loop(void) {
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
	else {
		HAL_GPIO_WritePin(RF_EN_GPIO_Port, RF_EN_Pin, GPIO_PIN_RESET);
	} */

	// Todo add alert and pg monitoring
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <FEB_1ms_Callback>:

void FEB_1ms_Callback(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
#if !TESTBENCH

	TPS2482_Poll_Current(&hi2c1, tps2482_i2c_addresses, tps2482_current_raw, NUM_TPS2482);
 8001212:	2308      	movs	r3, #8
 8001214:	4a16      	ldr	r2, [pc, #88]	@ (8001270 <FEB_1ms_Callback+0x64>)
 8001216:	4917      	ldr	r1, [pc, #92]	@ (8001274 <FEB_1ms_Callback+0x68>)
 8001218:	4817      	ldr	r0, [pc, #92]	@ (8001278 <FEB_1ms_Callback+0x6c>)
 800121a:	f000 ffbf 	bl	800219c <TPS2482_Poll_Current>
	TPS2482_Poll_Bus_Voltage(&hi2c1, tps2482_i2c_addresses, tps2482_bus_voltage_raw, NUM_TPS2482);
 800121e:	2308      	movs	r3, #8
 8001220:	4a16      	ldr	r2, [pc, #88]	@ (800127c <FEB_1ms_Callback+0x70>)
 8001222:	4914      	ldr	r1, [pc, #80]	@ (8001274 <FEB_1ms_Callback+0x68>)
 8001224:	4814      	ldr	r0, [pc, #80]	@ (8001278 <FEB_1ms_Callback+0x6c>)
 8001226:	f000 ffa6 	bl	8002176 <TPS2482_Poll_Bus_Voltage>
//	TPS2482_Poll_Shunt_Voltage(&hi2c1, tps2482_i2c_addresses, tps2482_shunt_voltage_raw, NUM_TPS2482);

	FEB_Variable_Conversion();
 800122a:	f000 f8dd 	bl	80013e8 <FEB_Variable_Conversion>

	FEB_Compose_CAN_Data();
 800122e:	f000 f84b 	bl	80012c8 <FEB_Compose_CAN_Data>

	for ( uint8_t i = 0; i < 3; i++ ) {
 8001232:	2300      	movs	r3, #0
 8001234:	71fb      	strb	r3, [r7, #7]
 8001236:	e013      	b.n	8001260 <FEB_1ms_Callback+0x54>
		can_data.flags &= 0xF0FFFFFF;
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <FEB_1ms_Callback+0x74>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001240:	4a0f      	ldr	r2, [pc, #60]	@ (8001280 <FEB_1ms_Callback+0x74>)
 8001242:	6053      	str	r3, [r2, #4]
		can_data.flags |= ((uint32_t)i) << 24;
 8001244:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <FEB_1ms_Callback+0x74>)
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	061b      	lsls	r3, r3, #24
 800124c:	4313      	orrs	r3, r2
 800124e:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <FEB_1ms_Callback+0x74>)
 8001250:	6053      	str	r3, [r2, #4]
		FEB_CAN_Transmit(&hcan1, &can_data);
 8001252:	490b      	ldr	r1, [pc, #44]	@ (8001280 <FEB_1ms_Callback+0x74>)
 8001254:	480b      	ldr	r0, [pc, #44]	@ (8001284 <FEB_1ms_Callback+0x78>)
 8001256:	f7ff fed1 	bl	8000ffc <FEB_CAN_Transmit>
	for ( uint8_t i = 0; i < 3; i++ ) {
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	3301      	adds	r3, #1
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d9e8      	bls.n	8001238 <FEB_1ms_Callback+0x2c>
	HAL_UART_Transmit(&huart2, (const uint8_t *)buf, len, HAL_MAX_DELAY);

	#endif

#endif
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000344 	.word	0x20000344
 8001274:	20000260 	.word	0x20000260
 8001278:	20000458 	.word	0x20000458
 800127c:	20000354 	.word	0x20000354
 8001280:	20000400 	.word	0x20000400
 8001284:	20000430 	.word	0x20000430

08001288 <FEB_CAN1_Rx_Callback>:

void FEB_CAN1_Rx_Callback(CAN_RxHeaderTypeDef *rx_header, void *data) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	data = (char *)data;

	if ( rx_header->StdId == FEB_CAN_NORMALIZED_BRAKE_FRAME_ID ) {
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b05      	cmp	r3, #5
 8001298:	d110      	bne.n	80012bc <FEB_CAN1_Rx_Callback+0x34>
		uint8_t brake_pressure = *((uint8_t *)data);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	73fb      	strb	r3, [r7, #15]

		if ( brake_pressure > FEB_BREAK_THRESHOLD ) {
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	2b0a      	cmp	r3, #10
 80012a4:	d905      	bls.n	80012b2 <FEB_CAN1_Rx_Callback+0x2a>
			HAL_GPIO_WritePin(BL_SWITCH_GPIO_Port, BL_SWITCH_Pin, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2102      	movs	r1, #2
 80012aa:	4806      	ldr	r0, [pc, #24]	@ (80012c4 <FEB_CAN1_Rx_Callback+0x3c>)
 80012ac:	f002 ff9a 	bl	80041e4 <HAL_GPIO_WritePin>
		#endif
	}

#endif

}
 80012b0:	e004      	b.n	80012bc <FEB_CAN1_Rx_Callback+0x34>
			HAL_GPIO_WritePin(BL_SWITCH_GPIO_Port, BL_SWITCH_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2102      	movs	r1, #2
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <FEB_CAN1_Rx_Callback+0x3c>)
 80012b8:	f002 ff94 	bl	80041e4 <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40020000 	.word	0x40020000

080012c8 <FEB_Compose_CAN_Data>:

static void FEB_Compose_CAN_Data(void) {
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	memset(&can_data, 0, sizeof(FEB_LVPDB_CAN_Data));
 80012cc:	2230      	movs	r2, #48	@ 0x30
 80012ce:	2100      	movs	r1, #0
 80012d0:	480d      	ldr	r0, [pc, #52]	@ (8001308 <FEB_Compose_CAN_Data+0x40>)
 80012d2:	f006 fa01 	bl	80076d8 <memset>

	can_data.ids[0] = FEB_CAN_FEB_LVPDB_FLAGS_BUS_VOLTAGE_LV_CURRENT_FRAME_ID;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <FEB_Compose_CAN_Data+0x40>)
 80012d8:	2202      	movs	r2, #2
 80012da:	61da      	str	r2, [r3, #28]
	can_data.ids[1] = FEB_CAN_FEB_LVPDB_CP_AF_RF_SH_CURRENT_FRAME_ID;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <FEB_Compose_CAN_Data+0x40>)
 80012de:	2203      	movs	r2, #3
 80012e0:	621a      	str	r2, [r3, #32]
	can_data.ids[2] = FEB_CAN_FEB_LVPDB_L_AS_AB_CURRENT_FRAME_ID;
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <FEB_Compose_CAN_Data+0x40>)
 80012e4:	2204      	movs	r2, #4
 80012e6:	625a      	str	r2, [r3, #36]	@ 0x24

#if !TESTBENCH
	can_data.bus_voltage = tps2482_bus_voltage[0];
 80012e8:	4b08      	ldr	r3, [pc, #32]	@ (800130c <FEB_Compose_CAN_Data+0x44>)
 80012ea:	881a      	ldrh	r2, [r3, #0]
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <FEB_Compose_CAN_Data+0x40>)
 80012ee:	811a      	strh	r2, [r3, #8]

	memcpy(&can_data.lv_current, tps2482_current, NUM_TPS2482 * sizeof(uint16_t));
 80012f0:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <FEB_Compose_CAN_Data+0x40>)
 80012f2:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <FEB_Compose_CAN_Data+0x48>)
 80012f4:	f103 040a 	add.w	r4, r3, #10
 80012f8:	4615      	mov	r5, r2
 80012fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fc:	6020      	str	r0, [r4, #0]
 80012fe:	6061      	str	r1, [r4, #4]
 8001300:	60a2      	str	r2, [r4, #8]
 8001302:	60e3      	str	r3, [r4, #12]
#endif
}
 8001304:	bf00      	nop
 8001306:	bdb0      	pop	{r4, r5, r7, pc}
 8001308:	20000400 	.word	0x20000400
 800130c:	200003ac 	.word	0x200003ac
 8001310:	2000039c 	.word	0x2000039c

08001314 <FEB_Current_IIR>:

#define ADC_FILTER_EXPONENT 2

static void FEB_Current_IIR(int16_t *data_in, int16_t *data_out, int32_t *filters, \
											uint8_t length, bool *filter_initialized) {
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	@ 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	70fb      	strb	r3, [r7, #3]
	int16_t *dest = data_out;
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	61bb      	str	r3, [r7, #24]
	int32_t *dest_filters = filters;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	617b      	str	r3, [r7, #20]

	for ( uint8_t i = 0; i < length; i++ ) {
 800132a:	2300      	movs	r3, #0
 800132c:	77fb      	strb	r3, [r7, #31]
 800132e:	e04e      	b.n	80013ce <FEB_Current_IIR+0xba>
		if ( !filter_initialized[i] ) {
 8001330:	7ffb      	ldrb	r3, [r7, #31]
 8001332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f083 0301 	eor.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d01d      	beq.n	800137e <FEB_Current_IIR+0x6a>
			dest_filters[i] = data_in[i] << ADC_FILTER_EXPONENT;
 8001342:	7ffb      	ldrb	r3, [r7, #31]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	4413      	add	r3, r2
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	4619      	mov	r1, r3
 8001350:	7ffb      	ldrb	r3, [r7, #31]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	4413      	add	r3, r2
 8001358:	008a      	lsls	r2, r1, #2
 800135a:	601a      	str	r2, [r3, #0]
			dest[i] = data_in[i];
 800135c:	7ffb      	ldrb	r3, [r7, #31]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	441a      	add	r2, r3
 8001364:	7ffb      	ldrb	r3, [r7, #31]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	69b9      	ldr	r1, [r7, #24]
 800136a:	440b      	add	r3, r1
 800136c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001370:	801a      	strh	r2, [r3, #0]
			filter_initialized[i] = true;
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001376:	4413      	add	r3, r2
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e024      	b.n	80013c8 <FEB_Current_IIR+0xb4>
		}
		else {
			dest_filters[i] += data_in[i] - (dest_filters[i] >>  ADC_FILTER_EXPONENT);
 800137e:	7ffb      	ldrb	r3, [r7, #31]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4413      	add	r3, r2
 8001386:	6819      	ldr	r1, [r3, #0]
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001394:	4618      	mov	r0, r3
 8001396:	7ffb      	ldrb	r3, [r7, #31]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4413      	add	r3, r2
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	109b      	asrs	r3, r3, #2
 80013a2:	1ac2      	subs	r2, r0, r3
 80013a4:	7ffb      	ldrb	r3, [r7, #31]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	6978      	ldr	r0, [r7, #20]
 80013aa:	4403      	add	r3, r0
 80013ac:	440a      	add	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
			dest[i] = dest_filters[i] >> ADC_FILTER_EXPONENT;
 80013b0:	7ffb      	ldrb	r3, [r7, #31]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	4413      	add	r3, r2
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	1099      	asrs	r1, r3, #2
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4413      	add	r3, r2
 80013c4:	b20a      	sxth	r2, r1
 80013c6:	801a      	strh	r2, [r3, #0]
	for ( uint8_t i = 0; i < length; i++ ) {
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
 80013ca:	3301      	adds	r3, #1
 80013cc:	77fb      	strb	r3, [r7, #31]
 80013ce:	7ffa      	ldrb	r2, [r7, #31]
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3ac      	bcc.n	8001330 <FEB_Current_IIR+0x1c>
		}
	}
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3724      	adds	r7, #36	@ 0x24
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	0000      	movs	r0, r0
	...

080013e8 <FEB_Variable_Conversion>:

static void FEB_Variable_Conversion(void) {
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af02      	add	r7, sp, #8
	for ( uint8_t i = 0; i < NUM_TPS2482; i++ ) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	e023      	b.n	800143c <FEB_Variable_Conversion+0x54>
		tps2482_bus_voltage[i] = FLOAT_TO_UINT16_T(tps2482_bus_voltage_raw[i] * TPS2482_CONV_VBUS);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4aa6      	ldr	r2, [pc, #664]	@ (8001690 <FEB_Variable_Conversion+0x2a8>)
 80013f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f8b1 	bl	8000564 <__aeabi_i2d>
 8001402:	a399      	add	r3, pc, #612	@ (adr r3, 8001668 <FEB_Variable_Conversion+0x280>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff f916 	bl	8000638 <__aeabi_dmul>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b9e      	ldr	r3, [pc, #632]	@ (8001694 <FEB_Variable_Conversion+0x2ac>)
 800141a:	f7ff f90d 	bl	8000638 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	79fc      	ldrb	r4, [r7, #7]
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fbde 	bl	8000be8 <__aeabi_d2uiz>
 800142c:	4603      	mov	r3, r0
 800142e:	b29a      	uxth	r2, r3
 8001430:	4b99      	ldr	r3, [pc, #612]	@ (8001698 <FEB_Variable_Conversion+0x2b0>)
 8001432:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for ( uint8_t i = 0; i < NUM_TPS2482; i++ ) {
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	3301      	adds	r3, #1
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b07      	cmp	r3, #7
 8001440:	d9d8      	bls.n	80013f4 <FEB_Variable_Conversion+0xc>
//		tps2482_shunt_voltage[i] = (SIGN_MAGNITUDE(tps2482_shunt_voltage_raw[i]) * TPS2482_CONV_VSHUNT);
	}

	tps2482_current[0] = FLOAT_TO_INT16_T(SIGN_MAGNITUDE(tps2482_current_raw[0]) * LV_CURRENT_LSB);
 8001442:	4b96      	ldr	r3, [pc, #600]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	0bdb      	lsrs	r3, r3, #15
 8001448:	b29b      	uxth	r3, r3
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <FEB_Variable_Conversion+0x82>
 8001452:	4b92      	ldr	r3, [pc, #584]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800145a:	b29b      	uxth	r3, r3
 800145c:	425b      	negs	r3, r3
 800145e:	b29b      	uxth	r3, r3
 8001460:	b21b      	sxth	r3, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f87e 	bl	8000564 <__aeabi_i2d>
 8001468:	e006      	b.n	8001478 <FEB_Variable_Conversion+0x90>
 800146a:	4b8c      	ldr	r3, [pc, #560]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f876 	bl	8000564 <__aeabi_i2d>
 8001478:	a37d      	add	r3, pc, #500	@ (adr r3, 8001670 <FEB_Variable_Conversion+0x288>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f8db 	bl	8000638 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b81      	ldr	r3, [pc, #516]	@ (8001694 <FEB_Variable_Conversion+0x2ac>)
 8001490:	f7ff f8d2 	bl	8000638 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fb7c 	bl	8000b98 <__aeabi_d2iz>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b7e      	ldr	r3, [pc, #504]	@ (80016a0 <FEB_Variable_Conversion+0x2b8>)
 80014a6:	801a      	strh	r2, [r3, #0]
	tps2482_current[1] = FLOAT_TO_INT16_T(SIGN_MAGNITUDE(tps2482_current_raw[1]) * CP_CURRENT_LSB);
 80014a8:	4b7c      	ldr	r3, [pc, #496]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 80014aa:	885b      	ldrh	r3, [r3, #2]
 80014ac:	0bdb      	lsrs	r3, r3, #15
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00b      	beq.n	80014d0 <FEB_Variable_Conversion+0xe8>
 80014b8:	4b78      	ldr	r3, [pc, #480]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 80014ba:	885b      	ldrh	r3, [r3, #2]
 80014bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	425b      	negs	r3, r3
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f84b 	bl	8000564 <__aeabi_i2d>
 80014ce:	e006      	b.n	80014de <FEB_Variable_Conversion+0xf6>
 80014d0:	4b72      	ldr	r3, [pc, #456]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 80014d2:	885b      	ldrh	r3, [r3, #2]
 80014d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f843 	bl	8000564 <__aeabi_i2d>
 80014de:	a366      	add	r3, pc, #408	@ (adr r3, 8001678 <FEB_Variable_Conversion+0x290>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f8a8 	bl	8000638 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b67      	ldr	r3, [pc, #412]	@ (8001694 <FEB_Variable_Conversion+0x2ac>)
 80014f6:	f7ff f89f 	bl	8000638 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff fb49 	bl	8000b98 <__aeabi_d2iz>
 8001506:	4603      	mov	r3, r0
 8001508:	b21a      	sxth	r2, r3
 800150a:	4b65      	ldr	r3, [pc, #404]	@ (80016a0 <FEB_Variable_Conversion+0x2b8>)
 800150c:	805a      	strh	r2, [r3, #2]
	tps2482_current[2] = FLOAT_TO_INT16_T(SIGN_MAGNITUDE(tps2482_current_raw[2]) * AF_CURRENT_LSB);
 800150e:	4b63      	ldr	r3, [pc, #396]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 8001510:	889b      	ldrh	r3, [r3, #4]
 8001512:	0bdb      	lsrs	r3, r3, #15
 8001514:	b29b      	uxth	r3, r3
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <FEB_Variable_Conversion+0x14e>
 800151e:	4b5f      	ldr	r3, [pc, #380]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 8001520:	889b      	ldrh	r3, [r3, #4]
 8001522:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001526:	b29b      	uxth	r3, r3
 8001528:	425b      	negs	r3, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	b21b      	sxth	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f818 	bl	8000564 <__aeabi_i2d>
 8001534:	e006      	b.n	8001544 <FEB_Variable_Conversion+0x15c>
 8001536:	4b59      	ldr	r3, [pc, #356]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 8001538:	889b      	ldrh	r3, [r3, #4]
 800153a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f810 	bl	8000564 <__aeabi_i2d>
 8001544:	a34e      	add	r3, pc, #312	@ (adr r3, 8001680 <FEB_Variable_Conversion+0x298>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7ff f875 	bl	8000638 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b4e      	ldr	r3, [pc, #312]	@ (8001694 <FEB_Variable_Conversion+0x2ac>)
 800155c:	f7ff f86c 	bl	8000638 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fb16 	bl	8000b98 <__aeabi_d2iz>
 800156c:	4603      	mov	r3, r0
 800156e:	b21a      	sxth	r2, r3
 8001570:	4b4b      	ldr	r3, [pc, #300]	@ (80016a0 <FEB_Variable_Conversion+0x2b8>)
 8001572:	809a      	strh	r2, [r3, #4]
	tps2482_current[3] = FLOAT_TO_INT16_T(SIGN_MAGNITUDE(tps2482_current_raw[3]) * RF_CURRENT_LSB);
 8001574:	4b49      	ldr	r3, [pc, #292]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 8001576:	88db      	ldrh	r3, [r3, #6]
 8001578:	0bdb      	lsrs	r3, r3, #15
 800157a:	b29b      	uxth	r3, r3
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00b      	beq.n	800159c <FEB_Variable_Conversion+0x1b4>
 8001584:	4b45      	ldr	r3, [pc, #276]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 8001586:	88db      	ldrh	r3, [r3, #6]
 8001588:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800158c:	b29b      	uxth	r3, r3
 800158e:	425b      	negs	r3, r3
 8001590:	b29b      	uxth	r3, r3
 8001592:	b21b      	sxth	r3, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffe5 	bl	8000564 <__aeabi_i2d>
 800159a:	e006      	b.n	80015aa <FEB_Variable_Conversion+0x1c2>
 800159c:	4b3f      	ldr	r3, [pc, #252]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 800159e:	88db      	ldrh	r3, [r3, #6]
 80015a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffdd 	bl	8000564 <__aeabi_i2d>
 80015aa:	a337      	add	r3, pc, #220	@ (adr r3, 8001688 <FEB_Variable_Conversion+0x2a0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f842 	bl	8000638 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b34      	ldr	r3, [pc, #208]	@ (8001694 <FEB_Variable_Conversion+0x2ac>)
 80015c2:	f7ff f839 	bl	8000638 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fae3 	bl	8000b98 <__aeabi_d2iz>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <FEB_Variable_Conversion+0x2b8>)
 80015d8:	80da      	strh	r2, [r3, #6]
	tps2482_current[4] = FLOAT_TO_INT16_T(SIGN_MAGNITUDE(tps2482_current_raw[4]) * SH_CURRENT_LSB);
 80015da:	4b30      	ldr	r3, [pc, #192]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 80015dc:	891b      	ldrh	r3, [r3, #8]
 80015de:	0bdb      	lsrs	r3, r3, #15
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <FEB_Variable_Conversion+0x21a>
 80015ea:	4b2c      	ldr	r3, [pc, #176]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 80015ec:	891b      	ldrh	r3, [r3, #8]
 80015ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	425b      	negs	r3, r3
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ffb2 	bl	8000564 <__aeabi_i2d>
 8001600:	e006      	b.n	8001610 <FEB_Variable_Conversion+0x228>
 8001602:	4b26      	ldr	r3, [pc, #152]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 8001604:	891b      	ldrh	r3, [r3, #8]
 8001606:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffaa 	bl	8000564 <__aeabi_i2d>
 8001610:	a317      	add	r3, pc, #92	@ (adr r3, 8001670 <FEB_Variable_Conversion+0x288>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7ff f80f 	bl	8000638 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <FEB_Variable_Conversion+0x2ac>)
 8001628:	f7ff f806 	bl	8000638 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fab0 	bl	8000b98 <__aeabi_d2iz>
 8001638:	4603      	mov	r3, r0
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <FEB_Variable_Conversion+0x2b8>)
 800163e:	811a      	strh	r2, [r3, #8]
	tps2482_current[5] = FLOAT_TO_INT16_T(SIGN_MAGNITUDE(tps2482_current_raw[5]) * L_CURRENT_LSB);
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 8001642:	895b      	ldrh	r3, [r3, #10]
 8001644:	0bdb      	lsrs	r3, r3, #15
 8001646:	b29b      	uxth	r3, r3
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	d029      	beq.n	80016a4 <FEB_Variable_Conversion+0x2bc>
 8001650:	4b12      	ldr	r3, [pc, #72]	@ (800169c <FEB_Variable_Conversion+0x2b4>)
 8001652:	895b      	ldrh	r3, [r3, #10]
 8001654:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001658:	b29b      	uxth	r3, r3
 800165a:	425b      	negs	r3, r3
 800165c:	b29b      	uxth	r3, r3
 800165e:	b21b      	sxth	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff7f 	bl	8000564 <__aeabi_i2d>
 8001666:	e024      	b.n	80016b2 <FEB_Variable_Conversion+0x2ca>
 8001668:	47ae147b 	.word	0x47ae147b
 800166c:	3f547ae1 	.word	0x3f547ae1
 8001670:	005000a0 	.word	0x005000a0
 8001674:	3f240028 	.word	0x3f240028
 8001678:	99fe6730 	.word	0x99fe6730
 800167c:	3f293365 	.word	0x3f293365
 8001680:	005000a0 	.word	0x005000a0
 8001684:	3f440028 	.word	0x3f440028
 8001688:	006000c0 	.word	0x006000c0
 800168c:	3f180030 	.word	0x3f180030
 8001690:	20000354 	.word	0x20000354
 8001694:	408f4000 	.word	0x408f4000
 8001698:	200003ac 	.word	0x200003ac
 800169c:	20000344 	.word	0x20000344
 80016a0:	2000039c 	.word	0x2000039c
 80016a4:	4b4c      	ldr	r3, [pc, #304]	@ (80017d8 <FEB_Variable_Conversion+0x3f0>)
 80016a6:	895b      	ldrh	r3, [r3, #10]
 80016a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff59 	bl	8000564 <__aeabi_i2d>
 80016b2:	a345      	add	r3, pc, #276	@ (adr r3, 80017c8 <FEB_Variable_Conversion+0x3e0>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ffbe 	bl	8000638 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b44      	ldr	r3, [pc, #272]	@ (80017dc <FEB_Variable_Conversion+0x3f4>)
 80016ca:	f7fe ffb5 	bl	8000638 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fa5f 	bl	8000b98 <__aeabi_d2iz>
 80016da:	4603      	mov	r3, r0
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b40      	ldr	r3, [pc, #256]	@ (80017e0 <FEB_Variable_Conversion+0x3f8>)
 80016e0:	815a      	strh	r2, [r3, #10]
	tps2482_current[6] = FLOAT_TO_INT16_T(SIGN_MAGNITUDE(tps2482_current_raw[6]) * AS_CURRENT_LSB);
 80016e2:	4b3d      	ldr	r3, [pc, #244]	@ (80017d8 <FEB_Variable_Conversion+0x3f0>)
 80016e4:	899b      	ldrh	r3, [r3, #12]
 80016e6:	0bdb      	lsrs	r3, r3, #15
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <FEB_Variable_Conversion+0x322>
 80016f2:	4b39      	ldr	r3, [pc, #228]	@ (80017d8 <FEB_Variable_Conversion+0x3f0>)
 80016f4:	899b      	ldrh	r3, [r3, #12]
 80016f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	425b      	negs	r3, r3
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b21b      	sxth	r3, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ff2e 	bl	8000564 <__aeabi_i2d>
 8001708:	e006      	b.n	8001718 <FEB_Variable_Conversion+0x330>
 800170a:	4b33      	ldr	r3, [pc, #204]	@ (80017d8 <FEB_Variable_Conversion+0x3f0>)
 800170c:	899b      	ldrh	r3, [r3, #12]
 800170e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff26 	bl	8000564 <__aeabi_i2d>
 8001718:	a32d      	add	r3, pc, #180	@ (adr r3, 80017d0 <FEB_Variable_Conversion+0x3e8>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe ff8b 	bl	8000638 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b2b      	ldr	r3, [pc, #172]	@ (80017dc <FEB_Variable_Conversion+0x3f4>)
 8001730:	f7fe ff82 	bl	8000638 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff fa2c 	bl	8000b98 <__aeabi_d2iz>
 8001740:	4603      	mov	r3, r0
 8001742:	b21a      	sxth	r2, r3
 8001744:	4b26      	ldr	r3, [pc, #152]	@ (80017e0 <FEB_Variable_Conversion+0x3f8>)
 8001746:	819a      	strh	r2, [r3, #12]
	tps2482_current[7] = FLOAT_TO_INT16_T(SIGN_MAGNITUDE(tps2482_current_raw[7]) * AB_CURRENT_LSB);
 8001748:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <FEB_Variable_Conversion+0x3f0>)
 800174a:	89db      	ldrh	r3, [r3, #14]
 800174c:	0bdb      	lsrs	r3, r3, #15
 800174e:	b29b      	uxth	r3, r3
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00b      	beq.n	8001770 <FEB_Variable_Conversion+0x388>
 8001758:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <FEB_Variable_Conversion+0x3f0>)
 800175a:	89db      	ldrh	r3, [r3, #14]
 800175c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001760:	b29b      	uxth	r3, r3
 8001762:	425b      	negs	r3, r3
 8001764:	b29b      	uxth	r3, r3
 8001766:	b21b      	sxth	r3, r3
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fefb 	bl	8000564 <__aeabi_i2d>
 800176e:	e006      	b.n	800177e <FEB_Variable_Conversion+0x396>
 8001770:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <FEB_Variable_Conversion+0x3f0>)
 8001772:	89db      	ldrh	r3, [r3, #14]
 8001774:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fef3 	bl	8000564 <__aeabi_i2d>
 800177e:	a312      	add	r3, pc, #72	@ (adr r3, 80017c8 <FEB_Variable_Conversion+0x3e0>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe ff58 	bl	8000638 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <FEB_Variable_Conversion+0x3f4>)
 8001796:	f7fe ff4f 	bl	8000638 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f7ff f9f9 	bl	8000b98 <__aeabi_d2iz>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <FEB_Variable_Conversion+0x3f8>)
 80017ac:	81da      	strh	r2, [r3, #14]

	FEB_Current_IIR(tps2482_current, tps2482_current, tps2482_current_filter, NUM_TPS2482, tps2482_current_filter_init);
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <FEB_Variable_Conversion+0x3fc>)
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2308      	movs	r3, #8
 80017b4:	4a0c      	ldr	r2, [pc, #48]	@ (80017e8 <FEB_Variable_Conversion+0x400>)
 80017b6:	490a      	ldr	r1, [pc, #40]	@ (80017e0 <FEB_Variable_Conversion+0x3f8>)
 80017b8:	4809      	ldr	r0, [pc, #36]	@ (80017e0 <FEB_Variable_Conversion+0x3f8>)
 80017ba:	f7ff fdab 	bl	8001314 <FEB_Current_IIR>
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	005000a0 	.word	0x005000a0
 80017cc:	3f240028 	.word	0x3f240028
 80017d0:	005000a0 	.word	0x005000a0
 80017d4:	3f440028 	.word	0x3f440028
 80017d8:	20000344 	.word	0x20000344
 80017dc:	408f4000 	.word	0x408f4000
 80017e0:	2000039c 	.word	0x2000039c
 80017e4:	20000394 	.word	0x20000394
 80017e8:	20000374 	.word	0x20000374

080017ec <FEB_Variable_Init>:

static void FEB_Variable_Init(void) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
	tps2482_i2c_addresses[0] = LV_ADDR;
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <FEB_Variable_Init+0x3c>)
 80017f4:	2240      	movs	r2, #64	@ 0x40
 80017f6:	701a      	strb	r2, [r3, #0]
	tps2482_i2c_addresses[1] = CP_ADDR;
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <FEB_Variable_Init+0x3c>)
 80017fa:	2245      	movs	r2, #69	@ 0x45
 80017fc:	705a      	strb	r2, [r3, #1]
	tps2482_i2c_addresses[2] = AF_ADDR;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <FEB_Variable_Init+0x3c>)
 8001800:	2244      	movs	r2, #68	@ 0x44
 8001802:	709a      	strb	r2, [r3, #2]
	tps2482_i2c_addresses[3] = RF_ADDR;
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <FEB_Variable_Init+0x3c>)
 8001806:	2241      	movs	r2, #65	@ 0x41
 8001808:	70da      	strb	r2, [r3, #3]
	tps2482_i2c_addresses[4] = SH_ADDR;
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <FEB_Variable_Init+0x3c>)
 800180c:	224a      	movs	r2, #74	@ 0x4a
 800180e:	711a      	strb	r2, [r3, #4]
	tps2482_i2c_addresses[5] = L_ADDR;
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <FEB_Variable_Init+0x3c>)
 8001812:	2246      	movs	r2, #70	@ 0x46
 8001814:	715a      	strb	r2, [r3, #5]
	tps2482_i2c_addresses[6] = AS_ADDR;
 8001816:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <FEB_Variable_Init+0x3c>)
 8001818:	2248      	movs	r2, #72	@ 0x48
 800181a:	719a      	strb	r2, [r3, #6]
	tps2482_i2c_addresses[7] = AB_ADDR;
 800181c:	4b02      	ldr	r3, [pc, #8]	@ (8001828 <FEB_Variable_Init+0x3c>)
 800181e:	2242      	movs	r2, #66	@ 0x42
 8001820:	71da      	strb	r2, [r3, #7]

	for ( uint8_t i = 0; i < NUM_TPS2482; i++ ) {
 8001822:	2300      	movs	r3, #0
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	e011      	b.n	800184c <FEB_Variable_Init+0x60>
 8001828:	20000260 	.word	0x20000260
		tps2482_configurations[i].config = TPS2482_CONFIG_DEFAULT;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4a93      	ldr	r2, [pc, #588]	@ (8001a7c <FEB_Variable_Init+0x290>)
 8001830:	f244 1127 	movw	r1, #16679	@ 0x4127
 8001834:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
		tps2482_configurations[i].mask = TPS2482_MASK_SOL;
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	4a90      	ldr	r2, [pc, #576]	@ (8001a7c <FEB_Variable_Init+0x290>)
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001844:	809a      	strh	r2, [r3, #4]
	for ( uint8_t i = 0; i < NUM_TPS2482; i++ ) {
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	3301      	adds	r3, #1
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b07      	cmp	r3, #7
 8001850:	d9ec      	bls.n	800182c <FEB_Variable_Init+0x40>
	}

	lv_config->cal = LV_CAL_VAL;
 8001852:	4b8b      	ldr	r3, [pc, #556]	@ (8001a80 <FEB_Variable_Init+0x294>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f244 1288 	movw	r2, #16776	@ 0x4188
 800185a:	805a      	strh	r2, [r3, #2]
	cp_config->cal = CP_CAL_VAL;
 800185c:	4b89      	ldr	r3, [pc, #548]	@ (8001a84 <FEB_Variable_Init+0x298>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f243 4202 	movw	r2, #13314	@ 0x3402
 8001864:	805a      	strh	r2, [r3, #2]
	af_config->cal = AF_CAL_VAL;
 8001866:	4b88      	ldr	r3, [pc, #544]	@ (8001a88 <FEB_Variable_Init+0x29c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f241 0262 	movw	r2, #4194	@ 0x1062
 800186e:	805a      	strh	r2, [r3, #2]
	rf_config->cal = RF_CAL_VAL;
 8001870:	4b86      	ldr	r3, [pc, #536]	@ (8001a8c <FEB_Variable_Init+0x2a0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f646 5239 	movw	r2, #27961	@ 0x6d39
 8001878:	805a      	strh	r2, [r3, #2]
	sh_config->cal = SH_CAL_VAL;
 800187a:	4b85      	ldr	r3, [pc, #532]	@ (8001a90 <FEB_Variable_Init+0x2a4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f244 1288 	movw	r2, #16776	@ 0x4188
 8001882:	805a      	strh	r2, [r3, #2]
	l_config->cal = L_CAL_VAL;
 8001884:	4b83      	ldr	r3, [pc, #524]	@ (8001a94 <FEB_Variable_Init+0x2a8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f244 1288 	movw	r2, #16776	@ 0x4188
 800188c:	805a      	strh	r2, [r3, #2]
	as_config->cal = AS_CAL_VAL;
 800188e:	4b82      	ldr	r3, [pc, #520]	@ (8001a98 <FEB_Variable_Init+0x2ac>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f241 0262 	movw	r2, #4194	@ 0x1062
 8001896:	805a      	strh	r2, [r3, #2]
	ab_config->cal = AB_CAL_VAL;
 8001898:	4b80      	ldr	r3, [pc, #512]	@ (8001a9c <FEB_Variable_Init+0x2b0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f244 1288 	movw	r2, #16776	@ 0x4188
 80018a0:	805a      	strh	r2, [r3, #2]

	lv_config->alert_lim = LV_ALERT_LIM_VAL;
 80018a2:	4b77      	ldr	r3, [pc, #476]	@ (8001a80 <FEB_Variable_Init+0x294>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80018aa:	80da      	strh	r2, [r3, #6]
	cp_config->alert_lim = CP_ALERT_LIM_VAL;
 80018ac:	4b75      	ldr	r3, [pc, #468]	@ (8001a84 <FEB_Variable_Init+0x298>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f241 32b0 	movw	r2, #5040	@ 0x13b0
 80018b4:	80da      	strh	r2, [r3, #6]
	af_config->alert_lim = AF_ALERT_LIM_VAL;
 80018b6:	4b74      	ldr	r3, [pc, #464]	@ (8001a88 <FEB_Variable_Init+0x29c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80018be:	80da      	strh	r2, [r3, #6]
	rf_config->alert_lim = RF_ALERT_LIM_VAL;
 80018c0:	4b72      	ldr	r3, [pc, #456]	@ (8001a8c <FEB_Variable_Init+0x2a0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80018c8:	80da      	strh	r2, [r3, #6]
	sh_config->alert_lim = SH_ALERT_LIM_VAL;
 80018ca:	4b71      	ldr	r3, [pc, #452]	@ (8001a90 <FEB_Variable_Init+0x2a4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80018d2:	80da      	strh	r2, [r3, #6]
	l_config->alert_lim = L_ALERT_LIM_VAL;
 80018d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a94 <FEB_Variable_Init+0x2a8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80018dc:	80da      	strh	r2, [r3, #6]
	as_config->alert_lim = AS_ALERT_LIM_VAL;
 80018de:	4b6e      	ldr	r3, [pc, #440]	@ (8001a98 <FEB_Variable_Init+0x2ac>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80018e6:	80da      	strh	r2, [r3, #6]
	ab_config->alert_lim = AB_ALERT_LIM_VAL;
 80018e8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a9c <FEB_Variable_Init+0x2b0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80018f0:	80da      	strh	r2, [r3, #6]

	tps2482_en_ports[0] = CP_EN_GPIO_Port;
 80018f2:	4b6b      	ldr	r3, [pc, #428]	@ (8001aa0 <FEB_Variable_Init+0x2b4>)
 80018f4:	4a6b      	ldr	r2, [pc, #428]	@ (8001aa4 <FEB_Variable_Init+0x2b8>)
 80018f6:	601a      	str	r2, [r3, #0]
	tps2482_en_ports[1] = AF_EN_GPIO_Port;
 80018f8:	4b69      	ldr	r3, [pc, #420]	@ (8001aa0 <FEB_Variable_Init+0x2b4>)
 80018fa:	4a6b      	ldr	r2, [pc, #428]	@ (8001aa8 <FEB_Variable_Init+0x2bc>)
 80018fc:	605a      	str	r2, [r3, #4]
	tps2482_en_ports[2] = RF_EN_GPIO_Port;
 80018fe:	4b68      	ldr	r3, [pc, #416]	@ (8001aa0 <FEB_Variable_Init+0x2b4>)
 8001900:	4a68      	ldr	r2, [pc, #416]	@ (8001aa4 <FEB_Variable_Init+0x2b8>)
 8001902:	609a      	str	r2, [r3, #8]
	tps2482_en_ports[3] = SH_EN_GPIO_Port;
 8001904:	4b66      	ldr	r3, [pc, #408]	@ (8001aa0 <FEB_Variable_Init+0x2b4>)
 8001906:	4a69      	ldr	r2, [pc, #420]	@ (8001aac <FEB_Variable_Init+0x2c0>)
 8001908:	60da      	str	r2, [r3, #12]
	tps2482_en_ports[4] = L_EN_GPIO_Port;
 800190a:	4b65      	ldr	r3, [pc, #404]	@ (8001aa0 <FEB_Variable_Init+0x2b4>)
 800190c:	4a66      	ldr	r2, [pc, #408]	@ (8001aa8 <FEB_Variable_Init+0x2bc>)
 800190e:	611a      	str	r2, [r3, #16]
	tps2482_en_ports[5] = AS_EN_GPIO_Port;
 8001910:	4b63      	ldr	r3, [pc, #396]	@ (8001aa0 <FEB_Variable_Init+0x2b4>)
 8001912:	4a66      	ldr	r2, [pc, #408]	@ (8001aac <FEB_Variable_Init+0x2c0>)
 8001914:	615a      	str	r2, [r3, #20]
	tps2482_en_ports[6] = AB_EN_GPIO_Port;
 8001916:	4b62      	ldr	r3, [pc, #392]	@ (8001aa0 <FEB_Variable_Init+0x2b4>)
 8001918:	4a62      	ldr	r2, [pc, #392]	@ (8001aa4 <FEB_Variable_Init+0x2b8>)
 800191a:	619a      	str	r2, [r3, #24]

	tps2482_en_pins[0] = CP_EN_Pin;
 800191c:	4b64      	ldr	r3, [pc, #400]	@ (8001ab0 <FEB_Variable_Init+0x2c4>)
 800191e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001922:	801a      	strh	r2, [r3, #0]
	tps2482_en_pins[1] = AF_EN_Pin;
 8001924:	4b62      	ldr	r3, [pc, #392]	@ (8001ab0 <FEB_Variable_Init+0x2c4>)
 8001926:	2220      	movs	r2, #32
 8001928:	805a      	strh	r2, [r3, #2]
	tps2482_en_pins[2] = RF_EN_Pin;
 800192a:	4b61      	ldr	r3, [pc, #388]	@ (8001ab0 <FEB_Variable_Init+0x2c4>)
 800192c:	2208      	movs	r2, #8
 800192e:	809a      	strh	r2, [r3, #4]
	tps2482_en_pins[3] = SH_EN_Pin;
 8001930:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab0 <FEB_Variable_Init+0x2c4>)
 8001932:	2201      	movs	r2, #1
 8001934:	80da      	strh	r2, [r3, #6]
	tps2482_en_pins[4] = L_EN_Pin;
 8001936:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab0 <FEB_Variable_Init+0x2c4>)
 8001938:	2204      	movs	r2, #4
 800193a:	811a      	strh	r2, [r3, #8]
	tps2482_en_pins[5] = AS_EN_Pin;
 800193c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab0 <FEB_Variable_Init+0x2c4>)
 800193e:	2210      	movs	r2, #16
 8001940:	815a      	strh	r2, [r3, #10]
	tps2482_en_pins[6] = AB_EN_Pin;
 8001942:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab0 <FEB_Variable_Init+0x2c4>)
 8001944:	2220      	movs	r2, #32
 8001946:	819a      	strh	r2, [r3, #12]

	tps2482_pg_ports[0] = LV_PG_GPIO_Port;
 8001948:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab4 <FEB_Variable_Init+0x2c8>)
 800194a:	4a57      	ldr	r2, [pc, #348]	@ (8001aa8 <FEB_Variable_Init+0x2bc>)
 800194c:	601a      	str	r2, [r3, #0]
	tps2482_pg_ports[1] = CP_PG_GPIO_Port;
 800194e:	4b59      	ldr	r3, [pc, #356]	@ (8001ab4 <FEB_Variable_Init+0x2c8>)
 8001950:	4a54      	ldr	r2, [pc, #336]	@ (8001aa4 <FEB_Variable_Init+0x2b8>)
 8001952:	605a      	str	r2, [r3, #4]
	tps2482_pg_ports[2] = AF_PG_GPIO_Port;
 8001954:	4b57      	ldr	r3, [pc, #348]	@ (8001ab4 <FEB_Variable_Init+0x2c8>)
 8001956:	4a53      	ldr	r2, [pc, #332]	@ (8001aa4 <FEB_Variable_Init+0x2b8>)
 8001958:	609a      	str	r2, [r3, #8]
	tps2482_pg_ports[3] = RF_PG_GPIO_Port;
 800195a:	4b56      	ldr	r3, [pc, #344]	@ (8001ab4 <FEB_Variable_Init+0x2c8>)
 800195c:	4a51      	ldr	r2, [pc, #324]	@ (8001aa4 <FEB_Variable_Init+0x2b8>)
 800195e:	60da      	str	r2, [r3, #12]
	tps2482_pg_ports[4] = SH_PG_GPIO_Port;
 8001960:	4b54      	ldr	r3, [pc, #336]	@ (8001ab4 <FEB_Variable_Init+0x2c8>)
 8001962:	4a52      	ldr	r2, [pc, #328]	@ (8001aac <FEB_Variable_Init+0x2c0>)
 8001964:	611a      	str	r2, [r3, #16]
	tps2482_pg_ports[5] = L_PG_GPIO_Port;
 8001966:	4b53      	ldr	r3, [pc, #332]	@ (8001ab4 <FEB_Variable_Init+0x2c8>)
 8001968:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa8 <FEB_Variable_Init+0x2bc>)
 800196a:	615a      	str	r2, [r3, #20]
	tps2482_pg_ports[6] = AS_PG_GPIO_Port;
 800196c:	4b51      	ldr	r3, [pc, #324]	@ (8001ab4 <FEB_Variable_Init+0x2c8>)
 800196e:	4a4f      	ldr	r2, [pc, #316]	@ (8001aac <FEB_Variable_Init+0x2c0>)
 8001970:	619a      	str	r2, [r3, #24]
	tps2482_pg_ports[7] = AB_PG_GPIO_Port;
 8001972:	4b50      	ldr	r3, [pc, #320]	@ (8001ab4 <FEB_Variable_Init+0x2c8>)
 8001974:	4a4c      	ldr	r2, [pc, #304]	@ (8001aa8 <FEB_Variable_Init+0x2bc>)
 8001976:	61da      	str	r2, [r3, #28]

	tps2482_pg_pins[0] = LV_PG_Pin;
 8001978:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab8 <FEB_Variable_Init+0x2cc>)
 800197a:	2240      	movs	r2, #64	@ 0x40
 800197c:	801a      	strh	r2, [r3, #0]
	tps2482_pg_pins[1] = CP_PG_Pin;
 800197e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab8 <FEB_Variable_Init+0x2cc>)
 8001980:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001984:	805a      	strh	r2, [r3, #2]
	tps2482_pg_pins[2] = AF_PG_Pin;
 8001986:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab8 <FEB_Variable_Init+0x2cc>)
 8001988:	2210      	movs	r2, #16
 800198a:	809a      	strh	r2, [r3, #4]
	tps2482_pg_pins[3] = RF_PG_Pin;
 800198c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab8 <FEB_Variable_Init+0x2cc>)
 800198e:	2204      	movs	r2, #4
 8001990:	80da      	strh	r2, [r3, #6]
	tps2482_pg_pins[4] = SH_PG_Pin;
 8001992:	4b49      	ldr	r3, [pc, #292]	@ (8001ab8 <FEB_Variable_Init+0x2cc>)
 8001994:	2280      	movs	r2, #128	@ 0x80
 8001996:	811a      	strh	r2, [r3, #8]
	tps2482_pg_pins[5] = L_PG_Pin;
 8001998:	4b47      	ldr	r3, [pc, #284]	@ (8001ab8 <FEB_Variable_Init+0x2cc>)
 800199a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800199e:	815a      	strh	r2, [r3, #10]
	tps2482_pg_pins[6] = AS_PG_Pin;
 80019a0:	4b45      	ldr	r3, [pc, #276]	@ (8001ab8 <FEB_Variable_Init+0x2cc>)
 80019a2:	2240      	movs	r2, #64	@ 0x40
 80019a4:	819a      	strh	r2, [r3, #12]
	tps2482_pg_pins[7] = AB_PG_Pin;
 80019a6:	4b44      	ldr	r3, [pc, #272]	@ (8001ab8 <FEB_Variable_Init+0x2cc>)
 80019a8:	2202      	movs	r2, #2
 80019aa:	81da      	strh	r2, [r3, #14]

	tps2482_alert_ports[0] = LV_ALERT_GPIO_Port;
 80019ac:	4b43      	ldr	r3, [pc, #268]	@ (8001abc <FEB_Variable_Init+0x2d0>)
 80019ae:	4a3e      	ldr	r2, [pc, #248]	@ (8001aa8 <FEB_Variable_Init+0x2bc>)
 80019b0:	601a      	str	r2, [r3, #0]
	tps2482_alert_ports[1] = CP_ALERT_GPIO_Port;
 80019b2:	4b42      	ldr	r3, [pc, #264]	@ (8001abc <FEB_Variable_Init+0x2d0>)
 80019b4:	4a3d      	ldr	r2, [pc, #244]	@ (8001aac <FEB_Variable_Init+0x2c0>)
 80019b6:	605a      	str	r2, [r3, #4]
	tps2482_alert_ports[2] = AF_ALERT_GPIO_Port;
 80019b8:	4b40      	ldr	r3, [pc, #256]	@ (8001abc <FEB_Variable_Init+0x2d0>)
 80019ba:	4a3a      	ldr	r2, [pc, #232]	@ (8001aa4 <FEB_Variable_Init+0x2b8>)
 80019bc:	609a      	str	r2, [r3, #8]
	tps2482_alert_ports[3] = RF_ALERT_GPIO_Port;
 80019be:	4b3f      	ldr	r3, [pc, #252]	@ (8001abc <FEB_Variable_Init+0x2d0>)
 80019c0:	4a38      	ldr	r2, [pc, #224]	@ (8001aa4 <FEB_Variable_Init+0x2b8>)
 80019c2:	60da      	str	r2, [r3, #12]
	tps2482_alert_ports[4] = SH_ALERT_GPIO_Port;
 80019c4:	4b3d      	ldr	r3, [pc, #244]	@ (8001abc <FEB_Variable_Init+0x2d0>)
 80019c6:	4a37      	ldr	r2, [pc, #220]	@ (8001aa4 <FEB_Variable_Init+0x2b8>)
 80019c8:	611a      	str	r2, [r3, #16]
	tps2482_alert_ports[5] = L_ALERT_GPIO_Port;
 80019ca:	4b3c      	ldr	r3, [pc, #240]	@ (8001abc <FEB_Variable_Init+0x2d0>)
 80019cc:	4a36      	ldr	r2, [pc, #216]	@ (8001aa8 <FEB_Variable_Init+0x2bc>)
 80019ce:	615a      	str	r2, [r3, #20]
	tps2482_alert_ports[6] = AS_ALERT_GPIO_Port;
 80019d0:	4b3a      	ldr	r3, [pc, #232]	@ (8001abc <FEB_Variable_Init+0x2d0>)
 80019d2:	4a36      	ldr	r2, [pc, #216]	@ (8001aac <FEB_Variable_Init+0x2c0>)
 80019d4:	619a      	str	r2, [r3, #24]
	tps2482_alert_ports[7] = AB_ALERT_GPIO_Port;
 80019d6:	4b39      	ldr	r3, [pc, #228]	@ (8001abc <FEB_Variable_Init+0x2d0>)
 80019d8:	4a33      	ldr	r2, [pc, #204]	@ (8001aa8 <FEB_Variable_Init+0x2bc>)
 80019da:	61da      	str	r2, [r3, #28]

	tps2482_alert_pins[0] = LV_ALERT_Pin;
 80019dc:	4b38      	ldr	r3, [pc, #224]	@ (8001ac0 <FEB_Variable_Init+0x2d4>)
 80019de:	2280      	movs	r2, #128	@ 0x80
 80019e0:	801a      	strh	r2, [r3, #0]
	tps2482_alert_pins[1] = CP_ALERT_Pin;
 80019e2:	4b37      	ldr	r3, [pc, #220]	@ (8001ac0 <FEB_Variable_Init+0x2d4>)
 80019e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019e8:	805a      	strh	r2, [r3, #2]
	tps2482_alert_pins[2] = AF_ALERT_Pin;
 80019ea:	4b35      	ldr	r3, [pc, #212]	@ (8001ac0 <FEB_Variable_Init+0x2d4>)
 80019ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019f0:	809a      	strh	r2, [r3, #4]
	tps2482_alert_pins[3] = RF_ALERT_Pin;
 80019f2:	4b33      	ldr	r3, [pc, #204]	@ (8001ac0 <FEB_Variable_Init+0x2d4>)
 80019f4:	2202      	movs	r2, #2
 80019f6:	80da      	strh	r2, [r3, #6]
	tps2482_alert_pins[4] = SH_ALERT_Pin;
 80019f8:	4b31      	ldr	r3, [pc, #196]	@ (8001ac0 <FEB_Variable_Init+0x2d4>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	811a      	strh	r2, [r3, #8]
	tps2482_alert_pins[5] = L_ALERT_Pin;
 80019fe:	4b30      	ldr	r3, [pc, #192]	@ (8001ac0 <FEB_Variable_Init+0x2d4>)
 8001a00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a04:	815a      	strh	r2, [r3, #10]
	tps2482_alert_pins[6] = AS_ALERT_Pin;
 8001a06:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac0 <FEB_Variable_Init+0x2d4>)
 8001a08:	2220      	movs	r2, #32
 8001a0a:	819a      	strh	r2, [r3, #12]
	tps2482_alert_pins[7] = AB_ALERT_Pin;
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <FEB_Variable_Init+0x2d4>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	81da      	strh	r2, [r3, #14]

	can_data.ids[0] = FEB_CAN_FEB_LVPDB_FLAGS_BUS_VOLTAGE_LV_CURRENT_FRAME_ID;
 8001a12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <FEB_Variable_Init+0x2d8>)
 8001a14:	2202      	movs	r2, #2
 8001a16:	61da      	str	r2, [r3, #28]
	can_data.ids[1] = FEB_CAN_FEB_LVPDB_CP_AF_RF_SH_CURRENT_FRAME_ID;
 8001a18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <FEB_Variable_Init+0x2d8>)
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	621a      	str	r2, [r3, #32]
	can_data.ids[2] = FEB_CAN_FEB_LVPDB_L_AS_AB_CURRENT_FRAME_ID;
 8001a1e:	4b29      	ldr	r3, [pc, #164]	@ (8001ac4 <FEB_Variable_Init+0x2d8>)
 8001a20:	2204      	movs	r2, #4
 8001a22:	625a      	str	r2, [r3, #36]	@ 0x24

	memset(tps2482_current_raw, 0, NUM_TPS2482 * sizeof(uint16_t));
 8001a24:	2210      	movs	r2, #16
 8001a26:	2100      	movs	r1, #0
 8001a28:	4827      	ldr	r0, [pc, #156]	@ (8001ac8 <FEB_Variable_Init+0x2dc>)
 8001a2a:	f005 fe55 	bl	80076d8 <memset>
	memset(tps2482_bus_voltage_raw, 0, NUM_TPS2482 * sizeof(uint16_t));
 8001a2e:	2210      	movs	r2, #16
 8001a30:	2100      	movs	r1, #0
 8001a32:	4826      	ldr	r0, [pc, #152]	@ (8001acc <FEB_Variable_Init+0x2e0>)
 8001a34:	f005 fe50 	bl	80076d8 <memset>
	memset(tps2482_shunt_voltage_raw, 0, NUM_TPS2482 * sizeof(uint16_t));
 8001a38:	2210      	movs	r2, #16
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4824      	ldr	r0, [pc, #144]	@ (8001ad0 <FEB_Variable_Init+0x2e4>)
 8001a3e:	f005 fe4b 	bl	80076d8 <memset>
	memset(tps2482_current, 0, NUM_TPS2482 * sizeof(uint16_t));
 8001a42:	2210      	movs	r2, #16
 8001a44:	2100      	movs	r1, #0
 8001a46:	4823      	ldr	r0, [pc, #140]	@ (8001ad4 <FEB_Variable_Init+0x2e8>)
 8001a48:	f005 fe46 	bl	80076d8 <memset>
	memset(tps2482_bus_voltage, 0, NUM_TPS2482 * sizeof(uint16_t));
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4821      	ldr	r0, [pc, #132]	@ (8001ad8 <FEB_Variable_Init+0x2ec>)
 8001a52:	f005 fe41 	bl	80076d8 <memset>
	memset(tps2482_shunt_voltage, 0, NUM_TPS2482 * sizeof(uint16_t));
 8001a56:	2210      	movs	r2, #16
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4820      	ldr	r0, [pc, #128]	@ (8001adc <FEB_Variable_Init+0x2f0>)
 8001a5c:	f005 fe3c 	bl	80076d8 <memset>

	memset(tps2482_current_filter, 0, NUM_TPS2482 * sizeof(int32_t));
 8001a60:	2220      	movs	r2, #32
 8001a62:	2100      	movs	r1, #0
 8001a64:	481e      	ldr	r0, [pc, #120]	@ (8001ae0 <FEB_Variable_Init+0x2f4>)
 8001a66:	f005 fe37 	bl	80076d8 <memset>
	memset(tps2482_current_filter_init, false, NUM_TPS2482 * sizeof(bool));
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	481d      	ldr	r0, [pc, #116]	@ (8001ae4 <FEB_Variable_Init+0x2f8>)
 8001a70:	f005 fe32 	bl	80076d8 <memset>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000278 	.word	0x20000278
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000004 	.word	0x20000004
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	2000000c 	.word	0x2000000c
 8001a90:	20000010 	.word	0x20000010
 8001a94:	20000014 	.word	0x20000014
 8001a98:	20000018 	.word	0x20000018
 8001a9c:	2000001c 	.word	0x2000001c
 8001aa0:	200002b8 	.word	0x200002b8
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	200002d4 	.word	0x200002d4
 8001ab4:	200002e4 	.word	0x200002e4
 8001ab8:	20000304 	.word	0x20000304
 8001abc:	20000314 	.word	0x20000314
 8001ac0:	20000334 	.word	0x20000334
 8001ac4:	20000400 	.word	0x20000400
 8001ac8:	20000344 	.word	0x20000344
 8001acc:	20000354 	.word	0x20000354
 8001ad0:	20000364 	.word	0x20000364
 8001ad4:	2000039c 	.word	0x2000039c
 8001ad8:	200003ac 	.word	0x200003ac
 8001adc:	200003c0 	.word	0x200003c0
 8001ae0:	20000374 	.word	0x20000374
 8001ae4:	20000394 	.word	0x20000394

08001ae8 <TPS2482_Init>:
#include <TPS2482.h>

void TPS2482_Init(I2C_HandleTypeDef *hi2c, uint8_t *addresses, TPS2482_Configuration *configurations, uint16_t *ids, bool *res, uint8_t messageCount) {
 8001ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aec:	b0b1      	sub	sp, #196	@ 0xc4
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6778      	str	r0, [r7, #116]	@ 0x74
 8001af2:	6739      	str	r1, [r7, #112]	@ 0x70
 8001af4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001af6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001af8:	466b      	mov	r3, sp
 8001afa:	461e      	mov	r6, r3
	uint16_t configs[messageCount];
 8001afc:	f897 10ec 	ldrb.w	r1, [r7, #236]	@ 0xec
 8001b00:	460b      	mov	r3, r1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001b08:	b2cb      	uxtb	r3, r1
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	461c      	mov	r4, r3
 8001b0e:	4615      	mov	r5, r2
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	012b      	lsls	r3, r5, #4
 8001b1a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001b1e:	0122      	lsls	r2, r4, #4
 8001b20:	b2cb      	uxtb	r3, r1
 8001b22:	2200      	movs	r2, #0
 8001b24:	4698      	mov	r8, r3
 8001b26:	4691      	mov	r9, r2
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001b34:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001b38:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	3307      	adds	r3, #7
 8001b42:	08db      	lsrs	r3, r3, #3
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	ebad 0d03 	sub.w	sp, sp, r3
 8001b4a:	466b      	mov	r3, sp
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	085b      	lsrs	r3, r3, #1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	uint16_t cals[messageCount];
 8001b56:	f897 10ec 	ldrb.w	r1, [r7, #236]	@ 0xec
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001b62:	b2cb      	uxtb	r3, r1
 8001b64:	2200      	movs	r2, #0
 8001b66:	469a      	mov	sl, r3
 8001b68:	4693      	mov	fp, r2
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8001b76:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001b7a:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001b7e:	b2cb      	uxtb	r3, r1
 8001b80:	2200      	movs	r2, #0
 8001b82:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b84:	667a      	str	r2, [r7, #100]	@ 0x64
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b92:	4628      	mov	r0, r5
 8001b94:	0103      	lsls	r3, r0, #4
 8001b96:	4620      	mov	r0, r4
 8001b98:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	0102      	lsls	r2, r0, #4
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	3307      	adds	r3, #7
 8001ba6:	08db      	lsrs	r3, r3, #3
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	ebad 0d03 	sub.w	sp, sp, r3
 8001bae:	466b      	mov	r3, sp
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	uint16_t masks[messageCount];
 8001bba:	f897 10ec 	ldrb.w	r1, [r7, #236]	@ 0xec
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001bc6:	b2cb      	uxtb	r3, r1
 8001bc8:	2200      	movs	r2, #0
 8001bca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001bcc:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001bda:	4628      	mov	r0, r5
 8001bdc:	0103      	lsls	r3, r0, #4
 8001bde:	4620      	mov	r0, r4
 8001be0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001be4:	4620      	mov	r0, r4
 8001be6:	0102      	lsls	r2, r0, #4
 8001be8:	b2cb      	uxtb	r3, r1
 8001bea:	2200      	movs	r2, #0
 8001bec:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bee:	657a      	str	r2, [r7, #84]	@ 0x54
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001bfc:	4628      	mov	r0, r5
 8001bfe:	0103      	lsls	r3, r0, #4
 8001c00:	4620      	mov	r0, r4
 8001c02:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001c06:	4620      	mov	r0, r4
 8001c08:	0102      	lsls	r2, r0, #4
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	3307      	adds	r3, #7
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	ebad 0d03 	sub.w	sp, sp, r3
 8001c18:	466b      	mov	r3, sp
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	uint16_t alert_limits[messageCount];
 8001c24:	f897 10ec 	ldrb.w	r1, [r7, #236]	@ 0xec
 8001c28:	460b      	mov	r3, r1
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001c30:	b2cb      	uxtb	r3, r1
 8001c32:	2200      	movs	r2, #0
 8001c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c36:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001c44:	4628      	mov	r0, r5
 8001c46:	0103      	lsls	r3, r0, #4
 8001c48:	4620      	mov	r0, r4
 8001c4a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001c4e:	4620      	mov	r0, r4
 8001c50:	0102      	lsls	r2, r0, #4
 8001c52:	b2cb      	uxtb	r3, r1
 8001c54:	2200      	movs	r2, #0
 8001c56:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c58:	647a      	str	r2, [r7, #68]	@ 0x44
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001c66:	4628      	mov	r0, r5
 8001c68:	0103      	lsls	r3, r0, #4
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001c70:	4620      	mov	r0, r4
 8001c72:	0102      	lsls	r2, r0, #4
 8001c74:	460b      	mov	r3, r1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	3307      	adds	r3, #7
 8001c7a:	08db      	lsrs	r3, r3, #3
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	ebad 0d03 	sub.w	sp, sp, r3
 8001c82:	466b      	mov	r3, sp
 8001c84:	3301      	adds	r3, #1
 8001c86:	085b      	lsrs	r3, r3, #1
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	uint16_t configs_res[messageCount];
 8001c8e:	f897 10ec 	ldrb.w	r1, [r7, #236]	@ 0xec
 8001c92:	460b      	mov	r3, r1
 8001c94:	3b01      	subs	r3, #1
 8001c96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c9a:	b2cb      	uxtb	r3, r1
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ca0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001cae:	4628      	mov	r0, r5
 8001cb0:	0103      	lsls	r3, r0, #4
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001cb8:	4620      	mov	r0, r4
 8001cba:	0102      	lsls	r2, r0, #4
 8001cbc:	b2cb      	uxtb	r3, r1
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cc2:	637a      	str	r2, [r7, #52]	@ 0x34
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	0103      	lsls	r3, r0, #4
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001cda:	4620      	mov	r0, r4
 8001cdc:	0102      	lsls	r2, r0, #4
 8001cde:	460b      	mov	r3, r1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	3307      	adds	r3, #7
 8001ce4:	08db      	lsrs	r3, r3, #3
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	ebad 0d03 	sub.w	sp, sp, r3
 8001cec:	466b      	mov	r3, sp
 8001cee:	3301      	adds	r3, #1
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	uint16_t cals_res[messageCount];
 8001cf8:	f897 10ec 	ldrb.w	r1, [r7, #236]	@ 0xec
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001d04:	b2cb      	uxtb	r3, r1
 8001d06:	2200      	movs	r2, #0
 8001d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001d18:	4628      	mov	r0, r5
 8001d1a:	0103      	lsls	r3, r0, #4
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001d22:	4620      	mov	r0, r4
 8001d24:	0102      	lsls	r2, r0, #4
 8001d26:	b2cb      	uxtb	r3, r1
 8001d28:	2200      	movs	r2, #0
 8001d2a:	623b      	str	r3, [r7, #32]
 8001d2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	0103      	lsls	r3, r0, #4
 8001d3e:	4620      	mov	r0, r4
 8001d40:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001d44:	4620      	mov	r0, r4
 8001d46:	0102      	lsls	r2, r0, #4
 8001d48:	460b      	mov	r3, r1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	3307      	adds	r3, #7
 8001d4e:	08db      	lsrs	r3, r3, #3
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	ebad 0d03 	sub.w	sp, sp, r3
 8001d56:	466b      	mov	r3, sp
 8001d58:	3301      	adds	r3, #1
 8001d5a:	085b      	lsrs	r3, r3, #1
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	uint16_t masks_res[messageCount];
 8001d62:	f897 10ec 	ldrb.w	r1, [r7, #236]	@ 0xec
 8001d66:	460b      	mov	r3, r1
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001d6e:	b2cb      	uxtb	r3, r1
 8001d70:	2200      	movs	r2, #0
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	61fa      	str	r2, [r7, #28]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001d82:	4628      	mov	r0, r5
 8001d84:	0103      	lsls	r3, r0, #4
 8001d86:	4620      	mov	r0, r4
 8001d88:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	0102      	lsls	r2, r0, #4
 8001d90:	b2cb      	uxtb	r3, r1
 8001d92:	2200      	movs	r2, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	617a      	str	r2, [r7, #20]
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001da4:	4628      	mov	r0, r5
 8001da6:	0103      	lsls	r3, r0, #4
 8001da8:	4620      	mov	r0, r4
 8001daa:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001dae:	4620      	mov	r0, r4
 8001db0:	0102      	lsls	r2, r0, #4
 8001db2:	460b      	mov	r3, r1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	3307      	adds	r3, #7
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	ebad 0d03 	sub.w	sp, sp, r3
 8001dc0:	466b      	mov	r3, sp
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	085b      	lsrs	r3, r3, #1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	uint16_t alert_limits_res[messageCount];
 8001dcc:	f897 10ec 	ldrb.w	r1, [r7, #236]	@ 0xec
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001dd8:	b2cb      	uxtb	r3, r1
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	60fa      	str	r2, [r7, #12]
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dec:	4628      	mov	r0, r5
 8001dee:	0103      	lsls	r3, r0, #4
 8001df0:	4620      	mov	r0, r4
 8001df2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001df6:	4620      	mov	r0, r4
 8001df8:	0102      	lsls	r2, r0, #4
 8001dfa:	b2cb      	uxtb	r3, r1
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e0e:	4628      	mov	r0, r5
 8001e10:	0103      	lsls	r3, r0, #4
 8001e12:	4620      	mov	r0, r4
 8001e14:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001e18:	4620      	mov	r0, r4
 8001e1a:	0102      	lsls	r2, r0, #4
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	3307      	adds	r3, #7
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	ebad 0d03 	sub.w	sp, sp, r3
 8001e2a:	466b      	mov	r3, sp
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	67fb      	str	r3, [r7, #124]	@ 0x7c

	memset(res, true, messageCount * sizeof(bool));
 8001e34:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8001e40:	f005 fc4a 	bl	80076d8 <memset>

	// Extract 16-bit values from configurations
	for ( uint8_t i = 0; i < messageCount; i++ ) {
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8001e4a:	e034      	b.n	8001eb6 <TPS2482_Init+0x3ce>
		configs[i] = configurations[i].config;
 8001e4c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001e54:	4413      	add	r3, r2
 8001e56:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001e5a:	8819      	ldrh	r1, [r3, #0]
 8001e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e60:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		cals[i] = configurations[i].cal;
 8001e64:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001e72:	8859      	ldrh	r1, [r3, #2]
 8001e74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e78:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		masks[i] = configurations[i].mask;
 8001e7c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001e84:	4413      	add	r3, r2
 8001e86:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001e8a:	8899      	ldrh	r1, [r3, #4]
 8001e8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		alert_limits[i] = configurations[i].alert_lim;
 8001e94:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001ea2:	88d9      	ldrh	r1, [r3, #6]
 8001ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ea8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for ( uint8_t i = 0; i < messageCount; i++ ) {
 8001eac:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8001eb6:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001eba:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d3c4      	bcc.n	8001e4c <TPS2482_Init+0x364>
	}

	// Write configurations to the TPS2482
	TPS2482_Write_Config(hi2c, addresses, configs, messageCount);
 8001ec2:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001eca:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001ecc:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001ece:	f000 fa36 	bl	800233e <TPS2482_Write_Config>
	TPS2482_Write_CAL(hi2c, addresses, cals, messageCount);
 8001ed2:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001ed6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001eda:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001edc:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001ede:	f000 fa41 	bl	8002364 <TPS2482_Write_CAL>
	TPS2482_Write_Mask(hi2c, addresses, masks, messageCount);
 8001ee2:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001ee6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001eea:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001eec:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001eee:	f000 fa4c 	bl	800238a <TPS2482_Write_Mask>
	TPS2482_Write_Alert_Limit(hi2c, addresses, alert_limits, messageCount);
 8001ef2:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001ef6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001efa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001efc:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001efe:	f000 fa57 	bl	80023b0 <TPS2482_Write_Alert_Limit>

	HAL_Delay(100);
 8001f02:	2064      	movs	r0, #100	@ 0x64
 8001f04:	f000 fff0 	bl	8002ee8 <HAL_Delay>

	// Read back configurations
	TPS2482_Get_Config(hi2c, addresses, configs_res, messageCount);
 8001f08:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001f0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f10:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001f12:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001f14:	f000 f91c 	bl	8002150 <TPS2482_Get_Config>
	TPS2482_Get_CAL(hi2c, addresses, cals_res, messageCount);
 8001f18:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001f1c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001f20:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001f22:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001f24:	f000 f94d 	bl	80021c2 <TPS2482_Get_CAL>
	TPS2482_Get_Mask(hi2c, addresses, masks_res, messageCount);
 8001f28:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001f2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001f30:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001f32:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001f34:	f000 f958 	bl	80021e8 <TPS2482_Get_Mask>
	TPS2482_Get_Alert_Limit(hi2c, addresses, alert_limits_res, messageCount);
 8001f38:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001f3c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001f3e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001f40:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001f42:	f000 f964 	bl	800220e <TPS2482_Get_Alert_Limit>
	TPS2482_Get_ID(hi2c, addresses, ids, messageCount);
 8001f46:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001f4a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001f4c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001f4e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001f50:	f000 f970 	bl	8002234 <TPS2482_Get_ID>

	// Validate configurations read back (config reseting wont trigger error)
	for ( uint8_t i = 0; i < messageCount; i++ ) {
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
 8001f5a:	e07a      	b.n	8002052 <TPS2482_Init+0x56a>
		if ( !TPS2482_CONFIG_RST_MASK(configs[i]) ) {
			res[i] &= configs[i] == configs_res[i];
		}
		res[i] &= cals[i] == cals_res[i];
 8001f5c:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001f60:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8001f64:	4413      	add	r3, r2
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f897 20be 	ldrb.w	r2, [r7, #190]	@ 0xbe
 8001f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f72:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001f76:	f897 10be 	ldrb.w	r1, [r7, #190]	@ 0xbe
 8001f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f7e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	bf0c      	ite	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	2300      	movne	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	ea00 0203 	and.w	r2, r0, r3
 8001f90:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001f94:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8001f98:	440b      	add	r3, r1
 8001f9a:	2a00      	cmp	r2, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2201      	movne	r2, #1
 8001fa0:	2200      	moveq	r2, #0
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]

		uint16_t masks_flagless_mask = TPS2482_MASK_SOL | TPS2482_MASK_SUL | TPS2482_MASK_BOL | \
 8001fa6:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001faa:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
										TPS2482_MASK_BUL | TPS2482_MASK_CNVR | TPS2482_MASK_POL;
		res[i] &= masks[i] == (masks_res[i] & masks_flagless_mask);
 8001fae:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001fb2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8001fb6:	4413      	add	r3, r2
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f897 20be 	ldrb.w	r2, [r7, #190]	@ 0xbe
 8001fc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fc4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001fc8:	f897 10be 	ldrb.w	r1, [r7, #190]	@ 0xbe
 8001fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fd0:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8001fd4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8001fd8:	400b      	ands	r3, r1
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	ea00 0203 	and.w	r2, r0, r3
 8001fea:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001fee:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8001ff2:	440b      	add	r3, r1
 8001ff4:	2a00      	cmp	r2, #0
 8001ff6:	bf14      	ite	ne
 8001ff8:	2201      	movne	r2, #1
 8001ffa:	2200      	moveq	r2, #0
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	701a      	strb	r2, [r3, #0]
		res[i] &= alert_limits[i] == alert_limits_res[i];
 8002000:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8002004:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f897 20be 	ldrb.w	r2, [r7, #190]	@ 0xbe
 8002012:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002016:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800201a:	f897 10be 	ldrb.w	r1, [r7, #190]	@ 0xbe
 800201e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002020:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002024:	429a      	cmp	r2, r3
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	ea00 0203 	and.w	r2, r0, r3
 8002032:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8002036:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800203a:	440b      	add	r3, r1
 800203c:	2a00      	cmp	r2, #0
 800203e:	bf14      	ite	ne
 8002040:	2201      	movne	r2, #1
 8002042:	2200      	moveq	r2, #0
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	701a      	strb	r2, [r3, #0]
	for ( uint8_t i = 0; i < messageCount; i++ ) {
 8002048:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 800204c:	3301      	adds	r3, #1
 800204e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
 8002052:	f897 20be 	ldrb.w	r2, [r7, #190]	@ 0xbe
 8002056:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 800205a:	429a      	cmp	r2, r3
 800205c:	f4ff af7e 	bcc.w	8001f5c <TPS2482_Init+0x474>
 8002060:	46b5      	mov	sp, r6
	}
}
 8002062:	bf00      	nop
 8002064:	37c4      	adds	r7, #196	@ 0xc4
 8002066:	46bd      	mov	sp, r7
 8002068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800206c <TPS2482_Get_Register>:

void TPS2482_Get_Register(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint8_t reg, uint16_t *results, uint8_t messageCount) {
 800206c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002070:	b08d      	sub	sp, #52	@ 0x34
 8002072:	af04      	add	r7, sp, #16
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	4613      	mov	r3, r2
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	466b      	mov	r3, sp
 8002080:	461e      	mov	r6, r3
	uint8_t res[2 * messageCount];
 8002082:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002086:	0059      	lsls	r1, r3, #1
 8002088:	1e4b      	subs	r3, r1, #1
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	460a      	mov	r2, r1
 800208e:	2300      	movs	r3, #0
 8002090:	4690      	mov	r8, r2
 8002092:	4699      	mov	r9, r3
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020a8:	460a      	mov	r2, r1
 80020aa:	2300      	movs	r3, #0
 80020ac:	4614      	mov	r4, r2
 80020ae:	461d      	mov	r5, r3
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	00eb      	lsls	r3, r5, #3
 80020ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020be:	00e2      	lsls	r2, r4, #3
 80020c0:	460b      	mov	r3, r1
 80020c2:	3307      	adds	r3, #7
 80020c4:	08db      	lsrs	r3, r3, #3
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	ebad 0d03 	sub.w	sp, sp, r3
 80020cc:	ab04      	add	r3, sp, #16
 80020ce:	3300      	adds	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]

	for ( uint8_t i = 0; i < messageCount; i++ ) {
 80020d2:	2300      	movs	r3, #0
 80020d4:	77fb      	strb	r3, [r7, #31]
 80020d6:	e030      	b.n	800213a <TPS2482_Get_Register+0xce>
		if ( HAL_I2C_Mem_Read(hi2c, addresses[i] << 1, reg, I2C_MEMADD_SIZE_8BIT, &res[2*i], sizeof(*results), HAL_MAX_DELAY) != HAL_OK ) {
 80020d8:	7ffb      	ldrb	r3, [r7, #31]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4413      	add	r3, r2
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	b299      	uxth	r1, r3
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	b298      	uxth	r0, r3
 80020e8:	7ffb      	ldrb	r3, [r7, #31]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4413      	add	r3, r2
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020f4:	9202      	str	r2, [sp, #8]
 80020f6:	2202      	movs	r2, #2
 80020f8:	9201      	str	r2, [sp, #4]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2301      	movs	r3, #1
 80020fe:	4602      	mov	r2, r0
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f002 fac7 	bl	8004694 <HAL_I2C_Mem_Read>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d113      	bne.n	8002134 <TPS2482_Get_Register+0xc8>
			// Todo failure state
		}
		else {
			results[i] = ((uint16_t)(res[2 * i]) << 8) | (uint16_t)(res[2 * i + 1]);
 800210c:	7ffb      	ldrb	r3, [r7, #31]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	b21a      	sxth	r2, r3
 8002118:	7ffb      	ldrb	r3, [r7, #31]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	3301      	adds	r3, #1
 800211e:	6979      	ldr	r1, [r7, #20]
 8002120:	5ccb      	ldrb	r3, [r1, r3]
 8002122:	b21b      	sxth	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b219      	sxth	r1, r3
 8002128:	7ffb      	ldrb	r3, [r7, #31]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	4413      	add	r3, r2
 8002130:	b28a      	uxth	r2, r1
 8002132:	801a      	strh	r2, [r3, #0]
	for ( uint8_t i = 0; i < messageCount; i++ ) {
 8002134:	7ffb      	ldrb	r3, [r7, #31]
 8002136:	3301      	adds	r3, #1
 8002138:	77fb      	strb	r3, [r7, #31]
 800213a:	7ffa      	ldrb	r2, [r7, #31]
 800213c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002140:	429a      	cmp	r2, r3
 8002142:	d3c9      	bcc.n	80020d8 <TPS2482_Get_Register+0x6c>
 8002144:	46b5      	mov	sp, r6
		}
	}
}
 8002146:	bf00      	nop
 8002148:	3724      	adds	r7, #36	@ 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002150 <TPS2482_Get_Config>:

void TPS2482_Get_Config(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *results, uint8_t messageCount) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	70fb      	strb	r3, [r7, #3]
	TPS2482_Get_Register(hi2c, addresses, TPS2482_CONFIG, results, messageCount);
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7ff ff7f 	bl	800206c <TPS2482_Get_Register>
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <TPS2482_Poll_Bus_Voltage>:

void TPS2482_Poll_Shunt_Voltage(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *results, uint8_t messageCount) {
	TPS2482_Get_Register(hi2c, addresses, TPS2482_SHUNT_VOLT, results, messageCount);
}

void TPS2482_Poll_Bus_Voltage(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *results, uint8_t messageCount) {
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af02      	add	r7, sp, #8
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	70fb      	strb	r3, [r7, #3]
	TPS2482_Get_Register(hi2c, addresses, TPS2482_BUS_VOLT, results, messageCount);
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f7ff ff6c 	bl	800206c <TPS2482_Get_Register>
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <TPS2482_Poll_Current>:

void TPS2482_Poll_Power(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *results, uint8_t messageCount) {
	TPS2482_Get_Register(hi2c, addresses, TPS2482_POWER, results, messageCount);
}

void TPS2482_Poll_Current(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *results, uint8_t messageCount) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	70fb      	strb	r3, [r7, #3]
	TPS2482_Get_Register(hi2c, addresses, TPS2482_CURRENT, results, messageCount);
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2204      	movs	r2, #4
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7ff ff59 	bl	800206c <TPS2482_Get_Register>
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <TPS2482_Get_CAL>:

void TPS2482_Get_CAL(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *results, uint8_t messageCount) {
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af02      	add	r7, sp, #8
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	70fb      	strb	r3, [r7, #3]
	TPS2482_Get_Register(hi2c, addresses, TPS2482_CAL, results, messageCount);
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2205      	movs	r2, #5
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f7ff ff46 	bl	800206c <TPS2482_Get_Register>
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <TPS2482_Get_Mask>:

void TPS2482_Get_Mask(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *results, uint8_t messageCount) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	70fb      	strb	r3, [r7, #3]
	TPS2482_Get_Register(hi2c, addresses, TPS2482_MASK, results, messageCount);
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2206      	movs	r2, #6
 80021fe:	68b9      	ldr	r1, [r7, #8]
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7ff ff33 	bl	800206c <TPS2482_Get_Register>
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <TPS2482_Get_Alert_Limit>:

void TPS2482_Get_Alert_Limit(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *results, uint8_t messageCount) {
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af02      	add	r7, sp, #8
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	70fb      	strb	r3, [r7, #3]
	TPS2482_Get_Register(hi2c, addresses, TPS2482_ALERT_LIM, results, messageCount);
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2207      	movs	r2, #7
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f7ff ff20 	bl	800206c <TPS2482_Get_Register>
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <TPS2482_Get_ID>:

void TPS2482_Get_ID(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *results, uint8_t messageCount) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	70fb      	strb	r3, [r7, #3]
	TPS2482_Get_Register(hi2c, addresses, TPS2482_ID, results, messageCount);
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	22ff      	movs	r2, #255	@ 0xff
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7ff ff0d 	bl	800206c <TPS2482_Get_Register>
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <TPS2482_Write_Register>:

void TPS2482_Write_Register(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint8_t reg, uint16_t *transmit, uint8_t messageCount) {
 800225a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800225e:	b08d      	sub	sp, #52	@ 0x34
 8002260:	af04      	add	r7, sp, #16
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	71fb      	strb	r3, [r7, #7]
 800226c:	466b      	mov	r3, sp
 800226e:	461e      	mov	r6, r3
	uint8_t trans[2 * messageCount];
 8002270:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002274:	0059      	lsls	r1, r3, #1
 8002276:	1e4b      	subs	r3, r1, #1
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	460a      	mov	r2, r1
 800227c:	2300      	movs	r3, #0
 800227e:	4690      	mov	r8, r2
 8002280:	4699      	mov	r9, r3
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800228e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002296:	460a      	mov	r2, r1
 8002298:	2300      	movs	r3, #0
 800229a:	4614      	mov	r4, r2
 800229c:	461d      	mov	r5, r3
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	00eb      	lsls	r3, r5, #3
 80022a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ac:	00e2      	lsls	r2, r4, #3
 80022ae:	460b      	mov	r3, r1
 80022b0:	3307      	adds	r3, #7
 80022b2:	08db      	lsrs	r3, r3, #3
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	ebad 0d03 	sub.w	sp, sp, r3
 80022ba:	ab04      	add	r3, sp, #16
 80022bc:	3300      	adds	r3, #0
 80022be:	617b      	str	r3, [r7, #20]

	for ( uint8_t i = 0; i < messageCount; i++ ) {
 80022c0:	2300      	movs	r3, #0
 80022c2:	77fb      	strb	r3, [r7, #31]
 80022c4:	e030      	b.n	8002328 <TPS2482_Write_Register+0xce>
		trans[2 * i] = (uint8_t)((transmit[i] >> 8) & 0xFF);
 80022c6:	7ffb      	ldrb	r3, [r7, #31]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	7ffb      	ldrb	r3, [r7, #31]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	b2d1      	uxtb	r1, r2
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	54d1      	strb	r1, [r2, r3]
		trans[2 * i + 1] = (uint8_t)(transmit[i] & 0xFF);
 80022de:	7ffb      	ldrb	r3, [r7, #31]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	881a      	ldrh	r2, [r3, #0]
 80022e8:	7ffb      	ldrb	r3, [r7, #31]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	3301      	adds	r3, #1
 80022ee:	b2d1      	uxtb	r1, r2
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	54d1      	strb	r1, [r2, r3]

		if ( HAL_I2C_Mem_Write(hi2c, addresses[i] << 1, reg, I2C_MEMADD_SIZE_8BIT, &trans[2 * i], sizeof(uint16_t), HAL_MAX_DELAY) != HAL_OK ) {
 80022f4:	7ffb      	ldrb	r3, [r7, #31]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	4413      	add	r3, r2
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	b299      	uxth	r1, r3
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	b298      	uxth	r0, r3
 8002304:	7ffb      	ldrb	r3, [r7, #31]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4413      	add	r3, r2
 800230c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002310:	9202      	str	r2, [sp, #8]
 8002312:	2202      	movs	r2, #2
 8002314:	9201      	str	r2, [sp, #4]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2301      	movs	r3, #1
 800231a:	4602      	mov	r2, r0
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f002 f8bf 	bl	80044a0 <HAL_I2C_Mem_Write>
	for ( uint8_t i = 0; i < messageCount; i++ ) {
 8002322:	7ffb      	ldrb	r3, [r7, #31]
 8002324:	3301      	adds	r3, #1
 8002326:	77fb      	strb	r3, [r7, #31]
 8002328:	7ffa      	ldrb	r2, [r7, #31]
 800232a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800232e:	429a      	cmp	r2, r3
 8002330:	d3c9      	bcc.n	80022c6 <TPS2482_Write_Register+0x6c>
 8002332:	46b5      	mov	sp, r6
			// Todo failure state
		}
	}
}
 8002334:	bf00      	nop
 8002336:	3724      	adds	r7, #36	@ 0x24
 8002338:	46bd      	mov	sp, r7
 800233a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800233e <TPS2482_Write_Config>:

void TPS2482_Write_Config(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *transmit, uint8_t messageCount) {
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af02      	add	r7, sp, #8
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	70fb      	strb	r3, [r7, #3]
	TPS2482_Write_Register(hi2c, addresses, TPS2482_CONFIG, transmit, messageCount);
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7ff ff7f 	bl	800225a <TPS2482_Write_Register>
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <TPS2482_Write_CAL>:

void TPS2482_Write_CAL(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *transmit, uint8_t messageCount) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	70fb      	strb	r3, [r7, #3]
	TPS2482_Write_Register(hi2c, addresses, TPS2482_CAL, transmit, messageCount);
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2205      	movs	r2, #5
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f7ff ff6c 	bl	800225a <TPS2482_Write_Register>
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <TPS2482_Write_Mask>:

void TPS2482_Write_Mask(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *transmit, uint8_t messageCount) {
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af02      	add	r7, sp, #8
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	70fb      	strb	r3, [r7, #3]
	TPS2482_Write_Register(hi2c, addresses, TPS2482_MASK, transmit, messageCount);
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2206      	movs	r2, #6
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f7ff ff59 	bl	800225a <TPS2482_Write_Register>
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <TPS2482_Write_Alert_Limit>:

void TPS2482_Write_Alert_Limit(I2C_HandleTypeDef *hi2c, uint8_t *addresses, uint16_t *transmit, uint8_t messageCount) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	70fb      	strb	r3, [r7, #3]
	TPS2482_Write_Register(hi2c, addresses, TPS2482_ALERT_LIM, transmit, messageCount);
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2207      	movs	r2, #7
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f7ff ff46 	bl	800225a <TPS2482_Write_Register>
}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <TPS2482_GPIO_Write>:

void TPS2482_GPIO_Write(GPIO_TypeDef **GPIOx, uint16_t *GPIO_Pin, uint8_t messageCount) {
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	4613      	mov	r3, r2
 80023e2:	71fb      	strb	r3, [r7, #7]
	for ( uint8_t i = 0; i < messageCount; i++ ) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	75fb      	strb	r3, [r7, #23]
 80023e8:	e010      	b.n	800240c <TPS2482_GPIO_Write+0x36>
		HAL_GPIO_WritePin(GPIOx[i], GPIO_Pin[i], GPIO_PIN_SET);
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4413      	add	r3, r2
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	4413      	add	r3, r2
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	4619      	mov	r1, r3
 8002402:	f001 feef 	bl	80041e4 <HAL_GPIO_WritePin>
	for ( uint8_t i = 0; i < messageCount; i++ ) {
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	3301      	adds	r3, #1
 800240a:	75fb      	strb	r3, [r7, #23]
 800240c:	7dfa      	ldrb	r2, [r7, #23]
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	429a      	cmp	r2, r3
 8002412:	d3ea      	bcc.n	80023ea <TPS2482_GPIO_Write+0x14>
	}
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <TPS2482_GPIO_Read>:

void TPS2482_GPIO_Read(GPIO_TypeDef **GPIOx, uint16_t *GPIO_Pin, GPIO_PinState *result, uint8_t messageCount) {
 800241e:	b590      	push	{r4, r7, lr}
 8002420:	b087      	sub	sp, #28
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	70fb      	strb	r3, [r7, #3]
	for ( uint8_t i = 0; i < messageCount; i++ ) {
 800242c:	2300      	movs	r3, #0
 800242e:	75fb      	strb	r3, [r7, #23]
 8002430:	e013      	b.n	800245a <TPS2482_GPIO_Read+0x3c>
		result[i] = HAL_GPIO_ReadPin(GPIOx[i], GPIO_Pin[i]);
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4413      	add	r3, r2
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	7dfb      	ldrb	r3, [r7, #23]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	4413      	add	r3, r2
 8002444:	8819      	ldrh	r1, [r3, #0]
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	18d4      	adds	r4, r2, r3
 800244c:	f001 feb2 	bl	80041b4 <HAL_GPIO_ReadPin>
 8002450:	4603      	mov	r3, r0
 8002452:	7023      	strb	r3, [r4, #0]
	for ( uint8_t i = 0; i < messageCount; i++ ) {
 8002454:	7dfb      	ldrb	r3, [r7, #23]
 8002456:	3301      	adds	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
 800245a:	7dfa      	ldrb	r2, [r7, #23]
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	429a      	cmp	r2, r3
 8002460:	d3e7      	bcc.n	8002432 <TPS2482_GPIO_Read+0x14>
	}
}
 8002462:	bf00      	nop
 8002464:	bf00      	nop
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd90      	pop	{r4, r7, pc}

0800246c <TPS2482_Enable>:

void TPS2482_Enable(GPIO_TypeDef **GPIOx, uint16_t *GPIO_Pin, bool *result, uint8_t messageCount) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	70fb      	strb	r3, [r7, #3]
	TPS2482_GPIO_Write(GPIOx, GPIO_Pin, messageCount);
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	461a      	mov	r2, r3
 800247e:	68b9      	ldr	r1, [r7, #8]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f7ff ffa8 	bl	80023d6 <TPS2482_GPIO_Write>

	HAL_Delay(100);
 8002486:	2064      	movs	r0, #100	@ 0x64
 8002488:	f000 fd2e 	bl	8002ee8 <HAL_Delay>

	TPS2482_GPIO_Read(GPIOx, GPIO_Pin, (GPIO_PinState *)result, messageCount);
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff ffc3 	bl	800241e <TPS2482_GPIO_Read>
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a4:	f000 fcae 	bl	8002e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024a8:	f000 f810 	bl	80024cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024ac:	f000 f95a 	bl	8002764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80024b0:	f000 f92e 	bl	8002710 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80024b4:	f000 f8ac 	bl	8002610 <MX_I2C1_Init>
  MX_CAN1_Init();
 80024b8:	f000 f874 	bl	80025a4 <MX_CAN1_Init>
  MX_TIM1_Init();
 80024bc:	f000 f8d6 	bl	800266c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  FEB_Main_Setup();
 80024c0:	f7fe fdda 	bl	8001078 <FEB_Main_Setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	FEB_Main_Loop();
 80024c4:	f7fe fe9a 	bl	80011fc <FEB_Main_Loop>
 80024c8:	e7fc      	b.n	80024c4 <main+0x24>
	...

080024cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b094      	sub	sp, #80	@ 0x50
 80024d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024d2:	f107 031c 	add.w	r3, r7, #28
 80024d6:	2234      	movs	r2, #52	@ 0x34
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f005 f8fc 	bl	80076d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024e0:	f107 0308 	add.w	r3, r7, #8
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	4b29      	ldr	r3, [pc, #164]	@ (800259c <SystemClock_Config+0xd0>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	4a28      	ldr	r2, [pc, #160]	@ (800259c <SystemClock_Config+0xd0>)
 80024fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002500:	4b26      	ldr	r3, [pc, #152]	@ (800259c <SystemClock_Config+0xd0>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800250c:	2300      	movs	r3, #0
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <SystemClock_Config+0xd4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a22      	ldr	r2, [pc, #136]	@ (80025a0 <SystemClock_Config+0xd4>)
 8002516:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <SystemClock_Config+0xd4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002528:	2301      	movs	r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800252c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002530:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002532:	2302      	movs	r3, #2
 8002534:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002536:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800253a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800253c:	2304      	movs	r3, #4
 800253e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002540:	23a0      	movs	r3, #160	@ 0xa0
 8002542:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002544:	2302      	movs	r3, #2
 8002546:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002548:	2302      	movs	r3, #2
 800254a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800254c:	2302      	movs	r3, #2
 800254e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	4618      	mov	r0, r3
 8002556:	f003 f9cd 	bl	80058f4 <HAL_RCC_OscConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002560:	f000 f9c2 	bl	80028e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002564:	230f      	movs	r3, #15
 8002566:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002568:	2302      	movs	r3, #2
 800256a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002570:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002574:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800257a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	2105      	movs	r1, #5
 8002582:	4618      	mov	r0, r3
 8002584:	f002 fe6c 	bl	8005260 <HAL_RCC_ClockConfig>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800258e:	f000 f9ab 	bl	80028e8 <Error_Handler>
  }
}
 8002592:	bf00      	nop
 8002594:	3750      	adds	r7, #80	@ 0x50
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40007000 	.word	0x40007000

080025a4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80025a8:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025aa:	4a18      	ldr	r2, [pc, #96]	@ (800260c <MX_CAN1_Init+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025b0:	2210      	movs	r2, #16
 80025b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025ba:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025bc:	2200      	movs	r2, #0
 80025be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80025c0:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025c6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80025da:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025dc:	2200      	movs	r2, #0
 80025de:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80025e0:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80025e6:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80025f2:	4805      	ldr	r0, [pc, #20]	@ (8002608 <MX_CAN1_Init+0x64>)
 80025f4:	f000 fc9c 	bl	8002f30 <HAL_CAN_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80025fe:	f000 f973 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000430 	.word	0x20000430
 800260c:	40006400 	.word	0x40006400

08002610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002614:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <MX_I2C1_Init+0x50>)
 8002616:	4a13      	ldr	r2, [pc, #76]	@ (8002664 <MX_I2C1_Init+0x54>)
 8002618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <MX_I2C1_Init+0x50>)
 800261c:	4a12      	ldr	r2, [pc, #72]	@ (8002668 <MX_I2C1_Init+0x58>)
 800261e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002620:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <MX_I2C1_Init+0x50>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002626:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <MX_I2C1_Init+0x50>)
 8002628:	2200      	movs	r2, #0
 800262a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800262c:	4b0c      	ldr	r3, [pc, #48]	@ (8002660 <MX_I2C1_Init+0x50>)
 800262e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002634:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <MX_I2C1_Init+0x50>)
 8002636:	2200      	movs	r2, #0
 8002638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800263a:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <MX_I2C1_Init+0x50>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002640:	4b07      	ldr	r3, [pc, #28]	@ (8002660 <MX_I2C1_Init+0x50>)
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <MX_I2C1_Init+0x50>)
 8002648:	2200      	movs	r2, #0
 800264a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800264c:	4804      	ldr	r0, [pc, #16]	@ (8002660 <MX_I2C1_Init+0x50>)
 800264e:	f001 fde3 	bl	8004218 <HAL_I2C_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002658:	f000 f946 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000458 	.word	0x20000458
 8002664:	40005400 	.word	0x40005400
 8002668:	000186a0 	.word	0x000186a0

0800266c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002680:	463b      	mov	r3, r7
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002688:	4b1f      	ldr	r3, [pc, #124]	@ (8002708 <MX_TIM1_Init+0x9c>)
 800268a:	4a20      	ldr	r2, [pc, #128]	@ (800270c <MX_TIM1_Init+0xa0>)
 800268c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160*100-1;
 800268e:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <MX_TIM1_Init+0x9c>)
 8002690:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002694:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002696:	4b1c      	ldr	r3, [pc, #112]	@ (8002708 <MX_TIM1_Init+0x9c>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800269c:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <MX_TIM1_Init+0x9c>)
 800269e:	f242 720f 	movw	r2, #9999	@ 0x270f
 80026a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a4:	4b18      	ldr	r3, [pc, #96]	@ (8002708 <MX_TIM1_Init+0x9c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026aa:	4b17      	ldr	r3, [pc, #92]	@ (8002708 <MX_TIM1_Init+0x9c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026b0:	4b15      	ldr	r3, [pc, #84]	@ (8002708 <MX_TIM1_Init+0x9c>)
 80026b2:	2280      	movs	r2, #128	@ 0x80
 80026b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026b6:	4814      	ldr	r0, [pc, #80]	@ (8002708 <MX_TIM1_Init+0x9c>)
 80026b8:	f003 fbba 	bl	8005e30 <HAL_TIM_Base_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80026c2:	f000 f911 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	4619      	mov	r1, r3
 80026d2:	480d      	ldr	r0, [pc, #52]	@ (8002708 <MX_TIM1_Init+0x9c>)
 80026d4:	f003 fd5c 	bl	8006190 <HAL_TIM_ConfigClockSource>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80026de:	f000 f903 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026ea:	463b      	mov	r3, r7
 80026ec:	4619      	mov	r1, r3
 80026ee:	4806      	ldr	r0, [pc, #24]	@ (8002708 <MX_TIM1_Init+0x9c>)
 80026f0:	f003 ff84 	bl	80065fc <HAL_TIMEx_MasterConfigSynchronization>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80026fa:	f000 f8f5 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200004ac 	.word	0x200004ac
 800270c:	40010000 	.word	0x40010000

08002710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 8002716:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <MX_USART2_UART_Init+0x50>)
 8002718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 800271c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002722:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002734:	4b09      	ldr	r3, [pc, #36]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 8002736:	220c      	movs	r2, #12
 8002738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273a:	4b08      	ldr	r3, [pc, #32]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002740:	4b06      	ldr	r3, [pc, #24]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	@ (800275c <MX_USART2_UART_Init+0x4c>)
 8002748:	f003 ffe8 	bl	800671c <HAL_UART_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002752:	f000 f8c9 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200004f4 	.word	0x200004f4
 8002760:	40004400 	.word	0x40004400

08002764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	@ 0x28
 8002768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
 8002778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	4b4e      	ldr	r3, [pc, #312]	@ (80028b8 <MX_GPIO_Init+0x154>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a4d      	ldr	r2, [pc, #308]	@ (80028b8 <MX_GPIO_Init+0x154>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b4b      	ldr	r3, [pc, #300]	@ (80028b8 <MX_GPIO_Init+0x154>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b47      	ldr	r3, [pc, #284]	@ (80028b8 <MX_GPIO_Init+0x154>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	4a46      	ldr	r2, [pc, #280]	@ (80028b8 <MX_GPIO_Init+0x154>)
 80027a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a6:	4b44      	ldr	r3, [pc, #272]	@ (80028b8 <MX_GPIO_Init+0x154>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4b40      	ldr	r3, [pc, #256]	@ (80028b8 <MX_GPIO_Init+0x154>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a3f      	ldr	r2, [pc, #252]	@ (80028b8 <MX_GPIO_Init+0x154>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b3d      	ldr	r3, [pc, #244]	@ (80028b8 <MX_GPIO_Init+0x154>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	4b39      	ldr	r3, [pc, #228]	@ (80028b8 <MX_GPIO_Init+0x154>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	4a38      	ldr	r2, [pc, #224]	@ (80028b8 <MX_GPIO_Init+0x154>)
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027de:	4b36      	ldr	r3, [pc, #216]	@ (80028b8 <MX_GPIO_Init+0x154>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_EN_Pin|AB_EN_Pin|CP_EN_Pin, GPIO_PIN_RESET);
 80027ea:	2200      	movs	r2, #0
 80027ec:	f640 0128 	movw	r1, #2088	@ 0x828
 80027f0:	4832      	ldr	r0, [pc, #200]	@ (80028bc <MX_GPIO_Init+0x158>)
 80027f2:	f001 fcf7 	bl	80041e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SH_EN_Pin|BL_SWITCH_Pin|AS_EN_Pin, GPIO_PIN_RESET);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2113      	movs	r1, #19
 80027fa:	4831      	ldr	r0, [pc, #196]	@ (80028c0 <MX_GPIO_Init+0x15c>)
 80027fc:	f001 fcf2 	bl	80041e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L_EN_Pin|AF_EN_Pin, GPIO_PIN_RESET);
 8002800:	2200      	movs	r2, #0
 8002802:	2124      	movs	r1, #36	@ 0x24
 8002804:	482f      	ldr	r0, [pc, #188]	@ (80028c4 <MX_GPIO_Init+0x160>)
 8002806:	f001 fced 	bl	80041e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SH_ALERT_Pin RF_ALERT_Pin RF_PG_Pin AF_PG_Pin
                           CP_PG_Pin AF_ALERT_Pin */
  GPIO_InitStruct.Pin = SH_ALERT_Pin|RF_ALERT_Pin|RF_PG_Pin|AF_PG_Pin
 800280a:	f241 4317 	movw	r3, #5143	@ 0x1417
 800280e:	617b      	str	r3, [r7, #20]
                          |CP_PG_Pin|AF_ALERT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	4827      	ldr	r0, [pc, #156]	@ (80028bc <MX_GPIO_Init+0x158>)
 8002820:	f001 fb34 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_EN_Pin AB_EN_Pin CP_EN_Pin */
  GPIO_InitStruct.Pin = RF_EN_Pin|AB_EN_Pin|CP_EN_Pin;
 8002824:	f640 0328 	movw	r3, #2088	@ 0x828
 8002828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282a:	2301      	movs	r3, #1
 800282c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	4619      	mov	r1, r3
 800283c:	481f      	ldr	r0, [pc, #124]	@ (80028bc <MX_GPIO_Init+0x158>)
 800283e:	f001 fb25 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SH_EN_Pin BL_SWITCH_Pin AS_EN_Pin */
  GPIO_InitStruct.Pin = SH_EN_Pin|BL_SWITCH_Pin|AS_EN_Pin;
 8002842:	2313      	movs	r3, #19
 8002844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002846:	2301      	movs	r3, #1
 8002848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	4819      	ldr	r0, [pc, #100]	@ (80028c0 <MX_GPIO_Init+0x15c>)
 800285a:	f001 fb17 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : AS_ALERT_Pin AS_PG_Pin SH_PG_Pin CP_ALERT_Pin */
  GPIO_InitStruct.Pin = AS_ALERT_Pin|AS_PG_Pin|SH_PG_Pin|CP_ALERT_Pin;
 800285e:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 8002862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	4619      	mov	r1, r3
 8002872:	4813      	ldr	r0, [pc, #76]	@ (80028c0 <MX_GPIO_Init+0x15c>)
 8002874:	f001 fb0a 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : AB_ALERT_Pin AB_PG_Pin L_ALERT_Pin L_PG_Pin
                           LV_PG_Pin LV_ALERT_Pin */
  GPIO_InitStruct.Pin = AB_ALERT_Pin|AB_PG_Pin|L_ALERT_Pin|L_PG_Pin
 8002878:	f244 43c3 	movw	r3, #17603	@ 0x44c3
 800287c:	617b      	str	r3, [r7, #20]
                          |LV_PG_Pin|LV_ALERT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002886:	f107 0314 	add.w	r3, r7, #20
 800288a:	4619      	mov	r1, r3
 800288c:	480d      	ldr	r0, [pc, #52]	@ (80028c4 <MX_GPIO_Init+0x160>)
 800288e:	f001 fafd 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : L_EN_Pin AF_EN_Pin */
  GPIO_InitStruct.Pin = L_EN_Pin|AF_EN_Pin;
 8002892:	2324      	movs	r3, #36	@ 0x24
 8002894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	2301      	movs	r3, #1
 8002898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4806      	ldr	r0, [pc, #24]	@ (80028c4 <MX_GPIO_Init+0x160>)
 80028aa:	f001 faef 	bl	8003e8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028ae:	bf00      	nop
 80028b0:	3728      	adds	r7, #40	@ 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020800 	.word	0x40020800
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40020400 	.word	0x40020400

080028c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    if ( htim == &htim1 ) { // 1 ms timer callback
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a04      	ldr	r2, [pc, #16]	@ (80028e4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_TIM_PeriodElapsedCallback+0x14>
    	FEB_1ms_Callback();
 80028d8:	f7fe fc98 	bl	800120c <FEB_1ms_Callback>
    }
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	200004ac 	.word	0x200004ac

080028e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ec:	b672      	cpsid	i
}
 80028ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <Error_Handler+0x8>

080028f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <HAL_MspInit+0x4c>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	4a0f      	ldr	r2, [pc, #60]	@ (8002940 <HAL_MspInit+0x4c>)
 8002904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002908:	6453      	str	r3, [r2, #68]	@ 0x44
 800290a:	4b0d      	ldr	r3, [pc, #52]	@ (8002940 <HAL_MspInit+0x4c>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <HAL_MspInit+0x4c>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	4a08      	ldr	r2, [pc, #32]	@ (8002940 <HAL_MspInit+0x4c>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	@ 0x40
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_MspInit+0x4c>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002932:	2007      	movs	r0, #7
 8002934:	f001 fa68 	bl	8003e08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	@ 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a21      	ldr	r2, [pc, #132]	@ (80029e8 <HAL_CAN_MspInit+0xa4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d13c      	bne.n	80029e0 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_CAN_MspInit+0xa8>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	4a1f      	ldr	r2, [pc, #124]	@ (80029ec <HAL_CAN_MspInit+0xa8>)
 8002970:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002974:	6413      	str	r3, [r2, #64]	@ 0x40
 8002976:	4b1d      	ldr	r3, [pc, #116]	@ (80029ec <HAL_CAN_MspInit+0xa8>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b19      	ldr	r3, [pc, #100]	@ (80029ec <HAL_CAN_MspInit+0xa8>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a18      	ldr	r2, [pc, #96]	@ (80029ec <HAL_CAN_MspInit+0xa8>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b16      	ldr	r3, [pc, #88]	@ (80029ec <HAL_CAN_MspInit+0xa8>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800299e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80029a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ac:	2303      	movs	r3, #3
 80029ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80029b0:	2309      	movs	r3, #9
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	480d      	ldr	r0, [pc, #52]	@ (80029f0 <HAL_CAN_MspInit+0xac>)
 80029bc:	f001 fa66 	bl	8003e8c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	2014      	movs	r0, #20
 80029c6:	f001 fa2a 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80029ca:	2014      	movs	r0, #20
 80029cc:	f001 fa43 	bl	8003e56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	2015      	movs	r0, #21
 80029d6:	f001 fa22 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80029da:	2015      	movs	r0, #21
 80029dc:	f001 fa3b 	bl	8003e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80029e0:	bf00      	nop
 80029e2:	3728      	adds	r7, #40	@ 0x28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40006400 	.word	0x40006400
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40020000 	.word	0x40020000

080029f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	@ 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a19      	ldr	r2, [pc, #100]	@ (8002a78 <HAL_I2C_MspInit+0x84>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d12c      	bne.n	8002a70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	4b18      	ldr	r3, [pc, #96]	@ (8002a7c <HAL_I2C_MspInit+0x88>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	4a17      	ldr	r2, [pc, #92]	@ (8002a7c <HAL_I2C_MspInit+0x88>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a26:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <HAL_I2C_MspInit+0x88>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a38:	2312      	movs	r3, #18
 8002a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a44:	2304      	movs	r3, #4
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	480c      	ldr	r0, [pc, #48]	@ (8002a80 <HAL_I2C_MspInit+0x8c>)
 8002a50:	f001 fa1c 	bl	8003e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <HAL_I2C_MspInit+0x88>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	4a07      	ldr	r2, [pc, #28]	@ (8002a7c <HAL_I2C_MspInit+0x88>)
 8002a5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <HAL_I2C_MspInit+0x88>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a70:	bf00      	nop
 8002a72:	3728      	adds	r7, #40	@ 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40005400 	.word	0x40005400
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40020400 	.word	0x40020400

08002a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0e      	ldr	r2, [pc, #56]	@ (8002acc <HAL_TIM_Base_MspInit+0x48>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d115      	bne.n	8002ac2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x4c>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x4c>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x4c>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2019      	movs	r0, #25
 8002ab8:	f001 f9b1 	bl	8003e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002abc:	2019      	movs	r0, #25
 8002abe:	f001 f9ca 	bl	8003e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40010000 	.word	0x40010000
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	@ 0x28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a19      	ldr	r2, [pc, #100]	@ (8002b58 <HAL_UART_MspInit+0x84>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d12b      	bne.n	8002b4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	4b18      	ldr	r3, [pc, #96]	@ (8002b5c <HAL_UART_MspInit+0x88>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	4a17      	ldr	r2, [pc, #92]	@ (8002b5c <HAL_UART_MspInit+0x88>)
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b06:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <HAL_UART_MspInit+0x88>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <HAL_UART_MspInit+0x88>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	4a10      	ldr	r2, [pc, #64]	@ (8002b5c <HAL_UART_MspInit+0x88>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b22:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <HAL_UART_MspInit+0x88>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b2e:	230c      	movs	r3, #12
 8002b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	2302      	movs	r3, #2
 8002b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b3e:	2307      	movs	r3, #7
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	4619      	mov	r1, r3
 8002b48:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <HAL_UART_MspInit+0x8c>)
 8002b4a:	f001 f99f 	bl	8003e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b4e:	bf00      	nop
 8002b50:	3728      	adds	r7, #40	@ 0x28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40004400 	.word	0x40004400
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40020000 	.word	0x40020000

08002b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b68:	bf00      	nop
 8002b6a:	e7fd      	b.n	8002b68 <NMI_Handler+0x4>

08002b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b70:	bf00      	nop
 8002b72:	e7fd      	b.n	8002b70 <HardFault_Handler+0x4>

08002b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <MemManage_Handler+0x4>

08002b7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <BusFault_Handler+0x4>

08002b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <UsageFault_Handler+0x4>

08002b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bba:	f000 f975 	bl	8002ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bc8:	4802      	ldr	r0, [pc, #8]	@ (8002bd4 <CAN1_RX0_IRQHandler+0x10>)
 8002bca:	f000 fe1e 	bl	800380a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000430 	.word	0x20000430

08002bd8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bdc:	4802      	ldr	r0, [pc, #8]	@ (8002be8 <CAN1_RX1_IRQHandler+0x10>)
 8002bde:	f000 fe14 	bl	800380a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000430 	.word	0x20000430

08002bec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bf0:	4802      	ldr	r0, [pc, #8]	@ (8002bfc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002bf2:	f003 f9dd 	bl	8005fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200004ac 	.word	0x200004ac

08002c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return 1;
 8002c04:	2301      	movs	r3, #1
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <_kill>:

int _kill(int pid, int sig)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c1a:	f004 fd69 	bl	80076f0 <__errno>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2216      	movs	r2, #22
 8002c22:	601a      	str	r2, [r3, #0]
  return -1;
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <_exit>:

void _exit (int status)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ffe7 	bl	8002c10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c42:	bf00      	nop
 8002c44:	e7fd      	b.n	8002c42 <_exit+0x12>

08002c46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	e00a      	b.n	8002c6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c58:	f3af 8000 	nop.w
 8002c5c:	4601      	mov	r1, r0
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	60ba      	str	r2, [r7, #8]
 8002c64:	b2ca      	uxtb	r2, r1
 8002c66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	dbf0      	blt.n	8002c58 <_read+0x12>
  }

  return len;
 8002c76:	687b      	ldr	r3, [r7, #4]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	e009      	b.n	8002ca6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	60ba      	str	r2, [r7, #8]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	dbf1      	blt.n	8002c92 <_write+0x12>
  }
  return len;
 8002cae:	687b      	ldr	r3, [r7, #4]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_close>:

int _close(int file)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ce0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <_isatty>:

int _isatty(int file)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cf8:	2301      	movs	r3, #1
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d28:	4a14      	ldr	r2, [pc, #80]	@ (8002d7c <_sbrk+0x5c>)
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <_sbrk+0x60>)
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d34:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <_sbrk+0x64>)
 8002d3e:	4a12      	ldr	r2, [pc, #72]	@ (8002d88 <_sbrk+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d42:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d207      	bcs.n	8002d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d50:	f004 fcce 	bl	80076f0 <__errno>
 8002d54:	4603      	mov	r3, r0
 8002d56:	220c      	movs	r2, #12
 8002d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d5e:	e009      	b.n	8002d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d60:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d66:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a05      	ldr	r2, [pc, #20]	@ (8002d84 <_sbrk+0x64>)
 8002d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20020000 	.word	0x20020000
 8002d80:	00000400 	.word	0x00000400
 8002d84:	2000053c 	.word	0x2000053c
 8002d88:	20000690 	.word	0x20000690

08002d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d90:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <SystemInit+0x20>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d96:	4a05      	ldr	r2, [pc, #20]	@ (8002dac <SystemInit+0x20>)
 8002d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002db0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002de8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002db4:	f7ff ffea 	bl	8002d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002db8:	480c      	ldr	r0, [pc, #48]	@ (8002dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dba:	490d      	ldr	r1, [pc, #52]	@ (8002df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dc0:	e002      	b.n	8002dc8 <LoopCopyDataInit>

08002dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dc6:	3304      	adds	r3, #4

08002dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dcc:	d3f9      	bcc.n	8002dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dce:	4a0a      	ldr	r2, [pc, #40]	@ (8002df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8002dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd4:	e001      	b.n	8002dda <LoopFillZerobss>

08002dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd8:	3204      	adds	r2, #4

08002dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ddc:	d3fb      	bcc.n	8002dd6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002dde:	f004 fc8d 	bl	80076fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002de2:	f7ff fb5d 	bl	80024a0 <main>
  bx  lr    
 8002de6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002df4:	08009958 	.word	0x08009958
  ldr r2, =_sbss
 8002df8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002dfc:	20000690 	.word	0x20000690

08002e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e00:	e7fe      	b.n	8002e00 <ADC_IRQHandler>
	...

08002e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e08:	4b0e      	ldr	r3, [pc, #56]	@ (8002e44 <HAL_Init+0x40>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e44 <HAL_Init+0x40>)
 8002e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e14:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <HAL_Init+0x40>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0a      	ldr	r2, [pc, #40]	@ (8002e44 <HAL_Init+0x40>)
 8002e1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e20:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <HAL_Init+0x40>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a07      	ldr	r2, [pc, #28]	@ (8002e44 <HAL_Init+0x40>)
 8002e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e2c:	2003      	movs	r0, #3
 8002e2e:	f000 ffeb 	bl	8003e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e32:	2000      	movs	r0, #0
 8002e34:	f000 f808 	bl	8002e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e38:	f7ff fd5c 	bl	80028f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023c00 	.word	0x40023c00

08002e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e50:	4b12      	ldr	r3, [pc, #72]	@ (8002e9c <HAL_InitTick+0x54>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <HAL_InitTick+0x58>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 f803 	bl	8003e72 <HAL_SYSTICK_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00e      	b.n	8002e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b0f      	cmp	r3, #15
 8002e7a:	d80a      	bhi.n	8002e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e84:	f000 ffcb 	bl	8003e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e88:	4a06      	ldr	r2, [pc, #24]	@ (8002ea4 <HAL_InitTick+0x5c>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e000      	b.n	8002e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000020 	.word	0x20000020
 8002ea0:	20000028 	.word	0x20000028
 8002ea4:	20000024 	.word	0x20000024

08002ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eac:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <HAL_IncTick+0x20>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <HAL_IncTick+0x24>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a04      	ldr	r2, [pc, #16]	@ (8002ecc <HAL_IncTick+0x24>)
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000028 	.word	0x20000028
 8002ecc:	20000540 	.word	0x20000540

08002ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	@ (8002ee4 <HAL_GetTick+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000540 	.word	0x20000540

08002ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef0:	f7ff ffee 	bl	8002ed0 <HAL_GetTick>
 8002ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f00:	d005      	beq.n	8002f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <HAL_Delay+0x44>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f0e:	bf00      	nop
 8002f10:	f7ff ffde 	bl	8002ed0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d8f7      	bhi.n	8002f10 <HAL_Delay+0x28>
  {
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000028 	.word	0x20000028

08002f30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0ed      	b.n	800311e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff fcf8 	bl	8002944 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f64:	f7ff ffb4 	bl	8002ed0 <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f6a:	e012      	b.n	8002f92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f6c:	f7ff ffb0 	bl	8002ed0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b0a      	cmp	r3, #10
 8002f78:	d90b      	bls.n	8002f92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2205      	movs	r2, #5
 8002f8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0c5      	b.n	800311e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0e5      	beq.n	8002f6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0202 	bic.w	r2, r2, #2
 8002fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fb0:	f7ff ff8e 	bl	8002ed0 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fb6:	e012      	b.n	8002fde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fb8:	f7ff ff8a 	bl	8002ed0 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b0a      	cmp	r3, #10
 8002fc4:	d90b      	bls.n	8002fde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2205      	movs	r2, #5
 8002fd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e09f      	b.n	800311e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e5      	bne.n	8002fb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7e1b      	ldrb	r3, [r3, #24]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d108      	bne.n	8003006 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e007      	b.n	8003016 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7e5b      	ldrb	r3, [r3, #25]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d108      	bne.n	8003030 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e007      	b.n	8003040 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800303e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7e9b      	ldrb	r3, [r3, #26]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d108      	bne.n	800305a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0220 	orr.w	r2, r2, #32
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e007      	b.n	800306a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0220 	bic.w	r2, r2, #32
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7edb      	ldrb	r3, [r3, #27]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d108      	bne.n	8003084 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0210 	bic.w	r2, r2, #16
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e007      	b.n	8003094 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0210 	orr.w	r2, r2, #16
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	7f1b      	ldrb	r3, [r3, #28]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d108      	bne.n	80030ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0208 	orr.w	r2, r2, #8
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e007      	b.n	80030be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0208 	bic.w	r2, r2, #8
 80030bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7f5b      	ldrb	r3, [r3, #29]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d108      	bne.n	80030d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0204 	orr.w	r2, r2, #4
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e007      	b.n	80030e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0204 	bic.w	r2, r2, #4
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	ea42 0103 	orr.w	r1, r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	1e5a      	subs	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800313e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d003      	beq.n	800314e <HAL_CAN_ConfigFilter+0x26>
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	2b02      	cmp	r3, #2
 800314a:	f040 80be 	bne.w	80032ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800314e:	4b65      	ldr	r3, [pc, #404]	@ (80032e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8003150:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003168:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	431a      	orrs	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	2201      	movs	r2, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	43db      	mvns	r3, r3
 80031a0:	401a      	ands	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d123      	bne.n	80031f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	401a      	ands	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3248      	adds	r2, #72	@ 0x48
 80031d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ee:	6979      	ldr	r1, [r7, #20]
 80031f0:	3348      	adds	r3, #72	@ 0x48
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d122      	bne.n	8003246 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	431a      	orrs	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003220:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	3248      	adds	r2, #72	@ 0x48
 8003226:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800323a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800323c:	6979      	ldr	r1, [r7, #20]
 800323e:	3348      	adds	r3, #72	@ 0x48
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43db      	mvns	r3, r3
 8003258:	401a      	ands	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003260:	e007      	b.n	8003272 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	431a      	orrs	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43db      	mvns	r3, r3
 8003284:	401a      	ands	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800328c:	e007      	b.n	800329e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	431a      	orrs	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d107      	bne.n	80032b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80032bc:	f023 0201 	bic.w	r2, r3, #1
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e006      	b.n	80032d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	40006400 	.word	0x40006400

080032e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d12e      	bne.n	800335a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003314:	f7ff fddc 	bl	8002ed0 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800331a:	e012      	b.n	8003342 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800331c:	f7ff fdd8 	bl	8002ed0 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b0a      	cmp	r3, #10
 8003328:	d90b      	bls.n	8003342 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2205      	movs	r2, #5
 800333a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e012      	b.n	8003368 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e5      	bne.n	800331c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e006      	b.n	8003368 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
  }
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003370:	b480      	push	{r7}
 8003372:	b089      	sub	sp, #36	@ 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003384:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800338e:	7ffb      	ldrb	r3, [r7, #31]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d003      	beq.n	800339c <HAL_CAN_AddTxMessage+0x2c>
 8003394:	7ffb      	ldrb	r3, [r7, #31]
 8003396:	2b02      	cmp	r3, #2
 8003398:	f040 80ad 	bne.w	80034f6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8095 	beq.w	80034e6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	0e1b      	lsrs	r3, r3, #24
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80033c6:	2201      	movs	r2, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	409a      	lsls	r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10d      	bne.n	80033f4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033e2:	68f9      	ldr	r1, [r7, #12]
 80033e4:	6809      	ldr	r1, [r1, #0]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	3318      	adds	r3, #24
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	440b      	add	r3, r1
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e00f      	b.n	8003414 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033fe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003404:	68f9      	ldr	r1, [r7, #12]
 8003406:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003408:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3318      	adds	r3, #24
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	440b      	add	r3, r1
 8003412:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6819      	ldr	r1, [r3, #0]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3318      	adds	r3, #24
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	440b      	add	r3, r1
 8003424:	3304      	adds	r3, #4
 8003426:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	7d1b      	ldrb	r3, [r3, #20]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d111      	bne.n	8003454 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	3318      	adds	r3, #24
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	4413      	add	r3, r2
 800343c:	3304      	adds	r3, #4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	6811      	ldr	r1, [r2, #0]
 8003444:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3318      	adds	r3, #24
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	440b      	add	r3, r1
 8003450:	3304      	adds	r3, #4
 8003452:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3307      	adds	r3, #7
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	061a      	lsls	r2, r3, #24
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3306      	adds	r3, #6
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3305      	adds	r3, #5
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	4313      	orrs	r3, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	3204      	adds	r2, #4
 8003474:	7812      	ldrb	r2, [r2, #0]
 8003476:	4610      	mov	r0, r2
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	6811      	ldr	r1, [r2, #0]
 800347c:	ea43 0200 	orr.w	r2, r3, r0
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	440b      	add	r3, r1
 8003486:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800348a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3303      	adds	r3, #3
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	061a      	lsls	r2, r3, #24
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3302      	adds	r3, #2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3301      	adds	r3, #1
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	4313      	orrs	r3, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	7812      	ldrb	r2, [r2, #0]
 80034ac:	4610      	mov	r0, r2
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	6811      	ldr	r1, [r2, #0]
 80034b2:	ea43 0200 	orr.w	r2, r3, r0
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	440b      	add	r3, r1
 80034bc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80034c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	3318      	adds	r3, #24
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	4413      	add	r3, r2
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	6811      	ldr	r1, [r2, #0]
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	3318      	adds	r3, #24
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	440b      	add	r3, r1
 80034e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e00e      	b.n	8003504 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e006      	b.n	8003504 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	3724      	adds	r7, #36	@ 0x24
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003522:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003524:	7afb      	ldrb	r3, [r7, #11]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d002      	beq.n	8003530 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800352a:	7afb      	ldrb	r3, [r7, #11]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d11d      	bne.n	800356c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3301      	adds	r3, #1
 8003542:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3301      	adds	r3, #1
 8003556:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	3301      	adds	r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800356c:	68fb      	ldr	r3, [r7, #12]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800357a:	b480      	push	{r7}
 800357c:	b087      	sub	sp, #28
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800358e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d003      	beq.n	800359e <HAL_CAN_GetRxMessage+0x24>
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	2b02      	cmp	r3, #2
 800359a:	f040 8103 	bne.w	80037a4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10e      	bne.n	80035c2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d116      	bne.n	80035e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0f7      	b.n	80037b2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d107      	bne.n	80035e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0e8      	b.n	80037b2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	331b      	adds	r3, #27
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	4413      	add	r3, r2
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0204 	and.w	r2, r3, #4
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	331b      	adds	r3, #27
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	4413      	add	r3, r2
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0d5b      	lsrs	r3, r3, #21
 800360e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e00b      	b.n	8003630 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	331b      	adds	r3, #27
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	08db      	lsrs	r3, r3, #3
 8003628:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	331b      	adds	r3, #27
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	4413      	add	r3, r2
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0202 	and.w	r2, r3, #2
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	331b      	adds	r3, #27
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	3304      	adds	r3, #4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2208      	movs	r2, #8
 8003662:	611a      	str	r2, [r3, #16]
 8003664:	e00b      	b.n	800367e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	331b      	adds	r3, #27
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	4413      	add	r3, r2
 8003672:	3304      	adds	r3, #4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 020f 	and.w	r2, r3, #15
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	331b      	adds	r3, #27
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	4413      	add	r3, r2
 800368a:	3304      	adds	r3, #4
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	b2da      	uxtb	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	331b      	adds	r3, #27
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	4413      	add	r3, r2
 80036a2:	3304      	adds	r3, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0a1a      	lsrs	r2, r3, #8
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	3301      	adds	r3, #1
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	0c1a      	lsrs	r2, r3, #16
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	3302      	adds	r3, #2
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	4413      	add	r3, r2
 8003702:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	0e1a      	lsrs	r2, r3, #24
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	3303      	adds	r3, #3
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	4413      	add	r3, r2
 800371c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	3304      	adds	r3, #4
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	4413      	add	r3, r2
 8003734:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	0a1a      	lsrs	r2, r3, #8
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	3305      	adds	r3, #5
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	4413      	add	r3, r2
 800374e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	0c1a      	lsrs	r2, r3, #16
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	3306      	adds	r3, #6
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	4413      	add	r3, r2
 8003768:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	0e1a      	lsrs	r2, r3, #24
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	3307      	adds	r3, #7
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d108      	bne.n	8003790 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0220 	orr.w	r2, r2, #32
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	e007      	b.n	80037a0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0220 	orr.w	r2, r2, #32
 800379e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e006      	b.n	80037b2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ce:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d002      	beq.n	80037dc <HAL_CAN_ActivateNotification+0x1e>
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d109      	bne.n	80037f0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6959      	ldr	r1, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	e006      	b.n	80037fe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b08a      	sub	sp, #40	@ 0x28
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003812:	2300      	movs	r3, #0
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d07c      	beq.n	800394a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d023      	beq.n	80038a2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f983 	bl	8003b78 <HAL_CAN_TxMailbox0CompleteCallback>
 8003872:	e016      	b.n	80038a2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d004      	beq.n	8003888 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800387e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003880:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
 8003886:	e00c      	b.n	80038a2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d004      	beq.n	800389c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
 800389a:	e002      	b.n	80038a2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f989 	bl	8003bb4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d024      	beq.n	80038f6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f963 	bl	8003b8c <HAL_CAN_TxMailbox1CompleteCallback>
 80038c6:	e016      	b.n	80038f6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038da:	e00c      	b.n	80038f6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ee:	e002      	b.n	80038f6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f969 	bl	8003bc8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d024      	beq.n	800394a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003908:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f943 	bl	8003ba0 <HAL_CAN_TxMailbox2CompleteCallback>
 800391a:	e016      	b.n	800394a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
 800392e:	e00c      	b.n	800394a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d004      	beq.n	8003944 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800393a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24
 8003942:	e002      	b.n	800394a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f949 	bl	8003bdc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00c      	beq.n	800396e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003964:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2210      	movs	r2, #16
 800396c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d006      	beq.n	8003990 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2208      	movs	r2, #8
 8003988:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f930 	bl	8003bf0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fd fb0b 	bl	8000fc4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00c      	beq.n	80039d2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2210      	movs	r2, #16
 80039d0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00b      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d006      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2208      	movs	r2, #8
 80039ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f912 	bl	8003c18 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f8f9 	bl	8003c04 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2210      	movs	r2, #16
 8003a2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8fc 	bl	8003c2c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d006      	beq.n	8003a56 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2208      	movs	r2, #8
 8003a4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f8f5 	bl	8003c40 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d07b      	beq.n	8003b58 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d072      	beq.n	8003b50 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	f043 0302 	orr.w	r3, r3, #2
 8003aa0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab8:	f043 0304 	orr.w	r3, r3, #4
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d043      	beq.n	8003b50 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d03e      	beq.n	8003b50 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ad8:	2b60      	cmp	r3, #96	@ 0x60
 8003ada:	d02b      	beq.n	8003b34 <HAL_CAN_IRQHandler+0x32a>
 8003adc:	2b60      	cmp	r3, #96	@ 0x60
 8003ade:	d82e      	bhi.n	8003b3e <HAL_CAN_IRQHandler+0x334>
 8003ae0:	2b50      	cmp	r3, #80	@ 0x50
 8003ae2:	d022      	beq.n	8003b2a <HAL_CAN_IRQHandler+0x320>
 8003ae4:	2b50      	cmp	r3, #80	@ 0x50
 8003ae6:	d82a      	bhi.n	8003b3e <HAL_CAN_IRQHandler+0x334>
 8003ae8:	2b40      	cmp	r3, #64	@ 0x40
 8003aea:	d019      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x316>
 8003aec:	2b40      	cmp	r3, #64	@ 0x40
 8003aee:	d826      	bhi.n	8003b3e <HAL_CAN_IRQHandler+0x334>
 8003af0:	2b30      	cmp	r3, #48	@ 0x30
 8003af2:	d010      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x30c>
 8003af4:	2b30      	cmp	r3, #48	@ 0x30
 8003af6:	d822      	bhi.n	8003b3e <HAL_CAN_IRQHandler+0x334>
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d002      	beq.n	8003b02 <HAL_CAN_IRQHandler+0x2f8>
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d005      	beq.n	8003b0c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b00:	e01d      	b.n	8003b3e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	f043 0308 	orr.w	r3, r3, #8
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b0a:	e019      	b.n	8003b40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	f043 0310 	orr.w	r3, r3, #16
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b14:	e014      	b.n	8003b40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	f043 0320 	orr.w	r3, r3, #32
 8003b1c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b1e:	e00f      	b.n	8003b40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b28:	e00a      	b.n	8003b40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b32:	e005      	b.n	8003b40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003b3c:	e000      	b.n	8003b40 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b3e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003b4e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2204      	movs	r2, #4
 8003b56:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d008      	beq.n	8003b70 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f872 	bl	8003c54 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b70:	bf00      	nop
 8003b72:	3728      	adds	r7, #40	@ 0x28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c84:	4013      	ands	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c9a:	4a04      	ldr	r2, [pc, #16]	@ (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	60d3      	str	r3, [r2, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb4:	4b04      	ldr	r3, [pc, #16]	@ (8003cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	f003 0307 	and.w	r3, r3, #7
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	db0b      	blt.n	8003cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	f003 021f 	and.w	r2, r3, #31
 8003ce4:	4907      	ldr	r1, [pc, #28]	@ (8003d04 <__NVIC_EnableIRQ+0x38>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2001      	movs	r0, #1
 8003cee:	fa00 f202 	lsl.w	r2, r0, r2
 8003cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	e000e100 	.word	0xe000e100

08003d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	6039      	str	r1, [r7, #0]
 8003d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	db0a      	blt.n	8003d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	490c      	ldr	r1, [pc, #48]	@ (8003d54 <__NVIC_SetPriority+0x4c>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	0112      	lsls	r2, r2, #4
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d30:	e00a      	b.n	8003d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4908      	ldr	r1, [pc, #32]	@ (8003d58 <__NVIC_SetPriority+0x50>)
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	3b04      	subs	r3, #4
 8003d40:	0112      	lsls	r2, r2, #4
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	440b      	add	r3, r1
 8003d46:	761a      	strb	r2, [r3, #24]
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000e100 	.word	0xe000e100
 8003d58:	e000ed00 	.word	0xe000ed00

08003d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b089      	sub	sp, #36	@ 0x24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f1c3 0307 	rsb	r3, r3, #7
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	bf28      	it	cs
 8003d7a:	2304      	movcs	r3, #4
 8003d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3304      	adds	r3, #4
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d902      	bls.n	8003d8c <NVIC_EncodePriority+0x30>
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3b03      	subs	r3, #3
 8003d8a:	e000      	b.n	8003d8e <NVIC_EncodePriority+0x32>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	401a      	ands	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dae:	43d9      	mvns	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	4313      	orrs	r3, r2
         );
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3724      	adds	r7, #36	@ 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dd4:	d301      	bcc.n	8003dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00f      	b.n	8003dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <SysTick_Config+0x40>)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003de2:	210f      	movs	r1, #15
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003de8:	f7ff ff8e 	bl	8003d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dec:	4b05      	ldr	r3, [pc, #20]	@ (8003e04 <SysTick_Config+0x40>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003df2:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <SysTick_Config+0x40>)
 8003df4:	2207      	movs	r2, #7
 8003df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	e000e010 	.word	0xe000e010

08003e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff29 	bl	8003c68 <__NVIC_SetPriorityGrouping>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4603      	mov	r3, r0
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e30:	f7ff ff3e 	bl	8003cb0 <__NVIC_GetPriorityGrouping>
 8003e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	6978      	ldr	r0, [r7, #20]
 8003e3c:	f7ff ff8e 	bl	8003d5c <NVIC_EncodePriority>
 8003e40:	4602      	mov	r2, r0
 8003e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e46:	4611      	mov	r1, r2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff5d 	bl	8003d08 <__NVIC_SetPriority>
}
 8003e4e:	bf00      	nop
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff31 	bl	8003ccc <__NVIC_EnableIRQ>
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ffa2 	bl	8003dc4 <SysTick_Config>
 8003e80:	4603      	mov	r3, r0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	@ 0x24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	e165      	b.n	8004174 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	f040 8154 	bne.w	800416e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d005      	beq.n	8003ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d130      	bne.n	8003f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f14:	2201      	movs	r2, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 0201 	and.w	r2, r3, #1
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d017      	beq.n	8003f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d123      	bne.n	8003fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	08da      	lsrs	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3208      	adds	r2, #8
 8003f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	220f      	movs	r2, #15
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	08da      	lsrs	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3208      	adds	r2, #8
 8003fca:	69b9      	ldr	r1, [r7, #24]
 8003fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0203 	and.w	r2, r3, #3
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80ae 	beq.w	800416e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	4b5d      	ldr	r3, [pc, #372]	@ (800418c <HAL_GPIO_Init+0x300>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	4a5c      	ldr	r2, [pc, #368]	@ (800418c <HAL_GPIO_Init+0x300>)
 800401c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004020:	6453      	str	r3, [r2, #68]	@ 0x44
 8004022:	4b5a      	ldr	r3, [pc, #360]	@ (800418c <HAL_GPIO_Init+0x300>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800402e:	4a58      	ldr	r2, [pc, #352]	@ (8004190 <HAL_GPIO_Init+0x304>)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3302      	adds	r3, #2
 8004036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	220f      	movs	r2, #15
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4f      	ldr	r2, [pc, #316]	@ (8004194 <HAL_GPIO_Init+0x308>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d025      	beq.n	80040a6 <HAL_GPIO_Init+0x21a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4e      	ldr	r2, [pc, #312]	@ (8004198 <HAL_GPIO_Init+0x30c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <HAL_GPIO_Init+0x216>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4d      	ldr	r2, [pc, #308]	@ (800419c <HAL_GPIO_Init+0x310>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d019      	beq.n	800409e <HAL_GPIO_Init+0x212>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4c      	ldr	r2, [pc, #304]	@ (80041a0 <HAL_GPIO_Init+0x314>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_GPIO_Init+0x20e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4b      	ldr	r2, [pc, #300]	@ (80041a4 <HAL_GPIO_Init+0x318>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00d      	beq.n	8004096 <HAL_GPIO_Init+0x20a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4a      	ldr	r2, [pc, #296]	@ (80041a8 <HAL_GPIO_Init+0x31c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <HAL_GPIO_Init+0x206>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a49      	ldr	r2, [pc, #292]	@ (80041ac <HAL_GPIO_Init+0x320>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d101      	bne.n	800408e <HAL_GPIO_Init+0x202>
 800408a:	2306      	movs	r3, #6
 800408c:	e00c      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 800408e:	2307      	movs	r3, #7
 8004090:	e00a      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 8004092:	2305      	movs	r3, #5
 8004094:	e008      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 8004096:	2304      	movs	r3, #4
 8004098:	e006      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 800409a:	2303      	movs	r3, #3
 800409c:	e004      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 800409e:	2302      	movs	r3, #2
 80040a0:	e002      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 80040a6:	2300      	movs	r3, #0
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	f002 0203 	and.w	r2, r2, #3
 80040ae:	0092      	lsls	r2, r2, #2
 80040b0:	4093      	lsls	r3, r2
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b8:	4935      	ldr	r1, [pc, #212]	@ (8004190 <HAL_GPIO_Init+0x304>)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	089b      	lsrs	r3, r3, #2
 80040be:	3302      	adds	r3, #2
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040c6:	4b3a      	ldr	r3, [pc, #232]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ea:	4a31      	ldr	r2, [pc, #196]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040f0:	4b2f      	ldr	r3, [pc, #188]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004114:	4a26      	ldr	r2, [pc, #152]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800411a:	4b25      	ldr	r3, [pc, #148]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800413e:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004144:	4b1a      	ldr	r3, [pc, #104]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004168:	4a11      	ldr	r2, [pc, #68]	@ (80041b0 <HAL_GPIO_Init+0x324>)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	f67f ae96 	bls.w	8003ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	3724      	adds	r7, #36	@ 0x24
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
 8004190:	40013800 	.word	0x40013800
 8004194:	40020000 	.word	0x40020000
 8004198:	40020400 	.word	0x40020400
 800419c:	40020800 	.word	0x40020800
 80041a0:	40020c00 	.word	0x40020c00
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40021400 	.word	0x40021400
 80041ac:	40021800 	.word	0x40021800
 80041b0:	40013c00 	.word	0x40013c00

080041b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	887b      	ldrh	r3, [r7, #2]
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	e001      	b.n	80041d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
 80041f0:	4613      	mov	r3, r2
 80041f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f4:	787b      	ldrb	r3, [r7, #1]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004200:	e003      	b.n	800420a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004202:	887b      	ldrh	r3, [r7, #2]
 8004204:	041a      	lsls	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	619a      	str	r2, [r3, #24]
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e12b      	b.n	8004482 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fe fbd8 	bl	80029f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	@ 0x24
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800426a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800427a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800427c:	f001 f8e2 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
 8004280:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	4a81      	ldr	r2, [pc, #516]	@ (800448c <HAL_I2C_Init+0x274>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d807      	bhi.n	800429c <HAL_I2C_Init+0x84>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4a80      	ldr	r2, [pc, #512]	@ (8004490 <HAL_I2C_Init+0x278>)
 8004290:	4293      	cmp	r3, r2
 8004292:	bf94      	ite	ls
 8004294:	2301      	movls	r3, #1
 8004296:	2300      	movhi	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	e006      	b.n	80042aa <HAL_I2C_Init+0x92>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a7d      	ldr	r2, [pc, #500]	@ (8004494 <HAL_I2C_Init+0x27c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	bf94      	ite	ls
 80042a4:	2301      	movls	r3, #1
 80042a6:	2300      	movhi	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0e7      	b.n	8004482 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a78      	ldr	r2, [pc, #480]	@ (8004498 <HAL_I2C_Init+0x280>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	0c9b      	lsrs	r3, r3, #18
 80042bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4a6a      	ldr	r2, [pc, #424]	@ (800448c <HAL_I2C_Init+0x274>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d802      	bhi.n	80042ec <HAL_I2C_Init+0xd4>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	3301      	adds	r3, #1
 80042ea:	e009      	b.n	8004300 <HAL_I2C_Init+0xe8>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	4a69      	ldr	r2, [pc, #420]	@ (800449c <HAL_I2C_Init+0x284>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	099b      	lsrs	r3, r3, #6
 80042fe:	3301      	adds	r3, #1
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	430b      	orrs	r3, r1
 8004306:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004312:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	495c      	ldr	r1, [pc, #368]	@ (800448c <HAL_I2C_Init+0x274>)
 800431c:	428b      	cmp	r3, r1
 800431e:	d819      	bhi.n	8004354 <HAL_I2C_Init+0x13c>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1e59      	subs	r1, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fbb1 f3f3 	udiv	r3, r1, r3
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004334:	400b      	ands	r3, r1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_I2C_Init+0x138>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1e59      	subs	r1, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fbb1 f3f3 	udiv	r3, r1, r3
 8004348:	3301      	adds	r3, #1
 800434a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434e:	e051      	b.n	80043f4 <HAL_I2C_Init+0x1dc>
 8004350:	2304      	movs	r3, #4
 8004352:	e04f      	b.n	80043f4 <HAL_I2C_Init+0x1dc>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d111      	bne.n	8004380 <HAL_I2C_Init+0x168>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1e58      	subs	r0, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	440b      	add	r3, r1
 800436a:	fbb0 f3f3 	udiv	r3, r0, r3
 800436e:	3301      	adds	r3, #1
 8004370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	e012      	b.n	80043a6 <HAL_I2C_Init+0x18e>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1e58      	subs	r0, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6859      	ldr	r1, [r3, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	0099      	lsls	r1, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	fbb0 f3f3 	udiv	r3, r0, r3
 8004396:	3301      	adds	r3, #1
 8004398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Init+0x196>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e022      	b.n	80043f4 <HAL_I2C_Init+0x1dc>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10e      	bne.n	80043d4 <HAL_I2C_Init+0x1bc>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1e58      	subs	r0, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	460b      	mov	r3, r1
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	440b      	add	r3, r1
 80043c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c8:	3301      	adds	r3, #1
 80043ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043d2:	e00f      	b.n	80043f4 <HAL_I2C_Init+0x1dc>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1e58      	subs	r0, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	0099      	lsls	r1, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	6809      	ldr	r1, [r1, #0]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004422:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6911      	ldr	r1, [r2, #16]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68d2      	ldr	r2, [r2, #12]
 800442e:	4311      	orrs	r1, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	430b      	orrs	r3, r1
 8004436:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	000186a0 	.word	0x000186a0
 8004490:	001e847f 	.word	0x001e847f
 8004494:	003d08ff 	.word	0x003d08ff
 8004498:	431bde83 	.word	0x431bde83
 800449c:	10624dd3 	.word	0x10624dd3

080044a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	4608      	mov	r0, r1
 80044aa:	4611      	mov	r1, r2
 80044ac:	461a      	mov	r2, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	817b      	strh	r3, [r7, #10]
 80044b2:	460b      	mov	r3, r1
 80044b4:	813b      	strh	r3, [r7, #8]
 80044b6:	4613      	mov	r3, r2
 80044b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044ba:	f7fe fd09 	bl	8002ed0 <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	f040 80d9 	bne.w	8004680 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2319      	movs	r3, #25
 80044d4:	2201      	movs	r2, #1
 80044d6:	496d      	ldr	r1, [pc, #436]	@ (800468c <HAL_I2C_Mem_Write+0x1ec>)
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 fc8b 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044e4:	2302      	movs	r3, #2
 80044e6:	e0cc      	b.n	8004682 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_I2C_Mem_Write+0x56>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e0c5      	b.n	8004682 <HAL_I2C_Mem_Write+0x1e2>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d007      	beq.n	800451c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800452a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2221      	movs	r2, #33	@ 0x21
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2240      	movs	r2, #64	@ 0x40
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800454c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a4d      	ldr	r2, [pc, #308]	@ (8004690 <HAL_I2C_Mem_Write+0x1f0>)
 800455c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800455e:	88f8      	ldrh	r0, [r7, #6]
 8004560:	893a      	ldrh	r2, [r7, #8]
 8004562:	8979      	ldrh	r1, [r7, #10]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	4603      	mov	r3, r0
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 fac2 	bl	8004af8 <I2C_RequestMemoryWrite>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d052      	beq.n	8004620 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e081      	b.n	8004682 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 fd50 	bl	8005028 <I2C_WaitOnTXEFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00d      	beq.n	80045aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	2b04      	cmp	r3, #4
 8004594:	d107      	bne.n	80045a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e06b      	b.n	8004682 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	781a      	ldrb	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d11b      	bne.n	8004620 <HAL_I2C_Mem_Write+0x180>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d017      	beq.n	8004620 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	781a      	ldrb	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1aa      	bne.n	800457e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fd43 	bl	80050b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463c:	2b04      	cmp	r3, #4
 800463e:	d107      	bne.n	8004650 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800464e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e016      	b.n	8004682 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	e000      	b.n	8004682 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004680:	2302      	movs	r3, #2
  }
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	00100002 	.word	0x00100002
 8004690:	ffff0000 	.word	0xffff0000

08004694 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08c      	sub	sp, #48	@ 0x30
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	4608      	mov	r0, r1
 800469e:	4611      	mov	r1, r2
 80046a0:	461a      	mov	r2, r3
 80046a2:	4603      	mov	r3, r0
 80046a4:	817b      	strh	r3, [r7, #10]
 80046a6:	460b      	mov	r3, r1
 80046a8:	813b      	strh	r3, [r7, #8]
 80046aa:	4613      	mov	r3, r2
 80046ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046ae:	f7fe fc0f 	bl	8002ed0 <HAL_GetTick>
 80046b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b20      	cmp	r3, #32
 80046be:	f040 8214 	bne.w	8004aea <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	2319      	movs	r3, #25
 80046c8:	2201      	movs	r2, #1
 80046ca:	497b      	ldr	r1, [pc, #492]	@ (80048b8 <HAL_I2C_Mem_Read+0x224>)
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 fb91 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046d8:	2302      	movs	r3, #2
 80046da:	e207      	b.n	8004aec <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_I2C_Mem_Read+0x56>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e200      	b.n	8004aec <HAL_I2C_Mem_Read+0x458>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d007      	beq.n	8004710 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800471e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2222      	movs	r2, #34	@ 0x22
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2240      	movs	r2, #64	@ 0x40
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800473a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004740:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a5b      	ldr	r2, [pc, #364]	@ (80048bc <HAL_I2C_Mem_Read+0x228>)
 8004750:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004752:	88f8      	ldrh	r0, [r7, #6]
 8004754:	893a      	ldrh	r2, [r7, #8]
 8004756:	8979      	ldrh	r1, [r7, #10]
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	4603      	mov	r3, r0
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fa5e 	bl	8004c24 <I2C_RequestMemoryRead>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e1bc      	b.n	8004aec <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004776:	2b00      	cmp	r3, #0
 8004778:	d113      	bne.n	80047a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477a:	2300      	movs	r3, #0
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	623b      	str	r3, [r7, #32]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	623b      	str	r3, [r7, #32]
 800478e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	e190      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d11b      	bne.n	80047e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	e170      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d11b      	bne.n	8004822 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004808:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480a:	2300      	movs	r3, #0
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	e150      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004838:	e144      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483e:	2b03      	cmp	r3, #3
 8004840:	f200 80f1 	bhi.w	8004a26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004848:	2b01      	cmp	r3, #1
 800484a:	d123      	bne.n	8004894 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800484e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 fc79 	bl	8005148 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e145      	b.n	8004aec <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004892:	e117      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004898:	2b02      	cmp	r3, #2
 800489a:	d14e      	bne.n	800493a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800489c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a2:	2200      	movs	r2, #0
 80048a4:	4906      	ldr	r1, [pc, #24]	@ (80048c0 <HAL_I2C_Mem_Read+0x22c>)
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 faa4 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e11a      	b.n	8004aec <HAL_I2C_Mem_Read+0x458>
 80048b6:	bf00      	nop
 80048b8:	00100002 	.word	0x00100002
 80048bc:	ffff0000 	.word	0xffff0000
 80048c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004938:	e0c4      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004940:	2200      	movs	r2, #0
 8004942:	496c      	ldr	r1, [pc, #432]	@ (8004af4 <HAL_I2C_Mem_Read+0x460>)
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fa55 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0cb      	b.n	8004aec <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499c:	2200      	movs	r2, #0
 800499e:	4955      	ldr	r1, [pc, #340]	@ (8004af4 <HAL_I2C_Mem_Read+0x460>)
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fa27 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e09d      	b.n	8004aec <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a24:	e04e      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fb8c 	bl	8005148 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e058      	b.n	8004aec <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d124      	bne.n	8004ac4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d107      	bne.n	8004a92 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a90:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f47f aeb6 	bne.w	800483a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e000      	b.n	8004aec <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004aea:	2302      	movs	r3, #2
  }
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3728      	adds	r7, #40	@ 0x28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	00010004 	.word	0x00010004

08004af8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	4608      	mov	r0, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	461a      	mov	r2, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	817b      	strh	r3, [r7, #10]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	813b      	strh	r3, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f960 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b48:	d103      	bne.n	8004b52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e05f      	b.n	8004c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	6a3a      	ldr	r2, [r7, #32]
 8004b6a:	492d      	ldr	r1, [pc, #180]	@ (8004c20 <I2C_RequestMemoryWrite+0x128>)
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f9bb 	bl	8004ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e04c      	b.n	8004c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b94:	6a39      	ldr	r1, [r7, #32]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fa46 	bl	8005028 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00d      	beq.n	8004bbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d107      	bne.n	8004bba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e02b      	b.n	8004c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d105      	bne.n	8004bd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc4:	893b      	ldrh	r3, [r7, #8]
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	611a      	str	r2, [r3, #16]
 8004bce:	e021      	b.n	8004c14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bd0:	893b      	ldrh	r3, [r7, #8]
 8004bd2:	0a1b      	lsrs	r3, r3, #8
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be0:	6a39      	ldr	r1, [r7, #32]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fa20 	bl	8005028 <I2C_WaitOnTXEFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d107      	bne.n	8004c06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e005      	b.n	8004c16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c0a:	893b      	ldrh	r3, [r7, #8]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	00010002 	.word	0x00010002

08004c24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	4611      	mov	r1, r2
 8004c30:	461a      	mov	r2, r3
 8004c32:	4603      	mov	r3, r0
 8004c34:	817b      	strh	r3, [r7, #10]
 8004c36:	460b      	mov	r3, r1
 8004c38:	813b      	strh	r3, [r7, #8]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f8c2 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00d      	beq.n	8004c92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c84:	d103      	bne.n	8004c8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e0aa      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c92:	897b      	ldrh	r3, [r7, #10]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ca0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	6a3a      	ldr	r2, [r7, #32]
 8004ca6:	4952      	ldr	r1, [pc, #328]	@ (8004df0 <I2C_RequestMemoryRead+0x1cc>)
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f91d 	bl	8004ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e097      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd0:	6a39      	ldr	r1, [r7, #32]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f9a8 	bl	8005028 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00d      	beq.n	8004cfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d107      	bne.n	8004cf6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e076      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d105      	bne.n	8004d0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d00:	893b      	ldrh	r3, [r7, #8]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	611a      	str	r2, [r3, #16]
 8004d0a:	e021      	b.n	8004d50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d0c:	893b      	ldrh	r3, [r7, #8]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d1c:	6a39      	ldr	r1, [r7, #32]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f982 	bl	8005028 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d107      	bne.n	8004d42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e050      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d46:	893b      	ldrh	r3, [r7, #8]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d52:	6a39      	ldr	r1, [r7, #32]
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f967 	bl	8005028 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00d      	beq.n	8004d7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d107      	bne.n	8004d78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e035      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f82b 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00d      	beq.n	8004dc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004db2:	d103      	bne.n	8004dbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e013      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004dc0:	897b      	ldrh	r3, [r7, #10]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	6a3a      	ldr	r2, [r7, #32]
 8004dd4:	4906      	ldr	r1, [pc, #24]	@ (8004df0 <I2C_RequestMemoryRead+0x1cc>)
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f886 	bl	8004ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	00010002 	.word	0x00010002

08004df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e04:	e048      	b.n	8004e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e0c:	d044      	beq.n	8004e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0e:	f7fe f85f 	bl	8002ed0 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d139      	bne.n	8004e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	0c1b      	lsrs	r3, r3, #16
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d10d      	bne.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	43da      	mvns	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	e00c      	b.n	8004e64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	43da      	mvns	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4013      	ands	r3, r2
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d116      	bne.n	8004e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	f043 0220 	orr.w	r2, r3, #32
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e023      	b.n	8004ee0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d10d      	bne.n	8004ebe <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	43da      	mvns	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4013      	ands	r3, r2
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2301      	moveq	r3, #1
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	e00c      	b.n	8004ed8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	43da      	mvns	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d093      	beq.n	8004e06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ef6:	e071      	b.n	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f06:	d123      	bne.n	8004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3c:	f043 0204 	orr.w	r2, r3, #4
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e067      	b.n	8005020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f56:	d041      	beq.n	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f58:	f7fd ffba 	bl	8002ed0 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d302      	bcc.n	8004f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d136      	bne.n	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	0c1b      	lsrs	r3, r3, #16
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d10c      	bne.n	8004f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	43da      	mvns	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4013      	ands	r3, r2
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bf14      	ite	ne
 8004f8a:	2301      	movne	r3, #1
 8004f8c:	2300      	moveq	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	e00b      	b.n	8004faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	43da      	mvns	r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf14      	ite	ne
 8004fa4:	2301      	movne	r3, #1
 8004fa6:	2300      	moveq	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d016      	beq.n	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	f043 0220 	orr.w	r2, r3, #32
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e021      	b.n	8005020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	0c1b      	lsrs	r3, r3, #16
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10c      	bne.n	8005000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	43da      	mvns	r2, r3
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bf14      	ite	ne
 8004ff8:	2301      	movne	r3, #1
 8004ffa:	2300      	moveq	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	e00b      	b.n	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	43da      	mvns	r2, r3
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4013      	ands	r3, r2
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	bf14      	ite	ne
 8005012:	2301      	movne	r3, #1
 8005014:	2300      	moveq	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	f47f af6d 	bne.w	8004ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005034:	e034      	b.n	80050a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f8e3 	bl	8005202 <I2C_IsAcknowledgeFailed>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e034      	b.n	80050b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800504c:	d028      	beq.n	80050a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504e:	f7fd ff3f 	bl	8002ed0 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d11d      	bne.n	80050a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506e:	2b80      	cmp	r3, #128	@ 0x80
 8005070:	d016      	beq.n	80050a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	f043 0220 	orr.w	r2, r3, #32
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e007      	b.n	80050b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050aa:	2b80      	cmp	r3, #128	@ 0x80
 80050ac:	d1c3      	bne.n	8005036 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050c4:	e034      	b.n	8005130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f89b 	bl	8005202 <I2C_IsAcknowledgeFailed>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e034      	b.n	8005140 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050dc:	d028      	beq.n	8005130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7fd fef7 	bl	8002ed0 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d11d      	bne.n	8005130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d016      	beq.n	8005130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	f043 0220 	orr.w	r2, r3, #32
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e007      	b.n	8005140 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b04      	cmp	r3, #4
 800513c:	d1c3      	bne.n	80050c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005154:	e049      	b.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b10      	cmp	r3, #16
 8005162:	d119      	bne.n	8005198 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0210 	mvn.w	r2, #16
 800516c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e030      	b.n	80051fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005198:	f7fd fe9a 	bl	8002ed0 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d302      	bcc.n	80051ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d11d      	bne.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	d016      	beq.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	f043 0220 	orr.w	r2, r3, #32
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e007      	b.n	80051fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f4:	2b40      	cmp	r3, #64	@ 0x40
 80051f6:	d1ae      	bne.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005218:	d11b      	bne.n	8005252 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005222:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	f043 0204 	orr.w	r2, r3, #4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0cc      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005274:	4b68      	ldr	r3, [pc, #416]	@ (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d90c      	bls.n	800529c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005282:	4b65      	ldr	r3, [pc, #404]	@ (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b63      	ldr	r3, [pc, #396]	@ (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0b8      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d020      	beq.n	80052ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052b4:	4b59      	ldr	r3, [pc, #356]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4a58      	ldr	r2, [pc, #352]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052cc:	4b53      	ldr	r3, [pc, #332]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4a52      	ldr	r2, [pc, #328]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d8:	4b50      	ldr	r3, [pc, #320]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	494d      	ldr	r1, [pc, #308]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d044      	beq.n	8005380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d107      	bne.n	800530e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fe:	4b47      	ldr	r3, [pc, #284]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d119      	bne.n	800533e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e07f      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d003      	beq.n	800531e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800531a:	2b03      	cmp	r3, #3
 800531c:	d107      	bne.n	800532e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800531e:	4b3f      	ldr	r3, [pc, #252]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e06f      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532e:	4b3b      	ldr	r3, [pc, #236]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e067      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800533e:	4b37      	ldr	r3, [pc, #220]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f023 0203 	bic.w	r2, r3, #3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	4934      	ldr	r1, [pc, #208]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	4313      	orrs	r3, r2
 800534e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005350:	f7fd fdbe 	bl	8002ed0 <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005356:	e00a      	b.n	800536e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005358:	f7fd fdba 	bl	8002ed0 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e04f      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536e:	4b2b      	ldr	r3, [pc, #172]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 020c 	and.w	r2, r3, #12
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	429a      	cmp	r2, r3
 800537e:	d1eb      	bne.n	8005358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005380:	4b25      	ldr	r3, [pc, #148]	@ (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d20c      	bcs.n	80053a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538e:	4b22      	ldr	r3, [pc, #136]	@ (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005396:	4b20      	ldr	r3, [pc, #128]	@ (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d001      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e032      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d008      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b4:	4b19      	ldr	r3, [pc, #100]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4916      	ldr	r1, [pc, #88]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053d2:	4b12      	ldr	r3, [pc, #72]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	490e      	ldr	r1, [pc, #56]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053e6:	f000 f855 	bl	8005494 <HAL_RCC_GetSysClockFreq>
 80053ea:	4602      	mov	r2, r0
 80053ec:	4b0b      	ldr	r3, [pc, #44]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	490a      	ldr	r1, [pc, #40]	@ (8005420 <HAL_RCC_ClockConfig+0x1c0>)
 80053f8:	5ccb      	ldrb	r3, [r1, r3]
 80053fa:	fa22 f303 	lsr.w	r3, r2, r3
 80053fe:	4a09      	ldr	r2, [pc, #36]	@ (8005424 <HAL_RCC_ClockConfig+0x1c4>)
 8005400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005402:	4b09      	ldr	r3, [pc, #36]	@ (8005428 <HAL_RCC_ClockConfig+0x1c8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f7fd fd1e 	bl	8002e48 <HAL_InitTick>

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40023c00 	.word	0x40023c00
 800541c:	40023800 	.word	0x40023800
 8005420:	080095c0 	.word	0x080095c0
 8005424:	20000020 	.word	0x20000020
 8005428:	20000024 	.word	0x20000024

0800542c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005430:	4b03      	ldr	r3, [pc, #12]	@ (8005440 <HAL_RCC_GetHCLKFreq+0x14>)
 8005432:	681b      	ldr	r3, [r3, #0]
}
 8005434:	4618      	mov	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000020 	.word	0x20000020

08005444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005448:	f7ff fff0 	bl	800542c <HAL_RCC_GetHCLKFreq>
 800544c:	4602      	mov	r2, r0
 800544e:	4b05      	ldr	r3, [pc, #20]	@ (8005464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	0a9b      	lsrs	r3, r3, #10
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	4903      	ldr	r1, [pc, #12]	@ (8005468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800545a:	5ccb      	ldrb	r3, [r1, r3]
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40023800 	.word	0x40023800
 8005468:	080095d0 	.word	0x080095d0

0800546c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005470:	f7ff ffdc 	bl	800542c <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b05      	ldr	r3, [pc, #20]	@ (800548c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	0b5b      	lsrs	r3, r3, #13
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4903      	ldr	r1, [pc, #12]	@ (8005490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40023800 	.word	0x40023800
 8005490:	080095d0 	.word	0x080095d0

08005494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005498:	b0ae      	sub	sp, #184	@ 0xb8
 800549a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054ba:	4bcb      	ldr	r3, [pc, #812]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
 80054c2:	2b0c      	cmp	r3, #12
 80054c4:	f200 8206 	bhi.w	80058d4 <HAL_RCC_GetSysClockFreq+0x440>
 80054c8:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	08005505 	.word	0x08005505
 80054d4:	080058d5 	.word	0x080058d5
 80054d8:	080058d5 	.word	0x080058d5
 80054dc:	080058d5 	.word	0x080058d5
 80054e0:	0800550d 	.word	0x0800550d
 80054e4:	080058d5 	.word	0x080058d5
 80054e8:	080058d5 	.word	0x080058d5
 80054ec:	080058d5 	.word	0x080058d5
 80054f0:	08005515 	.word	0x08005515
 80054f4:	080058d5 	.word	0x080058d5
 80054f8:	080058d5 	.word	0x080058d5
 80054fc:	080058d5 	.word	0x080058d5
 8005500:	08005705 	.word	0x08005705
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005504:	4bb9      	ldr	r3, [pc, #740]	@ (80057ec <HAL_RCC_GetSysClockFreq+0x358>)
 8005506:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800550a:	e1e7      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800550c:	4bb8      	ldr	r3, [pc, #736]	@ (80057f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800550e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005512:	e1e3      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005514:	4bb4      	ldr	r3, [pc, #720]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800551c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005520:	4bb1      	ldr	r3, [pc, #708]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d071      	beq.n	8005610 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800552c:	4bae      	ldr	r3, [pc, #696]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	099b      	lsrs	r3, r3, #6
 8005532:	2200      	movs	r2, #0
 8005534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005538:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800553c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005544:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005548:	2300      	movs	r3, #0
 800554a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800554e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005552:	4622      	mov	r2, r4
 8005554:	462b      	mov	r3, r5
 8005556:	f04f 0000 	mov.w	r0, #0
 800555a:	f04f 0100 	mov.w	r1, #0
 800555e:	0159      	lsls	r1, r3, #5
 8005560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005564:	0150      	lsls	r0, r2, #5
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4621      	mov	r1, r4
 800556c:	1a51      	subs	r1, r2, r1
 800556e:	6439      	str	r1, [r7, #64]	@ 0x40
 8005570:	4629      	mov	r1, r5
 8005572:	eb63 0301 	sbc.w	r3, r3, r1
 8005576:	647b      	str	r3, [r7, #68]	@ 0x44
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005584:	4649      	mov	r1, r9
 8005586:	018b      	lsls	r3, r1, #6
 8005588:	4641      	mov	r1, r8
 800558a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800558e:	4641      	mov	r1, r8
 8005590:	018a      	lsls	r2, r1, #6
 8005592:	4641      	mov	r1, r8
 8005594:	1a51      	subs	r1, r2, r1
 8005596:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005598:	4649      	mov	r1, r9
 800559a:	eb63 0301 	sbc.w	r3, r3, r1
 800559e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80055ac:	4649      	mov	r1, r9
 80055ae:	00cb      	lsls	r3, r1, #3
 80055b0:	4641      	mov	r1, r8
 80055b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055b6:	4641      	mov	r1, r8
 80055b8:	00ca      	lsls	r2, r1, #3
 80055ba:	4610      	mov	r0, r2
 80055bc:	4619      	mov	r1, r3
 80055be:	4603      	mov	r3, r0
 80055c0:	4622      	mov	r2, r4
 80055c2:	189b      	adds	r3, r3, r2
 80055c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055c6:	462b      	mov	r3, r5
 80055c8:	460a      	mov	r2, r1
 80055ca:	eb42 0303 	adc.w	r3, r2, r3
 80055ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055dc:	4629      	mov	r1, r5
 80055de:	024b      	lsls	r3, r1, #9
 80055e0:	4621      	mov	r1, r4
 80055e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055e6:	4621      	mov	r1, r4
 80055e8:	024a      	lsls	r2, r1, #9
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005600:	f7fb fb12 	bl	8000c28 <__aeabi_uldivmod>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4613      	mov	r3, r2
 800560a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800560e:	e067      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005610:	4b75      	ldr	r3, [pc, #468]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	099b      	lsrs	r3, r3, #6
 8005616:	2200      	movs	r2, #0
 8005618:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800561c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005620:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005628:	67bb      	str	r3, [r7, #120]	@ 0x78
 800562a:	2300      	movs	r3, #0
 800562c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800562e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005632:	4622      	mov	r2, r4
 8005634:	462b      	mov	r3, r5
 8005636:	f04f 0000 	mov.w	r0, #0
 800563a:	f04f 0100 	mov.w	r1, #0
 800563e:	0159      	lsls	r1, r3, #5
 8005640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005644:	0150      	lsls	r0, r2, #5
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4621      	mov	r1, r4
 800564c:	1a51      	subs	r1, r2, r1
 800564e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005650:	4629      	mov	r1, r5
 8005652:	eb63 0301 	sbc.w	r3, r3, r1
 8005656:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005664:	4649      	mov	r1, r9
 8005666:	018b      	lsls	r3, r1, #6
 8005668:	4641      	mov	r1, r8
 800566a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800566e:	4641      	mov	r1, r8
 8005670:	018a      	lsls	r2, r1, #6
 8005672:	4641      	mov	r1, r8
 8005674:	ebb2 0a01 	subs.w	sl, r2, r1
 8005678:	4649      	mov	r1, r9
 800567a:	eb63 0b01 	sbc.w	fp, r3, r1
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800568a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800568e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005692:	4692      	mov	sl, r2
 8005694:	469b      	mov	fp, r3
 8005696:	4623      	mov	r3, r4
 8005698:	eb1a 0303 	adds.w	r3, sl, r3
 800569c:	623b      	str	r3, [r7, #32]
 800569e:	462b      	mov	r3, r5
 80056a0:	eb4b 0303 	adc.w	r3, fp, r3
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80056b2:	4629      	mov	r1, r5
 80056b4:	028b      	lsls	r3, r1, #10
 80056b6:	4621      	mov	r1, r4
 80056b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056bc:	4621      	mov	r1, r4
 80056be:	028a      	lsls	r2, r1, #10
 80056c0:	4610      	mov	r0, r2
 80056c2:	4619      	mov	r1, r3
 80056c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056c8:	2200      	movs	r2, #0
 80056ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80056cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80056ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80056d2:	f7fb faa9 	bl	8000c28 <__aeabi_uldivmod>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4613      	mov	r3, r2
 80056dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80056e0:	4b41      	ldr	r3, [pc, #260]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	0c1b      	lsrs	r3, r3, #16
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	3301      	adds	r3, #1
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80056f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80056fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005702:	e0eb      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005704:	4b38      	ldr	r3, [pc, #224]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800570c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005710:	4b35      	ldr	r3, [pc, #212]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d06b      	beq.n	80057f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800571c:	4b32      	ldr	r3, [pc, #200]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	099b      	lsrs	r3, r3, #6
 8005722:	2200      	movs	r2, #0
 8005724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005726:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005728:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800572a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005730:	2300      	movs	r3, #0
 8005732:	667b      	str	r3, [r7, #100]	@ 0x64
 8005734:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005738:	4622      	mov	r2, r4
 800573a:	462b      	mov	r3, r5
 800573c:	f04f 0000 	mov.w	r0, #0
 8005740:	f04f 0100 	mov.w	r1, #0
 8005744:	0159      	lsls	r1, r3, #5
 8005746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800574a:	0150      	lsls	r0, r2, #5
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4621      	mov	r1, r4
 8005752:	1a51      	subs	r1, r2, r1
 8005754:	61b9      	str	r1, [r7, #24]
 8005756:	4629      	mov	r1, r5
 8005758:	eb63 0301 	sbc.w	r3, r3, r1
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800576a:	4659      	mov	r1, fp
 800576c:	018b      	lsls	r3, r1, #6
 800576e:	4651      	mov	r1, sl
 8005770:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005774:	4651      	mov	r1, sl
 8005776:	018a      	lsls	r2, r1, #6
 8005778:	4651      	mov	r1, sl
 800577a:	ebb2 0801 	subs.w	r8, r2, r1
 800577e:	4659      	mov	r1, fp
 8005780:	eb63 0901 	sbc.w	r9, r3, r1
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005790:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005794:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005798:	4690      	mov	r8, r2
 800579a:	4699      	mov	r9, r3
 800579c:	4623      	mov	r3, r4
 800579e:	eb18 0303 	adds.w	r3, r8, r3
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	462b      	mov	r3, r5
 80057a6:	eb49 0303 	adc.w	r3, r9, r3
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80057b8:	4629      	mov	r1, r5
 80057ba:	024b      	lsls	r3, r1, #9
 80057bc:	4621      	mov	r1, r4
 80057be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057c2:	4621      	mov	r1, r4
 80057c4:	024a      	lsls	r2, r1, #9
 80057c6:	4610      	mov	r0, r2
 80057c8:	4619      	mov	r1, r3
 80057ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057ce:	2200      	movs	r2, #0
 80057d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80057d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057d8:	f7fb fa26 	bl	8000c28 <__aeabi_uldivmod>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4613      	mov	r3, r2
 80057e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057e6:	e065      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x420>
 80057e8:	40023800 	.word	0x40023800
 80057ec:	00f42400 	.word	0x00f42400
 80057f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f4:	4b3d      	ldr	r3, [pc, #244]	@ (80058ec <HAL_RCC_GetSysClockFreq+0x458>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	099b      	lsrs	r3, r3, #6
 80057fa:	2200      	movs	r2, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	4611      	mov	r1, r2
 8005800:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005804:	653b      	str	r3, [r7, #80]	@ 0x50
 8005806:	2300      	movs	r3, #0
 8005808:	657b      	str	r3, [r7, #84]	@ 0x54
 800580a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800580e:	4642      	mov	r2, r8
 8005810:	464b      	mov	r3, r9
 8005812:	f04f 0000 	mov.w	r0, #0
 8005816:	f04f 0100 	mov.w	r1, #0
 800581a:	0159      	lsls	r1, r3, #5
 800581c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005820:	0150      	lsls	r0, r2, #5
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4641      	mov	r1, r8
 8005828:	1a51      	subs	r1, r2, r1
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	4649      	mov	r1, r9
 800582e:	eb63 0301 	sbc.w	r3, r3, r1
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005840:	4659      	mov	r1, fp
 8005842:	018b      	lsls	r3, r1, #6
 8005844:	4651      	mov	r1, sl
 8005846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800584a:	4651      	mov	r1, sl
 800584c:	018a      	lsls	r2, r1, #6
 800584e:	4651      	mov	r1, sl
 8005850:	1a54      	subs	r4, r2, r1
 8005852:	4659      	mov	r1, fp
 8005854:	eb63 0501 	sbc.w	r5, r3, r1
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	00eb      	lsls	r3, r5, #3
 8005862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005866:	00e2      	lsls	r2, r4, #3
 8005868:	4614      	mov	r4, r2
 800586a:	461d      	mov	r5, r3
 800586c:	4643      	mov	r3, r8
 800586e:	18e3      	adds	r3, r4, r3
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	464b      	mov	r3, r9
 8005874:	eb45 0303 	adc.w	r3, r5, r3
 8005878:	607b      	str	r3, [r7, #4]
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005886:	4629      	mov	r1, r5
 8005888:	028b      	lsls	r3, r1, #10
 800588a:	4621      	mov	r1, r4
 800588c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005890:	4621      	mov	r1, r4
 8005892:	028a      	lsls	r2, r1, #10
 8005894:	4610      	mov	r0, r2
 8005896:	4619      	mov	r1, r3
 8005898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800589c:	2200      	movs	r2, #0
 800589e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058a0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80058a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058a6:	f7fb f9bf 	bl	8000c28 <__aeabi_uldivmod>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4613      	mov	r3, r2
 80058b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80058b4:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <HAL_RCC_GetSysClockFreq+0x458>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	0f1b      	lsrs	r3, r3, #28
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80058c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80058ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80058d2:	e003      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058d4:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80058d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80058da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	37b8      	adds	r7, #184	@ 0xb8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ea:	bf00      	nop
 80058ec:	40023800 	.word	0x40023800
 80058f0:	00f42400 	.word	0x00f42400

080058f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e28d      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 8083 	beq.w	8005a1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005914:	4b94      	ldr	r3, [pc, #592]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 030c 	and.w	r3, r3, #12
 800591c:	2b04      	cmp	r3, #4
 800591e:	d019      	beq.n	8005954 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005920:	4b91      	ldr	r3, [pc, #580]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 030c 	and.w	r3, r3, #12
        || \
 8005928:	2b08      	cmp	r3, #8
 800592a:	d106      	bne.n	800593a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800592c:	4b8e      	ldr	r3, [pc, #568]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005934:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005938:	d00c      	beq.n	8005954 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593a:	4b8b      	ldr	r3, [pc, #556]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005942:	2b0c      	cmp	r3, #12
 8005944:	d112      	bne.n	800596c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005946:	4b88      	ldr	r3, [pc, #544]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800594e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005952:	d10b      	bne.n	800596c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005954:	4b84      	ldr	r3, [pc, #528]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d05b      	beq.n	8005a18 <HAL_RCC_OscConfig+0x124>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d157      	bne.n	8005a18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e25a      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005974:	d106      	bne.n	8005984 <HAL_RCC_OscConfig+0x90>
 8005976:	4b7c      	ldr	r3, [pc, #496]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a7b      	ldr	r2, [pc, #492]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 800597c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e01d      	b.n	80059c0 <HAL_RCC_OscConfig+0xcc>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800598c:	d10c      	bne.n	80059a8 <HAL_RCC_OscConfig+0xb4>
 800598e:	4b76      	ldr	r3, [pc, #472]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a75      	ldr	r2, [pc, #468]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	4b73      	ldr	r3, [pc, #460]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a72      	ldr	r2, [pc, #456]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 80059a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	e00b      	b.n	80059c0 <HAL_RCC_OscConfig+0xcc>
 80059a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a6e      	ldr	r2, [pc, #440]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 80059ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a6b      	ldr	r2, [pc, #428]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 80059ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d013      	beq.n	80059f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7fd fa82 	bl	8002ed0 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d0:	f7fd fa7e 	bl	8002ed0 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	@ 0x64
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e21f      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e2:	4b61      	ldr	r3, [pc, #388]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0f0      	beq.n	80059d0 <HAL_RCC_OscConfig+0xdc>
 80059ee:	e014      	b.n	8005a1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f0:	f7fd fa6e 	bl	8002ed0 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f8:	f7fd fa6a 	bl	8002ed0 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b64      	cmp	r3, #100	@ 0x64
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e20b      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a0a:	4b57      	ldr	r3, [pc, #348]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1f0      	bne.n	80059f8 <HAL_RCC_OscConfig+0x104>
 8005a16:	e000      	b.n	8005a1a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d06f      	beq.n	8005b06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a26:	4b50      	ldr	r3, [pc, #320]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d017      	beq.n	8005a62 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a32:	4b4d      	ldr	r3, [pc, #308]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 030c 	and.w	r3, r3, #12
        || \
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d105      	bne.n	8005a4a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a4a:	4b47      	ldr	r3, [pc, #284]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005a52:	2b0c      	cmp	r3, #12
 8005a54:	d11c      	bne.n	8005a90 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a56:	4b44      	ldr	r3, [pc, #272]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d116      	bne.n	8005a90 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a62:	4b41      	ldr	r3, [pc, #260]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_RCC_OscConfig+0x186>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d001      	beq.n	8005a7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e1d3      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	4937      	ldr	r1, [pc, #220]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a8e:	e03a      	b.n	8005b06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d020      	beq.n	8005ada <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a98:	4b34      	ldr	r3, [pc, #208]	@ (8005b6c <HAL_RCC_OscConfig+0x278>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9e:	f7fd fa17 	bl	8002ed0 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa6:	f7fd fa13 	bl	8002ed0 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e1b4      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac4:	4b28      	ldr	r3, [pc, #160]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4925      	ldr	r1, [pc, #148]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	600b      	str	r3, [r1, #0]
 8005ad8:	e015      	b.n	8005b06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ada:	4b24      	ldr	r3, [pc, #144]	@ (8005b6c <HAL_RCC_OscConfig+0x278>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae0:	f7fd f9f6 	bl	8002ed0 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae8:	f7fd f9f2 	bl	8002ed0 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e193      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005afa:	4b1b      	ldr	r3, [pc, #108]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d036      	beq.n	8005b80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d016      	beq.n	8005b48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b1a:	4b15      	ldr	r3, [pc, #84]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b20:	f7fd f9d6 	bl	8002ed0 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b28:	f7fd f9d2 	bl	8002ed0 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e173      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0x234>
 8005b46:	e01b      	b.n	8005b80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b48:	4b09      	ldr	r3, [pc, #36]	@ (8005b70 <HAL_RCC_OscConfig+0x27c>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4e:	f7fd f9bf 	bl	8002ed0 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b54:	e00e      	b.n	8005b74 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b56:	f7fd f9bb 	bl	8002ed0 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d907      	bls.n	8005b74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e15c      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
 8005b68:	40023800 	.word	0x40023800
 8005b6c:	42470000 	.word	0x42470000
 8005b70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b74:	4b8a      	ldr	r3, [pc, #552]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1ea      	bne.n	8005b56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8097 	beq.w	8005cbc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b92:	4b83      	ldr	r3, [pc, #524]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10f      	bne.n	8005bbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	4b7f      	ldr	r3, [pc, #508]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bae:	4b7c      	ldr	r3, [pc, #496]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bb6:	60bb      	str	r3, [r7, #8]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bbe:	4b79      	ldr	r3, [pc, #484]	@ (8005da4 <HAL_RCC_OscConfig+0x4b0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d118      	bne.n	8005bfc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bca:	4b76      	ldr	r3, [pc, #472]	@ (8005da4 <HAL_RCC_OscConfig+0x4b0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a75      	ldr	r2, [pc, #468]	@ (8005da4 <HAL_RCC_OscConfig+0x4b0>)
 8005bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bd6:	f7fd f97b 	bl	8002ed0 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bde:	f7fd f977 	bl	8002ed0 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e118      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8005da4 <HAL_RCC_OscConfig+0x4b0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0f0      	beq.n	8005bde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d106      	bne.n	8005c12 <HAL_RCC_OscConfig+0x31e>
 8005c04:	4b66      	ldr	r3, [pc, #408]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c08:	4a65      	ldr	r2, [pc, #404]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005c0a:	f043 0301 	orr.w	r3, r3, #1
 8005c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c10:	e01c      	b.n	8005c4c <HAL_RCC_OscConfig+0x358>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b05      	cmp	r3, #5
 8005c18:	d10c      	bne.n	8005c34 <HAL_RCC_OscConfig+0x340>
 8005c1a:	4b61      	ldr	r3, [pc, #388]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1e:	4a60      	ldr	r2, [pc, #384]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005c20:	f043 0304 	orr.w	r3, r3, #4
 8005c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c26:	4b5e      	ldr	r3, [pc, #376]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c2a:	4a5d      	ldr	r2, [pc, #372]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005c2c:	f043 0301 	orr.w	r3, r3, #1
 8005c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c32:	e00b      	b.n	8005c4c <HAL_RCC_OscConfig+0x358>
 8005c34:	4b5a      	ldr	r3, [pc, #360]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c38:	4a59      	ldr	r2, [pc, #356]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c40:	4b57      	ldr	r3, [pc, #348]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c44:	4a56      	ldr	r2, [pc, #344]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005c46:	f023 0304 	bic.w	r3, r3, #4
 8005c4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d015      	beq.n	8005c80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c54:	f7fd f93c 	bl	8002ed0 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5a:	e00a      	b.n	8005c72 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5c:	f7fd f938 	bl	8002ed0 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e0d7      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c72:	4b4b      	ldr	r3, [pc, #300]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0ee      	beq.n	8005c5c <HAL_RCC_OscConfig+0x368>
 8005c7e:	e014      	b.n	8005caa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c80:	f7fd f926 	bl	8002ed0 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c86:	e00a      	b.n	8005c9e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c88:	f7fd f922 	bl	8002ed0 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e0c1      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c9e:	4b40      	ldr	r3, [pc, #256]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1ee      	bne.n	8005c88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d105      	bne.n	8005cbc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb4:	4a3a      	ldr	r2, [pc, #232]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 80ad 	beq.w	8005e20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cc6:	4b36      	ldr	r3, [pc, #216]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d060      	beq.n	8005d94 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d145      	bne.n	8005d66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cda:	4b33      	ldr	r3, [pc, #204]	@ (8005da8 <HAL_RCC_OscConfig+0x4b4>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce0:	f7fd f8f6 	bl	8002ed0 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce8:	f7fd f8f2 	bl	8002ed0 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e093      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfa:	4b29      	ldr	r3, [pc, #164]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69da      	ldr	r2, [r3, #28]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d14:	019b      	lsls	r3, r3, #6
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1c:	085b      	lsrs	r3, r3, #1
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	041b      	lsls	r3, r3, #16
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d28:	061b      	lsls	r3, r3, #24
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d30:	071b      	lsls	r3, r3, #28
 8005d32:	491b      	ldr	r1, [pc, #108]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d38:	4b1b      	ldr	r3, [pc, #108]	@ (8005da8 <HAL_RCC_OscConfig+0x4b4>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3e:	f7fd f8c7 	bl	8002ed0 <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d46:	f7fd f8c3 	bl	8002ed0 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e064      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d58:	4b11      	ldr	r3, [pc, #68]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCC_OscConfig+0x452>
 8005d64:	e05c      	b.n	8005e20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d66:	4b10      	ldr	r3, [pc, #64]	@ (8005da8 <HAL_RCC_OscConfig+0x4b4>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6c:	f7fd f8b0 	bl	8002ed0 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d74:	f7fd f8ac 	bl	8002ed0 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e04d      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d86:	4b06      	ldr	r3, [pc, #24]	@ (8005da0 <HAL_RCC_OscConfig+0x4ac>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f0      	bne.n	8005d74 <HAL_RCC_OscConfig+0x480>
 8005d92:	e045      	b.n	8005e20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d107      	bne.n	8005dac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e040      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
 8005da0:	40023800 	.word	0x40023800
 8005da4:	40007000 	.word	0x40007000
 8005da8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dac:	4b1f      	ldr	r3, [pc, #124]	@ (8005e2c <HAL_RCC_OscConfig+0x538>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d030      	beq.n	8005e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d129      	bne.n	8005e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d122      	bne.n	8005e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ddc:	4013      	ands	r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005de2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d119      	bne.n	8005e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	3b01      	subs	r3, #1
 8005df6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d10f      	bne.n	8005e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d107      	bne.n	8005e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d001      	beq.n	8005e20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e000      	b.n	8005e22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40023800 	.word	0x40023800

08005e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e041      	b.n	8005ec6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fc fe14 	bl	8002a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f000 fa7e 	bl	8006370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d001      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e04e      	b.n	8005f86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a23      	ldr	r2, [pc, #140]	@ (8005f94 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d022      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x80>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f12:	d01d      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x80>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1f      	ldr	r2, [pc, #124]	@ (8005f98 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d018      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x80>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1e      	ldr	r2, [pc, #120]	@ (8005f9c <HAL_TIM_Base_Start_IT+0xcc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d013      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x80>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00e      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x80>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1b      	ldr	r2, [pc, #108]	@ (8005fa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d009      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x80>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a19      	ldr	r2, [pc, #100]	@ (8005fa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d004      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x80>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a18      	ldr	r2, [pc, #96]	@ (8005fac <HAL_TIM_Base_Start_IT+0xdc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d111      	bne.n	8005f74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b06      	cmp	r3, #6
 8005f60:	d010      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0201 	orr.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f72:	e007      	b.n	8005f84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40010400 	.word	0x40010400
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40001800 	.word	0x40001800

08005fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d020      	beq.n	8006014 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01b      	beq.n	8006014 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0202 	mvn.w	r2, #2
 8005fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f999 	bl	8006332 <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f98b 	bl	800631e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f99c 	bl	8006346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d020      	beq.n	8006060 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01b      	beq.n	8006060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0204 	mvn.w	r2, #4
 8006030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2202      	movs	r2, #2
 8006036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f973 	bl	8006332 <HAL_TIM_IC_CaptureCallback>
 800604c:	e005      	b.n	800605a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f965 	bl	800631e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f976 	bl	8006346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d020      	beq.n	80060ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01b      	beq.n	80060ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0208 	mvn.w	r2, #8
 800607c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2204      	movs	r2, #4
 8006082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f94d 	bl	8006332 <HAL_TIM_IC_CaptureCallback>
 8006098:	e005      	b.n	80060a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f93f 	bl	800631e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f950 	bl	8006346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d020      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01b      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0210 	mvn.w	r2, #16
 80060c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2208      	movs	r2, #8
 80060ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f927 	bl	8006332 <HAL_TIM_IC_CaptureCallback>
 80060e4:	e005      	b.n	80060f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f919 	bl	800631e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f92a 	bl	8006346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00c      	beq.n	800611c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0201 	mvn.w	r2, #1
 8006114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fc fbd6 	bl	80028c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00c      	beq.n	8006140 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800612c:	2b00      	cmp	r3, #0
 800612e:	d007      	beq.n	8006140 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fae4 	bl	8006708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00c      	beq.n	8006164 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800615c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f8fb 	bl	800635a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00c      	beq.n	8006188 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0220 	mvn.w	r2, #32
 8006180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fab6 	bl	80066f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006188:	bf00      	nop
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_TIM_ConfigClockSource+0x1c>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e0b4      	b.n	8006316 <HAL_TIM_ConfigClockSource+0x186>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061e4:	d03e      	beq.n	8006264 <HAL_TIM_ConfigClockSource+0xd4>
 80061e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ea:	f200 8087 	bhi.w	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 80061ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061f2:	f000 8086 	beq.w	8006302 <HAL_TIM_ConfigClockSource+0x172>
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061fa:	d87f      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 80061fc:	2b70      	cmp	r3, #112	@ 0x70
 80061fe:	d01a      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0xa6>
 8006200:	2b70      	cmp	r3, #112	@ 0x70
 8006202:	d87b      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 8006204:	2b60      	cmp	r3, #96	@ 0x60
 8006206:	d050      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x11a>
 8006208:	2b60      	cmp	r3, #96	@ 0x60
 800620a:	d877      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 800620c:	2b50      	cmp	r3, #80	@ 0x50
 800620e:	d03c      	beq.n	800628a <HAL_TIM_ConfigClockSource+0xfa>
 8006210:	2b50      	cmp	r3, #80	@ 0x50
 8006212:	d873      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 8006214:	2b40      	cmp	r3, #64	@ 0x40
 8006216:	d058      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x13a>
 8006218:	2b40      	cmp	r3, #64	@ 0x40
 800621a:	d86f      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 800621c:	2b30      	cmp	r3, #48	@ 0x30
 800621e:	d064      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x15a>
 8006220:	2b30      	cmp	r3, #48	@ 0x30
 8006222:	d86b      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 8006224:	2b20      	cmp	r3, #32
 8006226:	d060      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x15a>
 8006228:	2b20      	cmp	r3, #32
 800622a:	d867      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d05c      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x15a>
 8006230:	2b10      	cmp	r3, #16
 8006232:	d05a      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x15a>
 8006234:	e062      	b.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006246:	f000 f9b9 	bl	80065bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	609a      	str	r2, [r3, #8]
      break;
 8006262:	e04f      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006274:	f000 f9a2 	bl	80065bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006286:	609a      	str	r2, [r3, #8]
      break;
 8006288:	e03c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006296:	461a      	mov	r2, r3
 8006298:	f000 f916 	bl	80064c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2150      	movs	r1, #80	@ 0x50
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 f96f 	bl	8006586 <TIM_ITRx_SetConfig>
      break;
 80062a8:	e02c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062b6:	461a      	mov	r2, r3
 80062b8:	f000 f935 	bl	8006526 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2160      	movs	r1, #96	@ 0x60
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 f95f 	bl	8006586 <TIM_ITRx_SetConfig>
      break;
 80062c8:	e01c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d6:	461a      	mov	r2, r3
 80062d8:	f000 f8f6 	bl	80064c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2140      	movs	r1, #64	@ 0x40
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f94f 	bl	8006586 <TIM_ITRx_SetConfig>
      break;
 80062e8:	e00c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f000 f946 	bl	8006586 <TIM_ITRx_SetConfig>
      break;
 80062fa:	e003      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006300:	e000      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
	...

08006370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a46      	ldr	r2, [pc, #280]	@ (800649c <TIM_Base_SetConfig+0x12c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d013      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800638e:	d00f      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a43      	ldr	r2, [pc, #268]	@ (80064a0 <TIM_Base_SetConfig+0x130>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00b      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a42      	ldr	r2, [pc, #264]	@ (80064a4 <TIM_Base_SetConfig+0x134>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d007      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a41      	ldr	r2, [pc, #260]	@ (80064a8 <TIM_Base_SetConfig+0x138>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d003      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a40      	ldr	r2, [pc, #256]	@ (80064ac <TIM_Base_SetConfig+0x13c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d108      	bne.n	80063c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a35      	ldr	r2, [pc, #212]	@ (800649c <TIM_Base_SetConfig+0x12c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d02b      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063d0:	d027      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a32      	ldr	r2, [pc, #200]	@ (80064a0 <TIM_Base_SetConfig+0x130>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d023      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a31      	ldr	r2, [pc, #196]	@ (80064a4 <TIM_Base_SetConfig+0x134>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01f      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a30      	ldr	r2, [pc, #192]	@ (80064a8 <TIM_Base_SetConfig+0x138>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01b      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a2f      	ldr	r2, [pc, #188]	@ (80064ac <TIM_Base_SetConfig+0x13c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d017      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a2e      	ldr	r2, [pc, #184]	@ (80064b0 <TIM_Base_SetConfig+0x140>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2d      	ldr	r2, [pc, #180]	@ (80064b4 <TIM_Base_SetConfig+0x144>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00f      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a2c      	ldr	r2, [pc, #176]	@ (80064b8 <TIM_Base_SetConfig+0x148>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a2b      	ldr	r2, [pc, #172]	@ (80064bc <TIM_Base_SetConfig+0x14c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a2a      	ldr	r2, [pc, #168]	@ (80064c0 <TIM_Base_SetConfig+0x150>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a29      	ldr	r2, [pc, #164]	@ (80064c4 <TIM_Base_SetConfig+0x154>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a10      	ldr	r2, [pc, #64]	@ (800649c <TIM_Base_SetConfig+0x12c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_Base_SetConfig+0xf8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a12      	ldr	r2, [pc, #72]	@ (80064ac <TIM_Base_SetConfig+0x13c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d103      	bne.n	8006470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b01      	cmp	r3, #1
 8006480:	d105      	bne.n	800648e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f023 0201 	bic.w	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	611a      	str	r2, [r3, #16]
  }
}
 800648e:	bf00      	nop
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40010000 	.word	0x40010000
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40000c00 	.word	0x40000c00
 80064ac:	40010400 	.word	0x40010400
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40014400 	.word	0x40014400
 80064b8:	40014800 	.word	0x40014800
 80064bc:	40001800 	.word	0x40001800
 80064c0:	40001c00 	.word	0x40001c00
 80064c4:	40002000 	.word	0x40002000

080064c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f023 0201 	bic.w	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f023 030a 	bic.w	r3, r3, #10
 8006504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	621a      	str	r2, [r3, #32]
}
 800651a:	bf00      	nop
 800651c:	371c      	adds	r7, #28
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006526:	b480      	push	{r7}
 8006528:	b087      	sub	sp, #28
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	f023 0210 	bic.w	r2, r3, #16
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	031b      	lsls	r3, r3, #12
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006562:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	621a      	str	r2, [r3, #32]
}
 800657a:	bf00      	nop
 800657c:	371c      	adds	r7, #28
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f043 0307 	orr.w	r3, r3, #7
 80065a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	609a      	str	r2, [r3, #8]
}
 80065b0:	bf00      	nop
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	021a      	lsls	r2, r3, #8
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	431a      	orrs	r2, r3
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	609a      	str	r2, [r3, #8]
}
 80065f0:	bf00      	nop
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006610:	2302      	movs	r3, #2
 8006612:	e05a      	b.n	80066ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800663a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a21      	ldr	r2, [pc, #132]	@ (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d022      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006660:	d01d      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a1d      	ldr	r2, [pc, #116]	@ (80066dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d018      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1b      	ldr	r2, [pc, #108]	@ (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a1a      	ldr	r2, [pc, #104]	@ (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00e      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a18      	ldr	r2, [pc, #96]	@ (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d009      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a17      	ldr	r2, [pc, #92]	@ (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d004      	beq.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a15      	ldr	r2, [pc, #84]	@ (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d10c      	bne.n	80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00
 80066e8:	40010400 	.word	0x40010400
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40001800 	.word	0x40001800

080066f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e042      	b.n	80067b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fc f9c6 	bl	8002ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2224      	movs	r2, #36	@ 0x24
 800674c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800675e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f82b 	bl	80067bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067c0:	b0c0      	sub	sp, #256	@ 0x100
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d8:	68d9      	ldr	r1, [r3, #12]
 80067da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	ea40 0301 	orr.w	r3, r0, r1
 80067e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	431a      	orrs	r2, r3
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006814:	f021 010c 	bic.w	r1, r1, #12
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006822:	430b      	orrs	r3, r1
 8006824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006836:	6999      	ldr	r1, [r3, #24]
 8006838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	ea40 0301 	orr.w	r3, r0, r1
 8006842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b8f      	ldr	r3, [pc, #572]	@ (8006a88 <UART_SetConfig+0x2cc>)
 800684c:	429a      	cmp	r2, r3
 800684e:	d005      	beq.n	800685c <UART_SetConfig+0xa0>
 8006850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4b8d      	ldr	r3, [pc, #564]	@ (8006a8c <UART_SetConfig+0x2d0>)
 8006858:	429a      	cmp	r2, r3
 800685a:	d104      	bne.n	8006866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800685c:	f7fe fe06 	bl	800546c <HAL_RCC_GetPCLK2Freq>
 8006860:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006864:	e003      	b.n	800686e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006866:	f7fe fded 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
 800686a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800686e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006878:	f040 810c 	bne.w	8006a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800687c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006880:	2200      	movs	r2, #0
 8006882:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006886:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800688a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800688e:	4622      	mov	r2, r4
 8006890:	462b      	mov	r3, r5
 8006892:	1891      	adds	r1, r2, r2
 8006894:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006896:	415b      	adcs	r3, r3
 8006898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800689a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800689e:	4621      	mov	r1, r4
 80068a0:	eb12 0801 	adds.w	r8, r2, r1
 80068a4:	4629      	mov	r1, r5
 80068a6:	eb43 0901 	adc.w	r9, r3, r1
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	f04f 0300 	mov.w	r3, #0
 80068b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068be:	4690      	mov	r8, r2
 80068c0:	4699      	mov	r9, r3
 80068c2:	4623      	mov	r3, r4
 80068c4:	eb18 0303 	adds.w	r3, r8, r3
 80068c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068cc:	462b      	mov	r3, r5
 80068ce:	eb49 0303 	adc.w	r3, r9, r3
 80068d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80068e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80068ea:	460b      	mov	r3, r1
 80068ec:	18db      	adds	r3, r3, r3
 80068ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80068f0:	4613      	mov	r3, r2
 80068f2:	eb42 0303 	adc.w	r3, r2, r3
 80068f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80068f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80068fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006900:	f7fa f992 	bl	8000c28 <__aeabi_uldivmod>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4b61      	ldr	r3, [pc, #388]	@ (8006a90 <UART_SetConfig+0x2d4>)
 800690a:	fba3 2302 	umull	r2, r3, r3, r2
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	011c      	lsls	r4, r3, #4
 8006912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006916:	2200      	movs	r2, #0
 8006918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800691c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006924:	4642      	mov	r2, r8
 8006926:	464b      	mov	r3, r9
 8006928:	1891      	adds	r1, r2, r2
 800692a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800692c:	415b      	adcs	r3, r3
 800692e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006934:	4641      	mov	r1, r8
 8006936:	eb12 0a01 	adds.w	sl, r2, r1
 800693a:	4649      	mov	r1, r9
 800693c:	eb43 0b01 	adc.w	fp, r3, r1
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	f04f 0300 	mov.w	r3, #0
 8006948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800694c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006954:	4692      	mov	sl, r2
 8006956:	469b      	mov	fp, r3
 8006958:	4643      	mov	r3, r8
 800695a:	eb1a 0303 	adds.w	r3, sl, r3
 800695e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006962:	464b      	mov	r3, r9
 8006964:	eb4b 0303 	adc.w	r3, fp, r3
 8006968:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800696c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006978:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800697c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006980:	460b      	mov	r3, r1
 8006982:	18db      	adds	r3, r3, r3
 8006984:	643b      	str	r3, [r7, #64]	@ 0x40
 8006986:	4613      	mov	r3, r2
 8006988:	eb42 0303 	adc.w	r3, r2, r3
 800698c:	647b      	str	r3, [r7, #68]	@ 0x44
 800698e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006996:	f7fa f947 	bl	8000c28 <__aeabi_uldivmod>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4611      	mov	r1, r2
 80069a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006a90 <UART_SetConfig+0x2d4>)
 80069a2:	fba3 2301 	umull	r2, r3, r3, r1
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	2264      	movs	r2, #100	@ 0x64
 80069aa:	fb02 f303 	mul.w	r3, r2, r3
 80069ae:	1acb      	subs	r3, r1, r3
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80069b6:	4b36      	ldr	r3, [pc, #216]	@ (8006a90 <UART_SetConfig+0x2d4>)
 80069b8:	fba3 2302 	umull	r2, r3, r3, r2
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069c4:	441c      	add	r4, r3
 80069c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80069d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80069d8:	4642      	mov	r2, r8
 80069da:	464b      	mov	r3, r9
 80069dc:	1891      	adds	r1, r2, r2
 80069de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80069e0:	415b      	adcs	r3, r3
 80069e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069e8:	4641      	mov	r1, r8
 80069ea:	1851      	adds	r1, r2, r1
 80069ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80069ee:	4649      	mov	r1, r9
 80069f0:	414b      	adcs	r3, r1
 80069f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006a00:	4659      	mov	r1, fp
 8006a02:	00cb      	lsls	r3, r1, #3
 8006a04:	4651      	mov	r1, sl
 8006a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a0a:	4651      	mov	r1, sl
 8006a0c:	00ca      	lsls	r2, r1, #3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	4619      	mov	r1, r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	4642      	mov	r2, r8
 8006a16:	189b      	adds	r3, r3, r2
 8006a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a1c:	464b      	mov	r3, r9
 8006a1e:	460a      	mov	r2, r1
 8006a20:	eb42 0303 	adc.w	r3, r2, r3
 8006a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	18db      	adds	r3, r3, r3
 8006a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a42:	4613      	mov	r3, r2
 8006a44:	eb42 0303 	adc.w	r3, r2, r3
 8006a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a52:	f7fa f8e9 	bl	8000c28 <__aeabi_uldivmod>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <UART_SetConfig+0x2d4>)
 8006a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a60:	095b      	lsrs	r3, r3, #5
 8006a62:	2164      	movs	r1, #100	@ 0x64
 8006a64:	fb01 f303 	mul.w	r3, r1, r3
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	3332      	adds	r3, #50	@ 0x32
 8006a6e:	4a08      	ldr	r2, [pc, #32]	@ (8006a90 <UART_SetConfig+0x2d4>)
 8006a70:	fba2 2303 	umull	r2, r3, r2, r3
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	f003 0207 	and.w	r2, r3, #7
 8006a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4422      	add	r2, r4
 8006a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a84:	e106      	b.n	8006c94 <UART_SetConfig+0x4d8>
 8006a86:	bf00      	nop
 8006a88:	40011000 	.word	0x40011000
 8006a8c:	40011400 	.word	0x40011400
 8006a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006aa6:	4642      	mov	r2, r8
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	1891      	adds	r1, r2, r2
 8006aac:	6239      	str	r1, [r7, #32]
 8006aae:	415b      	adcs	r3, r3
 8006ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ab6:	4641      	mov	r1, r8
 8006ab8:	1854      	adds	r4, r2, r1
 8006aba:	4649      	mov	r1, r9
 8006abc:	eb43 0501 	adc.w	r5, r3, r1
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	00eb      	lsls	r3, r5, #3
 8006aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ace:	00e2      	lsls	r2, r4, #3
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	461d      	mov	r5, r3
 8006ad4:	4643      	mov	r3, r8
 8006ad6:	18e3      	adds	r3, r4, r3
 8006ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006adc:	464b      	mov	r3, r9
 8006ade:	eb45 0303 	adc.w	r3, r5, r3
 8006ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006af2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b02:	4629      	mov	r1, r5
 8006b04:	008b      	lsls	r3, r1, #2
 8006b06:	4621      	mov	r1, r4
 8006b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	008a      	lsls	r2, r1, #2
 8006b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006b14:	f7fa f888 	bl	8000c28 <__aeabi_uldivmod>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4b60      	ldr	r3, [pc, #384]	@ (8006ca0 <UART_SetConfig+0x4e4>)
 8006b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b22:	095b      	lsrs	r3, r3, #5
 8006b24:	011c      	lsls	r4, r3, #4
 8006b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b38:	4642      	mov	r2, r8
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	1891      	adds	r1, r2, r2
 8006b3e:	61b9      	str	r1, [r7, #24]
 8006b40:	415b      	adcs	r3, r3
 8006b42:	61fb      	str	r3, [r7, #28]
 8006b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b48:	4641      	mov	r1, r8
 8006b4a:	1851      	adds	r1, r2, r1
 8006b4c:	6139      	str	r1, [r7, #16]
 8006b4e:	4649      	mov	r1, r9
 8006b50:	414b      	adcs	r3, r1
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b60:	4659      	mov	r1, fp
 8006b62:	00cb      	lsls	r3, r1, #3
 8006b64:	4651      	mov	r1, sl
 8006b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b6a:	4651      	mov	r1, sl
 8006b6c:	00ca      	lsls	r2, r1, #3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	4619      	mov	r1, r3
 8006b72:	4603      	mov	r3, r0
 8006b74:	4642      	mov	r2, r8
 8006b76:	189b      	adds	r3, r3, r2
 8006b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b7c:	464b      	mov	r3, r9
 8006b7e:	460a      	mov	r2, r1
 8006b80:	eb42 0303 	adc.w	r3, r2, r3
 8006b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b94:	f04f 0200 	mov.w	r2, #0
 8006b98:	f04f 0300 	mov.w	r3, #0
 8006b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	008b      	lsls	r3, r1, #2
 8006ba4:	4641      	mov	r1, r8
 8006ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006baa:	4641      	mov	r1, r8
 8006bac:	008a      	lsls	r2, r1, #2
 8006bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006bb2:	f7fa f839 	bl	8000c28 <__aeabi_uldivmod>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4611      	mov	r1, r2
 8006bbc:	4b38      	ldr	r3, [pc, #224]	@ (8006ca0 <UART_SetConfig+0x4e4>)
 8006bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8006bc2:	095b      	lsrs	r3, r3, #5
 8006bc4:	2264      	movs	r2, #100	@ 0x64
 8006bc6:	fb02 f303 	mul.w	r3, r2, r3
 8006bca:	1acb      	subs	r3, r1, r3
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	3332      	adds	r3, #50	@ 0x32
 8006bd0:	4a33      	ldr	r2, [pc, #204]	@ (8006ca0 <UART_SetConfig+0x4e4>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bdc:	441c      	add	r4, r3
 8006bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006be2:	2200      	movs	r2, #0
 8006be4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006be6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006be8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006bec:	4642      	mov	r2, r8
 8006bee:	464b      	mov	r3, r9
 8006bf0:	1891      	adds	r1, r2, r2
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	415b      	adcs	r3, r3
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bfc:	4641      	mov	r1, r8
 8006bfe:	1851      	adds	r1, r2, r1
 8006c00:	6039      	str	r1, [r7, #0]
 8006c02:	4649      	mov	r1, r9
 8006c04:	414b      	adcs	r3, r1
 8006c06:	607b      	str	r3, [r7, #4]
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c14:	4659      	mov	r1, fp
 8006c16:	00cb      	lsls	r3, r1, #3
 8006c18:	4651      	mov	r1, sl
 8006c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c1e:	4651      	mov	r1, sl
 8006c20:	00ca      	lsls	r2, r1, #3
 8006c22:	4610      	mov	r0, r2
 8006c24:	4619      	mov	r1, r3
 8006c26:	4603      	mov	r3, r0
 8006c28:	4642      	mov	r2, r8
 8006c2a:	189b      	adds	r3, r3, r2
 8006c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c2e:	464b      	mov	r3, r9
 8006c30:	460a      	mov	r2, r1
 8006c32:	eb42 0303 	adc.w	r3, r2, r3
 8006c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c42:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c50:	4649      	mov	r1, r9
 8006c52:	008b      	lsls	r3, r1, #2
 8006c54:	4641      	mov	r1, r8
 8006c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c5a:	4641      	mov	r1, r8
 8006c5c:	008a      	lsls	r2, r1, #2
 8006c5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c62:	f7f9 ffe1 	bl	8000c28 <__aeabi_uldivmod>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <UART_SetConfig+0x4e4>)
 8006c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	2164      	movs	r1, #100	@ 0x64
 8006c74:	fb01 f303 	mul.w	r3, r1, r3
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	3332      	adds	r3, #50	@ 0x32
 8006c7e:	4a08      	ldr	r2, [pc, #32]	@ (8006ca0 <UART_SetConfig+0x4e4>)
 8006c80:	fba2 2303 	umull	r2, r3, r2, r3
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	f003 020f 	and.w	r2, r3, #15
 8006c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4422      	add	r2, r4
 8006c92:	609a      	str	r2, [r3, #8]
}
 8006c94:	bf00      	nop
 8006c96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ca0:	51eb851f 	.word	0x51eb851f

08006ca4 <__cvt>:
 8006ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	ec57 6b10 	vmov	r6, r7, d0
 8006cac:	2f00      	cmp	r7, #0
 8006cae:	460c      	mov	r4, r1
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	bfbb      	ittet	lt
 8006cb6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006cba:	461f      	movlt	r7, r3
 8006cbc:	2300      	movge	r3, #0
 8006cbe:	232d      	movlt	r3, #45	@ 0x2d
 8006cc0:	700b      	strb	r3, [r1, #0]
 8006cc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cc4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006cc8:	4691      	mov	r9, r2
 8006cca:	f023 0820 	bic.w	r8, r3, #32
 8006cce:	bfbc      	itt	lt
 8006cd0:	4632      	movlt	r2, r6
 8006cd2:	4616      	movlt	r6, r2
 8006cd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006cd8:	d005      	beq.n	8006ce6 <__cvt+0x42>
 8006cda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006cde:	d100      	bne.n	8006ce2 <__cvt+0x3e>
 8006ce0:	3401      	adds	r4, #1
 8006ce2:	2102      	movs	r1, #2
 8006ce4:	e000      	b.n	8006ce8 <__cvt+0x44>
 8006ce6:	2103      	movs	r1, #3
 8006ce8:	ab03      	add	r3, sp, #12
 8006cea:	9301      	str	r3, [sp, #4]
 8006cec:	ab02      	add	r3, sp, #8
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	ec47 6b10 	vmov	d0, r6, r7
 8006cf4:	4653      	mov	r3, sl
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	f000 fdb2 	bl	8007860 <_dtoa_r>
 8006cfc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006d00:	4605      	mov	r5, r0
 8006d02:	d119      	bne.n	8006d38 <__cvt+0x94>
 8006d04:	f019 0f01 	tst.w	r9, #1
 8006d08:	d00e      	beq.n	8006d28 <__cvt+0x84>
 8006d0a:	eb00 0904 	add.w	r9, r0, r4
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2300      	movs	r3, #0
 8006d12:	4630      	mov	r0, r6
 8006d14:	4639      	mov	r1, r7
 8006d16:	f7f9 fef7 	bl	8000b08 <__aeabi_dcmpeq>
 8006d1a:	b108      	cbz	r0, 8006d20 <__cvt+0x7c>
 8006d1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d20:	2230      	movs	r2, #48	@ 0x30
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	454b      	cmp	r3, r9
 8006d26:	d31e      	bcc.n	8006d66 <__cvt+0xc2>
 8006d28:	9b03      	ldr	r3, [sp, #12]
 8006d2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d2c:	1b5b      	subs	r3, r3, r5
 8006d2e:	4628      	mov	r0, r5
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	b004      	add	sp, #16
 8006d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d3c:	eb00 0904 	add.w	r9, r0, r4
 8006d40:	d1e5      	bne.n	8006d0e <__cvt+0x6a>
 8006d42:	7803      	ldrb	r3, [r0, #0]
 8006d44:	2b30      	cmp	r3, #48	@ 0x30
 8006d46:	d10a      	bne.n	8006d5e <__cvt+0xba>
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	4639      	mov	r1, r7
 8006d50:	f7f9 feda 	bl	8000b08 <__aeabi_dcmpeq>
 8006d54:	b918      	cbnz	r0, 8006d5e <__cvt+0xba>
 8006d56:	f1c4 0401 	rsb	r4, r4, #1
 8006d5a:	f8ca 4000 	str.w	r4, [sl]
 8006d5e:	f8da 3000 	ldr.w	r3, [sl]
 8006d62:	4499      	add	r9, r3
 8006d64:	e7d3      	b.n	8006d0e <__cvt+0x6a>
 8006d66:	1c59      	adds	r1, r3, #1
 8006d68:	9103      	str	r1, [sp, #12]
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	e7d9      	b.n	8006d22 <__cvt+0x7e>

08006d6e <__exponent>:
 8006d6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d70:	2900      	cmp	r1, #0
 8006d72:	bfba      	itte	lt
 8006d74:	4249      	neglt	r1, r1
 8006d76:	232d      	movlt	r3, #45	@ 0x2d
 8006d78:	232b      	movge	r3, #43	@ 0x2b
 8006d7a:	2909      	cmp	r1, #9
 8006d7c:	7002      	strb	r2, [r0, #0]
 8006d7e:	7043      	strb	r3, [r0, #1]
 8006d80:	dd29      	ble.n	8006dd6 <__exponent+0x68>
 8006d82:	f10d 0307 	add.w	r3, sp, #7
 8006d86:	461d      	mov	r5, r3
 8006d88:	270a      	movs	r7, #10
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006d90:	fb07 1416 	mls	r4, r7, r6, r1
 8006d94:	3430      	adds	r4, #48	@ 0x30
 8006d96:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	2c63      	cmp	r4, #99	@ 0x63
 8006d9e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006da2:	4631      	mov	r1, r6
 8006da4:	dcf1      	bgt.n	8006d8a <__exponent+0x1c>
 8006da6:	3130      	adds	r1, #48	@ 0x30
 8006da8:	1e94      	subs	r4, r2, #2
 8006daa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006dae:	1c41      	adds	r1, r0, #1
 8006db0:	4623      	mov	r3, r4
 8006db2:	42ab      	cmp	r3, r5
 8006db4:	d30a      	bcc.n	8006dcc <__exponent+0x5e>
 8006db6:	f10d 0309 	add.w	r3, sp, #9
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	42ac      	cmp	r4, r5
 8006dbe:	bf88      	it	hi
 8006dc0:	2300      	movhi	r3, #0
 8006dc2:	3302      	adds	r3, #2
 8006dc4:	4403      	add	r3, r0
 8006dc6:	1a18      	subs	r0, r3, r0
 8006dc8:	b003      	add	sp, #12
 8006dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dcc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006dd0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006dd4:	e7ed      	b.n	8006db2 <__exponent+0x44>
 8006dd6:	2330      	movs	r3, #48	@ 0x30
 8006dd8:	3130      	adds	r1, #48	@ 0x30
 8006dda:	7083      	strb	r3, [r0, #2]
 8006ddc:	70c1      	strb	r1, [r0, #3]
 8006dde:	1d03      	adds	r3, r0, #4
 8006de0:	e7f1      	b.n	8006dc6 <__exponent+0x58>
	...

08006de4 <_printf_float>:
 8006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	b08d      	sub	sp, #52	@ 0x34
 8006dea:	460c      	mov	r4, r1
 8006dec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006df0:	4616      	mov	r6, r2
 8006df2:	461f      	mov	r7, r3
 8006df4:	4605      	mov	r5, r0
 8006df6:	f000 fc77 	bl	80076e8 <_localeconv_r>
 8006dfa:	6803      	ldr	r3, [r0, #0]
 8006dfc:	9304      	str	r3, [sp, #16]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7f9 fa56 	bl	80002b0 <strlen>
 8006e04:	2300      	movs	r3, #0
 8006e06:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e08:	f8d8 3000 	ldr.w	r3, [r8]
 8006e0c:	9005      	str	r0, [sp, #20]
 8006e0e:	3307      	adds	r3, #7
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	f103 0208 	add.w	r2, r3, #8
 8006e18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006e1c:	f8d4 b000 	ldr.w	fp, [r4]
 8006e20:	f8c8 2000 	str.w	r2, [r8]
 8006e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006e2c:	9307      	str	r3, [sp, #28]
 8006e2e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006e36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e3a:	4b9c      	ldr	r3, [pc, #624]	@ (80070ac <_printf_float+0x2c8>)
 8006e3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e40:	f7f9 fe94 	bl	8000b6c <__aeabi_dcmpun>
 8006e44:	bb70      	cbnz	r0, 8006ea4 <_printf_float+0xc0>
 8006e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e4a:	4b98      	ldr	r3, [pc, #608]	@ (80070ac <_printf_float+0x2c8>)
 8006e4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e50:	f7f9 fe6e 	bl	8000b30 <__aeabi_dcmple>
 8006e54:	bb30      	cbnz	r0, 8006ea4 <_printf_float+0xc0>
 8006e56:	2200      	movs	r2, #0
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	f7f9 fe5d 	bl	8000b1c <__aeabi_dcmplt>
 8006e62:	b110      	cbz	r0, 8006e6a <_printf_float+0x86>
 8006e64:	232d      	movs	r3, #45	@ 0x2d
 8006e66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e6a:	4a91      	ldr	r2, [pc, #580]	@ (80070b0 <_printf_float+0x2cc>)
 8006e6c:	4b91      	ldr	r3, [pc, #580]	@ (80070b4 <_printf_float+0x2d0>)
 8006e6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006e72:	bf94      	ite	ls
 8006e74:	4690      	movls	r8, r2
 8006e76:	4698      	movhi	r8, r3
 8006e78:	2303      	movs	r3, #3
 8006e7a:	6123      	str	r3, [r4, #16]
 8006e7c:	f02b 0304 	bic.w	r3, fp, #4
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	f04f 0900 	mov.w	r9, #0
 8006e86:	9700      	str	r7, [sp, #0]
 8006e88:	4633      	mov	r3, r6
 8006e8a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 f9d2 	bl	8007238 <_printf_common>
 8006e94:	3001      	adds	r0, #1
 8006e96:	f040 808d 	bne.w	8006fb4 <_printf_float+0x1d0>
 8006e9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e9e:	b00d      	add	sp, #52	@ 0x34
 8006ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4649      	mov	r1, r9
 8006eac:	f7f9 fe5e 	bl	8000b6c <__aeabi_dcmpun>
 8006eb0:	b140      	cbz	r0, 8006ec4 <_printf_float+0xe0>
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bfbc      	itt	lt
 8006eb8:	232d      	movlt	r3, #45	@ 0x2d
 8006eba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006ebe:	4a7e      	ldr	r2, [pc, #504]	@ (80070b8 <_printf_float+0x2d4>)
 8006ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80070bc <_printf_float+0x2d8>)
 8006ec2:	e7d4      	b.n	8006e6e <_printf_float+0x8a>
 8006ec4:	6863      	ldr	r3, [r4, #4]
 8006ec6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006eca:	9206      	str	r2, [sp, #24]
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	d13b      	bne.n	8006f48 <_printf_float+0x164>
 8006ed0:	2306      	movs	r3, #6
 8006ed2:	6063      	str	r3, [r4, #4]
 8006ed4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006ed8:	2300      	movs	r3, #0
 8006eda:	6022      	str	r2, [r4, #0]
 8006edc:	9303      	str	r3, [sp, #12]
 8006ede:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ee0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006ee4:	ab09      	add	r3, sp, #36	@ 0x24
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	6861      	ldr	r1, [r4, #4]
 8006eea:	ec49 8b10 	vmov	d0, r8, r9
 8006eee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f7ff fed6 	bl	8006ca4 <__cvt>
 8006ef8:	9b06      	ldr	r3, [sp, #24]
 8006efa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006efc:	2b47      	cmp	r3, #71	@ 0x47
 8006efe:	4680      	mov	r8, r0
 8006f00:	d129      	bne.n	8006f56 <_printf_float+0x172>
 8006f02:	1cc8      	adds	r0, r1, #3
 8006f04:	db02      	blt.n	8006f0c <_printf_float+0x128>
 8006f06:	6863      	ldr	r3, [r4, #4]
 8006f08:	4299      	cmp	r1, r3
 8006f0a:	dd41      	ble.n	8006f90 <_printf_float+0x1ac>
 8006f0c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006f10:	fa5f fa8a 	uxtb.w	sl, sl
 8006f14:	3901      	subs	r1, #1
 8006f16:	4652      	mov	r2, sl
 8006f18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006f1c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f1e:	f7ff ff26 	bl	8006d6e <__exponent>
 8006f22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f24:	1813      	adds	r3, r2, r0
 8006f26:	2a01      	cmp	r2, #1
 8006f28:	4681      	mov	r9, r0
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	dc02      	bgt.n	8006f34 <_printf_float+0x150>
 8006f2e:	6822      	ldr	r2, [r4, #0]
 8006f30:	07d2      	lsls	r2, r2, #31
 8006f32:	d501      	bpl.n	8006f38 <_printf_float+0x154>
 8006f34:	3301      	adds	r3, #1
 8006f36:	6123      	str	r3, [r4, #16]
 8006f38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0a2      	beq.n	8006e86 <_printf_float+0xa2>
 8006f40:	232d      	movs	r3, #45	@ 0x2d
 8006f42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f46:	e79e      	b.n	8006e86 <_printf_float+0xa2>
 8006f48:	9a06      	ldr	r2, [sp, #24]
 8006f4a:	2a47      	cmp	r2, #71	@ 0x47
 8006f4c:	d1c2      	bne.n	8006ed4 <_printf_float+0xf0>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1c0      	bne.n	8006ed4 <_printf_float+0xf0>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e7bd      	b.n	8006ed2 <_printf_float+0xee>
 8006f56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f5a:	d9db      	bls.n	8006f14 <_printf_float+0x130>
 8006f5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006f60:	d118      	bne.n	8006f94 <_printf_float+0x1b0>
 8006f62:	2900      	cmp	r1, #0
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	dd0b      	ble.n	8006f80 <_printf_float+0x19c>
 8006f68:	6121      	str	r1, [r4, #16]
 8006f6a:	b913      	cbnz	r3, 8006f72 <_printf_float+0x18e>
 8006f6c:	6822      	ldr	r2, [r4, #0]
 8006f6e:	07d0      	lsls	r0, r2, #31
 8006f70:	d502      	bpl.n	8006f78 <_printf_float+0x194>
 8006f72:	3301      	adds	r3, #1
 8006f74:	440b      	add	r3, r1
 8006f76:	6123      	str	r3, [r4, #16]
 8006f78:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006f7a:	f04f 0900 	mov.w	r9, #0
 8006f7e:	e7db      	b.n	8006f38 <_printf_float+0x154>
 8006f80:	b913      	cbnz	r3, 8006f88 <_printf_float+0x1a4>
 8006f82:	6822      	ldr	r2, [r4, #0]
 8006f84:	07d2      	lsls	r2, r2, #31
 8006f86:	d501      	bpl.n	8006f8c <_printf_float+0x1a8>
 8006f88:	3302      	adds	r3, #2
 8006f8a:	e7f4      	b.n	8006f76 <_printf_float+0x192>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e7f2      	b.n	8006f76 <_printf_float+0x192>
 8006f90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f96:	4299      	cmp	r1, r3
 8006f98:	db05      	blt.n	8006fa6 <_printf_float+0x1c2>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	6121      	str	r1, [r4, #16]
 8006f9e:	07d8      	lsls	r0, r3, #31
 8006fa0:	d5ea      	bpl.n	8006f78 <_printf_float+0x194>
 8006fa2:	1c4b      	adds	r3, r1, #1
 8006fa4:	e7e7      	b.n	8006f76 <_printf_float+0x192>
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	bfd4      	ite	le
 8006faa:	f1c1 0202 	rsble	r2, r1, #2
 8006fae:	2201      	movgt	r2, #1
 8006fb0:	4413      	add	r3, r2
 8006fb2:	e7e0      	b.n	8006f76 <_printf_float+0x192>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	055a      	lsls	r2, r3, #21
 8006fb8:	d407      	bmi.n	8006fca <_printf_float+0x1e6>
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47b8      	blx	r7
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d12b      	bne.n	8007020 <_printf_float+0x23c>
 8006fc8:	e767      	b.n	8006e9a <_printf_float+0xb6>
 8006fca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006fce:	f240 80dd 	bls.w	800718c <_printf_float+0x3a8>
 8006fd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f7f9 fd95 	bl	8000b08 <__aeabi_dcmpeq>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d033      	beq.n	800704a <_printf_float+0x266>
 8006fe2:	4a37      	ldr	r2, [pc, #220]	@ (80070c0 <_printf_float+0x2dc>)
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	f43f af54 	beq.w	8006e9a <_printf_float+0xb6>
 8006ff2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006ff6:	4543      	cmp	r3, r8
 8006ff8:	db02      	blt.n	8007000 <_printf_float+0x21c>
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	07d8      	lsls	r0, r3, #31
 8006ffe:	d50f      	bpl.n	8007020 <_printf_float+0x23c>
 8007000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007004:	4631      	mov	r1, r6
 8007006:	4628      	mov	r0, r5
 8007008:	47b8      	blx	r7
 800700a:	3001      	adds	r0, #1
 800700c:	f43f af45 	beq.w	8006e9a <_printf_float+0xb6>
 8007010:	f04f 0900 	mov.w	r9, #0
 8007014:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007018:	f104 0a1a 	add.w	sl, r4, #26
 800701c:	45c8      	cmp	r8, r9
 800701e:	dc09      	bgt.n	8007034 <_printf_float+0x250>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	079b      	lsls	r3, r3, #30
 8007024:	f100 8103 	bmi.w	800722e <_printf_float+0x44a>
 8007028:	68e0      	ldr	r0, [r4, #12]
 800702a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800702c:	4298      	cmp	r0, r3
 800702e:	bfb8      	it	lt
 8007030:	4618      	movlt	r0, r3
 8007032:	e734      	b.n	8006e9e <_printf_float+0xba>
 8007034:	2301      	movs	r3, #1
 8007036:	4652      	mov	r2, sl
 8007038:	4631      	mov	r1, r6
 800703a:	4628      	mov	r0, r5
 800703c:	47b8      	blx	r7
 800703e:	3001      	adds	r0, #1
 8007040:	f43f af2b 	beq.w	8006e9a <_printf_float+0xb6>
 8007044:	f109 0901 	add.w	r9, r9, #1
 8007048:	e7e8      	b.n	800701c <_printf_float+0x238>
 800704a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800704c:	2b00      	cmp	r3, #0
 800704e:	dc39      	bgt.n	80070c4 <_printf_float+0x2e0>
 8007050:	4a1b      	ldr	r2, [pc, #108]	@ (80070c0 <_printf_float+0x2dc>)
 8007052:	2301      	movs	r3, #1
 8007054:	4631      	mov	r1, r6
 8007056:	4628      	mov	r0, r5
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	f43f af1d 	beq.w	8006e9a <_printf_float+0xb6>
 8007060:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007064:	ea59 0303 	orrs.w	r3, r9, r3
 8007068:	d102      	bne.n	8007070 <_printf_float+0x28c>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	07d9      	lsls	r1, r3, #31
 800706e:	d5d7      	bpl.n	8007020 <_printf_float+0x23c>
 8007070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007074:	4631      	mov	r1, r6
 8007076:	4628      	mov	r0, r5
 8007078:	47b8      	blx	r7
 800707a:	3001      	adds	r0, #1
 800707c:	f43f af0d 	beq.w	8006e9a <_printf_float+0xb6>
 8007080:	f04f 0a00 	mov.w	sl, #0
 8007084:	f104 0b1a 	add.w	fp, r4, #26
 8007088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708a:	425b      	negs	r3, r3
 800708c:	4553      	cmp	r3, sl
 800708e:	dc01      	bgt.n	8007094 <_printf_float+0x2b0>
 8007090:	464b      	mov	r3, r9
 8007092:	e793      	b.n	8006fbc <_printf_float+0x1d8>
 8007094:	2301      	movs	r3, #1
 8007096:	465a      	mov	r2, fp
 8007098:	4631      	mov	r1, r6
 800709a:	4628      	mov	r0, r5
 800709c:	47b8      	blx	r7
 800709e:	3001      	adds	r0, #1
 80070a0:	f43f aefb 	beq.w	8006e9a <_printf_float+0xb6>
 80070a4:	f10a 0a01 	add.w	sl, sl, #1
 80070a8:	e7ee      	b.n	8007088 <_printf_float+0x2a4>
 80070aa:	bf00      	nop
 80070ac:	7fefffff 	.word	0x7fefffff
 80070b0:	080095d8 	.word	0x080095d8
 80070b4:	080095dc 	.word	0x080095dc
 80070b8:	080095e0 	.word	0x080095e0
 80070bc:	080095e4 	.word	0x080095e4
 80070c0:	080095e8 	.word	0x080095e8
 80070c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80070c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80070ca:	4553      	cmp	r3, sl
 80070cc:	bfa8      	it	ge
 80070ce:	4653      	movge	r3, sl
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	4699      	mov	r9, r3
 80070d4:	dc36      	bgt.n	8007144 <_printf_float+0x360>
 80070d6:	f04f 0b00 	mov.w	fp, #0
 80070da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070de:	f104 021a 	add.w	r2, r4, #26
 80070e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80070e4:	9306      	str	r3, [sp, #24]
 80070e6:	eba3 0309 	sub.w	r3, r3, r9
 80070ea:	455b      	cmp	r3, fp
 80070ec:	dc31      	bgt.n	8007152 <_printf_float+0x36e>
 80070ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f0:	459a      	cmp	sl, r3
 80070f2:	dc3a      	bgt.n	800716a <_printf_float+0x386>
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	07da      	lsls	r2, r3, #31
 80070f8:	d437      	bmi.n	800716a <_printf_float+0x386>
 80070fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070fc:	ebaa 0903 	sub.w	r9, sl, r3
 8007100:	9b06      	ldr	r3, [sp, #24]
 8007102:	ebaa 0303 	sub.w	r3, sl, r3
 8007106:	4599      	cmp	r9, r3
 8007108:	bfa8      	it	ge
 800710a:	4699      	movge	r9, r3
 800710c:	f1b9 0f00 	cmp.w	r9, #0
 8007110:	dc33      	bgt.n	800717a <_printf_float+0x396>
 8007112:	f04f 0800 	mov.w	r8, #0
 8007116:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800711a:	f104 0b1a 	add.w	fp, r4, #26
 800711e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007120:	ebaa 0303 	sub.w	r3, sl, r3
 8007124:	eba3 0309 	sub.w	r3, r3, r9
 8007128:	4543      	cmp	r3, r8
 800712a:	f77f af79 	ble.w	8007020 <_printf_float+0x23c>
 800712e:	2301      	movs	r3, #1
 8007130:	465a      	mov	r2, fp
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	f43f aeae 	beq.w	8006e9a <_printf_float+0xb6>
 800713e:	f108 0801 	add.w	r8, r8, #1
 8007142:	e7ec      	b.n	800711e <_printf_float+0x33a>
 8007144:	4642      	mov	r2, r8
 8007146:	4631      	mov	r1, r6
 8007148:	4628      	mov	r0, r5
 800714a:	47b8      	blx	r7
 800714c:	3001      	adds	r0, #1
 800714e:	d1c2      	bne.n	80070d6 <_printf_float+0x2f2>
 8007150:	e6a3      	b.n	8006e9a <_printf_float+0xb6>
 8007152:	2301      	movs	r3, #1
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	9206      	str	r2, [sp, #24]
 800715a:	47b8      	blx	r7
 800715c:	3001      	adds	r0, #1
 800715e:	f43f ae9c 	beq.w	8006e9a <_printf_float+0xb6>
 8007162:	9a06      	ldr	r2, [sp, #24]
 8007164:	f10b 0b01 	add.w	fp, fp, #1
 8007168:	e7bb      	b.n	80070e2 <_printf_float+0x2fe>
 800716a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800716e:	4631      	mov	r1, r6
 8007170:	4628      	mov	r0, r5
 8007172:	47b8      	blx	r7
 8007174:	3001      	adds	r0, #1
 8007176:	d1c0      	bne.n	80070fa <_printf_float+0x316>
 8007178:	e68f      	b.n	8006e9a <_printf_float+0xb6>
 800717a:	9a06      	ldr	r2, [sp, #24]
 800717c:	464b      	mov	r3, r9
 800717e:	4442      	add	r2, r8
 8007180:	4631      	mov	r1, r6
 8007182:	4628      	mov	r0, r5
 8007184:	47b8      	blx	r7
 8007186:	3001      	adds	r0, #1
 8007188:	d1c3      	bne.n	8007112 <_printf_float+0x32e>
 800718a:	e686      	b.n	8006e9a <_printf_float+0xb6>
 800718c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007190:	f1ba 0f01 	cmp.w	sl, #1
 8007194:	dc01      	bgt.n	800719a <_printf_float+0x3b6>
 8007196:	07db      	lsls	r3, r3, #31
 8007198:	d536      	bpl.n	8007208 <_printf_float+0x424>
 800719a:	2301      	movs	r3, #1
 800719c:	4642      	mov	r2, r8
 800719e:	4631      	mov	r1, r6
 80071a0:	4628      	mov	r0, r5
 80071a2:	47b8      	blx	r7
 80071a4:	3001      	adds	r0, #1
 80071a6:	f43f ae78 	beq.w	8006e9a <_printf_float+0xb6>
 80071aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071ae:	4631      	mov	r1, r6
 80071b0:	4628      	mov	r0, r5
 80071b2:	47b8      	blx	r7
 80071b4:	3001      	adds	r0, #1
 80071b6:	f43f ae70 	beq.w	8006e9a <_printf_float+0xb6>
 80071ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80071be:	2200      	movs	r2, #0
 80071c0:	2300      	movs	r3, #0
 80071c2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80071c6:	f7f9 fc9f 	bl	8000b08 <__aeabi_dcmpeq>
 80071ca:	b9c0      	cbnz	r0, 80071fe <_printf_float+0x41a>
 80071cc:	4653      	mov	r3, sl
 80071ce:	f108 0201 	add.w	r2, r8, #1
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b8      	blx	r7
 80071d8:	3001      	adds	r0, #1
 80071da:	d10c      	bne.n	80071f6 <_printf_float+0x412>
 80071dc:	e65d      	b.n	8006e9a <_printf_float+0xb6>
 80071de:	2301      	movs	r3, #1
 80071e0:	465a      	mov	r2, fp
 80071e2:	4631      	mov	r1, r6
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b8      	blx	r7
 80071e8:	3001      	adds	r0, #1
 80071ea:	f43f ae56 	beq.w	8006e9a <_printf_float+0xb6>
 80071ee:	f108 0801 	add.w	r8, r8, #1
 80071f2:	45d0      	cmp	r8, sl
 80071f4:	dbf3      	blt.n	80071de <_printf_float+0x3fa>
 80071f6:	464b      	mov	r3, r9
 80071f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80071fc:	e6df      	b.n	8006fbe <_printf_float+0x1da>
 80071fe:	f04f 0800 	mov.w	r8, #0
 8007202:	f104 0b1a 	add.w	fp, r4, #26
 8007206:	e7f4      	b.n	80071f2 <_printf_float+0x40e>
 8007208:	2301      	movs	r3, #1
 800720a:	4642      	mov	r2, r8
 800720c:	e7e1      	b.n	80071d2 <_printf_float+0x3ee>
 800720e:	2301      	movs	r3, #1
 8007210:	464a      	mov	r2, r9
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	f43f ae3e 	beq.w	8006e9a <_printf_float+0xb6>
 800721e:	f108 0801 	add.w	r8, r8, #1
 8007222:	68e3      	ldr	r3, [r4, #12]
 8007224:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007226:	1a5b      	subs	r3, r3, r1
 8007228:	4543      	cmp	r3, r8
 800722a:	dcf0      	bgt.n	800720e <_printf_float+0x42a>
 800722c:	e6fc      	b.n	8007028 <_printf_float+0x244>
 800722e:	f04f 0800 	mov.w	r8, #0
 8007232:	f104 0919 	add.w	r9, r4, #25
 8007236:	e7f4      	b.n	8007222 <_printf_float+0x43e>

08007238 <_printf_common>:
 8007238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800723c:	4616      	mov	r6, r2
 800723e:	4698      	mov	r8, r3
 8007240:	688a      	ldr	r2, [r1, #8]
 8007242:	690b      	ldr	r3, [r1, #16]
 8007244:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007248:	4293      	cmp	r3, r2
 800724a:	bfb8      	it	lt
 800724c:	4613      	movlt	r3, r2
 800724e:	6033      	str	r3, [r6, #0]
 8007250:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007254:	4607      	mov	r7, r0
 8007256:	460c      	mov	r4, r1
 8007258:	b10a      	cbz	r2, 800725e <_printf_common+0x26>
 800725a:	3301      	adds	r3, #1
 800725c:	6033      	str	r3, [r6, #0]
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	0699      	lsls	r1, r3, #26
 8007262:	bf42      	ittt	mi
 8007264:	6833      	ldrmi	r3, [r6, #0]
 8007266:	3302      	addmi	r3, #2
 8007268:	6033      	strmi	r3, [r6, #0]
 800726a:	6825      	ldr	r5, [r4, #0]
 800726c:	f015 0506 	ands.w	r5, r5, #6
 8007270:	d106      	bne.n	8007280 <_printf_common+0x48>
 8007272:	f104 0a19 	add.w	sl, r4, #25
 8007276:	68e3      	ldr	r3, [r4, #12]
 8007278:	6832      	ldr	r2, [r6, #0]
 800727a:	1a9b      	subs	r3, r3, r2
 800727c:	42ab      	cmp	r3, r5
 800727e:	dc26      	bgt.n	80072ce <_printf_common+0x96>
 8007280:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007284:	6822      	ldr	r2, [r4, #0]
 8007286:	3b00      	subs	r3, #0
 8007288:	bf18      	it	ne
 800728a:	2301      	movne	r3, #1
 800728c:	0692      	lsls	r2, r2, #26
 800728e:	d42b      	bmi.n	80072e8 <_printf_common+0xb0>
 8007290:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007294:	4641      	mov	r1, r8
 8007296:	4638      	mov	r0, r7
 8007298:	47c8      	blx	r9
 800729a:	3001      	adds	r0, #1
 800729c:	d01e      	beq.n	80072dc <_printf_common+0xa4>
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	6922      	ldr	r2, [r4, #16]
 80072a2:	f003 0306 	and.w	r3, r3, #6
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	bf02      	ittt	eq
 80072aa:	68e5      	ldreq	r5, [r4, #12]
 80072ac:	6833      	ldreq	r3, [r6, #0]
 80072ae:	1aed      	subeq	r5, r5, r3
 80072b0:	68a3      	ldr	r3, [r4, #8]
 80072b2:	bf0c      	ite	eq
 80072b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072b8:	2500      	movne	r5, #0
 80072ba:	4293      	cmp	r3, r2
 80072bc:	bfc4      	itt	gt
 80072be:	1a9b      	subgt	r3, r3, r2
 80072c0:	18ed      	addgt	r5, r5, r3
 80072c2:	2600      	movs	r6, #0
 80072c4:	341a      	adds	r4, #26
 80072c6:	42b5      	cmp	r5, r6
 80072c8:	d11a      	bne.n	8007300 <_printf_common+0xc8>
 80072ca:	2000      	movs	r0, #0
 80072cc:	e008      	b.n	80072e0 <_printf_common+0xa8>
 80072ce:	2301      	movs	r3, #1
 80072d0:	4652      	mov	r2, sl
 80072d2:	4641      	mov	r1, r8
 80072d4:	4638      	mov	r0, r7
 80072d6:	47c8      	blx	r9
 80072d8:	3001      	adds	r0, #1
 80072da:	d103      	bne.n	80072e4 <_printf_common+0xac>
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e4:	3501      	adds	r5, #1
 80072e6:	e7c6      	b.n	8007276 <_printf_common+0x3e>
 80072e8:	18e1      	adds	r1, r4, r3
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	2030      	movs	r0, #48	@ 0x30
 80072ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072f2:	4422      	add	r2, r4
 80072f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072fc:	3302      	adds	r3, #2
 80072fe:	e7c7      	b.n	8007290 <_printf_common+0x58>
 8007300:	2301      	movs	r3, #1
 8007302:	4622      	mov	r2, r4
 8007304:	4641      	mov	r1, r8
 8007306:	4638      	mov	r0, r7
 8007308:	47c8      	blx	r9
 800730a:	3001      	adds	r0, #1
 800730c:	d0e6      	beq.n	80072dc <_printf_common+0xa4>
 800730e:	3601      	adds	r6, #1
 8007310:	e7d9      	b.n	80072c6 <_printf_common+0x8e>
	...

08007314 <_printf_i>:
 8007314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007318:	7e0f      	ldrb	r7, [r1, #24]
 800731a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800731c:	2f78      	cmp	r7, #120	@ 0x78
 800731e:	4691      	mov	r9, r2
 8007320:	4680      	mov	r8, r0
 8007322:	460c      	mov	r4, r1
 8007324:	469a      	mov	sl, r3
 8007326:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800732a:	d807      	bhi.n	800733c <_printf_i+0x28>
 800732c:	2f62      	cmp	r7, #98	@ 0x62
 800732e:	d80a      	bhi.n	8007346 <_printf_i+0x32>
 8007330:	2f00      	cmp	r7, #0
 8007332:	f000 80d2 	beq.w	80074da <_printf_i+0x1c6>
 8007336:	2f58      	cmp	r7, #88	@ 0x58
 8007338:	f000 80b9 	beq.w	80074ae <_printf_i+0x19a>
 800733c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007340:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007344:	e03a      	b.n	80073bc <_printf_i+0xa8>
 8007346:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800734a:	2b15      	cmp	r3, #21
 800734c:	d8f6      	bhi.n	800733c <_printf_i+0x28>
 800734e:	a101      	add	r1, pc, #4	@ (adr r1, 8007354 <_printf_i+0x40>)
 8007350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007354:	080073ad 	.word	0x080073ad
 8007358:	080073c1 	.word	0x080073c1
 800735c:	0800733d 	.word	0x0800733d
 8007360:	0800733d 	.word	0x0800733d
 8007364:	0800733d 	.word	0x0800733d
 8007368:	0800733d 	.word	0x0800733d
 800736c:	080073c1 	.word	0x080073c1
 8007370:	0800733d 	.word	0x0800733d
 8007374:	0800733d 	.word	0x0800733d
 8007378:	0800733d 	.word	0x0800733d
 800737c:	0800733d 	.word	0x0800733d
 8007380:	080074c1 	.word	0x080074c1
 8007384:	080073eb 	.word	0x080073eb
 8007388:	0800747b 	.word	0x0800747b
 800738c:	0800733d 	.word	0x0800733d
 8007390:	0800733d 	.word	0x0800733d
 8007394:	080074e3 	.word	0x080074e3
 8007398:	0800733d 	.word	0x0800733d
 800739c:	080073eb 	.word	0x080073eb
 80073a0:	0800733d 	.word	0x0800733d
 80073a4:	0800733d 	.word	0x0800733d
 80073a8:	08007483 	.word	0x08007483
 80073ac:	6833      	ldr	r3, [r6, #0]
 80073ae:	1d1a      	adds	r2, r3, #4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6032      	str	r2, [r6, #0]
 80073b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073bc:	2301      	movs	r3, #1
 80073be:	e09d      	b.n	80074fc <_printf_i+0x1e8>
 80073c0:	6833      	ldr	r3, [r6, #0]
 80073c2:	6820      	ldr	r0, [r4, #0]
 80073c4:	1d19      	adds	r1, r3, #4
 80073c6:	6031      	str	r1, [r6, #0]
 80073c8:	0606      	lsls	r6, r0, #24
 80073ca:	d501      	bpl.n	80073d0 <_printf_i+0xbc>
 80073cc:	681d      	ldr	r5, [r3, #0]
 80073ce:	e003      	b.n	80073d8 <_printf_i+0xc4>
 80073d0:	0645      	lsls	r5, r0, #25
 80073d2:	d5fb      	bpl.n	80073cc <_printf_i+0xb8>
 80073d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073d8:	2d00      	cmp	r5, #0
 80073da:	da03      	bge.n	80073e4 <_printf_i+0xd0>
 80073dc:	232d      	movs	r3, #45	@ 0x2d
 80073de:	426d      	negs	r5, r5
 80073e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073e4:	4859      	ldr	r0, [pc, #356]	@ (800754c <_printf_i+0x238>)
 80073e6:	230a      	movs	r3, #10
 80073e8:	e011      	b.n	800740e <_printf_i+0xfa>
 80073ea:	6821      	ldr	r1, [r4, #0]
 80073ec:	6833      	ldr	r3, [r6, #0]
 80073ee:	0608      	lsls	r0, r1, #24
 80073f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80073f4:	d402      	bmi.n	80073fc <_printf_i+0xe8>
 80073f6:	0649      	lsls	r1, r1, #25
 80073f8:	bf48      	it	mi
 80073fa:	b2ad      	uxthmi	r5, r5
 80073fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80073fe:	4853      	ldr	r0, [pc, #332]	@ (800754c <_printf_i+0x238>)
 8007400:	6033      	str	r3, [r6, #0]
 8007402:	bf14      	ite	ne
 8007404:	230a      	movne	r3, #10
 8007406:	2308      	moveq	r3, #8
 8007408:	2100      	movs	r1, #0
 800740a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800740e:	6866      	ldr	r6, [r4, #4]
 8007410:	60a6      	str	r6, [r4, #8]
 8007412:	2e00      	cmp	r6, #0
 8007414:	bfa2      	ittt	ge
 8007416:	6821      	ldrge	r1, [r4, #0]
 8007418:	f021 0104 	bicge.w	r1, r1, #4
 800741c:	6021      	strge	r1, [r4, #0]
 800741e:	b90d      	cbnz	r5, 8007424 <_printf_i+0x110>
 8007420:	2e00      	cmp	r6, #0
 8007422:	d04b      	beq.n	80074bc <_printf_i+0x1a8>
 8007424:	4616      	mov	r6, r2
 8007426:	fbb5 f1f3 	udiv	r1, r5, r3
 800742a:	fb03 5711 	mls	r7, r3, r1, r5
 800742e:	5dc7      	ldrb	r7, [r0, r7]
 8007430:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007434:	462f      	mov	r7, r5
 8007436:	42bb      	cmp	r3, r7
 8007438:	460d      	mov	r5, r1
 800743a:	d9f4      	bls.n	8007426 <_printf_i+0x112>
 800743c:	2b08      	cmp	r3, #8
 800743e:	d10b      	bne.n	8007458 <_printf_i+0x144>
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	07df      	lsls	r7, r3, #31
 8007444:	d508      	bpl.n	8007458 <_printf_i+0x144>
 8007446:	6923      	ldr	r3, [r4, #16]
 8007448:	6861      	ldr	r1, [r4, #4]
 800744a:	4299      	cmp	r1, r3
 800744c:	bfde      	ittt	le
 800744e:	2330      	movle	r3, #48	@ 0x30
 8007450:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007454:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007458:	1b92      	subs	r2, r2, r6
 800745a:	6122      	str	r2, [r4, #16]
 800745c:	f8cd a000 	str.w	sl, [sp]
 8007460:	464b      	mov	r3, r9
 8007462:	aa03      	add	r2, sp, #12
 8007464:	4621      	mov	r1, r4
 8007466:	4640      	mov	r0, r8
 8007468:	f7ff fee6 	bl	8007238 <_printf_common>
 800746c:	3001      	adds	r0, #1
 800746e:	d14a      	bne.n	8007506 <_printf_i+0x1f2>
 8007470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007474:	b004      	add	sp, #16
 8007476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	f043 0320 	orr.w	r3, r3, #32
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	4833      	ldr	r0, [pc, #204]	@ (8007550 <_printf_i+0x23c>)
 8007484:	2778      	movs	r7, #120	@ 0x78
 8007486:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	6831      	ldr	r1, [r6, #0]
 800748e:	061f      	lsls	r7, r3, #24
 8007490:	f851 5b04 	ldr.w	r5, [r1], #4
 8007494:	d402      	bmi.n	800749c <_printf_i+0x188>
 8007496:	065f      	lsls	r7, r3, #25
 8007498:	bf48      	it	mi
 800749a:	b2ad      	uxthmi	r5, r5
 800749c:	6031      	str	r1, [r6, #0]
 800749e:	07d9      	lsls	r1, r3, #31
 80074a0:	bf44      	itt	mi
 80074a2:	f043 0320 	orrmi.w	r3, r3, #32
 80074a6:	6023      	strmi	r3, [r4, #0]
 80074a8:	b11d      	cbz	r5, 80074b2 <_printf_i+0x19e>
 80074aa:	2310      	movs	r3, #16
 80074ac:	e7ac      	b.n	8007408 <_printf_i+0xf4>
 80074ae:	4827      	ldr	r0, [pc, #156]	@ (800754c <_printf_i+0x238>)
 80074b0:	e7e9      	b.n	8007486 <_printf_i+0x172>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	f023 0320 	bic.w	r3, r3, #32
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	e7f6      	b.n	80074aa <_printf_i+0x196>
 80074bc:	4616      	mov	r6, r2
 80074be:	e7bd      	b.n	800743c <_printf_i+0x128>
 80074c0:	6833      	ldr	r3, [r6, #0]
 80074c2:	6825      	ldr	r5, [r4, #0]
 80074c4:	6961      	ldr	r1, [r4, #20]
 80074c6:	1d18      	adds	r0, r3, #4
 80074c8:	6030      	str	r0, [r6, #0]
 80074ca:	062e      	lsls	r6, r5, #24
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	d501      	bpl.n	80074d4 <_printf_i+0x1c0>
 80074d0:	6019      	str	r1, [r3, #0]
 80074d2:	e002      	b.n	80074da <_printf_i+0x1c6>
 80074d4:	0668      	lsls	r0, r5, #25
 80074d6:	d5fb      	bpl.n	80074d0 <_printf_i+0x1bc>
 80074d8:	8019      	strh	r1, [r3, #0]
 80074da:	2300      	movs	r3, #0
 80074dc:	6123      	str	r3, [r4, #16]
 80074de:	4616      	mov	r6, r2
 80074e0:	e7bc      	b.n	800745c <_printf_i+0x148>
 80074e2:	6833      	ldr	r3, [r6, #0]
 80074e4:	1d1a      	adds	r2, r3, #4
 80074e6:	6032      	str	r2, [r6, #0]
 80074e8:	681e      	ldr	r6, [r3, #0]
 80074ea:	6862      	ldr	r2, [r4, #4]
 80074ec:	2100      	movs	r1, #0
 80074ee:	4630      	mov	r0, r6
 80074f0:	f7f8 fe8e 	bl	8000210 <memchr>
 80074f4:	b108      	cbz	r0, 80074fa <_printf_i+0x1e6>
 80074f6:	1b80      	subs	r0, r0, r6
 80074f8:	6060      	str	r0, [r4, #4]
 80074fa:	6863      	ldr	r3, [r4, #4]
 80074fc:	6123      	str	r3, [r4, #16]
 80074fe:	2300      	movs	r3, #0
 8007500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007504:	e7aa      	b.n	800745c <_printf_i+0x148>
 8007506:	6923      	ldr	r3, [r4, #16]
 8007508:	4632      	mov	r2, r6
 800750a:	4649      	mov	r1, r9
 800750c:	4640      	mov	r0, r8
 800750e:	47d0      	blx	sl
 8007510:	3001      	adds	r0, #1
 8007512:	d0ad      	beq.n	8007470 <_printf_i+0x15c>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	079b      	lsls	r3, r3, #30
 8007518:	d413      	bmi.n	8007542 <_printf_i+0x22e>
 800751a:	68e0      	ldr	r0, [r4, #12]
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	4298      	cmp	r0, r3
 8007520:	bfb8      	it	lt
 8007522:	4618      	movlt	r0, r3
 8007524:	e7a6      	b.n	8007474 <_printf_i+0x160>
 8007526:	2301      	movs	r3, #1
 8007528:	4632      	mov	r2, r6
 800752a:	4649      	mov	r1, r9
 800752c:	4640      	mov	r0, r8
 800752e:	47d0      	blx	sl
 8007530:	3001      	adds	r0, #1
 8007532:	d09d      	beq.n	8007470 <_printf_i+0x15c>
 8007534:	3501      	adds	r5, #1
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	9903      	ldr	r1, [sp, #12]
 800753a:	1a5b      	subs	r3, r3, r1
 800753c:	42ab      	cmp	r3, r5
 800753e:	dcf2      	bgt.n	8007526 <_printf_i+0x212>
 8007540:	e7eb      	b.n	800751a <_printf_i+0x206>
 8007542:	2500      	movs	r5, #0
 8007544:	f104 0619 	add.w	r6, r4, #25
 8007548:	e7f5      	b.n	8007536 <_printf_i+0x222>
 800754a:	bf00      	nop
 800754c:	080095ea 	.word	0x080095ea
 8007550:	080095fb 	.word	0x080095fb

08007554 <std>:
 8007554:	2300      	movs	r3, #0
 8007556:	b510      	push	{r4, lr}
 8007558:	4604      	mov	r4, r0
 800755a:	e9c0 3300 	strd	r3, r3, [r0]
 800755e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007562:	6083      	str	r3, [r0, #8]
 8007564:	8181      	strh	r1, [r0, #12]
 8007566:	6643      	str	r3, [r0, #100]	@ 0x64
 8007568:	81c2      	strh	r2, [r0, #14]
 800756a:	6183      	str	r3, [r0, #24]
 800756c:	4619      	mov	r1, r3
 800756e:	2208      	movs	r2, #8
 8007570:	305c      	adds	r0, #92	@ 0x5c
 8007572:	f000 f8b1 	bl	80076d8 <memset>
 8007576:	4b0d      	ldr	r3, [pc, #52]	@ (80075ac <std+0x58>)
 8007578:	6263      	str	r3, [r4, #36]	@ 0x24
 800757a:	4b0d      	ldr	r3, [pc, #52]	@ (80075b0 <std+0x5c>)
 800757c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800757e:	4b0d      	ldr	r3, [pc, #52]	@ (80075b4 <std+0x60>)
 8007580:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007582:	4b0d      	ldr	r3, [pc, #52]	@ (80075b8 <std+0x64>)
 8007584:	6323      	str	r3, [r4, #48]	@ 0x30
 8007586:	4b0d      	ldr	r3, [pc, #52]	@ (80075bc <std+0x68>)
 8007588:	6224      	str	r4, [r4, #32]
 800758a:	429c      	cmp	r4, r3
 800758c:	d006      	beq.n	800759c <std+0x48>
 800758e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007592:	4294      	cmp	r4, r2
 8007594:	d002      	beq.n	800759c <std+0x48>
 8007596:	33d0      	adds	r3, #208	@ 0xd0
 8007598:	429c      	cmp	r4, r3
 800759a:	d105      	bne.n	80075a8 <std+0x54>
 800759c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a4:	f000 b8ce 	b.w	8007744 <__retarget_lock_init_recursive>
 80075a8:	bd10      	pop	{r4, pc}
 80075aa:	bf00      	nop
 80075ac:	08008db1 	.word	0x08008db1
 80075b0:	08008dd3 	.word	0x08008dd3
 80075b4:	08008e0b 	.word	0x08008e0b
 80075b8:	08008e2f 	.word	0x08008e2f
 80075bc:	20000544 	.word	0x20000544

080075c0 <stdio_exit_handler>:
 80075c0:	4a02      	ldr	r2, [pc, #8]	@ (80075cc <stdio_exit_handler+0xc>)
 80075c2:	4903      	ldr	r1, [pc, #12]	@ (80075d0 <stdio_exit_handler+0x10>)
 80075c4:	4803      	ldr	r0, [pc, #12]	@ (80075d4 <stdio_exit_handler+0x14>)
 80075c6:	f000 b869 	b.w	800769c <_fwalk_sglue>
 80075ca:	bf00      	nop
 80075cc:	2000002c 	.word	0x2000002c
 80075d0:	08008645 	.word	0x08008645
 80075d4:	2000003c 	.word	0x2000003c

080075d8 <cleanup_stdio>:
 80075d8:	6841      	ldr	r1, [r0, #4]
 80075da:	4b0c      	ldr	r3, [pc, #48]	@ (800760c <cleanup_stdio+0x34>)
 80075dc:	4299      	cmp	r1, r3
 80075de:	b510      	push	{r4, lr}
 80075e0:	4604      	mov	r4, r0
 80075e2:	d001      	beq.n	80075e8 <cleanup_stdio+0x10>
 80075e4:	f001 f82e 	bl	8008644 <_fflush_r>
 80075e8:	68a1      	ldr	r1, [r4, #8]
 80075ea:	4b09      	ldr	r3, [pc, #36]	@ (8007610 <cleanup_stdio+0x38>)
 80075ec:	4299      	cmp	r1, r3
 80075ee:	d002      	beq.n	80075f6 <cleanup_stdio+0x1e>
 80075f0:	4620      	mov	r0, r4
 80075f2:	f001 f827 	bl	8008644 <_fflush_r>
 80075f6:	68e1      	ldr	r1, [r4, #12]
 80075f8:	4b06      	ldr	r3, [pc, #24]	@ (8007614 <cleanup_stdio+0x3c>)
 80075fa:	4299      	cmp	r1, r3
 80075fc:	d004      	beq.n	8007608 <cleanup_stdio+0x30>
 80075fe:	4620      	mov	r0, r4
 8007600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007604:	f001 b81e 	b.w	8008644 <_fflush_r>
 8007608:	bd10      	pop	{r4, pc}
 800760a:	bf00      	nop
 800760c:	20000544 	.word	0x20000544
 8007610:	200005ac 	.word	0x200005ac
 8007614:	20000614 	.word	0x20000614

08007618 <global_stdio_init.part.0>:
 8007618:	b510      	push	{r4, lr}
 800761a:	4b0b      	ldr	r3, [pc, #44]	@ (8007648 <global_stdio_init.part.0+0x30>)
 800761c:	4c0b      	ldr	r4, [pc, #44]	@ (800764c <global_stdio_init.part.0+0x34>)
 800761e:	4a0c      	ldr	r2, [pc, #48]	@ (8007650 <global_stdio_init.part.0+0x38>)
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	4620      	mov	r0, r4
 8007624:	2200      	movs	r2, #0
 8007626:	2104      	movs	r1, #4
 8007628:	f7ff ff94 	bl	8007554 <std>
 800762c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007630:	2201      	movs	r2, #1
 8007632:	2109      	movs	r1, #9
 8007634:	f7ff ff8e 	bl	8007554 <std>
 8007638:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800763c:	2202      	movs	r2, #2
 800763e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007642:	2112      	movs	r1, #18
 8007644:	f7ff bf86 	b.w	8007554 <std>
 8007648:	2000067c 	.word	0x2000067c
 800764c:	20000544 	.word	0x20000544
 8007650:	080075c1 	.word	0x080075c1

08007654 <__sfp_lock_acquire>:
 8007654:	4801      	ldr	r0, [pc, #4]	@ (800765c <__sfp_lock_acquire+0x8>)
 8007656:	f000 b876 	b.w	8007746 <__retarget_lock_acquire_recursive>
 800765a:	bf00      	nop
 800765c:	20000681 	.word	0x20000681

08007660 <__sfp_lock_release>:
 8007660:	4801      	ldr	r0, [pc, #4]	@ (8007668 <__sfp_lock_release+0x8>)
 8007662:	f000 b871 	b.w	8007748 <__retarget_lock_release_recursive>
 8007666:	bf00      	nop
 8007668:	20000681 	.word	0x20000681

0800766c <__sinit>:
 800766c:	b510      	push	{r4, lr}
 800766e:	4604      	mov	r4, r0
 8007670:	f7ff fff0 	bl	8007654 <__sfp_lock_acquire>
 8007674:	6a23      	ldr	r3, [r4, #32]
 8007676:	b11b      	cbz	r3, 8007680 <__sinit+0x14>
 8007678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800767c:	f7ff bff0 	b.w	8007660 <__sfp_lock_release>
 8007680:	4b04      	ldr	r3, [pc, #16]	@ (8007694 <__sinit+0x28>)
 8007682:	6223      	str	r3, [r4, #32]
 8007684:	4b04      	ldr	r3, [pc, #16]	@ (8007698 <__sinit+0x2c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1f5      	bne.n	8007678 <__sinit+0xc>
 800768c:	f7ff ffc4 	bl	8007618 <global_stdio_init.part.0>
 8007690:	e7f2      	b.n	8007678 <__sinit+0xc>
 8007692:	bf00      	nop
 8007694:	080075d9 	.word	0x080075d9
 8007698:	2000067c 	.word	0x2000067c

0800769c <_fwalk_sglue>:
 800769c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076a0:	4607      	mov	r7, r0
 80076a2:	4688      	mov	r8, r1
 80076a4:	4614      	mov	r4, r2
 80076a6:	2600      	movs	r6, #0
 80076a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076ac:	f1b9 0901 	subs.w	r9, r9, #1
 80076b0:	d505      	bpl.n	80076be <_fwalk_sglue+0x22>
 80076b2:	6824      	ldr	r4, [r4, #0]
 80076b4:	2c00      	cmp	r4, #0
 80076b6:	d1f7      	bne.n	80076a8 <_fwalk_sglue+0xc>
 80076b8:	4630      	mov	r0, r6
 80076ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076be:	89ab      	ldrh	r3, [r5, #12]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d907      	bls.n	80076d4 <_fwalk_sglue+0x38>
 80076c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076c8:	3301      	adds	r3, #1
 80076ca:	d003      	beq.n	80076d4 <_fwalk_sglue+0x38>
 80076cc:	4629      	mov	r1, r5
 80076ce:	4638      	mov	r0, r7
 80076d0:	47c0      	blx	r8
 80076d2:	4306      	orrs	r6, r0
 80076d4:	3568      	adds	r5, #104	@ 0x68
 80076d6:	e7e9      	b.n	80076ac <_fwalk_sglue+0x10>

080076d8 <memset>:
 80076d8:	4402      	add	r2, r0
 80076da:	4603      	mov	r3, r0
 80076dc:	4293      	cmp	r3, r2
 80076de:	d100      	bne.n	80076e2 <memset+0xa>
 80076e0:	4770      	bx	lr
 80076e2:	f803 1b01 	strb.w	r1, [r3], #1
 80076e6:	e7f9      	b.n	80076dc <memset+0x4>

080076e8 <_localeconv_r>:
 80076e8:	4800      	ldr	r0, [pc, #0]	@ (80076ec <_localeconv_r+0x4>)
 80076ea:	4770      	bx	lr
 80076ec:	20000178 	.word	0x20000178

080076f0 <__errno>:
 80076f0:	4b01      	ldr	r3, [pc, #4]	@ (80076f8 <__errno+0x8>)
 80076f2:	6818      	ldr	r0, [r3, #0]
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	20000038 	.word	0x20000038

080076fc <__libc_init_array>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007734 <__libc_init_array+0x38>)
 8007700:	4c0d      	ldr	r4, [pc, #52]	@ (8007738 <__libc_init_array+0x3c>)
 8007702:	1b64      	subs	r4, r4, r5
 8007704:	10a4      	asrs	r4, r4, #2
 8007706:	2600      	movs	r6, #0
 8007708:	42a6      	cmp	r6, r4
 800770a:	d109      	bne.n	8007720 <__libc_init_array+0x24>
 800770c:	4d0b      	ldr	r5, [pc, #44]	@ (800773c <__libc_init_array+0x40>)
 800770e:	4c0c      	ldr	r4, [pc, #48]	@ (8007740 <__libc_init_array+0x44>)
 8007710:	f001 ff48 	bl	80095a4 <_init>
 8007714:	1b64      	subs	r4, r4, r5
 8007716:	10a4      	asrs	r4, r4, #2
 8007718:	2600      	movs	r6, #0
 800771a:	42a6      	cmp	r6, r4
 800771c:	d105      	bne.n	800772a <__libc_init_array+0x2e>
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	f855 3b04 	ldr.w	r3, [r5], #4
 8007724:	4798      	blx	r3
 8007726:	3601      	adds	r6, #1
 8007728:	e7ee      	b.n	8007708 <__libc_init_array+0xc>
 800772a:	f855 3b04 	ldr.w	r3, [r5], #4
 800772e:	4798      	blx	r3
 8007730:	3601      	adds	r6, #1
 8007732:	e7f2      	b.n	800771a <__libc_init_array+0x1e>
 8007734:	08009950 	.word	0x08009950
 8007738:	08009950 	.word	0x08009950
 800773c:	08009950 	.word	0x08009950
 8007740:	08009954 	.word	0x08009954

08007744 <__retarget_lock_init_recursive>:
 8007744:	4770      	bx	lr

08007746 <__retarget_lock_acquire_recursive>:
 8007746:	4770      	bx	lr

08007748 <__retarget_lock_release_recursive>:
 8007748:	4770      	bx	lr

0800774a <quorem>:
 800774a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774e:	6903      	ldr	r3, [r0, #16]
 8007750:	690c      	ldr	r4, [r1, #16]
 8007752:	42a3      	cmp	r3, r4
 8007754:	4607      	mov	r7, r0
 8007756:	db7e      	blt.n	8007856 <quorem+0x10c>
 8007758:	3c01      	subs	r4, #1
 800775a:	f101 0814 	add.w	r8, r1, #20
 800775e:	00a3      	lsls	r3, r4, #2
 8007760:	f100 0514 	add.w	r5, r0, #20
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007770:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007774:	3301      	adds	r3, #1
 8007776:	429a      	cmp	r2, r3
 8007778:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800777c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007780:	d32e      	bcc.n	80077e0 <quorem+0x96>
 8007782:	f04f 0a00 	mov.w	sl, #0
 8007786:	46c4      	mov	ip, r8
 8007788:	46ae      	mov	lr, r5
 800778a:	46d3      	mov	fp, sl
 800778c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007790:	b298      	uxth	r0, r3
 8007792:	fb06 a000 	mla	r0, r6, r0, sl
 8007796:	0c02      	lsrs	r2, r0, #16
 8007798:	0c1b      	lsrs	r3, r3, #16
 800779a:	fb06 2303 	mla	r3, r6, r3, r2
 800779e:	f8de 2000 	ldr.w	r2, [lr]
 80077a2:	b280      	uxth	r0, r0
 80077a4:	b292      	uxth	r2, r2
 80077a6:	1a12      	subs	r2, r2, r0
 80077a8:	445a      	add	r2, fp
 80077aa:	f8de 0000 	ldr.w	r0, [lr]
 80077ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80077b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80077bc:	b292      	uxth	r2, r2
 80077be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80077c2:	45e1      	cmp	r9, ip
 80077c4:	f84e 2b04 	str.w	r2, [lr], #4
 80077c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80077cc:	d2de      	bcs.n	800778c <quorem+0x42>
 80077ce:	9b00      	ldr	r3, [sp, #0]
 80077d0:	58eb      	ldr	r3, [r5, r3]
 80077d2:	b92b      	cbnz	r3, 80077e0 <quorem+0x96>
 80077d4:	9b01      	ldr	r3, [sp, #4]
 80077d6:	3b04      	subs	r3, #4
 80077d8:	429d      	cmp	r5, r3
 80077da:	461a      	mov	r2, r3
 80077dc:	d32f      	bcc.n	800783e <quorem+0xf4>
 80077de:	613c      	str	r4, [r7, #16]
 80077e0:	4638      	mov	r0, r7
 80077e2:	f001 f9dd 	bl	8008ba0 <__mcmp>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	db25      	blt.n	8007836 <quorem+0xec>
 80077ea:	4629      	mov	r1, r5
 80077ec:	2000      	movs	r0, #0
 80077ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80077f2:	f8d1 c000 	ldr.w	ip, [r1]
 80077f6:	fa1f fe82 	uxth.w	lr, r2
 80077fa:	fa1f f38c 	uxth.w	r3, ip
 80077fe:	eba3 030e 	sub.w	r3, r3, lr
 8007802:	4403      	add	r3, r0
 8007804:	0c12      	lsrs	r2, r2, #16
 8007806:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800780a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800780e:	b29b      	uxth	r3, r3
 8007810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007814:	45c1      	cmp	r9, r8
 8007816:	f841 3b04 	str.w	r3, [r1], #4
 800781a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800781e:	d2e6      	bcs.n	80077ee <quorem+0xa4>
 8007820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007824:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007828:	b922      	cbnz	r2, 8007834 <quorem+0xea>
 800782a:	3b04      	subs	r3, #4
 800782c:	429d      	cmp	r5, r3
 800782e:	461a      	mov	r2, r3
 8007830:	d30b      	bcc.n	800784a <quorem+0x100>
 8007832:	613c      	str	r4, [r7, #16]
 8007834:	3601      	adds	r6, #1
 8007836:	4630      	mov	r0, r6
 8007838:	b003      	add	sp, #12
 800783a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783e:	6812      	ldr	r2, [r2, #0]
 8007840:	3b04      	subs	r3, #4
 8007842:	2a00      	cmp	r2, #0
 8007844:	d1cb      	bne.n	80077de <quorem+0x94>
 8007846:	3c01      	subs	r4, #1
 8007848:	e7c6      	b.n	80077d8 <quorem+0x8e>
 800784a:	6812      	ldr	r2, [r2, #0]
 800784c:	3b04      	subs	r3, #4
 800784e:	2a00      	cmp	r2, #0
 8007850:	d1ef      	bne.n	8007832 <quorem+0xe8>
 8007852:	3c01      	subs	r4, #1
 8007854:	e7ea      	b.n	800782c <quorem+0xe2>
 8007856:	2000      	movs	r0, #0
 8007858:	e7ee      	b.n	8007838 <quorem+0xee>
 800785a:	0000      	movs	r0, r0
 800785c:	0000      	movs	r0, r0
	...

08007860 <_dtoa_r>:
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	69c7      	ldr	r7, [r0, #28]
 8007866:	b099      	sub	sp, #100	@ 0x64
 8007868:	ed8d 0b02 	vstr	d0, [sp, #8]
 800786c:	ec55 4b10 	vmov	r4, r5, d0
 8007870:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007872:	9109      	str	r1, [sp, #36]	@ 0x24
 8007874:	4683      	mov	fp, r0
 8007876:	920e      	str	r2, [sp, #56]	@ 0x38
 8007878:	9313      	str	r3, [sp, #76]	@ 0x4c
 800787a:	b97f      	cbnz	r7, 800789c <_dtoa_r+0x3c>
 800787c:	2010      	movs	r0, #16
 800787e:	f000 fdb3 	bl	80083e8 <malloc>
 8007882:	4602      	mov	r2, r0
 8007884:	f8cb 001c 	str.w	r0, [fp, #28]
 8007888:	b920      	cbnz	r0, 8007894 <_dtoa_r+0x34>
 800788a:	4ba7      	ldr	r3, [pc, #668]	@ (8007b28 <_dtoa_r+0x2c8>)
 800788c:	21ef      	movs	r1, #239	@ 0xef
 800788e:	48a7      	ldr	r0, [pc, #668]	@ (8007b2c <_dtoa_r+0x2cc>)
 8007890:	f001 fb36 	bl	8008f00 <__assert_func>
 8007894:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007898:	6007      	str	r7, [r0, #0]
 800789a:	60c7      	str	r7, [r0, #12]
 800789c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078a0:	6819      	ldr	r1, [r3, #0]
 80078a2:	b159      	cbz	r1, 80078bc <_dtoa_r+0x5c>
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	604a      	str	r2, [r1, #4]
 80078a8:	2301      	movs	r3, #1
 80078aa:	4093      	lsls	r3, r2
 80078ac:	608b      	str	r3, [r1, #8]
 80078ae:	4658      	mov	r0, fp
 80078b0:	f000 ff3c 	bl	800872c <_Bfree>
 80078b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	1e2b      	subs	r3, r5, #0
 80078be:	bfb9      	ittee	lt
 80078c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80078c4:	9303      	strlt	r3, [sp, #12]
 80078c6:	2300      	movge	r3, #0
 80078c8:	6033      	strge	r3, [r6, #0]
 80078ca:	9f03      	ldr	r7, [sp, #12]
 80078cc:	4b98      	ldr	r3, [pc, #608]	@ (8007b30 <_dtoa_r+0x2d0>)
 80078ce:	bfbc      	itt	lt
 80078d0:	2201      	movlt	r2, #1
 80078d2:	6032      	strlt	r2, [r6, #0]
 80078d4:	43bb      	bics	r3, r7
 80078d6:	d112      	bne.n	80078fe <_dtoa_r+0x9e>
 80078d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80078da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078e4:	4323      	orrs	r3, r4
 80078e6:	f000 854d 	beq.w	8008384 <_dtoa_r+0xb24>
 80078ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007b44 <_dtoa_r+0x2e4>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 854f 	beq.w	8008394 <_dtoa_r+0xb34>
 80078f6:	f10a 0303 	add.w	r3, sl, #3
 80078fa:	f000 bd49 	b.w	8008390 <_dtoa_r+0xb30>
 80078fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007902:	2200      	movs	r2, #0
 8007904:	ec51 0b17 	vmov	r0, r1, d7
 8007908:	2300      	movs	r3, #0
 800790a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800790e:	f7f9 f8fb 	bl	8000b08 <__aeabi_dcmpeq>
 8007912:	4680      	mov	r8, r0
 8007914:	b158      	cbz	r0, 800792e <_dtoa_r+0xce>
 8007916:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007918:	2301      	movs	r3, #1
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800791e:	b113      	cbz	r3, 8007926 <_dtoa_r+0xc6>
 8007920:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007922:	4b84      	ldr	r3, [pc, #528]	@ (8007b34 <_dtoa_r+0x2d4>)
 8007924:	6013      	str	r3, [r2, #0]
 8007926:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007b48 <_dtoa_r+0x2e8>
 800792a:	f000 bd33 	b.w	8008394 <_dtoa_r+0xb34>
 800792e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007932:	aa16      	add	r2, sp, #88	@ 0x58
 8007934:	a917      	add	r1, sp, #92	@ 0x5c
 8007936:	4658      	mov	r0, fp
 8007938:	f001 f9e2 	bl	8008d00 <__d2b>
 800793c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007940:	4681      	mov	r9, r0
 8007942:	2e00      	cmp	r6, #0
 8007944:	d077      	beq.n	8007a36 <_dtoa_r+0x1d6>
 8007946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007948:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800794c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007954:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007958:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800795c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007960:	4619      	mov	r1, r3
 8007962:	2200      	movs	r2, #0
 8007964:	4b74      	ldr	r3, [pc, #464]	@ (8007b38 <_dtoa_r+0x2d8>)
 8007966:	f7f8 fcaf 	bl	80002c8 <__aeabi_dsub>
 800796a:	a369      	add	r3, pc, #420	@ (adr r3, 8007b10 <_dtoa_r+0x2b0>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f7f8 fe62 	bl	8000638 <__aeabi_dmul>
 8007974:	a368      	add	r3, pc, #416	@ (adr r3, 8007b18 <_dtoa_r+0x2b8>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f7f8 fca7 	bl	80002cc <__adddf3>
 800797e:	4604      	mov	r4, r0
 8007980:	4630      	mov	r0, r6
 8007982:	460d      	mov	r5, r1
 8007984:	f7f8 fdee 	bl	8000564 <__aeabi_i2d>
 8007988:	a365      	add	r3, pc, #404	@ (adr r3, 8007b20 <_dtoa_r+0x2c0>)
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	f7f8 fe53 	bl	8000638 <__aeabi_dmul>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4620      	mov	r0, r4
 8007998:	4629      	mov	r1, r5
 800799a:	f7f8 fc97 	bl	80002cc <__adddf3>
 800799e:	4604      	mov	r4, r0
 80079a0:	460d      	mov	r5, r1
 80079a2:	f7f9 f8f9 	bl	8000b98 <__aeabi_d2iz>
 80079a6:	2200      	movs	r2, #0
 80079a8:	4607      	mov	r7, r0
 80079aa:	2300      	movs	r3, #0
 80079ac:	4620      	mov	r0, r4
 80079ae:	4629      	mov	r1, r5
 80079b0:	f7f9 f8b4 	bl	8000b1c <__aeabi_dcmplt>
 80079b4:	b140      	cbz	r0, 80079c8 <_dtoa_r+0x168>
 80079b6:	4638      	mov	r0, r7
 80079b8:	f7f8 fdd4 	bl	8000564 <__aeabi_i2d>
 80079bc:	4622      	mov	r2, r4
 80079be:	462b      	mov	r3, r5
 80079c0:	f7f9 f8a2 	bl	8000b08 <__aeabi_dcmpeq>
 80079c4:	b900      	cbnz	r0, 80079c8 <_dtoa_r+0x168>
 80079c6:	3f01      	subs	r7, #1
 80079c8:	2f16      	cmp	r7, #22
 80079ca:	d851      	bhi.n	8007a70 <_dtoa_r+0x210>
 80079cc:	4b5b      	ldr	r3, [pc, #364]	@ (8007b3c <_dtoa_r+0x2dc>)
 80079ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079da:	f7f9 f89f 	bl	8000b1c <__aeabi_dcmplt>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d048      	beq.n	8007a74 <_dtoa_r+0x214>
 80079e2:	3f01      	subs	r7, #1
 80079e4:	2300      	movs	r3, #0
 80079e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80079e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80079ea:	1b9b      	subs	r3, r3, r6
 80079ec:	1e5a      	subs	r2, r3, #1
 80079ee:	bf44      	itt	mi
 80079f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80079f4:	2300      	movmi	r3, #0
 80079f6:	9208      	str	r2, [sp, #32]
 80079f8:	bf54      	ite	pl
 80079fa:	f04f 0800 	movpl.w	r8, #0
 80079fe:	9308      	strmi	r3, [sp, #32]
 8007a00:	2f00      	cmp	r7, #0
 8007a02:	db39      	blt.n	8007a78 <_dtoa_r+0x218>
 8007a04:	9b08      	ldr	r3, [sp, #32]
 8007a06:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007a08:	443b      	add	r3, r7
 8007a0a:	9308      	str	r3, [sp, #32]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a12:	2b09      	cmp	r3, #9
 8007a14:	d864      	bhi.n	8007ae0 <_dtoa_r+0x280>
 8007a16:	2b05      	cmp	r3, #5
 8007a18:	bfc4      	itt	gt
 8007a1a:	3b04      	subgt	r3, #4
 8007a1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a20:	f1a3 0302 	sub.w	r3, r3, #2
 8007a24:	bfcc      	ite	gt
 8007a26:	2400      	movgt	r4, #0
 8007a28:	2401      	movle	r4, #1
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d863      	bhi.n	8007af6 <_dtoa_r+0x296>
 8007a2e:	e8df f003 	tbb	[pc, r3]
 8007a32:	372a      	.short	0x372a
 8007a34:	5535      	.short	0x5535
 8007a36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007a3a:	441e      	add	r6, r3
 8007a3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a40:	2b20      	cmp	r3, #32
 8007a42:	bfc1      	itttt	gt
 8007a44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a48:	409f      	lslgt	r7, r3
 8007a4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007a4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007a52:	bfd6      	itet	le
 8007a54:	f1c3 0320 	rsble	r3, r3, #32
 8007a58:	ea47 0003 	orrgt.w	r0, r7, r3
 8007a5c:	fa04 f003 	lslle.w	r0, r4, r3
 8007a60:	f7f8 fd70 	bl	8000544 <__aeabi_ui2d>
 8007a64:	2201      	movs	r2, #1
 8007a66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007a6a:	3e01      	subs	r6, #1
 8007a6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007a6e:	e777      	b.n	8007960 <_dtoa_r+0x100>
 8007a70:	2301      	movs	r3, #1
 8007a72:	e7b8      	b.n	80079e6 <_dtoa_r+0x186>
 8007a74:	9012      	str	r0, [sp, #72]	@ 0x48
 8007a76:	e7b7      	b.n	80079e8 <_dtoa_r+0x188>
 8007a78:	427b      	negs	r3, r7
 8007a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	eba8 0807 	sub.w	r8, r8, r7
 8007a82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a84:	e7c4      	b.n	8007a10 <_dtoa_r+0x1b0>
 8007a86:	2300      	movs	r3, #0
 8007a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dc35      	bgt.n	8007afc <_dtoa_r+0x29c>
 8007a90:	2301      	movs	r3, #1
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	9307      	str	r3, [sp, #28]
 8007a96:	461a      	mov	r2, r3
 8007a98:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a9a:	e00b      	b.n	8007ab4 <_dtoa_r+0x254>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e7f3      	b.n	8007a88 <_dtoa_r+0x228>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007aa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aa6:	18fb      	adds	r3, r7, r3
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	9307      	str	r3, [sp, #28]
 8007ab0:	bfb8      	it	lt
 8007ab2:	2301      	movlt	r3, #1
 8007ab4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ab8:	2100      	movs	r1, #0
 8007aba:	2204      	movs	r2, #4
 8007abc:	f102 0514 	add.w	r5, r2, #20
 8007ac0:	429d      	cmp	r5, r3
 8007ac2:	d91f      	bls.n	8007b04 <_dtoa_r+0x2a4>
 8007ac4:	6041      	str	r1, [r0, #4]
 8007ac6:	4658      	mov	r0, fp
 8007ac8:	f000 fdf0 	bl	80086ac <_Balloc>
 8007acc:	4682      	mov	sl, r0
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d13c      	bne.n	8007b4c <_dtoa_r+0x2ec>
 8007ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b40 <_dtoa_r+0x2e0>)
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007ada:	e6d8      	b.n	800788e <_dtoa_r+0x2e>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e7e0      	b.n	8007aa2 <_dtoa_r+0x242>
 8007ae0:	2401      	movs	r4, #1
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ae6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007ae8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	9307      	str	r3, [sp, #28]
 8007af0:	2200      	movs	r2, #0
 8007af2:	2312      	movs	r3, #18
 8007af4:	e7d0      	b.n	8007a98 <_dtoa_r+0x238>
 8007af6:	2301      	movs	r3, #1
 8007af8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007afa:	e7f5      	b.n	8007ae8 <_dtoa_r+0x288>
 8007afc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	9307      	str	r3, [sp, #28]
 8007b02:	e7d7      	b.n	8007ab4 <_dtoa_r+0x254>
 8007b04:	3101      	adds	r1, #1
 8007b06:	0052      	lsls	r2, r2, #1
 8007b08:	e7d8      	b.n	8007abc <_dtoa_r+0x25c>
 8007b0a:	bf00      	nop
 8007b0c:	f3af 8000 	nop.w
 8007b10:	636f4361 	.word	0x636f4361
 8007b14:	3fd287a7 	.word	0x3fd287a7
 8007b18:	8b60c8b3 	.word	0x8b60c8b3
 8007b1c:	3fc68a28 	.word	0x3fc68a28
 8007b20:	509f79fb 	.word	0x509f79fb
 8007b24:	3fd34413 	.word	0x3fd34413
 8007b28:	08009619 	.word	0x08009619
 8007b2c:	08009630 	.word	0x08009630
 8007b30:	7ff00000 	.word	0x7ff00000
 8007b34:	080095e9 	.word	0x080095e9
 8007b38:	3ff80000 	.word	0x3ff80000
 8007b3c:	08009728 	.word	0x08009728
 8007b40:	08009688 	.word	0x08009688
 8007b44:	08009615 	.word	0x08009615
 8007b48:	080095e8 	.word	0x080095e8
 8007b4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b50:	6018      	str	r0, [r3, #0]
 8007b52:	9b07      	ldr	r3, [sp, #28]
 8007b54:	2b0e      	cmp	r3, #14
 8007b56:	f200 80a4 	bhi.w	8007ca2 <_dtoa_r+0x442>
 8007b5a:	2c00      	cmp	r4, #0
 8007b5c:	f000 80a1 	beq.w	8007ca2 <_dtoa_r+0x442>
 8007b60:	2f00      	cmp	r7, #0
 8007b62:	dd33      	ble.n	8007bcc <_dtoa_r+0x36c>
 8007b64:	4bad      	ldr	r3, [pc, #692]	@ (8007e1c <_dtoa_r+0x5bc>)
 8007b66:	f007 020f 	and.w	r2, r7, #15
 8007b6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b6e:	ed93 7b00 	vldr	d7, [r3]
 8007b72:	05f8      	lsls	r0, r7, #23
 8007b74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b7c:	d516      	bpl.n	8007bac <_dtoa_r+0x34c>
 8007b7e:	4ba8      	ldr	r3, [pc, #672]	@ (8007e20 <_dtoa_r+0x5c0>)
 8007b80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b88:	f7f8 fe80 	bl	800088c <__aeabi_ddiv>
 8007b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b90:	f004 040f 	and.w	r4, r4, #15
 8007b94:	2603      	movs	r6, #3
 8007b96:	4da2      	ldr	r5, [pc, #648]	@ (8007e20 <_dtoa_r+0x5c0>)
 8007b98:	b954      	cbnz	r4, 8007bb0 <_dtoa_r+0x350>
 8007b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ba2:	f7f8 fe73 	bl	800088c <__aeabi_ddiv>
 8007ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007baa:	e028      	b.n	8007bfe <_dtoa_r+0x39e>
 8007bac:	2602      	movs	r6, #2
 8007bae:	e7f2      	b.n	8007b96 <_dtoa_r+0x336>
 8007bb0:	07e1      	lsls	r1, r4, #31
 8007bb2:	d508      	bpl.n	8007bc6 <_dtoa_r+0x366>
 8007bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bbc:	f7f8 fd3c 	bl	8000638 <__aeabi_dmul>
 8007bc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	1064      	asrs	r4, r4, #1
 8007bc8:	3508      	adds	r5, #8
 8007bca:	e7e5      	b.n	8007b98 <_dtoa_r+0x338>
 8007bcc:	f000 80d2 	beq.w	8007d74 <_dtoa_r+0x514>
 8007bd0:	427c      	negs	r4, r7
 8007bd2:	4b92      	ldr	r3, [pc, #584]	@ (8007e1c <_dtoa_r+0x5bc>)
 8007bd4:	4d92      	ldr	r5, [pc, #584]	@ (8007e20 <_dtoa_r+0x5c0>)
 8007bd6:	f004 020f 	and.w	r2, r4, #15
 8007bda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007be6:	f7f8 fd27 	bl	8000638 <__aeabi_dmul>
 8007bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bee:	1124      	asrs	r4, r4, #4
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	2602      	movs	r6, #2
 8007bf4:	2c00      	cmp	r4, #0
 8007bf6:	f040 80b2 	bne.w	8007d5e <_dtoa_r+0x4fe>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1d3      	bne.n	8007ba6 <_dtoa_r+0x346>
 8007bfe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80b7 	beq.w	8007d78 <_dtoa_r+0x518>
 8007c0a:	4b86      	ldr	r3, [pc, #536]	@ (8007e24 <_dtoa_r+0x5c4>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4620      	mov	r0, r4
 8007c10:	4629      	mov	r1, r5
 8007c12:	f7f8 ff83 	bl	8000b1c <__aeabi_dcmplt>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	f000 80ae 	beq.w	8007d78 <_dtoa_r+0x518>
 8007c1c:	9b07      	ldr	r3, [sp, #28]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 80aa 	beq.w	8007d78 <_dtoa_r+0x518>
 8007c24:	9b00      	ldr	r3, [sp, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	dd37      	ble.n	8007c9a <_dtoa_r+0x43a>
 8007c2a:	1e7b      	subs	r3, r7, #1
 8007c2c:	9304      	str	r3, [sp, #16]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	4b7d      	ldr	r3, [pc, #500]	@ (8007e28 <_dtoa_r+0x5c8>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	4629      	mov	r1, r5
 8007c36:	f7f8 fcff 	bl	8000638 <__aeabi_dmul>
 8007c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c3e:	9c00      	ldr	r4, [sp, #0]
 8007c40:	3601      	adds	r6, #1
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7f8 fc8e 	bl	8000564 <__aeabi_i2d>
 8007c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c4c:	f7f8 fcf4 	bl	8000638 <__aeabi_dmul>
 8007c50:	4b76      	ldr	r3, [pc, #472]	@ (8007e2c <_dtoa_r+0x5cc>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	f7f8 fb3a 	bl	80002cc <__adddf3>
 8007c58:	4605      	mov	r5, r0
 8007c5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007c5e:	2c00      	cmp	r4, #0
 8007c60:	f040 808d 	bne.w	8007d7e <_dtoa_r+0x51e>
 8007c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c68:	4b71      	ldr	r3, [pc, #452]	@ (8007e30 <_dtoa_r+0x5d0>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f7f8 fb2c 	bl	80002c8 <__aeabi_dsub>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c78:	462a      	mov	r2, r5
 8007c7a:	4633      	mov	r3, r6
 8007c7c:	f7f8 ff6c 	bl	8000b58 <__aeabi_dcmpgt>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	f040 828b 	bne.w	800819c <_dtoa_r+0x93c>
 8007c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c8a:	462a      	mov	r2, r5
 8007c8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007c90:	f7f8 ff44 	bl	8000b1c <__aeabi_dcmplt>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	f040 8128 	bne.w	8007eea <_dtoa_r+0x68a>
 8007c9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007c9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ca2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f2c0 815a 	blt.w	8007f5e <_dtoa_r+0x6fe>
 8007caa:	2f0e      	cmp	r7, #14
 8007cac:	f300 8157 	bgt.w	8007f5e <_dtoa_r+0x6fe>
 8007cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8007e1c <_dtoa_r+0x5bc>)
 8007cb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cb6:	ed93 7b00 	vldr	d7, [r3]
 8007cba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	ed8d 7b00 	vstr	d7, [sp]
 8007cc2:	da03      	bge.n	8007ccc <_dtoa_r+0x46c>
 8007cc4:	9b07      	ldr	r3, [sp, #28]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f340 8101 	ble.w	8007ece <_dtoa_r+0x66e>
 8007ccc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007cd0:	4656      	mov	r6, sl
 8007cd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	4629      	mov	r1, r5
 8007cda:	f7f8 fdd7 	bl	800088c <__aeabi_ddiv>
 8007cde:	f7f8 ff5b 	bl	8000b98 <__aeabi_d2iz>
 8007ce2:	4680      	mov	r8, r0
 8007ce4:	f7f8 fc3e 	bl	8000564 <__aeabi_i2d>
 8007ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cec:	f7f8 fca4 	bl	8000638 <__aeabi_dmul>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007cfc:	f7f8 fae4 	bl	80002c8 <__aeabi_dsub>
 8007d00:	f806 4b01 	strb.w	r4, [r6], #1
 8007d04:	9d07      	ldr	r5, [sp, #28]
 8007d06:	eba6 040a 	sub.w	r4, r6, sl
 8007d0a:	42a5      	cmp	r5, r4
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	f040 8117 	bne.w	8007f42 <_dtoa_r+0x6e2>
 8007d14:	f7f8 fada 	bl	80002cc <__adddf3>
 8007d18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	460d      	mov	r5, r1
 8007d20:	f7f8 ff1a 	bl	8000b58 <__aeabi_dcmpgt>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	f040 80f9 	bne.w	8007f1c <_dtoa_r+0x6bc>
 8007d2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d2e:	4620      	mov	r0, r4
 8007d30:	4629      	mov	r1, r5
 8007d32:	f7f8 fee9 	bl	8000b08 <__aeabi_dcmpeq>
 8007d36:	b118      	cbz	r0, 8007d40 <_dtoa_r+0x4e0>
 8007d38:	f018 0f01 	tst.w	r8, #1
 8007d3c:	f040 80ee 	bne.w	8007f1c <_dtoa_r+0x6bc>
 8007d40:	4649      	mov	r1, r9
 8007d42:	4658      	mov	r0, fp
 8007d44:	f000 fcf2 	bl	800872c <_Bfree>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	7033      	strb	r3, [r6, #0]
 8007d4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d4e:	3701      	adds	r7, #1
 8007d50:	601f      	str	r7, [r3, #0]
 8007d52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 831d 	beq.w	8008394 <_dtoa_r+0xb34>
 8007d5a:	601e      	str	r6, [r3, #0]
 8007d5c:	e31a      	b.n	8008394 <_dtoa_r+0xb34>
 8007d5e:	07e2      	lsls	r2, r4, #31
 8007d60:	d505      	bpl.n	8007d6e <_dtoa_r+0x50e>
 8007d62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d66:	f7f8 fc67 	bl	8000638 <__aeabi_dmul>
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	1064      	asrs	r4, r4, #1
 8007d70:	3508      	adds	r5, #8
 8007d72:	e73f      	b.n	8007bf4 <_dtoa_r+0x394>
 8007d74:	2602      	movs	r6, #2
 8007d76:	e742      	b.n	8007bfe <_dtoa_r+0x39e>
 8007d78:	9c07      	ldr	r4, [sp, #28]
 8007d7a:	9704      	str	r7, [sp, #16]
 8007d7c:	e761      	b.n	8007c42 <_dtoa_r+0x3e2>
 8007d7e:	4b27      	ldr	r3, [pc, #156]	@ (8007e1c <_dtoa_r+0x5bc>)
 8007d80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d8a:	4454      	add	r4, sl
 8007d8c:	2900      	cmp	r1, #0
 8007d8e:	d053      	beq.n	8007e38 <_dtoa_r+0x5d8>
 8007d90:	4928      	ldr	r1, [pc, #160]	@ (8007e34 <_dtoa_r+0x5d4>)
 8007d92:	2000      	movs	r0, #0
 8007d94:	f7f8 fd7a 	bl	800088c <__aeabi_ddiv>
 8007d98:	4633      	mov	r3, r6
 8007d9a:	462a      	mov	r2, r5
 8007d9c:	f7f8 fa94 	bl	80002c8 <__aeabi_dsub>
 8007da0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007da4:	4656      	mov	r6, sl
 8007da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007daa:	f7f8 fef5 	bl	8000b98 <__aeabi_d2iz>
 8007dae:	4605      	mov	r5, r0
 8007db0:	f7f8 fbd8 	bl	8000564 <__aeabi_i2d>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dbc:	f7f8 fa84 	bl	80002c8 <__aeabi_dsub>
 8007dc0:	3530      	adds	r5, #48	@ 0x30
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dca:	f806 5b01 	strb.w	r5, [r6], #1
 8007dce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dd2:	f7f8 fea3 	bl	8000b1c <__aeabi_dcmplt>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d171      	bne.n	8007ebe <_dtoa_r+0x65e>
 8007dda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dde:	4911      	ldr	r1, [pc, #68]	@ (8007e24 <_dtoa_r+0x5c4>)
 8007de0:	2000      	movs	r0, #0
 8007de2:	f7f8 fa71 	bl	80002c8 <__aeabi_dsub>
 8007de6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dea:	f7f8 fe97 	bl	8000b1c <__aeabi_dcmplt>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f040 8095 	bne.w	8007f1e <_dtoa_r+0x6be>
 8007df4:	42a6      	cmp	r6, r4
 8007df6:	f43f af50 	beq.w	8007c9a <_dtoa_r+0x43a>
 8007dfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007e28 <_dtoa_r+0x5c8>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	f7f8 fc19 	bl	8000638 <__aeabi_dmul>
 8007e06:	4b08      	ldr	r3, [pc, #32]	@ (8007e28 <_dtoa_r+0x5c8>)
 8007e08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e12:	f7f8 fc11 	bl	8000638 <__aeabi_dmul>
 8007e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e1a:	e7c4      	b.n	8007da6 <_dtoa_r+0x546>
 8007e1c:	08009728 	.word	0x08009728
 8007e20:	08009700 	.word	0x08009700
 8007e24:	3ff00000 	.word	0x3ff00000
 8007e28:	40240000 	.word	0x40240000
 8007e2c:	401c0000 	.word	0x401c0000
 8007e30:	40140000 	.word	0x40140000
 8007e34:	3fe00000 	.word	0x3fe00000
 8007e38:	4631      	mov	r1, r6
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f7f8 fbfc 	bl	8000638 <__aeabi_dmul>
 8007e40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e44:	9415      	str	r4, [sp, #84]	@ 0x54
 8007e46:	4656      	mov	r6, sl
 8007e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e4c:	f7f8 fea4 	bl	8000b98 <__aeabi_d2iz>
 8007e50:	4605      	mov	r5, r0
 8007e52:	f7f8 fb87 	bl	8000564 <__aeabi_i2d>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e5e:	f7f8 fa33 	bl	80002c8 <__aeabi_dsub>
 8007e62:	3530      	adds	r5, #48	@ 0x30
 8007e64:	f806 5b01 	strb.w	r5, [r6], #1
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	42a6      	cmp	r6, r4
 8007e6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	d124      	bne.n	8007ec2 <_dtoa_r+0x662>
 8007e78:	4bac      	ldr	r3, [pc, #688]	@ (800812c <_dtoa_r+0x8cc>)
 8007e7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e7e:	f7f8 fa25 	bl	80002cc <__adddf3>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e8a:	f7f8 fe65 	bl	8000b58 <__aeabi_dcmpgt>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d145      	bne.n	8007f1e <_dtoa_r+0x6be>
 8007e92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e96:	49a5      	ldr	r1, [pc, #660]	@ (800812c <_dtoa_r+0x8cc>)
 8007e98:	2000      	movs	r0, #0
 8007e9a:	f7f8 fa15 	bl	80002c8 <__aeabi_dsub>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea6:	f7f8 fe39 	bl	8000b1c <__aeabi_dcmplt>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	f43f aef5 	beq.w	8007c9a <_dtoa_r+0x43a>
 8007eb0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007eb2:	1e73      	subs	r3, r6, #1
 8007eb4:	9315      	str	r3, [sp, #84]	@ 0x54
 8007eb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007eba:	2b30      	cmp	r3, #48	@ 0x30
 8007ebc:	d0f8      	beq.n	8007eb0 <_dtoa_r+0x650>
 8007ebe:	9f04      	ldr	r7, [sp, #16]
 8007ec0:	e73e      	b.n	8007d40 <_dtoa_r+0x4e0>
 8007ec2:	4b9b      	ldr	r3, [pc, #620]	@ (8008130 <_dtoa_r+0x8d0>)
 8007ec4:	f7f8 fbb8 	bl	8000638 <__aeabi_dmul>
 8007ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ecc:	e7bc      	b.n	8007e48 <_dtoa_r+0x5e8>
 8007ece:	d10c      	bne.n	8007eea <_dtoa_r+0x68a>
 8007ed0:	4b98      	ldr	r3, [pc, #608]	@ (8008134 <_dtoa_r+0x8d4>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ed8:	f7f8 fbae 	bl	8000638 <__aeabi_dmul>
 8007edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ee0:	f7f8 fe30 	bl	8000b44 <__aeabi_dcmpge>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	f000 8157 	beq.w	8008198 <_dtoa_r+0x938>
 8007eea:	2400      	movs	r4, #0
 8007eec:	4625      	mov	r5, r4
 8007eee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ef0:	43db      	mvns	r3, r3
 8007ef2:	9304      	str	r3, [sp, #16]
 8007ef4:	4656      	mov	r6, sl
 8007ef6:	2700      	movs	r7, #0
 8007ef8:	4621      	mov	r1, r4
 8007efa:	4658      	mov	r0, fp
 8007efc:	f000 fc16 	bl	800872c <_Bfree>
 8007f00:	2d00      	cmp	r5, #0
 8007f02:	d0dc      	beq.n	8007ebe <_dtoa_r+0x65e>
 8007f04:	b12f      	cbz	r7, 8007f12 <_dtoa_r+0x6b2>
 8007f06:	42af      	cmp	r7, r5
 8007f08:	d003      	beq.n	8007f12 <_dtoa_r+0x6b2>
 8007f0a:	4639      	mov	r1, r7
 8007f0c:	4658      	mov	r0, fp
 8007f0e:	f000 fc0d 	bl	800872c <_Bfree>
 8007f12:	4629      	mov	r1, r5
 8007f14:	4658      	mov	r0, fp
 8007f16:	f000 fc09 	bl	800872c <_Bfree>
 8007f1a:	e7d0      	b.n	8007ebe <_dtoa_r+0x65e>
 8007f1c:	9704      	str	r7, [sp, #16]
 8007f1e:	4633      	mov	r3, r6
 8007f20:	461e      	mov	r6, r3
 8007f22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f26:	2a39      	cmp	r2, #57	@ 0x39
 8007f28:	d107      	bne.n	8007f3a <_dtoa_r+0x6da>
 8007f2a:	459a      	cmp	sl, r3
 8007f2c:	d1f8      	bne.n	8007f20 <_dtoa_r+0x6c0>
 8007f2e:	9a04      	ldr	r2, [sp, #16]
 8007f30:	3201      	adds	r2, #1
 8007f32:	9204      	str	r2, [sp, #16]
 8007f34:	2230      	movs	r2, #48	@ 0x30
 8007f36:	f88a 2000 	strb.w	r2, [sl]
 8007f3a:	781a      	ldrb	r2, [r3, #0]
 8007f3c:	3201      	adds	r2, #1
 8007f3e:	701a      	strb	r2, [r3, #0]
 8007f40:	e7bd      	b.n	8007ebe <_dtoa_r+0x65e>
 8007f42:	4b7b      	ldr	r3, [pc, #492]	@ (8008130 <_dtoa_r+0x8d0>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	f7f8 fb77 	bl	8000638 <__aeabi_dmul>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	4604      	mov	r4, r0
 8007f50:	460d      	mov	r5, r1
 8007f52:	f7f8 fdd9 	bl	8000b08 <__aeabi_dcmpeq>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f43f aebb 	beq.w	8007cd2 <_dtoa_r+0x472>
 8007f5c:	e6f0      	b.n	8007d40 <_dtoa_r+0x4e0>
 8007f5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f60:	2a00      	cmp	r2, #0
 8007f62:	f000 80db 	beq.w	800811c <_dtoa_r+0x8bc>
 8007f66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f68:	2a01      	cmp	r2, #1
 8007f6a:	f300 80bf 	bgt.w	80080ec <_dtoa_r+0x88c>
 8007f6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007f70:	2a00      	cmp	r2, #0
 8007f72:	f000 80b7 	beq.w	80080e4 <_dtoa_r+0x884>
 8007f76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f7c:	4646      	mov	r6, r8
 8007f7e:	9a08      	ldr	r2, [sp, #32]
 8007f80:	2101      	movs	r1, #1
 8007f82:	441a      	add	r2, r3
 8007f84:	4658      	mov	r0, fp
 8007f86:	4498      	add	r8, r3
 8007f88:	9208      	str	r2, [sp, #32]
 8007f8a:	f000 fc83 	bl	8008894 <__i2b>
 8007f8e:	4605      	mov	r5, r0
 8007f90:	b15e      	cbz	r6, 8007faa <_dtoa_r+0x74a>
 8007f92:	9b08      	ldr	r3, [sp, #32]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	dd08      	ble.n	8007faa <_dtoa_r+0x74a>
 8007f98:	42b3      	cmp	r3, r6
 8007f9a:	9a08      	ldr	r2, [sp, #32]
 8007f9c:	bfa8      	it	ge
 8007f9e:	4633      	movge	r3, r6
 8007fa0:	eba8 0803 	sub.w	r8, r8, r3
 8007fa4:	1af6      	subs	r6, r6, r3
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	9308      	str	r3, [sp, #32]
 8007faa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fac:	b1f3      	cbz	r3, 8007fec <_dtoa_r+0x78c>
 8007fae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 80b7 	beq.w	8008124 <_dtoa_r+0x8c4>
 8007fb6:	b18c      	cbz	r4, 8007fdc <_dtoa_r+0x77c>
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4622      	mov	r2, r4
 8007fbc:	4658      	mov	r0, fp
 8007fbe:	f000 fd29 	bl	8008a14 <__pow5mult>
 8007fc2:	464a      	mov	r2, r9
 8007fc4:	4601      	mov	r1, r0
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	4658      	mov	r0, fp
 8007fca:	f000 fc79 	bl	80088c0 <__multiply>
 8007fce:	4649      	mov	r1, r9
 8007fd0:	9004      	str	r0, [sp, #16]
 8007fd2:	4658      	mov	r0, fp
 8007fd4:	f000 fbaa 	bl	800872c <_Bfree>
 8007fd8:	9b04      	ldr	r3, [sp, #16]
 8007fda:	4699      	mov	r9, r3
 8007fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fde:	1b1a      	subs	r2, r3, r4
 8007fe0:	d004      	beq.n	8007fec <_dtoa_r+0x78c>
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	4658      	mov	r0, fp
 8007fe6:	f000 fd15 	bl	8008a14 <__pow5mult>
 8007fea:	4681      	mov	r9, r0
 8007fec:	2101      	movs	r1, #1
 8007fee:	4658      	mov	r0, fp
 8007ff0:	f000 fc50 	bl	8008894 <__i2b>
 8007ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 81cf 	beq.w	800839c <_dtoa_r+0xb3c>
 8007ffe:	461a      	mov	r2, r3
 8008000:	4601      	mov	r1, r0
 8008002:	4658      	mov	r0, fp
 8008004:	f000 fd06 	bl	8008a14 <__pow5mult>
 8008008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800800a:	2b01      	cmp	r3, #1
 800800c:	4604      	mov	r4, r0
 800800e:	f300 8095 	bgt.w	800813c <_dtoa_r+0x8dc>
 8008012:	9b02      	ldr	r3, [sp, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	f040 8087 	bne.w	8008128 <_dtoa_r+0x8c8>
 800801a:	9b03      	ldr	r3, [sp, #12]
 800801c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008020:	2b00      	cmp	r3, #0
 8008022:	f040 8089 	bne.w	8008138 <_dtoa_r+0x8d8>
 8008026:	9b03      	ldr	r3, [sp, #12]
 8008028:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800802c:	0d1b      	lsrs	r3, r3, #20
 800802e:	051b      	lsls	r3, r3, #20
 8008030:	b12b      	cbz	r3, 800803e <_dtoa_r+0x7de>
 8008032:	9b08      	ldr	r3, [sp, #32]
 8008034:	3301      	adds	r3, #1
 8008036:	9308      	str	r3, [sp, #32]
 8008038:	f108 0801 	add.w	r8, r8, #1
 800803c:	2301      	movs	r3, #1
 800803e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 81b0 	beq.w	80083a8 <_dtoa_r+0xb48>
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800804e:	6918      	ldr	r0, [r3, #16]
 8008050:	f000 fbd4 	bl	80087fc <__hi0bits>
 8008054:	f1c0 0020 	rsb	r0, r0, #32
 8008058:	9b08      	ldr	r3, [sp, #32]
 800805a:	4418      	add	r0, r3
 800805c:	f010 001f 	ands.w	r0, r0, #31
 8008060:	d077      	beq.n	8008152 <_dtoa_r+0x8f2>
 8008062:	f1c0 0320 	rsb	r3, r0, #32
 8008066:	2b04      	cmp	r3, #4
 8008068:	dd6b      	ble.n	8008142 <_dtoa_r+0x8e2>
 800806a:	9b08      	ldr	r3, [sp, #32]
 800806c:	f1c0 001c 	rsb	r0, r0, #28
 8008070:	4403      	add	r3, r0
 8008072:	4480      	add	r8, r0
 8008074:	4406      	add	r6, r0
 8008076:	9308      	str	r3, [sp, #32]
 8008078:	f1b8 0f00 	cmp.w	r8, #0
 800807c:	dd05      	ble.n	800808a <_dtoa_r+0x82a>
 800807e:	4649      	mov	r1, r9
 8008080:	4642      	mov	r2, r8
 8008082:	4658      	mov	r0, fp
 8008084:	f000 fd20 	bl	8008ac8 <__lshift>
 8008088:	4681      	mov	r9, r0
 800808a:	9b08      	ldr	r3, [sp, #32]
 800808c:	2b00      	cmp	r3, #0
 800808e:	dd05      	ble.n	800809c <_dtoa_r+0x83c>
 8008090:	4621      	mov	r1, r4
 8008092:	461a      	mov	r2, r3
 8008094:	4658      	mov	r0, fp
 8008096:	f000 fd17 	bl	8008ac8 <__lshift>
 800809a:	4604      	mov	r4, r0
 800809c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d059      	beq.n	8008156 <_dtoa_r+0x8f6>
 80080a2:	4621      	mov	r1, r4
 80080a4:	4648      	mov	r0, r9
 80080a6:	f000 fd7b 	bl	8008ba0 <__mcmp>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	da53      	bge.n	8008156 <_dtoa_r+0x8f6>
 80080ae:	1e7b      	subs	r3, r7, #1
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	4649      	mov	r1, r9
 80080b4:	2300      	movs	r3, #0
 80080b6:	220a      	movs	r2, #10
 80080b8:	4658      	mov	r0, fp
 80080ba:	f000 fb59 	bl	8008770 <__multadd>
 80080be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080c0:	4681      	mov	r9, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 8172 	beq.w	80083ac <_dtoa_r+0xb4c>
 80080c8:	2300      	movs	r3, #0
 80080ca:	4629      	mov	r1, r5
 80080cc:	220a      	movs	r2, #10
 80080ce:	4658      	mov	r0, fp
 80080d0:	f000 fb4e 	bl	8008770 <__multadd>
 80080d4:	9b00      	ldr	r3, [sp, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	4605      	mov	r5, r0
 80080da:	dc67      	bgt.n	80081ac <_dtoa_r+0x94c>
 80080dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080de:	2b02      	cmp	r3, #2
 80080e0:	dc41      	bgt.n	8008166 <_dtoa_r+0x906>
 80080e2:	e063      	b.n	80081ac <_dtoa_r+0x94c>
 80080e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80080e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80080ea:	e746      	b.n	8007f7a <_dtoa_r+0x71a>
 80080ec:	9b07      	ldr	r3, [sp, #28]
 80080ee:	1e5c      	subs	r4, r3, #1
 80080f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080f2:	42a3      	cmp	r3, r4
 80080f4:	bfbf      	itttt	lt
 80080f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80080f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80080fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80080fc:	1ae3      	sublt	r3, r4, r3
 80080fe:	bfb4      	ite	lt
 8008100:	18d2      	addlt	r2, r2, r3
 8008102:	1b1c      	subge	r4, r3, r4
 8008104:	9b07      	ldr	r3, [sp, #28]
 8008106:	bfbc      	itt	lt
 8008108:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800810a:	2400      	movlt	r4, #0
 800810c:	2b00      	cmp	r3, #0
 800810e:	bfb5      	itete	lt
 8008110:	eba8 0603 	sublt.w	r6, r8, r3
 8008114:	9b07      	ldrge	r3, [sp, #28]
 8008116:	2300      	movlt	r3, #0
 8008118:	4646      	movge	r6, r8
 800811a:	e730      	b.n	8007f7e <_dtoa_r+0x71e>
 800811c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800811e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008120:	4646      	mov	r6, r8
 8008122:	e735      	b.n	8007f90 <_dtoa_r+0x730>
 8008124:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008126:	e75c      	b.n	8007fe2 <_dtoa_r+0x782>
 8008128:	2300      	movs	r3, #0
 800812a:	e788      	b.n	800803e <_dtoa_r+0x7de>
 800812c:	3fe00000 	.word	0x3fe00000
 8008130:	40240000 	.word	0x40240000
 8008134:	40140000 	.word	0x40140000
 8008138:	9b02      	ldr	r3, [sp, #8]
 800813a:	e780      	b.n	800803e <_dtoa_r+0x7de>
 800813c:	2300      	movs	r3, #0
 800813e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008140:	e782      	b.n	8008048 <_dtoa_r+0x7e8>
 8008142:	d099      	beq.n	8008078 <_dtoa_r+0x818>
 8008144:	9a08      	ldr	r2, [sp, #32]
 8008146:	331c      	adds	r3, #28
 8008148:	441a      	add	r2, r3
 800814a:	4498      	add	r8, r3
 800814c:	441e      	add	r6, r3
 800814e:	9208      	str	r2, [sp, #32]
 8008150:	e792      	b.n	8008078 <_dtoa_r+0x818>
 8008152:	4603      	mov	r3, r0
 8008154:	e7f6      	b.n	8008144 <_dtoa_r+0x8e4>
 8008156:	9b07      	ldr	r3, [sp, #28]
 8008158:	9704      	str	r7, [sp, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	dc20      	bgt.n	80081a0 <_dtoa_r+0x940>
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008162:	2b02      	cmp	r3, #2
 8008164:	dd1e      	ble.n	80081a4 <_dtoa_r+0x944>
 8008166:	9b00      	ldr	r3, [sp, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	f47f aec0 	bne.w	8007eee <_dtoa_r+0x68e>
 800816e:	4621      	mov	r1, r4
 8008170:	2205      	movs	r2, #5
 8008172:	4658      	mov	r0, fp
 8008174:	f000 fafc 	bl	8008770 <__multadd>
 8008178:	4601      	mov	r1, r0
 800817a:	4604      	mov	r4, r0
 800817c:	4648      	mov	r0, r9
 800817e:	f000 fd0f 	bl	8008ba0 <__mcmp>
 8008182:	2800      	cmp	r0, #0
 8008184:	f77f aeb3 	ble.w	8007eee <_dtoa_r+0x68e>
 8008188:	4656      	mov	r6, sl
 800818a:	2331      	movs	r3, #49	@ 0x31
 800818c:	f806 3b01 	strb.w	r3, [r6], #1
 8008190:	9b04      	ldr	r3, [sp, #16]
 8008192:	3301      	adds	r3, #1
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	e6ae      	b.n	8007ef6 <_dtoa_r+0x696>
 8008198:	9c07      	ldr	r4, [sp, #28]
 800819a:	9704      	str	r7, [sp, #16]
 800819c:	4625      	mov	r5, r4
 800819e:	e7f3      	b.n	8008188 <_dtoa_r+0x928>
 80081a0:	9b07      	ldr	r3, [sp, #28]
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 8104 	beq.w	80083b4 <_dtoa_r+0xb54>
 80081ac:	2e00      	cmp	r6, #0
 80081ae:	dd05      	ble.n	80081bc <_dtoa_r+0x95c>
 80081b0:	4629      	mov	r1, r5
 80081b2:	4632      	mov	r2, r6
 80081b4:	4658      	mov	r0, fp
 80081b6:	f000 fc87 	bl	8008ac8 <__lshift>
 80081ba:	4605      	mov	r5, r0
 80081bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d05a      	beq.n	8008278 <_dtoa_r+0xa18>
 80081c2:	6869      	ldr	r1, [r5, #4]
 80081c4:	4658      	mov	r0, fp
 80081c6:	f000 fa71 	bl	80086ac <_Balloc>
 80081ca:	4606      	mov	r6, r0
 80081cc:	b928      	cbnz	r0, 80081da <_dtoa_r+0x97a>
 80081ce:	4b84      	ldr	r3, [pc, #528]	@ (80083e0 <_dtoa_r+0xb80>)
 80081d0:	4602      	mov	r2, r0
 80081d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80081d6:	f7ff bb5a 	b.w	800788e <_dtoa_r+0x2e>
 80081da:	692a      	ldr	r2, [r5, #16]
 80081dc:	3202      	adds	r2, #2
 80081de:	0092      	lsls	r2, r2, #2
 80081e0:	f105 010c 	add.w	r1, r5, #12
 80081e4:	300c      	adds	r0, #12
 80081e6:	f000 fe7d 	bl	8008ee4 <memcpy>
 80081ea:	2201      	movs	r2, #1
 80081ec:	4631      	mov	r1, r6
 80081ee:	4658      	mov	r0, fp
 80081f0:	f000 fc6a 	bl	8008ac8 <__lshift>
 80081f4:	f10a 0301 	add.w	r3, sl, #1
 80081f8:	9307      	str	r3, [sp, #28]
 80081fa:	9b00      	ldr	r3, [sp, #0]
 80081fc:	4453      	add	r3, sl
 80081fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008200:	9b02      	ldr	r3, [sp, #8]
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	462f      	mov	r7, r5
 8008208:	930a      	str	r3, [sp, #40]	@ 0x28
 800820a:	4605      	mov	r5, r0
 800820c:	9b07      	ldr	r3, [sp, #28]
 800820e:	4621      	mov	r1, r4
 8008210:	3b01      	subs	r3, #1
 8008212:	4648      	mov	r0, r9
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	f7ff fa98 	bl	800774a <quorem>
 800821a:	4639      	mov	r1, r7
 800821c:	9002      	str	r0, [sp, #8]
 800821e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008222:	4648      	mov	r0, r9
 8008224:	f000 fcbc 	bl	8008ba0 <__mcmp>
 8008228:	462a      	mov	r2, r5
 800822a:	9008      	str	r0, [sp, #32]
 800822c:	4621      	mov	r1, r4
 800822e:	4658      	mov	r0, fp
 8008230:	f000 fcd2 	bl	8008bd8 <__mdiff>
 8008234:	68c2      	ldr	r2, [r0, #12]
 8008236:	4606      	mov	r6, r0
 8008238:	bb02      	cbnz	r2, 800827c <_dtoa_r+0xa1c>
 800823a:	4601      	mov	r1, r0
 800823c:	4648      	mov	r0, r9
 800823e:	f000 fcaf 	bl	8008ba0 <__mcmp>
 8008242:	4602      	mov	r2, r0
 8008244:	4631      	mov	r1, r6
 8008246:	4658      	mov	r0, fp
 8008248:	920e      	str	r2, [sp, #56]	@ 0x38
 800824a:	f000 fa6f 	bl	800872c <_Bfree>
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008252:	9e07      	ldr	r6, [sp, #28]
 8008254:	ea43 0102 	orr.w	r1, r3, r2
 8008258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800825a:	4319      	orrs	r1, r3
 800825c:	d110      	bne.n	8008280 <_dtoa_r+0xa20>
 800825e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008262:	d029      	beq.n	80082b8 <_dtoa_r+0xa58>
 8008264:	9b08      	ldr	r3, [sp, #32]
 8008266:	2b00      	cmp	r3, #0
 8008268:	dd02      	ble.n	8008270 <_dtoa_r+0xa10>
 800826a:	9b02      	ldr	r3, [sp, #8]
 800826c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008270:	9b00      	ldr	r3, [sp, #0]
 8008272:	f883 8000 	strb.w	r8, [r3]
 8008276:	e63f      	b.n	8007ef8 <_dtoa_r+0x698>
 8008278:	4628      	mov	r0, r5
 800827a:	e7bb      	b.n	80081f4 <_dtoa_r+0x994>
 800827c:	2201      	movs	r2, #1
 800827e:	e7e1      	b.n	8008244 <_dtoa_r+0x9e4>
 8008280:	9b08      	ldr	r3, [sp, #32]
 8008282:	2b00      	cmp	r3, #0
 8008284:	db04      	blt.n	8008290 <_dtoa_r+0xa30>
 8008286:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008288:	430b      	orrs	r3, r1
 800828a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800828c:	430b      	orrs	r3, r1
 800828e:	d120      	bne.n	80082d2 <_dtoa_r+0xa72>
 8008290:	2a00      	cmp	r2, #0
 8008292:	dded      	ble.n	8008270 <_dtoa_r+0xa10>
 8008294:	4649      	mov	r1, r9
 8008296:	2201      	movs	r2, #1
 8008298:	4658      	mov	r0, fp
 800829a:	f000 fc15 	bl	8008ac8 <__lshift>
 800829e:	4621      	mov	r1, r4
 80082a0:	4681      	mov	r9, r0
 80082a2:	f000 fc7d 	bl	8008ba0 <__mcmp>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	dc03      	bgt.n	80082b2 <_dtoa_r+0xa52>
 80082aa:	d1e1      	bne.n	8008270 <_dtoa_r+0xa10>
 80082ac:	f018 0f01 	tst.w	r8, #1
 80082b0:	d0de      	beq.n	8008270 <_dtoa_r+0xa10>
 80082b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082b6:	d1d8      	bne.n	800826a <_dtoa_r+0xa0a>
 80082b8:	9a00      	ldr	r2, [sp, #0]
 80082ba:	2339      	movs	r3, #57	@ 0x39
 80082bc:	7013      	strb	r3, [r2, #0]
 80082be:	4633      	mov	r3, r6
 80082c0:	461e      	mov	r6, r3
 80082c2:	3b01      	subs	r3, #1
 80082c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80082c8:	2a39      	cmp	r2, #57	@ 0x39
 80082ca:	d052      	beq.n	8008372 <_dtoa_r+0xb12>
 80082cc:	3201      	adds	r2, #1
 80082ce:	701a      	strb	r2, [r3, #0]
 80082d0:	e612      	b.n	8007ef8 <_dtoa_r+0x698>
 80082d2:	2a00      	cmp	r2, #0
 80082d4:	dd07      	ble.n	80082e6 <_dtoa_r+0xa86>
 80082d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082da:	d0ed      	beq.n	80082b8 <_dtoa_r+0xa58>
 80082dc:	9a00      	ldr	r2, [sp, #0]
 80082de:	f108 0301 	add.w	r3, r8, #1
 80082e2:	7013      	strb	r3, [r2, #0]
 80082e4:	e608      	b.n	8007ef8 <_dtoa_r+0x698>
 80082e6:	9b07      	ldr	r3, [sp, #28]
 80082e8:	9a07      	ldr	r2, [sp, #28]
 80082ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80082ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d028      	beq.n	8008346 <_dtoa_r+0xae6>
 80082f4:	4649      	mov	r1, r9
 80082f6:	2300      	movs	r3, #0
 80082f8:	220a      	movs	r2, #10
 80082fa:	4658      	mov	r0, fp
 80082fc:	f000 fa38 	bl	8008770 <__multadd>
 8008300:	42af      	cmp	r7, r5
 8008302:	4681      	mov	r9, r0
 8008304:	f04f 0300 	mov.w	r3, #0
 8008308:	f04f 020a 	mov.w	r2, #10
 800830c:	4639      	mov	r1, r7
 800830e:	4658      	mov	r0, fp
 8008310:	d107      	bne.n	8008322 <_dtoa_r+0xac2>
 8008312:	f000 fa2d 	bl	8008770 <__multadd>
 8008316:	4607      	mov	r7, r0
 8008318:	4605      	mov	r5, r0
 800831a:	9b07      	ldr	r3, [sp, #28]
 800831c:	3301      	adds	r3, #1
 800831e:	9307      	str	r3, [sp, #28]
 8008320:	e774      	b.n	800820c <_dtoa_r+0x9ac>
 8008322:	f000 fa25 	bl	8008770 <__multadd>
 8008326:	4629      	mov	r1, r5
 8008328:	4607      	mov	r7, r0
 800832a:	2300      	movs	r3, #0
 800832c:	220a      	movs	r2, #10
 800832e:	4658      	mov	r0, fp
 8008330:	f000 fa1e 	bl	8008770 <__multadd>
 8008334:	4605      	mov	r5, r0
 8008336:	e7f0      	b.n	800831a <_dtoa_r+0xaba>
 8008338:	9b00      	ldr	r3, [sp, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	bfcc      	ite	gt
 800833e:	461e      	movgt	r6, r3
 8008340:	2601      	movle	r6, #1
 8008342:	4456      	add	r6, sl
 8008344:	2700      	movs	r7, #0
 8008346:	4649      	mov	r1, r9
 8008348:	2201      	movs	r2, #1
 800834a:	4658      	mov	r0, fp
 800834c:	f000 fbbc 	bl	8008ac8 <__lshift>
 8008350:	4621      	mov	r1, r4
 8008352:	4681      	mov	r9, r0
 8008354:	f000 fc24 	bl	8008ba0 <__mcmp>
 8008358:	2800      	cmp	r0, #0
 800835a:	dcb0      	bgt.n	80082be <_dtoa_r+0xa5e>
 800835c:	d102      	bne.n	8008364 <_dtoa_r+0xb04>
 800835e:	f018 0f01 	tst.w	r8, #1
 8008362:	d1ac      	bne.n	80082be <_dtoa_r+0xa5e>
 8008364:	4633      	mov	r3, r6
 8008366:	461e      	mov	r6, r3
 8008368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800836c:	2a30      	cmp	r2, #48	@ 0x30
 800836e:	d0fa      	beq.n	8008366 <_dtoa_r+0xb06>
 8008370:	e5c2      	b.n	8007ef8 <_dtoa_r+0x698>
 8008372:	459a      	cmp	sl, r3
 8008374:	d1a4      	bne.n	80082c0 <_dtoa_r+0xa60>
 8008376:	9b04      	ldr	r3, [sp, #16]
 8008378:	3301      	adds	r3, #1
 800837a:	9304      	str	r3, [sp, #16]
 800837c:	2331      	movs	r3, #49	@ 0x31
 800837e:	f88a 3000 	strb.w	r3, [sl]
 8008382:	e5b9      	b.n	8007ef8 <_dtoa_r+0x698>
 8008384:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008386:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80083e4 <_dtoa_r+0xb84>
 800838a:	b11b      	cbz	r3, 8008394 <_dtoa_r+0xb34>
 800838c:	f10a 0308 	add.w	r3, sl, #8
 8008390:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	4650      	mov	r0, sl
 8008396:	b019      	add	sp, #100	@ 0x64
 8008398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800839e:	2b01      	cmp	r3, #1
 80083a0:	f77f ae37 	ble.w	8008012 <_dtoa_r+0x7b2>
 80083a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80083a8:	2001      	movs	r0, #1
 80083aa:	e655      	b.n	8008058 <_dtoa_r+0x7f8>
 80083ac:	9b00      	ldr	r3, [sp, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f77f aed6 	ble.w	8008160 <_dtoa_r+0x900>
 80083b4:	4656      	mov	r6, sl
 80083b6:	4621      	mov	r1, r4
 80083b8:	4648      	mov	r0, r9
 80083ba:	f7ff f9c6 	bl	800774a <quorem>
 80083be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083c2:	f806 8b01 	strb.w	r8, [r6], #1
 80083c6:	9b00      	ldr	r3, [sp, #0]
 80083c8:	eba6 020a 	sub.w	r2, r6, sl
 80083cc:	4293      	cmp	r3, r2
 80083ce:	ddb3      	ble.n	8008338 <_dtoa_r+0xad8>
 80083d0:	4649      	mov	r1, r9
 80083d2:	2300      	movs	r3, #0
 80083d4:	220a      	movs	r2, #10
 80083d6:	4658      	mov	r0, fp
 80083d8:	f000 f9ca 	bl	8008770 <__multadd>
 80083dc:	4681      	mov	r9, r0
 80083de:	e7ea      	b.n	80083b6 <_dtoa_r+0xb56>
 80083e0:	08009688 	.word	0x08009688
 80083e4:	0800960c 	.word	0x0800960c

080083e8 <malloc>:
 80083e8:	4b02      	ldr	r3, [pc, #8]	@ (80083f4 <malloc+0xc>)
 80083ea:	4601      	mov	r1, r0
 80083ec:	6818      	ldr	r0, [r3, #0]
 80083ee:	f000 b825 	b.w	800843c <_malloc_r>
 80083f2:	bf00      	nop
 80083f4:	20000038 	.word	0x20000038

080083f8 <sbrk_aligned>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	4e0f      	ldr	r6, [pc, #60]	@ (8008438 <sbrk_aligned+0x40>)
 80083fc:	460c      	mov	r4, r1
 80083fe:	6831      	ldr	r1, [r6, #0]
 8008400:	4605      	mov	r5, r0
 8008402:	b911      	cbnz	r1, 800840a <sbrk_aligned+0x12>
 8008404:	f000 fd4c 	bl	8008ea0 <_sbrk_r>
 8008408:	6030      	str	r0, [r6, #0]
 800840a:	4621      	mov	r1, r4
 800840c:	4628      	mov	r0, r5
 800840e:	f000 fd47 	bl	8008ea0 <_sbrk_r>
 8008412:	1c43      	adds	r3, r0, #1
 8008414:	d103      	bne.n	800841e <sbrk_aligned+0x26>
 8008416:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800841a:	4620      	mov	r0, r4
 800841c:	bd70      	pop	{r4, r5, r6, pc}
 800841e:	1cc4      	adds	r4, r0, #3
 8008420:	f024 0403 	bic.w	r4, r4, #3
 8008424:	42a0      	cmp	r0, r4
 8008426:	d0f8      	beq.n	800841a <sbrk_aligned+0x22>
 8008428:	1a21      	subs	r1, r4, r0
 800842a:	4628      	mov	r0, r5
 800842c:	f000 fd38 	bl	8008ea0 <_sbrk_r>
 8008430:	3001      	adds	r0, #1
 8008432:	d1f2      	bne.n	800841a <sbrk_aligned+0x22>
 8008434:	e7ef      	b.n	8008416 <sbrk_aligned+0x1e>
 8008436:	bf00      	nop
 8008438:	20000684 	.word	0x20000684

0800843c <_malloc_r>:
 800843c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008440:	1ccd      	adds	r5, r1, #3
 8008442:	f025 0503 	bic.w	r5, r5, #3
 8008446:	3508      	adds	r5, #8
 8008448:	2d0c      	cmp	r5, #12
 800844a:	bf38      	it	cc
 800844c:	250c      	movcc	r5, #12
 800844e:	2d00      	cmp	r5, #0
 8008450:	4606      	mov	r6, r0
 8008452:	db01      	blt.n	8008458 <_malloc_r+0x1c>
 8008454:	42a9      	cmp	r1, r5
 8008456:	d904      	bls.n	8008462 <_malloc_r+0x26>
 8008458:	230c      	movs	r3, #12
 800845a:	6033      	str	r3, [r6, #0]
 800845c:	2000      	movs	r0, #0
 800845e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008538 <_malloc_r+0xfc>
 8008466:	f000 f915 	bl	8008694 <__malloc_lock>
 800846a:	f8d8 3000 	ldr.w	r3, [r8]
 800846e:	461c      	mov	r4, r3
 8008470:	bb44      	cbnz	r4, 80084c4 <_malloc_r+0x88>
 8008472:	4629      	mov	r1, r5
 8008474:	4630      	mov	r0, r6
 8008476:	f7ff ffbf 	bl	80083f8 <sbrk_aligned>
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	4604      	mov	r4, r0
 800847e:	d158      	bne.n	8008532 <_malloc_r+0xf6>
 8008480:	f8d8 4000 	ldr.w	r4, [r8]
 8008484:	4627      	mov	r7, r4
 8008486:	2f00      	cmp	r7, #0
 8008488:	d143      	bne.n	8008512 <_malloc_r+0xd6>
 800848a:	2c00      	cmp	r4, #0
 800848c:	d04b      	beq.n	8008526 <_malloc_r+0xea>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	4639      	mov	r1, r7
 8008492:	4630      	mov	r0, r6
 8008494:	eb04 0903 	add.w	r9, r4, r3
 8008498:	f000 fd02 	bl	8008ea0 <_sbrk_r>
 800849c:	4581      	cmp	r9, r0
 800849e:	d142      	bne.n	8008526 <_malloc_r+0xea>
 80084a0:	6821      	ldr	r1, [r4, #0]
 80084a2:	1a6d      	subs	r5, r5, r1
 80084a4:	4629      	mov	r1, r5
 80084a6:	4630      	mov	r0, r6
 80084a8:	f7ff ffa6 	bl	80083f8 <sbrk_aligned>
 80084ac:	3001      	adds	r0, #1
 80084ae:	d03a      	beq.n	8008526 <_malloc_r+0xea>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	442b      	add	r3, r5
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	f8d8 3000 	ldr.w	r3, [r8]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	bb62      	cbnz	r2, 8008518 <_malloc_r+0xdc>
 80084be:	f8c8 7000 	str.w	r7, [r8]
 80084c2:	e00f      	b.n	80084e4 <_malloc_r+0xa8>
 80084c4:	6822      	ldr	r2, [r4, #0]
 80084c6:	1b52      	subs	r2, r2, r5
 80084c8:	d420      	bmi.n	800850c <_malloc_r+0xd0>
 80084ca:	2a0b      	cmp	r2, #11
 80084cc:	d917      	bls.n	80084fe <_malloc_r+0xc2>
 80084ce:	1961      	adds	r1, r4, r5
 80084d0:	42a3      	cmp	r3, r4
 80084d2:	6025      	str	r5, [r4, #0]
 80084d4:	bf18      	it	ne
 80084d6:	6059      	strne	r1, [r3, #4]
 80084d8:	6863      	ldr	r3, [r4, #4]
 80084da:	bf08      	it	eq
 80084dc:	f8c8 1000 	streq.w	r1, [r8]
 80084e0:	5162      	str	r2, [r4, r5]
 80084e2:	604b      	str	r3, [r1, #4]
 80084e4:	4630      	mov	r0, r6
 80084e6:	f000 f8db 	bl	80086a0 <__malloc_unlock>
 80084ea:	f104 000b 	add.w	r0, r4, #11
 80084ee:	1d23      	adds	r3, r4, #4
 80084f0:	f020 0007 	bic.w	r0, r0, #7
 80084f4:	1ac2      	subs	r2, r0, r3
 80084f6:	bf1c      	itt	ne
 80084f8:	1a1b      	subne	r3, r3, r0
 80084fa:	50a3      	strne	r3, [r4, r2]
 80084fc:	e7af      	b.n	800845e <_malloc_r+0x22>
 80084fe:	6862      	ldr	r2, [r4, #4]
 8008500:	42a3      	cmp	r3, r4
 8008502:	bf0c      	ite	eq
 8008504:	f8c8 2000 	streq.w	r2, [r8]
 8008508:	605a      	strne	r2, [r3, #4]
 800850a:	e7eb      	b.n	80084e4 <_malloc_r+0xa8>
 800850c:	4623      	mov	r3, r4
 800850e:	6864      	ldr	r4, [r4, #4]
 8008510:	e7ae      	b.n	8008470 <_malloc_r+0x34>
 8008512:	463c      	mov	r4, r7
 8008514:	687f      	ldr	r7, [r7, #4]
 8008516:	e7b6      	b.n	8008486 <_malloc_r+0x4a>
 8008518:	461a      	mov	r2, r3
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	42a3      	cmp	r3, r4
 800851e:	d1fb      	bne.n	8008518 <_malloc_r+0xdc>
 8008520:	2300      	movs	r3, #0
 8008522:	6053      	str	r3, [r2, #4]
 8008524:	e7de      	b.n	80084e4 <_malloc_r+0xa8>
 8008526:	230c      	movs	r3, #12
 8008528:	6033      	str	r3, [r6, #0]
 800852a:	4630      	mov	r0, r6
 800852c:	f000 f8b8 	bl	80086a0 <__malloc_unlock>
 8008530:	e794      	b.n	800845c <_malloc_r+0x20>
 8008532:	6005      	str	r5, [r0, #0]
 8008534:	e7d6      	b.n	80084e4 <_malloc_r+0xa8>
 8008536:	bf00      	nop
 8008538:	20000688 	.word	0x20000688

0800853c <__sflush_r>:
 800853c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008544:	0716      	lsls	r6, r2, #28
 8008546:	4605      	mov	r5, r0
 8008548:	460c      	mov	r4, r1
 800854a:	d454      	bmi.n	80085f6 <__sflush_r+0xba>
 800854c:	684b      	ldr	r3, [r1, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	dc02      	bgt.n	8008558 <__sflush_r+0x1c>
 8008552:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008554:	2b00      	cmp	r3, #0
 8008556:	dd48      	ble.n	80085ea <__sflush_r+0xae>
 8008558:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800855a:	2e00      	cmp	r6, #0
 800855c:	d045      	beq.n	80085ea <__sflush_r+0xae>
 800855e:	2300      	movs	r3, #0
 8008560:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008564:	682f      	ldr	r7, [r5, #0]
 8008566:	6a21      	ldr	r1, [r4, #32]
 8008568:	602b      	str	r3, [r5, #0]
 800856a:	d030      	beq.n	80085ce <__sflush_r+0x92>
 800856c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800856e:	89a3      	ldrh	r3, [r4, #12]
 8008570:	0759      	lsls	r1, r3, #29
 8008572:	d505      	bpl.n	8008580 <__sflush_r+0x44>
 8008574:	6863      	ldr	r3, [r4, #4]
 8008576:	1ad2      	subs	r2, r2, r3
 8008578:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800857a:	b10b      	cbz	r3, 8008580 <__sflush_r+0x44>
 800857c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800857e:	1ad2      	subs	r2, r2, r3
 8008580:	2300      	movs	r3, #0
 8008582:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008584:	6a21      	ldr	r1, [r4, #32]
 8008586:	4628      	mov	r0, r5
 8008588:	47b0      	blx	r6
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	d106      	bne.n	800859e <__sflush_r+0x62>
 8008590:	6829      	ldr	r1, [r5, #0]
 8008592:	291d      	cmp	r1, #29
 8008594:	d82b      	bhi.n	80085ee <__sflush_r+0xb2>
 8008596:	4a2a      	ldr	r2, [pc, #168]	@ (8008640 <__sflush_r+0x104>)
 8008598:	410a      	asrs	r2, r1
 800859a:	07d6      	lsls	r6, r2, #31
 800859c:	d427      	bmi.n	80085ee <__sflush_r+0xb2>
 800859e:	2200      	movs	r2, #0
 80085a0:	6062      	str	r2, [r4, #4]
 80085a2:	04d9      	lsls	r1, r3, #19
 80085a4:	6922      	ldr	r2, [r4, #16]
 80085a6:	6022      	str	r2, [r4, #0]
 80085a8:	d504      	bpl.n	80085b4 <__sflush_r+0x78>
 80085aa:	1c42      	adds	r2, r0, #1
 80085ac:	d101      	bne.n	80085b2 <__sflush_r+0x76>
 80085ae:	682b      	ldr	r3, [r5, #0]
 80085b0:	b903      	cbnz	r3, 80085b4 <__sflush_r+0x78>
 80085b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80085b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085b6:	602f      	str	r7, [r5, #0]
 80085b8:	b1b9      	cbz	r1, 80085ea <__sflush_r+0xae>
 80085ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085be:	4299      	cmp	r1, r3
 80085c0:	d002      	beq.n	80085c8 <__sflush_r+0x8c>
 80085c2:	4628      	mov	r0, r5
 80085c4:	f000 fcce 	bl	8008f64 <_free_r>
 80085c8:	2300      	movs	r3, #0
 80085ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80085cc:	e00d      	b.n	80085ea <__sflush_r+0xae>
 80085ce:	2301      	movs	r3, #1
 80085d0:	4628      	mov	r0, r5
 80085d2:	47b0      	blx	r6
 80085d4:	4602      	mov	r2, r0
 80085d6:	1c50      	adds	r0, r2, #1
 80085d8:	d1c9      	bne.n	800856e <__sflush_r+0x32>
 80085da:	682b      	ldr	r3, [r5, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0c6      	beq.n	800856e <__sflush_r+0x32>
 80085e0:	2b1d      	cmp	r3, #29
 80085e2:	d001      	beq.n	80085e8 <__sflush_r+0xac>
 80085e4:	2b16      	cmp	r3, #22
 80085e6:	d11e      	bne.n	8008626 <__sflush_r+0xea>
 80085e8:	602f      	str	r7, [r5, #0]
 80085ea:	2000      	movs	r0, #0
 80085ec:	e022      	b.n	8008634 <__sflush_r+0xf8>
 80085ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085f2:	b21b      	sxth	r3, r3
 80085f4:	e01b      	b.n	800862e <__sflush_r+0xf2>
 80085f6:	690f      	ldr	r7, [r1, #16]
 80085f8:	2f00      	cmp	r7, #0
 80085fa:	d0f6      	beq.n	80085ea <__sflush_r+0xae>
 80085fc:	0793      	lsls	r3, r2, #30
 80085fe:	680e      	ldr	r6, [r1, #0]
 8008600:	bf08      	it	eq
 8008602:	694b      	ldreq	r3, [r1, #20]
 8008604:	600f      	str	r7, [r1, #0]
 8008606:	bf18      	it	ne
 8008608:	2300      	movne	r3, #0
 800860a:	eba6 0807 	sub.w	r8, r6, r7
 800860e:	608b      	str	r3, [r1, #8]
 8008610:	f1b8 0f00 	cmp.w	r8, #0
 8008614:	dde9      	ble.n	80085ea <__sflush_r+0xae>
 8008616:	6a21      	ldr	r1, [r4, #32]
 8008618:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800861a:	4643      	mov	r3, r8
 800861c:	463a      	mov	r2, r7
 800861e:	4628      	mov	r0, r5
 8008620:	47b0      	blx	r6
 8008622:	2800      	cmp	r0, #0
 8008624:	dc08      	bgt.n	8008638 <__sflush_r+0xfc>
 8008626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800862a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800862e:	81a3      	strh	r3, [r4, #12]
 8008630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008638:	4407      	add	r7, r0
 800863a:	eba8 0800 	sub.w	r8, r8, r0
 800863e:	e7e7      	b.n	8008610 <__sflush_r+0xd4>
 8008640:	dfbffffe 	.word	0xdfbffffe

08008644 <_fflush_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	690b      	ldr	r3, [r1, #16]
 8008648:	4605      	mov	r5, r0
 800864a:	460c      	mov	r4, r1
 800864c:	b913      	cbnz	r3, 8008654 <_fflush_r+0x10>
 800864e:	2500      	movs	r5, #0
 8008650:	4628      	mov	r0, r5
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	b118      	cbz	r0, 800865e <_fflush_r+0x1a>
 8008656:	6a03      	ldr	r3, [r0, #32]
 8008658:	b90b      	cbnz	r3, 800865e <_fflush_r+0x1a>
 800865a:	f7ff f807 	bl	800766c <__sinit>
 800865e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0f3      	beq.n	800864e <_fflush_r+0xa>
 8008666:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008668:	07d0      	lsls	r0, r2, #31
 800866a:	d404      	bmi.n	8008676 <_fflush_r+0x32>
 800866c:	0599      	lsls	r1, r3, #22
 800866e:	d402      	bmi.n	8008676 <_fflush_r+0x32>
 8008670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008672:	f7ff f868 	bl	8007746 <__retarget_lock_acquire_recursive>
 8008676:	4628      	mov	r0, r5
 8008678:	4621      	mov	r1, r4
 800867a:	f7ff ff5f 	bl	800853c <__sflush_r>
 800867e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008680:	07da      	lsls	r2, r3, #31
 8008682:	4605      	mov	r5, r0
 8008684:	d4e4      	bmi.n	8008650 <_fflush_r+0xc>
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	059b      	lsls	r3, r3, #22
 800868a:	d4e1      	bmi.n	8008650 <_fflush_r+0xc>
 800868c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800868e:	f7ff f85b 	bl	8007748 <__retarget_lock_release_recursive>
 8008692:	e7dd      	b.n	8008650 <_fflush_r+0xc>

08008694 <__malloc_lock>:
 8008694:	4801      	ldr	r0, [pc, #4]	@ (800869c <__malloc_lock+0x8>)
 8008696:	f7ff b856 	b.w	8007746 <__retarget_lock_acquire_recursive>
 800869a:	bf00      	nop
 800869c:	20000680 	.word	0x20000680

080086a0 <__malloc_unlock>:
 80086a0:	4801      	ldr	r0, [pc, #4]	@ (80086a8 <__malloc_unlock+0x8>)
 80086a2:	f7ff b851 	b.w	8007748 <__retarget_lock_release_recursive>
 80086a6:	bf00      	nop
 80086a8:	20000680 	.word	0x20000680

080086ac <_Balloc>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	69c6      	ldr	r6, [r0, #28]
 80086b0:	4604      	mov	r4, r0
 80086b2:	460d      	mov	r5, r1
 80086b4:	b976      	cbnz	r6, 80086d4 <_Balloc+0x28>
 80086b6:	2010      	movs	r0, #16
 80086b8:	f7ff fe96 	bl	80083e8 <malloc>
 80086bc:	4602      	mov	r2, r0
 80086be:	61e0      	str	r0, [r4, #28]
 80086c0:	b920      	cbnz	r0, 80086cc <_Balloc+0x20>
 80086c2:	4b18      	ldr	r3, [pc, #96]	@ (8008724 <_Balloc+0x78>)
 80086c4:	4818      	ldr	r0, [pc, #96]	@ (8008728 <_Balloc+0x7c>)
 80086c6:	216b      	movs	r1, #107	@ 0x6b
 80086c8:	f000 fc1a 	bl	8008f00 <__assert_func>
 80086cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086d0:	6006      	str	r6, [r0, #0]
 80086d2:	60c6      	str	r6, [r0, #12]
 80086d4:	69e6      	ldr	r6, [r4, #28]
 80086d6:	68f3      	ldr	r3, [r6, #12]
 80086d8:	b183      	cbz	r3, 80086fc <_Balloc+0x50>
 80086da:	69e3      	ldr	r3, [r4, #28]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086e2:	b9b8      	cbnz	r0, 8008714 <_Balloc+0x68>
 80086e4:	2101      	movs	r1, #1
 80086e6:	fa01 f605 	lsl.w	r6, r1, r5
 80086ea:	1d72      	adds	r2, r6, #5
 80086ec:	0092      	lsls	r2, r2, #2
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 fc24 	bl	8008f3c <_calloc_r>
 80086f4:	b160      	cbz	r0, 8008710 <_Balloc+0x64>
 80086f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086fa:	e00e      	b.n	800871a <_Balloc+0x6e>
 80086fc:	2221      	movs	r2, #33	@ 0x21
 80086fe:	2104      	movs	r1, #4
 8008700:	4620      	mov	r0, r4
 8008702:	f000 fc1b 	bl	8008f3c <_calloc_r>
 8008706:	69e3      	ldr	r3, [r4, #28]
 8008708:	60f0      	str	r0, [r6, #12]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e4      	bne.n	80086da <_Balloc+0x2e>
 8008710:	2000      	movs	r0, #0
 8008712:	bd70      	pop	{r4, r5, r6, pc}
 8008714:	6802      	ldr	r2, [r0, #0]
 8008716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800871a:	2300      	movs	r3, #0
 800871c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008720:	e7f7      	b.n	8008712 <_Balloc+0x66>
 8008722:	bf00      	nop
 8008724:	08009619 	.word	0x08009619
 8008728:	08009699 	.word	0x08009699

0800872c <_Bfree>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	69c6      	ldr	r6, [r0, #28]
 8008730:	4605      	mov	r5, r0
 8008732:	460c      	mov	r4, r1
 8008734:	b976      	cbnz	r6, 8008754 <_Bfree+0x28>
 8008736:	2010      	movs	r0, #16
 8008738:	f7ff fe56 	bl	80083e8 <malloc>
 800873c:	4602      	mov	r2, r0
 800873e:	61e8      	str	r0, [r5, #28]
 8008740:	b920      	cbnz	r0, 800874c <_Bfree+0x20>
 8008742:	4b09      	ldr	r3, [pc, #36]	@ (8008768 <_Bfree+0x3c>)
 8008744:	4809      	ldr	r0, [pc, #36]	@ (800876c <_Bfree+0x40>)
 8008746:	218f      	movs	r1, #143	@ 0x8f
 8008748:	f000 fbda 	bl	8008f00 <__assert_func>
 800874c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008750:	6006      	str	r6, [r0, #0]
 8008752:	60c6      	str	r6, [r0, #12]
 8008754:	b13c      	cbz	r4, 8008766 <_Bfree+0x3a>
 8008756:	69eb      	ldr	r3, [r5, #28]
 8008758:	6862      	ldr	r2, [r4, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008760:	6021      	str	r1, [r4, #0]
 8008762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	08009619 	.word	0x08009619
 800876c:	08009699 	.word	0x08009699

08008770 <__multadd>:
 8008770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008774:	690d      	ldr	r5, [r1, #16]
 8008776:	4607      	mov	r7, r0
 8008778:	460c      	mov	r4, r1
 800877a:	461e      	mov	r6, r3
 800877c:	f101 0c14 	add.w	ip, r1, #20
 8008780:	2000      	movs	r0, #0
 8008782:	f8dc 3000 	ldr.w	r3, [ip]
 8008786:	b299      	uxth	r1, r3
 8008788:	fb02 6101 	mla	r1, r2, r1, r6
 800878c:	0c1e      	lsrs	r6, r3, #16
 800878e:	0c0b      	lsrs	r3, r1, #16
 8008790:	fb02 3306 	mla	r3, r2, r6, r3
 8008794:	b289      	uxth	r1, r1
 8008796:	3001      	adds	r0, #1
 8008798:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800879c:	4285      	cmp	r5, r0
 800879e:	f84c 1b04 	str.w	r1, [ip], #4
 80087a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087a6:	dcec      	bgt.n	8008782 <__multadd+0x12>
 80087a8:	b30e      	cbz	r6, 80087ee <__multadd+0x7e>
 80087aa:	68a3      	ldr	r3, [r4, #8]
 80087ac:	42ab      	cmp	r3, r5
 80087ae:	dc19      	bgt.n	80087e4 <__multadd+0x74>
 80087b0:	6861      	ldr	r1, [r4, #4]
 80087b2:	4638      	mov	r0, r7
 80087b4:	3101      	adds	r1, #1
 80087b6:	f7ff ff79 	bl	80086ac <_Balloc>
 80087ba:	4680      	mov	r8, r0
 80087bc:	b928      	cbnz	r0, 80087ca <__multadd+0x5a>
 80087be:	4602      	mov	r2, r0
 80087c0:	4b0c      	ldr	r3, [pc, #48]	@ (80087f4 <__multadd+0x84>)
 80087c2:	480d      	ldr	r0, [pc, #52]	@ (80087f8 <__multadd+0x88>)
 80087c4:	21ba      	movs	r1, #186	@ 0xba
 80087c6:	f000 fb9b 	bl	8008f00 <__assert_func>
 80087ca:	6922      	ldr	r2, [r4, #16]
 80087cc:	3202      	adds	r2, #2
 80087ce:	f104 010c 	add.w	r1, r4, #12
 80087d2:	0092      	lsls	r2, r2, #2
 80087d4:	300c      	adds	r0, #12
 80087d6:	f000 fb85 	bl	8008ee4 <memcpy>
 80087da:	4621      	mov	r1, r4
 80087dc:	4638      	mov	r0, r7
 80087de:	f7ff ffa5 	bl	800872c <_Bfree>
 80087e2:	4644      	mov	r4, r8
 80087e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087e8:	3501      	adds	r5, #1
 80087ea:	615e      	str	r6, [r3, #20]
 80087ec:	6125      	str	r5, [r4, #16]
 80087ee:	4620      	mov	r0, r4
 80087f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f4:	08009688 	.word	0x08009688
 80087f8:	08009699 	.word	0x08009699

080087fc <__hi0bits>:
 80087fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008800:	4603      	mov	r3, r0
 8008802:	bf36      	itet	cc
 8008804:	0403      	lslcc	r3, r0, #16
 8008806:	2000      	movcs	r0, #0
 8008808:	2010      	movcc	r0, #16
 800880a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800880e:	bf3c      	itt	cc
 8008810:	021b      	lslcc	r3, r3, #8
 8008812:	3008      	addcc	r0, #8
 8008814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008818:	bf3c      	itt	cc
 800881a:	011b      	lslcc	r3, r3, #4
 800881c:	3004      	addcc	r0, #4
 800881e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008822:	bf3c      	itt	cc
 8008824:	009b      	lslcc	r3, r3, #2
 8008826:	3002      	addcc	r0, #2
 8008828:	2b00      	cmp	r3, #0
 800882a:	db05      	blt.n	8008838 <__hi0bits+0x3c>
 800882c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008830:	f100 0001 	add.w	r0, r0, #1
 8008834:	bf08      	it	eq
 8008836:	2020      	moveq	r0, #32
 8008838:	4770      	bx	lr

0800883a <__lo0bits>:
 800883a:	6803      	ldr	r3, [r0, #0]
 800883c:	4602      	mov	r2, r0
 800883e:	f013 0007 	ands.w	r0, r3, #7
 8008842:	d00b      	beq.n	800885c <__lo0bits+0x22>
 8008844:	07d9      	lsls	r1, r3, #31
 8008846:	d421      	bmi.n	800888c <__lo0bits+0x52>
 8008848:	0798      	lsls	r0, r3, #30
 800884a:	bf49      	itett	mi
 800884c:	085b      	lsrmi	r3, r3, #1
 800884e:	089b      	lsrpl	r3, r3, #2
 8008850:	2001      	movmi	r0, #1
 8008852:	6013      	strmi	r3, [r2, #0]
 8008854:	bf5c      	itt	pl
 8008856:	6013      	strpl	r3, [r2, #0]
 8008858:	2002      	movpl	r0, #2
 800885a:	4770      	bx	lr
 800885c:	b299      	uxth	r1, r3
 800885e:	b909      	cbnz	r1, 8008864 <__lo0bits+0x2a>
 8008860:	0c1b      	lsrs	r3, r3, #16
 8008862:	2010      	movs	r0, #16
 8008864:	b2d9      	uxtb	r1, r3
 8008866:	b909      	cbnz	r1, 800886c <__lo0bits+0x32>
 8008868:	3008      	adds	r0, #8
 800886a:	0a1b      	lsrs	r3, r3, #8
 800886c:	0719      	lsls	r1, r3, #28
 800886e:	bf04      	itt	eq
 8008870:	091b      	lsreq	r3, r3, #4
 8008872:	3004      	addeq	r0, #4
 8008874:	0799      	lsls	r1, r3, #30
 8008876:	bf04      	itt	eq
 8008878:	089b      	lsreq	r3, r3, #2
 800887a:	3002      	addeq	r0, #2
 800887c:	07d9      	lsls	r1, r3, #31
 800887e:	d403      	bmi.n	8008888 <__lo0bits+0x4e>
 8008880:	085b      	lsrs	r3, r3, #1
 8008882:	f100 0001 	add.w	r0, r0, #1
 8008886:	d003      	beq.n	8008890 <__lo0bits+0x56>
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	4770      	bx	lr
 800888c:	2000      	movs	r0, #0
 800888e:	4770      	bx	lr
 8008890:	2020      	movs	r0, #32
 8008892:	4770      	bx	lr

08008894 <__i2b>:
 8008894:	b510      	push	{r4, lr}
 8008896:	460c      	mov	r4, r1
 8008898:	2101      	movs	r1, #1
 800889a:	f7ff ff07 	bl	80086ac <_Balloc>
 800889e:	4602      	mov	r2, r0
 80088a0:	b928      	cbnz	r0, 80088ae <__i2b+0x1a>
 80088a2:	4b05      	ldr	r3, [pc, #20]	@ (80088b8 <__i2b+0x24>)
 80088a4:	4805      	ldr	r0, [pc, #20]	@ (80088bc <__i2b+0x28>)
 80088a6:	f240 1145 	movw	r1, #325	@ 0x145
 80088aa:	f000 fb29 	bl	8008f00 <__assert_func>
 80088ae:	2301      	movs	r3, #1
 80088b0:	6144      	str	r4, [r0, #20]
 80088b2:	6103      	str	r3, [r0, #16]
 80088b4:	bd10      	pop	{r4, pc}
 80088b6:	bf00      	nop
 80088b8:	08009688 	.word	0x08009688
 80088bc:	08009699 	.word	0x08009699

080088c0 <__multiply>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	4614      	mov	r4, r2
 80088c6:	690a      	ldr	r2, [r1, #16]
 80088c8:	6923      	ldr	r3, [r4, #16]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	bfa8      	it	ge
 80088ce:	4623      	movge	r3, r4
 80088d0:	460f      	mov	r7, r1
 80088d2:	bfa4      	itt	ge
 80088d4:	460c      	movge	r4, r1
 80088d6:	461f      	movge	r7, r3
 80088d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80088dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80088e0:	68a3      	ldr	r3, [r4, #8]
 80088e2:	6861      	ldr	r1, [r4, #4]
 80088e4:	eb0a 0609 	add.w	r6, sl, r9
 80088e8:	42b3      	cmp	r3, r6
 80088ea:	b085      	sub	sp, #20
 80088ec:	bfb8      	it	lt
 80088ee:	3101      	addlt	r1, #1
 80088f0:	f7ff fedc 	bl	80086ac <_Balloc>
 80088f4:	b930      	cbnz	r0, 8008904 <__multiply+0x44>
 80088f6:	4602      	mov	r2, r0
 80088f8:	4b44      	ldr	r3, [pc, #272]	@ (8008a0c <__multiply+0x14c>)
 80088fa:	4845      	ldr	r0, [pc, #276]	@ (8008a10 <__multiply+0x150>)
 80088fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008900:	f000 fafe 	bl	8008f00 <__assert_func>
 8008904:	f100 0514 	add.w	r5, r0, #20
 8008908:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800890c:	462b      	mov	r3, r5
 800890e:	2200      	movs	r2, #0
 8008910:	4543      	cmp	r3, r8
 8008912:	d321      	bcc.n	8008958 <__multiply+0x98>
 8008914:	f107 0114 	add.w	r1, r7, #20
 8008918:	f104 0214 	add.w	r2, r4, #20
 800891c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008920:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008924:	9302      	str	r3, [sp, #8]
 8008926:	1b13      	subs	r3, r2, r4
 8008928:	3b15      	subs	r3, #21
 800892a:	f023 0303 	bic.w	r3, r3, #3
 800892e:	3304      	adds	r3, #4
 8008930:	f104 0715 	add.w	r7, r4, #21
 8008934:	42ba      	cmp	r2, r7
 8008936:	bf38      	it	cc
 8008938:	2304      	movcc	r3, #4
 800893a:	9301      	str	r3, [sp, #4]
 800893c:	9b02      	ldr	r3, [sp, #8]
 800893e:	9103      	str	r1, [sp, #12]
 8008940:	428b      	cmp	r3, r1
 8008942:	d80c      	bhi.n	800895e <__multiply+0x9e>
 8008944:	2e00      	cmp	r6, #0
 8008946:	dd03      	ble.n	8008950 <__multiply+0x90>
 8008948:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800894c:	2b00      	cmp	r3, #0
 800894e:	d05b      	beq.n	8008a08 <__multiply+0x148>
 8008950:	6106      	str	r6, [r0, #16]
 8008952:	b005      	add	sp, #20
 8008954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008958:	f843 2b04 	str.w	r2, [r3], #4
 800895c:	e7d8      	b.n	8008910 <__multiply+0x50>
 800895e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008962:	f1ba 0f00 	cmp.w	sl, #0
 8008966:	d024      	beq.n	80089b2 <__multiply+0xf2>
 8008968:	f104 0e14 	add.w	lr, r4, #20
 800896c:	46a9      	mov	r9, r5
 800896e:	f04f 0c00 	mov.w	ip, #0
 8008972:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008976:	f8d9 3000 	ldr.w	r3, [r9]
 800897a:	fa1f fb87 	uxth.w	fp, r7
 800897e:	b29b      	uxth	r3, r3
 8008980:	fb0a 330b 	mla	r3, sl, fp, r3
 8008984:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008988:	f8d9 7000 	ldr.w	r7, [r9]
 800898c:	4463      	add	r3, ip
 800898e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008992:	fb0a c70b 	mla	r7, sl, fp, ip
 8008996:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800899a:	b29b      	uxth	r3, r3
 800899c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80089a0:	4572      	cmp	r2, lr
 80089a2:	f849 3b04 	str.w	r3, [r9], #4
 80089a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80089aa:	d8e2      	bhi.n	8008972 <__multiply+0xb2>
 80089ac:	9b01      	ldr	r3, [sp, #4]
 80089ae:	f845 c003 	str.w	ip, [r5, r3]
 80089b2:	9b03      	ldr	r3, [sp, #12]
 80089b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80089b8:	3104      	adds	r1, #4
 80089ba:	f1b9 0f00 	cmp.w	r9, #0
 80089be:	d021      	beq.n	8008a04 <__multiply+0x144>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	f104 0c14 	add.w	ip, r4, #20
 80089c6:	46ae      	mov	lr, r5
 80089c8:	f04f 0a00 	mov.w	sl, #0
 80089cc:	f8bc b000 	ldrh.w	fp, [ip]
 80089d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80089d4:	fb09 770b 	mla	r7, r9, fp, r7
 80089d8:	4457      	add	r7, sl
 80089da:	b29b      	uxth	r3, r3
 80089dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80089e0:	f84e 3b04 	str.w	r3, [lr], #4
 80089e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089ec:	f8be 3000 	ldrh.w	r3, [lr]
 80089f0:	fb09 330a 	mla	r3, r9, sl, r3
 80089f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80089f8:	4562      	cmp	r2, ip
 80089fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089fe:	d8e5      	bhi.n	80089cc <__multiply+0x10c>
 8008a00:	9f01      	ldr	r7, [sp, #4]
 8008a02:	51eb      	str	r3, [r5, r7]
 8008a04:	3504      	adds	r5, #4
 8008a06:	e799      	b.n	800893c <__multiply+0x7c>
 8008a08:	3e01      	subs	r6, #1
 8008a0a:	e79b      	b.n	8008944 <__multiply+0x84>
 8008a0c:	08009688 	.word	0x08009688
 8008a10:	08009699 	.word	0x08009699

08008a14 <__pow5mult>:
 8008a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a18:	4615      	mov	r5, r2
 8008a1a:	f012 0203 	ands.w	r2, r2, #3
 8008a1e:	4607      	mov	r7, r0
 8008a20:	460e      	mov	r6, r1
 8008a22:	d007      	beq.n	8008a34 <__pow5mult+0x20>
 8008a24:	4c25      	ldr	r4, [pc, #148]	@ (8008abc <__pow5mult+0xa8>)
 8008a26:	3a01      	subs	r2, #1
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a2e:	f7ff fe9f 	bl	8008770 <__multadd>
 8008a32:	4606      	mov	r6, r0
 8008a34:	10ad      	asrs	r5, r5, #2
 8008a36:	d03d      	beq.n	8008ab4 <__pow5mult+0xa0>
 8008a38:	69fc      	ldr	r4, [r7, #28]
 8008a3a:	b97c      	cbnz	r4, 8008a5c <__pow5mult+0x48>
 8008a3c:	2010      	movs	r0, #16
 8008a3e:	f7ff fcd3 	bl	80083e8 <malloc>
 8008a42:	4602      	mov	r2, r0
 8008a44:	61f8      	str	r0, [r7, #28]
 8008a46:	b928      	cbnz	r0, 8008a54 <__pow5mult+0x40>
 8008a48:	4b1d      	ldr	r3, [pc, #116]	@ (8008ac0 <__pow5mult+0xac>)
 8008a4a:	481e      	ldr	r0, [pc, #120]	@ (8008ac4 <__pow5mult+0xb0>)
 8008a4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a50:	f000 fa56 	bl	8008f00 <__assert_func>
 8008a54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a58:	6004      	str	r4, [r0, #0]
 8008a5a:	60c4      	str	r4, [r0, #12]
 8008a5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a64:	b94c      	cbnz	r4, 8008a7a <__pow5mult+0x66>
 8008a66:	f240 2171 	movw	r1, #625	@ 0x271
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	f7ff ff12 	bl	8008894 <__i2b>
 8008a70:	2300      	movs	r3, #0
 8008a72:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a76:	4604      	mov	r4, r0
 8008a78:	6003      	str	r3, [r0, #0]
 8008a7a:	f04f 0900 	mov.w	r9, #0
 8008a7e:	07eb      	lsls	r3, r5, #31
 8008a80:	d50a      	bpl.n	8008a98 <__pow5mult+0x84>
 8008a82:	4631      	mov	r1, r6
 8008a84:	4622      	mov	r2, r4
 8008a86:	4638      	mov	r0, r7
 8008a88:	f7ff ff1a 	bl	80088c0 <__multiply>
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4680      	mov	r8, r0
 8008a90:	4638      	mov	r0, r7
 8008a92:	f7ff fe4b 	bl	800872c <_Bfree>
 8008a96:	4646      	mov	r6, r8
 8008a98:	106d      	asrs	r5, r5, #1
 8008a9a:	d00b      	beq.n	8008ab4 <__pow5mult+0xa0>
 8008a9c:	6820      	ldr	r0, [r4, #0]
 8008a9e:	b938      	cbnz	r0, 8008ab0 <__pow5mult+0x9c>
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	f7ff ff0b 	bl	80088c0 <__multiply>
 8008aaa:	6020      	str	r0, [r4, #0]
 8008aac:	f8c0 9000 	str.w	r9, [r0]
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	e7e4      	b.n	8008a7e <__pow5mult+0x6a>
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aba:	bf00      	nop
 8008abc:	080096f4 	.word	0x080096f4
 8008ac0:	08009619 	.word	0x08009619
 8008ac4:	08009699 	.word	0x08009699

08008ac8 <__lshift>:
 8008ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008acc:	460c      	mov	r4, r1
 8008ace:	6849      	ldr	r1, [r1, #4]
 8008ad0:	6923      	ldr	r3, [r4, #16]
 8008ad2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ad6:	68a3      	ldr	r3, [r4, #8]
 8008ad8:	4607      	mov	r7, r0
 8008ada:	4691      	mov	r9, r2
 8008adc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ae0:	f108 0601 	add.w	r6, r8, #1
 8008ae4:	42b3      	cmp	r3, r6
 8008ae6:	db0b      	blt.n	8008b00 <__lshift+0x38>
 8008ae8:	4638      	mov	r0, r7
 8008aea:	f7ff fddf 	bl	80086ac <_Balloc>
 8008aee:	4605      	mov	r5, r0
 8008af0:	b948      	cbnz	r0, 8008b06 <__lshift+0x3e>
 8008af2:	4602      	mov	r2, r0
 8008af4:	4b28      	ldr	r3, [pc, #160]	@ (8008b98 <__lshift+0xd0>)
 8008af6:	4829      	ldr	r0, [pc, #164]	@ (8008b9c <__lshift+0xd4>)
 8008af8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008afc:	f000 fa00 	bl	8008f00 <__assert_func>
 8008b00:	3101      	adds	r1, #1
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	e7ee      	b.n	8008ae4 <__lshift+0x1c>
 8008b06:	2300      	movs	r3, #0
 8008b08:	f100 0114 	add.w	r1, r0, #20
 8008b0c:	f100 0210 	add.w	r2, r0, #16
 8008b10:	4618      	mov	r0, r3
 8008b12:	4553      	cmp	r3, sl
 8008b14:	db33      	blt.n	8008b7e <__lshift+0xb6>
 8008b16:	6920      	ldr	r0, [r4, #16]
 8008b18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b1c:	f104 0314 	add.w	r3, r4, #20
 8008b20:	f019 091f 	ands.w	r9, r9, #31
 8008b24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b2c:	d02b      	beq.n	8008b86 <__lshift+0xbe>
 8008b2e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b32:	468a      	mov	sl, r1
 8008b34:	2200      	movs	r2, #0
 8008b36:	6818      	ldr	r0, [r3, #0]
 8008b38:	fa00 f009 	lsl.w	r0, r0, r9
 8008b3c:	4310      	orrs	r0, r2
 8008b3e:	f84a 0b04 	str.w	r0, [sl], #4
 8008b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b46:	459c      	cmp	ip, r3
 8008b48:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b4c:	d8f3      	bhi.n	8008b36 <__lshift+0x6e>
 8008b4e:	ebac 0304 	sub.w	r3, ip, r4
 8008b52:	3b15      	subs	r3, #21
 8008b54:	f023 0303 	bic.w	r3, r3, #3
 8008b58:	3304      	adds	r3, #4
 8008b5a:	f104 0015 	add.w	r0, r4, #21
 8008b5e:	4584      	cmp	ip, r0
 8008b60:	bf38      	it	cc
 8008b62:	2304      	movcc	r3, #4
 8008b64:	50ca      	str	r2, [r1, r3]
 8008b66:	b10a      	cbz	r2, 8008b6c <__lshift+0xa4>
 8008b68:	f108 0602 	add.w	r6, r8, #2
 8008b6c:	3e01      	subs	r6, #1
 8008b6e:	4638      	mov	r0, r7
 8008b70:	612e      	str	r6, [r5, #16]
 8008b72:	4621      	mov	r1, r4
 8008b74:	f7ff fdda 	bl	800872c <_Bfree>
 8008b78:	4628      	mov	r0, r5
 8008b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b82:	3301      	adds	r3, #1
 8008b84:	e7c5      	b.n	8008b12 <__lshift+0x4a>
 8008b86:	3904      	subs	r1, #4
 8008b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b90:	459c      	cmp	ip, r3
 8008b92:	d8f9      	bhi.n	8008b88 <__lshift+0xc0>
 8008b94:	e7ea      	b.n	8008b6c <__lshift+0xa4>
 8008b96:	bf00      	nop
 8008b98:	08009688 	.word	0x08009688
 8008b9c:	08009699 	.word	0x08009699

08008ba0 <__mcmp>:
 8008ba0:	690a      	ldr	r2, [r1, #16]
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6900      	ldr	r0, [r0, #16]
 8008ba6:	1a80      	subs	r0, r0, r2
 8008ba8:	b530      	push	{r4, r5, lr}
 8008baa:	d10e      	bne.n	8008bca <__mcmp+0x2a>
 8008bac:	3314      	adds	r3, #20
 8008bae:	3114      	adds	r1, #20
 8008bb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008bb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008bbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008bc0:	4295      	cmp	r5, r2
 8008bc2:	d003      	beq.n	8008bcc <__mcmp+0x2c>
 8008bc4:	d205      	bcs.n	8008bd2 <__mcmp+0x32>
 8008bc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bca:	bd30      	pop	{r4, r5, pc}
 8008bcc:	42a3      	cmp	r3, r4
 8008bce:	d3f3      	bcc.n	8008bb8 <__mcmp+0x18>
 8008bd0:	e7fb      	b.n	8008bca <__mcmp+0x2a>
 8008bd2:	2001      	movs	r0, #1
 8008bd4:	e7f9      	b.n	8008bca <__mcmp+0x2a>
	...

08008bd8 <__mdiff>:
 8008bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	4689      	mov	r9, r1
 8008bde:	4606      	mov	r6, r0
 8008be0:	4611      	mov	r1, r2
 8008be2:	4648      	mov	r0, r9
 8008be4:	4614      	mov	r4, r2
 8008be6:	f7ff ffdb 	bl	8008ba0 <__mcmp>
 8008bea:	1e05      	subs	r5, r0, #0
 8008bec:	d112      	bne.n	8008c14 <__mdiff+0x3c>
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f7ff fd5b 	bl	80086ac <_Balloc>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	b928      	cbnz	r0, 8008c06 <__mdiff+0x2e>
 8008bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8008cf8 <__mdiff+0x120>)
 8008bfc:	f240 2137 	movw	r1, #567	@ 0x237
 8008c00:	483e      	ldr	r0, [pc, #248]	@ (8008cfc <__mdiff+0x124>)
 8008c02:	f000 f97d 	bl	8008f00 <__assert_func>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	b003      	add	sp, #12
 8008c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c14:	bfbc      	itt	lt
 8008c16:	464b      	movlt	r3, r9
 8008c18:	46a1      	movlt	r9, r4
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c20:	bfba      	itte	lt
 8008c22:	461c      	movlt	r4, r3
 8008c24:	2501      	movlt	r5, #1
 8008c26:	2500      	movge	r5, #0
 8008c28:	f7ff fd40 	bl	80086ac <_Balloc>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	b918      	cbnz	r0, 8008c38 <__mdiff+0x60>
 8008c30:	4b31      	ldr	r3, [pc, #196]	@ (8008cf8 <__mdiff+0x120>)
 8008c32:	f240 2145 	movw	r1, #581	@ 0x245
 8008c36:	e7e3      	b.n	8008c00 <__mdiff+0x28>
 8008c38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c3c:	6926      	ldr	r6, [r4, #16]
 8008c3e:	60c5      	str	r5, [r0, #12]
 8008c40:	f109 0310 	add.w	r3, r9, #16
 8008c44:	f109 0514 	add.w	r5, r9, #20
 8008c48:	f104 0e14 	add.w	lr, r4, #20
 8008c4c:	f100 0b14 	add.w	fp, r0, #20
 8008c50:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c54:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	46d9      	mov	r9, fp
 8008c5c:	f04f 0c00 	mov.w	ip, #0
 8008c60:	9b01      	ldr	r3, [sp, #4]
 8008c62:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c66:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c6a:	9301      	str	r3, [sp, #4]
 8008c6c:	fa1f f38a 	uxth.w	r3, sl
 8008c70:	4619      	mov	r1, r3
 8008c72:	b283      	uxth	r3, r0
 8008c74:	1acb      	subs	r3, r1, r3
 8008c76:	0c00      	lsrs	r0, r0, #16
 8008c78:	4463      	add	r3, ip
 8008c7a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008c7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c88:	4576      	cmp	r6, lr
 8008c8a:	f849 3b04 	str.w	r3, [r9], #4
 8008c8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c92:	d8e5      	bhi.n	8008c60 <__mdiff+0x88>
 8008c94:	1b33      	subs	r3, r6, r4
 8008c96:	3b15      	subs	r3, #21
 8008c98:	f023 0303 	bic.w	r3, r3, #3
 8008c9c:	3415      	adds	r4, #21
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	42a6      	cmp	r6, r4
 8008ca2:	bf38      	it	cc
 8008ca4:	2304      	movcc	r3, #4
 8008ca6:	441d      	add	r5, r3
 8008ca8:	445b      	add	r3, fp
 8008caa:	461e      	mov	r6, r3
 8008cac:	462c      	mov	r4, r5
 8008cae:	4544      	cmp	r4, r8
 8008cb0:	d30e      	bcc.n	8008cd0 <__mdiff+0xf8>
 8008cb2:	f108 0103 	add.w	r1, r8, #3
 8008cb6:	1b49      	subs	r1, r1, r5
 8008cb8:	f021 0103 	bic.w	r1, r1, #3
 8008cbc:	3d03      	subs	r5, #3
 8008cbe:	45a8      	cmp	r8, r5
 8008cc0:	bf38      	it	cc
 8008cc2:	2100      	movcc	r1, #0
 8008cc4:	440b      	add	r3, r1
 8008cc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cca:	b191      	cbz	r1, 8008cf2 <__mdiff+0x11a>
 8008ccc:	6117      	str	r7, [r2, #16]
 8008cce:	e79d      	b.n	8008c0c <__mdiff+0x34>
 8008cd0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008cd4:	46e6      	mov	lr, ip
 8008cd6:	0c08      	lsrs	r0, r1, #16
 8008cd8:	fa1c fc81 	uxtah	ip, ip, r1
 8008cdc:	4471      	add	r1, lr
 8008cde:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ce2:	b289      	uxth	r1, r1
 8008ce4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ce8:	f846 1b04 	str.w	r1, [r6], #4
 8008cec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008cf0:	e7dd      	b.n	8008cae <__mdiff+0xd6>
 8008cf2:	3f01      	subs	r7, #1
 8008cf4:	e7e7      	b.n	8008cc6 <__mdiff+0xee>
 8008cf6:	bf00      	nop
 8008cf8:	08009688 	.word	0x08009688
 8008cfc:	08009699 	.word	0x08009699

08008d00 <__d2b>:
 8008d00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d04:	460f      	mov	r7, r1
 8008d06:	2101      	movs	r1, #1
 8008d08:	ec59 8b10 	vmov	r8, r9, d0
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	f7ff fccd 	bl	80086ac <_Balloc>
 8008d12:	4604      	mov	r4, r0
 8008d14:	b930      	cbnz	r0, 8008d24 <__d2b+0x24>
 8008d16:	4602      	mov	r2, r0
 8008d18:	4b23      	ldr	r3, [pc, #140]	@ (8008da8 <__d2b+0xa8>)
 8008d1a:	4824      	ldr	r0, [pc, #144]	@ (8008dac <__d2b+0xac>)
 8008d1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008d20:	f000 f8ee 	bl	8008f00 <__assert_func>
 8008d24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d2c:	b10d      	cbz	r5, 8008d32 <__d2b+0x32>
 8008d2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	f1b8 0300 	subs.w	r3, r8, #0
 8008d38:	d023      	beq.n	8008d82 <__d2b+0x82>
 8008d3a:	4668      	mov	r0, sp
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	f7ff fd7c 	bl	800883a <__lo0bits>
 8008d42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d46:	b1d0      	cbz	r0, 8008d7e <__d2b+0x7e>
 8008d48:	f1c0 0320 	rsb	r3, r0, #32
 8008d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d50:	430b      	orrs	r3, r1
 8008d52:	40c2      	lsrs	r2, r0
 8008d54:	6163      	str	r3, [r4, #20]
 8008d56:	9201      	str	r2, [sp, #4]
 8008d58:	9b01      	ldr	r3, [sp, #4]
 8008d5a:	61a3      	str	r3, [r4, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bf0c      	ite	eq
 8008d60:	2201      	moveq	r2, #1
 8008d62:	2202      	movne	r2, #2
 8008d64:	6122      	str	r2, [r4, #16]
 8008d66:	b1a5      	cbz	r5, 8008d92 <__d2b+0x92>
 8008d68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d6c:	4405      	add	r5, r0
 8008d6e:	603d      	str	r5, [r7, #0]
 8008d70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d74:	6030      	str	r0, [r6, #0]
 8008d76:	4620      	mov	r0, r4
 8008d78:	b003      	add	sp, #12
 8008d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d7e:	6161      	str	r1, [r4, #20]
 8008d80:	e7ea      	b.n	8008d58 <__d2b+0x58>
 8008d82:	a801      	add	r0, sp, #4
 8008d84:	f7ff fd59 	bl	800883a <__lo0bits>
 8008d88:	9b01      	ldr	r3, [sp, #4]
 8008d8a:	6163      	str	r3, [r4, #20]
 8008d8c:	3020      	adds	r0, #32
 8008d8e:	2201      	movs	r2, #1
 8008d90:	e7e8      	b.n	8008d64 <__d2b+0x64>
 8008d92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d9a:	6038      	str	r0, [r7, #0]
 8008d9c:	6918      	ldr	r0, [r3, #16]
 8008d9e:	f7ff fd2d 	bl	80087fc <__hi0bits>
 8008da2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008da6:	e7e5      	b.n	8008d74 <__d2b+0x74>
 8008da8:	08009688 	.word	0x08009688
 8008dac:	08009699 	.word	0x08009699

08008db0 <__sread>:
 8008db0:	b510      	push	{r4, lr}
 8008db2:	460c      	mov	r4, r1
 8008db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db8:	f000 f860 	bl	8008e7c <_read_r>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	bfab      	itete	ge
 8008dc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8008dc4:	181b      	addge	r3, r3, r0
 8008dc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008dca:	bfac      	ite	ge
 8008dcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008dce:	81a3      	strhlt	r3, [r4, #12]
 8008dd0:	bd10      	pop	{r4, pc}

08008dd2 <__swrite>:
 8008dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd6:	461f      	mov	r7, r3
 8008dd8:	898b      	ldrh	r3, [r1, #12]
 8008dda:	05db      	lsls	r3, r3, #23
 8008ddc:	4605      	mov	r5, r0
 8008dde:	460c      	mov	r4, r1
 8008de0:	4616      	mov	r6, r2
 8008de2:	d505      	bpl.n	8008df0 <__swrite+0x1e>
 8008de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de8:	2302      	movs	r3, #2
 8008dea:	2200      	movs	r2, #0
 8008dec:	f000 f834 	bl	8008e58 <_lseek_r>
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008df6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008dfa:	81a3      	strh	r3, [r4, #12]
 8008dfc:	4632      	mov	r2, r6
 8008dfe:	463b      	mov	r3, r7
 8008e00:	4628      	mov	r0, r5
 8008e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e06:	f000 b85b 	b.w	8008ec0 <_write_r>

08008e0a <__sseek>:
 8008e0a:	b510      	push	{r4, lr}
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e12:	f000 f821 	bl	8008e58 <_lseek_r>
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	89a3      	ldrh	r3, [r4, #12]
 8008e1a:	bf15      	itete	ne
 8008e1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e26:	81a3      	strheq	r3, [r4, #12]
 8008e28:	bf18      	it	ne
 8008e2a:	81a3      	strhne	r3, [r4, #12]
 8008e2c:	bd10      	pop	{r4, pc}

08008e2e <__sclose>:
 8008e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e32:	f000 b801 	b.w	8008e38 <_close_r>
	...

08008e38 <_close_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4d06      	ldr	r5, [pc, #24]	@ (8008e54 <_close_r+0x1c>)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4608      	mov	r0, r1
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	f7f9 ff38 	bl	8002cb8 <_close>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d102      	bne.n	8008e52 <_close_r+0x1a>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	b103      	cbz	r3, 8008e52 <_close_r+0x1a>
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	bd38      	pop	{r3, r4, r5, pc}
 8008e54:	2000068c 	.word	0x2000068c

08008e58 <_lseek_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4d07      	ldr	r5, [pc, #28]	@ (8008e78 <_lseek_r+0x20>)
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	4608      	mov	r0, r1
 8008e60:	4611      	mov	r1, r2
 8008e62:	2200      	movs	r2, #0
 8008e64:	602a      	str	r2, [r5, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	f7f9 ff4d 	bl	8002d06 <_lseek>
 8008e6c:	1c43      	adds	r3, r0, #1
 8008e6e:	d102      	bne.n	8008e76 <_lseek_r+0x1e>
 8008e70:	682b      	ldr	r3, [r5, #0]
 8008e72:	b103      	cbz	r3, 8008e76 <_lseek_r+0x1e>
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	bd38      	pop	{r3, r4, r5, pc}
 8008e78:	2000068c 	.word	0x2000068c

08008e7c <_read_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	4d07      	ldr	r5, [pc, #28]	@ (8008e9c <_read_r+0x20>)
 8008e80:	4604      	mov	r4, r0
 8008e82:	4608      	mov	r0, r1
 8008e84:	4611      	mov	r1, r2
 8008e86:	2200      	movs	r2, #0
 8008e88:	602a      	str	r2, [r5, #0]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f7f9 fedb 	bl	8002c46 <_read>
 8008e90:	1c43      	adds	r3, r0, #1
 8008e92:	d102      	bne.n	8008e9a <_read_r+0x1e>
 8008e94:	682b      	ldr	r3, [r5, #0]
 8008e96:	b103      	cbz	r3, 8008e9a <_read_r+0x1e>
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	bd38      	pop	{r3, r4, r5, pc}
 8008e9c:	2000068c 	.word	0x2000068c

08008ea0 <_sbrk_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	4d06      	ldr	r5, [pc, #24]	@ (8008ebc <_sbrk_r+0x1c>)
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	4608      	mov	r0, r1
 8008eaa:	602b      	str	r3, [r5, #0]
 8008eac:	f7f9 ff38 	bl	8002d20 <_sbrk>
 8008eb0:	1c43      	adds	r3, r0, #1
 8008eb2:	d102      	bne.n	8008eba <_sbrk_r+0x1a>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	b103      	cbz	r3, 8008eba <_sbrk_r+0x1a>
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	bd38      	pop	{r3, r4, r5, pc}
 8008ebc:	2000068c 	.word	0x2000068c

08008ec0 <_write_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d07      	ldr	r5, [pc, #28]	@ (8008ee0 <_write_r+0x20>)
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	4608      	mov	r0, r1
 8008ec8:	4611      	mov	r1, r2
 8008eca:	2200      	movs	r2, #0
 8008ecc:	602a      	str	r2, [r5, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f7f9 fed6 	bl	8002c80 <_write>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	d102      	bne.n	8008ede <_write_r+0x1e>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	b103      	cbz	r3, 8008ede <_write_r+0x1e>
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	2000068c 	.word	0x2000068c

08008ee4 <memcpy>:
 8008ee4:	440a      	add	r2, r1
 8008ee6:	4291      	cmp	r1, r2
 8008ee8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008eec:	d100      	bne.n	8008ef0 <memcpy+0xc>
 8008eee:	4770      	bx	lr
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008efa:	4291      	cmp	r1, r2
 8008efc:	d1f9      	bne.n	8008ef2 <memcpy+0xe>
 8008efe:	bd10      	pop	{r4, pc}

08008f00 <__assert_func>:
 8008f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f02:	4614      	mov	r4, r2
 8008f04:	461a      	mov	r2, r3
 8008f06:	4b09      	ldr	r3, [pc, #36]	@ (8008f2c <__assert_func+0x2c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	68d8      	ldr	r0, [r3, #12]
 8008f0e:	b954      	cbnz	r4, 8008f26 <__assert_func+0x26>
 8008f10:	4b07      	ldr	r3, [pc, #28]	@ (8008f30 <__assert_func+0x30>)
 8008f12:	461c      	mov	r4, r3
 8008f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f18:	9100      	str	r1, [sp, #0]
 8008f1a:	462b      	mov	r3, r5
 8008f1c:	4905      	ldr	r1, [pc, #20]	@ (8008f34 <__assert_func+0x34>)
 8008f1e:	f000 f87d 	bl	800901c <fiprintf>
 8008f22:	f000 f89a 	bl	800905a <abort>
 8008f26:	4b04      	ldr	r3, [pc, #16]	@ (8008f38 <__assert_func+0x38>)
 8008f28:	e7f4      	b.n	8008f14 <__assert_func+0x14>
 8008f2a:	bf00      	nop
 8008f2c:	20000038 	.word	0x20000038
 8008f30:	08009936 	.word	0x08009936
 8008f34:	08009908 	.word	0x08009908
 8008f38:	080098fb 	.word	0x080098fb

08008f3c <_calloc_r>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	fba1 5402 	umull	r5, r4, r1, r2
 8008f42:	b93c      	cbnz	r4, 8008f54 <_calloc_r+0x18>
 8008f44:	4629      	mov	r1, r5
 8008f46:	f7ff fa79 	bl	800843c <_malloc_r>
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	b928      	cbnz	r0, 8008f5a <_calloc_r+0x1e>
 8008f4e:	2600      	movs	r6, #0
 8008f50:	4630      	mov	r0, r6
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	220c      	movs	r2, #12
 8008f56:	6002      	str	r2, [r0, #0]
 8008f58:	e7f9      	b.n	8008f4e <_calloc_r+0x12>
 8008f5a:	462a      	mov	r2, r5
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	f7fe fbbb 	bl	80076d8 <memset>
 8008f62:	e7f5      	b.n	8008f50 <_calloc_r+0x14>

08008f64 <_free_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4605      	mov	r5, r0
 8008f68:	2900      	cmp	r1, #0
 8008f6a:	d041      	beq.n	8008ff0 <_free_r+0x8c>
 8008f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f70:	1f0c      	subs	r4, r1, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	bfb8      	it	lt
 8008f76:	18e4      	addlt	r4, r4, r3
 8008f78:	f7ff fb8c 	bl	8008694 <__malloc_lock>
 8008f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff4 <_free_r+0x90>)
 8008f7e:	6813      	ldr	r3, [r2, #0]
 8008f80:	b933      	cbnz	r3, 8008f90 <_free_r+0x2c>
 8008f82:	6063      	str	r3, [r4, #4]
 8008f84:	6014      	str	r4, [r2, #0]
 8008f86:	4628      	mov	r0, r5
 8008f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f8c:	f7ff bb88 	b.w	80086a0 <__malloc_unlock>
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	d908      	bls.n	8008fa6 <_free_r+0x42>
 8008f94:	6820      	ldr	r0, [r4, #0]
 8008f96:	1821      	adds	r1, r4, r0
 8008f98:	428b      	cmp	r3, r1
 8008f9a:	bf01      	itttt	eq
 8008f9c:	6819      	ldreq	r1, [r3, #0]
 8008f9e:	685b      	ldreq	r3, [r3, #4]
 8008fa0:	1809      	addeq	r1, r1, r0
 8008fa2:	6021      	streq	r1, [r4, #0]
 8008fa4:	e7ed      	b.n	8008f82 <_free_r+0x1e>
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	b10b      	cbz	r3, 8008fb0 <_free_r+0x4c>
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	d9fa      	bls.n	8008fa6 <_free_r+0x42>
 8008fb0:	6811      	ldr	r1, [r2, #0]
 8008fb2:	1850      	adds	r0, r2, r1
 8008fb4:	42a0      	cmp	r0, r4
 8008fb6:	d10b      	bne.n	8008fd0 <_free_r+0x6c>
 8008fb8:	6820      	ldr	r0, [r4, #0]
 8008fba:	4401      	add	r1, r0
 8008fbc:	1850      	adds	r0, r2, r1
 8008fbe:	4283      	cmp	r3, r0
 8008fc0:	6011      	str	r1, [r2, #0]
 8008fc2:	d1e0      	bne.n	8008f86 <_free_r+0x22>
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	6053      	str	r3, [r2, #4]
 8008fca:	4408      	add	r0, r1
 8008fcc:	6010      	str	r0, [r2, #0]
 8008fce:	e7da      	b.n	8008f86 <_free_r+0x22>
 8008fd0:	d902      	bls.n	8008fd8 <_free_r+0x74>
 8008fd2:	230c      	movs	r3, #12
 8008fd4:	602b      	str	r3, [r5, #0]
 8008fd6:	e7d6      	b.n	8008f86 <_free_r+0x22>
 8008fd8:	6820      	ldr	r0, [r4, #0]
 8008fda:	1821      	adds	r1, r4, r0
 8008fdc:	428b      	cmp	r3, r1
 8008fde:	bf04      	itt	eq
 8008fe0:	6819      	ldreq	r1, [r3, #0]
 8008fe2:	685b      	ldreq	r3, [r3, #4]
 8008fe4:	6063      	str	r3, [r4, #4]
 8008fe6:	bf04      	itt	eq
 8008fe8:	1809      	addeq	r1, r1, r0
 8008fea:	6021      	streq	r1, [r4, #0]
 8008fec:	6054      	str	r4, [r2, #4]
 8008fee:	e7ca      	b.n	8008f86 <_free_r+0x22>
 8008ff0:	bd38      	pop	{r3, r4, r5, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20000688 	.word	0x20000688

08008ff8 <__ascii_mbtowc>:
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	b901      	cbnz	r1, 8008ffe <__ascii_mbtowc+0x6>
 8008ffc:	a901      	add	r1, sp, #4
 8008ffe:	b142      	cbz	r2, 8009012 <__ascii_mbtowc+0x1a>
 8009000:	b14b      	cbz	r3, 8009016 <__ascii_mbtowc+0x1e>
 8009002:	7813      	ldrb	r3, [r2, #0]
 8009004:	600b      	str	r3, [r1, #0]
 8009006:	7812      	ldrb	r2, [r2, #0]
 8009008:	1e10      	subs	r0, r2, #0
 800900a:	bf18      	it	ne
 800900c:	2001      	movne	r0, #1
 800900e:	b002      	add	sp, #8
 8009010:	4770      	bx	lr
 8009012:	4610      	mov	r0, r2
 8009014:	e7fb      	b.n	800900e <__ascii_mbtowc+0x16>
 8009016:	f06f 0001 	mvn.w	r0, #1
 800901a:	e7f8      	b.n	800900e <__ascii_mbtowc+0x16>

0800901c <fiprintf>:
 800901c:	b40e      	push	{r1, r2, r3}
 800901e:	b503      	push	{r0, r1, lr}
 8009020:	4601      	mov	r1, r0
 8009022:	ab03      	add	r3, sp, #12
 8009024:	4805      	ldr	r0, [pc, #20]	@ (800903c <fiprintf+0x20>)
 8009026:	f853 2b04 	ldr.w	r2, [r3], #4
 800902a:	6800      	ldr	r0, [r0, #0]
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	f000 f845 	bl	80090bc <_vfiprintf_r>
 8009032:	b002      	add	sp, #8
 8009034:	f85d eb04 	ldr.w	lr, [sp], #4
 8009038:	b003      	add	sp, #12
 800903a:	4770      	bx	lr
 800903c:	20000038 	.word	0x20000038

08009040 <__ascii_wctomb>:
 8009040:	4603      	mov	r3, r0
 8009042:	4608      	mov	r0, r1
 8009044:	b141      	cbz	r1, 8009058 <__ascii_wctomb+0x18>
 8009046:	2aff      	cmp	r2, #255	@ 0xff
 8009048:	d904      	bls.n	8009054 <__ascii_wctomb+0x14>
 800904a:	228a      	movs	r2, #138	@ 0x8a
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009052:	4770      	bx	lr
 8009054:	700a      	strb	r2, [r1, #0]
 8009056:	2001      	movs	r0, #1
 8009058:	4770      	bx	lr

0800905a <abort>:
 800905a:	b508      	push	{r3, lr}
 800905c:	2006      	movs	r0, #6
 800905e:	f000 fa85 	bl	800956c <raise>
 8009062:	2001      	movs	r0, #1
 8009064:	f7f9 fde4 	bl	8002c30 <_exit>

08009068 <__sfputc_r>:
 8009068:	6893      	ldr	r3, [r2, #8]
 800906a:	3b01      	subs	r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	b410      	push	{r4}
 8009070:	6093      	str	r3, [r2, #8]
 8009072:	da08      	bge.n	8009086 <__sfputc_r+0x1e>
 8009074:	6994      	ldr	r4, [r2, #24]
 8009076:	42a3      	cmp	r3, r4
 8009078:	db01      	blt.n	800907e <__sfputc_r+0x16>
 800907a:	290a      	cmp	r1, #10
 800907c:	d103      	bne.n	8009086 <__sfputc_r+0x1e>
 800907e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009082:	f000 b933 	b.w	80092ec <__swbuf_r>
 8009086:	6813      	ldr	r3, [r2, #0]
 8009088:	1c58      	adds	r0, r3, #1
 800908a:	6010      	str	r0, [r2, #0]
 800908c:	7019      	strb	r1, [r3, #0]
 800908e:	4608      	mov	r0, r1
 8009090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009094:	4770      	bx	lr

08009096 <__sfputs_r>:
 8009096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009098:	4606      	mov	r6, r0
 800909a:	460f      	mov	r7, r1
 800909c:	4614      	mov	r4, r2
 800909e:	18d5      	adds	r5, r2, r3
 80090a0:	42ac      	cmp	r4, r5
 80090a2:	d101      	bne.n	80090a8 <__sfputs_r+0x12>
 80090a4:	2000      	movs	r0, #0
 80090a6:	e007      	b.n	80090b8 <__sfputs_r+0x22>
 80090a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ac:	463a      	mov	r2, r7
 80090ae:	4630      	mov	r0, r6
 80090b0:	f7ff ffda 	bl	8009068 <__sfputc_r>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d1f3      	bne.n	80090a0 <__sfputs_r+0xa>
 80090b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090bc <_vfiprintf_r>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	460d      	mov	r5, r1
 80090c2:	b09d      	sub	sp, #116	@ 0x74
 80090c4:	4614      	mov	r4, r2
 80090c6:	4698      	mov	r8, r3
 80090c8:	4606      	mov	r6, r0
 80090ca:	b118      	cbz	r0, 80090d4 <_vfiprintf_r+0x18>
 80090cc:	6a03      	ldr	r3, [r0, #32]
 80090ce:	b90b      	cbnz	r3, 80090d4 <_vfiprintf_r+0x18>
 80090d0:	f7fe facc 	bl	800766c <__sinit>
 80090d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090d6:	07d9      	lsls	r1, r3, #31
 80090d8:	d405      	bmi.n	80090e6 <_vfiprintf_r+0x2a>
 80090da:	89ab      	ldrh	r3, [r5, #12]
 80090dc:	059a      	lsls	r2, r3, #22
 80090de:	d402      	bmi.n	80090e6 <_vfiprintf_r+0x2a>
 80090e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090e2:	f7fe fb30 	bl	8007746 <__retarget_lock_acquire_recursive>
 80090e6:	89ab      	ldrh	r3, [r5, #12]
 80090e8:	071b      	lsls	r3, r3, #28
 80090ea:	d501      	bpl.n	80090f0 <_vfiprintf_r+0x34>
 80090ec:	692b      	ldr	r3, [r5, #16]
 80090ee:	b99b      	cbnz	r3, 8009118 <_vfiprintf_r+0x5c>
 80090f0:	4629      	mov	r1, r5
 80090f2:	4630      	mov	r0, r6
 80090f4:	f000 f938 	bl	8009368 <__swsetup_r>
 80090f8:	b170      	cbz	r0, 8009118 <_vfiprintf_r+0x5c>
 80090fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090fc:	07dc      	lsls	r4, r3, #31
 80090fe:	d504      	bpl.n	800910a <_vfiprintf_r+0x4e>
 8009100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009104:	b01d      	add	sp, #116	@ 0x74
 8009106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910a:	89ab      	ldrh	r3, [r5, #12]
 800910c:	0598      	lsls	r0, r3, #22
 800910e:	d4f7      	bmi.n	8009100 <_vfiprintf_r+0x44>
 8009110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009112:	f7fe fb19 	bl	8007748 <__retarget_lock_release_recursive>
 8009116:	e7f3      	b.n	8009100 <_vfiprintf_r+0x44>
 8009118:	2300      	movs	r3, #0
 800911a:	9309      	str	r3, [sp, #36]	@ 0x24
 800911c:	2320      	movs	r3, #32
 800911e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009122:	f8cd 800c 	str.w	r8, [sp, #12]
 8009126:	2330      	movs	r3, #48	@ 0x30
 8009128:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80092d8 <_vfiprintf_r+0x21c>
 800912c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009130:	f04f 0901 	mov.w	r9, #1
 8009134:	4623      	mov	r3, r4
 8009136:	469a      	mov	sl, r3
 8009138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800913c:	b10a      	cbz	r2, 8009142 <_vfiprintf_r+0x86>
 800913e:	2a25      	cmp	r2, #37	@ 0x25
 8009140:	d1f9      	bne.n	8009136 <_vfiprintf_r+0x7a>
 8009142:	ebba 0b04 	subs.w	fp, sl, r4
 8009146:	d00b      	beq.n	8009160 <_vfiprintf_r+0xa4>
 8009148:	465b      	mov	r3, fp
 800914a:	4622      	mov	r2, r4
 800914c:	4629      	mov	r1, r5
 800914e:	4630      	mov	r0, r6
 8009150:	f7ff ffa1 	bl	8009096 <__sfputs_r>
 8009154:	3001      	adds	r0, #1
 8009156:	f000 80a7 	beq.w	80092a8 <_vfiprintf_r+0x1ec>
 800915a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800915c:	445a      	add	r2, fp
 800915e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009160:	f89a 3000 	ldrb.w	r3, [sl]
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 809f 	beq.w	80092a8 <_vfiprintf_r+0x1ec>
 800916a:	2300      	movs	r3, #0
 800916c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009174:	f10a 0a01 	add.w	sl, sl, #1
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	9307      	str	r3, [sp, #28]
 800917c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009180:	931a      	str	r3, [sp, #104]	@ 0x68
 8009182:	4654      	mov	r4, sl
 8009184:	2205      	movs	r2, #5
 8009186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800918a:	4853      	ldr	r0, [pc, #332]	@ (80092d8 <_vfiprintf_r+0x21c>)
 800918c:	f7f7 f840 	bl	8000210 <memchr>
 8009190:	9a04      	ldr	r2, [sp, #16]
 8009192:	b9d8      	cbnz	r0, 80091cc <_vfiprintf_r+0x110>
 8009194:	06d1      	lsls	r1, r2, #27
 8009196:	bf44      	itt	mi
 8009198:	2320      	movmi	r3, #32
 800919a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800919e:	0713      	lsls	r3, r2, #28
 80091a0:	bf44      	itt	mi
 80091a2:	232b      	movmi	r3, #43	@ 0x2b
 80091a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091a8:	f89a 3000 	ldrb.w	r3, [sl]
 80091ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80091ae:	d015      	beq.n	80091dc <_vfiprintf_r+0x120>
 80091b0:	9a07      	ldr	r2, [sp, #28]
 80091b2:	4654      	mov	r4, sl
 80091b4:	2000      	movs	r0, #0
 80091b6:	f04f 0c0a 	mov.w	ip, #10
 80091ba:	4621      	mov	r1, r4
 80091bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091c0:	3b30      	subs	r3, #48	@ 0x30
 80091c2:	2b09      	cmp	r3, #9
 80091c4:	d94b      	bls.n	800925e <_vfiprintf_r+0x1a2>
 80091c6:	b1b0      	cbz	r0, 80091f6 <_vfiprintf_r+0x13a>
 80091c8:	9207      	str	r2, [sp, #28]
 80091ca:	e014      	b.n	80091f6 <_vfiprintf_r+0x13a>
 80091cc:	eba0 0308 	sub.w	r3, r0, r8
 80091d0:	fa09 f303 	lsl.w	r3, r9, r3
 80091d4:	4313      	orrs	r3, r2
 80091d6:	9304      	str	r3, [sp, #16]
 80091d8:	46a2      	mov	sl, r4
 80091da:	e7d2      	b.n	8009182 <_vfiprintf_r+0xc6>
 80091dc:	9b03      	ldr	r3, [sp, #12]
 80091de:	1d19      	adds	r1, r3, #4
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	9103      	str	r1, [sp, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	bfbb      	ittet	lt
 80091e8:	425b      	neglt	r3, r3
 80091ea:	f042 0202 	orrlt.w	r2, r2, #2
 80091ee:	9307      	strge	r3, [sp, #28]
 80091f0:	9307      	strlt	r3, [sp, #28]
 80091f2:	bfb8      	it	lt
 80091f4:	9204      	strlt	r2, [sp, #16]
 80091f6:	7823      	ldrb	r3, [r4, #0]
 80091f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80091fa:	d10a      	bne.n	8009212 <_vfiprintf_r+0x156>
 80091fc:	7863      	ldrb	r3, [r4, #1]
 80091fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009200:	d132      	bne.n	8009268 <_vfiprintf_r+0x1ac>
 8009202:	9b03      	ldr	r3, [sp, #12]
 8009204:	1d1a      	adds	r2, r3, #4
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	9203      	str	r2, [sp, #12]
 800920a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800920e:	3402      	adds	r4, #2
 8009210:	9305      	str	r3, [sp, #20]
 8009212:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80092e8 <_vfiprintf_r+0x22c>
 8009216:	7821      	ldrb	r1, [r4, #0]
 8009218:	2203      	movs	r2, #3
 800921a:	4650      	mov	r0, sl
 800921c:	f7f6 fff8 	bl	8000210 <memchr>
 8009220:	b138      	cbz	r0, 8009232 <_vfiprintf_r+0x176>
 8009222:	9b04      	ldr	r3, [sp, #16]
 8009224:	eba0 000a 	sub.w	r0, r0, sl
 8009228:	2240      	movs	r2, #64	@ 0x40
 800922a:	4082      	lsls	r2, r0
 800922c:	4313      	orrs	r3, r2
 800922e:	3401      	adds	r4, #1
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009236:	4829      	ldr	r0, [pc, #164]	@ (80092dc <_vfiprintf_r+0x220>)
 8009238:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800923c:	2206      	movs	r2, #6
 800923e:	f7f6 ffe7 	bl	8000210 <memchr>
 8009242:	2800      	cmp	r0, #0
 8009244:	d03f      	beq.n	80092c6 <_vfiprintf_r+0x20a>
 8009246:	4b26      	ldr	r3, [pc, #152]	@ (80092e0 <_vfiprintf_r+0x224>)
 8009248:	bb1b      	cbnz	r3, 8009292 <_vfiprintf_r+0x1d6>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	3307      	adds	r3, #7
 800924e:	f023 0307 	bic.w	r3, r3, #7
 8009252:	3308      	adds	r3, #8
 8009254:	9303      	str	r3, [sp, #12]
 8009256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009258:	443b      	add	r3, r7
 800925a:	9309      	str	r3, [sp, #36]	@ 0x24
 800925c:	e76a      	b.n	8009134 <_vfiprintf_r+0x78>
 800925e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009262:	460c      	mov	r4, r1
 8009264:	2001      	movs	r0, #1
 8009266:	e7a8      	b.n	80091ba <_vfiprintf_r+0xfe>
 8009268:	2300      	movs	r3, #0
 800926a:	3401      	adds	r4, #1
 800926c:	9305      	str	r3, [sp, #20]
 800926e:	4619      	mov	r1, r3
 8009270:	f04f 0c0a 	mov.w	ip, #10
 8009274:	4620      	mov	r0, r4
 8009276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800927a:	3a30      	subs	r2, #48	@ 0x30
 800927c:	2a09      	cmp	r2, #9
 800927e:	d903      	bls.n	8009288 <_vfiprintf_r+0x1cc>
 8009280:	2b00      	cmp	r3, #0
 8009282:	d0c6      	beq.n	8009212 <_vfiprintf_r+0x156>
 8009284:	9105      	str	r1, [sp, #20]
 8009286:	e7c4      	b.n	8009212 <_vfiprintf_r+0x156>
 8009288:	fb0c 2101 	mla	r1, ip, r1, r2
 800928c:	4604      	mov	r4, r0
 800928e:	2301      	movs	r3, #1
 8009290:	e7f0      	b.n	8009274 <_vfiprintf_r+0x1b8>
 8009292:	ab03      	add	r3, sp, #12
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	462a      	mov	r2, r5
 8009298:	4b12      	ldr	r3, [pc, #72]	@ (80092e4 <_vfiprintf_r+0x228>)
 800929a:	a904      	add	r1, sp, #16
 800929c:	4630      	mov	r0, r6
 800929e:	f7fd fda1 	bl	8006de4 <_printf_float>
 80092a2:	4607      	mov	r7, r0
 80092a4:	1c78      	adds	r0, r7, #1
 80092a6:	d1d6      	bne.n	8009256 <_vfiprintf_r+0x19a>
 80092a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092aa:	07d9      	lsls	r1, r3, #31
 80092ac:	d405      	bmi.n	80092ba <_vfiprintf_r+0x1fe>
 80092ae:	89ab      	ldrh	r3, [r5, #12]
 80092b0:	059a      	lsls	r2, r3, #22
 80092b2:	d402      	bmi.n	80092ba <_vfiprintf_r+0x1fe>
 80092b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092b6:	f7fe fa47 	bl	8007748 <__retarget_lock_release_recursive>
 80092ba:	89ab      	ldrh	r3, [r5, #12]
 80092bc:	065b      	lsls	r3, r3, #25
 80092be:	f53f af1f 	bmi.w	8009100 <_vfiprintf_r+0x44>
 80092c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092c4:	e71e      	b.n	8009104 <_vfiprintf_r+0x48>
 80092c6:	ab03      	add	r3, sp, #12
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	462a      	mov	r2, r5
 80092cc:	4b05      	ldr	r3, [pc, #20]	@ (80092e4 <_vfiprintf_r+0x228>)
 80092ce:	a904      	add	r1, sp, #16
 80092d0:	4630      	mov	r0, r6
 80092d2:	f7fe f81f 	bl	8007314 <_printf_i>
 80092d6:	e7e4      	b.n	80092a2 <_vfiprintf_r+0x1e6>
 80092d8:	08009937 	.word	0x08009937
 80092dc:	08009941 	.word	0x08009941
 80092e0:	08006de5 	.word	0x08006de5
 80092e4:	08009097 	.word	0x08009097
 80092e8:	0800993d 	.word	0x0800993d

080092ec <__swbuf_r>:
 80092ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ee:	460e      	mov	r6, r1
 80092f0:	4614      	mov	r4, r2
 80092f2:	4605      	mov	r5, r0
 80092f4:	b118      	cbz	r0, 80092fe <__swbuf_r+0x12>
 80092f6:	6a03      	ldr	r3, [r0, #32]
 80092f8:	b90b      	cbnz	r3, 80092fe <__swbuf_r+0x12>
 80092fa:	f7fe f9b7 	bl	800766c <__sinit>
 80092fe:	69a3      	ldr	r3, [r4, #24]
 8009300:	60a3      	str	r3, [r4, #8]
 8009302:	89a3      	ldrh	r3, [r4, #12]
 8009304:	071a      	lsls	r2, r3, #28
 8009306:	d501      	bpl.n	800930c <__swbuf_r+0x20>
 8009308:	6923      	ldr	r3, [r4, #16]
 800930a:	b943      	cbnz	r3, 800931e <__swbuf_r+0x32>
 800930c:	4621      	mov	r1, r4
 800930e:	4628      	mov	r0, r5
 8009310:	f000 f82a 	bl	8009368 <__swsetup_r>
 8009314:	b118      	cbz	r0, 800931e <__swbuf_r+0x32>
 8009316:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800931a:	4638      	mov	r0, r7
 800931c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	6922      	ldr	r2, [r4, #16]
 8009322:	1a98      	subs	r0, r3, r2
 8009324:	6963      	ldr	r3, [r4, #20]
 8009326:	b2f6      	uxtb	r6, r6
 8009328:	4283      	cmp	r3, r0
 800932a:	4637      	mov	r7, r6
 800932c:	dc05      	bgt.n	800933a <__swbuf_r+0x4e>
 800932e:	4621      	mov	r1, r4
 8009330:	4628      	mov	r0, r5
 8009332:	f7ff f987 	bl	8008644 <_fflush_r>
 8009336:	2800      	cmp	r0, #0
 8009338:	d1ed      	bne.n	8009316 <__swbuf_r+0x2a>
 800933a:	68a3      	ldr	r3, [r4, #8]
 800933c:	3b01      	subs	r3, #1
 800933e:	60a3      	str	r3, [r4, #8]
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	6022      	str	r2, [r4, #0]
 8009346:	701e      	strb	r6, [r3, #0]
 8009348:	6962      	ldr	r2, [r4, #20]
 800934a:	1c43      	adds	r3, r0, #1
 800934c:	429a      	cmp	r2, r3
 800934e:	d004      	beq.n	800935a <__swbuf_r+0x6e>
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	07db      	lsls	r3, r3, #31
 8009354:	d5e1      	bpl.n	800931a <__swbuf_r+0x2e>
 8009356:	2e0a      	cmp	r6, #10
 8009358:	d1df      	bne.n	800931a <__swbuf_r+0x2e>
 800935a:	4621      	mov	r1, r4
 800935c:	4628      	mov	r0, r5
 800935e:	f7ff f971 	bl	8008644 <_fflush_r>
 8009362:	2800      	cmp	r0, #0
 8009364:	d0d9      	beq.n	800931a <__swbuf_r+0x2e>
 8009366:	e7d6      	b.n	8009316 <__swbuf_r+0x2a>

08009368 <__swsetup_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4b29      	ldr	r3, [pc, #164]	@ (8009410 <__swsetup_r+0xa8>)
 800936c:	4605      	mov	r5, r0
 800936e:	6818      	ldr	r0, [r3, #0]
 8009370:	460c      	mov	r4, r1
 8009372:	b118      	cbz	r0, 800937c <__swsetup_r+0x14>
 8009374:	6a03      	ldr	r3, [r0, #32]
 8009376:	b90b      	cbnz	r3, 800937c <__swsetup_r+0x14>
 8009378:	f7fe f978 	bl	800766c <__sinit>
 800937c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009380:	0719      	lsls	r1, r3, #28
 8009382:	d422      	bmi.n	80093ca <__swsetup_r+0x62>
 8009384:	06da      	lsls	r2, r3, #27
 8009386:	d407      	bmi.n	8009398 <__swsetup_r+0x30>
 8009388:	2209      	movs	r2, #9
 800938a:	602a      	str	r2, [r5, #0]
 800938c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009390:	81a3      	strh	r3, [r4, #12]
 8009392:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009396:	e033      	b.n	8009400 <__swsetup_r+0x98>
 8009398:	0758      	lsls	r0, r3, #29
 800939a:	d512      	bpl.n	80093c2 <__swsetup_r+0x5a>
 800939c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800939e:	b141      	cbz	r1, 80093b2 <__swsetup_r+0x4a>
 80093a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093a4:	4299      	cmp	r1, r3
 80093a6:	d002      	beq.n	80093ae <__swsetup_r+0x46>
 80093a8:	4628      	mov	r0, r5
 80093aa:	f7ff fddb 	bl	8008f64 <_free_r>
 80093ae:	2300      	movs	r3, #0
 80093b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	2300      	movs	r3, #0
 80093bc:	6063      	str	r3, [r4, #4]
 80093be:	6923      	ldr	r3, [r4, #16]
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	f043 0308 	orr.w	r3, r3, #8
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	6923      	ldr	r3, [r4, #16]
 80093cc:	b94b      	cbnz	r3, 80093e2 <__swsetup_r+0x7a>
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80093d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093d8:	d003      	beq.n	80093e2 <__swsetup_r+0x7a>
 80093da:	4621      	mov	r1, r4
 80093dc:	4628      	mov	r0, r5
 80093de:	f000 f83f 	bl	8009460 <__smakebuf_r>
 80093e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e6:	f013 0201 	ands.w	r2, r3, #1
 80093ea:	d00a      	beq.n	8009402 <__swsetup_r+0x9a>
 80093ec:	2200      	movs	r2, #0
 80093ee:	60a2      	str	r2, [r4, #8]
 80093f0:	6962      	ldr	r2, [r4, #20]
 80093f2:	4252      	negs	r2, r2
 80093f4:	61a2      	str	r2, [r4, #24]
 80093f6:	6922      	ldr	r2, [r4, #16]
 80093f8:	b942      	cbnz	r2, 800940c <__swsetup_r+0xa4>
 80093fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093fe:	d1c5      	bne.n	800938c <__swsetup_r+0x24>
 8009400:	bd38      	pop	{r3, r4, r5, pc}
 8009402:	0799      	lsls	r1, r3, #30
 8009404:	bf58      	it	pl
 8009406:	6962      	ldrpl	r2, [r4, #20]
 8009408:	60a2      	str	r2, [r4, #8]
 800940a:	e7f4      	b.n	80093f6 <__swsetup_r+0x8e>
 800940c:	2000      	movs	r0, #0
 800940e:	e7f7      	b.n	8009400 <__swsetup_r+0x98>
 8009410:	20000038 	.word	0x20000038

08009414 <__swhatbuf_r>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	460c      	mov	r4, r1
 8009418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800941c:	2900      	cmp	r1, #0
 800941e:	b096      	sub	sp, #88	@ 0x58
 8009420:	4615      	mov	r5, r2
 8009422:	461e      	mov	r6, r3
 8009424:	da0d      	bge.n	8009442 <__swhatbuf_r+0x2e>
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800942c:	f04f 0100 	mov.w	r1, #0
 8009430:	bf14      	ite	ne
 8009432:	2340      	movne	r3, #64	@ 0x40
 8009434:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009438:	2000      	movs	r0, #0
 800943a:	6031      	str	r1, [r6, #0]
 800943c:	602b      	str	r3, [r5, #0]
 800943e:	b016      	add	sp, #88	@ 0x58
 8009440:	bd70      	pop	{r4, r5, r6, pc}
 8009442:	466a      	mov	r2, sp
 8009444:	f000 f848 	bl	80094d8 <_fstat_r>
 8009448:	2800      	cmp	r0, #0
 800944a:	dbec      	blt.n	8009426 <__swhatbuf_r+0x12>
 800944c:	9901      	ldr	r1, [sp, #4]
 800944e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009452:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009456:	4259      	negs	r1, r3
 8009458:	4159      	adcs	r1, r3
 800945a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800945e:	e7eb      	b.n	8009438 <__swhatbuf_r+0x24>

08009460 <__smakebuf_r>:
 8009460:	898b      	ldrh	r3, [r1, #12]
 8009462:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009464:	079d      	lsls	r5, r3, #30
 8009466:	4606      	mov	r6, r0
 8009468:	460c      	mov	r4, r1
 800946a:	d507      	bpl.n	800947c <__smakebuf_r+0x1c>
 800946c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	6123      	str	r3, [r4, #16]
 8009474:	2301      	movs	r3, #1
 8009476:	6163      	str	r3, [r4, #20]
 8009478:	b003      	add	sp, #12
 800947a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800947c:	ab01      	add	r3, sp, #4
 800947e:	466a      	mov	r2, sp
 8009480:	f7ff ffc8 	bl	8009414 <__swhatbuf_r>
 8009484:	9f00      	ldr	r7, [sp, #0]
 8009486:	4605      	mov	r5, r0
 8009488:	4639      	mov	r1, r7
 800948a:	4630      	mov	r0, r6
 800948c:	f7fe ffd6 	bl	800843c <_malloc_r>
 8009490:	b948      	cbnz	r0, 80094a6 <__smakebuf_r+0x46>
 8009492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009496:	059a      	lsls	r2, r3, #22
 8009498:	d4ee      	bmi.n	8009478 <__smakebuf_r+0x18>
 800949a:	f023 0303 	bic.w	r3, r3, #3
 800949e:	f043 0302 	orr.w	r3, r3, #2
 80094a2:	81a3      	strh	r3, [r4, #12]
 80094a4:	e7e2      	b.n	800946c <__smakebuf_r+0xc>
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	6020      	str	r0, [r4, #0]
 80094aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ae:	81a3      	strh	r3, [r4, #12]
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094b6:	b15b      	cbz	r3, 80094d0 <__smakebuf_r+0x70>
 80094b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094bc:	4630      	mov	r0, r6
 80094be:	f000 f81d 	bl	80094fc <_isatty_r>
 80094c2:	b128      	cbz	r0, 80094d0 <__smakebuf_r+0x70>
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	f023 0303 	bic.w	r3, r3, #3
 80094ca:	f043 0301 	orr.w	r3, r3, #1
 80094ce:	81a3      	strh	r3, [r4, #12]
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	431d      	orrs	r5, r3
 80094d4:	81a5      	strh	r5, [r4, #12]
 80094d6:	e7cf      	b.n	8009478 <__smakebuf_r+0x18>

080094d8 <_fstat_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4d07      	ldr	r5, [pc, #28]	@ (80094f8 <_fstat_r+0x20>)
 80094dc:	2300      	movs	r3, #0
 80094de:	4604      	mov	r4, r0
 80094e0:	4608      	mov	r0, r1
 80094e2:	4611      	mov	r1, r2
 80094e4:	602b      	str	r3, [r5, #0]
 80094e6:	f7f9 fbf3 	bl	8002cd0 <_fstat>
 80094ea:	1c43      	adds	r3, r0, #1
 80094ec:	d102      	bne.n	80094f4 <_fstat_r+0x1c>
 80094ee:	682b      	ldr	r3, [r5, #0]
 80094f0:	b103      	cbz	r3, 80094f4 <_fstat_r+0x1c>
 80094f2:	6023      	str	r3, [r4, #0]
 80094f4:	bd38      	pop	{r3, r4, r5, pc}
 80094f6:	bf00      	nop
 80094f8:	2000068c 	.word	0x2000068c

080094fc <_isatty_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d06      	ldr	r5, [pc, #24]	@ (8009518 <_isatty_r+0x1c>)
 8009500:	2300      	movs	r3, #0
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	602b      	str	r3, [r5, #0]
 8009508:	f7f9 fbf2 	bl	8002cf0 <_isatty>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	d102      	bne.n	8009516 <_isatty_r+0x1a>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	b103      	cbz	r3, 8009516 <_isatty_r+0x1a>
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	2000068c 	.word	0x2000068c

0800951c <_raise_r>:
 800951c:	291f      	cmp	r1, #31
 800951e:	b538      	push	{r3, r4, r5, lr}
 8009520:	4605      	mov	r5, r0
 8009522:	460c      	mov	r4, r1
 8009524:	d904      	bls.n	8009530 <_raise_r+0x14>
 8009526:	2316      	movs	r3, #22
 8009528:	6003      	str	r3, [r0, #0]
 800952a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009532:	b112      	cbz	r2, 800953a <_raise_r+0x1e>
 8009534:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009538:	b94b      	cbnz	r3, 800954e <_raise_r+0x32>
 800953a:	4628      	mov	r0, r5
 800953c:	f000 f830 	bl	80095a0 <_getpid_r>
 8009540:	4622      	mov	r2, r4
 8009542:	4601      	mov	r1, r0
 8009544:	4628      	mov	r0, r5
 8009546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800954a:	f000 b817 	b.w	800957c <_kill_r>
 800954e:	2b01      	cmp	r3, #1
 8009550:	d00a      	beq.n	8009568 <_raise_r+0x4c>
 8009552:	1c59      	adds	r1, r3, #1
 8009554:	d103      	bne.n	800955e <_raise_r+0x42>
 8009556:	2316      	movs	r3, #22
 8009558:	6003      	str	r3, [r0, #0]
 800955a:	2001      	movs	r0, #1
 800955c:	e7e7      	b.n	800952e <_raise_r+0x12>
 800955e:	2100      	movs	r1, #0
 8009560:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009564:	4620      	mov	r0, r4
 8009566:	4798      	blx	r3
 8009568:	2000      	movs	r0, #0
 800956a:	e7e0      	b.n	800952e <_raise_r+0x12>

0800956c <raise>:
 800956c:	4b02      	ldr	r3, [pc, #8]	@ (8009578 <raise+0xc>)
 800956e:	4601      	mov	r1, r0
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	f7ff bfd3 	b.w	800951c <_raise_r>
 8009576:	bf00      	nop
 8009578:	20000038 	.word	0x20000038

0800957c <_kill_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d07      	ldr	r5, [pc, #28]	@ (800959c <_kill_r+0x20>)
 8009580:	2300      	movs	r3, #0
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	4611      	mov	r1, r2
 8009588:	602b      	str	r3, [r5, #0]
 800958a:	f7f9 fb41 	bl	8002c10 <_kill>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	d102      	bne.n	8009598 <_kill_r+0x1c>
 8009592:	682b      	ldr	r3, [r5, #0]
 8009594:	b103      	cbz	r3, 8009598 <_kill_r+0x1c>
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	bd38      	pop	{r3, r4, r5, pc}
 800959a:	bf00      	nop
 800959c:	2000068c 	.word	0x2000068c

080095a0 <_getpid_r>:
 80095a0:	f7f9 bb2e 	b.w	8002c00 <_getpid>

080095a4 <_init>:
 80095a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a6:	bf00      	nop
 80095a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095aa:	bc08      	pop	{r3}
 80095ac:	469e      	mov	lr, r3
 80095ae:	4770      	bx	lr

080095b0 <_fini>:
 80095b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b2:	bf00      	nop
 80095b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b6:	bc08      	pop	{r3}
 80095b8:	469e      	mov	lr, r3
 80095ba:	4770      	bx	lr
