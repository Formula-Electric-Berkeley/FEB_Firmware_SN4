
PCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000851c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  080086f0  080086f0  000096f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bec  08008bec  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008bec  08008bec  00009bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bf4  08008bf4  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf4  08008bf4  00009bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bf8  08008bf8  00009bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008bfc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001d4  08008dd0  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08008dd0  0000a4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013870  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034b8  00000000  00000000  0001da74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00020f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0a  00000000  00000000  00021ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244a8  00000000  00000000  00022ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001663e  00000000  00000000  00046f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df99b  00000000  00000000  0005d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cf5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050ec  00000000  00000000  0013cfa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080086d4 	.word	0x080086d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080086d4 	.word	0x080086d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <FEB_CAN_BMS_Filter_Config>:



// ***** CAN FUNCTIONS ****

uint8_t FEB_CAN_BMS_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08e      	sub	sp, #56	@ 0x38
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	70bb      	strb	r3, [r7, #2]
	uint16_t ids[] = {FEB_CAN_BMS_STATE_FRAME_ID,FEB_CAN_BMS_ACCUMULATOR_TEMPERATURE_FRAME_ID};
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000fc8:	2303      	movs	r3, #3
 8000fca:	867b      	strh	r3, [r7, #50]	@ 0x32

	for (uint8_t i = 0; i < 1; i++) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000fd2:	e029      	b.n	8001028 <FEB_CAN_BMS_Filter_Config+0x74>
		CAN_FilterTypeDef filter_config;

	    // Standard CAN - 2.0A - 11 bit
	    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
		filter_config.FilterBank = filter_bank;
 8000fd8:	78bb      	ldrb	r3, [r7, #2]
 8000fda:	61fb      	str	r3, [r7, #28]
		filter_config.FilterFIFOAssignment = FIFO_assignment;
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = ids[i] << 5;
 8000fe0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	3338      	adds	r3, #56	@ 0x38
 8000fe8:	443b      	add	r3, r7
 8000fea:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8000fee:	015b      	lsls	r3, r3, #5
 8000ff0:	60bb      	str	r3, [r7, #8]
		filter_config.FilterIdLow = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
		filter_config.FilterMaskIdHigh = 0xFFE0;
 8000ff6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ffa:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdLow = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001004:	2301      	movs	r3, #1
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
		filter_config.SlaveStartFilterBank = 27;
 8001008:	231b      	movs	r3, #27
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    filter_bank++;
 800100c:	78bb      	ldrb	r3, [r7, #2]
 800100e:	3301      	adds	r3, #1
 8001010:	70bb      	strb	r3, [r7, #2]

		if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	4619      	mov	r1, r3
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f002 f927 	bl	800326c <HAL_CAN_ConfigFilter>
	for (uint8_t i = 0; i < 1; i++) {
 800101e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001022:	3301      	adds	r3, #1
 8001024:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001028:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0d1      	beq.n	8000fd4 <FEB_CAN_BMS_Filter_Config+0x20>
			//Code Error - shutdown
		}
	}

	return filter_bank;
 8001030:	78bb      	ldrb	r3, [r7, #2]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3738      	adds	r7, #56	@ 0x38
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <FEB_CAN_BMS_Store_Msg>:

void FEB_CAN_BMS_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t *RxData) {
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
    switch (pHeader -> StdId){
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d011      	beq.n	8001072 <FEB_CAN_BMS_Store_Msg+0x36>
 800104e:	2b03      	cmp	r3, #3
 8001050:	d114      	bne.n	800107c <FEB_CAN_BMS_Store_Msg+0x40>
        case FEB_CAN_BMS_ACCUMULATOR_TEMPERATURE_FRAME_ID :
        	BMS_MESSAGE.temp = RxData[2] << 8 | RxData[3];
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	3302      	adds	r3, #2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b21b      	sxth	r3, r3
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3303      	adds	r3, #3
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <FEB_CAN_BMS_Store_Msg+0x4c>)
 800106e:	801a      	strh	r2, [r3, #0]
            break;
 8001070:	e004      	b.n	800107c <FEB_CAN_BMS_Store_Msg+0x40>

        case FEB_CAN_BMS_STATE_FRAME_ID:
            BMS_MESSAGE.status = RxData[0];
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <FEB_CAN_BMS_Store_Msg+0x4c>)
 8001078:	709a      	strb	r2, [r3, #2]
            break;
 800107a:	bf00      	nop
    }
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	200001f0 	.word	0x200001f0

0800108c <FEB_CAN_BMS_getState>:

FEB_SM_ST_t FEB_CAN_BMS_getState(){
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
	return BMS_MESSAGE.status;
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <FEB_CAN_BMS_getState+0x14>)
 8001092:	789b      	ldrb	r3, [r3, #2]

}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	200001f0 	.word	0x200001f0

080010a4 <FEB_CAN_ICS_Filter>:
static bool previous_button_state = false;
static bool READY_TO_DRIVE = false;

// **************************************** Functions ****************************************

uint8_t FEB_CAN_ICS_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08e      	sub	sp, #56	@ 0x38
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
 80010b0:	4613      	mov	r3, r2
 80010b2:	70bb      	strb	r3, [r7, #2]
    // For multiple filters, create array of filter IDs and loop over IDs.

	uint16_t ids[] = {FEB_CAN_DASH_MESSAGE_FRAME_ID};
 80010b4:	2306      	movs	r3, #6
 80010b6:	86bb      	strh	r3, [r7, #52]	@ 0x34

	for (uint8_t i = 0; i < 1; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80010be:	e029      	b.n	8001114 <FEB_CAN_ICS_Filter+0x70>
		CAN_FilterTypeDef filter_config;

	    // Standard CAN - 2.0A - 11 bit
	    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		filter_config.FilterBank = filter_bank;
 80010c4:	78bb      	ldrb	r3, [r7, #2]
 80010c6:	623b      	str	r3, [r7, #32]
		filter_config.FilterFIFOAssignment = FIFO_assignment;
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	61fb      	str	r3, [r7, #28]
		filter_config.FilterIdHigh = ids[i] << 5;
 80010cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	3338      	adds	r3, #56	@ 0x38
 80010d4:	443b      	add	r3, r7
 80010d6:	f833 3c04 	ldrh.w	r3, [r3, #-4]
 80010da:	015b      	lsls	r3, r3, #5
 80010dc:	60fb      	str	r3, [r7, #12]
		filter_config.FilterIdLow = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdHigh = 0xFFE0;
 80010e2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010e6:	617b      	str	r3, [r7, #20]
		filter_config.FilterMaskIdLow = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80010f0:	2301      	movs	r3, #1
 80010f2:	62bb      	str	r3, [r7, #40]	@ 0x28
		filter_config.SlaveStartFilterBank = 27;
 80010f4:	231b      	movs	r3, #27
 80010f6:	633b      	str	r3, [r7, #48]	@ 0x30
	    filter_bank++;
 80010f8:	78bb      	ldrb	r3, [r7, #2]
 80010fa:	3301      	adds	r3, #1
 80010fc:	70bb      	strb	r3, [r7, #2]

		if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f002 f8b1 	bl	800326c <HAL_CAN_ConfigFilter>
	for (uint8_t i = 0; i < 1; i++) {
 800110a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800110e:	3301      	adds	r3, #1
 8001110:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001114:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0d1      	beq.n	80010c0 <FEB_CAN_ICS_Filter+0x1c>
			// Shutdown
		}
	}

	return filter_bank;
 800111c:	78bb      	ldrb	r3, [r7, #2]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3738      	adds	r7, #56	@ 0x38
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <FEB_CAN_ICS_Store_Msg>:

void FEB_CAN_ICS_Store_Msg(CAN_RxHeaderTypeDef *rx_header, uint8_t rx_data[]) {
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	switch(rx_header->StdId) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b06      	cmp	r3, #6
 8001138:	d10d      	bne.n	8001156 <FEB_CAN_ICS_Store_Msg+0x2e>
		case FEB_CAN_DASH_MESSAGE_FRAME_ID:
//				READY_TO_DRIVE = ((rx_data[0] | 0b11111101) == 0b11111111);
//				break;

			bool current_button_state = ((rx_data[0] | 0b11111101) == 0b11111111);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	f063 0302 	orn	r3, r3, #2
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2bff      	cmp	r3, #255	@ 0xff
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]

			READY_TO_DRIVE = current_button_state;
 800114e:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <FEB_CAN_ICS_Store_Msg+0x3c>)
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	7013      	strb	r3, [r2, #0]
//			else if (!READY_TO_DRIVE && !previous_button_state && current_button_state) {
//				READY_TO_DRIVE = true;   // enter ready to drive state
//			}
//
//			previous_button_state = current_button_state;
			break;
 8001154:	bf00      	nop
	}
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200001f4 	.word	0x200001f4

08001168 <FEB_Ready_To_Drive>:

bool FEB_Ready_To_Drive() {
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
	return READY_TO_DRIVE;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <FEB_Ready_To_Drive+0x14>)
 800116e:	781b      	ldrb	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200001f4 	.word	0x200001f4

08001180 <FEB_CAN_RMS_Setup>:

// ********************************** Functions **********************************

// ***** SET UP ****

void FEB_CAN_RMS_Setup(void){
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	 RMSControl.enabled = 0;
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <FEB_CAN_RMS_Setup+0x1c>)
 8001186:	2200      	movs	r2, #0
 8001188:	709a      	strb	r2, [r3, #2]
	 RMSControl.torque= 0.0;
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <FEB_CAN_RMS_Setup+0x1c>)
 800118c:	2200      	movs	r2, #0
 800118e:	801a      	strh	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	200001f8 	.word	0x200001f8

080011a0 <FEB_CAN_RMS_Process>:

void FEB_CAN_RMS_Process(void){
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	if (!RMSControl.enabled){
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <FEB_CAN_RMS_Process+0x1c>)
 80011a6:	789b      	ldrb	r3, [r3, #2]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <FEB_CAN_RMS_Process+0x12>
//		FEB_CAN_RMS_Init();
		RMSControl.enabled = 1;
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <FEB_CAN_RMS_Process+0x1c>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	709a      	strb	r2, [r3, #2]
	}
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	200001f8 	.word	0x200001f8

080011c0 <FEB_CAN_RMS_Disable>:

void FEB_CAN_RMS_Disable(void){
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	RMSControl.enabled = 0;
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <FEB_CAN_RMS_Disable+0x14>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	709a      	strb	r2, [r3, #2]
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	200001f8 	.word	0x200001f8

080011d8 <FEB_get_peak_current_delimiter>:
// This means we will assume the pack resistance is about 1 Ohm
// Note this will likely be steeper as we approach lower SOC, but these cell dynamics are hopefully
// negligible due to the heavy current limiting and the ohmic losses of the accumulator
// Linear interpolation between (460V, 60/60A) and (410V, 10/60A), where PEAK_CURRENT is 60A
float FEB_get_peak_current_delimiter()
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
	float accumulator_voltage = (RMS_MESSAGE.HV_Bus_Voltage-50.0) / 10.0;
 80011de:	4b38      	ldr	r3, [pc, #224]	@ (80012c0 <FEB_get_peak_current_delimiter+0xe8>)
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9bd 	bl	8000564 <__aeabi_i2d>
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	4b35      	ldr	r3, [pc, #212]	@ (80012c4 <FEB_get_peak_current_delimiter+0xec>)
 80011f0:	f7ff f86a 	bl	80002c8 <__aeabi_dsub>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <FEB_get_peak_current_delimiter+0xf0>)
 8001202:	f7ff fb43 	bl	800088c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fceb 	bl	8000be8 <__aeabi_d2f>
 8001212:	4603      	mov	r3, r0
 8001214:	617b      	str	r3, [r7, #20]
	float estimated_voltage_drop_at_peak = PEAK_CURRENT;
 8001216:	4b2d      	ldr	r3, [pc, #180]	@ (80012cc <FEB_get_peak_current_delimiter+0xf4>)
 8001218:	613b      	str	r3, [r7, #16]
	float start_derating_voltage = 400.0 + PEAK_CURRENT; // Assume R_acc = 1ohm
 800121a:	4b2d      	ldr	r3, [pc, #180]	@ (80012d0 <FEB_get_peak_current_delimiter+0xf8>)
 800121c:	60fb      	str	r3, [r7, #12]
	// Note: Comments are based on start_derating_voltage = 460V and PEAK_CURRENT = 60

	// Saturate outside of 460 and 410
	if (accumulator_voltage > start_derating_voltage)
 800121e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001222:	edd7 7a03 	vldr	s15, [r7, #12]
 8001226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	dd02      	ble.n	8001236 <FEB_get_peak_current_delimiter+0x5e>
	{
		return 1;
 8001230:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001234:	e034      	b.n	80012a0 <FEB_get_peak_current_delimiter+0xc8>
	}
	if (accumulator_voltage <= 410)
 8001236:	edd7 7a05 	vldr	s15, [r7, #20]
 800123a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80012d4 <FEB_get_peak_current_delimiter+0xfc>
 800123e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	d801      	bhi.n	800124c <FEB_get_peak_current_delimiter+0x74>
	{
		return (10.0 / PEAK_CURRENT); // limit to only 10A 
 8001248:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <FEB_get_peak_current_delimiter+0x100>)
 800124a:	e029      	b.n	80012a0 <FEB_get_peak_current_delimiter+0xc8>

	//   x0    y0            x1    y1
	// (460V, 60/60A) and (410V, 10/60A)

	//      m   = (        y_1           -              y_0)              / (x_1 -          x_0)
	float slope = ((10.0 / PEAK_CURRENT) - (PEAK_CURRENT / PEAK_CURRENT)) / (410.0 - (start_derating_voltage));
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff f99b 	bl	8000588 <__aeabi_f2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	a116      	add	r1, pc, #88	@ (adr r1, 80012b0 <FEB_get_peak_current_delimiter+0xd8>)
 8001258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800125c:	f7ff f834 	bl	80002c8 <__aeabi_dsub>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	a114      	add	r1, pc, #80	@ (adr r1, 80012b8 <FEB_get_peak_current_delimiter+0xe0>)
 8001266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800126a:	f7ff fb0f 	bl	800088c <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fcb7 	bl	8000be8 <__aeabi_d2f>
 800127a:	4603      	mov	r3, r0
 800127c:	60bb      	str	r3, [r7, #8]
	//      y     =   m     (       x            -          x_0          ) + y_0
	float derater = slope * (accumulator_voltage - start_derating_voltage) + 1.0;
 800127e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001282:	edd7 7a03 	vldr	s15, [r7, #12]
 8001286:	ee37 7a67 	vsub.f32	s14, s14, s15
 800128a:	edd7 7a02 	vldr	s15, [r7, #8]
 800128e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001292:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800129a:	edc7 7a01 	vstr	s15, [r7, #4]

	return derater;   
 800129e:	687b      	ldr	r3, [r7, #4]
}
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eeb0 0a67 	vmov.f32	s0, s15
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	00000000 	.word	0x00000000
 80012b4:	4079a000 	.word	0x4079a000
 80012b8:	89d89d8a 	.word	0x89d89d8a
 80012bc:	bfe9d89d 	.word	0xbfe9d89d
 80012c0:	200001fc 	.word	0x200001fc
 80012c4:	40490000 	.word	0x40490000
 80012c8:	40240000 	.word	0x40240000
 80012cc:	42500000 	.word	0x42500000
 80012d0:	43e20000 	.word	0x43e20000
 80012d4:	43cd0000 	.word	0x43cd0000
 80012d8:	3e44ec4f 	.word	0x3e44ec4f
 80012dc:	00000000 	.word	0x00000000

080012e0 <FEB_CAN_RMS_getMaxTorque>:

float FEB_CAN_RMS_getMaxTorque(void){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
	// float accumulator_voltage = min(INIT_VOLTAGE, (RMS_MESSAGE.HV_Bus_Voltage-50) / 10); // TODO: consider reading from IVT
	float motor_speed = RMS_MESSAGE.Motor_Speed * RPM_TO_RAD_S;
 80012e6:	4b30      	ldr	r3, [pc, #192]	@ (80013a8 <FEB_CAN_RMS_getMaxTorque+0xc8>)
 80012e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f939 	bl	8000564 <__aeabi_i2d>
 80012f2:	a32b      	add	r3, pc, #172	@ (adr r3, 80013a0 <FEB_CAN_RMS_getMaxTorque+0xc0>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7ff f99e 	bl	8000638 <__aeabi_dmul>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fc70 	bl	8000be8 <__aeabi_d2f>
 8001308:	4603      	mov	r3, r0
 800130a:	60fb      	str	r3, [r7, #12]
	float peak_current_limited = PEAK_CURRENT * FEB_get_peak_current_delimiter();
 800130c:	f7ff ff64 	bl	80011d8 <FEB_get_peak_current_delimiter>
 8001310:	ee10 3a10 	vmov	r3, s0
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f937 	bl	8000588 <__aeabi_f2d>
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <FEB_CAN_RMS_getMaxTorque+0xcc>)
 8001320:	f7ff f98a 	bl	8000638 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fc5c 	bl	8000be8 <__aeabi_d2f>
 8001330:	4603      	mov	r3, r0
 8001332:	60bb      	str	r3, [r7, #8]
	float power_capped = peak_current_limited * 400.0; // Cap power to 24kW (i.e. our min voltage)
 8001334:	edd7 7a02 	vldr	s15, [r7, #8]
 8001338:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80013b0 <FEB_CAN_RMS_getMaxTorque+0xd0>
 800133c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001340:	edc7 7a01 	vstr	s15, [r7, #4]
 	// If speed is less than 15, we should command max torque
  	// This catches divide by 0 errors and also negative speeds (which may create very high negative torque values)
	if (motor_speed < 15) {
 8001344:	edd7 7a03 	vldr	s15, [r7, #12]
 8001348:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800134c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001354:	d501      	bpl.n	800135a <FEB_CAN_RMS_getMaxTorque+0x7a>
		return MAX_TORQUE;
 8001356:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <FEB_CAN_RMS_getMaxTorque+0xd4>)
 8001358:	e018      	b.n	800138c <FEB_CAN_RMS_getMaxTorque+0xac>
	}
	float maxTorque = min(MAX_TORQUE, (power_capped) / motor_speed);
 800135a:	edd7 6a01 	vldr	s13, [r7, #4]
 800135e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001366:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80013b8 <FEB_CAN_RMS_getMaxTorque+0xd8>
 800136a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	dd02      	ble.n	800137a <FEB_CAN_RMS_getMaxTorque+0x9a>
 8001374:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80013b8 <FEB_CAN_RMS_getMaxTorque+0xd8>
 8001378:	e005      	b.n	8001386 <FEB_CAN_RMS_getMaxTorque+0xa6>
 800137a:	edd7 6a01 	vldr	s13, [r7, #4]
 800137e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001386:	edc7 7a00 	vstr	s15, [r7]
	return maxTorque;
 800138a:	683b      	ldr	r3, [r7, #0]
}
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb0 0a67 	vmov.f32	s0, s15
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	f3af 8000 	nop.w
 80013a0:	0f3cb3e5 	.word	0x0f3cb3e5
 80013a4:	3fbaceee 	.word	0x3fbaceee
 80013a8:	200001fc 	.word	0x200001fc
 80013ac:	404a0000 	.word	0x404a0000
 80013b0:	43c80000 	.word	0x43c80000
 80013b4:	43660000 	.word	0x43660000
 80013b8:	43660000 	.word	0x43660000

080013bc <FEB_CAN_RMS_Torque>:

void FEB_CAN_RMS_Torque(void){
 80013bc:	b580      	push	{r7, lr}
 80013be:	ed2d 8b02 	vpush	{d8}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
	FEB_SM_ST_t current_BMS_state = FEB_CAN_BMS_getState(); // TODO: FOR ALEX
 80013c6:	f7ff fe61 	bl	800108c <FEB_CAN_BMS_getState>
 80013ca:	4603      	mov	r3, r0
 80013cc:	73fb      	strb	r3, [r7, #15]
	float accPos = FEB_Normalized_Acc_Pedals();
 80013ce:	f000 f9f3 	bl	80017b8 <FEB_Normalized_Acc_Pedals>
 80013d2:	ed87 0a02 	vstr	s0, [r7, #8]
	float brkPos = FEB_Normalized_getBrake();
 80013d6:	f000 fb0b 	bl	80019f0 <FEB_Normalized_getBrake>
 80013da:	ed87 0a01 	vstr	s0, [r7, #4]
//	    {
//	        // No braking detected, but driving not allowed by BMS state
//	        RMSControl.torque = 0;
//	    }
//	}
	RMSControl.torque = 10 * accPos * FEB_CAN_RMS_getMaxTorque(); // temp
 80013de:	edd7 7a02 	vldr	s15, [r7, #8]
 80013e2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013e6:	ee27 8a87 	vmul.f32	s16, s15, s14
 80013ea:	f7ff ff79 	bl	80012e0 <FEB_CAN_RMS_getMaxTorque>
 80013ee:	eef0 7a40 	vmov.f32	s15, s0
 80013f2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80013f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fa:	ee17 3a90 	vmov	r3, s15
 80013fe:	b21a      	sxth	r2, r3
 8001400:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <FEB_CAN_RMS_Torque+0x58>)
 8001402:	801a      	strh	r2, [r3, #0]
//	sprintf(buf, "Torque: %d\n", max_torque);
//	HAL_UART_Transmit(&huart2, buf, strlen(buf), 100);
//
//	RMSControl.torque= max_torque;

	FEB_CAN_RMS_Transmit_updateTorque();
 8001404:	f000 f808 	bl	8001418 <FEB_CAN_RMS_Transmit_updateTorque>
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	ecbd 8b02 	vpop	{d8}
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200001f8 	.word	0x200001f8

08001418 <FEB_CAN_RMS_Transmit_updateTorque>:

	// Select CAN msg to broadcast
	FEB_CAN_RMS_Transmit_paramBroadcast();
}

void FEB_CAN_RMS_Transmit_updateTorque(void) { //TODO: Create Custom Transmit function and update below call
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  //uint8_t message_data[8] = {RMSControl.torque & 0xFF, RMSControl.torque >> 8, 0, 0, 0, RMSControl.enabled, 0, 0};
	FEB_CAN_Tx_Header.DLC = 8;
 800141c:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 800141e:	2208      	movs	r2, #8
 8001420:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.StdId = 0xc0; //ID for sending paramater messages for RMS
 8001422:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 8001424:	22c0      	movs	r2, #192	@ 0xc0
 8001426:	601a      	str	r2, [r3, #0]
	FEB_CAN_Tx_Header.IDE = CAN_ID_STD;
 8001428:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 800142e:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 8001436:	2200      	movs	r2, #0
 8001438:	751a      	strb	r2, [r3, #20]

	// Copy data to Tx buffer
	FEB_CAN_Tx_Data[0] = (uint8_t)RMSControl.torque & 0xFF;
 800143a:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 800143c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001444:	701a      	strb	r2, [r3, #0]
	FEB_CAN_Tx_Data[1] = (uint8_t)(RMSControl.torque >> 8) & 0xFF;
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 8001448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144c:	121b      	asrs	r3, r3, #8
 800144e:	b21b      	sxth	r3, r3
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001454:	705a      	strb	r2, [r3, #1]
	FEB_CAN_Tx_Data[2] = 0;
 8001456:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001458:	2200      	movs	r2, #0
 800145a:	709a      	strb	r2, [r3, #2]
	FEB_CAN_Tx_Data[3] = 0;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 800145e:	2200      	movs	r2, #0
 8001460:	70da      	strb	r2, [r3, #3]
	FEB_CAN_Tx_Data[4] = 1;
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001464:	2201      	movs	r2, #1
 8001466:	711a      	strb	r2, [r3, #4]
	FEB_CAN_Tx_Data[5] = RMSControl.enabled;
 8001468:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <FEB_CAN_RMS_Transmit_updateTorque+0x88>)
 800146a:	789a      	ldrb	r2, [r3, #2]
 800146c:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 800146e:	715a      	strb	r2, [r3, #5]
	FEB_CAN_Tx_Data[6] = 0;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001472:	2200      	movs	r2, #0
 8001474:	719a      	strb	r2, [r3, #6]
	FEB_CAN_Tx_Data[7] = 0;
 8001476:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 8001478:	2200      	movs	r2, #0
 800147a:	71da      	strb	r2, [r3, #7]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 800147c:	bf00      	nop
 800147e:	480a      	ldr	r0, [pc, #40]	@ (80014a8 <FEB_CAN_RMS_Transmit_updateTorque+0x90>)
 8001480:	f002 f8e8 	bl	8003654 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f9      	beq.n	800147e <FEB_CAN_RMS_Transmit_updateTorque+0x66>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <FEB_CAN_RMS_Transmit_updateTorque+0x94>)
 800148c:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <FEB_CAN_RMS_Transmit_updateTorque+0x8c>)
 800148e:	4903      	ldr	r1, [pc, #12]	@ (800149c <FEB_CAN_RMS_Transmit_updateTorque+0x84>)
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <FEB_CAN_RMS_Transmit_updateTorque+0x90>)
 8001492:	f002 f80f 	bl	80034b4 <HAL_CAN_AddTxMessage>
		// Code Error - Shutdown
	}
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000210 	.word	0x20000210
 80014a0:	200001f8 	.word	0x200001f8
 80014a4:	20000244 	.word	0x20000244
 80014a8:	200002a4 	.word	0x200002a4
 80014ac:	20000254 	.word	0x20000254

080014b0 <FEB_CAN_RMS_Filter_Config>:




uint8_t FEB_CAN_RMS_Filter_Config(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	@ 0x38
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
 80014bc:	4613      	mov	r3, r2
 80014be:	70bb      	strb	r3, [r7, #2]
	uint16_t ids[] = {FEB_CAN_ID_RMS_VOLTAGE, FEB_CAN_ID_RMS_MOTOR};
 80014c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <FEB_CAN_RMS_Filter_Config+0x84>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	633b      	str	r3, [r7, #48]	@ 0x30

	for (uint8_t i = 0; i < 2; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80014cc:	e029      	b.n	8001522 <FEB_CAN_RMS_Filter_Config+0x72>
		CAN_FilterTypeDef filter_config;

	    // Standard CAN - 2.0A - 11 bit
	    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80014ce:	2301      	movs	r3, #1
 80014d0:	62bb      	str	r3, [r7, #40]	@ 0x28
		filter_config.FilterBank = filter_bank;
 80014d2:	78bb      	ldrb	r3, [r7, #2]
 80014d4:	61fb      	str	r3, [r7, #28]
		filter_config.FilterFIFOAssignment = FIFO_assignment;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	61bb      	str	r3, [r7, #24]
		filter_config.FilterIdHigh = ids[i] << 5;
 80014da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	3338      	adds	r3, #56	@ 0x38
 80014e2:	443b      	add	r3, r7
 80014e4:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80014e8:	015b      	lsls	r3, r3, #5
 80014ea:	60bb      	str	r3, [r7, #8]
		filter_config.FilterIdLow = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
		filter_config.FilterMaskIdHigh = 0xFFE0;
 80014f0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80014f4:	613b      	str	r3, [r7, #16]
		filter_config.FilterMaskIdLow = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80014fe:	2301      	movs	r3, #1
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
		filter_config.SlaveStartFilterBank = 27;
 8001502:	231b      	movs	r3, #27
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    filter_bank++;
 8001506:	78bb      	ldrb	r3, [r7, #2]
 8001508:	3301      	adds	r3, #1
 800150a:	70bb      	strb	r3, [r7, #2]

		if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	4619      	mov	r1, r3
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f001 feaa 	bl	800326c <HAL_CAN_ConfigFilter>
	for (uint8_t i = 0; i < 2; i++) {
 8001518:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800151c:	3301      	adds	r3, #1
 800151e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001522:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001526:	2b01      	cmp	r3, #1
 8001528:	d9d1      	bls.n	80014ce <FEB_CAN_RMS_Filter_Config+0x1e>
			//Code Error - shutdown
		}
	}

	return filter_bank;
 800152a:	78bb      	ldrb	r3, [r7, #2]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3738      	adds	r7, #56	@ 0x38
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	080086f0 	.word	0x080086f0

08001538 <FEB_CAN_RMS_Store_Msg>:
		// Code Error - Shutdown
	}
}


void FEB_CAN_RMS_Store_Msg(CAN_RxHeaderTypeDef* pHeader, uint8_t *RxData) {
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	switch (pHeader -> StdId){
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2ba5      	cmp	r3, #165	@ 0xa5
 8001548:	d007      	beq.n	800155a <FEB_CAN_RMS_Store_Msg+0x22>
 800154a:	2ba7      	cmp	r3, #167	@ 0xa7
 800154c:	d10c      	bne.n	8001568 <FEB_CAN_RMS_Store_Msg+0x30>
		case FEB_CAN_ID_RMS_VOLTAGE:
			memcpy(&(RMS_MESSAGE.HV_Bus_Voltage), RxData, 2);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <FEB_CAN_RMS_Store_Msg+0x3c>)
 8001556:	801a      	strh	r2, [r3, #0]
			break;
 8001558:	e006      	b.n	8001568 <FEB_CAN_RMS_Store_Msg+0x30>
		case FEB_CAN_ID_RMS_MOTOR:
			memcpy(&(RMS_MESSAGE.Motor_Speed), RxData+2, 2);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	3302      	adds	r3, #2
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	b29a      	uxth	r2, r3
 8001562:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <FEB_CAN_RMS_Store_Msg+0x3c>)
 8001564:	805a      	strh	r2, [r3, #2]
			break;
 8001566:	bf00      	nop
	}
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	200001fc 	.word	0x200001fc

08001578 <FEB_Read_ADC1>:
bool currHigh = false;


// **************************************** Functions ****************************************

uint16_t FEB_Read_ADC1(uint32_t channel){
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig={0};
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001596:	2307      	movs	r3, #7
 8001598:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	4619      	mov	r1, r3
 80015a0:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <FEB_Read_ADC1+0x58>)
 80015a2:	f001 fa6f 	bl	8002a84 <HAL_ADC_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <FEB_Read_ADC1+0x38>
	{
	   Error_Handler();
 80015ac:	f000 fd6a 	bl	8002084 <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 80015b0:	4807      	ldr	r0, [pc, #28]	@ (80015d0 <FEB_Read_ADC1+0x58>)
 80015b2:	f001 f8fd 	bl	80027b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80015b6:	2164      	movs	r1, #100	@ 0x64
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <FEB_Read_ADC1+0x58>)
 80015ba:	f001 f9cb 	bl	8002954 <HAL_ADC_PollForConversion>
	return (uint16_t)HAL_ADC_GetValue(&hadc1);
 80015be:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <FEB_Read_ADC1+0x58>)
 80015c0:	f001 fa53 	bl	8002a6a <HAL_ADC_GetValue>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b29b      	uxth	r3, r3

}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	2000025c 	.word	0x2000025c

080015d4 <FEB_HECS_update>:

void FEB_HECS_update(){
 80015d4:	b5b0      	push	{r4, r5, r7, lr}
 80015d6:	b0a8      	sub	sp, #160	@ 0xa0
 80015d8:	af04      	add	r7, sp, #16
	uint16_t current_HECS = FEB_Read_ADC1(HECS_SIGNAL);
 80015da:	200e      	movs	r0, #14
 80015dc:	f7ff ffcc 	bl	8001578 <FEB_Read_ADC1>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
	uint16_t current_ACC1 = FEB_Read_ADC1(ACC_PEDAL_1);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff ffc6 	bl	8001578 <FEB_Read_ADC1>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
	uint16_t current_BRAKE1 = FEB_Read_ADC1(BRAKE_PRESS_1);
 80015f2:	200d      	movs	r0, #13
 80015f4:	f7ff ffc0 	bl	8001578 <FEB_Read_ADC1>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
	uint16_t current_ACC2 = FEB_Read_ADC1(ACC_PEDAL_1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff ffba 	bl	8001578 <FEB_Read_ADC1>
 8001604:	4603      	mov	r3, r0
 8001606:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
	uint16_t current_BRAKE2 = FEB_Read_ADC1(BRAKE_PRESS_2);
 800160a:	200c      	movs	r0, #12
 800160c:	f7ff ffb4 	bl	8001578 <FEB_Read_ADC1>
 8001610:	4603      	mov	r3, r0
 8001612:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "HECS Current:%d, %d, %d, %d, %d\n\r", current_HECS,current_ACC1,current_BRAKE1,current_ACC2,current_BRAKE2);
 8001616:	f8b7 408e 	ldrh.w	r4, [r7, #142]	@ 0x8e
 800161a:	f8b7 508c 	ldrh.w	r5, [r7, #140]	@ 0x8c
 800161e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001622:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8001626:	f8b7 1086 	ldrh.w	r1, [r7, #134]	@ 0x86
 800162a:	1d38      	adds	r0, r7, #4
 800162c:	9102      	str	r1, [sp, #8]
 800162e:	9201      	str	r2, [sp, #4]
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	462b      	mov	r3, r5
 8001634:	4622      	mov	r2, r4
 8001636:	4911      	ldr	r1, [pc, #68]	@ (800167c <FEB_HECS_update+0xa8>)
 8001638:	f004 ffe2 	bl	8006600 <siprintf>
 800163c:	4603      	mov	r3, r0
 800163e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
	HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe fe33 	bl	80002b0 <strlen>
 800164a:	4603      	mov	r3, r0
 800164c:	b29a      	uxth	r2, r3
 800164e:	1d39      	adds	r1, r7, #4
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	480a      	ldr	r0, [pc, #40]	@ (8001680 <FEB_HECS_update+0xac>)
 8001656:	f003 fe35 	bl	80052c4 <HAL_UART_Transmit>

	if (current_HECS >= HECS_CURRENT){ //checks if current is above value (to be determined)
 800165a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800165e:	f5b3 6f3d 	cmp.w	r3, #3024	@ 0xbd0
 8001662:	d903      	bls.n	800166c <FEB_HECS_update+0x98>
		currHigh = true;
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <FEB_HECS_update+0xb0>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
	}else{
		currHigh = false;
	}
	//FEB_HECS_indicate();
}
 800166a:	e002      	b.n	8001672 <FEB_HECS_update+0x9e>
		currHigh = false;
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <FEB_HECS_update+0xb0>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
}
 8001672:	bf00      	nop
 8001674:	3790      	adds	r7, #144	@ 0x90
 8001676:	46bd      	mov	sp, r7
 8001678:	bdb0      	pop	{r4, r5, r7, pc}
 800167a:	bf00      	nop
 800167c:	080086f4 	.word	0x080086f4
 8001680:	20000320 	.word	0x20000320
 8001684:	20000200 	.word	0x20000200

08001688 <FEB_Main_Setup>:
char buf[128];
uint8_t buf_len; //stolen from Main_Setup (SN2)

// ********************************** Functions **********************************

void FEB_Main_Setup(void){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	HAL_ADCEx_InjectedStart(&hadc1); //@lovehate - where does this go
 800168c:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <FEB_Main_Setup+0x18>)
 800168e:	f001 fc27 	bl	8002ee0 <HAL_ADCEx_InjectedStart>
//	FEB_Timer_Init();
//	FEB_TPS2482_Setup();
	FEB_CAN_Init(); //FEB_CAN_Init() // The transceiver must be connected otherwise you get sent into an infinite loop
 8001692:	f000 faab 	bl	8001bec <FEB_CAN_Init>
	FEB_CAN_RMS_Setup();
 8001696:	f7ff fd73 	bl	8001180 <FEB_CAN_RMS_Setup>
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000025c 	.word	0x2000025c

080016a4 <FEB_Main_While>:

void FEB_Main_While(void){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
//	FEB_CAN_ICS_Transmit();
//
	FEB_SM_ST_t bms_state = FEB_CAN_BMS_getState();
 80016aa:	f7ff fcef 	bl	800108c <FEB_CAN_BMS_getState>
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]



	if (FEB_Ready_To_Drive() && (bms_state == FEB_SM_ST_DRIVE /*|| bms_state == FEB_SM_ST_DRIVE_REGEN*/)) {
 80016b2:	f7ff fd59 	bl	8001168 <FEB_Ready_To_Drive>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <FEB_Main_While+0x28>
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d104      	bne.n	80016cc <FEB_Main_While+0x28>
		FEB_Normalized_updateAcc();
 80016c2:	f000 f84d 	bl	8001760 <FEB_Normalized_updateAcc>
		FEB_CAN_RMS_Process();
 80016c6:	f7ff fd6b 	bl	80011a0 <FEB_CAN_RMS_Process>
 80016ca:	e003      	b.n	80016d4 <FEB_Main_While+0x30>

	} else {
		FEB_Normalized_setAcc0();
 80016cc:	f000 f83a 	bl	8001744 <FEB_Normalized_setAcc0>
		FEB_CAN_RMS_Disable();
 80016d0:	f7ff fd76 	bl	80011c0 <FEB_CAN_RMS_Disable>
	}

	FEB_HECS_update();
 80016d4:	f7ff ff7e 	bl	80015d4 <FEB_HECS_update>

	FEB_CAN_RMS_Torque();
 80016d8:	f7ff fe70 	bl	80013bc <FEB_CAN_RMS_Torque>
	FEB_Normalized_CAN_sendBrake();
 80016dc:	f000 fa1e 	bl	8001b1c <FEB_Normalized_CAN_sendBrake>

	HAL_Delay(10);
 80016e0:	200a      	movs	r0, #10
 80016e2:	f000 fffd 	bl	80026e0 <HAL_Delay>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <FEB_Read_ADC>:
float normalized_brake;
bool isImpl = false;

// **************************************** Functions ****************************************

uint16_t FEB_Read_ADC(uint32_t channel){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig={0};
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800170a:	2301      	movs	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800170e:	2307      	movs	r3, #7
 8001710:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	4619      	mov	r1, r3
 8001718:	4809      	ldr	r0, [pc, #36]	@ (8001740 <FEB_Read_ADC+0x50>)
 800171a:	f001 f9b3 	bl	8002a84 <HAL_ADC_ConfigChannel>
	{
//	   Error_Handler();
	}

	HAL_ADC_Start(&hadc1);
 800171e:	4808      	ldr	r0, [pc, #32]	@ (8001740 <FEB_Read_ADC+0x50>)
 8001720:	f001 f846 	bl	80027b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001724:	2164      	movs	r1, #100	@ 0x64
 8001726:	4806      	ldr	r0, [pc, #24]	@ (8001740 <FEB_Read_ADC+0x50>)
 8001728:	f001 f914 	bl	8002954 <HAL_ADC_PollForConversion>
	return (uint16_t)HAL_ADC_GetValue(&hadc1);
 800172c:	4804      	ldr	r0, [pc, #16]	@ (8001740 <FEB_Read_ADC+0x50>)
 800172e:	f001 f99c 	bl	8002a6a <HAL_ADC_GetValue>
 8001732:	4603      	mov	r3, r0
 8001734:	b29b      	uxth	r3, r3

}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000025c 	.word	0x2000025c

08001744 <FEB_Normalized_setAcc0>:

float FEB_Normalized_getAcc(){
	return normalized_acc;
}

void FEB_Normalized_setAcc0(){
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	normalized_acc = 0.0;
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <FEB_Normalized_setAcc0+0x18>)
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000204 	.word	0x20000204

08001760 <FEB_Normalized_updateAcc>:
	char buf1[128];
	sprintf(buf1, "[SENSOR] Brake Position: %d.%d%%\n", brake_pedal_position_int1, brake_pedal_position_int2);
	HAL_UART_Transmit(&huart2,(uint8_t *)buf1, strlen(buf1), HAL_MAX_DELAY);
}

void FEB_Normalized_updateAcc(){
 8001760:	b580      	push	{r7, lr}
 8001762:	b0a2      	sub	sp, #136	@ 0x88
 8001764:	af00      	add	r7, sp, #0
	normalized_acc = FEB_Normalized_Acc_Pedals();
 8001766:	f000 f827 	bl	80017b8 <FEB_Normalized_Acc_Pedals>
 800176a:	eef0 7a40 	vmov.f32	s15, s0
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <FEB_Normalized_updateAcc+0x4c>)
 8001770:	edc3 7a00 	vstr	s15, [r3]

	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "normalized_acc: %f\n", normalized_acc);
 8001774:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <FEB_Normalized_updateAcc+0x4c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe ff05 	bl	8000588 <__aeabi_f2d>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	1d38      	adds	r0, r7, #4
 8001784:	490a      	ldr	r1, [pc, #40]	@ (80017b0 <FEB_Normalized_updateAcc+0x50>)
 8001786:	f004 ff3b 	bl	8006600 <siprintf>
 800178a:	4603      	mov	r3, r0
 800178c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8001790:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001794:	b29a      	uxth	r2, r3
 8001796:	1d39      	adds	r1, r7, #4
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <FEB_Normalized_updateAcc+0x54>)
 800179e:	f003 fd91 	bl	80052c4 <HAL_UART_Transmit>

}
 80017a2:	bf00      	nop
 80017a4:	3788      	adds	r7, #136	@ 0x88
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000204 	.word	0x20000204
 80017b0:	08008810 	.word	0x08008810
 80017b4:	20000320 	.word	0x20000320

080017b8 <FEB_Normalized_Acc_Pedals>:

float FEB_Normalized_Acc_Pedals() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0a6      	sub	sp, #152	@ 0x98
 80017bc:	af00      	add	r7, sp, #0
	// raw ADC readings of the two acc pedal sensors
	uint16_t acc_pedal_1 = FEB_Read_ADC(ACC_PEDAL_1);
 80017be:	2001      	movs	r0, #1
 80017c0:	f7ff ff96 	bl	80016f0 <FEB_Read_ADC>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	uint16_t acc_pedal_2 = FEB_Read_ADC(ACC_PEDAL_1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff ff90 	bl	80016f0 <FEB_Read_ADC>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94



	// check implausibility for shorting. TODO: check if this fulfills the short circuiting rules.
	if (acc_pedal_1 > ACC_PEDAL_1_END + 20 || acc_pedal_1 < ACC_PEDAL_1_START - 20
 80017d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80017da:	f5b3 6ff0 	cmp.w	r3, #1920	@ 0x780
 80017de:	d80e      	bhi.n	80017fe <FEB_Normalized_Acc_Pedals+0x46>
 80017e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80017e4:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 80017e8:	d309      	bcc.n	80017fe <FEB_Normalized_Acc_Pedals+0x46>
			|| acc_pedal_2 < ACC_PEDAL_2_START - 20 || acc_pedal_2 > ACC_PEDAL_2_END + 20) {
 80017ea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80017ee:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 80017f2:	d304      	bcc.n	80017fe <FEB_Normalized_Acc_Pedals+0x46>
 80017f4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80017f8:	f5b3 6ff0 	cmp.w	r3, #1920	@ 0x780
 80017fc:	d905      	bls.n	800180a <FEB_Normalized_Acc_Pedals+0x52>
		isImpl = true;
 80017fe:	4b76      	ldr	r3, [pc, #472]	@ (80019d8 <FEB_Normalized_Acc_Pedals+0x220>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
		return 0.0;
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e0cd      	b.n	80019a6 <FEB_Normalized_Acc_Pedals+0x1ee>
	}

	//convert to % travel
	// sensor 1 has positive slope
	float ped1_normalized = (acc_pedal_1 - ACC_PEDAL_1_START)/ (ACC_PEDAL_1_END - ACC_PEDAL_1_START);
 800180a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fea8 	bl	8000564 <__aeabi_i2d>
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b70      	ldr	r3, [pc, #448]	@ (80019dc <FEB_Normalized_Acc_Pedals+0x224>)
 800181a:	f7fe fd55 	bl	80002c8 <__aeabi_dsub>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	a364      	add	r3, pc, #400	@ (adr r3, 80019b8 <FEB_Normalized_Acc_Pedals+0x200>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7ff f82e 	bl	800088c <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f9d6 	bl	8000be8 <__aeabi_d2f>
 800183c:	4603      	mov	r3, r0
 800183e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	// sensor 2 has negative slope
	float ped2_normalized = (acc_pedal_2 - ACC_PEDAL_2_START) / (ACC_PEDAL_2_END - ACC_PEDAL_2_START);
 8001842:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe8c 	bl	8000564 <__aeabi_i2d>
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	4b62      	ldr	r3, [pc, #392]	@ (80019dc <FEB_Normalized_Acc_Pedals+0x224>)
 8001852:	f7fe fd39 	bl	80002c8 <__aeabi_dsub>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	a356      	add	r3, pc, #344	@ (adr r3, 80019b8 <FEB_Normalized_Acc_Pedals+0x200>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7ff f812 	bl	800088c <__aeabi_ddiv>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f9ba 	bl	8000be8 <__aeabi_d2f>
 8001874:	4603      	mov	r3, r0
 8001876:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "acc1:%f\n\r", ped1_normalized);
 800187a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800187e:	f7fe fe83 	bl	8000588 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	1d38      	adds	r0, r7, #4
 8001888:	4955      	ldr	r1, [pc, #340]	@ (80019e0 <FEB_Normalized_Acc_Pedals+0x228>)
 800188a:	f004 feb9 	bl	8006600 <siprintf>
 800188e:	4603      	mov	r3, r0
 8001890:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8001894:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001898:	b29a      	uxth	r2, r3
 800189a:	1d39      	adds	r1, r7, #4
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	4850      	ldr	r0, [pc, #320]	@ (80019e4 <FEB_Normalized_Acc_Pedals+0x22c>)
 80018a2:	f003 fd0f 	bl	80052c4 <HAL_UART_Transmit>

	// sensor measurements mismatch by more than 10%
	if(abs(ped1_normalized - ped2_normalized) > 0.1 ){
 80018a6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80018aa:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80018ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b6:	ee17 3a90 	vmov	r3, s15
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bfb8      	it	lt
 80018be:	425b      	neglt	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	dd05      	ble.n	80018d0 <FEB_Normalized_Acc_Pedals+0x118>
		isImpl = true;
 80018c4:	4b44      	ldr	r3, [pc, #272]	@ (80019d8 <FEB_Normalized_Acc_Pedals+0x220>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
		return 0.0;
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e06a      	b.n	80019a6 <FEB_Normalized_Acc_Pedals+0x1ee>
	}

	float final_normalized = 0.5*(ped1_normalized + ped2_normalized);
 80018d0:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80018d4:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80018d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80018e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e4:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84


//	 Implausiblity check if both pedals are stepped
	if (normalized_brake > 0.2 && normalized_acc > 0.1) {
 80018e8:	4b3f      	ldr	r3, [pc, #252]	@ (80019e8 <FEB_Normalized_Acc_Pedals+0x230>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe4b 	bl	8000588 <__aeabi_f2d>
 80018f2:	a333      	add	r3, pc, #204	@ (adr r3, 80019c0 <FEB_Normalized_Acc_Pedals+0x208>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7ff f92e 	bl	8000b58 <__aeabi_dcmpgt>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00f      	beq.n	8001922 <FEB_Normalized_Acc_Pedals+0x16a>
 8001902:	4b3a      	ldr	r3, [pc, #232]	@ (80019ec <FEB_Normalized_Acc_Pedals+0x234>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fe3e 	bl	8000588 <__aeabi_f2d>
 800190c:	a32e      	add	r3, pc, #184	@ (adr r3, 80019c8 <FEB_Normalized_Acc_Pedals+0x210>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7ff f921 	bl	8000b58 <__aeabi_dcmpgt>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <FEB_Normalized_Acc_Pedals+0x16a>
		isImpl = true;
 800191c:	4b2e      	ldr	r3, [pc, #184]	@ (80019d8 <FEB_Normalized_Acc_Pedals+0x220>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
	}

	// recover from implausibility if acc pedal is not 5% less
	if (final_normalized < 0.05 && isImpl) {
 8001922:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001926:	f7fe fe2f 	bl	8000588 <__aeabi_f2d>
 800192a:	a329      	add	r3, pc, #164	@ (adr r3, 80019d0 <FEB_Normalized_Acc_Pedals+0x218>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7ff f8f4 	bl	8000b1c <__aeabi_dcmplt>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d006      	beq.n	8001948 <FEB_Normalized_Acc_Pedals+0x190>
 800193a:	4b27      	ldr	r3, [pc, #156]	@ (80019d8 <FEB_Normalized_Acc_Pedals+0x220>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <FEB_Normalized_Acc_Pedals+0x190>
		isImpl = false;
 8001942:	4b25      	ldr	r3, [pc, #148]	@ (80019d8 <FEB_Normalized_Acc_Pedals+0x220>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
	}

	if (!isImpl) {
 8001948:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <FEB_Normalized_Acc_Pedals+0x220>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	f083 0301 	eor.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d025      	beq.n	80019a2 <FEB_Normalized_Acc_Pedals+0x1ea>
		final_normalized = final_normalized > 1 ? 1 : final_normalized;
 8001956:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800195a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800195e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	dd02      	ble.n	800196e <FEB_Normalized_Acc_Pedals+0x1b6>
 8001968:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800196c:	e001      	b.n	8001972 <FEB_Normalized_Acc_Pedals+0x1ba>
 800196e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001972:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 8001976:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800197a:	f7fe fe05 	bl	8000588 <__aeabi_f2d>
 800197e:	a314      	add	r3, pc, #80	@ (adr r3, 80019d0 <FEB_Normalized_Acc_Pedals+0x218>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7ff f8ca 	bl	8000b1c <__aeabi_dcmplt>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <FEB_Normalized_Acc_Pedals+0x1dc>
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e001      	b.n	8001998 <FEB_Normalized_Acc_Pedals+0x1e0>
 8001994:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001998:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		return final_normalized;
 800199c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019a0:	e001      	b.n	80019a6 <FEB_Normalized_Acc_Pedals+0x1ee>
	} else {
		return 0.0;
 80019a2:	f04f 0300 	mov.w	r3, #0
	}
}
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eeb0 0a67 	vmov.f32	s0, s15
 80019ae:	3798      	adds	r7, #152	@ 0x98
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	f3af 8000 	nop.w
 80019b8:	00000000 	.word	0x00000000
 80019bc:	40977000 	.word	0x40977000
 80019c0:	9999999a 	.word	0x9999999a
 80019c4:	3fc99999 	.word	0x3fc99999
 80019c8:	9999999a 	.word	0x9999999a
 80019cc:	3fb99999 	.word	0x3fb99999
 80019d0:	9999999a 	.word	0x9999999a
 80019d4:	3fa99999 	.word	0x3fa99999
 80019d8:	2000020c 	.word	0x2000020c
 80019dc:	40790000 	.word	0x40790000
 80019e0:	08008824 	.word	0x08008824
 80019e4:	20000320 	.word	0x20000320
 80019e8:	20000208 	.word	0x20000208
 80019ec:	20000204 	.word	0x20000204

080019f0 <FEB_Normalized_getBrake>:

float FEB_Normalized_getBrake() {
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	return normalized_brake;
 80019f4:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <FEB_Normalized_getBrake+0x18>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	ee07 3a90 	vmov	s15, r3
}
 80019fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20000208 	.word	0x20000208

08001a0c <FEB_Normalized_update_Brake>:

void FEB_Normalized_update_Brake() {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	normalized_brake = FEB_Normalized_Brake_Pedals();
 8001a10:	f000 f80a 	bl	8001a28 <FEB_Normalized_Brake_Pedals>
 8001a14:	eef0 7a40 	vmov.f32	s15, s0
 8001a18:	4b02      	ldr	r3, [pc, #8]	@ (8001a24 <FEB_Normalized_update_Brake+0x18>)
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000208 	.word	0x20000208

08001a28 <FEB_Normalized_Brake_Pedals>:

float FEB_Normalized_Brake_Pedals() {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0a4      	sub	sp, #144	@ 0x90
 8001a2c:	af00      	add	r7, sp, #0
	//TODO: This might need to change based on which sensor ends up getting used.
	uint16_t brake_pres_2 =  FEB_Read_ADC(BRAKE_PRESS_2);   //HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001a2e:	200c      	movs	r0, #12
 8001a30:	f7ff fe5e 	bl	80016f0 <FEB_Read_ADC>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

//	HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);

	float final_normalized = (brake_pres_2 - PRESSURE_START)/ (PRESSURE_END - PRESSURE_START);
 8001a3a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd90 	bl	8000564 <__aeabi_i2d>
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <FEB_Normalized_Brake_Pedals+0xe8>)
 8001a4a:	f7fe fc3d 	bl	80002c8 <__aeabi_dsub>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b10 <FEB_Normalized_Brake_Pedals+0xe8>)
 8001a5c:	f7fe ff16 	bl	800088c <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f8be 	bl	8000be8 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	final_normalized = final_normalized > 1 ? 1 : final_normalized;
 8001a72:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001a76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a82:	dd02      	ble.n	8001a8a <FEB_Normalized_Brake_Pedals+0x62>
 8001a84:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a88:	e001      	b.n	8001a8e <FEB_Normalized_Brake_Pedals+0x66>
 8001a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	final_normalized = final_normalized < 0.05 ? 0 : final_normalized;
 8001a92:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001a96:	f7fe fd77 	bl	8000588 <__aeabi_f2d>
 8001a9a:	a31b      	add	r3, pc, #108	@ (adr r3, 8001b08 <FEB_Normalized_Brake_Pedals+0xe0>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7ff f83c 	bl	8000b1c <__aeabi_dcmplt>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <FEB_Normalized_Brake_Pedals+0x88>
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	e001      	b.n	8001ab4 <FEB_Normalized_Brake_Pedals+0x8c>
 8001ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88


	if (brake_pres_2 < PRESSURE_START - 20) {
 8001ab8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001abc:	f5b3 7f75 	cmp.w	r3, #980	@ 0x3d4
 8001ac0:	d202      	bcs.n	8001ac8 <FEB_Normalized_Brake_Pedals+0xa0>
		return 0.0;
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e017      	b.n	8001af8 <FEB_Normalized_Brake_Pedals+0xd0>
	}

	char buf[128];
	uint8_t buf_len;
	buf_len = sprintf(buf, "brake_Pos: %f\n", final_normalized);
 8001ac8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001acc:	f7fe fd5c 	bl	8000588 <__aeabi_f2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	1d38      	adds	r0, r7, #4
 8001ad6:	490f      	ldr	r1, [pc, #60]	@ (8001b14 <FEB_Normalized_Brake_Pedals+0xec>)
 8001ad8:	f004 fd92 	bl	8006600 <siprintf>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

	HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8001ae2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	1d39      	adds	r1, r7, #4
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	480a      	ldr	r0, [pc, #40]	@ (8001b18 <FEB_Normalized_Brake_Pedals+0xf0>)
 8001af0:	f003 fbe8 	bl	80052c4 <HAL_UART_Transmit>

	return final_normalized;
 8001af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eeb0 0a67 	vmov.f32	s0, s15
 8001b00:	3790      	adds	r7, #144	@ 0x90
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	9999999a 	.word	0x9999999a
 8001b0c:	3fa99999 	.word	0x3fa99999
 8001b10:	408f4000 	.word	0x408f4000
 8001b14:	08008830 	.word	0x08008830
 8001b18:	20000320 	.word	0x20000320

08001b1c <FEB_Normalized_CAN_sendBrake>:

void FEB_Normalized_CAN_sendBrake() {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0a4      	sub	sp, #144	@ 0x90
 8001b20:	af00      	add	r7, sp, #0
	// Initialize transmission header
	FEB_CAN_Tx_Header.DLC = 2;
 8001b22:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <FEB_Normalized_CAN_sendBrake+0xb0>)
 8001b24:	2202      	movs	r2, #2
 8001b26:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.StdId = FEB_CAN_NORMALIZED_BRAKE_FRAME_ID;
 8001b28:	4b28      	ldr	r3, [pc, #160]	@ (8001bcc <FEB_Normalized_CAN_sendBrake+0xb0>)
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	601a      	str	r2, [r3, #0]
	FEB_CAN_Tx_Header.IDE = CAN_ID_STD;
 8001b2e:	4b27      	ldr	r3, [pc, #156]	@ (8001bcc <FEB_Normalized_CAN_sendBrake+0xb0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8001b34:	4b25      	ldr	r3, [pc, #148]	@ (8001bcc <FEB_Normalized_CAN_sendBrake+0xb0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8001b3a:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <FEB_Normalized_CAN_sendBrake+0xb0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	751a      	strb	r2, [r3, #20]

	// Copy data to Tx buffer. This might be incorrect. It's possible you have to do some bit shifting
//	memcpy(FEB_CAN_Tx_Data, &normalized_brake, sizeof(float));
	FEB_Normalized_update_Brake();
 8001b40:	f7ff ff64 	bl	8001a0c <FEB_Normalized_update_Brake>
	memcpy(FEB_CAN_Tx_Data, &normalized_brake, sizeof(float)); // maybe?
 8001b44:	4b22      	ldr	r3, [pc, #136]	@ (8001bd0 <FEB_Normalized_CAN_sendBrake+0xb4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a22      	ldr	r2, [pc, #136]	@ (8001bd4 <FEB_Normalized_CAN_sendBrake+0xb8>)
 8001b4a:	6013      	str	r3, [r2, #0]
	uint8_t converted_brake_val = (uint8_t)(normalized_brake * 100);
 8001b4c:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <FEB_Normalized_CAN_sendBrake+0xb4>)
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001bd8 <FEB_Normalized_CAN_sendBrake+0xbc>
 8001b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b62:	793b      	ldrb	r3, [r7, #4]
 8001b64:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	FEB_CAN_Tx_Data[0] = converted_brake_val;
 8001b68:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd4 <FEB_Normalized_CAN_sendBrake+0xb8>)
 8001b6a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001b6e:	7013      	strb	r3, [r2, #0]

	//Debug to see the position of the Brake position sensor


	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {}
 8001b70:	bf00      	nop
 8001b72:	481a      	ldr	r0, [pc, #104]	@ (8001bdc <FEB_Normalized_CAN_sendBrake+0xc0>)
 8001b74:	f001 fd6e 	bl	8003654 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f9      	beq.n	8001b72 <FEB_Normalized_CAN_sendBrake+0x56>
//
	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 8001b7e:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <FEB_Normalized_CAN_sendBrake+0xc4>)
 8001b80:	4a14      	ldr	r2, [pc, #80]	@ (8001bd4 <FEB_Normalized_CAN_sendBrake+0xb8>)
 8001b82:	4912      	ldr	r1, [pc, #72]	@ (8001bcc <FEB_Normalized_CAN_sendBrake+0xb0>)
 8001b84:	4815      	ldr	r0, [pc, #84]	@ (8001bdc <FEB_Normalized_CAN_sendBrake+0xc0>)
 8001b86:	f001 fc95 	bl	80034b4 <HAL_CAN_AddTxMessage>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d018      	beq.n	8001bc2 <FEB_Normalized_CAN_sendBrake+0xa6>
		//error - shutdown
		char buf[128];
		uint8_t buf_len;
		buf_len = sprintf(buf, "CAN MESSAGE FAIL TO SEND: %f\n", normalized_brake);
 8001b90:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <FEB_Normalized_CAN_sendBrake+0xb4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fcf7 	bl	8000588 <__aeabi_f2d>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	f107 000c 	add.w	r0, r7, #12
 8001ba2:	4910      	ldr	r1, [pc, #64]	@ (8001be4 <FEB_Normalized_CAN_sendBrake+0xc8>)
 8001ba4:	f004 fd2c 	bl	8006600 <siprintf>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
		HAL_UART_Transmit(&huart2,(uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8001bae:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	f107 010c 	add.w	r1, r7, #12
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbc:	480a      	ldr	r0, [pc, #40]	@ (8001be8 <FEB_Normalized_CAN_sendBrake+0xcc>)
 8001bbe:	f003 fb81 	bl	80052c4 <HAL_UART_Transmit>
	}

}
 8001bc2:	bf00      	nop
 8001bc4:	3790      	adds	r7, #144	@ 0x90
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000210 	.word	0x20000210
 8001bd0:	20000208 	.word	0x20000208
 8001bd4:	20000244 	.word	0x20000244
 8001bd8:	42c80000 	.word	0x42c80000
 8001bdc:	200002a4 	.word	0x200002a4
 8001be0:	20000254 	.word	0x20000254
 8001be4:	08008840 	.word	0x08008840
 8001be8:	20000320 	.word	0x20000320

08001bec <FEB_CAN_Init>:
uint32_t FEB_CAN_Tx_Mailbox;
uint8_t setup = 0;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8001bf0:	f000 f814 	bl	8001c1c <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001bf4:	4807      	ldr	r0, [pc, #28]	@ (8001c14 <FEB_CAN_Init+0x28>)
 8001bf6:	f001 fc19 	bl	800342c <HAL_CAN_Start>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <FEB_CAN_Init+0x1a>
		setup = 1;
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <FEB_CAN_Init+0x2c>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
        // Code Error - Shutdown
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001c06:	2102      	movs	r1, #2
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <FEB_CAN_Init+0x28>)
 8001c0a:	f001 fe7a 	bl	8003902 <HAL_CAN_ActivateNotification>
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200002a4 	.word	0x200002a4
 8001c18:	20000258 	.word	0x20000258

08001c1c <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	71fb      	strb	r3, [r7, #7]
    filter_bank = FEB_CAN_ICS_Filter(&hcan1, CAN_RX_FIFO0, filter_bank);
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	480c      	ldr	r0, [pc, #48]	@ (8001c60 <FEB_CAN_Filter_Config+0x44>)
 8001c2e:	f7ff fa39 	bl	80010a4 <FEB_CAN_ICS_Filter>
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
    filter_bank = FEB_CAN_BMS_Filter_Config(&hcan1, CAN_RX_FIFO0,  filter_bank);
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4808      	ldr	r0, [pc, #32]	@ (8001c60 <FEB_CAN_Filter_Config+0x44>)
 8001c3e:	f7ff f9b9 	bl	8000fb4 <FEB_CAN_BMS_Filter_Config>
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
    filter_bank = FEB_CAN_RMS_Filter_Config(&hcan1, CAN_RX_FIFO0, filter_bank);
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4804      	ldr	r0, [pc, #16]	@ (8001c60 <FEB_CAN_Filter_Config+0x44>)
 8001c4e:	f7ff fc2f 	bl	80014b0 <FEB_CAN_RMS_Filter_Config>
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]

	// Assign Filter
    // filter_bank = Function(&hcan1, CAN_RX_FIFO0, filter_bank);
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200002a4 	.word	0x200002a4

08001c64 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FEB_CAN_Rx_Header, FEB_CAN_Rx_Data) == HAL_OK) {
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001c70:	2100      	movs	r1, #0
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f001 fd23 	bl	80036be <HAL_CAN_GetRxMessage>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10b      	bne.n	8001c96 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		FEB_CAN_ICS_Store_Msg(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 8001c7e:	4908      	ldr	r1, [pc, #32]	@ (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001c80:	4808      	ldr	r0, [pc, #32]	@ (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001c82:	f7ff fa51 	bl	8001128 <FEB_CAN_ICS_Store_Msg>
		FEB_CAN_BMS_Store_Msg(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 8001c86:	4906      	ldr	r1, [pc, #24]	@ (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001c88:	4806      	ldr	r0, [pc, #24]	@ (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001c8a:	f7ff f9d7 	bl	800103c <FEB_CAN_BMS_Store_Msg>
		FEB_CAN_RMS_Store_Msg(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 8001c8e:	4904      	ldr	r1, [pc, #16]	@ (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001c90:	4804      	ldr	r0, [pc, #16]	@ (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001c92:	f7ff fc51 	bl	8001538 <FEB_CAN_RMS_Store_Msg>

	}
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000024c 	.word	0x2000024c
 8001ca4:	20000228 	.word	0x20000228

08001ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cac:	f000 fca6 	bl	80025fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cb0:	f000 f810 	bl	8001cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cb4:	f000 f960 	bl	8001f78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001cb8:	f000 f934 	bl	8001f24 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001cbc:	f000 f8ce 	bl	8001e5c <MX_CAN1_Init>
  MX_I2C1_Init();
 8001cc0:	f000 f902 	bl	8001ec8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001cc4:	f000 f878 	bl	8001db8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  FEB_Main_Setup();
 8001cc8:	f7ff fcde 	bl	8001688 <FEB_Main_Setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  FEB_Main_While();
 8001ccc:	f7ff fcea 	bl	80016a4 <FEB_Main_While>
 8001cd0:	e7fc      	b.n	8001ccc <main+0x24>
	...

08001cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b094      	sub	sp, #80	@ 0x50
 8001cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	2234      	movs	r2, #52	@ 0x34
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f004 fcf1 	bl	80066ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8001db0 <SystemClock_Config+0xdc>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	4a2b      	ldr	r2, [pc, #172]	@ (8001db0 <SystemClock_Config+0xdc>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d08:	4b29      	ldr	r3, [pc, #164]	@ (8001db0 <SystemClock_Config+0xdc>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d14:	2300      	movs	r3, #0
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	4b26      	ldr	r3, [pc, #152]	@ (8001db4 <SystemClock_Config+0xe0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a25      	ldr	r2, [pc, #148]	@ (8001db4 <SystemClock_Config+0xe0>)
 8001d1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <SystemClock_Config+0xe0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d44:	2304      	movs	r3, #4
 8001d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d48:	23b4      	movs	r3, #180	@ 0xb4
 8001d4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d50:	2302      	movs	r3, #2
 8001d52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d54:	2302      	movs	r3, #2
 8001d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 ffc3 	bl	8004ce8 <HAL_RCC_OscConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d68:	f000 f98c 	bl	8002084 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d6c:	f002 fc22 	bl	80045b4 <HAL_PWREx_EnableOverDrive>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001d76:	f000 f985 	bl	8002084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d7a:	230f      	movs	r3, #15
 8001d7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d86:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d90:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d92:	f107 0308 	add.w	r3, r7, #8
 8001d96:	2105      	movs	r1, #5
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f002 fc5b 	bl	8004654 <HAL_RCC_ClockConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001da4:	f000 f96e 	bl	8002084 <Error_Handler>
  }
}
 8001da8:	bf00      	nop
 8001daa:	3750      	adds	r7, #80	@ 0x50
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40007000 	.word	0x40007000

08001db8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dca:	4b21      	ldr	r3, [pc, #132]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001dcc:	4a21      	ldr	r2, [pc, #132]	@ (8001e54 <MX_ADC1_Init+0x9c>)
 8001dce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001dd2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dea:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001df2:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001df8:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001dfa:	4a17      	ldr	r2, [pc, #92]	@ (8001e58 <MX_ADC1_Init+0xa0>)
 8001dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dfe:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e18:	480d      	ldr	r0, [pc, #52]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001e1a:	f000 fc85 	bl	8002728 <HAL_ADC_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e24:	f000 f92e 	bl	8002084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e34:	463b      	mov	r3, r7
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	@ (8001e50 <MX_ADC1_Init+0x98>)
 8001e3a:	f000 fe23 	bl	8002a84 <HAL_ADC_ConfigChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e44:	f000 f91e 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	2000025c 	.word	0x2000025c
 8001e54:	40012000 	.word	0x40012000
 8001e58:	0f000001 	.word	0x0f000001

08001e5c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e60:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001e62:	4a18      	ldr	r2, [pc, #96]	@ (8001ec4 <MX_CAN1_Init+0x68>)
 8001e64:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001e66:	4b16      	ldr	r3, [pc, #88]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001e68:	2212      	movs	r2, #18
 8001e6a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e72:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001e78:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001e7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e7e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001eac:	f001 f8e2 	bl	8003074 <HAL_CAN_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001eb6:	f000 f8e5 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200002a4 	.word	0x200002a4
 8001ec4:	40006400 	.word	0x40006400

08001ec8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <MX_I2C1_Init+0x50>)
 8001ece:	4a13      	ldr	r2, [pc, #76]	@ (8001f1c <MX_I2C1_Init+0x54>)
 8001ed0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <MX_I2C1_Init+0x50>)
 8001ed4:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <MX_I2C1_Init+0x58>)
 8001ed6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <MX_I2C1_Init+0x50>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <MX_I2C1_Init+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <MX_I2C1_Init+0x50>)
 8001ee6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <MX_I2C1_Init+0x50>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <MX_I2C1_Init+0x50>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ef8:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <MX_I2C1_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <MX_I2C1_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f04:	4804      	ldr	r0, [pc, #16]	@ (8001f18 <MX_I2C1_Init+0x50>)
 8001f06:	f002 fa11 	bl	800432c <HAL_I2C_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f10:	f000 f8b8 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200002cc 	.word	0x200002cc
 8001f1c:	40005400 	.word	0x40005400
 8001f20:	000186a0 	.word	0x000186a0

08001f24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <MX_USART2_UART_Init+0x50>)
 8001f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f48:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f4a:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f4c:	220c      	movs	r2, #12
 8001f4e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f50:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f5c:	4804      	ldr	r0, [pc, #16]	@ (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f5e:	f003 f961 	bl	8005224 <HAL_UART_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001f68:	f000 f88c 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000320 	.word	0x20000320
 8001f74:	40004400 	.word	0x40004400

08001f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	@ 0x28
 8001f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b39      	ldr	r3, [pc, #228]	@ (8002078 <MX_GPIO_Init+0x100>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a38      	ldr	r2, [pc, #224]	@ (8002078 <MX_GPIO_Init+0x100>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <MX_GPIO_Init+0x100>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b32      	ldr	r3, [pc, #200]	@ (8002078 <MX_GPIO_Init+0x100>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a31      	ldr	r2, [pc, #196]	@ (8002078 <MX_GPIO_Init+0x100>)
 8001fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b2f      	ldr	r3, [pc, #188]	@ (8002078 <MX_GPIO_Init+0x100>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	4b2b      	ldr	r3, [pc, #172]	@ (8002078 <MX_GPIO_Init+0x100>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a2a      	ldr	r2, [pc, #168]	@ (8002078 <MX_GPIO_Init+0x100>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b28      	ldr	r3, [pc, #160]	@ (8002078 <MX_GPIO_Init+0x100>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <MX_GPIO_Init+0x100>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a23      	ldr	r2, [pc, #140]	@ (8002078 <MX_GPIO_Init+0x100>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <MX_GPIO_Init+0x100>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IVMeter_IND_Pin|RST_Pin, GPIO_PIN_RESET);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2103      	movs	r1, #3
 8002002:	481e      	ldr	r0, [pc, #120]	@ (800207c <MX_GPIO_Init+0x104>)
 8002004:	f002 f978 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002008:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800200c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800200e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4619      	mov	r1, r3
 800201e:	4817      	ldr	r0, [pc, #92]	@ (800207c <MX_GPIO_Init+0x104>)
 8002020:	f001 ffd6 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IVMeter_IND_Pin RST_Pin */
  GPIO_InitStruct.Pin = IVMeter_IND_Pin|RST_Pin;
 8002024:	2303      	movs	r3, #3
 8002026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002028:	2301      	movs	r3, #1
 800202a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	4810      	ldr	r0, [pc, #64]	@ (800207c <MX_GPIO_Init+0x104>)
 800203c:	f001 ffc8 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IVL_Down_Pin IVTS_HALF_Pin SHUTDOWN_Pin PTS_HALF_Pin */
  GPIO_InitStruct.Pin = IVL_Down_Pin|IVTS_HALF_Pin|SHUTDOWN_Pin|PTS_HALF_Pin;
 8002040:	23f0      	movs	r3, #240	@ 0xf0
 8002042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	480b      	ldr	r0, [pc, #44]	@ (8002080 <MX_GPIO_Init+0x108>)
 8002054:	f001 ffbc 	bl	8003fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTS_HALF_Pin */
  GPIO_InitStruct.Pin = BTS_HALF_Pin;
 8002058:	2320      	movs	r3, #32
 800205a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTS_HALF_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	4804      	ldr	r0, [pc, #16]	@ (800207c <MX_GPIO_Init+0x104>)
 800206c:	f001 ffb0 	bl	8003fd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002070:	bf00      	nop
 8002072:	3728      	adds	r7, #40	@ 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	40020800 	.word	0x40020800
 8002080:	40020000 	.word	0x40020000

08002084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002088:	b672      	cpsid	i
}
 800208a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <Error_Handler+0x8>

08002090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <HAL_MspInit+0x4c>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209e:	4a0f      	ldr	r2, [pc, #60]	@ (80020dc <HAL_MspInit+0x4c>)
 80020a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <HAL_MspInit+0x4c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_MspInit+0x4c>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a08      	ldr	r2, [pc, #32]	@ (80020dc <HAL_MspInit+0x4c>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_MspInit+0x4c>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020ce:	2007      	movs	r0, #7
 80020d0:	f001 ff3c 	bl	8003f4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40023800 	.word	0x40023800

080020e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a24      	ldr	r2, [pc, #144]	@ (8002190 <HAL_ADC_MspInit+0xb0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d141      	bne.n	8002186 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b23      	ldr	r3, [pc, #140]	@ (8002194 <HAL_ADC_MspInit+0xb4>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	4a22      	ldr	r2, [pc, #136]	@ (8002194 <HAL_ADC_MspInit+0xb4>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002110:	6453      	str	r3, [r2, #68]	@ 0x44
 8002112:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <HAL_ADC_MspInit+0xb4>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <HAL_ADC_MspInit+0xb4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a1b      	ldr	r2, [pc, #108]	@ (8002194 <HAL_ADC_MspInit+0xb4>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <HAL_ADC_MspInit+0xb4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <HAL_ADC_MspInit+0xb4>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a14      	ldr	r2, [pc, #80]	@ (8002194 <HAL_ADC_MspInit+0xb4>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	@ 0x30
 800214a:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <HAL_ADC_MspInit+0xb4>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = brake1_Pin|brake2_Pin|brakeIn_Pin;
 8002156:	231c      	movs	r3, #28
 8002158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800215a:	2303      	movs	r3, #3
 800215c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	4619      	mov	r1, r3
 8002168:	480b      	ldr	r0, [pc, #44]	@ (8002198 <HAL_ADC_MspInit+0xb8>)
 800216a:	f001 ff31 	bl	8003fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = acc1_Pin|acc2_Pin;
 800216e:	2303      	movs	r3, #3
 8002170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002172:	2303      	movs	r3, #3
 8002174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4619      	mov	r1, r3
 8002180:	4806      	ldr	r0, [pc, #24]	@ (800219c <HAL_ADC_MspInit+0xbc>)
 8002182:	f001 ff25 	bl	8003fd0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002186:	bf00      	nop
 8002188:	3728      	adds	r7, #40	@ 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40012000 	.word	0x40012000
 8002194:	40023800 	.word	0x40023800
 8002198:	40020800 	.word	0x40020800
 800219c:	40020000 	.word	0x40020000

080021a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	@ 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a21      	ldr	r2, [pc, #132]	@ (8002244 <HAL_CAN_MspInit+0xa4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d13c      	bne.n	800223c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	4b20      	ldr	r3, [pc, #128]	@ (8002248 <HAL_CAN_MspInit+0xa8>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002248 <HAL_CAN_MspInit+0xa8>)
 80021cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <HAL_CAN_MspInit+0xa8>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <HAL_CAN_MspInit+0xa8>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	4a18      	ldr	r2, [pc, #96]	@ (8002248 <HAL_CAN_MspInit+0xa8>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ee:	4b16      	ldr	r3, [pc, #88]	@ (8002248 <HAL_CAN_MspInit+0xa8>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800220c:	2309      	movs	r3, #9
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	480d      	ldr	r0, [pc, #52]	@ (800224c <HAL_CAN_MspInit+0xac>)
 8002218:	f001 feda 	bl	8003fd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	2014      	movs	r0, #20
 8002222:	f001 fe9e 	bl	8003f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002226:	2014      	movs	r0, #20
 8002228:	f001 feb7 	bl	8003f9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2015      	movs	r0, #21
 8002232:	f001 fe96 	bl	8003f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002236:	2015      	movs	r0, #21
 8002238:	f001 feaf 	bl	8003f9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	@ 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40006400 	.word	0x40006400
 8002248:	40023800 	.word	0x40023800
 800224c:	40020000 	.word	0x40020000

08002250 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	@ 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a19      	ldr	r2, [pc, #100]	@ (80022d4 <HAL_I2C_MspInit+0x84>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d12b      	bne.n	80022ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <HAL_I2C_MspInit+0x88>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	4a17      	ldr	r2, [pc, #92]	@ (80022d8 <HAL_I2C_MspInit+0x88>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6313      	str	r3, [r2, #48]	@ 0x30
 8002282:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <HAL_I2C_MspInit+0x88>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800228e:	23c0      	movs	r3, #192	@ 0xc0
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002292:	2312      	movs	r3, #18
 8002294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800229e:	2304      	movs	r3, #4
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	480c      	ldr	r0, [pc, #48]	@ (80022dc <HAL_I2C_MspInit+0x8c>)
 80022aa:	f001 fe91 	bl	8003fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <HAL_I2C_MspInit+0x88>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	4a08      	ldr	r2, [pc, #32]	@ (80022d8 <HAL_I2C_MspInit+0x88>)
 80022b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022be:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_I2C_MspInit+0x88>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	@ 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40005400 	.word	0x40005400
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020400 	.word	0x40020400

080022e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	@ 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a19      	ldr	r2, [pc, #100]	@ (8002364 <HAL_UART_MspInit+0x84>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d12b      	bne.n	800235a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b18      	ldr	r3, [pc, #96]	@ (8002368 <HAL_UART_MspInit+0x88>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	4a17      	ldr	r2, [pc, #92]	@ (8002368 <HAL_UART_MspInit+0x88>)
 800230c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002310:	6413      	str	r3, [r2, #64]	@ 0x40
 8002312:	4b15      	ldr	r3, [pc, #84]	@ (8002368 <HAL_UART_MspInit+0x88>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <HAL_UART_MspInit+0x88>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	4a10      	ldr	r2, [pc, #64]	@ (8002368 <HAL_UART_MspInit+0x88>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6313      	str	r3, [r2, #48]	@ 0x30
 800232e:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <HAL_UART_MspInit+0x88>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800233a:	230c      	movs	r3, #12
 800233c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800234a:	2307      	movs	r3, #7
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	4805      	ldr	r0, [pc, #20]	@ (800236c <HAL_UART_MspInit+0x8c>)
 8002356:	f001 fe3b 	bl	8003fd0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800235a:	bf00      	nop
 800235c:	3728      	adds	r7, #40	@ 0x28
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40004400 	.word	0x40004400
 8002368:	40023800 	.word	0x40023800
 800236c:	40020000 	.word	0x40020000

08002370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <NMI_Handler+0x4>

08002378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <HardFault_Handler+0x4>

08002380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <MemManage_Handler+0x4>

08002388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <UsageFault_Handler+0x4>

08002398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c6:	f000 f96b 	bl	80026a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023d4:	4802      	ldr	r0, [pc, #8]	@ (80023e0 <CAN1_RX0_IRQHandler+0x10>)
 80023d6:	f001 faba 	bl	800394e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200002a4 	.word	0x200002a4

080023e4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023e8:	4802      	ldr	r0, [pc, #8]	@ (80023f4 <CAN1_RX1_IRQHandler+0x10>)
 80023ea:	f001 fab0 	bl	800394e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200002a4 	.word	0x200002a4

080023f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return 1;
 80023fc:	2301      	movs	r3, #1
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_kill>:

int _kill(int pid, int sig)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002412:	f004 f9bd 	bl	8006790 <__errno>
 8002416:	4603      	mov	r3, r0
 8002418:	2216      	movs	r2, #22
 800241a:	601a      	str	r2, [r3, #0]
  return -1;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_exit>:

void _exit (int status)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ffe7 	bl	8002408 <_kill>
  while (1) {}    /* Make sure we hang here */
 800243a:	bf00      	nop
 800243c:	e7fd      	b.n	800243a <_exit+0x12>

0800243e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e00a      	b.n	8002466 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002450:	f3af 8000 	nop.w
 8002454:	4601      	mov	r1, r0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	60ba      	str	r2, [r7, #8]
 800245c:	b2ca      	uxtb	r2, r1
 800245e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3301      	adds	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	dbf0      	blt.n	8002450 <_read+0x12>
  }

  return len;
 800246e:	687b      	ldr	r3, [r7, #4]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e009      	b.n	800249e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	60ba      	str	r2, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dbf1      	blt.n	800248a <_write+0x12>
  }
  return len;
 80024a6:	687b      	ldr	r3, [r7, #4]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <_close>:

int _close(int file)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024d8:	605a      	str	r2, [r3, #4]
  return 0;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_isatty>:

int _isatty(int file)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024f0:	2301      	movs	r3, #1
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002520:	4a14      	ldr	r2, [pc, #80]	@ (8002574 <_sbrk+0x5c>)
 8002522:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <_sbrk+0x60>)
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800252c:	4b13      	ldr	r3, [pc, #76]	@ (800257c <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002534:	4b11      	ldr	r3, [pc, #68]	@ (800257c <_sbrk+0x64>)
 8002536:	4a12      	ldr	r2, [pc, #72]	@ (8002580 <_sbrk+0x68>)
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253a:	4b10      	ldr	r3, [pc, #64]	@ (800257c <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	429a      	cmp	r2, r3
 8002546:	d207      	bcs.n	8002558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002548:	f004 f922 	bl	8006790 <__errno>
 800254c:	4603      	mov	r3, r0
 800254e:	220c      	movs	r2, #12
 8002550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	e009      	b.n	800256c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002558:	4b08      	ldr	r3, [pc, #32]	@ (800257c <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255e:	4b07      	ldr	r3, [pc, #28]	@ (800257c <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	4a05      	ldr	r2, [pc, #20]	@ (800257c <_sbrk+0x64>)
 8002568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20020000 	.word	0x20020000
 8002578:	00000400 	.word	0x00000400
 800257c:	20000368 	.word	0x20000368
 8002580:	200004c0 	.word	0x200004c0

08002584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002588:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <SystemInit+0x20>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258e:	4a05      	ldr	r2, [pc, #20]	@ (80025a4 <SystemInit+0x20>)
 8002590:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002594:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025ac:	f7ff ffea 	bl	8002584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025b0:	480c      	ldr	r0, [pc, #48]	@ (80025e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025b2:	490d      	ldr	r1, [pc, #52]	@ (80025e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025b4:	4a0d      	ldr	r2, [pc, #52]	@ (80025ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c6:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c8:	4c0a      	ldr	r4, [pc, #40]	@ (80025f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80025d6:	f004 f8e1 	bl	800679c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025da:	f7ff fb65 	bl	8001ca8 <main>
  bx  lr    
 80025de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80025ec:	08008bfc 	.word	0x08008bfc
  ldr r2, =_sbss
 80025f0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80025f4:	200004bc 	.word	0x200004bc

080025f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f8:	e7fe      	b.n	80025f8 <ADC_IRQHandler>
	...

080025fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <HAL_Init+0x40>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <HAL_Init+0x40>)
 8002606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800260a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_Init+0x40>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <HAL_Init+0x40>)
 8002612:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002618:	4b08      	ldr	r3, [pc, #32]	@ (800263c <HAL_Init+0x40>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a07      	ldr	r2, [pc, #28]	@ (800263c <HAL_Init+0x40>)
 800261e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002624:	2003      	movs	r0, #3
 8002626:	f001 fc91 	bl	8003f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262a:	2000      	movs	r0, #0
 800262c:	f000 f808 	bl	8002640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002630:	f7ff fd2e 	bl	8002090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023c00 	.word	0x40023c00

08002640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002648:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_InitTick+0x54>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <HAL_InitTick+0x58>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002656:	fbb3 f3f1 	udiv	r3, r3, r1
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	4618      	mov	r0, r3
 8002660:	f001 fca9 	bl	8003fb6 <HAL_SYSTICK_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00e      	b.n	800268c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b0f      	cmp	r3, #15
 8002672:	d80a      	bhi.n	800268a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002674:	2200      	movs	r2, #0
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f001 fc71 	bl	8003f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002680:	4a06      	ldr	r2, [pc, #24]	@ (800269c <HAL_InitTick+0x5c>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000000 	.word	0x20000000
 8002698:	20000008 	.word	0x20000008
 800269c:	20000004 	.word	0x20000004

080026a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_IncTick+0x20>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_IncTick+0x24>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <HAL_IncTick+0x24>)
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000008 	.word	0x20000008
 80026c4:	2000036c 	.word	0x2000036c

080026c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b03      	ldr	r3, [pc, #12]	@ (80026dc <HAL_GetTick+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	2000036c 	.word	0x2000036c

080026e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff ffee 	bl	80026c8 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d005      	beq.n	8002706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <HAL_Delay+0x44>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002706:	bf00      	nop
 8002708:	f7ff ffde 	bl	80026c8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8f7      	bhi.n	8002708 <HAL_Delay+0x28>
  {
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000008 	.word	0x20000008

08002728 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e033      	b.n	80027a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fcca 	bl	80020e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d118      	bne.n	8002798 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800276e:	f023 0302 	bic.w	r3, r3, #2
 8002772:	f043 0202 	orr.w	r2, r3, #2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fab4 	bl	8002ce8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	@ 0x40
 8002796:	e001      	b.n	800279c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_Start+0x1a>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e0b2      	b.n	8002930 <HAL_ADC_Start+0x180>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d018      	beq.n	8002812 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027f0:	4b52      	ldr	r3, [pc, #328]	@ (800293c <HAL_ADC_Start+0x18c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a52      	ldr	r2, [pc, #328]	@ (8002940 <HAL_ADC_Start+0x190>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0c9a      	lsrs	r2, r3, #18
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002804:	e002      	b.n	800280c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	3b01      	subs	r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f9      	bne.n	8002806 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d17a      	bne.n	8002916 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800284a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800285a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800285e:	d106      	bne.n	800286e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002864:	f023 0206 	bic.w	r2, r3, #6
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	645a      	str	r2, [r3, #68]	@ 0x44
 800286c:	e002      	b.n	8002874 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800287c:	4b31      	ldr	r3, [pc, #196]	@ (8002944 <HAL_ADC_Start+0x194>)
 800287e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002888:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2b00      	cmp	r3, #0
 8002894:	d12a      	bne.n	80028ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2b      	ldr	r2, [pc, #172]	@ (8002948 <HAL_ADC_Start+0x198>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d015      	beq.n	80028cc <HAL_ADC_Start+0x11c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a29      	ldr	r2, [pc, #164]	@ (800294c <HAL_ADC_Start+0x19c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d105      	bne.n	80028b6 <HAL_ADC_Start+0x106>
 80028aa:	4b26      	ldr	r3, [pc, #152]	@ (8002944 <HAL_ADC_Start+0x194>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a25      	ldr	r2, [pc, #148]	@ (8002950 <HAL_ADC_Start+0x1a0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d136      	bne.n	800292e <HAL_ADC_Start+0x17e>
 80028c0:	4b20      	ldr	r3, [pc, #128]	@ (8002944 <HAL_ADC_Start+0x194>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d130      	bne.n	800292e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d129      	bne.n	800292e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	e020      	b.n	800292e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a15      	ldr	r2, [pc, #84]	@ (8002948 <HAL_ADC_Start+0x198>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d11b      	bne.n	800292e <HAL_ADC_Start+0x17e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d114      	bne.n	800292e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	e00b      	b.n	800292e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f043 0210 	orr.w	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f043 0201 	orr.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	20000000 	.word	0x20000000
 8002940:	431bde83 	.word	0x431bde83
 8002944:	40012300 	.word	0x40012300
 8002948:	40012000 	.word	0x40012000
 800294c:	40012100 	.word	0x40012100
 8002950:	40012200 	.word	0x40012200

08002954 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002970:	d113      	bne.n	800299a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800297c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002980:	d10b      	bne.n	800299a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f043 0220 	orr.w	r2, r3, #32
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e063      	b.n	8002a62 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800299a:	f7ff fe95 	bl	80026c8 <HAL_GetTick>
 800299e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029a0:	e021      	b.n	80029e6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d01d      	beq.n	80029e6 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_ADC_PollForConversion+0x6c>
 80029b0:	f7ff fe8a 	bl	80026c8 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d212      	bcs.n	80029e6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d00b      	beq.n	80029e6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f043 0204 	orr.w	r2, r3, #4
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e03d      	b.n	8002a62 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d1d6      	bne.n	80029a2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0212 	mvn.w	r2, #18
 80029fc:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d123      	bne.n	8002a60 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d11f      	bne.n	8002a60 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a26:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d111      	bne.n	8002a60 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d105      	bne.n	8002a60 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x1c>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e113      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x244>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b09      	cmp	r3, #9
 8002aae:	d925      	bls.n	8002afc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68d9      	ldr	r1, [r3, #12]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b1e      	subs	r3, #30
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43da      	mvns	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68d9      	ldr	r1, [r3, #12]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	4603      	mov	r3, r0
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4403      	add	r3, r0
 8002aee:	3b1e      	subs	r3, #30
 8002af0:	409a      	lsls	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	e022      	b.n	8002b42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6919      	ldr	r1, [r3, #16]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	2207      	movs	r2, #7
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6919      	ldr	r1, [r3, #16]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4403      	add	r3, r0
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d824      	bhi.n	8002b94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b05      	subs	r3, #5
 8002b5c:	221f      	movs	r2, #31
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	400a      	ands	r2, r1
 8002b6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	3b05      	subs	r3, #5
 8002b86:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b92:	e04c      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d824      	bhi.n	8002be6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	3b23      	subs	r3, #35	@ 0x23
 8002bae:	221f      	movs	r2, #31
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	400a      	ands	r2, r1
 8002bbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3b23      	subs	r3, #35	@ 0x23
 8002bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002be4:	e023      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b41      	subs	r3, #65	@ 0x41
 8002bf8:	221f      	movs	r2, #31
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	400a      	ands	r2, r1
 8002c06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4618      	mov	r0, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	3b41      	subs	r3, #65	@ 0x41
 8002c22:	fa00 f203 	lsl.w	r2, r0, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2e:	4b29      	ldr	r3, [pc, #164]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x250>)
 8002c30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a28      	ldr	r2, [pc, #160]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x254>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d10f      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x1d8>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b12      	cmp	r3, #18
 8002c42:	d10b      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x254>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d12b      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x23a>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cdc <HAL_ADC_ConfigChannel+0x258>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x1f4>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b11      	cmp	r3, #17
 8002c76:	d122      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a11      	ldr	r2, [pc, #68]	@ (8002cdc <HAL_ADC_ConfigChannel+0x258>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d111      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <HAL_ADC_ConfigChannel+0x25c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a11      	ldr	r2, [pc, #68]	@ (8002ce4 <HAL_ADC_ConfigChannel+0x260>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	0c9a      	lsrs	r2, r3, #18
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002cb0:	e002      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f9      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40012300 	.word	0x40012300
 8002cd8:	40012000 	.word	0x40012000
 8002cdc:	10000012 	.word	0x10000012
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	431bde83 	.word	0x431bde83

08002ce8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cf0:	4b79      	ldr	r3, [pc, #484]	@ (8002ed8 <ADC_Init+0x1f0>)
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	021a      	lsls	r2, r3, #8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6899      	ldr	r1, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7a:	4a58      	ldr	r2, [pc, #352]	@ (8002edc <ADC_Init+0x1f4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6899      	ldr	r1, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6899      	ldr	r1, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	e00f      	b.n	8002de6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002de4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0202 	bic.w	r2, r2, #2
 8002df4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7e1b      	ldrb	r3, [r3, #24]
 8002e00:	005a      	lsls	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01b      	beq.n	8002e4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e22:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	035a      	lsls	r2, r3, #13
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	e007      	b.n	8002e5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e5a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	051a      	lsls	r2, r3, #20
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6899      	ldr	r1, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e9e:	025a      	lsls	r2, r3, #9
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6899      	ldr	r1, [r3, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	029a      	lsls	r2, r3, #10
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40012300 	.word	0x40012300
 8002edc:	0f000001 	.word	0x0f000001

08002ee0 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_ADCEx_InjectedStart+0x22>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0aa      	b.n	8003058 <HAL_ADCEx_InjectedStart+0x178>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d018      	beq.n	8002f4a <HAL_ADCEx_InjectedStart+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f28:	4b4e      	ldr	r3, [pc, #312]	@ (8003064 <HAL_ADCEx_InjectedStart+0x184>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a4e      	ldr	r2, [pc, #312]	@ (8003068 <HAL_ADCEx_InjectedStart+0x188>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	0c9a      	lsrs	r2, r3, #18
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f3c:	e002      	b.n	8002f44 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f9      	bne.n	8002f3e <HAL_ADCEx_InjectedStart+0x5e>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d172      	bne.n	800303e <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d102      	bne.n	8002f7e <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f06f 0204 	mvn.w	r2, #4
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f90:	4b36      	ldr	r3, [pc, #216]	@ (800306c <HAL_ADCEx_InjectedStart+0x18c>)
 8002f92:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d124      	bne.n	8002fea <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf0c      	ite	eq
 8002fae:	2301      	moveq	r3, #1
 8002fb0:	2300      	movne	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	613b      	str	r3, [r7, #16]
      if (tmp1 && tmp2)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d041      	beq.n	8003056 <HAL_ADCEx_InjectedStart+0x176>
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d03e      	beq.n	8003056 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	e035      	b.n	8003056 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	613b      	str	r3, [r7, #16]
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a15      	ldr	r2, [pc, #84]	@ (8003070 <HAL_ADCEx_InjectedStart+0x190>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d11a      	bne.n	8003056 <HAL_ADCEx_InjectedStart+0x176>
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d017      	beq.n	8003056 <HAL_ADCEx_InjectedStart+0x176>
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d014      	beq.n	8003056 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	e00b      	b.n	8003056 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	f043 0210 	orr.w	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	20000000 	.word	0x20000000
 8003068:	431bde83 	.word	0x431bde83
 800306c:	40012300 	.word	0x40012300
 8003070:	40012000 	.word	0x40012000

08003074 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e0ed      	b.n	8003262 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff f884 	bl	80021a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030a8:	f7ff fb0e 	bl	80026c8 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030ae:	e012      	b.n	80030d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030b0:	f7ff fb0a 	bl	80026c8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b0a      	cmp	r3, #10
 80030bc:	d90b      	bls.n	80030d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2205      	movs	r2, #5
 80030ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0c5      	b.n	8003262 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0e5      	beq.n	80030b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0202 	bic.w	r2, r2, #2
 80030f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f4:	f7ff fae8 	bl	80026c8 <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030fa:	e012      	b.n	8003122 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030fc:	f7ff fae4 	bl	80026c8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b0a      	cmp	r3, #10
 8003108:	d90b      	bls.n	8003122 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2205      	movs	r2, #5
 800311a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e09f      	b.n	8003262 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1e5      	bne.n	80030fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	7e1b      	ldrb	r3, [r3, #24]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d108      	bne.n	800314a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e007      	b.n	800315a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003158:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7e5b      	ldrb	r3, [r3, #25]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d108      	bne.n	8003174 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e007      	b.n	8003184 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003182:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7e9b      	ldrb	r3, [r3, #26]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d108      	bne.n	800319e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0220 	orr.w	r2, r2, #32
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e007      	b.n	80031ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0220 	bic.w	r2, r2, #32
 80031ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	7edb      	ldrb	r3, [r3, #27]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d108      	bne.n	80031c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0210 	bic.w	r2, r2, #16
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e007      	b.n	80031d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0210 	orr.w	r2, r2, #16
 80031d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7f1b      	ldrb	r3, [r3, #28]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d108      	bne.n	80031f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0208 	orr.w	r2, r2, #8
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e007      	b.n	8003202 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0208 	bic.w	r2, r2, #8
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7f5b      	ldrb	r3, [r3, #29]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0204 	orr.w	r2, r2, #4
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e007      	b.n	800322c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0204 	bic.w	r2, r2, #4
 800322a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	ea42 0103 	orr.w	r1, r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	1e5a      	subs	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003282:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d003      	beq.n	8003292 <HAL_CAN_ConfigFilter+0x26>
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	2b02      	cmp	r3, #2
 800328e:	f040 80be 	bne.w	800340e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003292:	4b65      	ldr	r3, [pc, #404]	@ (8003428 <HAL_CAN_ConfigFilter+0x1bc>)
 8003294:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800329c:	f043 0201 	orr.w	r2, r3, #1
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80032ac:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	431a      	orrs	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	2201      	movs	r2, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	401a      	ands	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d123      	bne.n	800333c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	401a      	ands	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003316:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	3248      	adds	r2, #72	@ 0x48
 800331c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003330:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003332:	6979      	ldr	r1, [r7, #20]
 8003334:	3348      	adds	r3, #72	@ 0x48
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	440b      	add	r3, r1
 800333a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d122      	bne.n	800338a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	431a      	orrs	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003364:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3248      	adds	r2, #72	@ 0x48
 800336a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800337e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003380:	6979      	ldr	r1, [r7, #20]
 8003382:	3348      	adds	r3, #72	@ 0x48
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	43db      	mvns	r3, r3
 800339c:	401a      	ands	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80033a4:	e007      	b.n	80033b6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	401a      	ands	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80033d0:	e007      	b.n	80033e2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	431a      	orrs	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d107      	bne.n	80033fa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003400:	f023 0201 	bic.w	r2, r3, #1
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	e006      	b.n	800341c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
  }
}
 800341c:	4618      	mov	r0, r3
 800341e:	371c      	adds	r7, #28
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40006400 	.word	0x40006400

0800342c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d12e      	bne.n	800349e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0201 	bic.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003458:	f7ff f936 	bl	80026c8 <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800345e:	e012      	b.n	8003486 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003460:	f7ff f932 	bl	80026c8 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b0a      	cmp	r3, #10
 800346c:	d90b      	bls.n	8003486 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2205      	movs	r2, #5
 800347e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e012      	b.n	80034ac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e5      	bne.n	8003460 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	e006      	b.n	80034ac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	@ 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80034d2:	7ffb      	ldrb	r3, [r7, #31]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d003      	beq.n	80034e0 <HAL_CAN_AddTxMessage+0x2c>
 80034d8:	7ffb      	ldrb	r3, [r7, #31]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	f040 80ad 	bne.w	800363a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8095 	beq.w	800362a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	0e1b      	lsrs	r3, r3, #24
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800350a:	2201      	movs	r2, #1
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	409a      	lsls	r2, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10d      	bne.n	8003538 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003526:	68f9      	ldr	r1, [r7, #12]
 8003528:	6809      	ldr	r1, [r1, #0]
 800352a:	431a      	orrs	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3318      	adds	r3, #24
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	440b      	add	r3, r1
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	e00f      	b.n	8003558 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003542:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003548:	68f9      	ldr	r1, [r7, #12]
 800354a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800354c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	3318      	adds	r3, #24
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	440b      	add	r3, r1
 8003556:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6819      	ldr	r1, [r3, #0]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3318      	adds	r3, #24
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	440b      	add	r3, r1
 8003568:	3304      	adds	r3, #4
 800356a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	7d1b      	ldrb	r3, [r3, #20]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d111      	bne.n	8003598 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3318      	adds	r3, #24
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	4413      	add	r3, r2
 8003580:	3304      	adds	r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	6811      	ldr	r1, [r2, #0]
 8003588:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	3318      	adds	r3, #24
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	440b      	add	r3, r1
 8003594:	3304      	adds	r3, #4
 8003596:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3307      	adds	r3, #7
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	061a      	lsls	r2, r3, #24
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3306      	adds	r3, #6
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	041b      	lsls	r3, r3, #16
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3305      	adds	r3, #5
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	4313      	orrs	r3, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	3204      	adds	r2, #4
 80035b8:	7812      	ldrb	r2, [r2, #0]
 80035ba:	4610      	mov	r0, r2
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	6811      	ldr	r1, [r2, #0]
 80035c0:	ea43 0200 	orr.w	r2, r3, r0
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	440b      	add	r3, r1
 80035ca:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80035ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3303      	adds	r3, #3
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	061a      	lsls	r2, r3, #24
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3302      	adds	r3, #2
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	041b      	lsls	r3, r3, #16
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3301      	adds	r3, #1
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	4313      	orrs	r3, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	7812      	ldrb	r2, [r2, #0]
 80035f0:	4610      	mov	r0, r2
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	6811      	ldr	r1, [r2, #0]
 80035f6:	ea43 0200 	orr.w	r2, r3, r0
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	440b      	add	r3, r1
 8003600:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003604:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	3318      	adds	r3, #24
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	4413      	add	r3, r2
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	6811      	ldr	r1, [r2, #0]
 8003618:	f043 0201 	orr.w	r2, r3, #1
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3318      	adds	r3, #24
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	440b      	add	r3, r1
 8003624:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e00e      	b.n	8003648 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e006      	b.n	8003648 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
  }
}
 8003648:	4618      	mov	r0, r3
 800364a:	3724      	adds	r7, #36	@ 0x24
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003666:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003668:	7afb      	ldrb	r3, [r7, #11]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d002      	beq.n	8003674 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800366e:	7afb      	ldrb	r3, [r7, #11]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d11d      	bne.n	80036b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3301      	adds	r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3301      	adds	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3301      	adds	r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80036b0:	68fb      	ldr	r3, [r7, #12]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80036be:	b480      	push	{r7}
 80036c0:	b087      	sub	sp, #28
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d003      	beq.n	80036e2 <HAL_CAN_GetRxMessage+0x24>
 80036da:	7dfb      	ldrb	r3, [r7, #23]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	f040 8103 	bne.w	80038e8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10e      	bne.n	8003706 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d116      	bne.n	8003724 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0f7      	b.n	80038f6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0e8      	b.n	80038f6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	331b      	adds	r3, #27
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	4413      	add	r3, r2
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0204 	and.w	r2, r3, #4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	331b      	adds	r3, #27
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	4413      	add	r3, r2
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	0d5b      	lsrs	r3, r3, #21
 8003752:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e00b      	b.n	8003774 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	331b      	adds	r3, #27
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	4413      	add	r3, r2
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	08db      	lsrs	r3, r3, #3
 800376c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	331b      	adds	r3, #27
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	4413      	add	r3, r2
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0202 	and.w	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	331b      	adds	r3, #27
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	4413      	add	r3, r2
 8003796:	3304      	adds	r3, #4
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2208      	movs	r2, #8
 80037a6:	611a      	str	r2, [r3, #16]
 80037a8:	e00b      	b.n	80037c2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	331b      	adds	r3, #27
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	4413      	add	r3, r2
 80037b6:	3304      	adds	r3, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	331b      	adds	r3, #27
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	331b      	adds	r3, #27
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	4413      	add	r3, r2
 80037e6:	3304      	adds	r3, #4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	0c1b      	lsrs	r3, r3, #16
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	b2da      	uxtb	r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	4413      	add	r3, r2
 8003812:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	0a1a      	lsrs	r2, r3, #8
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	4413      	add	r3, r2
 800382c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	0c1a      	lsrs	r2, r3, #16
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	3302      	adds	r3, #2
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	4413      	add	r3, r2
 8003846:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0e1a      	lsrs	r2, r3, #24
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	3303      	adds	r3, #3
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4413      	add	r3, r2
 8003860:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	3304      	adds	r3, #4
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	4413      	add	r3, r2
 8003878:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	0a1a      	lsrs	r2, r3, #8
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	3305      	adds	r3, #5
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	4413      	add	r3, r2
 8003892:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	0c1a      	lsrs	r2, r3, #16
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	3306      	adds	r3, #6
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	0e1a      	lsrs	r2, r3, #24
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	3307      	adds	r3, #7
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d108      	bne.n	80038d4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0220 	orr.w	r2, r2, #32
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	e007      	b.n	80038e4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0220 	orr.w	r2, r2, #32
 80038e2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e006      	b.n	80038f6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003912:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d002      	beq.n	8003920 <HAL_CAN_ActivateNotification+0x1e>
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d109      	bne.n	8003934 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6959      	ldr	r1, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	e006      	b.n	8003942 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b08a      	sub	sp, #40	@ 0x28
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d07c      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d023      	beq.n	80039e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2201      	movs	r2, #1
 80039a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f983 	bl	8003cbc <HAL_CAN_TxMailbox0CompleteCallback>
 80039b6:	e016      	b.n	80039e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ca:	e00c      	b.n	80039e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80039de:	e002      	b.n	80039e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f989 	bl	8003cf8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d024      	beq.n	8003a3a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f963 	bl	8003cd0 <HAL_CAN_TxMailbox1CompleteCallback>
 8003a0a:	e016      	b.n	8003a3a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1e:	e00c      	b.n	8003a3a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a32:	e002      	b.n	8003a3a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f969 	bl	8003d0c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d024      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f943 	bl	8003ce4 <HAL_CAN_TxMailbox2CompleteCallback>
 8003a5e:	e016      	b.n	8003a8e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a72:	e00c      	b.n	8003a8e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a86:	e002      	b.n	8003a8e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f949 	bl	8003d20 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00c      	beq.n	8003ab2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d007      	beq.n	8003ab2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2210      	movs	r2, #16
 8003ab0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00b      	beq.n	8003ad4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d006      	beq.n	8003ad4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2208      	movs	r2, #8
 8003acc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f930 	bl	8003d34 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fe f8b9 	bl	8001c64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2210      	movs	r2, #16
 8003b14:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d006      	beq.n	8003b38 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2208      	movs	r2, #8
 8003b30:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f912 	bl	8003d5c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	f003 0310 	and.w	r3, r3, #16
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f8f9 	bl	8003d48 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00b      	beq.n	8003b78 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d006      	beq.n	8003b78 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2210      	movs	r2, #16
 8003b70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f8fc 	bl	8003d70 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d006      	beq.n	8003b9a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2208      	movs	r2, #8
 8003b92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f8f5 	bl	8003d84 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d07b      	beq.n	8003c9c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d072      	beq.n	8003c94 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d043      	beq.n	8003c94 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d03e      	beq.n	8003c94 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c1c:	2b60      	cmp	r3, #96	@ 0x60
 8003c1e:	d02b      	beq.n	8003c78 <HAL_CAN_IRQHandler+0x32a>
 8003c20:	2b60      	cmp	r3, #96	@ 0x60
 8003c22:	d82e      	bhi.n	8003c82 <HAL_CAN_IRQHandler+0x334>
 8003c24:	2b50      	cmp	r3, #80	@ 0x50
 8003c26:	d022      	beq.n	8003c6e <HAL_CAN_IRQHandler+0x320>
 8003c28:	2b50      	cmp	r3, #80	@ 0x50
 8003c2a:	d82a      	bhi.n	8003c82 <HAL_CAN_IRQHandler+0x334>
 8003c2c:	2b40      	cmp	r3, #64	@ 0x40
 8003c2e:	d019      	beq.n	8003c64 <HAL_CAN_IRQHandler+0x316>
 8003c30:	2b40      	cmp	r3, #64	@ 0x40
 8003c32:	d826      	bhi.n	8003c82 <HAL_CAN_IRQHandler+0x334>
 8003c34:	2b30      	cmp	r3, #48	@ 0x30
 8003c36:	d010      	beq.n	8003c5a <HAL_CAN_IRQHandler+0x30c>
 8003c38:	2b30      	cmp	r3, #48	@ 0x30
 8003c3a:	d822      	bhi.n	8003c82 <HAL_CAN_IRQHandler+0x334>
 8003c3c:	2b10      	cmp	r3, #16
 8003c3e:	d002      	beq.n	8003c46 <HAL_CAN_IRQHandler+0x2f8>
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d005      	beq.n	8003c50 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c44:	e01d      	b.n	8003c82 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	f043 0308 	orr.w	r3, r3, #8
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003c4e:	e019      	b.n	8003c84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	f043 0310 	orr.w	r3, r3, #16
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003c58:	e014      	b.n	8003c84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	f043 0320 	orr.w	r3, r3, #32
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003c62:	e00f      	b.n	8003c84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003c6c:	e00a      	b.n	8003c84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003c76:	e005      	b.n	8003c84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003c80:	e000      	b.n	8003c84 <HAL_CAN_IRQHandler+0x336>
            break;
 8003c82:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003c92:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2204      	movs	r2, #4
 8003c9a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f872 	bl	8003d98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3728      	adds	r7, #40	@ 0x28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dde:	4a04      	ldr	r2, [pc, #16]	@ (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	60d3      	str	r3, [r2, #12]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df8:	4b04      	ldr	r3, [pc, #16]	@ (8003e0c <__NVIC_GetPriorityGrouping+0x18>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	f003 0307 	and.w	r3, r3, #7
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	db0b      	blt.n	8003e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	f003 021f 	and.w	r2, r3, #31
 8003e28:	4907      	ldr	r1, [pc, #28]	@ (8003e48 <__NVIC_EnableIRQ+0x38>)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2001      	movs	r0, #1
 8003e32:	fa00 f202 	lsl.w	r2, r0, r2
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e000e100 	.word	0xe000e100

08003e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	6039      	str	r1, [r7, #0]
 8003e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	db0a      	blt.n	8003e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	490c      	ldr	r1, [pc, #48]	@ (8003e98 <__NVIC_SetPriority+0x4c>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e74:	e00a      	b.n	8003e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4908      	ldr	r1, [pc, #32]	@ (8003e9c <__NVIC_SetPriority+0x50>)
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	3b04      	subs	r3, #4
 8003e84:	0112      	lsls	r2, r2, #4
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	440b      	add	r3, r1
 8003e8a:	761a      	strb	r2, [r3, #24]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000e100 	.word	0xe000e100
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	@ 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f1c3 0307 	rsb	r3, r3, #7
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	bf28      	it	cs
 8003ebe:	2304      	movcs	r3, #4
 8003ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d902      	bls.n	8003ed0 <NVIC_EncodePriority+0x30>
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3b03      	subs	r3, #3
 8003ece:	e000      	b.n	8003ed2 <NVIC_EncodePriority+0x32>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	43d9      	mvns	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef8:	4313      	orrs	r3, r2
         );
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3724      	adds	r7, #36	@ 0x24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f18:	d301      	bcc.n	8003f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e00f      	b.n	8003f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f48 <SysTick_Config+0x40>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f26:	210f      	movs	r1, #15
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	f7ff ff8e 	bl	8003e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f30:	4b05      	ldr	r3, [pc, #20]	@ (8003f48 <SysTick_Config+0x40>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f36:	4b04      	ldr	r3, [pc, #16]	@ (8003f48 <SysTick_Config+0x40>)
 8003f38:	2207      	movs	r2, #7
 8003f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	e000e010 	.word	0xe000e010

08003f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff29 	bl	8003dac <__NVIC_SetPriorityGrouping>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	4603      	mov	r3, r0
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f74:	f7ff ff3e 	bl	8003df4 <__NVIC_GetPriorityGrouping>
 8003f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	6978      	ldr	r0, [r7, #20]
 8003f80:	f7ff ff8e 	bl	8003ea0 <NVIC_EncodePriority>
 8003f84:	4602      	mov	r2, r0
 8003f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff ff5d 	bl	8003e4c <__NVIC_SetPriority>
}
 8003f92:	bf00      	nop
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff31 	bl	8003e10 <__NVIC_EnableIRQ>
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ffa2 	bl	8003f08 <SysTick_Config>
 8003fc4:	4603      	mov	r3, r0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	@ 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	e165      	b.n	80042b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fec:	2201      	movs	r2, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	f040 8154 	bne.w	80042b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b01      	cmp	r3, #1
 8004014:	d005      	beq.n	8004022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800401e:	2b02      	cmp	r3, #2
 8004020:	d130      	bne.n	8004084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	2203      	movs	r2, #3
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004058:	2201      	movs	r2, #1
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 0201 	and.w	r2, r3, #1
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	2b03      	cmp	r3, #3
 800408e:	d017      	beq.n	80040c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2203      	movs	r2, #3
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d123      	bne.n	8004114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	08da      	lsrs	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3208      	adds	r2, #8
 80040d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	220f      	movs	r2, #15
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	08da      	lsrs	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3208      	adds	r2, #8
 800410e:	69b9      	ldr	r1, [r7, #24]
 8004110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	2203      	movs	r2, #3
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0203 	and.w	r2, r3, #3
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80ae 	beq.w	80042b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	4b5d      	ldr	r3, [pc, #372]	@ (80042d0 <HAL_GPIO_Init+0x300>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415e:	4a5c      	ldr	r2, [pc, #368]	@ (80042d0 <HAL_GPIO_Init+0x300>)
 8004160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004164:	6453      	str	r3, [r2, #68]	@ 0x44
 8004166:	4b5a      	ldr	r3, [pc, #360]	@ (80042d0 <HAL_GPIO_Init+0x300>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004172:	4a58      	ldr	r2, [pc, #352]	@ (80042d4 <HAL_GPIO_Init+0x304>)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	220f      	movs	r2, #15
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a4f      	ldr	r2, [pc, #316]	@ (80042d8 <HAL_GPIO_Init+0x308>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d025      	beq.n	80041ea <HAL_GPIO_Init+0x21a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a4e      	ldr	r2, [pc, #312]	@ (80042dc <HAL_GPIO_Init+0x30c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01f      	beq.n	80041e6 <HAL_GPIO_Init+0x216>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4d      	ldr	r2, [pc, #308]	@ (80042e0 <HAL_GPIO_Init+0x310>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d019      	beq.n	80041e2 <HAL_GPIO_Init+0x212>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4c      	ldr	r2, [pc, #304]	@ (80042e4 <HAL_GPIO_Init+0x314>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_GPIO_Init+0x20e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4b      	ldr	r2, [pc, #300]	@ (80042e8 <HAL_GPIO_Init+0x318>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00d      	beq.n	80041da <HAL_GPIO_Init+0x20a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4a      	ldr	r2, [pc, #296]	@ (80042ec <HAL_GPIO_Init+0x31c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d007      	beq.n	80041d6 <HAL_GPIO_Init+0x206>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a49      	ldr	r2, [pc, #292]	@ (80042f0 <HAL_GPIO_Init+0x320>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d101      	bne.n	80041d2 <HAL_GPIO_Init+0x202>
 80041ce:	2306      	movs	r3, #6
 80041d0:	e00c      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041d2:	2307      	movs	r3, #7
 80041d4:	e00a      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041d6:	2305      	movs	r3, #5
 80041d8:	e008      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041da:	2304      	movs	r3, #4
 80041dc:	e006      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041de:	2303      	movs	r3, #3
 80041e0:	e004      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e002      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_GPIO_Init+0x21c>
 80041ea:	2300      	movs	r3, #0
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	f002 0203 	and.w	r2, r2, #3
 80041f2:	0092      	lsls	r2, r2, #2
 80041f4:	4093      	lsls	r3, r2
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041fc:	4935      	ldr	r1, [pc, #212]	@ (80042d4 <HAL_GPIO_Init+0x304>)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	3302      	adds	r3, #2
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800420a:	4b3a      	ldr	r3, [pc, #232]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	43db      	mvns	r3, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800422e:	4a31      	ldr	r2, [pc, #196]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004234:	4b2f      	ldr	r3, [pc, #188]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	43db      	mvns	r3, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4013      	ands	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004258:	4a26      	ldr	r2, [pc, #152]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800425e:	4b25      	ldr	r3, [pc, #148]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	43db      	mvns	r3, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004282:	4a1c      	ldr	r2, [pc, #112]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004288:	4b1a      	ldr	r3, [pc, #104]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	43db      	mvns	r3, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	4013      	ands	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042ac:	4a11      	ldr	r2, [pc, #68]	@ (80042f4 <HAL_GPIO_Init+0x324>)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3301      	adds	r3, #1
 80042b6:	61fb      	str	r3, [r7, #28]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b0f      	cmp	r3, #15
 80042bc:	f67f ae96 	bls.w	8003fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	3724      	adds	r7, #36	@ 0x24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40013800 	.word	0x40013800
 80042d8:	40020000 	.word	0x40020000
 80042dc:	40020400 	.word	0x40020400
 80042e0:	40020800 	.word	0x40020800
 80042e4:	40020c00 	.word	0x40020c00
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40021400 	.word	0x40021400
 80042f0:	40021800 	.word	0x40021800
 80042f4:	40013c00 	.word	0x40013c00

080042f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
 8004304:	4613      	mov	r3, r2
 8004306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004308:	787b      	ldrb	r3, [r7, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800430e:	887a      	ldrh	r2, [r7, #2]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004314:	e003      	b.n	800431e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004316:	887b      	ldrh	r3, [r7, #2]
 8004318:	041a      	lsls	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	619a      	str	r2, [r3, #24]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e12b      	b.n	8004596 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fd ff7c 	bl	8002250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	@ 0x24
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800437e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800438e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004390:	f000 fa52 	bl	8004838 <HAL_RCC_GetPCLK1Freq>
 8004394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4a81      	ldr	r2, [pc, #516]	@ (80045a0 <HAL_I2C_Init+0x274>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d807      	bhi.n	80043b0 <HAL_I2C_Init+0x84>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4a80      	ldr	r2, [pc, #512]	@ (80045a4 <HAL_I2C_Init+0x278>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	bf94      	ite	ls
 80043a8:	2301      	movls	r3, #1
 80043aa:	2300      	movhi	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	e006      	b.n	80043be <HAL_I2C_Init+0x92>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a7d      	ldr	r2, [pc, #500]	@ (80045a8 <HAL_I2C_Init+0x27c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	bf94      	ite	ls
 80043b8:	2301      	movls	r3, #1
 80043ba:	2300      	movhi	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e0e7      	b.n	8004596 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4a78      	ldr	r2, [pc, #480]	@ (80045ac <HAL_I2C_Init+0x280>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	0c9b      	lsrs	r3, r3, #18
 80043d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	4a6a      	ldr	r2, [pc, #424]	@ (80045a0 <HAL_I2C_Init+0x274>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d802      	bhi.n	8004400 <HAL_I2C_Init+0xd4>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	3301      	adds	r3, #1
 80043fe:	e009      	b.n	8004414 <HAL_I2C_Init+0xe8>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	4a69      	ldr	r2, [pc, #420]	@ (80045b0 <HAL_I2C_Init+0x284>)
 800440c:	fba2 2303 	umull	r2, r3, r2, r3
 8004410:	099b      	lsrs	r3, r3, #6
 8004412:	3301      	adds	r3, #1
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	430b      	orrs	r3, r1
 800441a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004426:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	495c      	ldr	r1, [pc, #368]	@ (80045a0 <HAL_I2C_Init+0x274>)
 8004430:	428b      	cmp	r3, r1
 8004432:	d819      	bhi.n	8004468 <HAL_I2C_Init+0x13c>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1e59      	subs	r1, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004442:	1c59      	adds	r1, r3, #1
 8004444:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004448:	400b      	ands	r3, r1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_I2C_Init+0x138>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1e59      	subs	r1, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	fbb1 f3f3 	udiv	r3, r1, r3
 800445c:	3301      	adds	r3, #1
 800445e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004462:	e051      	b.n	8004508 <HAL_I2C_Init+0x1dc>
 8004464:	2304      	movs	r3, #4
 8004466:	e04f      	b.n	8004508 <HAL_I2C_Init+0x1dc>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d111      	bne.n	8004494 <HAL_I2C_Init+0x168>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1e58      	subs	r0, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	440b      	add	r3, r1
 800447e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004482:	3301      	adds	r3, #1
 8004484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	e012      	b.n	80044ba <HAL_I2C_Init+0x18e>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	1e58      	subs	r0, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6859      	ldr	r1, [r3, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	0099      	lsls	r1, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044aa:	3301      	adds	r3, #1
 80044ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_I2C_Init+0x196>
 80044be:	2301      	movs	r3, #1
 80044c0:	e022      	b.n	8004508 <HAL_I2C_Init+0x1dc>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10e      	bne.n	80044e8 <HAL_I2C_Init+0x1bc>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1e58      	subs	r0, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6859      	ldr	r1, [r3, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	440b      	add	r3, r1
 80044d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80044dc:	3301      	adds	r3, #1
 80044de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e6:	e00f      	b.n	8004508 <HAL_I2C_Init+0x1dc>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1e58      	subs	r0, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	0099      	lsls	r1, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fe:	3301      	adds	r3, #1
 8004500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004504:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	6809      	ldr	r1, [r1, #0]
 800450c:	4313      	orrs	r3, r2
 800450e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004536:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6911      	ldr	r1, [r2, #16]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68d2      	ldr	r2, [r2, #12]
 8004542:	4311      	orrs	r1, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	430b      	orrs	r3, r1
 800454a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	000186a0 	.word	0x000186a0
 80045a4:	001e847f 	.word	0x001e847f
 80045a8:	003d08ff 	.word	0x003d08ff
 80045ac:	431bde83 	.word	0x431bde83
 80045b0:	10624dd3 	.word	0x10624dd3

080045b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <HAL_PWREx_EnableOverDrive+0x90>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004644 <HAL_PWREx_EnableOverDrive+0x90>)
 80045c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004644 <HAL_PWREx_EnableOverDrive+0x90>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045da:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <HAL_PWREx_EnableOverDrive+0x94>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045e0:	f7fe f872 	bl	80026c8 <HAL_GetTick>
 80045e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045e6:	e009      	b.n	80045fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045e8:	f7fe f86e 	bl	80026c8 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045f6:	d901      	bls.n	80045fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e01f      	b.n	800463c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045fc:	4b13      	ldr	r3, [pc, #76]	@ (800464c <HAL_PWREx_EnableOverDrive+0x98>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004608:	d1ee      	bne.n	80045e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800460a:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004610:	f7fe f85a 	bl	80026c8 <HAL_GetTick>
 8004614:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004616:	e009      	b.n	800462c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004618:	f7fe f856 	bl	80026c8 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004626:	d901      	bls.n	800462c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e007      	b.n	800463c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800462c:	4b07      	ldr	r3, [pc, #28]	@ (800464c <HAL_PWREx_EnableOverDrive+0x98>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004634:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004638:	d1ee      	bne.n	8004618 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40023800 	.word	0x40023800
 8004648:	420e0040 	.word	0x420e0040
 800464c:	40007000 	.word	0x40007000
 8004650:	420e0044 	.word	0x420e0044

08004654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0cc      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004668:	4b68      	ldr	r3, [pc, #416]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d90c      	bls.n	8004690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004676:	4b65      	ldr	r3, [pc, #404]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b63      	ldr	r3, [pc, #396]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0b8      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d020      	beq.n	80046de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a8:	4b59      	ldr	r3, [pc, #356]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4a58      	ldr	r2, [pc, #352]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c0:	4b53      	ldr	r3, [pc, #332]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4a52      	ldr	r2, [pc, #328]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046cc:	4b50      	ldr	r3, [pc, #320]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	494d      	ldr	r1, [pc, #308]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d044      	beq.n	8004774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	4b47      	ldr	r3, [pc, #284]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d119      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e07f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d003      	beq.n	8004712 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800470e:	2b03      	cmp	r3, #3
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004712:	4b3f      	ldr	r3, [pc, #252]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e06f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004722:	4b3b      	ldr	r3, [pc, #236]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e067      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004732:	4b37      	ldr	r3, [pc, #220]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f023 0203 	bic.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4934      	ldr	r1, [pc, #208]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	4313      	orrs	r3, r2
 8004742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004744:	f7fd ffc0 	bl	80026c8 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	e00a      	b.n	8004762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474c:	f7fd ffbc 	bl	80026c8 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e04f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004762:	4b2b      	ldr	r3, [pc, #172]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 020c 	and.w	r2, r3, #12
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	429a      	cmp	r2, r3
 8004772:	d1eb      	bne.n	800474c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004774:	4b25      	ldr	r3, [pc, #148]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d20c      	bcs.n	800479c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b22      	ldr	r3, [pc, #136]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b20      	ldr	r3, [pc, #128]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e032      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a8:	4b19      	ldr	r3, [pc, #100]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4916      	ldr	r1, [pc, #88]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047c6:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	490e      	ldr	r1, [pc, #56]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047da:	f000 f855 	bl	8004888 <HAL_RCC_GetSysClockFreq>
 80047de:	4602      	mov	r2, r0
 80047e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	490a      	ldr	r1, [pc, #40]	@ (8004814 <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	5ccb      	ldrb	r3, [r1, r3]
 80047ee:	fa22 f303 	lsr.w	r3, r2, r3
 80047f2:	4a09      	ldr	r2, [pc, #36]	@ (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047f6:	4b09      	ldr	r3, [pc, #36]	@ (800481c <HAL_RCC_ClockConfig+0x1c8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd ff20 	bl	8002640 <HAL_InitTick>

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40023c00 	.word	0x40023c00
 8004810:	40023800 	.word	0x40023800
 8004814:	08008860 	.word	0x08008860
 8004818:	20000000 	.word	0x20000000
 800481c:	20000004 	.word	0x20000004

08004820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004824:	4b03      	ldr	r3, [pc, #12]	@ (8004834 <HAL_RCC_GetHCLKFreq+0x14>)
 8004826:	681b      	ldr	r3, [r3, #0]
}
 8004828:	4618      	mov	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000000 	.word	0x20000000

08004838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800483c:	f7ff fff0 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8004840:	4602      	mov	r2, r0
 8004842:	4b05      	ldr	r3, [pc, #20]	@ (8004858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	0a9b      	lsrs	r3, r3, #10
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4903      	ldr	r1, [pc, #12]	@ (800485c <HAL_RCC_GetPCLK1Freq+0x24>)
 800484e:	5ccb      	ldrb	r3, [r1, r3]
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004854:	4618      	mov	r0, r3
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40023800 	.word	0x40023800
 800485c:	08008870 	.word	0x08008870

08004860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004864:	f7ff ffdc 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8004868:	4602      	mov	r2, r0
 800486a:	4b05      	ldr	r3, [pc, #20]	@ (8004880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	0b5b      	lsrs	r3, r3, #13
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	4903      	ldr	r1, [pc, #12]	@ (8004884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004876:	5ccb      	ldrb	r3, [r1, r3]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40023800 	.word	0x40023800
 8004884:	08008870 	.word	0x08008870

08004888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800488c:	b0ae      	sub	sp, #184	@ 0xb8
 800488e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ae:	4bcb      	ldr	r3, [pc, #812]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x354>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b0c      	cmp	r3, #12
 80048b8:	f200 8206 	bhi.w	8004cc8 <HAL_RCC_GetSysClockFreq+0x440>
 80048bc:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80048be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c2:	bf00      	nop
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	08004cc9 	.word	0x08004cc9
 80048cc:	08004cc9 	.word	0x08004cc9
 80048d0:	08004cc9 	.word	0x08004cc9
 80048d4:	08004901 	.word	0x08004901
 80048d8:	08004cc9 	.word	0x08004cc9
 80048dc:	08004cc9 	.word	0x08004cc9
 80048e0:	08004cc9 	.word	0x08004cc9
 80048e4:	08004909 	.word	0x08004909
 80048e8:	08004cc9 	.word	0x08004cc9
 80048ec:	08004cc9 	.word	0x08004cc9
 80048f0:	08004cc9 	.word	0x08004cc9
 80048f4:	08004af9 	.word	0x08004af9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048f8:	4bb9      	ldr	r3, [pc, #740]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x358>)
 80048fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048fe:	e1e7      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004900:	4bb8      	ldr	r3, [pc, #736]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004902:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004906:	e1e3      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004908:	4bb4      	ldr	r3, [pc, #720]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x354>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004910:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004914:	4bb1      	ldr	r3, [pc, #708]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d071      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004920:	4bae      	ldr	r3, [pc, #696]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	099b      	lsrs	r3, r3, #6
 8004926:	2200      	movs	r2, #0
 8004928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800492c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004930:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004938:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800493c:	2300      	movs	r3, #0
 800493e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004946:	4622      	mov	r2, r4
 8004948:	462b      	mov	r3, r5
 800494a:	f04f 0000 	mov.w	r0, #0
 800494e:	f04f 0100 	mov.w	r1, #0
 8004952:	0159      	lsls	r1, r3, #5
 8004954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004958:	0150      	lsls	r0, r2, #5
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4621      	mov	r1, r4
 8004960:	1a51      	subs	r1, r2, r1
 8004962:	6439      	str	r1, [r7, #64]	@ 0x40
 8004964:	4629      	mov	r1, r5
 8004966:	eb63 0301 	sbc.w	r3, r3, r1
 800496a:	647b      	str	r3, [r7, #68]	@ 0x44
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004978:	4649      	mov	r1, r9
 800497a:	018b      	lsls	r3, r1, #6
 800497c:	4641      	mov	r1, r8
 800497e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004982:	4641      	mov	r1, r8
 8004984:	018a      	lsls	r2, r1, #6
 8004986:	4641      	mov	r1, r8
 8004988:	1a51      	subs	r1, r2, r1
 800498a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800498c:	4649      	mov	r1, r9
 800498e:	eb63 0301 	sbc.w	r3, r3, r1
 8004992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80049a0:	4649      	mov	r1, r9
 80049a2:	00cb      	lsls	r3, r1, #3
 80049a4:	4641      	mov	r1, r8
 80049a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049aa:	4641      	mov	r1, r8
 80049ac:	00ca      	lsls	r2, r1, #3
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	4622      	mov	r2, r4
 80049b6:	189b      	adds	r3, r3, r2
 80049b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ba:	462b      	mov	r3, r5
 80049bc:	460a      	mov	r2, r1
 80049be:	eb42 0303 	adc.w	r3, r2, r3
 80049c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049d0:	4629      	mov	r1, r5
 80049d2:	024b      	lsls	r3, r1, #9
 80049d4:	4621      	mov	r1, r4
 80049d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049da:	4621      	mov	r1, r4
 80049dc:	024a      	lsls	r2, r1, #9
 80049de:	4610      	mov	r0, r2
 80049e0:	4619      	mov	r1, r3
 80049e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80049f4:	f7fc f948 	bl	8000c88 <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4613      	mov	r3, r2
 80049fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a02:	e067      	b.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a04:	4b75      	ldr	r3, [pc, #468]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	099b      	lsrs	r3, r3, #6
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a10:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a1e:	2300      	movs	r3, #0
 8004a20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004a26:	4622      	mov	r2, r4
 8004a28:	462b      	mov	r3, r5
 8004a2a:	f04f 0000 	mov.w	r0, #0
 8004a2e:	f04f 0100 	mov.w	r1, #0
 8004a32:	0159      	lsls	r1, r3, #5
 8004a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a38:	0150      	lsls	r0, r2, #5
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4621      	mov	r1, r4
 8004a40:	1a51      	subs	r1, r2, r1
 8004a42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a44:	4629      	mov	r1, r5
 8004a46:	eb63 0301 	sbc.w	r3, r3, r1
 8004a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004a58:	4649      	mov	r1, r9
 8004a5a:	018b      	lsls	r3, r1, #6
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a62:	4641      	mov	r1, r8
 8004a64:	018a      	lsls	r2, r1, #6
 8004a66:	4641      	mov	r1, r8
 8004a68:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a86:	4692      	mov	sl, r2
 8004a88:	469b      	mov	fp, r3
 8004a8a:	4623      	mov	r3, r4
 8004a8c:	eb1a 0303 	adds.w	r3, sl, r3
 8004a90:	623b      	str	r3, [r7, #32]
 8004a92:	462b      	mov	r3, r5
 8004a94:	eb4b 0303 	adc.w	r3, fp, r3
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	028b      	lsls	r3, r1, #10
 8004aaa:	4621      	mov	r1, r4
 8004aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	028a      	lsls	r2, r1, #10
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004abc:	2200      	movs	r2, #0
 8004abe:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ac0:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ac2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004ac6:	f7fc f8df 	bl	8000c88 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4613      	mov	r3, r2
 8004ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ad4:	4b41      	ldr	r3, [pc, #260]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	0c1b      	lsrs	r3, r3, #16
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	3301      	adds	r3, #1
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004ae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004aea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004af6:	e0eb      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af8:	4b38      	ldr	r3, [pc, #224]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b04:	4b35      	ldr	r3, [pc, #212]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d06b      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b10:	4b32      	ldr	r3, [pc, #200]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x354>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	099b      	lsrs	r3, r3, #6
 8004b16:	2200      	movs	r2, #0
 8004b18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b24:	2300      	movs	r3, #0
 8004b26:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004b2c:	4622      	mov	r2, r4
 8004b2e:	462b      	mov	r3, r5
 8004b30:	f04f 0000 	mov.w	r0, #0
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	0159      	lsls	r1, r3, #5
 8004b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b3e:	0150      	lsls	r0, r2, #5
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4621      	mov	r1, r4
 8004b46:	1a51      	subs	r1, r2, r1
 8004b48:	61b9      	str	r1, [r7, #24]
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	eb63 0301 	sbc.w	r3, r3, r1
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004b5e:	4659      	mov	r1, fp
 8004b60:	018b      	lsls	r3, r1, #6
 8004b62:	4651      	mov	r1, sl
 8004b64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b68:	4651      	mov	r1, sl
 8004b6a:	018a      	lsls	r2, r1, #6
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ebb2 0801 	subs.w	r8, r2, r1
 8004b72:	4659      	mov	r1, fp
 8004b74:	eb63 0901 	sbc.w	r9, r3, r1
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b8c:	4690      	mov	r8, r2
 8004b8e:	4699      	mov	r9, r3
 8004b90:	4623      	mov	r3, r4
 8004b92:	eb18 0303 	adds.w	r3, r8, r3
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	462b      	mov	r3, r5
 8004b9a:	eb49 0303 	adc.w	r3, r9, r3
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004bac:	4629      	mov	r1, r5
 8004bae:	024b      	lsls	r3, r1, #9
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	024a      	lsls	r2, r1, #9
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bc6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004bc8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bcc:	f7fc f85c 	bl	8000c88 <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bda:	e065      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x420>
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	00f42400 	.word	0x00f42400
 8004be4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	099b      	lsrs	r3, r3, #6
 8004bee:	2200      	movs	r2, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bfe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004c02:	4642      	mov	r2, r8
 8004c04:	464b      	mov	r3, r9
 8004c06:	f04f 0000 	mov.w	r0, #0
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	0159      	lsls	r1, r3, #5
 8004c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c14:	0150      	lsls	r0, r2, #5
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4641      	mov	r1, r8
 8004c1c:	1a51      	subs	r1, r2, r1
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	4649      	mov	r1, r9
 8004c22:	eb63 0301 	sbc.w	r3, r3, r1
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004c34:	4659      	mov	r1, fp
 8004c36:	018b      	lsls	r3, r1, #6
 8004c38:	4651      	mov	r1, sl
 8004c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c3e:	4651      	mov	r1, sl
 8004c40:	018a      	lsls	r2, r1, #6
 8004c42:	4651      	mov	r1, sl
 8004c44:	1a54      	subs	r4, r2, r1
 8004c46:	4659      	mov	r1, fp
 8004c48:	eb63 0501 	sbc.w	r5, r3, r1
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	00eb      	lsls	r3, r5, #3
 8004c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c5a:	00e2      	lsls	r2, r4, #3
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	461d      	mov	r5, r3
 8004c60:	4643      	mov	r3, r8
 8004c62:	18e3      	adds	r3, r4, r3
 8004c64:	603b      	str	r3, [r7, #0]
 8004c66:	464b      	mov	r3, r9
 8004c68:	eb45 0303 	adc.w	r3, r5, r3
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	028b      	lsls	r3, r1, #10
 8004c7e:	4621      	mov	r1, r4
 8004c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c84:	4621      	mov	r1, r4
 8004c86:	028a      	lsls	r2, r1, #10
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c90:	2200      	movs	r2, #0
 8004c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c94:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004c96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c9a:	f7fb fff5 	bl	8000c88 <__aeabi_uldivmod>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	0f1b      	lsrs	r3, r3, #28
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004cb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cc6:	e003      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cc8:	4b06      	ldr	r3, [pc, #24]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004cca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	37b8      	adds	r7, #184	@ 0xb8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	00f42400 	.word	0x00f42400

08004ce8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e28d      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8083 	beq.w	8004e0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d08:	4b94      	ldr	r3, [pc, #592]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 030c 	and.w	r3, r3, #12
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d019      	beq.n	8004d48 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d14:	4b91      	ldr	r3, [pc, #580]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d106      	bne.n	8004d2e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d20:	4b8e      	ldr	r3, [pc, #568]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d2c:	d00c      	beq.n	8004d48 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d2e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	d112      	bne.n	8004d60 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d3a:	4b88      	ldr	r3, [pc, #544]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d46:	d10b      	bne.n	8004d60 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d48:	4b84      	ldr	r3, [pc, #528]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d05b      	beq.n	8004e0c <HAL_RCC_OscConfig+0x124>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d157      	bne.n	8004e0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e25a      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d68:	d106      	bne.n	8004d78 <HAL_RCC_OscConfig+0x90>
 8004d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a7b      	ldr	r2, [pc, #492]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	e01d      	b.n	8004db4 <HAL_RCC_OscConfig+0xcc>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d80:	d10c      	bne.n	8004d9c <HAL_RCC_OscConfig+0xb4>
 8004d82:	4b76      	ldr	r3, [pc, #472]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a75      	ldr	r2, [pc, #468]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	4b73      	ldr	r3, [pc, #460]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a72      	ldr	r2, [pc, #456]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	e00b      	b.n	8004db4 <HAL_RCC_OscConfig+0xcc>
 8004d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a6e      	ldr	r2, [pc, #440]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	4b6c      	ldr	r3, [pc, #432]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a6b      	ldr	r2, [pc, #428]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d013      	beq.n	8004de4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fd fc84 	bl	80026c8 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc4:	f7fd fc80 	bl	80026c8 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b64      	cmp	r3, #100	@ 0x64
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e21f      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd6:	4b61      	ldr	r3, [pc, #388]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0xdc>
 8004de2:	e014      	b.n	8004e0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fd fc70 	bl	80026c8 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dec:	f7fd fc6c 	bl	80026c8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	@ 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e20b      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dfe:	4b57      	ldr	r3, [pc, #348]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x104>
 8004e0a:	e000      	b.n	8004e0e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d06f      	beq.n	8004efa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e1a:	4b50      	ldr	r3, [pc, #320]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 030c 	and.w	r3, r3, #12
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d017      	beq.n	8004e56 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e26:	4b4d      	ldr	r3, [pc, #308]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d105      	bne.n	8004e3e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e32:	4b4a      	ldr	r3, [pc, #296]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e3e:	4b47      	ldr	r3, [pc, #284]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e46:	2b0c      	cmp	r3, #12
 8004e48:	d11c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e4a:	4b44      	ldr	r3, [pc, #272]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d116      	bne.n	8004e84 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e56:	4b41      	ldr	r3, [pc, #260]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_RCC_OscConfig+0x186>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d001      	beq.n	8004e6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e1d3      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4937      	ldr	r1, [pc, #220]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e82:	e03a      	b.n	8004efa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d020      	beq.n	8004ece <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e8c:	4b34      	ldr	r3, [pc, #208]	@ (8004f60 <HAL_RCC_OscConfig+0x278>)
 8004e8e:	2201      	movs	r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fd fc19 	bl	80026c8 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e9a:	f7fd fc15 	bl	80026c8 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e1b4      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eac:	4b2b      	ldr	r3, [pc, #172]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb8:	4b28      	ldr	r3, [pc, #160]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4925      	ldr	r1, [pc, #148]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	600b      	str	r3, [r1, #0]
 8004ecc:	e015      	b.n	8004efa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ece:	4b24      	ldr	r3, [pc, #144]	@ (8004f60 <HAL_RCC_OscConfig+0x278>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fd fbf8 	bl	80026c8 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004edc:	f7fd fbf4 	bl	80026c8 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e193      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eee:	4b1b      	ldr	r3, [pc, #108]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d036      	beq.n	8004f74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f0e:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fd fbd8 	bl	80026c8 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f1c:	f7fd fbd4 	bl	80026c8 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e173      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <HAL_RCC_OscConfig+0x274>)
 8004f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCC_OscConfig+0x234>
 8004f3a:	e01b      	b.n	8004f74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f3c:	4b09      	ldr	r3, [pc, #36]	@ (8004f64 <HAL_RCC_OscConfig+0x27c>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f42:	f7fd fbc1 	bl	80026c8 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f48:	e00e      	b.n	8004f68 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4a:	f7fd fbbd 	bl	80026c8 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d907      	bls.n	8004f68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e15c      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	42470000 	.word	0x42470000
 8004f64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f68:	4b8a      	ldr	r3, [pc, #552]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8004f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1ea      	bne.n	8004f4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8097 	beq.w	80050b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f82:	2300      	movs	r3, #0
 8004f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f86:	4b83      	ldr	r3, [pc, #524]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10f      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f92:	2300      	movs	r3, #0
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	4b7f      	ldr	r3, [pc, #508]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8004f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fa2:	4b7c      	ldr	r3, [pc, #496]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb2:	4b79      	ldr	r3, [pc, #484]	@ (8005198 <HAL_RCC_OscConfig+0x4b0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d118      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fbe:	4b76      	ldr	r3, [pc, #472]	@ (8005198 <HAL_RCC_OscConfig+0x4b0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a75      	ldr	r2, [pc, #468]	@ (8005198 <HAL_RCC_OscConfig+0x4b0>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fca:	f7fd fb7d 	bl	80026c8 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd2:	f7fd fb79 	bl	80026c8 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e118      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	4b6c      	ldr	r3, [pc, #432]	@ (8005198 <HAL_RCC_OscConfig+0x4b0>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d106      	bne.n	8005006 <HAL_RCC_OscConfig+0x31e>
 8004ff8:	4b66      	ldr	r3, [pc, #408]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffc:	4a65      	ldr	r2, [pc, #404]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6713      	str	r3, [r2, #112]	@ 0x70
 8005004:	e01c      	b.n	8005040 <HAL_RCC_OscConfig+0x358>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b05      	cmp	r3, #5
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0x340>
 800500e:	4b61      	ldr	r3, [pc, #388]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005012:	4a60      	ldr	r2, [pc, #384]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	6713      	str	r3, [r2, #112]	@ 0x70
 800501a:	4b5e      	ldr	r3, [pc, #376]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501e:	4a5d      	ldr	r2, [pc, #372]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	6713      	str	r3, [r2, #112]	@ 0x70
 8005026:	e00b      	b.n	8005040 <HAL_RCC_OscConfig+0x358>
 8005028:	4b5a      	ldr	r3, [pc, #360]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502c:	4a59      	ldr	r2, [pc, #356]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	6713      	str	r3, [r2, #112]	@ 0x70
 8005034:	4b57      	ldr	r3, [pc, #348]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005038:	4a56      	ldr	r2, [pc, #344]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 800503a:	f023 0304 	bic.w	r3, r3, #4
 800503e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d015      	beq.n	8005074 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005048:	f7fd fb3e 	bl	80026c8 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504e:	e00a      	b.n	8005066 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005050:	f7fd fb3a 	bl	80026c8 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e0d7      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005066:	4b4b      	ldr	r3, [pc, #300]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0ee      	beq.n	8005050 <HAL_RCC_OscConfig+0x368>
 8005072:	e014      	b.n	800509e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005074:	f7fd fb28 	bl	80026c8 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800507a:	e00a      	b.n	8005092 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507c:	f7fd fb24 	bl	80026c8 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e0c1      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005092:	4b40      	ldr	r3, [pc, #256]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1ee      	bne.n	800507c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800509e:	7dfb      	ldrb	r3, [r7, #23]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d105      	bne.n	80050b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a4:	4b3b      	ldr	r3, [pc, #236]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	4a3a      	ldr	r2, [pc, #232]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 80050aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80ad 	beq.w	8005214 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ba:	4b36      	ldr	r3, [pc, #216]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d060      	beq.n	8005188 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d145      	bne.n	800515a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ce:	4b33      	ldr	r3, [pc, #204]	@ (800519c <HAL_RCC_OscConfig+0x4b4>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fd faf8 	bl	80026c8 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050dc:	f7fd faf4 	bl	80026c8 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e093      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ee:	4b29      	ldr	r3, [pc, #164]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69da      	ldr	r2, [r3, #28]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	3b01      	subs	r3, #1
 8005114:	041b      	lsls	r3, r3, #16
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005124:	071b      	lsls	r3, r3, #28
 8005126:	491b      	ldr	r1, [pc, #108]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 8005128:	4313      	orrs	r3, r2
 800512a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800512c:	4b1b      	ldr	r3, [pc, #108]	@ (800519c <HAL_RCC_OscConfig+0x4b4>)
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005132:	f7fd fac9 	bl	80026c8 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513a:	f7fd fac5 	bl	80026c8 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e064      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514c:	4b11      	ldr	r3, [pc, #68]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x452>
 8005158:	e05c      	b.n	8005214 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515a:	4b10      	ldr	r3, [pc, #64]	@ (800519c <HAL_RCC_OscConfig+0x4b4>)
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005160:	f7fd fab2 	bl	80026c8 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005168:	f7fd faae 	bl	80026c8 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e04d      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517a:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <HAL_RCC_OscConfig+0x4ac>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1f0      	bne.n	8005168 <HAL_RCC_OscConfig+0x480>
 8005186:	e045      	b.n	8005214 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d107      	bne.n	80051a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e040      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
 8005194:	40023800 	.word	0x40023800
 8005198:	40007000 	.word	0x40007000
 800519c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005220 <HAL_RCC_OscConfig+0x538>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d030      	beq.n	8005210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d129      	bne.n	8005210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d122      	bne.n	8005210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051d0:	4013      	ands	r3, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d8:	4293      	cmp	r3, r2
 80051da:	d119      	bne.n	8005210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	3b01      	subs	r3, #1
 80051ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d10f      	bne.n	8005210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d107      	bne.n	8005210 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800520c:	429a      	cmp	r2, r3
 800520e:	d001      	beq.n	8005214 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40023800 	.word	0x40023800

08005224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e042      	b.n	80052bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fd f848 	bl	80022e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2224      	movs	r2, #36	@ 0x24
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f973 	bl	8005554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800527c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800528c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800529c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08a      	sub	sp, #40	@ 0x28
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d175      	bne.n	80053d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <HAL_UART_Transmit+0x2c>
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e06e      	b.n	80053d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2221      	movs	r2, #33	@ 0x21
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005302:	f7fd f9e1 	bl	80026c8 <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	88fa      	ldrh	r2, [r7, #6]
 800530c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	88fa      	ldrh	r2, [r7, #6]
 8005312:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800531c:	d108      	bne.n	8005330 <HAL_UART_Transmit+0x6c>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	e003      	b.n	8005338 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005338:	e02e      	b.n	8005398 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	2180      	movs	r1, #128	@ 0x80
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f848 	bl	80053da <UART_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e03a      	b.n	80053d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10b      	bne.n	800537a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	3302      	adds	r3, #2
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	e007      	b.n	800538a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	781a      	ldrb	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	3301      	adds	r3, #1
 8005388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1cb      	bne.n	800533a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2200      	movs	r2, #0
 80053aa:	2140      	movs	r1, #64	@ 0x40
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f814 	bl	80053da <UART_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e006      	b.n	80053d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4613      	mov	r3, r2
 80053e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ea:	e03b      	b.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f2:	d037      	beq.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f4:	f7fd f968 	bl	80026c8 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	6a3a      	ldr	r2, [r7, #32]
 8005400:	429a      	cmp	r2, r3
 8005402:	d302      	bcc.n	800540a <UART_WaitOnFlagUntilTimeout+0x30>
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e03a      	b.n	8005484 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d023      	beq.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8a>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b80      	cmp	r3, #128	@ 0x80
 8005420:	d020      	beq.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b40      	cmp	r3, #64	@ 0x40
 8005426:	d01d      	beq.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b08      	cmp	r3, #8
 8005434:	d116      	bne.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f81d 	bl	800548c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2208      	movs	r2, #8
 8005456:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e00f      	b.n	8005484 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	4013      	ands	r3, r2
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	429a      	cmp	r2, r3
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	429a      	cmp	r2, r3
 8005480:	d0b4      	beq.n	80053ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b095      	sub	sp, #84	@ 0x54
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80054b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3314      	adds	r3, #20
 80054ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3314      	adds	r3, #20
 80054e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e5      	bne.n	80054c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005500:	2b01      	cmp	r3, #1
 8005502:	d119      	bne.n	8005538 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	330c      	adds	r3, #12
 800550a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	60bb      	str	r3, [r7, #8]
   return(result);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f023 0310 	bic.w	r3, r3, #16
 800551a:	647b      	str	r3, [r7, #68]	@ 0x44
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005524:	61ba      	str	r2, [r7, #24]
 8005526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6979      	ldr	r1, [r7, #20]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	613b      	str	r3, [r7, #16]
   return(result);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e5      	bne.n	8005504 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005546:	bf00      	nop
 8005548:	3754      	adds	r7, #84	@ 0x54
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005558:	b0c0      	sub	sp, #256	@ 0x100
 800555a:	af00      	add	r7, sp, #0
 800555c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	68d9      	ldr	r1, [r3, #12]
 8005572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	ea40 0301 	orr.w	r3, r0, r1
 800557c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	431a      	orrs	r2, r3
 800558c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	431a      	orrs	r2, r3
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055ac:	f021 010c 	bic.w	r1, r1, #12
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055ba:	430b      	orrs	r3, r1
 80055bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ce:	6999      	ldr	r1, [r3, #24]
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	ea40 0301 	orr.w	r3, r0, r1
 80055da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b8f      	ldr	r3, [pc, #572]	@ (8005820 <UART_SetConfig+0x2cc>)
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d005      	beq.n	80055f4 <UART_SetConfig+0xa0>
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005824 <UART_SetConfig+0x2d0>)
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d104      	bne.n	80055fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055f4:	f7ff f934 	bl	8004860 <HAL_RCC_GetPCLK2Freq>
 80055f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055fc:	e003      	b.n	8005606 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055fe:	f7ff f91b 	bl	8004838 <HAL_RCC_GetPCLK1Freq>
 8005602:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005610:	f040 810c 	bne.w	800582c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005618:	2200      	movs	r2, #0
 800561a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800561e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005622:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005626:	4622      	mov	r2, r4
 8005628:	462b      	mov	r3, r5
 800562a:	1891      	adds	r1, r2, r2
 800562c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800562e:	415b      	adcs	r3, r3
 8005630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005632:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005636:	4621      	mov	r1, r4
 8005638:	eb12 0801 	adds.w	r8, r2, r1
 800563c:	4629      	mov	r1, r5
 800563e:	eb43 0901 	adc.w	r9, r3, r1
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800564e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005656:	4690      	mov	r8, r2
 8005658:	4699      	mov	r9, r3
 800565a:	4623      	mov	r3, r4
 800565c:	eb18 0303 	adds.w	r3, r8, r3
 8005660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005664:	462b      	mov	r3, r5
 8005666:	eb49 0303 	adc.w	r3, r9, r3
 800566a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800567a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800567e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005682:	460b      	mov	r3, r1
 8005684:	18db      	adds	r3, r3, r3
 8005686:	653b      	str	r3, [r7, #80]	@ 0x50
 8005688:	4613      	mov	r3, r2
 800568a:	eb42 0303 	adc.w	r3, r2, r3
 800568e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005690:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005694:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005698:	f7fb faf6 	bl	8000c88 <__aeabi_uldivmod>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4b61      	ldr	r3, [pc, #388]	@ (8005828 <UART_SetConfig+0x2d4>)
 80056a2:	fba3 2302 	umull	r2, r3, r3, r2
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	011c      	lsls	r4, r3, #4
 80056aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056bc:	4642      	mov	r2, r8
 80056be:	464b      	mov	r3, r9
 80056c0:	1891      	adds	r1, r2, r2
 80056c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056c4:	415b      	adcs	r3, r3
 80056c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056cc:	4641      	mov	r1, r8
 80056ce:	eb12 0a01 	adds.w	sl, r2, r1
 80056d2:	4649      	mov	r1, r9
 80056d4:	eb43 0b01 	adc.w	fp, r3, r1
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ec:	4692      	mov	sl, r2
 80056ee:	469b      	mov	fp, r3
 80056f0:	4643      	mov	r3, r8
 80056f2:	eb1a 0303 	adds.w	r3, sl, r3
 80056f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056fa:	464b      	mov	r3, r9
 80056fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005700:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005710:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005714:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005718:	460b      	mov	r3, r1
 800571a:	18db      	adds	r3, r3, r3
 800571c:	643b      	str	r3, [r7, #64]	@ 0x40
 800571e:	4613      	mov	r3, r2
 8005720:	eb42 0303 	adc.w	r3, r2, r3
 8005724:	647b      	str	r3, [r7, #68]	@ 0x44
 8005726:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800572a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800572e:	f7fb faab 	bl	8000c88 <__aeabi_uldivmod>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4611      	mov	r1, r2
 8005738:	4b3b      	ldr	r3, [pc, #236]	@ (8005828 <UART_SetConfig+0x2d4>)
 800573a:	fba3 2301 	umull	r2, r3, r3, r1
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	2264      	movs	r2, #100	@ 0x64
 8005742:	fb02 f303 	mul.w	r3, r2, r3
 8005746:	1acb      	subs	r3, r1, r3
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800574e:	4b36      	ldr	r3, [pc, #216]	@ (8005828 <UART_SetConfig+0x2d4>)
 8005750:	fba3 2302 	umull	r2, r3, r3, r2
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800575c:	441c      	add	r4, r3
 800575e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005762:	2200      	movs	r2, #0
 8005764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005768:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800576c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005770:	4642      	mov	r2, r8
 8005772:	464b      	mov	r3, r9
 8005774:	1891      	adds	r1, r2, r2
 8005776:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005778:	415b      	adcs	r3, r3
 800577a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800577c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005780:	4641      	mov	r1, r8
 8005782:	1851      	adds	r1, r2, r1
 8005784:	6339      	str	r1, [r7, #48]	@ 0x30
 8005786:	4649      	mov	r1, r9
 8005788:	414b      	adcs	r3, r1
 800578a:	637b      	str	r3, [r7, #52]	@ 0x34
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005798:	4659      	mov	r1, fp
 800579a:	00cb      	lsls	r3, r1, #3
 800579c:	4651      	mov	r1, sl
 800579e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057a2:	4651      	mov	r1, sl
 80057a4:	00ca      	lsls	r2, r1, #3
 80057a6:	4610      	mov	r0, r2
 80057a8:	4619      	mov	r1, r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	4642      	mov	r2, r8
 80057ae:	189b      	adds	r3, r3, r2
 80057b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057b4:	464b      	mov	r3, r9
 80057b6:	460a      	mov	r2, r1
 80057b8:	eb42 0303 	adc.w	r3, r2, r3
 80057bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057d4:	460b      	mov	r3, r1
 80057d6:	18db      	adds	r3, r3, r3
 80057d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057da:	4613      	mov	r3, r2
 80057dc:	eb42 0303 	adc.w	r3, r2, r3
 80057e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057ea:	f7fb fa4d 	bl	8000c88 <__aeabi_uldivmod>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <UART_SetConfig+0x2d4>)
 80057f4:	fba3 1302 	umull	r1, r3, r3, r2
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	2164      	movs	r1, #100	@ 0x64
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	3332      	adds	r3, #50	@ 0x32
 8005806:	4a08      	ldr	r2, [pc, #32]	@ (8005828 <UART_SetConfig+0x2d4>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	f003 0207 	and.w	r2, r3, #7
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4422      	add	r2, r4
 800581a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800581c:	e106      	b.n	8005a2c <UART_SetConfig+0x4d8>
 800581e:	bf00      	nop
 8005820:	40011000 	.word	0x40011000
 8005824:	40011400 	.word	0x40011400
 8005828:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800582c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005830:	2200      	movs	r2, #0
 8005832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005836:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800583a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800583e:	4642      	mov	r2, r8
 8005840:	464b      	mov	r3, r9
 8005842:	1891      	adds	r1, r2, r2
 8005844:	6239      	str	r1, [r7, #32]
 8005846:	415b      	adcs	r3, r3
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
 800584a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800584e:	4641      	mov	r1, r8
 8005850:	1854      	adds	r4, r2, r1
 8005852:	4649      	mov	r1, r9
 8005854:	eb43 0501 	adc.w	r5, r3, r1
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	00eb      	lsls	r3, r5, #3
 8005862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005866:	00e2      	lsls	r2, r4, #3
 8005868:	4614      	mov	r4, r2
 800586a:	461d      	mov	r5, r3
 800586c:	4643      	mov	r3, r8
 800586e:	18e3      	adds	r3, r4, r3
 8005870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005874:	464b      	mov	r3, r9
 8005876:	eb45 0303 	adc.w	r3, r5, r3
 800587a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800588a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800589a:	4629      	mov	r1, r5
 800589c:	008b      	lsls	r3, r1, #2
 800589e:	4621      	mov	r1, r4
 80058a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a4:	4621      	mov	r1, r4
 80058a6:	008a      	lsls	r2, r1, #2
 80058a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058ac:	f7fb f9ec 	bl	8000c88 <__aeabi_uldivmod>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4b60      	ldr	r3, [pc, #384]	@ (8005a38 <UART_SetConfig+0x4e4>)
 80058b6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	011c      	lsls	r4, r3, #4
 80058be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058d0:	4642      	mov	r2, r8
 80058d2:	464b      	mov	r3, r9
 80058d4:	1891      	adds	r1, r2, r2
 80058d6:	61b9      	str	r1, [r7, #24]
 80058d8:	415b      	adcs	r3, r3
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058e0:	4641      	mov	r1, r8
 80058e2:	1851      	adds	r1, r2, r1
 80058e4:	6139      	str	r1, [r7, #16]
 80058e6:	4649      	mov	r1, r9
 80058e8:	414b      	adcs	r3, r1
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058f8:	4659      	mov	r1, fp
 80058fa:	00cb      	lsls	r3, r1, #3
 80058fc:	4651      	mov	r1, sl
 80058fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005902:	4651      	mov	r1, sl
 8005904:	00ca      	lsls	r2, r1, #3
 8005906:	4610      	mov	r0, r2
 8005908:	4619      	mov	r1, r3
 800590a:	4603      	mov	r3, r0
 800590c:	4642      	mov	r2, r8
 800590e:	189b      	adds	r3, r3, r2
 8005910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005914:	464b      	mov	r3, r9
 8005916:	460a      	mov	r2, r1
 8005918:	eb42 0303 	adc.w	r3, r2, r3
 800591c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800592a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005938:	4649      	mov	r1, r9
 800593a:	008b      	lsls	r3, r1, #2
 800593c:	4641      	mov	r1, r8
 800593e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005942:	4641      	mov	r1, r8
 8005944:	008a      	lsls	r2, r1, #2
 8005946:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800594a:	f7fb f99d 	bl	8000c88 <__aeabi_uldivmod>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4611      	mov	r1, r2
 8005954:	4b38      	ldr	r3, [pc, #224]	@ (8005a38 <UART_SetConfig+0x4e4>)
 8005956:	fba3 2301 	umull	r2, r3, r3, r1
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	2264      	movs	r2, #100	@ 0x64
 800595e:	fb02 f303 	mul.w	r3, r2, r3
 8005962:	1acb      	subs	r3, r1, r3
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	3332      	adds	r3, #50	@ 0x32
 8005968:	4a33      	ldr	r2, [pc, #204]	@ (8005a38 <UART_SetConfig+0x4e4>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005974:	441c      	add	r4, r3
 8005976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800597a:	2200      	movs	r2, #0
 800597c:	673b      	str	r3, [r7, #112]	@ 0x70
 800597e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005980:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005984:	4642      	mov	r2, r8
 8005986:	464b      	mov	r3, r9
 8005988:	1891      	adds	r1, r2, r2
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	415b      	adcs	r3, r3
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005994:	4641      	mov	r1, r8
 8005996:	1851      	adds	r1, r2, r1
 8005998:	6039      	str	r1, [r7, #0]
 800599a:	4649      	mov	r1, r9
 800599c:	414b      	adcs	r3, r1
 800599e:	607b      	str	r3, [r7, #4]
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059ac:	4659      	mov	r1, fp
 80059ae:	00cb      	lsls	r3, r1, #3
 80059b0:	4651      	mov	r1, sl
 80059b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059b6:	4651      	mov	r1, sl
 80059b8:	00ca      	lsls	r2, r1, #3
 80059ba:	4610      	mov	r0, r2
 80059bc:	4619      	mov	r1, r3
 80059be:	4603      	mov	r3, r0
 80059c0:	4642      	mov	r2, r8
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059c6:	464b      	mov	r3, r9
 80059c8:	460a      	mov	r2, r1
 80059ca:	eb42 0303 	adc.w	r3, r2, r3
 80059ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80059da:	667a      	str	r2, [r7, #100]	@ 0x64
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059e8:	4649      	mov	r1, r9
 80059ea:	008b      	lsls	r3, r1, #2
 80059ec:	4641      	mov	r1, r8
 80059ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f2:	4641      	mov	r1, r8
 80059f4:	008a      	lsls	r2, r1, #2
 80059f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059fa:	f7fb f945 	bl	8000c88 <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4b0d      	ldr	r3, [pc, #52]	@ (8005a38 <UART_SetConfig+0x4e4>)
 8005a04:	fba3 1302 	umull	r1, r3, r3, r2
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	2164      	movs	r1, #100	@ 0x64
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	3332      	adds	r3, #50	@ 0x32
 8005a16:	4a08      	ldr	r2, [pc, #32]	@ (8005a38 <UART_SetConfig+0x4e4>)
 8005a18:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	f003 020f 	and.w	r2, r3, #15
 8005a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4422      	add	r2, r4
 8005a2a:	609a      	str	r2, [r3, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a32:	46bd      	mov	sp, r7
 8005a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a38:	51eb851f 	.word	0x51eb851f

08005a3c <_calloc_r>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	fba1 5402 	umull	r5, r4, r1, r2
 8005a42:	b934      	cbnz	r4, 8005a52 <_calloc_r+0x16>
 8005a44:	4629      	mov	r1, r5
 8005a46:	f000 f837 	bl	8005ab8 <_malloc_r>
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	b928      	cbnz	r0, 8005a5a <_calloc_r+0x1e>
 8005a4e:	4630      	mov	r0, r6
 8005a50:	bd70      	pop	{r4, r5, r6, pc}
 8005a52:	220c      	movs	r2, #12
 8005a54:	6002      	str	r2, [r0, #0]
 8005a56:	2600      	movs	r6, #0
 8005a58:	e7f9      	b.n	8005a4e <_calloc_r+0x12>
 8005a5a:	462a      	mov	r2, r5
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	f000 fe34 	bl	80066ca <memset>
 8005a62:	e7f4      	b.n	8005a4e <_calloc_r+0x12>

08005a64 <malloc>:
 8005a64:	4b02      	ldr	r3, [pc, #8]	@ (8005a70 <malloc+0xc>)
 8005a66:	4601      	mov	r1, r0
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	f000 b825 	b.w	8005ab8 <_malloc_r>
 8005a6e:	bf00      	nop
 8005a70:	20000018 	.word	0x20000018

08005a74 <sbrk_aligned>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	4e0f      	ldr	r6, [pc, #60]	@ (8005ab4 <sbrk_aligned+0x40>)
 8005a78:	460c      	mov	r4, r1
 8005a7a:	6831      	ldr	r1, [r6, #0]
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	b911      	cbnz	r1, 8005a86 <sbrk_aligned+0x12>
 8005a80:	f000 fe64 	bl	800674c <_sbrk_r>
 8005a84:	6030      	str	r0, [r6, #0]
 8005a86:	4621      	mov	r1, r4
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f000 fe5f 	bl	800674c <_sbrk_r>
 8005a8e:	1c43      	adds	r3, r0, #1
 8005a90:	d103      	bne.n	8005a9a <sbrk_aligned+0x26>
 8005a92:	f04f 34ff 	mov.w	r4, #4294967295
 8005a96:	4620      	mov	r0, r4
 8005a98:	bd70      	pop	{r4, r5, r6, pc}
 8005a9a:	1cc4      	adds	r4, r0, #3
 8005a9c:	f024 0403 	bic.w	r4, r4, #3
 8005aa0:	42a0      	cmp	r0, r4
 8005aa2:	d0f8      	beq.n	8005a96 <sbrk_aligned+0x22>
 8005aa4:	1a21      	subs	r1, r4, r0
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 fe50 	bl	800674c <_sbrk_r>
 8005aac:	3001      	adds	r0, #1
 8005aae:	d1f2      	bne.n	8005a96 <sbrk_aligned+0x22>
 8005ab0:	e7ef      	b.n	8005a92 <sbrk_aligned+0x1e>
 8005ab2:	bf00      	nop
 8005ab4:	20000370 	.word	0x20000370

08005ab8 <_malloc_r>:
 8005ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005abc:	1ccd      	adds	r5, r1, #3
 8005abe:	f025 0503 	bic.w	r5, r5, #3
 8005ac2:	3508      	adds	r5, #8
 8005ac4:	2d0c      	cmp	r5, #12
 8005ac6:	bf38      	it	cc
 8005ac8:	250c      	movcc	r5, #12
 8005aca:	2d00      	cmp	r5, #0
 8005acc:	4606      	mov	r6, r0
 8005ace:	db01      	blt.n	8005ad4 <_malloc_r+0x1c>
 8005ad0:	42a9      	cmp	r1, r5
 8005ad2:	d904      	bls.n	8005ade <_malloc_r+0x26>
 8005ad4:	230c      	movs	r3, #12
 8005ad6:	6033      	str	r3, [r6, #0]
 8005ad8:	2000      	movs	r0, #0
 8005ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ade:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bb4 <_malloc_r+0xfc>
 8005ae2:	f000 f869 	bl	8005bb8 <__malloc_lock>
 8005ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8005aea:	461c      	mov	r4, r3
 8005aec:	bb44      	cbnz	r4, 8005b40 <_malloc_r+0x88>
 8005aee:	4629      	mov	r1, r5
 8005af0:	4630      	mov	r0, r6
 8005af2:	f7ff ffbf 	bl	8005a74 <sbrk_aligned>
 8005af6:	1c43      	adds	r3, r0, #1
 8005af8:	4604      	mov	r4, r0
 8005afa:	d158      	bne.n	8005bae <_malloc_r+0xf6>
 8005afc:	f8d8 4000 	ldr.w	r4, [r8]
 8005b00:	4627      	mov	r7, r4
 8005b02:	2f00      	cmp	r7, #0
 8005b04:	d143      	bne.n	8005b8e <_malloc_r+0xd6>
 8005b06:	2c00      	cmp	r4, #0
 8005b08:	d04b      	beq.n	8005ba2 <_malloc_r+0xea>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	4639      	mov	r1, r7
 8005b0e:	4630      	mov	r0, r6
 8005b10:	eb04 0903 	add.w	r9, r4, r3
 8005b14:	f000 fe1a 	bl	800674c <_sbrk_r>
 8005b18:	4581      	cmp	r9, r0
 8005b1a:	d142      	bne.n	8005ba2 <_malloc_r+0xea>
 8005b1c:	6821      	ldr	r1, [r4, #0]
 8005b1e:	1a6d      	subs	r5, r5, r1
 8005b20:	4629      	mov	r1, r5
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7ff ffa6 	bl	8005a74 <sbrk_aligned>
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d03a      	beq.n	8005ba2 <_malloc_r+0xea>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	442b      	add	r3, r5
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	f8d8 3000 	ldr.w	r3, [r8]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	bb62      	cbnz	r2, 8005b94 <_malloc_r+0xdc>
 8005b3a:	f8c8 7000 	str.w	r7, [r8]
 8005b3e:	e00f      	b.n	8005b60 <_malloc_r+0xa8>
 8005b40:	6822      	ldr	r2, [r4, #0]
 8005b42:	1b52      	subs	r2, r2, r5
 8005b44:	d420      	bmi.n	8005b88 <_malloc_r+0xd0>
 8005b46:	2a0b      	cmp	r2, #11
 8005b48:	d917      	bls.n	8005b7a <_malloc_r+0xc2>
 8005b4a:	1961      	adds	r1, r4, r5
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	6025      	str	r5, [r4, #0]
 8005b50:	bf18      	it	ne
 8005b52:	6059      	strne	r1, [r3, #4]
 8005b54:	6863      	ldr	r3, [r4, #4]
 8005b56:	bf08      	it	eq
 8005b58:	f8c8 1000 	streq.w	r1, [r8]
 8005b5c:	5162      	str	r2, [r4, r5]
 8005b5e:	604b      	str	r3, [r1, #4]
 8005b60:	4630      	mov	r0, r6
 8005b62:	f000 f82f 	bl	8005bc4 <__malloc_unlock>
 8005b66:	f104 000b 	add.w	r0, r4, #11
 8005b6a:	1d23      	adds	r3, r4, #4
 8005b6c:	f020 0007 	bic.w	r0, r0, #7
 8005b70:	1ac2      	subs	r2, r0, r3
 8005b72:	bf1c      	itt	ne
 8005b74:	1a1b      	subne	r3, r3, r0
 8005b76:	50a3      	strne	r3, [r4, r2]
 8005b78:	e7af      	b.n	8005ada <_malloc_r+0x22>
 8005b7a:	6862      	ldr	r2, [r4, #4]
 8005b7c:	42a3      	cmp	r3, r4
 8005b7e:	bf0c      	ite	eq
 8005b80:	f8c8 2000 	streq.w	r2, [r8]
 8005b84:	605a      	strne	r2, [r3, #4]
 8005b86:	e7eb      	b.n	8005b60 <_malloc_r+0xa8>
 8005b88:	4623      	mov	r3, r4
 8005b8a:	6864      	ldr	r4, [r4, #4]
 8005b8c:	e7ae      	b.n	8005aec <_malloc_r+0x34>
 8005b8e:	463c      	mov	r4, r7
 8005b90:	687f      	ldr	r7, [r7, #4]
 8005b92:	e7b6      	b.n	8005b02 <_malloc_r+0x4a>
 8005b94:	461a      	mov	r2, r3
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	42a3      	cmp	r3, r4
 8005b9a:	d1fb      	bne.n	8005b94 <_malloc_r+0xdc>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	6053      	str	r3, [r2, #4]
 8005ba0:	e7de      	b.n	8005b60 <_malloc_r+0xa8>
 8005ba2:	230c      	movs	r3, #12
 8005ba4:	6033      	str	r3, [r6, #0]
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f000 f80c 	bl	8005bc4 <__malloc_unlock>
 8005bac:	e794      	b.n	8005ad8 <_malloc_r+0x20>
 8005bae:	6005      	str	r5, [r0, #0]
 8005bb0:	e7d6      	b.n	8005b60 <_malloc_r+0xa8>
 8005bb2:	bf00      	nop
 8005bb4:	20000374 	.word	0x20000374

08005bb8 <__malloc_lock>:
 8005bb8:	4801      	ldr	r0, [pc, #4]	@ (8005bc0 <__malloc_lock+0x8>)
 8005bba:	f000 be14 	b.w	80067e6 <__retarget_lock_acquire_recursive>
 8005bbe:	bf00      	nop
 8005bc0:	200004b8 	.word	0x200004b8

08005bc4 <__malloc_unlock>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	@ (8005bcc <__malloc_unlock+0x8>)
 8005bc6:	f000 be0f 	b.w	80067e8 <__retarget_lock_release_recursive>
 8005bca:	bf00      	nop
 8005bcc:	200004b8 	.word	0x200004b8

08005bd0 <__cvt>:
 8005bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd4:	ec57 6b10 	vmov	r6, r7, d0
 8005bd8:	2f00      	cmp	r7, #0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	4619      	mov	r1, r3
 8005bde:	463b      	mov	r3, r7
 8005be0:	bfbb      	ittet	lt
 8005be2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005be6:	461f      	movlt	r7, r3
 8005be8:	2300      	movge	r3, #0
 8005bea:	232d      	movlt	r3, #45	@ 0x2d
 8005bec:	700b      	strb	r3, [r1, #0]
 8005bee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bf0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005bf4:	4691      	mov	r9, r2
 8005bf6:	f023 0820 	bic.w	r8, r3, #32
 8005bfa:	bfbc      	itt	lt
 8005bfc:	4632      	movlt	r2, r6
 8005bfe:	4616      	movlt	r6, r2
 8005c00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c04:	d005      	beq.n	8005c12 <__cvt+0x42>
 8005c06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c0a:	d100      	bne.n	8005c0e <__cvt+0x3e>
 8005c0c:	3401      	adds	r4, #1
 8005c0e:	2102      	movs	r1, #2
 8005c10:	e000      	b.n	8005c14 <__cvt+0x44>
 8005c12:	2103      	movs	r1, #3
 8005c14:	ab03      	add	r3, sp, #12
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	ab02      	add	r3, sp, #8
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	ec47 6b10 	vmov	d0, r6, r7
 8005c20:	4653      	mov	r3, sl
 8005c22:	4622      	mov	r2, r4
 8005c24:	f000 fe6c 	bl	8006900 <_dtoa_r>
 8005c28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	d119      	bne.n	8005c64 <__cvt+0x94>
 8005c30:	f019 0f01 	tst.w	r9, #1
 8005c34:	d00e      	beq.n	8005c54 <__cvt+0x84>
 8005c36:	eb00 0904 	add.w	r9, r0, r4
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4630      	mov	r0, r6
 8005c40:	4639      	mov	r1, r7
 8005c42:	f7fa ff61 	bl	8000b08 <__aeabi_dcmpeq>
 8005c46:	b108      	cbz	r0, 8005c4c <__cvt+0x7c>
 8005c48:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c4c:	2230      	movs	r2, #48	@ 0x30
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	454b      	cmp	r3, r9
 8005c52:	d31e      	bcc.n	8005c92 <__cvt+0xc2>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c58:	1b5b      	subs	r3, r3, r5
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	b004      	add	sp, #16
 8005c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c68:	eb00 0904 	add.w	r9, r0, r4
 8005c6c:	d1e5      	bne.n	8005c3a <__cvt+0x6a>
 8005c6e:	7803      	ldrb	r3, [r0, #0]
 8005c70:	2b30      	cmp	r3, #48	@ 0x30
 8005c72:	d10a      	bne.n	8005c8a <__cvt+0xba>
 8005c74:	2200      	movs	r2, #0
 8005c76:	2300      	movs	r3, #0
 8005c78:	4630      	mov	r0, r6
 8005c7a:	4639      	mov	r1, r7
 8005c7c:	f7fa ff44 	bl	8000b08 <__aeabi_dcmpeq>
 8005c80:	b918      	cbnz	r0, 8005c8a <__cvt+0xba>
 8005c82:	f1c4 0401 	rsb	r4, r4, #1
 8005c86:	f8ca 4000 	str.w	r4, [sl]
 8005c8a:	f8da 3000 	ldr.w	r3, [sl]
 8005c8e:	4499      	add	r9, r3
 8005c90:	e7d3      	b.n	8005c3a <__cvt+0x6a>
 8005c92:	1c59      	adds	r1, r3, #1
 8005c94:	9103      	str	r1, [sp, #12]
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	e7d9      	b.n	8005c4e <__cvt+0x7e>

08005c9a <__exponent>:
 8005c9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	bfba      	itte	lt
 8005ca0:	4249      	neglt	r1, r1
 8005ca2:	232d      	movlt	r3, #45	@ 0x2d
 8005ca4:	232b      	movge	r3, #43	@ 0x2b
 8005ca6:	2909      	cmp	r1, #9
 8005ca8:	7002      	strb	r2, [r0, #0]
 8005caa:	7043      	strb	r3, [r0, #1]
 8005cac:	dd29      	ble.n	8005d02 <__exponent+0x68>
 8005cae:	f10d 0307 	add.w	r3, sp, #7
 8005cb2:	461d      	mov	r5, r3
 8005cb4:	270a      	movs	r7, #10
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8005cbc:	fb07 1416 	mls	r4, r7, r6, r1
 8005cc0:	3430      	adds	r4, #48	@ 0x30
 8005cc2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	2c63      	cmp	r4, #99	@ 0x63
 8005cca:	f103 33ff 	add.w	r3, r3, #4294967295
 8005cce:	4631      	mov	r1, r6
 8005cd0:	dcf1      	bgt.n	8005cb6 <__exponent+0x1c>
 8005cd2:	3130      	adds	r1, #48	@ 0x30
 8005cd4:	1e94      	subs	r4, r2, #2
 8005cd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005cda:	1c41      	adds	r1, r0, #1
 8005cdc:	4623      	mov	r3, r4
 8005cde:	42ab      	cmp	r3, r5
 8005ce0:	d30a      	bcc.n	8005cf8 <__exponent+0x5e>
 8005ce2:	f10d 0309 	add.w	r3, sp, #9
 8005ce6:	1a9b      	subs	r3, r3, r2
 8005ce8:	42ac      	cmp	r4, r5
 8005cea:	bf88      	it	hi
 8005cec:	2300      	movhi	r3, #0
 8005cee:	3302      	adds	r3, #2
 8005cf0:	4403      	add	r3, r0
 8005cf2:	1a18      	subs	r0, r3, r0
 8005cf4:	b003      	add	sp, #12
 8005cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005cfc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d00:	e7ed      	b.n	8005cde <__exponent+0x44>
 8005d02:	2330      	movs	r3, #48	@ 0x30
 8005d04:	3130      	adds	r1, #48	@ 0x30
 8005d06:	7083      	strb	r3, [r0, #2]
 8005d08:	70c1      	strb	r1, [r0, #3]
 8005d0a:	1d03      	adds	r3, r0, #4
 8005d0c:	e7f1      	b.n	8005cf2 <__exponent+0x58>
	...

08005d10 <_printf_float>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	b08d      	sub	sp, #52	@ 0x34
 8005d16:	460c      	mov	r4, r1
 8005d18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005d1c:	4616      	mov	r6, r2
 8005d1e:	461f      	mov	r7, r3
 8005d20:	4605      	mov	r5, r0
 8005d22:	f000 fcdb 	bl	80066dc <_localeconv_r>
 8005d26:	6803      	ldr	r3, [r0, #0]
 8005d28:	9304      	str	r3, [sp, #16]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fa fac0 	bl	80002b0 <strlen>
 8005d30:	2300      	movs	r3, #0
 8005d32:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d34:	f8d8 3000 	ldr.w	r3, [r8]
 8005d38:	9005      	str	r0, [sp, #20]
 8005d3a:	3307      	adds	r3, #7
 8005d3c:	f023 0307 	bic.w	r3, r3, #7
 8005d40:	f103 0208 	add.w	r2, r3, #8
 8005d44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d48:	f8d4 b000 	ldr.w	fp, [r4]
 8005d4c:	f8c8 2000 	str.w	r2, [r8]
 8005d50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d58:	9307      	str	r3, [sp, #28]
 8005d5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d66:	4b9c      	ldr	r3, [pc, #624]	@ (8005fd8 <_printf_float+0x2c8>)
 8005d68:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6c:	f7fa fefe 	bl	8000b6c <__aeabi_dcmpun>
 8005d70:	bb70      	cbnz	r0, 8005dd0 <_printf_float+0xc0>
 8005d72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d76:	4b98      	ldr	r3, [pc, #608]	@ (8005fd8 <_printf_float+0x2c8>)
 8005d78:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7c:	f7fa fed8 	bl	8000b30 <__aeabi_dcmple>
 8005d80:	bb30      	cbnz	r0, 8005dd0 <_printf_float+0xc0>
 8005d82:	2200      	movs	r2, #0
 8005d84:	2300      	movs	r3, #0
 8005d86:	4640      	mov	r0, r8
 8005d88:	4649      	mov	r1, r9
 8005d8a:	f7fa fec7 	bl	8000b1c <__aeabi_dcmplt>
 8005d8e:	b110      	cbz	r0, 8005d96 <_printf_float+0x86>
 8005d90:	232d      	movs	r3, #45	@ 0x2d
 8005d92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d96:	4a91      	ldr	r2, [pc, #580]	@ (8005fdc <_printf_float+0x2cc>)
 8005d98:	4b91      	ldr	r3, [pc, #580]	@ (8005fe0 <_printf_float+0x2d0>)
 8005d9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d9e:	bf8c      	ite	hi
 8005da0:	4690      	movhi	r8, r2
 8005da2:	4698      	movls	r8, r3
 8005da4:	2303      	movs	r3, #3
 8005da6:	6123      	str	r3, [r4, #16]
 8005da8:	f02b 0304 	bic.w	r3, fp, #4
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	f04f 0900 	mov.w	r9, #0
 8005db2:	9700      	str	r7, [sp, #0]
 8005db4:	4633      	mov	r3, r6
 8005db6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005db8:	4621      	mov	r1, r4
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 f9d2 	bl	8006164 <_printf_common>
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	f040 808d 	bne.w	8005ee0 <_printf_float+0x1d0>
 8005dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dca:	b00d      	add	sp, #52	@ 0x34
 8005dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	f7fa fec8 	bl	8000b6c <__aeabi_dcmpun>
 8005ddc:	b140      	cbz	r0, 8005df0 <_printf_float+0xe0>
 8005dde:	464b      	mov	r3, r9
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	bfbc      	itt	lt
 8005de4:	232d      	movlt	r3, #45	@ 0x2d
 8005de6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005dea:	4a7e      	ldr	r2, [pc, #504]	@ (8005fe4 <_printf_float+0x2d4>)
 8005dec:	4b7e      	ldr	r3, [pc, #504]	@ (8005fe8 <_printf_float+0x2d8>)
 8005dee:	e7d4      	b.n	8005d9a <_printf_float+0x8a>
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005df6:	9206      	str	r2, [sp, #24]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	d13b      	bne.n	8005e74 <_printf_float+0x164>
 8005dfc:	2306      	movs	r3, #6
 8005dfe:	6063      	str	r3, [r4, #4]
 8005e00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005e04:	2300      	movs	r3, #0
 8005e06:	6022      	str	r2, [r4, #0]
 8005e08:	9303      	str	r3, [sp, #12]
 8005e0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005e10:	ab09      	add	r3, sp, #36	@ 0x24
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	6861      	ldr	r1, [r4, #4]
 8005e16:	ec49 8b10 	vmov	d0, r8, r9
 8005e1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f7ff fed6 	bl	8005bd0 <__cvt>
 8005e24:	9b06      	ldr	r3, [sp, #24]
 8005e26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e28:	2b47      	cmp	r3, #71	@ 0x47
 8005e2a:	4680      	mov	r8, r0
 8005e2c:	d129      	bne.n	8005e82 <_printf_float+0x172>
 8005e2e:	1cc8      	adds	r0, r1, #3
 8005e30:	db02      	blt.n	8005e38 <_printf_float+0x128>
 8005e32:	6863      	ldr	r3, [r4, #4]
 8005e34:	4299      	cmp	r1, r3
 8005e36:	dd41      	ble.n	8005ebc <_printf_float+0x1ac>
 8005e38:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e3c:	fa5f fa8a 	uxtb.w	sl, sl
 8005e40:	3901      	subs	r1, #1
 8005e42:	4652      	mov	r2, sl
 8005e44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005e48:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e4a:	f7ff ff26 	bl	8005c9a <__exponent>
 8005e4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e50:	1813      	adds	r3, r2, r0
 8005e52:	2a01      	cmp	r2, #1
 8005e54:	4681      	mov	r9, r0
 8005e56:	6123      	str	r3, [r4, #16]
 8005e58:	dc02      	bgt.n	8005e60 <_printf_float+0x150>
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	07d2      	lsls	r2, r2, #31
 8005e5e:	d501      	bpl.n	8005e64 <_printf_float+0x154>
 8005e60:	3301      	adds	r3, #1
 8005e62:	6123      	str	r3, [r4, #16]
 8005e64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0a2      	beq.n	8005db2 <_printf_float+0xa2>
 8005e6c:	232d      	movs	r3, #45	@ 0x2d
 8005e6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e72:	e79e      	b.n	8005db2 <_printf_float+0xa2>
 8005e74:	9a06      	ldr	r2, [sp, #24]
 8005e76:	2a47      	cmp	r2, #71	@ 0x47
 8005e78:	d1c2      	bne.n	8005e00 <_printf_float+0xf0>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1c0      	bne.n	8005e00 <_printf_float+0xf0>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e7bd      	b.n	8005dfe <_printf_float+0xee>
 8005e82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e86:	d9db      	bls.n	8005e40 <_printf_float+0x130>
 8005e88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e8c:	d118      	bne.n	8005ec0 <_printf_float+0x1b0>
 8005e8e:	2900      	cmp	r1, #0
 8005e90:	6863      	ldr	r3, [r4, #4]
 8005e92:	dd0b      	ble.n	8005eac <_printf_float+0x19c>
 8005e94:	6121      	str	r1, [r4, #16]
 8005e96:	b913      	cbnz	r3, 8005e9e <_printf_float+0x18e>
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	07d0      	lsls	r0, r2, #31
 8005e9c:	d502      	bpl.n	8005ea4 <_printf_float+0x194>
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	440b      	add	r3, r1
 8005ea2:	6123      	str	r3, [r4, #16]
 8005ea4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005ea6:	f04f 0900 	mov.w	r9, #0
 8005eaa:	e7db      	b.n	8005e64 <_printf_float+0x154>
 8005eac:	b913      	cbnz	r3, 8005eb4 <_printf_float+0x1a4>
 8005eae:	6822      	ldr	r2, [r4, #0]
 8005eb0:	07d2      	lsls	r2, r2, #31
 8005eb2:	d501      	bpl.n	8005eb8 <_printf_float+0x1a8>
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	e7f4      	b.n	8005ea2 <_printf_float+0x192>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e7f2      	b.n	8005ea2 <_printf_float+0x192>
 8005ebc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ec2:	4299      	cmp	r1, r3
 8005ec4:	db05      	blt.n	8005ed2 <_printf_float+0x1c2>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	6121      	str	r1, [r4, #16]
 8005eca:	07d8      	lsls	r0, r3, #31
 8005ecc:	d5ea      	bpl.n	8005ea4 <_printf_float+0x194>
 8005ece:	1c4b      	adds	r3, r1, #1
 8005ed0:	e7e7      	b.n	8005ea2 <_printf_float+0x192>
 8005ed2:	2900      	cmp	r1, #0
 8005ed4:	bfd4      	ite	le
 8005ed6:	f1c1 0202 	rsble	r2, r1, #2
 8005eda:	2201      	movgt	r2, #1
 8005edc:	4413      	add	r3, r2
 8005ede:	e7e0      	b.n	8005ea2 <_printf_float+0x192>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	055a      	lsls	r2, r3, #21
 8005ee4:	d407      	bmi.n	8005ef6 <_printf_float+0x1e6>
 8005ee6:	6923      	ldr	r3, [r4, #16]
 8005ee8:	4642      	mov	r2, r8
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b8      	blx	r7
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	d12b      	bne.n	8005f4c <_printf_float+0x23c>
 8005ef4:	e767      	b.n	8005dc6 <_printf_float+0xb6>
 8005ef6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005efa:	f240 80dd 	bls.w	80060b8 <_printf_float+0x3a8>
 8005efe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f02:	2200      	movs	r2, #0
 8005f04:	2300      	movs	r3, #0
 8005f06:	f7fa fdff 	bl	8000b08 <__aeabi_dcmpeq>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d033      	beq.n	8005f76 <_printf_float+0x266>
 8005f0e:	4a37      	ldr	r2, [pc, #220]	@ (8005fec <_printf_float+0x2dc>)
 8005f10:	2301      	movs	r3, #1
 8005f12:	4631      	mov	r1, r6
 8005f14:	4628      	mov	r0, r5
 8005f16:	47b8      	blx	r7
 8005f18:	3001      	adds	r0, #1
 8005f1a:	f43f af54 	beq.w	8005dc6 <_printf_float+0xb6>
 8005f1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005f22:	4543      	cmp	r3, r8
 8005f24:	db02      	blt.n	8005f2c <_printf_float+0x21c>
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	07d8      	lsls	r0, r3, #31
 8005f2a:	d50f      	bpl.n	8005f4c <_printf_float+0x23c>
 8005f2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f30:	4631      	mov	r1, r6
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b8      	blx	r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	f43f af45 	beq.w	8005dc6 <_printf_float+0xb6>
 8005f3c:	f04f 0900 	mov.w	r9, #0
 8005f40:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f44:	f104 0a1a 	add.w	sl, r4, #26
 8005f48:	45c8      	cmp	r8, r9
 8005f4a:	dc09      	bgt.n	8005f60 <_printf_float+0x250>
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	079b      	lsls	r3, r3, #30
 8005f50:	f100 8103 	bmi.w	800615a <_printf_float+0x44a>
 8005f54:	68e0      	ldr	r0, [r4, #12]
 8005f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f58:	4298      	cmp	r0, r3
 8005f5a:	bfb8      	it	lt
 8005f5c:	4618      	movlt	r0, r3
 8005f5e:	e734      	b.n	8005dca <_printf_float+0xba>
 8005f60:	2301      	movs	r3, #1
 8005f62:	4652      	mov	r2, sl
 8005f64:	4631      	mov	r1, r6
 8005f66:	4628      	mov	r0, r5
 8005f68:	47b8      	blx	r7
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	f43f af2b 	beq.w	8005dc6 <_printf_float+0xb6>
 8005f70:	f109 0901 	add.w	r9, r9, #1
 8005f74:	e7e8      	b.n	8005f48 <_printf_float+0x238>
 8005f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	dc39      	bgt.n	8005ff0 <_printf_float+0x2e0>
 8005f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fec <_printf_float+0x2dc>)
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4631      	mov	r1, r6
 8005f82:	4628      	mov	r0, r5
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	f43f af1d 	beq.w	8005dc6 <_printf_float+0xb6>
 8005f8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f90:	ea59 0303 	orrs.w	r3, r9, r3
 8005f94:	d102      	bne.n	8005f9c <_printf_float+0x28c>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	07d9      	lsls	r1, r3, #31
 8005f9a:	d5d7      	bpl.n	8005f4c <_printf_float+0x23c>
 8005f9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	f43f af0d 	beq.w	8005dc6 <_printf_float+0xb6>
 8005fac:	f04f 0a00 	mov.w	sl, #0
 8005fb0:	f104 0b1a 	add.w	fp, r4, #26
 8005fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb6:	425b      	negs	r3, r3
 8005fb8:	4553      	cmp	r3, sl
 8005fba:	dc01      	bgt.n	8005fc0 <_printf_float+0x2b0>
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	e793      	b.n	8005ee8 <_printf_float+0x1d8>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	465a      	mov	r2, fp
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	47b8      	blx	r7
 8005fca:	3001      	adds	r0, #1
 8005fcc:	f43f aefb 	beq.w	8005dc6 <_printf_float+0xb6>
 8005fd0:	f10a 0a01 	add.w	sl, sl, #1
 8005fd4:	e7ee      	b.n	8005fb4 <_printf_float+0x2a4>
 8005fd6:	bf00      	nop
 8005fd8:	7fefffff 	.word	0x7fefffff
 8005fdc:	0800887c 	.word	0x0800887c
 8005fe0:	08008878 	.word	0x08008878
 8005fe4:	08008884 	.word	0x08008884
 8005fe8:	08008880 	.word	0x08008880
 8005fec:	08008888 	.word	0x08008888
 8005ff0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ff2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ff6:	4553      	cmp	r3, sl
 8005ff8:	bfa8      	it	ge
 8005ffa:	4653      	movge	r3, sl
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	4699      	mov	r9, r3
 8006000:	dc36      	bgt.n	8006070 <_printf_float+0x360>
 8006002:	f04f 0b00 	mov.w	fp, #0
 8006006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800600a:	f104 021a 	add.w	r2, r4, #26
 800600e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006010:	9306      	str	r3, [sp, #24]
 8006012:	eba3 0309 	sub.w	r3, r3, r9
 8006016:	455b      	cmp	r3, fp
 8006018:	dc31      	bgt.n	800607e <_printf_float+0x36e>
 800601a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800601c:	459a      	cmp	sl, r3
 800601e:	dc3a      	bgt.n	8006096 <_printf_float+0x386>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	07da      	lsls	r2, r3, #31
 8006024:	d437      	bmi.n	8006096 <_printf_float+0x386>
 8006026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006028:	ebaa 0903 	sub.w	r9, sl, r3
 800602c:	9b06      	ldr	r3, [sp, #24]
 800602e:	ebaa 0303 	sub.w	r3, sl, r3
 8006032:	4599      	cmp	r9, r3
 8006034:	bfa8      	it	ge
 8006036:	4699      	movge	r9, r3
 8006038:	f1b9 0f00 	cmp.w	r9, #0
 800603c:	dc33      	bgt.n	80060a6 <_printf_float+0x396>
 800603e:	f04f 0800 	mov.w	r8, #0
 8006042:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006046:	f104 0b1a 	add.w	fp, r4, #26
 800604a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800604c:	ebaa 0303 	sub.w	r3, sl, r3
 8006050:	eba3 0309 	sub.w	r3, r3, r9
 8006054:	4543      	cmp	r3, r8
 8006056:	f77f af79 	ble.w	8005f4c <_printf_float+0x23c>
 800605a:	2301      	movs	r3, #1
 800605c:	465a      	mov	r2, fp
 800605e:	4631      	mov	r1, r6
 8006060:	4628      	mov	r0, r5
 8006062:	47b8      	blx	r7
 8006064:	3001      	adds	r0, #1
 8006066:	f43f aeae 	beq.w	8005dc6 <_printf_float+0xb6>
 800606a:	f108 0801 	add.w	r8, r8, #1
 800606e:	e7ec      	b.n	800604a <_printf_float+0x33a>
 8006070:	4642      	mov	r2, r8
 8006072:	4631      	mov	r1, r6
 8006074:	4628      	mov	r0, r5
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	d1c2      	bne.n	8006002 <_printf_float+0x2f2>
 800607c:	e6a3      	b.n	8005dc6 <_printf_float+0xb6>
 800607e:	2301      	movs	r3, #1
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	9206      	str	r2, [sp, #24]
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	f43f ae9c 	beq.w	8005dc6 <_printf_float+0xb6>
 800608e:	9a06      	ldr	r2, [sp, #24]
 8006090:	f10b 0b01 	add.w	fp, fp, #1
 8006094:	e7bb      	b.n	800600e <_printf_float+0x2fe>
 8006096:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800609a:	4631      	mov	r1, r6
 800609c:	4628      	mov	r0, r5
 800609e:	47b8      	blx	r7
 80060a0:	3001      	adds	r0, #1
 80060a2:	d1c0      	bne.n	8006026 <_printf_float+0x316>
 80060a4:	e68f      	b.n	8005dc6 <_printf_float+0xb6>
 80060a6:	9a06      	ldr	r2, [sp, #24]
 80060a8:	464b      	mov	r3, r9
 80060aa:	4442      	add	r2, r8
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b8      	blx	r7
 80060b2:	3001      	adds	r0, #1
 80060b4:	d1c3      	bne.n	800603e <_printf_float+0x32e>
 80060b6:	e686      	b.n	8005dc6 <_printf_float+0xb6>
 80060b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80060bc:	f1ba 0f01 	cmp.w	sl, #1
 80060c0:	dc01      	bgt.n	80060c6 <_printf_float+0x3b6>
 80060c2:	07db      	lsls	r3, r3, #31
 80060c4:	d536      	bpl.n	8006134 <_printf_float+0x424>
 80060c6:	2301      	movs	r3, #1
 80060c8:	4642      	mov	r2, r8
 80060ca:	4631      	mov	r1, r6
 80060cc:	4628      	mov	r0, r5
 80060ce:	47b8      	blx	r7
 80060d0:	3001      	adds	r0, #1
 80060d2:	f43f ae78 	beq.w	8005dc6 <_printf_float+0xb6>
 80060d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060da:	4631      	mov	r1, r6
 80060dc:	4628      	mov	r0, r5
 80060de:	47b8      	blx	r7
 80060e0:	3001      	adds	r0, #1
 80060e2:	f43f ae70 	beq.w	8005dc6 <_printf_float+0xb6>
 80060e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80060ea:	2200      	movs	r2, #0
 80060ec:	2300      	movs	r3, #0
 80060ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060f2:	f7fa fd09 	bl	8000b08 <__aeabi_dcmpeq>
 80060f6:	b9c0      	cbnz	r0, 800612a <_printf_float+0x41a>
 80060f8:	4653      	mov	r3, sl
 80060fa:	f108 0201 	add.w	r2, r8, #1
 80060fe:	4631      	mov	r1, r6
 8006100:	4628      	mov	r0, r5
 8006102:	47b8      	blx	r7
 8006104:	3001      	adds	r0, #1
 8006106:	d10c      	bne.n	8006122 <_printf_float+0x412>
 8006108:	e65d      	b.n	8005dc6 <_printf_float+0xb6>
 800610a:	2301      	movs	r3, #1
 800610c:	465a      	mov	r2, fp
 800610e:	4631      	mov	r1, r6
 8006110:	4628      	mov	r0, r5
 8006112:	47b8      	blx	r7
 8006114:	3001      	adds	r0, #1
 8006116:	f43f ae56 	beq.w	8005dc6 <_printf_float+0xb6>
 800611a:	f108 0801 	add.w	r8, r8, #1
 800611e:	45d0      	cmp	r8, sl
 8006120:	dbf3      	blt.n	800610a <_printf_float+0x3fa>
 8006122:	464b      	mov	r3, r9
 8006124:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006128:	e6df      	b.n	8005eea <_printf_float+0x1da>
 800612a:	f04f 0800 	mov.w	r8, #0
 800612e:	f104 0b1a 	add.w	fp, r4, #26
 8006132:	e7f4      	b.n	800611e <_printf_float+0x40e>
 8006134:	2301      	movs	r3, #1
 8006136:	4642      	mov	r2, r8
 8006138:	e7e1      	b.n	80060fe <_printf_float+0x3ee>
 800613a:	2301      	movs	r3, #1
 800613c:	464a      	mov	r2, r9
 800613e:	4631      	mov	r1, r6
 8006140:	4628      	mov	r0, r5
 8006142:	47b8      	blx	r7
 8006144:	3001      	adds	r0, #1
 8006146:	f43f ae3e 	beq.w	8005dc6 <_printf_float+0xb6>
 800614a:	f108 0801 	add.w	r8, r8, #1
 800614e:	68e3      	ldr	r3, [r4, #12]
 8006150:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006152:	1a5b      	subs	r3, r3, r1
 8006154:	4543      	cmp	r3, r8
 8006156:	dcf0      	bgt.n	800613a <_printf_float+0x42a>
 8006158:	e6fc      	b.n	8005f54 <_printf_float+0x244>
 800615a:	f04f 0800 	mov.w	r8, #0
 800615e:	f104 0919 	add.w	r9, r4, #25
 8006162:	e7f4      	b.n	800614e <_printf_float+0x43e>

08006164 <_printf_common>:
 8006164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	4616      	mov	r6, r2
 800616a:	4698      	mov	r8, r3
 800616c:	688a      	ldr	r2, [r1, #8]
 800616e:	690b      	ldr	r3, [r1, #16]
 8006170:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006174:	4293      	cmp	r3, r2
 8006176:	bfb8      	it	lt
 8006178:	4613      	movlt	r3, r2
 800617a:	6033      	str	r3, [r6, #0]
 800617c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006180:	4607      	mov	r7, r0
 8006182:	460c      	mov	r4, r1
 8006184:	b10a      	cbz	r2, 800618a <_printf_common+0x26>
 8006186:	3301      	adds	r3, #1
 8006188:	6033      	str	r3, [r6, #0]
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	0699      	lsls	r1, r3, #26
 800618e:	bf42      	ittt	mi
 8006190:	6833      	ldrmi	r3, [r6, #0]
 8006192:	3302      	addmi	r3, #2
 8006194:	6033      	strmi	r3, [r6, #0]
 8006196:	6825      	ldr	r5, [r4, #0]
 8006198:	f015 0506 	ands.w	r5, r5, #6
 800619c:	d106      	bne.n	80061ac <_printf_common+0x48>
 800619e:	f104 0a19 	add.w	sl, r4, #25
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	6832      	ldr	r2, [r6, #0]
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	42ab      	cmp	r3, r5
 80061aa:	dc26      	bgt.n	80061fa <_printf_common+0x96>
 80061ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061b0:	6822      	ldr	r2, [r4, #0]
 80061b2:	3b00      	subs	r3, #0
 80061b4:	bf18      	it	ne
 80061b6:	2301      	movne	r3, #1
 80061b8:	0692      	lsls	r2, r2, #26
 80061ba:	d42b      	bmi.n	8006214 <_printf_common+0xb0>
 80061bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061c0:	4641      	mov	r1, r8
 80061c2:	4638      	mov	r0, r7
 80061c4:	47c8      	blx	r9
 80061c6:	3001      	adds	r0, #1
 80061c8:	d01e      	beq.n	8006208 <_printf_common+0xa4>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	6922      	ldr	r2, [r4, #16]
 80061ce:	f003 0306 	and.w	r3, r3, #6
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	bf02      	ittt	eq
 80061d6:	68e5      	ldreq	r5, [r4, #12]
 80061d8:	6833      	ldreq	r3, [r6, #0]
 80061da:	1aed      	subeq	r5, r5, r3
 80061dc:	68a3      	ldr	r3, [r4, #8]
 80061de:	bf0c      	ite	eq
 80061e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e4:	2500      	movne	r5, #0
 80061e6:	4293      	cmp	r3, r2
 80061e8:	bfc4      	itt	gt
 80061ea:	1a9b      	subgt	r3, r3, r2
 80061ec:	18ed      	addgt	r5, r5, r3
 80061ee:	2600      	movs	r6, #0
 80061f0:	341a      	adds	r4, #26
 80061f2:	42b5      	cmp	r5, r6
 80061f4:	d11a      	bne.n	800622c <_printf_common+0xc8>
 80061f6:	2000      	movs	r0, #0
 80061f8:	e008      	b.n	800620c <_printf_common+0xa8>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4652      	mov	r2, sl
 80061fe:	4641      	mov	r1, r8
 8006200:	4638      	mov	r0, r7
 8006202:	47c8      	blx	r9
 8006204:	3001      	adds	r0, #1
 8006206:	d103      	bne.n	8006210 <_printf_common+0xac>
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	3501      	adds	r5, #1
 8006212:	e7c6      	b.n	80061a2 <_printf_common+0x3e>
 8006214:	18e1      	adds	r1, r4, r3
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	2030      	movs	r0, #48	@ 0x30
 800621a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800621e:	4422      	add	r2, r4
 8006220:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006224:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006228:	3302      	adds	r3, #2
 800622a:	e7c7      	b.n	80061bc <_printf_common+0x58>
 800622c:	2301      	movs	r3, #1
 800622e:	4622      	mov	r2, r4
 8006230:	4641      	mov	r1, r8
 8006232:	4638      	mov	r0, r7
 8006234:	47c8      	blx	r9
 8006236:	3001      	adds	r0, #1
 8006238:	d0e6      	beq.n	8006208 <_printf_common+0xa4>
 800623a:	3601      	adds	r6, #1
 800623c:	e7d9      	b.n	80061f2 <_printf_common+0x8e>
	...

08006240 <_printf_i>:
 8006240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006244:	7e0f      	ldrb	r7, [r1, #24]
 8006246:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006248:	2f78      	cmp	r7, #120	@ 0x78
 800624a:	4691      	mov	r9, r2
 800624c:	4680      	mov	r8, r0
 800624e:	460c      	mov	r4, r1
 8006250:	469a      	mov	sl, r3
 8006252:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006256:	d807      	bhi.n	8006268 <_printf_i+0x28>
 8006258:	2f62      	cmp	r7, #98	@ 0x62
 800625a:	d80a      	bhi.n	8006272 <_printf_i+0x32>
 800625c:	2f00      	cmp	r7, #0
 800625e:	f000 80d1 	beq.w	8006404 <_printf_i+0x1c4>
 8006262:	2f58      	cmp	r7, #88	@ 0x58
 8006264:	f000 80b8 	beq.w	80063d8 <_printf_i+0x198>
 8006268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800626c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006270:	e03a      	b.n	80062e8 <_printf_i+0xa8>
 8006272:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006276:	2b15      	cmp	r3, #21
 8006278:	d8f6      	bhi.n	8006268 <_printf_i+0x28>
 800627a:	a101      	add	r1, pc, #4	@ (adr r1, 8006280 <_printf_i+0x40>)
 800627c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006280:	080062d9 	.word	0x080062d9
 8006284:	080062ed 	.word	0x080062ed
 8006288:	08006269 	.word	0x08006269
 800628c:	08006269 	.word	0x08006269
 8006290:	08006269 	.word	0x08006269
 8006294:	08006269 	.word	0x08006269
 8006298:	080062ed 	.word	0x080062ed
 800629c:	08006269 	.word	0x08006269
 80062a0:	08006269 	.word	0x08006269
 80062a4:	08006269 	.word	0x08006269
 80062a8:	08006269 	.word	0x08006269
 80062ac:	080063eb 	.word	0x080063eb
 80062b0:	08006317 	.word	0x08006317
 80062b4:	080063a5 	.word	0x080063a5
 80062b8:	08006269 	.word	0x08006269
 80062bc:	08006269 	.word	0x08006269
 80062c0:	0800640d 	.word	0x0800640d
 80062c4:	08006269 	.word	0x08006269
 80062c8:	08006317 	.word	0x08006317
 80062cc:	08006269 	.word	0x08006269
 80062d0:	08006269 	.word	0x08006269
 80062d4:	080063ad 	.word	0x080063ad
 80062d8:	6833      	ldr	r3, [r6, #0]
 80062da:	1d1a      	adds	r2, r3, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6032      	str	r2, [r6, #0]
 80062e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062e8:	2301      	movs	r3, #1
 80062ea:	e09c      	b.n	8006426 <_printf_i+0x1e6>
 80062ec:	6833      	ldr	r3, [r6, #0]
 80062ee:	6820      	ldr	r0, [r4, #0]
 80062f0:	1d19      	adds	r1, r3, #4
 80062f2:	6031      	str	r1, [r6, #0]
 80062f4:	0606      	lsls	r6, r0, #24
 80062f6:	d501      	bpl.n	80062fc <_printf_i+0xbc>
 80062f8:	681d      	ldr	r5, [r3, #0]
 80062fa:	e003      	b.n	8006304 <_printf_i+0xc4>
 80062fc:	0645      	lsls	r5, r0, #25
 80062fe:	d5fb      	bpl.n	80062f8 <_printf_i+0xb8>
 8006300:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006304:	2d00      	cmp	r5, #0
 8006306:	da03      	bge.n	8006310 <_printf_i+0xd0>
 8006308:	232d      	movs	r3, #45	@ 0x2d
 800630a:	426d      	negs	r5, r5
 800630c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006310:	4858      	ldr	r0, [pc, #352]	@ (8006474 <_printf_i+0x234>)
 8006312:	230a      	movs	r3, #10
 8006314:	e011      	b.n	800633a <_printf_i+0xfa>
 8006316:	6821      	ldr	r1, [r4, #0]
 8006318:	6833      	ldr	r3, [r6, #0]
 800631a:	0608      	lsls	r0, r1, #24
 800631c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006320:	d402      	bmi.n	8006328 <_printf_i+0xe8>
 8006322:	0649      	lsls	r1, r1, #25
 8006324:	bf48      	it	mi
 8006326:	b2ad      	uxthmi	r5, r5
 8006328:	2f6f      	cmp	r7, #111	@ 0x6f
 800632a:	4852      	ldr	r0, [pc, #328]	@ (8006474 <_printf_i+0x234>)
 800632c:	6033      	str	r3, [r6, #0]
 800632e:	bf14      	ite	ne
 8006330:	230a      	movne	r3, #10
 8006332:	2308      	moveq	r3, #8
 8006334:	2100      	movs	r1, #0
 8006336:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800633a:	6866      	ldr	r6, [r4, #4]
 800633c:	60a6      	str	r6, [r4, #8]
 800633e:	2e00      	cmp	r6, #0
 8006340:	db05      	blt.n	800634e <_printf_i+0x10e>
 8006342:	6821      	ldr	r1, [r4, #0]
 8006344:	432e      	orrs	r6, r5
 8006346:	f021 0104 	bic.w	r1, r1, #4
 800634a:	6021      	str	r1, [r4, #0]
 800634c:	d04b      	beq.n	80063e6 <_printf_i+0x1a6>
 800634e:	4616      	mov	r6, r2
 8006350:	fbb5 f1f3 	udiv	r1, r5, r3
 8006354:	fb03 5711 	mls	r7, r3, r1, r5
 8006358:	5dc7      	ldrb	r7, [r0, r7]
 800635a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800635e:	462f      	mov	r7, r5
 8006360:	42bb      	cmp	r3, r7
 8006362:	460d      	mov	r5, r1
 8006364:	d9f4      	bls.n	8006350 <_printf_i+0x110>
 8006366:	2b08      	cmp	r3, #8
 8006368:	d10b      	bne.n	8006382 <_printf_i+0x142>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	07df      	lsls	r7, r3, #31
 800636e:	d508      	bpl.n	8006382 <_printf_i+0x142>
 8006370:	6923      	ldr	r3, [r4, #16]
 8006372:	6861      	ldr	r1, [r4, #4]
 8006374:	4299      	cmp	r1, r3
 8006376:	bfde      	ittt	le
 8006378:	2330      	movle	r3, #48	@ 0x30
 800637a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800637e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006382:	1b92      	subs	r2, r2, r6
 8006384:	6122      	str	r2, [r4, #16]
 8006386:	f8cd a000 	str.w	sl, [sp]
 800638a:	464b      	mov	r3, r9
 800638c:	aa03      	add	r2, sp, #12
 800638e:	4621      	mov	r1, r4
 8006390:	4640      	mov	r0, r8
 8006392:	f7ff fee7 	bl	8006164 <_printf_common>
 8006396:	3001      	adds	r0, #1
 8006398:	d14a      	bne.n	8006430 <_printf_i+0x1f0>
 800639a:	f04f 30ff 	mov.w	r0, #4294967295
 800639e:	b004      	add	sp, #16
 80063a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	f043 0320 	orr.w	r3, r3, #32
 80063aa:	6023      	str	r3, [r4, #0]
 80063ac:	4832      	ldr	r0, [pc, #200]	@ (8006478 <_printf_i+0x238>)
 80063ae:	2778      	movs	r7, #120	@ 0x78
 80063b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	6831      	ldr	r1, [r6, #0]
 80063b8:	061f      	lsls	r7, r3, #24
 80063ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80063be:	d402      	bmi.n	80063c6 <_printf_i+0x186>
 80063c0:	065f      	lsls	r7, r3, #25
 80063c2:	bf48      	it	mi
 80063c4:	b2ad      	uxthmi	r5, r5
 80063c6:	6031      	str	r1, [r6, #0]
 80063c8:	07d9      	lsls	r1, r3, #31
 80063ca:	bf44      	itt	mi
 80063cc:	f043 0320 	orrmi.w	r3, r3, #32
 80063d0:	6023      	strmi	r3, [r4, #0]
 80063d2:	b11d      	cbz	r5, 80063dc <_printf_i+0x19c>
 80063d4:	2310      	movs	r3, #16
 80063d6:	e7ad      	b.n	8006334 <_printf_i+0xf4>
 80063d8:	4826      	ldr	r0, [pc, #152]	@ (8006474 <_printf_i+0x234>)
 80063da:	e7e9      	b.n	80063b0 <_printf_i+0x170>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	f023 0320 	bic.w	r3, r3, #32
 80063e2:	6023      	str	r3, [r4, #0]
 80063e4:	e7f6      	b.n	80063d4 <_printf_i+0x194>
 80063e6:	4616      	mov	r6, r2
 80063e8:	e7bd      	b.n	8006366 <_printf_i+0x126>
 80063ea:	6833      	ldr	r3, [r6, #0]
 80063ec:	6825      	ldr	r5, [r4, #0]
 80063ee:	6961      	ldr	r1, [r4, #20]
 80063f0:	1d18      	adds	r0, r3, #4
 80063f2:	6030      	str	r0, [r6, #0]
 80063f4:	062e      	lsls	r6, r5, #24
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	d501      	bpl.n	80063fe <_printf_i+0x1be>
 80063fa:	6019      	str	r1, [r3, #0]
 80063fc:	e002      	b.n	8006404 <_printf_i+0x1c4>
 80063fe:	0668      	lsls	r0, r5, #25
 8006400:	d5fb      	bpl.n	80063fa <_printf_i+0x1ba>
 8006402:	8019      	strh	r1, [r3, #0]
 8006404:	2300      	movs	r3, #0
 8006406:	6123      	str	r3, [r4, #16]
 8006408:	4616      	mov	r6, r2
 800640a:	e7bc      	b.n	8006386 <_printf_i+0x146>
 800640c:	6833      	ldr	r3, [r6, #0]
 800640e:	1d1a      	adds	r2, r3, #4
 8006410:	6032      	str	r2, [r6, #0]
 8006412:	681e      	ldr	r6, [r3, #0]
 8006414:	6862      	ldr	r2, [r4, #4]
 8006416:	2100      	movs	r1, #0
 8006418:	4630      	mov	r0, r6
 800641a:	f7f9 fef9 	bl	8000210 <memchr>
 800641e:	b108      	cbz	r0, 8006424 <_printf_i+0x1e4>
 8006420:	1b80      	subs	r0, r0, r6
 8006422:	6060      	str	r0, [r4, #4]
 8006424:	6863      	ldr	r3, [r4, #4]
 8006426:	6123      	str	r3, [r4, #16]
 8006428:	2300      	movs	r3, #0
 800642a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800642e:	e7aa      	b.n	8006386 <_printf_i+0x146>
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	4632      	mov	r2, r6
 8006434:	4649      	mov	r1, r9
 8006436:	4640      	mov	r0, r8
 8006438:	47d0      	blx	sl
 800643a:	3001      	adds	r0, #1
 800643c:	d0ad      	beq.n	800639a <_printf_i+0x15a>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	079b      	lsls	r3, r3, #30
 8006442:	d413      	bmi.n	800646c <_printf_i+0x22c>
 8006444:	68e0      	ldr	r0, [r4, #12]
 8006446:	9b03      	ldr	r3, [sp, #12]
 8006448:	4298      	cmp	r0, r3
 800644a:	bfb8      	it	lt
 800644c:	4618      	movlt	r0, r3
 800644e:	e7a6      	b.n	800639e <_printf_i+0x15e>
 8006450:	2301      	movs	r3, #1
 8006452:	4632      	mov	r2, r6
 8006454:	4649      	mov	r1, r9
 8006456:	4640      	mov	r0, r8
 8006458:	47d0      	blx	sl
 800645a:	3001      	adds	r0, #1
 800645c:	d09d      	beq.n	800639a <_printf_i+0x15a>
 800645e:	3501      	adds	r5, #1
 8006460:	68e3      	ldr	r3, [r4, #12]
 8006462:	9903      	ldr	r1, [sp, #12]
 8006464:	1a5b      	subs	r3, r3, r1
 8006466:	42ab      	cmp	r3, r5
 8006468:	dcf2      	bgt.n	8006450 <_printf_i+0x210>
 800646a:	e7eb      	b.n	8006444 <_printf_i+0x204>
 800646c:	2500      	movs	r5, #0
 800646e:	f104 0619 	add.w	r6, r4, #25
 8006472:	e7f5      	b.n	8006460 <_printf_i+0x220>
 8006474:	0800888a 	.word	0x0800888a
 8006478:	0800889b 	.word	0x0800889b

0800647c <std>:
 800647c:	2300      	movs	r3, #0
 800647e:	b510      	push	{r4, lr}
 8006480:	4604      	mov	r4, r0
 8006482:	e9c0 3300 	strd	r3, r3, [r0]
 8006486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800648a:	6083      	str	r3, [r0, #8]
 800648c:	8181      	strh	r1, [r0, #12]
 800648e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006490:	81c2      	strh	r2, [r0, #14]
 8006492:	6183      	str	r3, [r0, #24]
 8006494:	4619      	mov	r1, r3
 8006496:	2208      	movs	r2, #8
 8006498:	305c      	adds	r0, #92	@ 0x5c
 800649a:	f000 f916 	bl	80066ca <memset>
 800649e:	4b0d      	ldr	r3, [pc, #52]	@ (80064d4 <std+0x58>)
 80064a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80064a2:	4b0d      	ldr	r3, [pc, #52]	@ (80064d8 <std+0x5c>)
 80064a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064a6:	4b0d      	ldr	r3, [pc, #52]	@ (80064dc <std+0x60>)
 80064a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064aa:	4b0d      	ldr	r3, [pc, #52]	@ (80064e0 <std+0x64>)
 80064ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80064ae:	4b0d      	ldr	r3, [pc, #52]	@ (80064e4 <std+0x68>)
 80064b0:	6224      	str	r4, [r4, #32]
 80064b2:	429c      	cmp	r4, r3
 80064b4:	d006      	beq.n	80064c4 <std+0x48>
 80064b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064ba:	4294      	cmp	r4, r2
 80064bc:	d002      	beq.n	80064c4 <std+0x48>
 80064be:	33d0      	adds	r3, #208	@ 0xd0
 80064c0:	429c      	cmp	r4, r3
 80064c2:	d105      	bne.n	80064d0 <std+0x54>
 80064c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064cc:	f000 b98a 	b.w	80067e4 <__retarget_lock_init_recursive>
 80064d0:	bd10      	pop	{r4, pc}
 80064d2:	bf00      	nop
 80064d4:	08006645 	.word	0x08006645
 80064d8:	08006667 	.word	0x08006667
 80064dc:	0800669f 	.word	0x0800669f
 80064e0:	080066c3 	.word	0x080066c3
 80064e4:	20000378 	.word	0x20000378

080064e8 <stdio_exit_handler>:
 80064e8:	4a02      	ldr	r2, [pc, #8]	@ (80064f4 <stdio_exit_handler+0xc>)
 80064ea:	4903      	ldr	r1, [pc, #12]	@ (80064f8 <stdio_exit_handler+0x10>)
 80064ec:	4803      	ldr	r0, [pc, #12]	@ (80064fc <stdio_exit_handler+0x14>)
 80064ee:	f000 b869 	b.w	80065c4 <_fwalk_sglue>
 80064f2:	bf00      	nop
 80064f4:	2000000c 	.word	0x2000000c
 80064f8:	08007fe1 	.word	0x08007fe1
 80064fc:	2000001c 	.word	0x2000001c

08006500 <cleanup_stdio>:
 8006500:	6841      	ldr	r1, [r0, #4]
 8006502:	4b0c      	ldr	r3, [pc, #48]	@ (8006534 <cleanup_stdio+0x34>)
 8006504:	4299      	cmp	r1, r3
 8006506:	b510      	push	{r4, lr}
 8006508:	4604      	mov	r4, r0
 800650a:	d001      	beq.n	8006510 <cleanup_stdio+0x10>
 800650c:	f001 fd68 	bl	8007fe0 <_fflush_r>
 8006510:	68a1      	ldr	r1, [r4, #8]
 8006512:	4b09      	ldr	r3, [pc, #36]	@ (8006538 <cleanup_stdio+0x38>)
 8006514:	4299      	cmp	r1, r3
 8006516:	d002      	beq.n	800651e <cleanup_stdio+0x1e>
 8006518:	4620      	mov	r0, r4
 800651a:	f001 fd61 	bl	8007fe0 <_fflush_r>
 800651e:	68e1      	ldr	r1, [r4, #12]
 8006520:	4b06      	ldr	r3, [pc, #24]	@ (800653c <cleanup_stdio+0x3c>)
 8006522:	4299      	cmp	r1, r3
 8006524:	d004      	beq.n	8006530 <cleanup_stdio+0x30>
 8006526:	4620      	mov	r0, r4
 8006528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800652c:	f001 bd58 	b.w	8007fe0 <_fflush_r>
 8006530:	bd10      	pop	{r4, pc}
 8006532:	bf00      	nop
 8006534:	20000378 	.word	0x20000378
 8006538:	200003e0 	.word	0x200003e0
 800653c:	20000448 	.word	0x20000448

08006540 <global_stdio_init.part.0>:
 8006540:	b510      	push	{r4, lr}
 8006542:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <global_stdio_init.part.0+0x30>)
 8006544:	4c0b      	ldr	r4, [pc, #44]	@ (8006574 <global_stdio_init.part.0+0x34>)
 8006546:	4a0c      	ldr	r2, [pc, #48]	@ (8006578 <global_stdio_init.part.0+0x38>)
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	4620      	mov	r0, r4
 800654c:	2200      	movs	r2, #0
 800654e:	2104      	movs	r1, #4
 8006550:	f7ff ff94 	bl	800647c <std>
 8006554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006558:	2201      	movs	r2, #1
 800655a:	2109      	movs	r1, #9
 800655c:	f7ff ff8e 	bl	800647c <std>
 8006560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006564:	2202      	movs	r2, #2
 8006566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800656a:	2112      	movs	r1, #18
 800656c:	f7ff bf86 	b.w	800647c <std>
 8006570:	200004b0 	.word	0x200004b0
 8006574:	20000378 	.word	0x20000378
 8006578:	080064e9 	.word	0x080064e9

0800657c <__sfp_lock_acquire>:
 800657c:	4801      	ldr	r0, [pc, #4]	@ (8006584 <__sfp_lock_acquire+0x8>)
 800657e:	f000 b932 	b.w	80067e6 <__retarget_lock_acquire_recursive>
 8006582:	bf00      	nop
 8006584:	200004b9 	.word	0x200004b9

08006588 <__sfp_lock_release>:
 8006588:	4801      	ldr	r0, [pc, #4]	@ (8006590 <__sfp_lock_release+0x8>)
 800658a:	f000 b92d 	b.w	80067e8 <__retarget_lock_release_recursive>
 800658e:	bf00      	nop
 8006590:	200004b9 	.word	0x200004b9

08006594 <__sinit>:
 8006594:	b510      	push	{r4, lr}
 8006596:	4604      	mov	r4, r0
 8006598:	f7ff fff0 	bl	800657c <__sfp_lock_acquire>
 800659c:	6a23      	ldr	r3, [r4, #32]
 800659e:	b11b      	cbz	r3, 80065a8 <__sinit+0x14>
 80065a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a4:	f7ff bff0 	b.w	8006588 <__sfp_lock_release>
 80065a8:	4b04      	ldr	r3, [pc, #16]	@ (80065bc <__sinit+0x28>)
 80065aa:	6223      	str	r3, [r4, #32]
 80065ac:	4b04      	ldr	r3, [pc, #16]	@ (80065c0 <__sinit+0x2c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f5      	bne.n	80065a0 <__sinit+0xc>
 80065b4:	f7ff ffc4 	bl	8006540 <global_stdio_init.part.0>
 80065b8:	e7f2      	b.n	80065a0 <__sinit+0xc>
 80065ba:	bf00      	nop
 80065bc:	08006501 	.word	0x08006501
 80065c0:	200004b0 	.word	0x200004b0

080065c4 <_fwalk_sglue>:
 80065c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c8:	4607      	mov	r7, r0
 80065ca:	4688      	mov	r8, r1
 80065cc:	4614      	mov	r4, r2
 80065ce:	2600      	movs	r6, #0
 80065d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065d4:	f1b9 0901 	subs.w	r9, r9, #1
 80065d8:	d505      	bpl.n	80065e6 <_fwalk_sglue+0x22>
 80065da:	6824      	ldr	r4, [r4, #0]
 80065dc:	2c00      	cmp	r4, #0
 80065de:	d1f7      	bne.n	80065d0 <_fwalk_sglue+0xc>
 80065e0:	4630      	mov	r0, r6
 80065e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065e6:	89ab      	ldrh	r3, [r5, #12]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d907      	bls.n	80065fc <_fwalk_sglue+0x38>
 80065ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065f0:	3301      	adds	r3, #1
 80065f2:	d003      	beq.n	80065fc <_fwalk_sglue+0x38>
 80065f4:	4629      	mov	r1, r5
 80065f6:	4638      	mov	r0, r7
 80065f8:	47c0      	blx	r8
 80065fa:	4306      	orrs	r6, r0
 80065fc:	3568      	adds	r5, #104	@ 0x68
 80065fe:	e7e9      	b.n	80065d4 <_fwalk_sglue+0x10>

08006600 <siprintf>:
 8006600:	b40e      	push	{r1, r2, r3}
 8006602:	b510      	push	{r4, lr}
 8006604:	b09d      	sub	sp, #116	@ 0x74
 8006606:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006608:	9002      	str	r0, [sp, #8]
 800660a:	9006      	str	r0, [sp, #24]
 800660c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006610:	480a      	ldr	r0, [pc, #40]	@ (800663c <siprintf+0x3c>)
 8006612:	9107      	str	r1, [sp, #28]
 8006614:	9104      	str	r1, [sp, #16]
 8006616:	490a      	ldr	r1, [pc, #40]	@ (8006640 <siprintf+0x40>)
 8006618:	f853 2b04 	ldr.w	r2, [r3], #4
 800661c:	9105      	str	r1, [sp, #20]
 800661e:	2400      	movs	r4, #0
 8006620:	a902      	add	r1, sp, #8
 8006622:	6800      	ldr	r0, [r0, #0]
 8006624:	9301      	str	r3, [sp, #4]
 8006626:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006628:	f001 fb5a 	bl	8007ce0 <_svfiprintf_r>
 800662c:	9b02      	ldr	r3, [sp, #8]
 800662e:	701c      	strb	r4, [r3, #0]
 8006630:	b01d      	add	sp, #116	@ 0x74
 8006632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006636:	b003      	add	sp, #12
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000018 	.word	0x20000018
 8006640:	ffff0208 	.word	0xffff0208

08006644 <__sread>:
 8006644:	b510      	push	{r4, lr}
 8006646:	460c      	mov	r4, r1
 8006648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664c:	f000 f86c 	bl	8006728 <_read_r>
 8006650:	2800      	cmp	r0, #0
 8006652:	bfab      	itete	ge
 8006654:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006656:	89a3      	ldrhlt	r3, [r4, #12]
 8006658:	181b      	addge	r3, r3, r0
 800665a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800665e:	bfac      	ite	ge
 8006660:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006662:	81a3      	strhlt	r3, [r4, #12]
 8006664:	bd10      	pop	{r4, pc}

08006666 <__swrite>:
 8006666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666a:	461f      	mov	r7, r3
 800666c:	898b      	ldrh	r3, [r1, #12]
 800666e:	05db      	lsls	r3, r3, #23
 8006670:	4605      	mov	r5, r0
 8006672:	460c      	mov	r4, r1
 8006674:	4616      	mov	r6, r2
 8006676:	d505      	bpl.n	8006684 <__swrite+0x1e>
 8006678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667c:	2302      	movs	r3, #2
 800667e:	2200      	movs	r2, #0
 8006680:	f000 f840 	bl	8006704 <_lseek_r>
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800668a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800668e:	81a3      	strh	r3, [r4, #12]
 8006690:	4632      	mov	r2, r6
 8006692:	463b      	mov	r3, r7
 8006694:	4628      	mov	r0, r5
 8006696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800669a:	f000 b867 	b.w	800676c <_write_r>

0800669e <__sseek>:
 800669e:	b510      	push	{r4, lr}
 80066a0:	460c      	mov	r4, r1
 80066a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a6:	f000 f82d 	bl	8006704 <_lseek_r>
 80066aa:	1c43      	adds	r3, r0, #1
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	bf15      	itete	ne
 80066b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066ba:	81a3      	strheq	r3, [r4, #12]
 80066bc:	bf18      	it	ne
 80066be:	81a3      	strhne	r3, [r4, #12]
 80066c0:	bd10      	pop	{r4, pc}

080066c2 <__sclose>:
 80066c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c6:	f000 b80d 	b.w	80066e4 <_close_r>

080066ca <memset>:
 80066ca:	4402      	add	r2, r0
 80066cc:	4603      	mov	r3, r0
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d100      	bne.n	80066d4 <memset+0xa>
 80066d2:	4770      	bx	lr
 80066d4:	f803 1b01 	strb.w	r1, [r3], #1
 80066d8:	e7f9      	b.n	80066ce <memset+0x4>
	...

080066dc <_localeconv_r>:
 80066dc:	4800      	ldr	r0, [pc, #0]	@ (80066e0 <_localeconv_r+0x4>)
 80066de:	4770      	bx	lr
 80066e0:	20000158 	.word	0x20000158

080066e4 <_close_r>:
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	4d06      	ldr	r5, [pc, #24]	@ (8006700 <_close_r+0x1c>)
 80066e8:	2300      	movs	r3, #0
 80066ea:	4604      	mov	r4, r0
 80066ec:	4608      	mov	r0, r1
 80066ee:	602b      	str	r3, [r5, #0]
 80066f0:	f7fb fede 	bl	80024b0 <_close>
 80066f4:	1c43      	adds	r3, r0, #1
 80066f6:	d102      	bne.n	80066fe <_close_r+0x1a>
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	b103      	cbz	r3, 80066fe <_close_r+0x1a>
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	bd38      	pop	{r3, r4, r5, pc}
 8006700:	200004b4 	.word	0x200004b4

08006704 <_lseek_r>:
 8006704:	b538      	push	{r3, r4, r5, lr}
 8006706:	4d07      	ldr	r5, [pc, #28]	@ (8006724 <_lseek_r+0x20>)
 8006708:	4604      	mov	r4, r0
 800670a:	4608      	mov	r0, r1
 800670c:	4611      	mov	r1, r2
 800670e:	2200      	movs	r2, #0
 8006710:	602a      	str	r2, [r5, #0]
 8006712:	461a      	mov	r2, r3
 8006714:	f7fb fef3 	bl	80024fe <_lseek>
 8006718:	1c43      	adds	r3, r0, #1
 800671a:	d102      	bne.n	8006722 <_lseek_r+0x1e>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	b103      	cbz	r3, 8006722 <_lseek_r+0x1e>
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	bd38      	pop	{r3, r4, r5, pc}
 8006724:	200004b4 	.word	0x200004b4

08006728 <_read_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4d07      	ldr	r5, [pc, #28]	@ (8006748 <_read_r+0x20>)
 800672c:	4604      	mov	r4, r0
 800672e:	4608      	mov	r0, r1
 8006730:	4611      	mov	r1, r2
 8006732:	2200      	movs	r2, #0
 8006734:	602a      	str	r2, [r5, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	f7fb fe81 	bl	800243e <_read>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_read_r+0x1e>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b103      	cbz	r3, 8006746 <_read_r+0x1e>
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	200004b4 	.word	0x200004b4

0800674c <_sbrk_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4d06      	ldr	r5, [pc, #24]	@ (8006768 <_sbrk_r+0x1c>)
 8006750:	2300      	movs	r3, #0
 8006752:	4604      	mov	r4, r0
 8006754:	4608      	mov	r0, r1
 8006756:	602b      	str	r3, [r5, #0]
 8006758:	f7fb fede 	bl	8002518 <_sbrk>
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d102      	bne.n	8006766 <_sbrk_r+0x1a>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	b103      	cbz	r3, 8006766 <_sbrk_r+0x1a>
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	bd38      	pop	{r3, r4, r5, pc}
 8006768:	200004b4 	.word	0x200004b4

0800676c <_write_r>:
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	4d07      	ldr	r5, [pc, #28]	@ (800678c <_write_r+0x20>)
 8006770:	4604      	mov	r4, r0
 8006772:	4608      	mov	r0, r1
 8006774:	4611      	mov	r1, r2
 8006776:	2200      	movs	r2, #0
 8006778:	602a      	str	r2, [r5, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	f7fb fe7c 	bl	8002478 <_write>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d102      	bne.n	800678a <_write_r+0x1e>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	b103      	cbz	r3, 800678a <_write_r+0x1e>
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	200004b4 	.word	0x200004b4

08006790 <__errno>:
 8006790:	4b01      	ldr	r3, [pc, #4]	@ (8006798 <__errno+0x8>)
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000018 	.word	0x20000018

0800679c <__libc_init_array>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	4d0d      	ldr	r5, [pc, #52]	@ (80067d4 <__libc_init_array+0x38>)
 80067a0:	4c0d      	ldr	r4, [pc, #52]	@ (80067d8 <__libc_init_array+0x3c>)
 80067a2:	1b64      	subs	r4, r4, r5
 80067a4:	10a4      	asrs	r4, r4, #2
 80067a6:	2600      	movs	r6, #0
 80067a8:	42a6      	cmp	r6, r4
 80067aa:	d109      	bne.n	80067c0 <__libc_init_array+0x24>
 80067ac:	4d0b      	ldr	r5, [pc, #44]	@ (80067dc <__libc_init_array+0x40>)
 80067ae:	4c0c      	ldr	r4, [pc, #48]	@ (80067e0 <__libc_init_array+0x44>)
 80067b0:	f001 ff90 	bl	80086d4 <_init>
 80067b4:	1b64      	subs	r4, r4, r5
 80067b6:	10a4      	asrs	r4, r4, #2
 80067b8:	2600      	movs	r6, #0
 80067ba:	42a6      	cmp	r6, r4
 80067bc:	d105      	bne.n	80067ca <__libc_init_array+0x2e>
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c4:	4798      	blx	r3
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7ee      	b.n	80067a8 <__libc_init_array+0xc>
 80067ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ce:	4798      	blx	r3
 80067d0:	3601      	adds	r6, #1
 80067d2:	e7f2      	b.n	80067ba <__libc_init_array+0x1e>
 80067d4:	08008bf4 	.word	0x08008bf4
 80067d8:	08008bf4 	.word	0x08008bf4
 80067dc:	08008bf4 	.word	0x08008bf4
 80067e0:	08008bf8 	.word	0x08008bf8

080067e4 <__retarget_lock_init_recursive>:
 80067e4:	4770      	bx	lr

080067e6 <__retarget_lock_acquire_recursive>:
 80067e6:	4770      	bx	lr

080067e8 <__retarget_lock_release_recursive>:
 80067e8:	4770      	bx	lr

080067ea <quorem>:
 80067ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ee:	6903      	ldr	r3, [r0, #16]
 80067f0:	690c      	ldr	r4, [r1, #16]
 80067f2:	42a3      	cmp	r3, r4
 80067f4:	4607      	mov	r7, r0
 80067f6:	db7e      	blt.n	80068f6 <quorem+0x10c>
 80067f8:	3c01      	subs	r4, #1
 80067fa:	f101 0814 	add.w	r8, r1, #20
 80067fe:	00a3      	lsls	r3, r4, #2
 8006800:	f100 0514 	add.w	r5, r0, #20
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800680a:	9301      	str	r3, [sp, #4]
 800680c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006814:	3301      	adds	r3, #1
 8006816:	429a      	cmp	r2, r3
 8006818:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800681c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006820:	d32e      	bcc.n	8006880 <quorem+0x96>
 8006822:	f04f 0a00 	mov.w	sl, #0
 8006826:	46c4      	mov	ip, r8
 8006828:	46ae      	mov	lr, r5
 800682a:	46d3      	mov	fp, sl
 800682c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006830:	b298      	uxth	r0, r3
 8006832:	fb06 a000 	mla	r0, r6, r0, sl
 8006836:	0c02      	lsrs	r2, r0, #16
 8006838:	0c1b      	lsrs	r3, r3, #16
 800683a:	fb06 2303 	mla	r3, r6, r3, r2
 800683e:	f8de 2000 	ldr.w	r2, [lr]
 8006842:	b280      	uxth	r0, r0
 8006844:	b292      	uxth	r2, r2
 8006846:	1a12      	subs	r2, r2, r0
 8006848:	445a      	add	r2, fp
 800684a:	f8de 0000 	ldr.w	r0, [lr]
 800684e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006852:	b29b      	uxth	r3, r3
 8006854:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006858:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800685c:	b292      	uxth	r2, r2
 800685e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006862:	45e1      	cmp	r9, ip
 8006864:	f84e 2b04 	str.w	r2, [lr], #4
 8006868:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800686c:	d2de      	bcs.n	800682c <quorem+0x42>
 800686e:	9b00      	ldr	r3, [sp, #0]
 8006870:	58eb      	ldr	r3, [r5, r3]
 8006872:	b92b      	cbnz	r3, 8006880 <quorem+0x96>
 8006874:	9b01      	ldr	r3, [sp, #4]
 8006876:	3b04      	subs	r3, #4
 8006878:	429d      	cmp	r5, r3
 800687a:	461a      	mov	r2, r3
 800687c:	d32f      	bcc.n	80068de <quorem+0xf4>
 800687e:	613c      	str	r4, [r7, #16]
 8006880:	4638      	mov	r0, r7
 8006882:	f001 f8c9 	bl	8007a18 <__mcmp>
 8006886:	2800      	cmp	r0, #0
 8006888:	db25      	blt.n	80068d6 <quorem+0xec>
 800688a:	4629      	mov	r1, r5
 800688c:	2000      	movs	r0, #0
 800688e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006892:	f8d1 c000 	ldr.w	ip, [r1]
 8006896:	fa1f fe82 	uxth.w	lr, r2
 800689a:	fa1f f38c 	uxth.w	r3, ip
 800689e:	eba3 030e 	sub.w	r3, r3, lr
 80068a2:	4403      	add	r3, r0
 80068a4:	0c12      	lsrs	r2, r2, #16
 80068a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068b4:	45c1      	cmp	r9, r8
 80068b6:	f841 3b04 	str.w	r3, [r1], #4
 80068ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068be:	d2e6      	bcs.n	800688e <quorem+0xa4>
 80068c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068c8:	b922      	cbnz	r2, 80068d4 <quorem+0xea>
 80068ca:	3b04      	subs	r3, #4
 80068cc:	429d      	cmp	r5, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	d30b      	bcc.n	80068ea <quorem+0x100>
 80068d2:	613c      	str	r4, [r7, #16]
 80068d4:	3601      	adds	r6, #1
 80068d6:	4630      	mov	r0, r6
 80068d8:	b003      	add	sp, #12
 80068da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	3b04      	subs	r3, #4
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	d1cb      	bne.n	800687e <quorem+0x94>
 80068e6:	3c01      	subs	r4, #1
 80068e8:	e7c6      	b.n	8006878 <quorem+0x8e>
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	3b04      	subs	r3, #4
 80068ee:	2a00      	cmp	r2, #0
 80068f0:	d1ef      	bne.n	80068d2 <quorem+0xe8>
 80068f2:	3c01      	subs	r4, #1
 80068f4:	e7ea      	b.n	80068cc <quorem+0xe2>
 80068f6:	2000      	movs	r0, #0
 80068f8:	e7ee      	b.n	80068d8 <quorem+0xee>
 80068fa:	0000      	movs	r0, r0
 80068fc:	0000      	movs	r0, r0
	...

08006900 <_dtoa_r>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	69c7      	ldr	r7, [r0, #28]
 8006906:	b097      	sub	sp, #92	@ 0x5c
 8006908:	ed8d 0b04 	vstr	d0, [sp, #16]
 800690c:	ec55 4b10 	vmov	r4, r5, d0
 8006910:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006912:	9107      	str	r1, [sp, #28]
 8006914:	4681      	mov	r9, r0
 8006916:	920c      	str	r2, [sp, #48]	@ 0x30
 8006918:	9311      	str	r3, [sp, #68]	@ 0x44
 800691a:	b97f      	cbnz	r7, 800693c <_dtoa_r+0x3c>
 800691c:	2010      	movs	r0, #16
 800691e:	f7ff f8a1 	bl	8005a64 <malloc>
 8006922:	4602      	mov	r2, r0
 8006924:	f8c9 001c 	str.w	r0, [r9, #28]
 8006928:	b920      	cbnz	r0, 8006934 <_dtoa_r+0x34>
 800692a:	4ba9      	ldr	r3, [pc, #676]	@ (8006bd0 <_dtoa_r+0x2d0>)
 800692c:	21ef      	movs	r1, #239	@ 0xef
 800692e:	48a9      	ldr	r0, [pc, #676]	@ (8006bd4 <_dtoa_r+0x2d4>)
 8006930:	f001 fba6 	bl	8008080 <__assert_func>
 8006934:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006938:	6007      	str	r7, [r0, #0]
 800693a:	60c7      	str	r7, [r0, #12]
 800693c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006940:	6819      	ldr	r1, [r3, #0]
 8006942:	b159      	cbz	r1, 800695c <_dtoa_r+0x5c>
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	604a      	str	r2, [r1, #4]
 8006948:	2301      	movs	r3, #1
 800694a:	4093      	lsls	r3, r2
 800694c:	608b      	str	r3, [r1, #8]
 800694e:	4648      	mov	r0, r9
 8006950:	f000 fe30 	bl	80075b4 <_Bfree>
 8006954:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	1e2b      	subs	r3, r5, #0
 800695e:	bfb9      	ittee	lt
 8006960:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006964:	9305      	strlt	r3, [sp, #20]
 8006966:	2300      	movge	r3, #0
 8006968:	6033      	strge	r3, [r6, #0]
 800696a:	9f05      	ldr	r7, [sp, #20]
 800696c:	4b9a      	ldr	r3, [pc, #616]	@ (8006bd8 <_dtoa_r+0x2d8>)
 800696e:	bfbc      	itt	lt
 8006970:	2201      	movlt	r2, #1
 8006972:	6032      	strlt	r2, [r6, #0]
 8006974:	43bb      	bics	r3, r7
 8006976:	d112      	bne.n	800699e <_dtoa_r+0x9e>
 8006978:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800697a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006984:	4323      	orrs	r3, r4
 8006986:	f000 855a 	beq.w	800743e <_dtoa_r+0xb3e>
 800698a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800698c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006bec <_dtoa_r+0x2ec>
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 855c 	beq.w	800744e <_dtoa_r+0xb4e>
 8006996:	f10a 0303 	add.w	r3, sl, #3
 800699a:	f000 bd56 	b.w	800744a <_dtoa_r+0xb4a>
 800699e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80069a2:	2200      	movs	r2, #0
 80069a4:	ec51 0b17 	vmov	r0, r1, d7
 80069a8:	2300      	movs	r3, #0
 80069aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80069ae:	f7fa f8ab 	bl	8000b08 <__aeabi_dcmpeq>
 80069b2:	4680      	mov	r8, r0
 80069b4:	b158      	cbz	r0, 80069ce <_dtoa_r+0xce>
 80069b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80069b8:	2301      	movs	r3, #1
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069be:	b113      	cbz	r3, 80069c6 <_dtoa_r+0xc6>
 80069c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80069c2:	4b86      	ldr	r3, [pc, #536]	@ (8006bdc <_dtoa_r+0x2dc>)
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006bf0 <_dtoa_r+0x2f0>
 80069ca:	f000 bd40 	b.w	800744e <_dtoa_r+0xb4e>
 80069ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80069d2:	aa14      	add	r2, sp, #80	@ 0x50
 80069d4:	a915      	add	r1, sp, #84	@ 0x54
 80069d6:	4648      	mov	r0, r9
 80069d8:	f001 f8ce 	bl	8007b78 <__d2b>
 80069dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80069e0:	9002      	str	r0, [sp, #8]
 80069e2:	2e00      	cmp	r6, #0
 80069e4:	d078      	beq.n	8006ad8 <_dtoa_r+0x1d8>
 80069e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80069ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80069f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80069fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006a00:	4619      	mov	r1, r3
 8006a02:	2200      	movs	r2, #0
 8006a04:	4b76      	ldr	r3, [pc, #472]	@ (8006be0 <_dtoa_r+0x2e0>)
 8006a06:	f7f9 fc5f 	bl	80002c8 <__aeabi_dsub>
 8006a0a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006bb8 <_dtoa_r+0x2b8>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fe12 	bl	8000638 <__aeabi_dmul>
 8006a14:	a36a      	add	r3, pc, #424	@ (adr r3, 8006bc0 <_dtoa_r+0x2c0>)
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	f7f9 fc57 	bl	80002cc <__adddf3>
 8006a1e:	4604      	mov	r4, r0
 8006a20:	4630      	mov	r0, r6
 8006a22:	460d      	mov	r5, r1
 8006a24:	f7f9 fd9e 	bl	8000564 <__aeabi_i2d>
 8006a28:	a367      	add	r3, pc, #412	@ (adr r3, 8006bc8 <_dtoa_r+0x2c8>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f7f9 fe03 	bl	8000638 <__aeabi_dmul>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7f9 fc47 	bl	80002cc <__adddf3>
 8006a3e:	4604      	mov	r4, r0
 8006a40:	460d      	mov	r5, r1
 8006a42:	f7fa f8a9 	bl	8000b98 <__aeabi_d2iz>
 8006a46:	2200      	movs	r2, #0
 8006a48:	4607      	mov	r7, r0
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	f7fa f864 	bl	8000b1c <__aeabi_dcmplt>
 8006a54:	b140      	cbz	r0, 8006a68 <_dtoa_r+0x168>
 8006a56:	4638      	mov	r0, r7
 8006a58:	f7f9 fd84 	bl	8000564 <__aeabi_i2d>
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	462b      	mov	r3, r5
 8006a60:	f7fa f852 	bl	8000b08 <__aeabi_dcmpeq>
 8006a64:	b900      	cbnz	r0, 8006a68 <_dtoa_r+0x168>
 8006a66:	3f01      	subs	r7, #1
 8006a68:	2f16      	cmp	r7, #22
 8006a6a:	d852      	bhi.n	8006b12 <_dtoa_r+0x212>
 8006a6c:	4b5d      	ldr	r3, [pc, #372]	@ (8006be4 <_dtoa_r+0x2e4>)
 8006a6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a7a:	f7fa f84f 	bl	8000b1c <__aeabi_dcmplt>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d049      	beq.n	8006b16 <_dtoa_r+0x216>
 8006a82:	3f01      	subs	r7, #1
 8006a84:	2300      	movs	r3, #0
 8006a86:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a8a:	1b9b      	subs	r3, r3, r6
 8006a8c:	1e5a      	subs	r2, r3, #1
 8006a8e:	bf45      	ittet	mi
 8006a90:	f1c3 0301 	rsbmi	r3, r3, #1
 8006a94:	9300      	strmi	r3, [sp, #0]
 8006a96:	2300      	movpl	r3, #0
 8006a98:	2300      	movmi	r3, #0
 8006a9a:	9206      	str	r2, [sp, #24]
 8006a9c:	bf54      	ite	pl
 8006a9e:	9300      	strpl	r3, [sp, #0]
 8006aa0:	9306      	strmi	r3, [sp, #24]
 8006aa2:	2f00      	cmp	r7, #0
 8006aa4:	db39      	blt.n	8006b1a <_dtoa_r+0x21a>
 8006aa6:	9b06      	ldr	r3, [sp, #24]
 8006aa8:	970d      	str	r7, [sp, #52]	@ 0x34
 8006aaa:	443b      	add	r3, r7
 8006aac:	9306      	str	r3, [sp, #24]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9308      	str	r3, [sp, #32]
 8006ab2:	9b07      	ldr	r3, [sp, #28]
 8006ab4:	2b09      	cmp	r3, #9
 8006ab6:	d863      	bhi.n	8006b80 <_dtoa_r+0x280>
 8006ab8:	2b05      	cmp	r3, #5
 8006aba:	bfc4      	itt	gt
 8006abc:	3b04      	subgt	r3, #4
 8006abe:	9307      	strgt	r3, [sp, #28]
 8006ac0:	9b07      	ldr	r3, [sp, #28]
 8006ac2:	f1a3 0302 	sub.w	r3, r3, #2
 8006ac6:	bfcc      	ite	gt
 8006ac8:	2400      	movgt	r4, #0
 8006aca:	2401      	movle	r4, #1
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d863      	bhi.n	8006b98 <_dtoa_r+0x298>
 8006ad0:	e8df f003 	tbb	[pc, r3]
 8006ad4:	2b375452 	.word	0x2b375452
 8006ad8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006adc:	441e      	add	r6, r3
 8006ade:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	bfc1      	itttt	gt
 8006ae6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006aea:	409f      	lslgt	r7, r3
 8006aec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006af0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006af4:	bfd6      	itet	le
 8006af6:	f1c3 0320 	rsble	r3, r3, #32
 8006afa:	ea47 0003 	orrgt.w	r0, r7, r3
 8006afe:	fa04 f003 	lslle.w	r0, r4, r3
 8006b02:	f7f9 fd1f 	bl	8000544 <__aeabi_ui2d>
 8006b06:	2201      	movs	r2, #1
 8006b08:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b0c:	3e01      	subs	r6, #1
 8006b0e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006b10:	e776      	b.n	8006a00 <_dtoa_r+0x100>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e7b7      	b.n	8006a86 <_dtoa_r+0x186>
 8006b16:	9010      	str	r0, [sp, #64]	@ 0x40
 8006b18:	e7b6      	b.n	8006a88 <_dtoa_r+0x188>
 8006b1a:	9b00      	ldr	r3, [sp, #0]
 8006b1c:	1bdb      	subs	r3, r3, r7
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	427b      	negs	r3, r7
 8006b22:	9308      	str	r3, [sp, #32]
 8006b24:	2300      	movs	r3, #0
 8006b26:	930d      	str	r3, [sp, #52]	@ 0x34
 8006b28:	e7c3      	b.n	8006ab2 <_dtoa_r+0x1b2>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b30:	eb07 0b03 	add.w	fp, r7, r3
 8006b34:	f10b 0301 	add.w	r3, fp, #1
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	9303      	str	r3, [sp, #12]
 8006b3c:	bfb8      	it	lt
 8006b3e:	2301      	movlt	r3, #1
 8006b40:	e006      	b.n	8006b50 <_dtoa_r+0x250>
 8006b42:	2301      	movs	r3, #1
 8006b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dd28      	ble.n	8006b9e <_dtoa_r+0x29e>
 8006b4c:	469b      	mov	fp, r3
 8006b4e:	9303      	str	r3, [sp, #12]
 8006b50:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006b54:	2100      	movs	r1, #0
 8006b56:	2204      	movs	r2, #4
 8006b58:	f102 0514 	add.w	r5, r2, #20
 8006b5c:	429d      	cmp	r5, r3
 8006b5e:	d926      	bls.n	8006bae <_dtoa_r+0x2ae>
 8006b60:	6041      	str	r1, [r0, #4]
 8006b62:	4648      	mov	r0, r9
 8006b64:	f000 fce6 	bl	8007534 <_Balloc>
 8006b68:	4682      	mov	sl, r0
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d142      	bne.n	8006bf4 <_dtoa_r+0x2f4>
 8006b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006be8 <_dtoa_r+0x2e8>)
 8006b70:	4602      	mov	r2, r0
 8006b72:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b76:	e6da      	b.n	800692e <_dtoa_r+0x2e>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e7e3      	b.n	8006b44 <_dtoa_r+0x244>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e7d5      	b.n	8006b2c <_dtoa_r+0x22c>
 8006b80:	2401      	movs	r4, #1
 8006b82:	2300      	movs	r3, #0
 8006b84:	9307      	str	r3, [sp, #28]
 8006b86:	9409      	str	r4, [sp, #36]	@ 0x24
 8006b88:	f04f 3bff 	mov.w	fp, #4294967295
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006b92:	2312      	movs	r3, #18
 8006b94:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b96:	e7db      	b.n	8006b50 <_dtoa_r+0x250>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b9c:	e7f4      	b.n	8006b88 <_dtoa_r+0x288>
 8006b9e:	f04f 0b01 	mov.w	fp, #1
 8006ba2:	f8cd b00c 	str.w	fp, [sp, #12]
 8006ba6:	465b      	mov	r3, fp
 8006ba8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006bac:	e7d0      	b.n	8006b50 <_dtoa_r+0x250>
 8006bae:	3101      	adds	r1, #1
 8006bb0:	0052      	lsls	r2, r2, #1
 8006bb2:	e7d1      	b.n	8006b58 <_dtoa_r+0x258>
 8006bb4:	f3af 8000 	nop.w
 8006bb8:	636f4361 	.word	0x636f4361
 8006bbc:	3fd287a7 	.word	0x3fd287a7
 8006bc0:	8b60c8b3 	.word	0x8b60c8b3
 8006bc4:	3fc68a28 	.word	0x3fc68a28
 8006bc8:	509f79fb 	.word	0x509f79fb
 8006bcc:	3fd34413 	.word	0x3fd34413
 8006bd0:	080088b9 	.word	0x080088b9
 8006bd4:	080088d0 	.word	0x080088d0
 8006bd8:	7ff00000 	.word	0x7ff00000
 8006bdc:	08008889 	.word	0x08008889
 8006be0:	3ff80000 	.word	0x3ff80000
 8006be4:	08008a20 	.word	0x08008a20
 8006be8:	08008928 	.word	0x08008928
 8006bec:	080088b5 	.word	0x080088b5
 8006bf0:	08008888 	.word	0x08008888
 8006bf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006bf8:	6018      	str	r0, [r3, #0]
 8006bfa:	9b03      	ldr	r3, [sp, #12]
 8006bfc:	2b0e      	cmp	r3, #14
 8006bfe:	f200 80a1 	bhi.w	8006d44 <_dtoa_r+0x444>
 8006c02:	2c00      	cmp	r4, #0
 8006c04:	f000 809e 	beq.w	8006d44 <_dtoa_r+0x444>
 8006c08:	2f00      	cmp	r7, #0
 8006c0a:	dd33      	ble.n	8006c74 <_dtoa_r+0x374>
 8006c0c:	4b9c      	ldr	r3, [pc, #624]	@ (8006e80 <_dtoa_r+0x580>)
 8006c0e:	f007 020f 	and.w	r2, r7, #15
 8006c12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c16:	ed93 7b00 	vldr	d7, [r3]
 8006c1a:	05f8      	lsls	r0, r7, #23
 8006c1c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006c20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c24:	d516      	bpl.n	8006c54 <_dtoa_r+0x354>
 8006c26:	4b97      	ldr	r3, [pc, #604]	@ (8006e84 <_dtoa_r+0x584>)
 8006c28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c30:	f7f9 fe2c 	bl	800088c <__aeabi_ddiv>
 8006c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c38:	f004 040f 	and.w	r4, r4, #15
 8006c3c:	2603      	movs	r6, #3
 8006c3e:	4d91      	ldr	r5, [pc, #580]	@ (8006e84 <_dtoa_r+0x584>)
 8006c40:	b954      	cbnz	r4, 8006c58 <_dtoa_r+0x358>
 8006c42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006c46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c4a:	f7f9 fe1f 	bl	800088c <__aeabi_ddiv>
 8006c4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c52:	e028      	b.n	8006ca6 <_dtoa_r+0x3a6>
 8006c54:	2602      	movs	r6, #2
 8006c56:	e7f2      	b.n	8006c3e <_dtoa_r+0x33e>
 8006c58:	07e1      	lsls	r1, r4, #31
 8006c5a:	d508      	bpl.n	8006c6e <_dtoa_r+0x36e>
 8006c5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006c60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c64:	f7f9 fce8 	bl	8000638 <__aeabi_dmul>
 8006c68:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c6c:	3601      	adds	r6, #1
 8006c6e:	1064      	asrs	r4, r4, #1
 8006c70:	3508      	adds	r5, #8
 8006c72:	e7e5      	b.n	8006c40 <_dtoa_r+0x340>
 8006c74:	f000 80af 	beq.w	8006dd6 <_dtoa_r+0x4d6>
 8006c78:	427c      	negs	r4, r7
 8006c7a:	4b81      	ldr	r3, [pc, #516]	@ (8006e80 <_dtoa_r+0x580>)
 8006c7c:	4d81      	ldr	r5, [pc, #516]	@ (8006e84 <_dtoa_r+0x584>)
 8006c7e:	f004 020f 	and.w	r2, r4, #15
 8006c82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c8e:	f7f9 fcd3 	bl	8000638 <__aeabi_dmul>
 8006c92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c96:	1124      	asrs	r4, r4, #4
 8006c98:	2300      	movs	r3, #0
 8006c9a:	2602      	movs	r6, #2
 8006c9c:	2c00      	cmp	r4, #0
 8006c9e:	f040 808f 	bne.w	8006dc0 <_dtoa_r+0x4c0>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1d3      	bne.n	8006c4e <_dtoa_r+0x34e>
 8006ca6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ca8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8094 	beq.w	8006dda <_dtoa_r+0x4da>
 8006cb2:	4b75      	ldr	r3, [pc, #468]	@ (8006e88 <_dtoa_r+0x588>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7f9 ff2f 	bl	8000b1c <__aeabi_dcmplt>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f000 808b 	beq.w	8006dda <_dtoa_r+0x4da>
 8006cc4:	9b03      	ldr	r3, [sp, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 8087 	beq.w	8006dda <_dtoa_r+0x4da>
 8006ccc:	f1bb 0f00 	cmp.w	fp, #0
 8006cd0:	dd34      	ble.n	8006d3c <_dtoa_r+0x43c>
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	4b6d      	ldr	r3, [pc, #436]	@ (8006e8c <_dtoa_r+0x58c>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	4629      	mov	r1, r5
 8006cda:	f7f9 fcad 	bl	8000638 <__aeabi_dmul>
 8006cde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ce2:	f107 38ff 	add.w	r8, r7, #4294967295
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	465c      	mov	r4, fp
 8006cea:	4630      	mov	r0, r6
 8006cec:	f7f9 fc3a 	bl	8000564 <__aeabi_i2d>
 8006cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cf4:	f7f9 fca0 	bl	8000638 <__aeabi_dmul>
 8006cf8:	4b65      	ldr	r3, [pc, #404]	@ (8006e90 <_dtoa_r+0x590>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f7f9 fae6 	bl	80002cc <__adddf3>
 8006d00:	4605      	mov	r5, r0
 8006d02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006d06:	2c00      	cmp	r4, #0
 8006d08:	d16a      	bne.n	8006de0 <_dtoa_r+0x4e0>
 8006d0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d0e:	4b61      	ldr	r3, [pc, #388]	@ (8006e94 <_dtoa_r+0x594>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	f7f9 fad9 	bl	80002c8 <__aeabi_dsub>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d1e:	462a      	mov	r2, r5
 8006d20:	4633      	mov	r3, r6
 8006d22:	f7f9 ff19 	bl	8000b58 <__aeabi_dcmpgt>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f040 8298 	bne.w	800725c <_dtoa_r+0x95c>
 8006d2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d30:	462a      	mov	r2, r5
 8006d32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d36:	f7f9 fef1 	bl	8000b1c <__aeabi_dcmplt>
 8006d3a:	bb38      	cbnz	r0, 8006d8c <_dtoa_r+0x48c>
 8006d3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006d40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f2c0 8157 	blt.w	8006ffa <_dtoa_r+0x6fa>
 8006d4c:	2f0e      	cmp	r7, #14
 8006d4e:	f300 8154 	bgt.w	8006ffa <_dtoa_r+0x6fa>
 8006d52:	4b4b      	ldr	r3, [pc, #300]	@ (8006e80 <_dtoa_r+0x580>)
 8006d54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d58:	ed93 7b00 	vldr	d7, [r3]
 8006d5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	ed8d 7b00 	vstr	d7, [sp]
 8006d64:	f280 80e5 	bge.w	8006f32 <_dtoa_r+0x632>
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f300 80e1 	bgt.w	8006f32 <_dtoa_r+0x632>
 8006d70:	d10c      	bne.n	8006d8c <_dtoa_r+0x48c>
 8006d72:	4b48      	ldr	r3, [pc, #288]	@ (8006e94 <_dtoa_r+0x594>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	ec51 0b17 	vmov	r0, r1, d7
 8006d7a:	f7f9 fc5d 	bl	8000638 <__aeabi_dmul>
 8006d7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d82:	f7f9 fedf 	bl	8000b44 <__aeabi_dcmpge>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	f000 8266 	beq.w	8007258 <_dtoa_r+0x958>
 8006d8c:	2400      	movs	r4, #0
 8006d8e:	4625      	mov	r5, r4
 8006d90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d92:	4656      	mov	r6, sl
 8006d94:	ea6f 0803 	mvn.w	r8, r3
 8006d98:	2700      	movs	r7, #0
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	4648      	mov	r0, r9
 8006d9e:	f000 fc09 	bl	80075b4 <_Bfree>
 8006da2:	2d00      	cmp	r5, #0
 8006da4:	f000 80bd 	beq.w	8006f22 <_dtoa_r+0x622>
 8006da8:	b12f      	cbz	r7, 8006db6 <_dtoa_r+0x4b6>
 8006daa:	42af      	cmp	r7, r5
 8006dac:	d003      	beq.n	8006db6 <_dtoa_r+0x4b6>
 8006dae:	4639      	mov	r1, r7
 8006db0:	4648      	mov	r0, r9
 8006db2:	f000 fbff 	bl	80075b4 <_Bfree>
 8006db6:	4629      	mov	r1, r5
 8006db8:	4648      	mov	r0, r9
 8006dba:	f000 fbfb 	bl	80075b4 <_Bfree>
 8006dbe:	e0b0      	b.n	8006f22 <_dtoa_r+0x622>
 8006dc0:	07e2      	lsls	r2, r4, #31
 8006dc2:	d505      	bpl.n	8006dd0 <_dtoa_r+0x4d0>
 8006dc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dc8:	f7f9 fc36 	bl	8000638 <__aeabi_dmul>
 8006dcc:	3601      	adds	r6, #1
 8006dce:	2301      	movs	r3, #1
 8006dd0:	1064      	asrs	r4, r4, #1
 8006dd2:	3508      	adds	r5, #8
 8006dd4:	e762      	b.n	8006c9c <_dtoa_r+0x39c>
 8006dd6:	2602      	movs	r6, #2
 8006dd8:	e765      	b.n	8006ca6 <_dtoa_r+0x3a6>
 8006dda:	9c03      	ldr	r4, [sp, #12]
 8006ddc:	46b8      	mov	r8, r7
 8006dde:	e784      	b.n	8006cea <_dtoa_r+0x3ea>
 8006de0:	4b27      	ldr	r3, [pc, #156]	@ (8006e80 <_dtoa_r+0x580>)
 8006de2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006de4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006de8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dec:	4454      	add	r4, sl
 8006dee:	2900      	cmp	r1, #0
 8006df0:	d054      	beq.n	8006e9c <_dtoa_r+0x59c>
 8006df2:	4929      	ldr	r1, [pc, #164]	@ (8006e98 <_dtoa_r+0x598>)
 8006df4:	2000      	movs	r0, #0
 8006df6:	f7f9 fd49 	bl	800088c <__aeabi_ddiv>
 8006dfa:	4633      	mov	r3, r6
 8006dfc:	462a      	mov	r2, r5
 8006dfe:	f7f9 fa63 	bl	80002c8 <__aeabi_dsub>
 8006e02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006e06:	4656      	mov	r6, sl
 8006e08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e0c:	f7f9 fec4 	bl	8000b98 <__aeabi_d2iz>
 8006e10:	4605      	mov	r5, r0
 8006e12:	f7f9 fba7 	bl	8000564 <__aeabi_i2d>
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e1e:	f7f9 fa53 	bl	80002c8 <__aeabi_dsub>
 8006e22:	3530      	adds	r5, #48	@ 0x30
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e2c:	f806 5b01 	strb.w	r5, [r6], #1
 8006e30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006e34:	f7f9 fe72 	bl	8000b1c <__aeabi_dcmplt>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d172      	bne.n	8006f22 <_dtoa_r+0x622>
 8006e3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e40:	4911      	ldr	r1, [pc, #68]	@ (8006e88 <_dtoa_r+0x588>)
 8006e42:	2000      	movs	r0, #0
 8006e44:	f7f9 fa40 	bl	80002c8 <__aeabi_dsub>
 8006e48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006e4c:	f7f9 fe66 	bl	8000b1c <__aeabi_dcmplt>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	f040 80b4 	bne.w	8006fbe <_dtoa_r+0x6be>
 8006e56:	42a6      	cmp	r6, r4
 8006e58:	f43f af70 	beq.w	8006d3c <_dtoa_r+0x43c>
 8006e5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006e60:	4b0a      	ldr	r3, [pc, #40]	@ (8006e8c <_dtoa_r+0x58c>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	f7f9 fbe8 	bl	8000638 <__aeabi_dmul>
 8006e68:	4b08      	ldr	r3, [pc, #32]	@ (8006e8c <_dtoa_r+0x58c>)
 8006e6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006e6e:	2200      	movs	r2, #0
 8006e70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e74:	f7f9 fbe0 	bl	8000638 <__aeabi_dmul>
 8006e78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e7c:	e7c4      	b.n	8006e08 <_dtoa_r+0x508>
 8006e7e:	bf00      	nop
 8006e80:	08008a20 	.word	0x08008a20
 8006e84:	080089f8 	.word	0x080089f8
 8006e88:	3ff00000 	.word	0x3ff00000
 8006e8c:	40240000 	.word	0x40240000
 8006e90:	401c0000 	.word	0x401c0000
 8006e94:	40140000 	.word	0x40140000
 8006e98:	3fe00000 	.word	0x3fe00000
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f7f9 fbca 	bl	8000638 <__aeabi_dmul>
 8006ea4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ea8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006eaa:	4656      	mov	r6, sl
 8006eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eb0:	f7f9 fe72 	bl	8000b98 <__aeabi_d2iz>
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	f7f9 fb55 	bl	8000564 <__aeabi_i2d>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ec2:	f7f9 fa01 	bl	80002c8 <__aeabi_dsub>
 8006ec6:	3530      	adds	r5, #48	@ 0x30
 8006ec8:	f806 5b01 	strb.w	r5, [r6], #1
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	42a6      	cmp	r6, r4
 8006ed2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	d124      	bne.n	8006f26 <_dtoa_r+0x626>
 8006edc:	4baf      	ldr	r3, [pc, #700]	@ (800719c <_dtoa_r+0x89c>)
 8006ede:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006ee2:	f7f9 f9f3 	bl	80002cc <__adddf3>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eee:	f7f9 fe33 	bl	8000b58 <__aeabi_dcmpgt>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d163      	bne.n	8006fbe <_dtoa_r+0x6be>
 8006ef6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006efa:	49a8      	ldr	r1, [pc, #672]	@ (800719c <_dtoa_r+0x89c>)
 8006efc:	2000      	movs	r0, #0
 8006efe:	f7f9 f9e3 	bl	80002c8 <__aeabi_dsub>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f0a:	f7f9 fe07 	bl	8000b1c <__aeabi_dcmplt>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	f43f af14 	beq.w	8006d3c <_dtoa_r+0x43c>
 8006f14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006f16:	1e73      	subs	r3, r6, #1
 8006f18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f1e:	2b30      	cmp	r3, #48	@ 0x30
 8006f20:	d0f8      	beq.n	8006f14 <_dtoa_r+0x614>
 8006f22:	4647      	mov	r7, r8
 8006f24:	e03b      	b.n	8006f9e <_dtoa_r+0x69e>
 8006f26:	4b9e      	ldr	r3, [pc, #632]	@ (80071a0 <_dtoa_r+0x8a0>)
 8006f28:	f7f9 fb86 	bl	8000638 <__aeabi_dmul>
 8006f2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f30:	e7bc      	b.n	8006eac <_dtoa_r+0x5ac>
 8006f32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006f36:	4656      	mov	r6, sl
 8006f38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	4629      	mov	r1, r5
 8006f40:	f7f9 fca4 	bl	800088c <__aeabi_ddiv>
 8006f44:	f7f9 fe28 	bl	8000b98 <__aeabi_d2iz>
 8006f48:	4680      	mov	r8, r0
 8006f4a:	f7f9 fb0b 	bl	8000564 <__aeabi_i2d>
 8006f4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f52:	f7f9 fb71 	bl	8000638 <__aeabi_dmul>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f62:	f7f9 f9b1 	bl	80002c8 <__aeabi_dsub>
 8006f66:	f806 4b01 	strb.w	r4, [r6], #1
 8006f6a:	9d03      	ldr	r5, [sp, #12]
 8006f6c:	eba6 040a 	sub.w	r4, r6, sl
 8006f70:	42a5      	cmp	r5, r4
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	d133      	bne.n	8006fe0 <_dtoa_r+0x6e0>
 8006f78:	f7f9 f9a8 	bl	80002cc <__adddf3>
 8006f7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f80:	4604      	mov	r4, r0
 8006f82:	460d      	mov	r5, r1
 8006f84:	f7f9 fde8 	bl	8000b58 <__aeabi_dcmpgt>
 8006f88:	b9c0      	cbnz	r0, 8006fbc <_dtoa_r+0x6bc>
 8006f8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f8e:	4620      	mov	r0, r4
 8006f90:	4629      	mov	r1, r5
 8006f92:	f7f9 fdb9 	bl	8000b08 <__aeabi_dcmpeq>
 8006f96:	b110      	cbz	r0, 8006f9e <_dtoa_r+0x69e>
 8006f98:	f018 0f01 	tst.w	r8, #1
 8006f9c:	d10e      	bne.n	8006fbc <_dtoa_r+0x6bc>
 8006f9e:	9902      	ldr	r1, [sp, #8]
 8006fa0:	4648      	mov	r0, r9
 8006fa2:	f000 fb07 	bl	80075b4 <_Bfree>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	7033      	strb	r3, [r6, #0]
 8006faa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006fac:	3701      	adds	r7, #1
 8006fae:	601f      	str	r7, [r3, #0]
 8006fb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 824b 	beq.w	800744e <_dtoa_r+0xb4e>
 8006fb8:	601e      	str	r6, [r3, #0]
 8006fba:	e248      	b.n	800744e <_dtoa_r+0xb4e>
 8006fbc:	46b8      	mov	r8, r7
 8006fbe:	4633      	mov	r3, r6
 8006fc0:	461e      	mov	r6, r3
 8006fc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fc6:	2a39      	cmp	r2, #57	@ 0x39
 8006fc8:	d106      	bne.n	8006fd8 <_dtoa_r+0x6d8>
 8006fca:	459a      	cmp	sl, r3
 8006fcc:	d1f8      	bne.n	8006fc0 <_dtoa_r+0x6c0>
 8006fce:	2230      	movs	r2, #48	@ 0x30
 8006fd0:	f108 0801 	add.w	r8, r8, #1
 8006fd4:	f88a 2000 	strb.w	r2, [sl]
 8006fd8:	781a      	ldrb	r2, [r3, #0]
 8006fda:	3201      	adds	r2, #1
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	e7a0      	b.n	8006f22 <_dtoa_r+0x622>
 8006fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80071a0 <_dtoa_r+0x8a0>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f7f9 fb28 	bl	8000638 <__aeabi_dmul>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2300      	movs	r3, #0
 8006fec:	4604      	mov	r4, r0
 8006fee:	460d      	mov	r5, r1
 8006ff0:	f7f9 fd8a 	bl	8000b08 <__aeabi_dcmpeq>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d09f      	beq.n	8006f38 <_dtoa_r+0x638>
 8006ff8:	e7d1      	b.n	8006f9e <_dtoa_r+0x69e>
 8006ffa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ffc:	2a00      	cmp	r2, #0
 8006ffe:	f000 80ea 	beq.w	80071d6 <_dtoa_r+0x8d6>
 8007002:	9a07      	ldr	r2, [sp, #28]
 8007004:	2a01      	cmp	r2, #1
 8007006:	f300 80cd 	bgt.w	80071a4 <_dtoa_r+0x8a4>
 800700a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800700c:	2a00      	cmp	r2, #0
 800700e:	f000 80c1 	beq.w	8007194 <_dtoa_r+0x894>
 8007012:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007016:	9c08      	ldr	r4, [sp, #32]
 8007018:	9e00      	ldr	r6, [sp, #0]
 800701a:	9a00      	ldr	r2, [sp, #0]
 800701c:	441a      	add	r2, r3
 800701e:	9200      	str	r2, [sp, #0]
 8007020:	9a06      	ldr	r2, [sp, #24]
 8007022:	2101      	movs	r1, #1
 8007024:	441a      	add	r2, r3
 8007026:	4648      	mov	r0, r9
 8007028:	9206      	str	r2, [sp, #24]
 800702a:	f000 fb77 	bl	800771c <__i2b>
 800702e:	4605      	mov	r5, r0
 8007030:	b166      	cbz	r6, 800704c <_dtoa_r+0x74c>
 8007032:	9b06      	ldr	r3, [sp, #24]
 8007034:	2b00      	cmp	r3, #0
 8007036:	dd09      	ble.n	800704c <_dtoa_r+0x74c>
 8007038:	42b3      	cmp	r3, r6
 800703a:	9a00      	ldr	r2, [sp, #0]
 800703c:	bfa8      	it	ge
 800703e:	4633      	movge	r3, r6
 8007040:	1ad2      	subs	r2, r2, r3
 8007042:	9200      	str	r2, [sp, #0]
 8007044:	9a06      	ldr	r2, [sp, #24]
 8007046:	1af6      	subs	r6, r6, r3
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	9306      	str	r3, [sp, #24]
 800704c:	9b08      	ldr	r3, [sp, #32]
 800704e:	b30b      	cbz	r3, 8007094 <_dtoa_r+0x794>
 8007050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 80c6 	beq.w	80071e4 <_dtoa_r+0x8e4>
 8007058:	2c00      	cmp	r4, #0
 800705a:	f000 80c0 	beq.w	80071de <_dtoa_r+0x8de>
 800705e:	4629      	mov	r1, r5
 8007060:	4622      	mov	r2, r4
 8007062:	4648      	mov	r0, r9
 8007064:	f000 fc12 	bl	800788c <__pow5mult>
 8007068:	9a02      	ldr	r2, [sp, #8]
 800706a:	4601      	mov	r1, r0
 800706c:	4605      	mov	r5, r0
 800706e:	4648      	mov	r0, r9
 8007070:	f000 fb6a 	bl	8007748 <__multiply>
 8007074:	9902      	ldr	r1, [sp, #8]
 8007076:	4680      	mov	r8, r0
 8007078:	4648      	mov	r0, r9
 800707a:	f000 fa9b 	bl	80075b4 <_Bfree>
 800707e:	9b08      	ldr	r3, [sp, #32]
 8007080:	1b1b      	subs	r3, r3, r4
 8007082:	9308      	str	r3, [sp, #32]
 8007084:	f000 80b1 	beq.w	80071ea <_dtoa_r+0x8ea>
 8007088:	9a08      	ldr	r2, [sp, #32]
 800708a:	4641      	mov	r1, r8
 800708c:	4648      	mov	r0, r9
 800708e:	f000 fbfd 	bl	800788c <__pow5mult>
 8007092:	9002      	str	r0, [sp, #8]
 8007094:	2101      	movs	r1, #1
 8007096:	4648      	mov	r0, r9
 8007098:	f000 fb40 	bl	800771c <__i2b>
 800709c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800709e:	4604      	mov	r4, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 81d8 	beq.w	8007456 <_dtoa_r+0xb56>
 80070a6:	461a      	mov	r2, r3
 80070a8:	4601      	mov	r1, r0
 80070aa:	4648      	mov	r0, r9
 80070ac:	f000 fbee 	bl	800788c <__pow5mult>
 80070b0:	9b07      	ldr	r3, [sp, #28]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	4604      	mov	r4, r0
 80070b6:	f300 809f 	bgt.w	80071f8 <_dtoa_r+0x8f8>
 80070ba:	9b04      	ldr	r3, [sp, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f040 8097 	bne.w	80071f0 <_dtoa_r+0x8f0>
 80070c2:	9b05      	ldr	r3, [sp, #20]
 80070c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f040 8093 	bne.w	80071f4 <_dtoa_r+0x8f4>
 80070ce:	9b05      	ldr	r3, [sp, #20]
 80070d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070d4:	0d1b      	lsrs	r3, r3, #20
 80070d6:	051b      	lsls	r3, r3, #20
 80070d8:	b133      	cbz	r3, 80070e8 <_dtoa_r+0x7e8>
 80070da:	9b00      	ldr	r3, [sp, #0]
 80070dc:	3301      	adds	r3, #1
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	9b06      	ldr	r3, [sp, #24]
 80070e2:	3301      	adds	r3, #1
 80070e4:	9306      	str	r3, [sp, #24]
 80070e6:	2301      	movs	r3, #1
 80070e8:	9308      	str	r3, [sp, #32]
 80070ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 81b8 	beq.w	8007462 <_dtoa_r+0xb62>
 80070f2:	6923      	ldr	r3, [r4, #16]
 80070f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070f8:	6918      	ldr	r0, [r3, #16]
 80070fa:	f000 fac3 	bl	8007684 <__hi0bits>
 80070fe:	f1c0 0020 	rsb	r0, r0, #32
 8007102:	9b06      	ldr	r3, [sp, #24]
 8007104:	4418      	add	r0, r3
 8007106:	f010 001f 	ands.w	r0, r0, #31
 800710a:	f000 8082 	beq.w	8007212 <_dtoa_r+0x912>
 800710e:	f1c0 0320 	rsb	r3, r0, #32
 8007112:	2b04      	cmp	r3, #4
 8007114:	dd73      	ble.n	80071fe <_dtoa_r+0x8fe>
 8007116:	9b00      	ldr	r3, [sp, #0]
 8007118:	f1c0 001c 	rsb	r0, r0, #28
 800711c:	4403      	add	r3, r0
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	9b06      	ldr	r3, [sp, #24]
 8007122:	4403      	add	r3, r0
 8007124:	4406      	add	r6, r0
 8007126:	9306      	str	r3, [sp, #24]
 8007128:	9b00      	ldr	r3, [sp, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	dd05      	ble.n	800713a <_dtoa_r+0x83a>
 800712e:	9902      	ldr	r1, [sp, #8]
 8007130:	461a      	mov	r2, r3
 8007132:	4648      	mov	r0, r9
 8007134:	f000 fc04 	bl	8007940 <__lshift>
 8007138:	9002      	str	r0, [sp, #8]
 800713a:	9b06      	ldr	r3, [sp, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	dd05      	ble.n	800714c <_dtoa_r+0x84c>
 8007140:	4621      	mov	r1, r4
 8007142:	461a      	mov	r2, r3
 8007144:	4648      	mov	r0, r9
 8007146:	f000 fbfb 	bl	8007940 <__lshift>
 800714a:	4604      	mov	r4, r0
 800714c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800714e:	2b00      	cmp	r3, #0
 8007150:	d061      	beq.n	8007216 <_dtoa_r+0x916>
 8007152:	9802      	ldr	r0, [sp, #8]
 8007154:	4621      	mov	r1, r4
 8007156:	f000 fc5f 	bl	8007a18 <__mcmp>
 800715a:	2800      	cmp	r0, #0
 800715c:	da5b      	bge.n	8007216 <_dtoa_r+0x916>
 800715e:	2300      	movs	r3, #0
 8007160:	9902      	ldr	r1, [sp, #8]
 8007162:	220a      	movs	r2, #10
 8007164:	4648      	mov	r0, r9
 8007166:	f000 fa47 	bl	80075f8 <__multadd>
 800716a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800716c:	9002      	str	r0, [sp, #8]
 800716e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 8177 	beq.w	8007466 <_dtoa_r+0xb66>
 8007178:	4629      	mov	r1, r5
 800717a:	2300      	movs	r3, #0
 800717c:	220a      	movs	r2, #10
 800717e:	4648      	mov	r0, r9
 8007180:	f000 fa3a 	bl	80075f8 <__multadd>
 8007184:	f1bb 0f00 	cmp.w	fp, #0
 8007188:	4605      	mov	r5, r0
 800718a:	dc6f      	bgt.n	800726c <_dtoa_r+0x96c>
 800718c:	9b07      	ldr	r3, [sp, #28]
 800718e:	2b02      	cmp	r3, #2
 8007190:	dc49      	bgt.n	8007226 <_dtoa_r+0x926>
 8007192:	e06b      	b.n	800726c <_dtoa_r+0x96c>
 8007194:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007196:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800719a:	e73c      	b.n	8007016 <_dtoa_r+0x716>
 800719c:	3fe00000 	.word	0x3fe00000
 80071a0:	40240000 	.word	0x40240000
 80071a4:	9b03      	ldr	r3, [sp, #12]
 80071a6:	1e5c      	subs	r4, r3, #1
 80071a8:	9b08      	ldr	r3, [sp, #32]
 80071aa:	42a3      	cmp	r3, r4
 80071ac:	db09      	blt.n	80071c2 <_dtoa_r+0x8c2>
 80071ae:	1b1c      	subs	r4, r3, r4
 80071b0:	9b03      	ldr	r3, [sp, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f6bf af30 	bge.w	8007018 <_dtoa_r+0x718>
 80071b8:	9b00      	ldr	r3, [sp, #0]
 80071ba:	9a03      	ldr	r2, [sp, #12]
 80071bc:	1a9e      	subs	r6, r3, r2
 80071be:	2300      	movs	r3, #0
 80071c0:	e72b      	b.n	800701a <_dtoa_r+0x71a>
 80071c2:	9b08      	ldr	r3, [sp, #32]
 80071c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071c6:	9408      	str	r4, [sp, #32]
 80071c8:	1ae3      	subs	r3, r4, r3
 80071ca:	441a      	add	r2, r3
 80071cc:	9e00      	ldr	r6, [sp, #0]
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	920d      	str	r2, [sp, #52]	@ 0x34
 80071d2:	2400      	movs	r4, #0
 80071d4:	e721      	b.n	800701a <_dtoa_r+0x71a>
 80071d6:	9c08      	ldr	r4, [sp, #32]
 80071d8:	9e00      	ldr	r6, [sp, #0]
 80071da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80071dc:	e728      	b.n	8007030 <_dtoa_r+0x730>
 80071de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80071e2:	e751      	b.n	8007088 <_dtoa_r+0x788>
 80071e4:	9a08      	ldr	r2, [sp, #32]
 80071e6:	9902      	ldr	r1, [sp, #8]
 80071e8:	e750      	b.n	800708c <_dtoa_r+0x78c>
 80071ea:	f8cd 8008 	str.w	r8, [sp, #8]
 80071ee:	e751      	b.n	8007094 <_dtoa_r+0x794>
 80071f0:	2300      	movs	r3, #0
 80071f2:	e779      	b.n	80070e8 <_dtoa_r+0x7e8>
 80071f4:	9b04      	ldr	r3, [sp, #16]
 80071f6:	e777      	b.n	80070e8 <_dtoa_r+0x7e8>
 80071f8:	2300      	movs	r3, #0
 80071fa:	9308      	str	r3, [sp, #32]
 80071fc:	e779      	b.n	80070f2 <_dtoa_r+0x7f2>
 80071fe:	d093      	beq.n	8007128 <_dtoa_r+0x828>
 8007200:	9a00      	ldr	r2, [sp, #0]
 8007202:	331c      	adds	r3, #28
 8007204:	441a      	add	r2, r3
 8007206:	9200      	str	r2, [sp, #0]
 8007208:	9a06      	ldr	r2, [sp, #24]
 800720a:	441a      	add	r2, r3
 800720c:	441e      	add	r6, r3
 800720e:	9206      	str	r2, [sp, #24]
 8007210:	e78a      	b.n	8007128 <_dtoa_r+0x828>
 8007212:	4603      	mov	r3, r0
 8007214:	e7f4      	b.n	8007200 <_dtoa_r+0x900>
 8007216:	9b03      	ldr	r3, [sp, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	46b8      	mov	r8, r7
 800721c:	dc20      	bgt.n	8007260 <_dtoa_r+0x960>
 800721e:	469b      	mov	fp, r3
 8007220:	9b07      	ldr	r3, [sp, #28]
 8007222:	2b02      	cmp	r3, #2
 8007224:	dd1e      	ble.n	8007264 <_dtoa_r+0x964>
 8007226:	f1bb 0f00 	cmp.w	fp, #0
 800722a:	f47f adb1 	bne.w	8006d90 <_dtoa_r+0x490>
 800722e:	4621      	mov	r1, r4
 8007230:	465b      	mov	r3, fp
 8007232:	2205      	movs	r2, #5
 8007234:	4648      	mov	r0, r9
 8007236:	f000 f9df 	bl	80075f8 <__multadd>
 800723a:	4601      	mov	r1, r0
 800723c:	4604      	mov	r4, r0
 800723e:	9802      	ldr	r0, [sp, #8]
 8007240:	f000 fbea 	bl	8007a18 <__mcmp>
 8007244:	2800      	cmp	r0, #0
 8007246:	f77f ada3 	ble.w	8006d90 <_dtoa_r+0x490>
 800724a:	4656      	mov	r6, sl
 800724c:	2331      	movs	r3, #49	@ 0x31
 800724e:	f806 3b01 	strb.w	r3, [r6], #1
 8007252:	f108 0801 	add.w	r8, r8, #1
 8007256:	e59f      	b.n	8006d98 <_dtoa_r+0x498>
 8007258:	9c03      	ldr	r4, [sp, #12]
 800725a:	46b8      	mov	r8, r7
 800725c:	4625      	mov	r5, r4
 800725e:	e7f4      	b.n	800724a <_dtoa_r+0x94a>
 8007260:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 8101 	beq.w	800746e <_dtoa_r+0xb6e>
 800726c:	2e00      	cmp	r6, #0
 800726e:	dd05      	ble.n	800727c <_dtoa_r+0x97c>
 8007270:	4629      	mov	r1, r5
 8007272:	4632      	mov	r2, r6
 8007274:	4648      	mov	r0, r9
 8007276:	f000 fb63 	bl	8007940 <__lshift>
 800727a:	4605      	mov	r5, r0
 800727c:	9b08      	ldr	r3, [sp, #32]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d05c      	beq.n	800733c <_dtoa_r+0xa3c>
 8007282:	6869      	ldr	r1, [r5, #4]
 8007284:	4648      	mov	r0, r9
 8007286:	f000 f955 	bl	8007534 <_Balloc>
 800728a:	4606      	mov	r6, r0
 800728c:	b928      	cbnz	r0, 800729a <_dtoa_r+0x99a>
 800728e:	4b82      	ldr	r3, [pc, #520]	@ (8007498 <_dtoa_r+0xb98>)
 8007290:	4602      	mov	r2, r0
 8007292:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007296:	f7ff bb4a 	b.w	800692e <_dtoa_r+0x2e>
 800729a:	692a      	ldr	r2, [r5, #16]
 800729c:	3202      	adds	r2, #2
 800729e:	0092      	lsls	r2, r2, #2
 80072a0:	f105 010c 	add.w	r1, r5, #12
 80072a4:	300c      	adds	r0, #12
 80072a6:	f000 fedd 	bl	8008064 <memcpy>
 80072aa:	2201      	movs	r2, #1
 80072ac:	4631      	mov	r1, r6
 80072ae:	4648      	mov	r0, r9
 80072b0:	f000 fb46 	bl	8007940 <__lshift>
 80072b4:	f10a 0301 	add.w	r3, sl, #1
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	eb0a 030b 	add.w	r3, sl, fp
 80072be:	9308      	str	r3, [sp, #32]
 80072c0:	9b04      	ldr	r3, [sp, #16]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	462f      	mov	r7, r5
 80072c8:	9306      	str	r3, [sp, #24]
 80072ca:	4605      	mov	r5, r0
 80072cc:	9b00      	ldr	r3, [sp, #0]
 80072ce:	9802      	ldr	r0, [sp, #8]
 80072d0:	4621      	mov	r1, r4
 80072d2:	f103 3bff 	add.w	fp, r3, #4294967295
 80072d6:	f7ff fa88 	bl	80067ea <quorem>
 80072da:	4603      	mov	r3, r0
 80072dc:	3330      	adds	r3, #48	@ 0x30
 80072de:	9003      	str	r0, [sp, #12]
 80072e0:	4639      	mov	r1, r7
 80072e2:	9802      	ldr	r0, [sp, #8]
 80072e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072e6:	f000 fb97 	bl	8007a18 <__mcmp>
 80072ea:	462a      	mov	r2, r5
 80072ec:	9004      	str	r0, [sp, #16]
 80072ee:	4621      	mov	r1, r4
 80072f0:	4648      	mov	r0, r9
 80072f2:	f000 fbad 	bl	8007a50 <__mdiff>
 80072f6:	68c2      	ldr	r2, [r0, #12]
 80072f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fa:	4606      	mov	r6, r0
 80072fc:	bb02      	cbnz	r2, 8007340 <_dtoa_r+0xa40>
 80072fe:	4601      	mov	r1, r0
 8007300:	9802      	ldr	r0, [sp, #8]
 8007302:	f000 fb89 	bl	8007a18 <__mcmp>
 8007306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007308:	4602      	mov	r2, r0
 800730a:	4631      	mov	r1, r6
 800730c:	4648      	mov	r0, r9
 800730e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007310:	9309      	str	r3, [sp, #36]	@ 0x24
 8007312:	f000 f94f 	bl	80075b4 <_Bfree>
 8007316:	9b07      	ldr	r3, [sp, #28]
 8007318:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800731a:	9e00      	ldr	r6, [sp, #0]
 800731c:	ea42 0103 	orr.w	r1, r2, r3
 8007320:	9b06      	ldr	r3, [sp, #24]
 8007322:	4319      	orrs	r1, r3
 8007324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007326:	d10d      	bne.n	8007344 <_dtoa_r+0xa44>
 8007328:	2b39      	cmp	r3, #57	@ 0x39
 800732a:	d027      	beq.n	800737c <_dtoa_r+0xa7c>
 800732c:	9a04      	ldr	r2, [sp, #16]
 800732e:	2a00      	cmp	r2, #0
 8007330:	dd01      	ble.n	8007336 <_dtoa_r+0xa36>
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	3331      	adds	r3, #49	@ 0x31
 8007336:	f88b 3000 	strb.w	r3, [fp]
 800733a:	e52e      	b.n	8006d9a <_dtoa_r+0x49a>
 800733c:	4628      	mov	r0, r5
 800733e:	e7b9      	b.n	80072b4 <_dtoa_r+0x9b4>
 8007340:	2201      	movs	r2, #1
 8007342:	e7e2      	b.n	800730a <_dtoa_r+0xa0a>
 8007344:	9904      	ldr	r1, [sp, #16]
 8007346:	2900      	cmp	r1, #0
 8007348:	db04      	blt.n	8007354 <_dtoa_r+0xa54>
 800734a:	9807      	ldr	r0, [sp, #28]
 800734c:	4301      	orrs	r1, r0
 800734e:	9806      	ldr	r0, [sp, #24]
 8007350:	4301      	orrs	r1, r0
 8007352:	d120      	bne.n	8007396 <_dtoa_r+0xa96>
 8007354:	2a00      	cmp	r2, #0
 8007356:	ddee      	ble.n	8007336 <_dtoa_r+0xa36>
 8007358:	9902      	ldr	r1, [sp, #8]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	2201      	movs	r2, #1
 800735e:	4648      	mov	r0, r9
 8007360:	f000 faee 	bl	8007940 <__lshift>
 8007364:	4621      	mov	r1, r4
 8007366:	9002      	str	r0, [sp, #8]
 8007368:	f000 fb56 	bl	8007a18 <__mcmp>
 800736c:	2800      	cmp	r0, #0
 800736e:	9b00      	ldr	r3, [sp, #0]
 8007370:	dc02      	bgt.n	8007378 <_dtoa_r+0xa78>
 8007372:	d1e0      	bne.n	8007336 <_dtoa_r+0xa36>
 8007374:	07da      	lsls	r2, r3, #31
 8007376:	d5de      	bpl.n	8007336 <_dtoa_r+0xa36>
 8007378:	2b39      	cmp	r3, #57	@ 0x39
 800737a:	d1da      	bne.n	8007332 <_dtoa_r+0xa32>
 800737c:	2339      	movs	r3, #57	@ 0x39
 800737e:	f88b 3000 	strb.w	r3, [fp]
 8007382:	4633      	mov	r3, r6
 8007384:	461e      	mov	r6, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800738c:	2a39      	cmp	r2, #57	@ 0x39
 800738e:	d04e      	beq.n	800742e <_dtoa_r+0xb2e>
 8007390:	3201      	adds	r2, #1
 8007392:	701a      	strb	r2, [r3, #0]
 8007394:	e501      	b.n	8006d9a <_dtoa_r+0x49a>
 8007396:	2a00      	cmp	r2, #0
 8007398:	dd03      	ble.n	80073a2 <_dtoa_r+0xaa2>
 800739a:	2b39      	cmp	r3, #57	@ 0x39
 800739c:	d0ee      	beq.n	800737c <_dtoa_r+0xa7c>
 800739e:	3301      	adds	r3, #1
 80073a0:	e7c9      	b.n	8007336 <_dtoa_r+0xa36>
 80073a2:	9a00      	ldr	r2, [sp, #0]
 80073a4:	9908      	ldr	r1, [sp, #32]
 80073a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80073aa:	428a      	cmp	r2, r1
 80073ac:	d028      	beq.n	8007400 <_dtoa_r+0xb00>
 80073ae:	9902      	ldr	r1, [sp, #8]
 80073b0:	2300      	movs	r3, #0
 80073b2:	220a      	movs	r2, #10
 80073b4:	4648      	mov	r0, r9
 80073b6:	f000 f91f 	bl	80075f8 <__multadd>
 80073ba:	42af      	cmp	r7, r5
 80073bc:	9002      	str	r0, [sp, #8]
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	f04f 020a 	mov.w	r2, #10
 80073c6:	4639      	mov	r1, r7
 80073c8:	4648      	mov	r0, r9
 80073ca:	d107      	bne.n	80073dc <_dtoa_r+0xadc>
 80073cc:	f000 f914 	bl	80075f8 <__multadd>
 80073d0:	4607      	mov	r7, r0
 80073d2:	4605      	mov	r5, r0
 80073d4:	9b00      	ldr	r3, [sp, #0]
 80073d6:	3301      	adds	r3, #1
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	e777      	b.n	80072cc <_dtoa_r+0x9cc>
 80073dc:	f000 f90c 	bl	80075f8 <__multadd>
 80073e0:	4629      	mov	r1, r5
 80073e2:	4607      	mov	r7, r0
 80073e4:	2300      	movs	r3, #0
 80073e6:	220a      	movs	r2, #10
 80073e8:	4648      	mov	r0, r9
 80073ea:	f000 f905 	bl	80075f8 <__multadd>
 80073ee:	4605      	mov	r5, r0
 80073f0:	e7f0      	b.n	80073d4 <_dtoa_r+0xad4>
 80073f2:	f1bb 0f00 	cmp.w	fp, #0
 80073f6:	bfcc      	ite	gt
 80073f8:	465e      	movgt	r6, fp
 80073fa:	2601      	movle	r6, #1
 80073fc:	4456      	add	r6, sl
 80073fe:	2700      	movs	r7, #0
 8007400:	9902      	ldr	r1, [sp, #8]
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	2201      	movs	r2, #1
 8007406:	4648      	mov	r0, r9
 8007408:	f000 fa9a 	bl	8007940 <__lshift>
 800740c:	4621      	mov	r1, r4
 800740e:	9002      	str	r0, [sp, #8]
 8007410:	f000 fb02 	bl	8007a18 <__mcmp>
 8007414:	2800      	cmp	r0, #0
 8007416:	dcb4      	bgt.n	8007382 <_dtoa_r+0xa82>
 8007418:	d102      	bne.n	8007420 <_dtoa_r+0xb20>
 800741a:	9b00      	ldr	r3, [sp, #0]
 800741c:	07db      	lsls	r3, r3, #31
 800741e:	d4b0      	bmi.n	8007382 <_dtoa_r+0xa82>
 8007420:	4633      	mov	r3, r6
 8007422:	461e      	mov	r6, r3
 8007424:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007428:	2a30      	cmp	r2, #48	@ 0x30
 800742a:	d0fa      	beq.n	8007422 <_dtoa_r+0xb22>
 800742c:	e4b5      	b.n	8006d9a <_dtoa_r+0x49a>
 800742e:	459a      	cmp	sl, r3
 8007430:	d1a8      	bne.n	8007384 <_dtoa_r+0xa84>
 8007432:	2331      	movs	r3, #49	@ 0x31
 8007434:	f108 0801 	add.w	r8, r8, #1
 8007438:	f88a 3000 	strb.w	r3, [sl]
 800743c:	e4ad      	b.n	8006d9a <_dtoa_r+0x49a>
 800743e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007440:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800749c <_dtoa_r+0xb9c>
 8007444:	b11b      	cbz	r3, 800744e <_dtoa_r+0xb4e>
 8007446:	f10a 0308 	add.w	r3, sl, #8
 800744a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	4650      	mov	r0, sl
 8007450:	b017      	add	sp, #92	@ 0x5c
 8007452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007456:	9b07      	ldr	r3, [sp, #28]
 8007458:	2b01      	cmp	r3, #1
 800745a:	f77f ae2e 	ble.w	80070ba <_dtoa_r+0x7ba>
 800745e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007460:	9308      	str	r3, [sp, #32]
 8007462:	2001      	movs	r0, #1
 8007464:	e64d      	b.n	8007102 <_dtoa_r+0x802>
 8007466:	f1bb 0f00 	cmp.w	fp, #0
 800746a:	f77f aed9 	ble.w	8007220 <_dtoa_r+0x920>
 800746e:	4656      	mov	r6, sl
 8007470:	9802      	ldr	r0, [sp, #8]
 8007472:	4621      	mov	r1, r4
 8007474:	f7ff f9b9 	bl	80067ea <quorem>
 8007478:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800747c:	f806 3b01 	strb.w	r3, [r6], #1
 8007480:	eba6 020a 	sub.w	r2, r6, sl
 8007484:	4593      	cmp	fp, r2
 8007486:	ddb4      	ble.n	80073f2 <_dtoa_r+0xaf2>
 8007488:	9902      	ldr	r1, [sp, #8]
 800748a:	2300      	movs	r3, #0
 800748c:	220a      	movs	r2, #10
 800748e:	4648      	mov	r0, r9
 8007490:	f000 f8b2 	bl	80075f8 <__multadd>
 8007494:	9002      	str	r0, [sp, #8]
 8007496:	e7eb      	b.n	8007470 <_dtoa_r+0xb70>
 8007498:	08008928 	.word	0x08008928
 800749c:	080088ac 	.word	0x080088ac

080074a0 <_free_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4605      	mov	r5, r0
 80074a4:	2900      	cmp	r1, #0
 80074a6:	d041      	beq.n	800752c <_free_r+0x8c>
 80074a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074ac:	1f0c      	subs	r4, r1, #4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bfb8      	it	lt
 80074b2:	18e4      	addlt	r4, r4, r3
 80074b4:	f7fe fb80 	bl	8005bb8 <__malloc_lock>
 80074b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007530 <_free_r+0x90>)
 80074ba:	6813      	ldr	r3, [r2, #0]
 80074bc:	b933      	cbnz	r3, 80074cc <_free_r+0x2c>
 80074be:	6063      	str	r3, [r4, #4]
 80074c0:	6014      	str	r4, [r2, #0]
 80074c2:	4628      	mov	r0, r5
 80074c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074c8:	f7fe bb7c 	b.w	8005bc4 <__malloc_unlock>
 80074cc:	42a3      	cmp	r3, r4
 80074ce:	d908      	bls.n	80074e2 <_free_r+0x42>
 80074d0:	6820      	ldr	r0, [r4, #0]
 80074d2:	1821      	adds	r1, r4, r0
 80074d4:	428b      	cmp	r3, r1
 80074d6:	bf01      	itttt	eq
 80074d8:	6819      	ldreq	r1, [r3, #0]
 80074da:	685b      	ldreq	r3, [r3, #4]
 80074dc:	1809      	addeq	r1, r1, r0
 80074de:	6021      	streq	r1, [r4, #0]
 80074e0:	e7ed      	b.n	80074be <_free_r+0x1e>
 80074e2:	461a      	mov	r2, r3
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	b10b      	cbz	r3, 80074ec <_free_r+0x4c>
 80074e8:	42a3      	cmp	r3, r4
 80074ea:	d9fa      	bls.n	80074e2 <_free_r+0x42>
 80074ec:	6811      	ldr	r1, [r2, #0]
 80074ee:	1850      	adds	r0, r2, r1
 80074f0:	42a0      	cmp	r0, r4
 80074f2:	d10b      	bne.n	800750c <_free_r+0x6c>
 80074f4:	6820      	ldr	r0, [r4, #0]
 80074f6:	4401      	add	r1, r0
 80074f8:	1850      	adds	r0, r2, r1
 80074fa:	4283      	cmp	r3, r0
 80074fc:	6011      	str	r1, [r2, #0]
 80074fe:	d1e0      	bne.n	80074c2 <_free_r+0x22>
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	6053      	str	r3, [r2, #4]
 8007506:	4408      	add	r0, r1
 8007508:	6010      	str	r0, [r2, #0]
 800750a:	e7da      	b.n	80074c2 <_free_r+0x22>
 800750c:	d902      	bls.n	8007514 <_free_r+0x74>
 800750e:	230c      	movs	r3, #12
 8007510:	602b      	str	r3, [r5, #0]
 8007512:	e7d6      	b.n	80074c2 <_free_r+0x22>
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	1821      	adds	r1, r4, r0
 8007518:	428b      	cmp	r3, r1
 800751a:	bf04      	itt	eq
 800751c:	6819      	ldreq	r1, [r3, #0]
 800751e:	685b      	ldreq	r3, [r3, #4]
 8007520:	6063      	str	r3, [r4, #4]
 8007522:	bf04      	itt	eq
 8007524:	1809      	addeq	r1, r1, r0
 8007526:	6021      	streq	r1, [r4, #0]
 8007528:	6054      	str	r4, [r2, #4]
 800752a:	e7ca      	b.n	80074c2 <_free_r+0x22>
 800752c:	bd38      	pop	{r3, r4, r5, pc}
 800752e:	bf00      	nop
 8007530:	20000374 	.word	0x20000374

08007534 <_Balloc>:
 8007534:	b570      	push	{r4, r5, r6, lr}
 8007536:	69c6      	ldr	r6, [r0, #28]
 8007538:	4604      	mov	r4, r0
 800753a:	460d      	mov	r5, r1
 800753c:	b976      	cbnz	r6, 800755c <_Balloc+0x28>
 800753e:	2010      	movs	r0, #16
 8007540:	f7fe fa90 	bl	8005a64 <malloc>
 8007544:	4602      	mov	r2, r0
 8007546:	61e0      	str	r0, [r4, #28]
 8007548:	b920      	cbnz	r0, 8007554 <_Balloc+0x20>
 800754a:	4b18      	ldr	r3, [pc, #96]	@ (80075ac <_Balloc+0x78>)
 800754c:	4818      	ldr	r0, [pc, #96]	@ (80075b0 <_Balloc+0x7c>)
 800754e:	216b      	movs	r1, #107	@ 0x6b
 8007550:	f000 fd96 	bl	8008080 <__assert_func>
 8007554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007558:	6006      	str	r6, [r0, #0]
 800755a:	60c6      	str	r6, [r0, #12]
 800755c:	69e6      	ldr	r6, [r4, #28]
 800755e:	68f3      	ldr	r3, [r6, #12]
 8007560:	b183      	cbz	r3, 8007584 <_Balloc+0x50>
 8007562:	69e3      	ldr	r3, [r4, #28]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800756a:	b9b8      	cbnz	r0, 800759c <_Balloc+0x68>
 800756c:	2101      	movs	r1, #1
 800756e:	fa01 f605 	lsl.w	r6, r1, r5
 8007572:	1d72      	adds	r2, r6, #5
 8007574:	0092      	lsls	r2, r2, #2
 8007576:	4620      	mov	r0, r4
 8007578:	f7fe fa60 	bl	8005a3c <_calloc_r>
 800757c:	b160      	cbz	r0, 8007598 <_Balloc+0x64>
 800757e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007582:	e00e      	b.n	80075a2 <_Balloc+0x6e>
 8007584:	2221      	movs	r2, #33	@ 0x21
 8007586:	2104      	movs	r1, #4
 8007588:	4620      	mov	r0, r4
 800758a:	f7fe fa57 	bl	8005a3c <_calloc_r>
 800758e:	69e3      	ldr	r3, [r4, #28]
 8007590:	60f0      	str	r0, [r6, #12]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e4      	bne.n	8007562 <_Balloc+0x2e>
 8007598:	2000      	movs	r0, #0
 800759a:	bd70      	pop	{r4, r5, r6, pc}
 800759c:	6802      	ldr	r2, [r0, #0]
 800759e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075a2:	2300      	movs	r3, #0
 80075a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075a8:	e7f7      	b.n	800759a <_Balloc+0x66>
 80075aa:	bf00      	nop
 80075ac:	080088b9 	.word	0x080088b9
 80075b0:	08008939 	.word	0x08008939

080075b4 <_Bfree>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	69c6      	ldr	r6, [r0, #28]
 80075b8:	4605      	mov	r5, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	b976      	cbnz	r6, 80075dc <_Bfree+0x28>
 80075be:	2010      	movs	r0, #16
 80075c0:	f7fe fa50 	bl	8005a64 <malloc>
 80075c4:	4602      	mov	r2, r0
 80075c6:	61e8      	str	r0, [r5, #28]
 80075c8:	b920      	cbnz	r0, 80075d4 <_Bfree+0x20>
 80075ca:	4b09      	ldr	r3, [pc, #36]	@ (80075f0 <_Bfree+0x3c>)
 80075cc:	4809      	ldr	r0, [pc, #36]	@ (80075f4 <_Bfree+0x40>)
 80075ce:	218f      	movs	r1, #143	@ 0x8f
 80075d0:	f000 fd56 	bl	8008080 <__assert_func>
 80075d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075d8:	6006      	str	r6, [r0, #0]
 80075da:	60c6      	str	r6, [r0, #12]
 80075dc:	b13c      	cbz	r4, 80075ee <_Bfree+0x3a>
 80075de:	69eb      	ldr	r3, [r5, #28]
 80075e0:	6862      	ldr	r2, [r4, #4]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075e8:	6021      	str	r1, [r4, #0]
 80075ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
 80075f0:	080088b9 	.word	0x080088b9
 80075f4:	08008939 	.word	0x08008939

080075f8 <__multadd>:
 80075f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fc:	690d      	ldr	r5, [r1, #16]
 80075fe:	4607      	mov	r7, r0
 8007600:	460c      	mov	r4, r1
 8007602:	461e      	mov	r6, r3
 8007604:	f101 0c14 	add.w	ip, r1, #20
 8007608:	2000      	movs	r0, #0
 800760a:	f8dc 3000 	ldr.w	r3, [ip]
 800760e:	b299      	uxth	r1, r3
 8007610:	fb02 6101 	mla	r1, r2, r1, r6
 8007614:	0c1e      	lsrs	r6, r3, #16
 8007616:	0c0b      	lsrs	r3, r1, #16
 8007618:	fb02 3306 	mla	r3, r2, r6, r3
 800761c:	b289      	uxth	r1, r1
 800761e:	3001      	adds	r0, #1
 8007620:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007624:	4285      	cmp	r5, r0
 8007626:	f84c 1b04 	str.w	r1, [ip], #4
 800762a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800762e:	dcec      	bgt.n	800760a <__multadd+0x12>
 8007630:	b30e      	cbz	r6, 8007676 <__multadd+0x7e>
 8007632:	68a3      	ldr	r3, [r4, #8]
 8007634:	42ab      	cmp	r3, r5
 8007636:	dc19      	bgt.n	800766c <__multadd+0x74>
 8007638:	6861      	ldr	r1, [r4, #4]
 800763a:	4638      	mov	r0, r7
 800763c:	3101      	adds	r1, #1
 800763e:	f7ff ff79 	bl	8007534 <_Balloc>
 8007642:	4680      	mov	r8, r0
 8007644:	b928      	cbnz	r0, 8007652 <__multadd+0x5a>
 8007646:	4602      	mov	r2, r0
 8007648:	4b0c      	ldr	r3, [pc, #48]	@ (800767c <__multadd+0x84>)
 800764a:	480d      	ldr	r0, [pc, #52]	@ (8007680 <__multadd+0x88>)
 800764c:	21ba      	movs	r1, #186	@ 0xba
 800764e:	f000 fd17 	bl	8008080 <__assert_func>
 8007652:	6922      	ldr	r2, [r4, #16]
 8007654:	3202      	adds	r2, #2
 8007656:	f104 010c 	add.w	r1, r4, #12
 800765a:	0092      	lsls	r2, r2, #2
 800765c:	300c      	adds	r0, #12
 800765e:	f000 fd01 	bl	8008064 <memcpy>
 8007662:	4621      	mov	r1, r4
 8007664:	4638      	mov	r0, r7
 8007666:	f7ff ffa5 	bl	80075b4 <_Bfree>
 800766a:	4644      	mov	r4, r8
 800766c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007670:	3501      	adds	r5, #1
 8007672:	615e      	str	r6, [r3, #20]
 8007674:	6125      	str	r5, [r4, #16]
 8007676:	4620      	mov	r0, r4
 8007678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800767c:	08008928 	.word	0x08008928
 8007680:	08008939 	.word	0x08008939

08007684 <__hi0bits>:
 8007684:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007688:	4603      	mov	r3, r0
 800768a:	bf36      	itet	cc
 800768c:	0403      	lslcc	r3, r0, #16
 800768e:	2000      	movcs	r0, #0
 8007690:	2010      	movcc	r0, #16
 8007692:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007696:	bf3c      	itt	cc
 8007698:	021b      	lslcc	r3, r3, #8
 800769a:	3008      	addcc	r0, #8
 800769c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076a0:	bf3c      	itt	cc
 80076a2:	011b      	lslcc	r3, r3, #4
 80076a4:	3004      	addcc	r0, #4
 80076a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076aa:	bf3c      	itt	cc
 80076ac:	009b      	lslcc	r3, r3, #2
 80076ae:	3002      	addcc	r0, #2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	db05      	blt.n	80076c0 <__hi0bits+0x3c>
 80076b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80076b8:	f100 0001 	add.w	r0, r0, #1
 80076bc:	bf08      	it	eq
 80076be:	2020      	moveq	r0, #32
 80076c0:	4770      	bx	lr

080076c2 <__lo0bits>:
 80076c2:	6803      	ldr	r3, [r0, #0]
 80076c4:	4602      	mov	r2, r0
 80076c6:	f013 0007 	ands.w	r0, r3, #7
 80076ca:	d00b      	beq.n	80076e4 <__lo0bits+0x22>
 80076cc:	07d9      	lsls	r1, r3, #31
 80076ce:	d421      	bmi.n	8007714 <__lo0bits+0x52>
 80076d0:	0798      	lsls	r0, r3, #30
 80076d2:	bf49      	itett	mi
 80076d4:	085b      	lsrmi	r3, r3, #1
 80076d6:	089b      	lsrpl	r3, r3, #2
 80076d8:	2001      	movmi	r0, #1
 80076da:	6013      	strmi	r3, [r2, #0]
 80076dc:	bf5c      	itt	pl
 80076de:	6013      	strpl	r3, [r2, #0]
 80076e0:	2002      	movpl	r0, #2
 80076e2:	4770      	bx	lr
 80076e4:	b299      	uxth	r1, r3
 80076e6:	b909      	cbnz	r1, 80076ec <__lo0bits+0x2a>
 80076e8:	0c1b      	lsrs	r3, r3, #16
 80076ea:	2010      	movs	r0, #16
 80076ec:	b2d9      	uxtb	r1, r3
 80076ee:	b909      	cbnz	r1, 80076f4 <__lo0bits+0x32>
 80076f0:	3008      	adds	r0, #8
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	0719      	lsls	r1, r3, #28
 80076f6:	bf04      	itt	eq
 80076f8:	091b      	lsreq	r3, r3, #4
 80076fa:	3004      	addeq	r0, #4
 80076fc:	0799      	lsls	r1, r3, #30
 80076fe:	bf04      	itt	eq
 8007700:	089b      	lsreq	r3, r3, #2
 8007702:	3002      	addeq	r0, #2
 8007704:	07d9      	lsls	r1, r3, #31
 8007706:	d403      	bmi.n	8007710 <__lo0bits+0x4e>
 8007708:	085b      	lsrs	r3, r3, #1
 800770a:	f100 0001 	add.w	r0, r0, #1
 800770e:	d003      	beq.n	8007718 <__lo0bits+0x56>
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	4770      	bx	lr
 8007714:	2000      	movs	r0, #0
 8007716:	4770      	bx	lr
 8007718:	2020      	movs	r0, #32
 800771a:	4770      	bx	lr

0800771c <__i2b>:
 800771c:	b510      	push	{r4, lr}
 800771e:	460c      	mov	r4, r1
 8007720:	2101      	movs	r1, #1
 8007722:	f7ff ff07 	bl	8007534 <_Balloc>
 8007726:	4602      	mov	r2, r0
 8007728:	b928      	cbnz	r0, 8007736 <__i2b+0x1a>
 800772a:	4b05      	ldr	r3, [pc, #20]	@ (8007740 <__i2b+0x24>)
 800772c:	4805      	ldr	r0, [pc, #20]	@ (8007744 <__i2b+0x28>)
 800772e:	f240 1145 	movw	r1, #325	@ 0x145
 8007732:	f000 fca5 	bl	8008080 <__assert_func>
 8007736:	2301      	movs	r3, #1
 8007738:	6144      	str	r4, [r0, #20]
 800773a:	6103      	str	r3, [r0, #16]
 800773c:	bd10      	pop	{r4, pc}
 800773e:	bf00      	nop
 8007740:	08008928 	.word	0x08008928
 8007744:	08008939 	.word	0x08008939

08007748 <__multiply>:
 8007748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	4617      	mov	r7, r2
 800774e:	690a      	ldr	r2, [r1, #16]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	429a      	cmp	r2, r3
 8007754:	bfa8      	it	ge
 8007756:	463b      	movge	r3, r7
 8007758:	4689      	mov	r9, r1
 800775a:	bfa4      	itt	ge
 800775c:	460f      	movge	r7, r1
 800775e:	4699      	movge	r9, r3
 8007760:	693d      	ldr	r5, [r7, #16]
 8007762:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6879      	ldr	r1, [r7, #4]
 800776a:	eb05 060a 	add.w	r6, r5, sl
 800776e:	42b3      	cmp	r3, r6
 8007770:	b085      	sub	sp, #20
 8007772:	bfb8      	it	lt
 8007774:	3101      	addlt	r1, #1
 8007776:	f7ff fedd 	bl	8007534 <_Balloc>
 800777a:	b930      	cbnz	r0, 800778a <__multiply+0x42>
 800777c:	4602      	mov	r2, r0
 800777e:	4b41      	ldr	r3, [pc, #260]	@ (8007884 <__multiply+0x13c>)
 8007780:	4841      	ldr	r0, [pc, #260]	@ (8007888 <__multiply+0x140>)
 8007782:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007786:	f000 fc7b 	bl	8008080 <__assert_func>
 800778a:	f100 0414 	add.w	r4, r0, #20
 800778e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007792:	4623      	mov	r3, r4
 8007794:	2200      	movs	r2, #0
 8007796:	4573      	cmp	r3, lr
 8007798:	d320      	bcc.n	80077dc <__multiply+0x94>
 800779a:	f107 0814 	add.w	r8, r7, #20
 800779e:	f109 0114 	add.w	r1, r9, #20
 80077a2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80077a6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80077aa:	9302      	str	r3, [sp, #8]
 80077ac:	1beb      	subs	r3, r5, r7
 80077ae:	3b15      	subs	r3, #21
 80077b0:	f023 0303 	bic.w	r3, r3, #3
 80077b4:	3304      	adds	r3, #4
 80077b6:	3715      	adds	r7, #21
 80077b8:	42bd      	cmp	r5, r7
 80077ba:	bf38      	it	cc
 80077bc:	2304      	movcc	r3, #4
 80077be:	9301      	str	r3, [sp, #4]
 80077c0:	9b02      	ldr	r3, [sp, #8]
 80077c2:	9103      	str	r1, [sp, #12]
 80077c4:	428b      	cmp	r3, r1
 80077c6:	d80c      	bhi.n	80077e2 <__multiply+0x9a>
 80077c8:	2e00      	cmp	r6, #0
 80077ca:	dd03      	ble.n	80077d4 <__multiply+0x8c>
 80077cc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d055      	beq.n	8007880 <__multiply+0x138>
 80077d4:	6106      	str	r6, [r0, #16]
 80077d6:	b005      	add	sp, #20
 80077d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077dc:	f843 2b04 	str.w	r2, [r3], #4
 80077e0:	e7d9      	b.n	8007796 <__multiply+0x4e>
 80077e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80077e6:	f1ba 0f00 	cmp.w	sl, #0
 80077ea:	d01f      	beq.n	800782c <__multiply+0xe4>
 80077ec:	46c4      	mov	ip, r8
 80077ee:	46a1      	mov	r9, r4
 80077f0:	2700      	movs	r7, #0
 80077f2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077f6:	f8d9 3000 	ldr.w	r3, [r9]
 80077fa:	fa1f fb82 	uxth.w	fp, r2
 80077fe:	b29b      	uxth	r3, r3
 8007800:	fb0a 330b 	mla	r3, sl, fp, r3
 8007804:	443b      	add	r3, r7
 8007806:	f8d9 7000 	ldr.w	r7, [r9]
 800780a:	0c12      	lsrs	r2, r2, #16
 800780c:	0c3f      	lsrs	r7, r7, #16
 800780e:	fb0a 7202 	mla	r2, sl, r2, r7
 8007812:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007816:	b29b      	uxth	r3, r3
 8007818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800781c:	4565      	cmp	r5, ip
 800781e:	f849 3b04 	str.w	r3, [r9], #4
 8007822:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007826:	d8e4      	bhi.n	80077f2 <__multiply+0xaa>
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	50e7      	str	r7, [r4, r3]
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007832:	3104      	adds	r1, #4
 8007834:	f1b9 0f00 	cmp.w	r9, #0
 8007838:	d020      	beq.n	800787c <__multiply+0x134>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	4647      	mov	r7, r8
 800783e:	46a4      	mov	ip, r4
 8007840:	f04f 0a00 	mov.w	sl, #0
 8007844:	f8b7 b000 	ldrh.w	fp, [r7]
 8007848:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800784c:	fb09 220b 	mla	r2, r9, fp, r2
 8007850:	4452      	add	r2, sl
 8007852:	b29b      	uxth	r3, r3
 8007854:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007858:	f84c 3b04 	str.w	r3, [ip], #4
 800785c:	f857 3b04 	ldr.w	r3, [r7], #4
 8007860:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007864:	f8bc 3000 	ldrh.w	r3, [ip]
 8007868:	fb09 330a 	mla	r3, r9, sl, r3
 800786c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007870:	42bd      	cmp	r5, r7
 8007872:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007876:	d8e5      	bhi.n	8007844 <__multiply+0xfc>
 8007878:	9a01      	ldr	r2, [sp, #4]
 800787a:	50a3      	str	r3, [r4, r2]
 800787c:	3404      	adds	r4, #4
 800787e:	e79f      	b.n	80077c0 <__multiply+0x78>
 8007880:	3e01      	subs	r6, #1
 8007882:	e7a1      	b.n	80077c8 <__multiply+0x80>
 8007884:	08008928 	.word	0x08008928
 8007888:	08008939 	.word	0x08008939

0800788c <__pow5mult>:
 800788c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007890:	4615      	mov	r5, r2
 8007892:	f012 0203 	ands.w	r2, r2, #3
 8007896:	4607      	mov	r7, r0
 8007898:	460e      	mov	r6, r1
 800789a:	d007      	beq.n	80078ac <__pow5mult+0x20>
 800789c:	4c25      	ldr	r4, [pc, #148]	@ (8007934 <__pow5mult+0xa8>)
 800789e:	3a01      	subs	r2, #1
 80078a0:	2300      	movs	r3, #0
 80078a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078a6:	f7ff fea7 	bl	80075f8 <__multadd>
 80078aa:	4606      	mov	r6, r0
 80078ac:	10ad      	asrs	r5, r5, #2
 80078ae:	d03d      	beq.n	800792c <__pow5mult+0xa0>
 80078b0:	69fc      	ldr	r4, [r7, #28]
 80078b2:	b97c      	cbnz	r4, 80078d4 <__pow5mult+0x48>
 80078b4:	2010      	movs	r0, #16
 80078b6:	f7fe f8d5 	bl	8005a64 <malloc>
 80078ba:	4602      	mov	r2, r0
 80078bc:	61f8      	str	r0, [r7, #28]
 80078be:	b928      	cbnz	r0, 80078cc <__pow5mult+0x40>
 80078c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <__pow5mult+0xac>)
 80078c2:	481e      	ldr	r0, [pc, #120]	@ (800793c <__pow5mult+0xb0>)
 80078c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80078c8:	f000 fbda 	bl	8008080 <__assert_func>
 80078cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078d0:	6004      	str	r4, [r0, #0]
 80078d2:	60c4      	str	r4, [r0, #12]
 80078d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80078d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078dc:	b94c      	cbnz	r4, 80078f2 <__pow5mult+0x66>
 80078de:	f240 2171 	movw	r1, #625	@ 0x271
 80078e2:	4638      	mov	r0, r7
 80078e4:	f7ff ff1a 	bl	800771c <__i2b>
 80078e8:	2300      	movs	r3, #0
 80078ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80078ee:	4604      	mov	r4, r0
 80078f0:	6003      	str	r3, [r0, #0]
 80078f2:	f04f 0900 	mov.w	r9, #0
 80078f6:	07eb      	lsls	r3, r5, #31
 80078f8:	d50a      	bpl.n	8007910 <__pow5mult+0x84>
 80078fa:	4631      	mov	r1, r6
 80078fc:	4622      	mov	r2, r4
 80078fe:	4638      	mov	r0, r7
 8007900:	f7ff ff22 	bl	8007748 <__multiply>
 8007904:	4631      	mov	r1, r6
 8007906:	4680      	mov	r8, r0
 8007908:	4638      	mov	r0, r7
 800790a:	f7ff fe53 	bl	80075b4 <_Bfree>
 800790e:	4646      	mov	r6, r8
 8007910:	106d      	asrs	r5, r5, #1
 8007912:	d00b      	beq.n	800792c <__pow5mult+0xa0>
 8007914:	6820      	ldr	r0, [r4, #0]
 8007916:	b938      	cbnz	r0, 8007928 <__pow5mult+0x9c>
 8007918:	4622      	mov	r2, r4
 800791a:	4621      	mov	r1, r4
 800791c:	4638      	mov	r0, r7
 800791e:	f7ff ff13 	bl	8007748 <__multiply>
 8007922:	6020      	str	r0, [r4, #0]
 8007924:	f8c0 9000 	str.w	r9, [r0]
 8007928:	4604      	mov	r4, r0
 800792a:	e7e4      	b.n	80078f6 <__pow5mult+0x6a>
 800792c:	4630      	mov	r0, r6
 800792e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007932:	bf00      	nop
 8007934:	080089ec 	.word	0x080089ec
 8007938:	080088b9 	.word	0x080088b9
 800793c:	08008939 	.word	0x08008939

08007940 <__lshift>:
 8007940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007944:	460c      	mov	r4, r1
 8007946:	6849      	ldr	r1, [r1, #4]
 8007948:	6923      	ldr	r3, [r4, #16]
 800794a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800794e:	68a3      	ldr	r3, [r4, #8]
 8007950:	4607      	mov	r7, r0
 8007952:	4691      	mov	r9, r2
 8007954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007958:	f108 0601 	add.w	r6, r8, #1
 800795c:	42b3      	cmp	r3, r6
 800795e:	db0b      	blt.n	8007978 <__lshift+0x38>
 8007960:	4638      	mov	r0, r7
 8007962:	f7ff fde7 	bl	8007534 <_Balloc>
 8007966:	4605      	mov	r5, r0
 8007968:	b948      	cbnz	r0, 800797e <__lshift+0x3e>
 800796a:	4602      	mov	r2, r0
 800796c:	4b28      	ldr	r3, [pc, #160]	@ (8007a10 <__lshift+0xd0>)
 800796e:	4829      	ldr	r0, [pc, #164]	@ (8007a14 <__lshift+0xd4>)
 8007970:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007974:	f000 fb84 	bl	8008080 <__assert_func>
 8007978:	3101      	adds	r1, #1
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	e7ee      	b.n	800795c <__lshift+0x1c>
 800797e:	2300      	movs	r3, #0
 8007980:	f100 0114 	add.w	r1, r0, #20
 8007984:	f100 0210 	add.w	r2, r0, #16
 8007988:	4618      	mov	r0, r3
 800798a:	4553      	cmp	r3, sl
 800798c:	db33      	blt.n	80079f6 <__lshift+0xb6>
 800798e:	6920      	ldr	r0, [r4, #16]
 8007990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007994:	f104 0314 	add.w	r3, r4, #20
 8007998:	f019 091f 	ands.w	r9, r9, #31
 800799c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079a4:	d02b      	beq.n	80079fe <__lshift+0xbe>
 80079a6:	f1c9 0e20 	rsb	lr, r9, #32
 80079aa:	468a      	mov	sl, r1
 80079ac:	2200      	movs	r2, #0
 80079ae:	6818      	ldr	r0, [r3, #0]
 80079b0:	fa00 f009 	lsl.w	r0, r0, r9
 80079b4:	4310      	orrs	r0, r2
 80079b6:	f84a 0b04 	str.w	r0, [sl], #4
 80079ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80079be:	459c      	cmp	ip, r3
 80079c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80079c4:	d8f3      	bhi.n	80079ae <__lshift+0x6e>
 80079c6:	ebac 0304 	sub.w	r3, ip, r4
 80079ca:	3b15      	subs	r3, #21
 80079cc:	f023 0303 	bic.w	r3, r3, #3
 80079d0:	3304      	adds	r3, #4
 80079d2:	f104 0015 	add.w	r0, r4, #21
 80079d6:	4560      	cmp	r0, ip
 80079d8:	bf88      	it	hi
 80079da:	2304      	movhi	r3, #4
 80079dc:	50ca      	str	r2, [r1, r3]
 80079de:	b10a      	cbz	r2, 80079e4 <__lshift+0xa4>
 80079e0:	f108 0602 	add.w	r6, r8, #2
 80079e4:	3e01      	subs	r6, #1
 80079e6:	4638      	mov	r0, r7
 80079e8:	612e      	str	r6, [r5, #16]
 80079ea:	4621      	mov	r1, r4
 80079ec:	f7ff fde2 	bl	80075b4 <_Bfree>
 80079f0:	4628      	mov	r0, r5
 80079f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80079fa:	3301      	adds	r3, #1
 80079fc:	e7c5      	b.n	800798a <__lshift+0x4a>
 80079fe:	3904      	subs	r1, #4
 8007a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a04:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a08:	459c      	cmp	ip, r3
 8007a0a:	d8f9      	bhi.n	8007a00 <__lshift+0xc0>
 8007a0c:	e7ea      	b.n	80079e4 <__lshift+0xa4>
 8007a0e:	bf00      	nop
 8007a10:	08008928 	.word	0x08008928
 8007a14:	08008939 	.word	0x08008939

08007a18 <__mcmp>:
 8007a18:	690a      	ldr	r2, [r1, #16]
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	6900      	ldr	r0, [r0, #16]
 8007a1e:	1a80      	subs	r0, r0, r2
 8007a20:	b530      	push	{r4, r5, lr}
 8007a22:	d10e      	bne.n	8007a42 <__mcmp+0x2a>
 8007a24:	3314      	adds	r3, #20
 8007a26:	3114      	adds	r1, #20
 8007a28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a38:	4295      	cmp	r5, r2
 8007a3a:	d003      	beq.n	8007a44 <__mcmp+0x2c>
 8007a3c:	d205      	bcs.n	8007a4a <__mcmp+0x32>
 8007a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a42:	bd30      	pop	{r4, r5, pc}
 8007a44:	42a3      	cmp	r3, r4
 8007a46:	d3f3      	bcc.n	8007a30 <__mcmp+0x18>
 8007a48:	e7fb      	b.n	8007a42 <__mcmp+0x2a>
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	e7f9      	b.n	8007a42 <__mcmp+0x2a>
	...

08007a50 <__mdiff>:
 8007a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	4689      	mov	r9, r1
 8007a56:	4606      	mov	r6, r0
 8007a58:	4611      	mov	r1, r2
 8007a5a:	4648      	mov	r0, r9
 8007a5c:	4614      	mov	r4, r2
 8007a5e:	f7ff ffdb 	bl	8007a18 <__mcmp>
 8007a62:	1e05      	subs	r5, r0, #0
 8007a64:	d112      	bne.n	8007a8c <__mdiff+0x3c>
 8007a66:	4629      	mov	r1, r5
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f7ff fd63 	bl	8007534 <_Balloc>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	b928      	cbnz	r0, 8007a7e <__mdiff+0x2e>
 8007a72:	4b3f      	ldr	r3, [pc, #252]	@ (8007b70 <__mdiff+0x120>)
 8007a74:	f240 2137 	movw	r1, #567	@ 0x237
 8007a78:	483e      	ldr	r0, [pc, #248]	@ (8007b74 <__mdiff+0x124>)
 8007a7a:	f000 fb01 	bl	8008080 <__assert_func>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a84:	4610      	mov	r0, r2
 8007a86:	b003      	add	sp, #12
 8007a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8c:	bfbc      	itt	lt
 8007a8e:	464b      	movlt	r3, r9
 8007a90:	46a1      	movlt	r9, r4
 8007a92:	4630      	mov	r0, r6
 8007a94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a98:	bfba      	itte	lt
 8007a9a:	461c      	movlt	r4, r3
 8007a9c:	2501      	movlt	r5, #1
 8007a9e:	2500      	movge	r5, #0
 8007aa0:	f7ff fd48 	bl	8007534 <_Balloc>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	b918      	cbnz	r0, 8007ab0 <__mdiff+0x60>
 8007aa8:	4b31      	ldr	r3, [pc, #196]	@ (8007b70 <__mdiff+0x120>)
 8007aaa:	f240 2145 	movw	r1, #581	@ 0x245
 8007aae:	e7e3      	b.n	8007a78 <__mdiff+0x28>
 8007ab0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ab4:	6926      	ldr	r6, [r4, #16]
 8007ab6:	60c5      	str	r5, [r0, #12]
 8007ab8:	f109 0310 	add.w	r3, r9, #16
 8007abc:	f109 0514 	add.w	r5, r9, #20
 8007ac0:	f104 0e14 	add.w	lr, r4, #20
 8007ac4:	f100 0b14 	add.w	fp, r0, #20
 8007ac8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007acc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007ad0:	9301      	str	r3, [sp, #4]
 8007ad2:	46d9      	mov	r9, fp
 8007ad4:	f04f 0c00 	mov.w	ip, #0
 8007ad8:	9b01      	ldr	r3, [sp, #4]
 8007ada:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007ade:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007ae2:	9301      	str	r3, [sp, #4]
 8007ae4:	fa1f f38a 	uxth.w	r3, sl
 8007ae8:	4619      	mov	r1, r3
 8007aea:	b283      	uxth	r3, r0
 8007aec:	1acb      	subs	r3, r1, r3
 8007aee:	0c00      	lsrs	r0, r0, #16
 8007af0:	4463      	add	r3, ip
 8007af2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007af6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b00:	4576      	cmp	r6, lr
 8007b02:	f849 3b04 	str.w	r3, [r9], #4
 8007b06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b0a:	d8e5      	bhi.n	8007ad8 <__mdiff+0x88>
 8007b0c:	1b33      	subs	r3, r6, r4
 8007b0e:	3b15      	subs	r3, #21
 8007b10:	f023 0303 	bic.w	r3, r3, #3
 8007b14:	3415      	adds	r4, #21
 8007b16:	3304      	adds	r3, #4
 8007b18:	42a6      	cmp	r6, r4
 8007b1a:	bf38      	it	cc
 8007b1c:	2304      	movcc	r3, #4
 8007b1e:	441d      	add	r5, r3
 8007b20:	445b      	add	r3, fp
 8007b22:	461e      	mov	r6, r3
 8007b24:	462c      	mov	r4, r5
 8007b26:	4544      	cmp	r4, r8
 8007b28:	d30e      	bcc.n	8007b48 <__mdiff+0xf8>
 8007b2a:	f108 0103 	add.w	r1, r8, #3
 8007b2e:	1b49      	subs	r1, r1, r5
 8007b30:	f021 0103 	bic.w	r1, r1, #3
 8007b34:	3d03      	subs	r5, #3
 8007b36:	45a8      	cmp	r8, r5
 8007b38:	bf38      	it	cc
 8007b3a:	2100      	movcc	r1, #0
 8007b3c:	440b      	add	r3, r1
 8007b3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b42:	b191      	cbz	r1, 8007b6a <__mdiff+0x11a>
 8007b44:	6117      	str	r7, [r2, #16]
 8007b46:	e79d      	b.n	8007a84 <__mdiff+0x34>
 8007b48:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b4c:	46e6      	mov	lr, ip
 8007b4e:	0c08      	lsrs	r0, r1, #16
 8007b50:	fa1c fc81 	uxtah	ip, ip, r1
 8007b54:	4471      	add	r1, lr
 8007b56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b5a:	b289      	uxth	r1, r1
 8007b5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b60:	f846 1b04 	str.w	r1, [r6], #4
 8007b64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b68:	e7dd      	b.n	8007b26 <__mdiff+0xd6>
 8007b6a:	3f01      	subs	r7, #1
 8007b6c:	e7e7      	b.n	8007b3e <__mdiff+0xee>
 8007b6e:	bf00      	nop
 8007b70:	08008928 	.word	0x08008928
 8007b74:	08008939 	.word	0x08008939

08007b78 <__d2b>:
 8007b78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b7c:	460f      	mov	r7, r1
 8007b7e:	2101      	movs	r1, #1
 8007b80:	ec59 8b10 	vmov	r8, r9, d0
 8007b84:	4616      	mov	r6, r2
 8007b86:	f7ff fcd5 	bl	8007534 <_Balloc>
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	b930      	cbnz	r0, 8007b9c <__d2b+0x24>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	4b23      	ldr	r3, [pc, #140]	@ (8007c20 <__d2b+0xa8>)
 8007b92:	4824      	ldr	r0, [pc, #144]	@ (8007c24 <__d2b+0xac>)
 8007b94:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b98:	f000 fa72 	bl	8008080 <__assert_func>
 8007b9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ba4:	b10d      	cbz	r5, 8007baa <__d2b+0x32>
 8007ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007baa:	9301      	str	r3, [sp, #4]
 8007bac:	f1b8 0300 	subs.w	r3, r8, #0
 8007bb0:	d023      	beq.n	8007bfa <__d2b+0x82>
 8007bb2:	4668      	mov	r0, sp
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	f7ff fd84 	bl	80076c2 <__lo0bits>
 8007bba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007bbe:	b1d0      	cbz	r0, 8007bf6 <__d2b+0x7e>
 8007bc0:	f1c0 0320 	rsb	r3, r0, #32
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	40c2      	lsrs	r2, r0
 8007bcc:	6163      	str	r3, [r4, #20]
 8007bce:	9201      	str	r2, [sp, #4]
 8007bd0:	9b01      	ldr	r3, [sp, #4]
 8007bd2:	61a3      	str	r3, [r4, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bf0c      	ite	eq
 8007bd8:	2201      	moveq	r2, #1
 8007bda:	2202      	movne	r2, #2
 8007bdc:	6122      	str	r2, [r4, #16]
 8007bde:	b1a5      	cbz	r5, 8007c0a <__d2b+0x92>
 8007be0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007be4:	4405      	add	r5, r0
 8007be6:	603d      	str	r5, [r7, #0]
 8007be8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007bec:	6030      	str	r0, [r6, #0]
 8007bee:	4620      	mov	r0, r4
 8007bf0:	b003      	add	sp, #12
 8007bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bf6:	6161      	str	r1, [r4, #20]
 8007bf8:	e7ea      	b.n	8007bd0 <__d2b+0x58>
 8007bfa:	a801      	add	r0, sp, #4
 8007bfc:	f7ff fd61 	bl	80076c2 <__lo0bits>
 8007c00:	9b01      	ldr	r3, [sp, #4]
 8007c02:	6163      	str	r3, [r4, #20]
 8007c04:	3020      	adds	r0, #32
 8007c06:	2201      	movs	r2, #1
 8007c08:	e7e8      	b.n	8007bdc <__d2b+0x64>
 8007c0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007c12:	6038      	str	r0, [r7, #0]
 8007c14:	6918      	ldr	r0, [r3, #16]
 8007c16:	f7ff fd35 	bl	8007684 <__hi0bits>
 8007c1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c1e:	e7e5      	b.n	8007bec <__d2b+0x74>
 8007c20:	08008928 	.word	0x08008928
 8007c24:	08008939 	.word	0x08008939

08007c28 <__ssputs_r>:
 8007c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	688e      	ldr	r6, [r1, #8]
 8007c2e:	461f      	mov	r7, r3
 8007c30:	42be      	cmp	r6, r7
 8007c32:	680b      	ldr	r3, [r1, #0]
 8007c34:	4682      	mov	sl, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	4690      	mov	r8, r2
 8007c3a:	d82d      	bhi.n	8007c98 <__ssputs_r+0x70>
 8007c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c44:	d026      	beq.n	8007c94 <__ssputs_r+0x6c>
 8007c46:	6965      	ldr	r5, [r4, #20]
 8007c48:	6909      	ldr	r1, [r1, #16]
 8007c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c4e:	eba3 0901 	sub.w	r9, r3, r1
 8007c52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c56:	1c7b      	adds	r3, r7, #1
 8007c58:	444b      	add	r3, r9
 8007c5a:	106d      	asrs	r5, r5, #1
 8007c5c:	429d      	cmp	r5, r3
 8007c5e:	bf38      	it	cc
 8007c60:	461d      	movcc	r5, r3
 8007c62:	0553      	lsls	r3, r2, #21
 8007c64:	d527      	bpl.n	8007cb6 <__ssputs_r+0x8e>
 8007c66:	4629      	mov	r1, r5
 8007c68:	f7fd ff26 	bl	8005ab8 <_malloc_r>
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	b360      	cbz	r0, 8007cca <__ssputs_r+0xa2>
 8007c70:	6921      	ldr	r1, [r4, #16]
 8007c72:	464a      	mov	r2, r9
 8007c74:	f000 f9f6 	bl	8008064 <memcpy>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	6126      	str	r6, [r4, #16]
 8007c86:	6165      	str	r5, [r4, #20]
 8007c88:	444e      	add	r6, r9
 8007c8a:	eba5 0509 	sub.w	r5, r5, r9
 8007c8e:	6026      	str	r6, [r4, #0]
 8007c90:	60a5      	str	r5, [r4, #8]
 8007c92:	463e      	mov	r6, r7
 8007c94:	42be      	cmp	r6, r7
 8007c96:	d900      	bls.n	8007c9a <__ssputs_r+0x72>
 8007c98:	463e      	mov	r6, r7
 8007c9a:	6820      	ldr	r0, [r4, #0]
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	4641      	mov	r1, r8
 8007ca0:	f000 f9c6 	bl	8008030 <memmove>
 8007ca4:	68a3      	ldr	r3, [r4, #8]
 8007ca6:	1b9b      	subs	r3, r3, r6
 8007ca8:	60a3      	str	r3, [r4, #8]
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	4433      	add	r3, r6
 8007cae:	6023      	str	r3, [r4, #0]
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb6:	462a      	mov	r2, r5
 8007cb8:	f000 fa12 	bl	80080e0 <_realloc_r>
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d1e0      	bne.n	8007c84 <__ssputs_r+0x5c>
 8007cc2:	6921      	ldr	r1, [r4, #16]
 8007cc4:	4650      	mov	r0, sl
 8007cc6:	f7ff fbeb 	bl	80074a0 <_free_r>
 8007cca:	230c      	movs	r3, #12
 8007ccc:	f8ca 3000 	str.w	r3, [sl]
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	e7e9      	b.n	8007cb2 <__ssputs_r+0x8a>
	...

08007ce0 <_svfiprintf_r>:
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	4698      	mov	r8, r3
 8007ce6:	898b      	ldrh	r3, [r1, #12]
 8007ce8:	061b      	lsls	r3, r3, #24
 8007cea:	b09d      	sub	sp, #116	@ 0x74
 8007cec:	4607      	mov	r7, r0
 8007cee:	460d      	mov	r5, r1
 8007cf0:	4614      	mov	r4, r2
 8007cf2:	d510      	bpl.n	8007d16 <_svfiprintf_r+0x36>
 8007cf4:	690b      	ldr	r3, [r1, #16]
 8007cf6:	b973      	cbnz	r3, 8007d16 <_svfiprintf_r+0x36>
 8007cf8:	2140      	movs	r1, #64	@ 0x40
 8007cfa:	f7fd fedd 	bl	8005ab8 <_malloc_r>
 8007cfe:	6028      	str	r0, [r5, #0]
 8007d00:	6128      	str	r0, [r5, #16]
 8007d02:	b930      	cbnz	r0, 8007d12 <_svfiprintf_r+0x32>
 8007d04:	230c      	movs	r3, #12
 8007d06:	603b      	str	r3, [r7, #0]
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	b01d      	add	sp, #116	@ 0x74
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	2340      	movs	r3, #64	@ 0x40
 8007d14:	616b      	str	r3, [r5, #20]
 8007d16:	2300      	movs	r3, #0
 8007d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d1a:	2320      	movs	r3, #32
 8007d1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d24:	2330      	movs	r3, #48	@ 0x30
 8007d26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ec4 <_svfiprintf_r+0x1e4>
 8007d2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d2e:	f04f 0901 	mov.w	r9, #1
 8007d32:	4623      	mov	r3, r4
 8007d34:	469a      	mov	sl, r3
 8007d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d3a:	b10a      	cbz	r2, 8007d40 <_svfiprintf_r+0x60>
 8007d3c:	2a25      	cmp	r2, #37	@ 0x25
 8007d3e:	d1f9      	bne.n	8007d34 <_svfiprintf_r+0x54>
 8007d40:	ebba 0b04 	subs.w	fp, sl, r4
 8007d44:	d00b      	beq.n	8007d5e <_svfiprintf_r+0x7e>
 8007d46:	465b      	mov	r3, fp
 8007d48:	4622      	mov	r2, r4
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	f7ff ff6b 	bl	8007c28 <__ssputs_r>
 8007d52:	3001      	adds	r0, #1
 8007d54:	f000 80a7 	beq.w	8007ea6 <_svfiprintf_r+0x1c6>
 8007d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d5a:	445a      	add	r2, fp
 8007d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 809f 	beq.w	8007ea6 <_svfiprintf_r+0x1c6>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d72:	f10a 0a01 	add.w	sl, sl, #1
 8007d76:	9304      	str	r3, [sp, #16]
 8007d78:	9307      	str	r3, [sp, #28]
 8007d7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d80:	4654      	mov	r4, sl
 8007d82:	2205      	movs	r2, #5
 8007d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d88:	484e      	ldr	r0, [pc, #312]	@ (8007ec4 <_svfiprintf_r+0x1e4>)
 8007d8a:	f7f8 fa41 	bl	8000210 <memchr>
 8007d8e:	9a04      	ldr	r2, [sp, #16]
 8007d90:	b9d8      	cbnz	r0, 8007dca <_svfiprintf_r+0xea>
 8007d92:	06d0      	lsls	r0, r2, #27
 8007d94:	bf44      	itt	mi
 8007d96:	2320      	movmi	r3, #32
 8007d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d9c:	0711      	lsls	r1, r2, #28
 8007d9e:	bf44      	itt	mi
 8007da0:	232b      	movmi	r3, #43	@ 0x2b
 8007da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007da6:	f89a 3000 	ldrb.w	r3, [sl]
 8007daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dac:	d015      	beq.n	8007dda <_svfiprintf_r+0xfa>
 8007dae:	9a07      	ldr	r2, [sp, #28]
 8007db0:	4654      	mov	r4, sl
 8007db2:	2000      	movs	r0, #0
 8007db4:	f04f 0c0a 	mov.w	ip, #10
 8007db8:	4621      	mov	r1, r4
 8007dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dbe:	3b30      	subs	r3, #48	@ 0x30
 8007dc0:	2b09      	cmp	r3, #9
 8007dc2:	d94b      	bls.n	8007e5c <_svfiprintf_r+0x17c>
 8007dc4:	b1b0      	cbz	r0, 8007df4 <_svfiprintf_r+0x114>
 8007dc6:	9207      	str	r2, [sp, #28]
 8007dc8:	e014      	b.n	8007df4 <_svfiprintf_r+0x114>
 8007dca:	eba0 0308 	sub.w	r3, r0, r8
 8007dce:	fa09 f303 	lsl.w	r3, r9, r3
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	9304      	str	r3, [sp, #16]
 8007dd6:	46a2      	mov	sl, r4
 8007dd8:	e7d2      	b.n	8007d80 <_svfiprintf_r+0xa0>
 8007dda:	9b03      	ldr	r3, [sp, #12]
 8007ddc:	1d19      	adds	r1, r3, #4
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	9103      	str	r1, [sp, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bfbb      	ittet	lt
 8007de6:	425b      	neglt	r3, r3
 8007de8:	f042 0202 	orrlt.w	r2, r2, #2
 8007dec:	9307      	strge	r3, [sp, #28]
 8007dee:	9307      	strlt	r3, [sp, #28]
 8007df0:	bfb8      	it	lt
 8007df2:	9204      	strlt	r2, [sp, #16]
 8007df4:	7823      	ldrb	r3, [r4, #0]
 8007df6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007df8:	d10a      	bne.n	8007e10 <_svfiprintf_r+0x130>
 8007dfa:	7863      	ldrb	r3, [r4, #1]
 8007dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dfe:	d132      	bne.n	8007e66 <_svfiprintf_r+0x186>
 8007e00:	9b03      	ldr	r3, [sp, #12]
 8007e02:	1d1a      	adds	r2, r3, #4
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	9203      	str	r2, [sp, #12]
 8007e08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e0c:	3402      	adds	r4, #2
 8007e0e:	9305      	str	r3, [sp, #20]
 8007e10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ed4 <_svfiprintf_r+0x1f4>
 8007e14:	7821      	ldrb	r1, [r4, #0]
 8007e16:	2203      	movs	r2, #3
 8007e18:	4650      	mov	r0, sl
 8007e1a:	f7f8 f9f9 	bl	8000210 <memchr>
 8007e1e:	b138      	cbz	r0, 8007e30 <_svfiprintf_r+0x150>
 8007e20:	9b04      	ldr	r3, [sp, #16]
 8007e22:	eba0 000a 	sub.w	r0, r0, sl
 8007e26:	2240      	movs	r2, #64	@ 0x40
 8007e28:	4082      	lsls	r2, r0
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	3401      	adds	r4, #1
 8007e2e:	9304      	str	r3, [sp, #16]
 8007e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e34:	4824      	ldr	r0, [pc, #144]	@ (8007ec8 <_svfiprintf_r+0x1e8>)
 8007e36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e3a:	2206      	movs	r2, #6
 8007e3c:	f7f8 f9e8 	bl	8000210 <memchr>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d036      	beq.n	8007eb2 <_svfiprintf_r+0x1d2>
 8007e44:	4b21      	ldr	r3, [pc, #132]	@ (8007ecc <_svfiprintf_r+0x1ec>)
 8007e46:	bb1b      	cbnz	r3, 8007e90 <_svfiprintf_r+0x1b0>
 8007e48:	9b03      	ldr	r3, [sp, #12]
 8007e4a:	3307      	adds	r3, #7
 8007e4c:	f023 0307 	bic.w	r3, r3, #7
 8007e50:	3308      	adds	r3, #8
 8007e52:	9303      	str	r3, [sp, #12]
 8007e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e56:	4433      	add	r3, r6
 8007e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e5a:	e76a      	b.n	8007d32 <_svfiprintf_r+0x52>
 8007e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e60:	460c      	mov	r4, r1
 8007e62:	2001      	movs	r0, #1
 8007e64:	e7a8      	b.n	8007db8 <_svfiprintf_r+0xd8>
 8007e66:	2300      	movs	r3, #0
 8007e68:	3401      	adds	r4, #1
 8007e6a:	9305      	str	r3, [sp, #20]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	f04f 0c0a 	mov.w	ip, #10
 8007e72:	4620      	mov	r0, r4
 8007e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e78:	3a30      	subs	r2, #48	@ 0x30
 8007e7a:	2a09      	cmp	r2, #9
 8007e7c:	d903      	bls.n	8007e86 <_svfiprintf_r+0x1a6>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0c6      	beq.n	8007e10 <_svfiprintf_r+0x130>
 8007e82:	9105      	str	r1, [sp, #20]
 8007e84:	e7c4      	b.n	8007e10 <_svfiprintf_r+0x130>
 8007e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e7f0      	b.n	8007e72 <_svfiprintf_r+0x192>
 8007e90:	ab03      	add	r3, sp, #12
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	462a      	mov	r2, r5
 8007e96:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed0 <_svfiprintf_r+0x1f0>)
 8007e98:	a904      	add	r1, sp, #16
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	f7fd ff38 	bl	8005d10 <_printf_float>
 8007ea0:	1c42      	adds	r2, r0, #1
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	d1d6      	bne.n	8007e54 <_svfiprintf_r+0x174>
 8007ea6:	89ab      	ldrh	r3, [r5, #12]
 8007ea8:	065b      	lsls	r3, r3, #25
 8007eaa:	f53f af2d 	bmi.w	8007d08 <_svfiprintf_r+0x28>
 8007eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007eb0:	e72c      	b.n	8007d0c <_svfiprintf_r+0x2c>
 8007eb2:	ab03      	add	r3, sp, #12
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	462a      	mov	r2, r5
 8007eb8:	4b05      	ldr	r3, [pc, #20]	@ (8007ed0 <_svfiprintf_r+0x1f0>)
 8007eba:	a904      	add	r1, sp, #16
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	f7fe f9bf 	bl	8006240 <_printf_i>
 8007ec2:	e7ed      	b.n	8007ea0 <_svfiprintf_r+0x1c0>
 8007ec4:	08008992 	.word	0x08008992
 8007ec8:	0800899c 	.word	0x0800899c
 8007ecc:	08005d11 	.word	0x08005d11
 8007ed0:	08007c29 	.word	0x08007c29
 8007ed4:	08008998 	.word	0x08008998

08007ed8 <__sflush_r>:
 8007ed8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee0:	0716      	lsls	r6, r2, #28
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	d454      	bmi.n	8007f92 <__sflush_r+0xba>
 8007ee8:	684b      	ldr	r3, [r1, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	dc02      	bgt.n	8007ef4 <__sflush_r+0x1c>
 8007eee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dd48      	ble.n	8007f86 <__sflush_r+0xae>
 8007ef4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ef6:	2e00      	cmp	r6, #0
 8007ef8:	d045      	beq.n	8007f86 <__sflush_r+0xae>
 8007efa:	2300      	movs	r3, #0
 8007efc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f00:	682f      	ldr	r7, [r5, #0]
 8007f02:	6a21      	ldr	r1, [r4, #32]
 8007f04:	602b      	str	r3, [r5, #0]
 8007f06:	d030      	beq.n	8007f6a <__sflush_r+0x92>
 8007f08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	0759      	lsls	r1, r3, #29
 8007f0e:	d505      	bpl.n	8007f1c <__sflush_r+0x44>
 8007f10:	6863      	ldr	r3, [r4, #4]
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f16:	b10b      	cbz	r3, 8007f1c <__sflush_r+0x44>
 8007f18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f1a:	1ad2      	subs	r2, r2, r3
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f20:	6a21      	ldr	r1, [r4, #32]
 8007f22:	4628      	mov	r0, r5
 8007f24:	47b0      	blx	r6
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	d106      	bne.n	8007f3a <__sflush_r+0x62>
 8007f2c:	6829      	ldr	r1, [r5, #0]
 8007f2e:	291d      	cmp	r1, #29
 8007f30:	d82b      	bhi.n	8007f8a <__sflush_r+0xb2>
 8007f32:	4a2a      	ldr	r2, [pc, #168]	@ (8007fdc <__sflush_r+0x104>)
 8007f34:	40ca      	lsrs	r2, r1
 8007f36:	07d6      	lsls	r6, r2, #31
 8007f38:	d527      	bpl.n	8007f8a <__sflush_r+0xb2>
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	6062      	str	r2, [r4, #4]
 8007f3e:	04d9      	lsls	r1, r3, #19
 8007f40:	6922      	ldr	r2, [r4, #16]
 8007f42:	6022      	str	r2, [r4, #0]
 8007f44:	d504      	bpl.n	8007f50 <__sflush_r+0x78>
 8007f46:	1c42      	adds	r2, r0, #1
 8007f48:	d101      	bne.n	8007f4e <__sflush_r+0x76>
 8007f4a:	682b      	ldr	r3, [r5, #0]
 8007f4c:	b903      	cbnz	r3, 8007f50 <__sflush_r+0x78>
 8007f4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f52:	602f      	str	r7, [r5, #0]
 8007f54:	b1b9      	cbz	r1, 8007f86 <__sflush_r+0xae>
 8007f56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f5a:	4299      	cmp	r1, r3
 8007f5c:	d002      	beq.n	8007f64 <__sflush_r+0x8c>
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f7ff fa9e 	bl	80074a0 <_free_r>
 8007f64:	2300      	movs	r3, #0
 8007f66:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f68:	e00d      	b.n	8007f86 <__sflush_r+0xae>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b0      	blx	r6
 8007f70:	4602      	mov	r2, r0
 8007f72:	1c50      	adds	r0, r2, #1
 8007f74:	d1c9      	bne.n	8007f0a <__sflush_r+0x32>
 8007f76:	682b      	ldr	r3, [r5, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0c6      	beq.n	8007f0a <__sflush_r+0x32>
 8007f7c:	2b1d      	cmp	r3, #29
 8007f7e:	d001      	beq.n	8007f84 <__sflush_r+0xac>
 8007f80:	2b16      	cmp	r3, #22
 8007f82:	d11e      	bne.n	8007fc2 <__sflush_r+0xea>
 8007f84:	602f      	str	r7, [r5, #0]
 8007f86:	2000      	movs	r0, #0
 8007f88:	e022      	b.n	8007fd0 <__sflush_r+0xf8>
 8007f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f8e:	b21b      	sxth	r3, r3
 8007f90:	e01b      	b.n	8007fca <__sflush_r+0xf2>
 8007f92:	690f      	ldr	r7, [r1, #16]
 8007f94:	2f00      	cmp	r7, #0
 8007f96:	d0f6      	beq.n	8007f86 <__sflush_r+0xae>
 8007f98:	0793      	lsls	r3, r2, #30
 8007f9a:	680e      	ldr	r6, [r1, #0]
 8007f9c:	bf08      	it	eq
 8007f9e:	694b      	ldreq	r3, [r1, #20]
 8007fa0:	600f      	str	r7, [r1, #0]
 8007fa2:	bf18      	it	ne
 8007fa4:	2300      	movne	r3, #0
 8007fa6:	eba6 0807 	sub.w	r8, r6, r7
 8007faa:	608b      	str	r3, [r1, #8]
 8007fac:	f1b8 0f00 	cmp.w	r8, #0
 8007fb0:	dde9      	ble.n	8007f86 <__sflush_r+0xae>
 8007fb2:	6a21      	ldr	r1, [r4, #32]
 8007fb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007fb6:	4643      	mov	r3, r8
 8007fb8:	463a      	mov	r2, r7
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b0      	blx	r6
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	dc08      	bgt.n	8007fd4 <__sflush_r+0xfc>
 8007fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd4:	4407      	add	r7, r0
 8007fd6:	eba8 0800 	sub.w	r8, r8, r0
 8007fda:	e7e7      	b.n	8007fac <__sflush_r+0xd4>
 8007fdc:	20400001 	.word	0x20400001

08007fe0 <_fflush_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	690b      	ldr	r3, [r1, #16]
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	b913      	cbnz	r3, 8007ff0 <_fflush_r+0x10>
 8007fea:	2500      	movs	r5, #0
 8007fec:	4628      	mov	r0, r5
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	b118      	cbz	r0, 8007ffa <_fflush_r+0x1a>
 8007ff2:	6a03      	ldr	r3, [r0, #32]
 8007ff4:	b90b      	cbnz	r3, 8007ffa <_fflush_r+0x1a>
 8007ff6:	f7fe facd 	bl	8006594 <__sinit>
 8007ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0f3      	beq.n	8007fea <_fflush_r+0xa>
 8008002:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008004:	07d0      	lsls	r0, r2, #31
 8008006:	d404      	bmi.n	8008012 <_fflush_r+0x32>
 8008008:	0599      	lsls	r1, r3, #22
 800800a:	d402      	bmi.n	8008012 <_fflush_r+0x32>
 800800c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800800e:	f7fe fbea 	bl	80067e6 <__retarget_lock_acquire_recursive>
 8008012:	4628      	mov	r0, r5
 8008014:	4621      	mov	r1, r4
 8008016:	f7ff ff5f 	bl	8007ed8 <__sflush_r>
 800801a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800801c:	07da      	lsls	r2, r3, #31
 800801e:	4605      	mov	r5, r0
 8008020:	d4e4      	bmi.n	8007fec <_fflush_r+0xc>
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	059b      	lsls	r3, r3, #22
 8008026:	d4e1      	bmi.n	8007fec <_fflush_r+0xc>
 8008028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800802a:	f7fe fbdd 	bl	80067e8 <__retarget_lock_release_recursive>
 800802e:	e7dd      	b.n	8007fec <_fflush_r+0xc>

08008030 <memmove>:
 8008030:	4288      	cmp	r0, r1
 8008032:	b510      	push	{r4, lr}
 8008034:	eb01 0402 	add.w	r4, r1, r2
 8008038:	d902      	bls.n	8008040 <memmove+0x10>
 800803a:	4284      	cmp	r4, r0
 800803c:	4623      	mov	r3, r4
 800803e:	d807      	bhi.n	8008050 <memmove+0x20>
 8008040:	1e43      	subs	r3, r0, #1
 8008042:	42a1      	cmp	r1, r4
 8008044:	d008      	beq.n	8008058 <memmove+0x28>
 8008046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800804a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800804e:	e7f8      	b.n	8008042 <memmove+0x12>
 8008050:	4402      	add	r2, r0
 8008052:	4601      	mov	r1, r0
 8008054:	428a      	cmp	r2, r1
 8008056:	d100      	bne.n	800805a <memmove+0x2a>
 8008058:	bd10      	pop	{r4, pc}
 800805a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800805e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008062:	e7f7      	b.n	8008054 <memmove+0x24>

08008064 <memcpy>:
 8008064:	440a      	add	r2, r1
 8008066:	4291      	cmp	r1, r2
 8008068:	f100 33ff 	add.w	r3, r0, #4294967295
 800806c:	d100      	bne.n	8008070 <memcpy+0xc>
 800806e:	4770      	bx	lr
 8008070:	b510      	push	{r4, lr}
 8008072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800807a:	4291      	cmp	r1, r2
 800807c:	d1f9      	bne.n	8008072 <memcpy+0xe>
 800807e:	bd10      	pop	{r4, pc}

08008080 <__assert_func>:
 8008080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008082:	4614      	mov	r4, r2
 8008084:	461a      	mov	r2, r3
 8008086:	4b09      	ldr	r3, [pc, #36]	@ (80080ac <__assert_func+0x2c>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4605      	mov	r5, r0
 800808c:	68d8      	ldr	r0, [r3, #12]
 800808e:	b14c      	cbz	r4, 80080a4 <__assert_func+0x24>
 8008090:	4b07      	ldr	r3, [pc, #28]	@ (80080b0 <__assert_func+0x30>)
 8008092:	9100      	str	r1, [sp, #0]
 8008094:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008098:	4906      	ldr	r1, [pc, #24]	@ (80080b4 <__assert_func+0x34>)
 800809a:	462b      	mov	r3, r5
 800809c:	f000 f85c 	bl	8008158 <fiprintf>
 80080a0:	f000 f86c 	bl	800817c <abort>
 80080a4:	4b04      	ldr	r3, [pc, #16]	@ (80080b8 <__assert_func+0x38>)
 80080a6:	461c      	mov	r4, r3
 80080a8:	e7f3      	b.n	8008092 <__assert_func+0x12>
 80080aa:	bf00      	nop
 80080ac:	20000018 	.word	0x20000018
 80080b0:	080089ad 	.word	0x080089ad
 80080b4:	080089ba 	.word	0x080089ba
 80080b8:	080089e8 	.word	0x080089e8

080080bc <__ascii_mbtowc>:
 80080bc:	b082      	sub	sp, #8
 80080be:	b901      	cbnz	r1, 80080c2 <__ascii_mbtowc+0x6>
 80080c0:	a901      	add	r1, sp, #4
 80080c2:	b142      	cbz	r2, 80080d6 <__ascii_mbtowc+0x1a>
 80080c4:	b14b      	cbz	r3, 80080da <__ascii_mbtowc+0x1e>
 80080c6:	7813      	ldrb	r3, [r2, #0]
 80080c8:	600b      	str	r3, [r1, #0]
 80080ca:	7812      	ldrb	r2, [r2, #0]
 80080cc:	1e10      	subs	r0, r2, #0
 80080ce:	bf18      	it	ne
 80080d0:	2001      	movne	r0, #1
 80080d2:	b002      	add	sp, #8
 80080d4:	4770      	bx	lr
 80080d6:	4610      	mov	r0, r2
 80080d8:	e7fb      	b.n	80080d2 <__ascii_mbtowc+0x16>
 80080da:	f06f 0001 	mvn.w	r0, #1
 80080de:	e7f8      	b.n	80080d2 <__ascii_mbtowc+0x16>

080080e0 <_realloc_r>:
 80080e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e4:	4607      	mov	r7, r0
 80080e6:	4614      	mov	r4, r2
 80080e8:	460d      	mov	r5, r1
 80080ea:	b921      	cbnz	r1, 80080f6 <_realloc_r+0x16>
 80080ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080f0:	4611      	mov	r1, r2
 80080f2:	f7fd bce1 	b.w	8005ab8 <_malloc_r>
 80080f6:	b92a      	cbnz	r2, 8008104 <_realloc_r+0x24>
 80080f8:	f7ff f9d2 	bl	80074a0 <_free_r>
 80080fc:	4625      	mov	r5, r4
 80080fe:	4628      	mov	r0, r5
 8008100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008104:	f000 f841 	bl	800818a <_malloc_usable_size_r>
 8008108:	4284      	cmp	r4, r0
 800810a:	4606      	mov	r6, r0
 800810c:	d802      	bhi.n	8008114 <_realloc_r+0x34>
 800810e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008112:	d8f4      	bhi.n	80080fe <_realloc_r+0x1e>
 8008114:	4621      	mov	r1, r4
 8008116:	4638      	mov	r0, r7
 8008118:	f7fd fcce 	bl	8005ab8 <_malloc_r>
 800811c:	4680      	mov	r8, r0
 800811e:	b908      	cbnz	r0, 8008124 <_realloc_r+0x44>
 8008120:	4645      	mov	r5, r8
 8008122:	e7ec      	b.n	80080fe <_realloc_r+0x1e>
 8008124:	42b4      	cmp	r4, r6
 8008126:	4622      	mov	r2, r4
 8008128:	4629      	mov	r1, r5
 800812a:	bf28      	it	cs
 800812c:	4632      	movcs	r2, r6
 800812e:	f7ff ff99 	bl	8008064 <memcpy>
 8008132:	4629      	mov	r1, r5
 8008134:	4638      	mov	r0, r7
 8008136:	f7ff f9b3 	bl	80074a0 <_free_r>
 800813a:	e7f1      	b.n	8008120 <_realloc_r+0x40>

0800813c <__ascii_wctomb>:
 800813c:	4603      	mov	r3, r0
 800813e:	4608      	mov	r0, r1
 8008140:	b141      	cbz	r1, 8008154 <__ascii_wctomb+0x18>
 8008142:	2aff      	cmp	r2, #255	@ 0xff
 8008144:	d904      	bls.n	8008150 <__ascii_wctomb+0x14>
 8008146:	228a      	movs	r2, #138	@ 0x8a
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	f04f 30ff 	mov.w	r0, #4294967295
 800814e:	4770      	bx	lr
 8008150:	700a      	strb	r2, [r1, #0]
 8008152:	2001      	movs	r0, #1
 8008154:	4770      	bx	lr
	...

08008158 <fiprintf>:
 8008158:	b40e      	push	{r1, r2, r3}
 800815a:	b503      	push	{r0, r1, lr}
 800815c:	4601      	mov	r1, r0
 800815e:	ab03      	add	r3, sp, #12
 8008160:	4805      	ldr	r0, [pc, #20]	@ (8008178 <fiprintf+0x20>)
 8008162:	f853 2b04 	ldr.w	r2, [r3], #4
 8008166:	6800      	ldr	r0, [r0, #0]
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	f000 f83f 	bl	80081ec <_vfiprintf_r>
 800816e:	b002      	add	sp, #8
 8008170:	f85d eb04 	ldr.w	lr, [sp], #4
 8008174:	b003      	add	sp, #12
 8008176:	4770      	bx	lr
 8008178:	20000018 	.word	0x20000018

0800817c <abort>:
 800817c:	b508      	push	{r3, lr}
 800817e:	2006      	movs	r0, #6
 8008180:	f000 fa08 	bl	8008594 <raise>
 8008184:	2001      	movs	r0, #1
 8008186:	f7fa f94f 	bl	8002428 <_exit>

0800818a <_malloc_usable_size_r>:
 800818a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800818e:	1f18      	subs	r0, r3, #4
 8008190:	2b00      	cmp	r3, #0
 8008192:	bfbc      	itt	lt
 8008194:	580b      	ldrlt	r3, [r1, r0]
 8008196:	18c0      	addlt	r0, r0, r3
 8008198:	4770      	bx	lr

0800819a <__sfputc_r>:
 800819a:	6893      	ldr	r3, [r2, #8]
 800819c:	3b01      	subs	r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	b410      	push	{r4}
 80081a2:	6093      	str	r3, [r2, #8]
 80081a4:	da08      	bge.n	80081b8 <__sfputc_r+0x1e>
 80081a6:	6994      	ldr	r4, [r2, #24]
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	db01      	blt.n	80081b0 <__sfputc_r+0x16>
 80081ac:	290a      	cmp	r1, #10
 80081ae:	d103      	bne.n	80081b8 <__sfputc_r+0x1e>
 80081b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081b4:	f000 b932 	b.w	800841c <__swbuf_r>
 80081b8:	6813      	ldr	r3, [r2, #0]
 80081ba:	1c58      	adds	r0, r3, #1
 80081bc:	6010      	str	r0, [r2, #0]
 80081be:	7019      	strb	r1, [r3, #0]
 80081c0:	4608      	mov	r0, r1
 80081c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <__sfputs_r>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	4606      	mov	r6, r0
 80081cc:	460f      	mov	r7, r1
 80081ce:	4614      	mov	r4, r2
 80081d0:	18d5      	adds	r5, r2, r3
 80081d2:	42ac      	cmp	r4, r5
 80081d4:	d101      	bne.n	80081da <__sfputs_r+0x12>
 80081d6:	2000      	movs	r0, #0
 80081d8:	e007      	b.n	80081ea <__sfputs_r+0x22>
 80081da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081de:	463a      	mov	r2, r7
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7ff ffda 	bl	800819a <__sfputc_r>
 80081e6:	1c43      	adds	r3, r0, #1
 80081e8:	d1f3      	bne.n	80081d2 <__sfputs_r+0xa>
 80081ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081ec <_vfiprintf_r>:
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	460d      	mov	r5, r1
 80081f2:	b09d      	sub	sp, #116	@ 0x74
 80081f4:	4614      	mov	r4, r2
 80081f6:	4698      	mov	r8, r3
 80081f8:	4606      	mov	r6, r0
 80081fa:	b118      	cbz	r0, 8008204 <_vfiprintf_r+0x18>
 80081fc:	6a03      	ldr	r3, [r0, #32]
 80081fe:	b90b      	cbnz	r3, 8008204 <_vfiprintf_r+0x18>
 8008200:	f7fe f9c8 	bl	8006594 <__sinit>
 8008204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008206:	07d9      	lsls	r1, r3, #31
 8008208:	d405      	bmi.n	8008216 <_vfiprintf_r+0x2a>
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	059a      	lsls	r2, r3, #22
 800820e:	d402      	bmi.n	8008216 <_vfiprintf_r+0x2a>
 8008210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008212:	f7fe fae8 	bl	80067e6 <__retarget_lock_acquire_recursive>
 8008216:	89ab      	ldrh	r3, [r5, #12]
 8008218:	071b      	lsls	r3, r3, #28
 800821a:	d501      	bpl.n	8008220 <_vfiprintf_r+0x34>
 800821c:	692b      	ldr	r3, [r5, #16]
 800821e:	b99b      	cbnz	r3, 8008248 <_vfiprintf_r+0x5c>
 8008220:	4629      	mov	r1, r5
 8008222:	4630      	mov	r0, r6
 8008224:	f000 f938 	bl	8008498 <__swsetup_r>
 8008228:	b170      	cbz	r0, 8008248 <_vfiprintf_r+0x5c>
 800822a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800822c:	07dc      	lsls	r4, r3, #31
 800822e:	d504      	bpl.n	800823a <_vfiprintf_r+0x4e>
 8008230:	f04f 30ff 	mov.w	r0, #4294967295
 8008234:	b01d      	add	sp, #116	@ 0x74
 8008236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823a:	89ab      	ldrh	r3, [r5, #12]
 800823c:	0598      	lsls	r0, r3, #22
 800823e:	d4f7      	bmi.n	8008230 <_vfiprintf_r+0x44>
 8008240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008242:	f7fe fad1 	bl	80067e8 <__retarget_lock_release_recursive>
 8008246:	e7f3      	b.n	8008230 <_vfiprintf_r+0x44>
 8008248:	2300      	movs	r3, #0
 800824a:	9309      	str	r3, [sp, #36]	@ 0x24
 800824c:	2320      	movs	r3, #32
 800824e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008252:	f8cd 800c 	str.w	r8, [sp, #12]
 8008256:	2330      	movs	r3, #48	@ 0x30
 8008258:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008408 <_vfiprintf_r+0x21c>
 800825c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008260:	f04f 0901 	mov.w	r9, #1
 8008264:	4623      	mov	r3, r4
 8008266:	469a      	mov	sl, r3
 8008268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800826c:	b10a      	cbz	r2, 8008272 <_vfiprintf_r+0x86>
 800826e:	2a25      	cmp	r2, #37	@ 0x25
 8008270:	d1f9      	bne.n	8008266 <_vfiprintf_r+0x7a>
 8008272:	ebba 0b04 	subs.w	fp, sl, r4
 8008276:	d00b      	beq.n	8008290 <_vfiprintf_r+0xa4>
 8008278:	465b      	mov	r3, fp
 800827a:	4622      	mov	r2, r4
 800827c:	4629      	mov	r1, r5
 800827e:	4630      	mov	r0, r6
 8008280:	f7ff ffa2 	bl	80081c8 <__sfputs_r>
 8008284:	3001      	adds	r0, #1
 8008286:	f000 80a7 	beq.w	80083d8 <_vfiprintf_r+0x1ec>
 800828a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800828c:	445a      	add	r2, fp
 800828e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008290:	f89a 3000 	ldrb.w	r3, [sl]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 809f 	beq.w	80083d8 <_vfiprintf_r+0x1ec>
 800829a:	2300      	movs	r3, #0
 800829c:	f04f 32ff 	mov.w	r2, #4294967295
 80082a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082a4:	f10a 0a01 	add.w	sl, sl, #1
 80082a8:	9304      	str	r3, [sp, #16]
 80082aa:	9307      	str	r3, [sp, #28]
 80082ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80082b2:	4654      	mov	r4, sl
 80082b4:	2205      	movs	r2, #5
 80082b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ba:	4853      	ldr	r0, [pc, #332]	@ (8008408 <_vfiprintf_r+0x21c>)
 80082bc:	f7f7 ffa8 	bl	8000210 <memchr>
 80082c0:	9a04      	ldr	r2, [sp, #16]
 80082c2:	b9d8      	cbnz	r0, 80082fc <_vfiprintf_r+0x110>
 80082c4:	06d1      	lsls	r1, r2, #27
 80082c6:	bf44      	itt	mi
 80082c8:	2320      	movmi	r3, #32
 80082ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082ce:	0713      	lsls	r3, r2, #28
 80082d0:	bf44      	itt	mi
 80082d2:	232b      	movmi	r3, #43	@ 0x2b
 80082d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082d8:	f89a 3000 	ldrb.w	r3, [sl]
 80082dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80082de:	d015      	beq.n	800830c <_vfiprintf_r+0x120>
 80082e0:	9a07      	ldr	r2, [sp, #28]
 80082e2:	4654      	mov	r4, sl
 80082e4:	2000      	movs	r0, #0
 80082e6:	f04f 0c0a 	mov.w	ip, #10
 80082ea:	4621      	mov	r1, r4
 80082ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082f0:	3b30      	subs	r3, #48	@ 0x30
 80082f2:	2b09      	cmp	r3, #9
 80082f4:	d94b      	bls.n	800838e <_vfiprintf_r+0x1a2>
 80082f6:	b1b0      	cbz	r0, 8008326 <_vfiprintf_r+0x13a>
 80082f8:	9207      	str	r2, [sp, #28]
 80082fa:	e014      	b.n	8008326 <_vfiprintf_r+0x13a>
 80082fc:	eba0 0308 	sub.w	r3, r0, r8
 8008300:	fa09 f303 	lsl.w	r3, r9, r3
 8008304:	4313      	orrs	r3, r2
 8008306:	9304      	str	r3, [sp, #16]
 8008308:	46a2      	mov	sl, r4
 800830a:	e7d2      	b.n	80082b2 <_vfiprintf_r+0xc6>
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	1d19      	adds	r1, r3, #4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	9103      	str	r1, [sp, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	bfbb      	ittet	lt
 8008318:	425b      	neglt	r3, r3
 800831a:	f042 0202 	orrlt.w	r2, r2, #2
 800831e:	9307      	strge	r3, [sp, #28]
 8008320:	9307      	strlt	r3, [sp, #28]
 8008322:	bfb8      	it	lt
 8008324:	9204      	strlt	r2, [sp, #16]
 8008326:	7823      	ldrb	r3, [r4, #0]
 8008328:	2b2e      	cmp	r3, #46	@ 0x2e
 800832a:	d10a      	bne.n	8008342 <_vfiprintf_r+0x156>
 800832c:	7863      	ldrb	r3, [r4, #1]
 800832e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008330:	d132      	bne.n	8008398 <_vfiprintf_r+0x1ac>
 8008332:	9b03      	ldr	r3, [sp, #12]
 8008334:	1d1a      	adds	r2, r3, #4
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	9203      	str	r2, [sp, #12]
 800833a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800833e:	3402      	adds	r4, #2
 8008340:	9305      	str	r3, [sp, #20]
 8008342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008418 <_vfiprintf_r+0x22c>
 8008346:	7821      	ldrb	r1, [r4, #0]
 8008348:	2203      	movs	r2, #3
 800834a:	4650      	mov	r0, sl
 800834c:	f7f7 ff60 	bl	8000210 <memchr>
 8008350:	b138      	cbz	r0, 8008362 <_vfiprintf_r+0x176>
 8008352:	9b04      	ldr	r3, [sp, #16]
 8008354:	eba0 000a 	sub.w	r0, r0, sl
 8008358:	2240      	movs	r2, #64	@ 0x40
 800835a:	4082      	lsls	r2, r0
 800835c:	4313      	orrs	r3, r2
 800835e:	3401      	adds	r4, #1
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008366:	4829      	ldr	r0, [pc, #164]	@ (800840c <_vfiprintf_r+0x220>)
 8008368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800836c:	2206      	movs	r2, #6
 800836e:	f7f7 ff4f 	bl	8000210 <memchr>
 8008372:	2800      	cmp	r0, #0
 8008374:	d03f      	beq.n	80083f6 <_vfiprintf_r+0x20a>
 8008376:	4b26      	ldr	r3, [pc, #152]	@ (8008410 <_vfiprintf_r+0x224>)
 8008378:	bb1b      	cbnz	r3, 80083c2 <_vfiprintf_r+0x1d6>
 800837a:	9b03      	ldr	r3, [sp, #12]
 800837c:	3307      	adds	r3, #7
 800837e:	f023 0307 	bic.w	r3, r3, #7
 8008382:	3308      	adds	r3, #8
 8008384:	9303      	str	r3, [sp, #12]
 8008386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008388:	443b      	add	r3, r7
 800838a:	9309      	str	r3, [sp, #36]	@ 0x24
 800838c:	e76a      	b.n	8008264 <_vfiprintf_r+0x78>
 800838e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008392:	460c      	mov	r4, r1
 8008394:	2001      	movs	r0, #1
 8008396:	e7a8      	b.n	80082ea <_vfiprintf_r+0xfe>
 8008398:	2300      	movs	r3, #0
 800839a:	3401      	adds	r4, #1
 800839c:	9305      	str	r3, [sp, #20]
 800839e:	4619      	mov	r1, r3
 80083a0:	f04f 0c0a 	mov.w	ip, #10
 80083a4:	4620      	mov	r0, r4
 80083a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083aa:	3a30      	subs	r2, #48	@ 0x30
 80083ac:	2a09      	cmp	r2, #9
 80083ae:	d903      	bls.n	80083b8 <_vfiprintf_r+0x1cc>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d0c6      	beq.n	8008342 <_vfiprintf_r+0x156>
 80083b4:	9105      	str	r1, [sp, #20]
 80083b6:	e7c4      	b.n	8008342 <_vfiprintf_r+0x156>
 80083b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80083bc:	4604      	mov	r4, r0
 80083be:	2301      	movs	r3, #1
 80083c0:	e7f0      	b.n	80083a4 <_vfiprintf_r+0x1b8>
 80083c2:	ab03      	add	r3, sp, #12
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	462a      	mov	r2, r5
 80083c8:	4b12      	ldr	r3, [pc, #72]	@ (8008414 <_vfiprintf_r+0x228>)
 80083ca:	a904      	add	r1, sp, #16
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7fd fc9f 	bl	8005d10 <_printf_float>
 80083d2:	4607      	mov	r7, r0
 80083d4:	1c78      	adds	r0, r7, #1
 80083d6:	d1d6      	bne.n	8008386 <_vfiprintf_r+0x19a>
 80083d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083da:	07d9      	lsls	r1, r3, #31
 80083dc:	d405      	bmi.n	80083ea <_vfiprintf_r+0x1fe>
 80083de:	89ab      	ldrh	r3, [r5, #12]
 80083e0:	059a      	lsls	r2, r3, #22
 80083e2:	d402      	bmi.n	80083ea <_vfiprintf_r+0x1fe>
 80083e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083e6:	f7fe f9ff 	bl	80067e8 <__retarget_lock_release_recursive>
 80083ea:	89ab      	ldrh	r3, [r5, #12]
 80083ec:	065b      	lsls	r3, r3, #25
 80083ee:	f53f af1f 	bmi.w	8008230 <_vfiprintf_r+0x44>
 80083f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083f4:	e71e      	b.n	8008234 <_vfiprintf_r+0x48>
 80083f6:	ab03      	add	r3, sp, #12
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	462a      	mov	r2, r5
 80083fc:	4b05      	ldr	r3, [pc, #20]	@ (8008414 <_vfiprintf_r+0x228>)
 80083fe:	a904      	add	r1, sp, #16
 8008400:	4630      	mov	r0, r6
 8008402:	f7fd ff1d 	bl	8006240 <_printf_i>
 8008406:	e7e4      	b.n	80083d2 <_vfiprintf_r+0x1e6>
 8008408:	08008992 	.word	0x08008992
 800840c:	0800899c 	.word	0x0800899c
 8008410:	08005d11 	.word	0x08005d11
 8008414:	080081c9 	.word	0x080081c9
 8008418:	08008998 	.word	0x08008998

0800841c <__swbuf_r>:
 800841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841e:	460e      	mov	r6, r1
 8008420:	4614      	mov	r4, r2
 8008422:	4605      	mov	r5, r0
 8008424:	b118      	cbz	r0, 800842e <__swbuf_r+0x12>
 8008426:	6a03      	ldr	r3, [r0, #32]
 8008428:	b90b      	cbnz	r3, 800842e <__swbuf_r+0x12>
 800842a:	f7fe f8b3 	bl	8006594 <__sinit>
 800842e:	69a3      	ldr	r3, [r4, #24]
 8008430:	60a3      	str	r3, [r4, #8]
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	071a      	lsls	r2, r3, #28
 8008436:	d501      	bpl.n	800843c <__swbuf_r+0x20>
 8008438:	6923      	ldr	r3, [r4, #16]
 800843a:	b943      	cbnz	r3, 800844e <__swbuf_r+0x32>
 800843c:	4621      	mov	r1, r4
 800843e:	4628      	mov	r0, r5
 8008440:	f000 f82a 	bl	8008498 <__swsetup_r>
 8008444:	b118      	cbz	r0, 800844e <__swbuf_r+0x32>
 8008446:	f04f 37ff 	mov.w	r7, #4294967295
 800844a:	4638      	mov	r0, r7
 800844c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	6922      	ldr	r2, [r4, #16]
 8008452:	1a98      	subs	r0, r3, r2
 8008454:	6963      	ldr	r3, [r4, #20]
 8008456:	b2f6      	uxtb	r6, r6
 8008458:	4283      	cmp	r3, r0
 800845a:	4637      	mov	r7, r6
 800845c:	dc05      	bgt.n	800846a <__swbuf_r+0x4e>
 800845e:	4621      	mov	r1, r4
 8008460:	4628      	mov	r0, r5
 8008462:	f7ff fdbd 	bl	8007fe0 <_fflush_r>
 8008466:	2800      	cmp	r0, #0
 8008468:	d1ed      	bne.n	8008446 <__swbuf_r+0x2a>
 800846a:	68a3      	ldr	r3, [r4, #8]
 800846c:	3b01      	subs	r3, #1
 800846e:	60a3      	str	r3, [r4, #8]
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	6022      	str	r2, [r4, #0]
 8008476:	701e      	strb	r6, [r3, #0]
 8008478:	6962      	ldr	r2, [r4, #20]
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	429a      	cmp	r2, r3
 800847e:	d004      	beq.n	800848a <__swbuf_r+0x6e>
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	07db      	lsls	r3, r3, #31
 8008484:	d5e1      	bpl.n	800844a <__swbuf_r+0x2e>
 8008486:	2e0a      	cmp	r6, #10
 8008488:	d1df      	bne.n	800844a <__swbuf_r+0x2e>
 800848a:	4621      	mov	r1, r4
 800848c:	4628      	mov	r0, r5
 800848e:	f7ff fda7 	bl	8007fe0 <_fflush_r>
 8008492:	2800      	cmp	r0, #0
 8008494:	d0d9      	beq.n	800844a <__swbuf_r+0x2e>
 8008496:	e7d6      	b.n	8008446 <__swbuf_r+0x2a>

08008498 <__swsetup_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4b29      	ldr	r3, [pc, #164]	@ (8008540 <__swsetup_r+0xa8>)
 800849c:	4605      	mov	r5, r0
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	460c      	mov	r4, r1
 80084a2:	b118      	cbz	r0, 80084ac <__swsetup_r+0x14>
 80084a4:	6a03      	ldr	r3, [r0, #32]
 80084a6:	b90b      	cbnz	r3, 80084ac <__swsetup_r+0x14>
 80084a8:	f7fe f874 	bl	8006594 <__sinit>
 80084ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b0:	0719      	lsls	r1, r3, #28
 80084b2:	d422      	bmi.n	80084fa <__swsetup_r+0x62>
 80084b4:	06da      	lsls	r2, r3, #27
 80084b6:	d407      	bmi.n	80084c8 <__swsetup_r+0x30>
 80084b8:	2209      	movs	r2, #9
 80084ba:	602a      	str	r2, [r5, #0]
 80084bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084c0:	81a3      	strh	r3, [r4, #12]
 80084c2:	f04f 30ff 	mov.w	r0, #4294967295
 80084c6:	e033      	b.n	8008530 <__swsetup_r+0x98>
 80084c8:	0758      	lsls	r0, r3, #29
 80084ca:	d512      	bpl.n	80084f2 <__swsetup_r+0x5a>
 80084cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084ce:	b141      	cbz	r1, 80084e2 <__swsetup_r+0x4a>
 80084d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084d4:	4299      	cmp	r1, r3
 80084d6:	d002      	beq.n	80084de <__swsetup_r+0x46>
 80084d8:	4628      	mov	r0, r5
 80084da:	f7fe ffe1 	bl	80074a0 <_free_r>
 80084de:	2300      	movs	r3, #0
 80084e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084e8:	81a3      	strh	r3, [r4, #12]
 80084ea:	2300      	movs	r3, #0
 80084ec:	6063      	str	r3, [r4, #4]
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	89a3      	ldrh	r3, [r4, #12]
 80084f4:	f043 0308 	orr.w	r3, r3, #8
 80084f8:	81a3      	strh	r3, [r4, #12]
 80084fa:	6923      	ldr	r3, [r4, #16]
 80084fc:	b94b      	cbnz	r3, 8008512 <__swsetup_r+0x7a>
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008508:	d003      	beq.n	8008512 <__swsetup_r+0x7a>
 800850a:	4621      	mov	r1, r4
 800850c:	4628      	mov	r0, r5
 800850e:	f000 f883 	bl	8008618 <__smakebuf_r>
 8008512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008516:	f013 0201 	ands.w	r2, r3, #1
 800851a:	d00a      	beq.n	8008532 <__swsetup_r+0x9a>
 800851c:	2200      	movs	r2, #0
 800851e:	60a2      	str	r2, [r4, #8]
 8008520:	6962      	ldr	r2, [r4, #20]
 8008522:	4252      	negs	r2, r2
 8008524:	61a2      	str	r2, [r4, #24]
 8008526:	6922      	ldr	r2, [r4, #16]
 8008528:	b942      	cbnz	r2, 800853c <__swsetup_r+0xa4>
 800852a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800852e:	d1c5      	bne.n	80084bc <__swsetup_r+0x24>
 8008530:	bd38      	pop	{r3, r4, r5, pc}
 8008532:	0799      	lsls	r1, r3, #30
 8008534:	bf58      	it	pl
 8008536:	6962      	ldrpl	r2, [r4, #20]
 8008538:	60a2      	str	r2, [r4, #8]
 800853a:	e7f4      	b.n	8008526 <__swsetup_r+0x8e>
 800853c:	2000      	movs	r0, #0
 800853e:	e7f7      	b.n	8008530 <__swsetup_r+0x98>
 8008540:	20000018 	.word	0x20000018

08008544 <_raise_r>:
 8008544:	291f      	cmp	r1, #31
 8008546:	b538      	push	{r3, r4, r5, lr}
 8008548:	4605      	mov	r5, r0
 800854a:	460c      	mov	r4, r1
 800854c:	d904      	bls.n	8008558 <_raise_r+0x14>
 800854e:	2316      	movs	r3, #22
 8008550:	6003      	str	r3, [r0, #0]
 8008552:	f04f 30ff 	mov.w	r0, #4294967295
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800855a:	b112      	cbz	r2, 8008562 <_raise_r+0x1e>
 800855c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008560:	b94b      	cbnz	r3, 8008576 <_raise_r+0x32>
 8008562:	4628      	mov	r0, r5
 8008564:	f000 f830 	bl	80085c8 <_getpid_r>
 8008568:	4622      	mov	r2, r4
 800856a:	4601      	mov	r1, r0
 800856c:	4628      	mov	r0, r5
 800856e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008572:	f000 b817 	b.w	80085a4 <_kill_r>
 8008576:	2b01      	cmp	r3, #1
 8008578:	d00a      	beq.n	8008590 <_raise_r+0x4c>
 800857a:	1c59      	adds	r1, r3, #1
 800857c:	d103      	bne.n	8008586 <_raise_r+0x42>
 800857e:	2316      	movs	r3, #22
 8008580:	6003      	str	r3, [r0, #0]
 8008582:	2001      	movs	r0, #1
 8008584:	e7e7      	b.n	8008556 <_raise_r+0x12>
 8008586:	2100      	movs	r1, #0
 8008588:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800858c:	4620      	mov	r0, r4
 800858e:	4798      	blx	r3
 8008590:	2000      	movs	r0, #0
 8008592:	e7e0      	b.n	8008556 <_raise_r+0x12>

08008594 <raise>:
 8008594:	4b02      	ldr	r3, [pc, #8]	@ (80085a0 <raise+0xc>)
 8008596:	4601      	mov	r1, r0
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	f7ff bfd3 	b.w	8008544 <_raise_r>
 800859e:	bf00      	nop
 80085a0:	20000018 	.word	0x20000018

080085a4 <_kill_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	4d07      	ldr	r5, [pc, #28]	@ (80085c4 <_kill_r+0x20>)
 80085a8:	2300      	movs	r3, #0
 80085aa:	4604      	mov	r4, r0
 80085ac:	4608      	mov	r0, r1
 80085ae:	4611      	mov	r1, r2
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	f7f9 ff29 	bl	8002408 <_kill>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	d102      	bne.n	80085c0 <_kill_r+0x1c>
 80085ba:	682b      	ldr	r3, [r5, #0]
 80085bc:	b103      	cbz	r3, 80085c0 <_kill_r+0x1c>
 80085be:	6023      	str	r3, [r4, #0]
 80085c0:	bd38      	pop	{r3, r4, r5, pc}
 80085c2:	bf00      	nop
 80085c4:	200004b4 	.word	0x200004b4

080085c8 <_getpid_r>:
 80085c8:	f7f9 bf16 	b.w	80023f8 <_getpid>

080085cc <__swhatbuf_r>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	460c      	mov	r4, r1
 80085d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d4:	2900      	cmp	r1, #0
 80085d6:	b096      	sub	sp, #88	@ 0x58
 80085d8:	4615      	mov	r5, r2
 80085da:	461e      	mov	r6, r3
 80085dc:	da0d      	bge.n	80085fa <__swhatbuf_r+0x2e>
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085e4:	f04f 0100 	mov.w	r1, #0
 80085e8:	bf14      	ite	ne
 80085ea:	2340      	movne	r3, #64	@ 0x40
 80085ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085f0:	2000      	movs	r0, #0
 80085f2:	6031      	str	r1, [r6, #0]
 80085f4:	602b      	str	r3, [r5, #0]
 80085f6:	b016      	add	sp, #88	@ 0x58
 80085f8:	bd70      	pop	{r4, r5, r6, pc}
 80085fa:	466a      	mov	r2, sp
 80085fc:	f000 f848 	bl	8008690 <_fstat_r>
 8008600:	2800      	cmp	r0, #0
 8008602:	dbec      	blt.n	80085de <__swhatbuf_r+0x12>
 8008604:	9901      	ldr	r1, [sp, #4]
 8008606:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800860a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800860e:	4259      	negs	r1, r3
 8008610:	4159      	adcs	r1, r3
 8008612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008616:	e7eb      	b.n	80085f0 <__swhatbuf_r+0x24>

08008618 <__smakebuf_r>:
 8008618:	898b      	ldrh	r3, [r1, #12]
 800861a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800861c:	079d      	lsls	r5, r3, #30
 800861e:	4606      	mov	r6, r0
 8008620:	460c      	mov	r4, r1
 8008622:	d507      	bpl.n	8008634 <__smakebuf_r+0x1c>
 8008624:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	6123      	str	r3, [r4, #16]
 800862c:	2301      	movs	r3, #1
 800862e:	6163      	str	r3, [r4, #20]
 8008630:	b003      	add	sp, #12
 8008632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008634:	ab01      	add	r3, sp, #4
 8008636:	466a      	mov	r2, sp
 8008638:	f7ff ffc8 	bl	80085cc <__swhatbuf_r>
 800863c:	9f00      	ldr	r7, [sp, #0]
 800863e:	4605      	mov	r5, r0
 8008640:	4639      	mov	r1, r7
 8008642:	4630      	mov	r0, r6
 8008644:	f7fd fa38 	bl	8005ab8 <_malloc_r>
 8008648:	b948      	cbnz	r0, 800865e <__smakebuf_r+0x46>
 800864a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800864e:	059a      	lsls	r2, r3, #22
 8008650:	d4ee      	bmi.n	8008630 <__smakebuf_r+0x18>
 8008652:	f023 0303 	bic.w	r3, r3, #3
 8008656:	f043 0302 	orr.w	r3, r3, #2
 800865a:	81a3      	strh	r3, [r4, #12]
 800865c:	e7e2      	b.n	8008624 <__smakebuf_r+0xc>
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	6020      	str	r0, [r4, #0]
 8008662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008666:	81a3      	strh	r3, [r4, #12]
 8008668:	9b01      	ldr	r3, [sp, #4]
 800866a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800866e:	b15b      	cbz	r3, 8008688 <__smakebuf_r+0x70>
 8008670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008674:	4630      	mov	r0, r6
 8008676:	f000 f81d 	bl	80086b4 <_isatty_r>
 800867a:	b128      	cbz	r0, 8008688 <__smakebuf_r+0x70>
 800867c:	89a3      	ldrh	r3, [r4, #12]
 800867e:	f023 0303 	bic.w	r3, r3, #3
 8008682:	f043 0301 	orr.w	r3, r3, #1
 8008686:	81a3      	strh	r3, [r4, #12]
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	431d      	orrs	r5, r3
 800868c:	81a5      	strh	r5, [r4, #12]
 800868e:	e7cf      	b.n	8008630 <__smakebuf_r+0x18>

08008690 <_fstat_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d07      	ldr	r5, [pc, #28]	@ (80086b0 <_fstat_r+0x20>)
 8008694:	2300      	movs	r3, #0
 8008696:	4604      	mov	r4, r0
 8008698:	4608      	mov	r0, r1
 800869a:	4611      	mov	r1, r2
 800869c:	602b      	str	r3, [r5, #0]
 800869e:	f7f9 ff13 	bl	80024c8 <_fstat>
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	d102      	bne.n	80086ac <_fstat_r+0x1c>
 80086a6:	682b      	ldr	r3, [r5, #0]
 80086a8:	b103      	cbz	r3, 80086ac <_fstat_r+0x1c>
 80086aa:	6023      	str	r3, [r4, #0]
 80086ac:	bd38      	pop	{r3, r4, r5, pc}
 80086ae:	bf00      	nop
 80086b0:	200004b4 	.word	0x200004b4

080086b4 <_isatty_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4d06      	ldr	r5, [pc, #24]	@ (80086d0 <_isatty_r+0x1c>)
 80086b8:	2300      	movs	r3, #0
 80086ba:	4604      	mov	r4, r0
 80086bc:	4608      	mov	r0, r1
 80086be:	602b      	str	r3, [r5, #0]
 80086c0:	f7f9 ff12 	bl	80024e8 <_isatty>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_isatty_r+0x1a>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_isatty_r+0x1a>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	200004b4 	.word	0x200004b4

080086d4 <_init>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	bf00      	nop
 80086d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086da:	bc08      	pop	{r3}
 80086dc:	469e      	mov	lr, r3
 80086de:	4770      	bx	lr

080086e0 <_fini>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	bf00      	nop
 80086e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e6:	bc08      	pop	{r3}
 80086e8:	469e      	mov	lr, r3
 80086ea:	4770      	bx	lr
