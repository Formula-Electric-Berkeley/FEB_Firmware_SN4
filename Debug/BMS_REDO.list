
BMS_REDO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008990  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  08008b60  08008b60  00009b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f8  080092f8  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080092f8  080092f8  0000a2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009300  08009300  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009300  08009300  0000a300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009304  08009304  0000a304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009308  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  200001d8  080094e0  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  080094e0  0000b950  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cf2  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327f  00000000  00000000  00021efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  00025180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001110  00000000  00000000  00026738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245de  00000000  00000000  00027848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c504  00000000  00000000  0004be26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da0fe  00000000  00000000  0006832a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142428  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f70  00000000  00000000  0014246c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001493dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b48 	.word	0x08008b48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008b48 	.word	0x08008b48

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <pec15_calc>:
// ****************** Error Correction *******************
/* Calculates  and returns the CRC15 */
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;//initialize the PEC
 8000f84:	2310      	movs	r3, #16
 8000f86:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000f88:	2300      	movs	r3, #0
 8000f8a:	737b      	strb	r3, [r7, #13]
 8000f8c:	e018      	b.n	8000fc0 <pec15_calc+0x48>
	{
		addr = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	09db      	lsrs	r3, r3, #7
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	7b7a      	ldrb	r2, [r7, #13]
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	440a      	add	r2, r1
 8000f9a:	7812      	ldrb	r2, [r2, #0]
 8000f9c:	4053      	eors	r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	897b      	ldrh	r3, [r7, #10]
 8000fac:	490b      	ldr	r1, [pc, #44]	@ (8000fdc <pec15_calc+0x64>)
 8000fae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4053      	eors	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	737b      	strb	r3, [r7, #13]
 8000fc0:	7b7a      	ldrb	r2, [r7, #13]
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d3e2      	bcc.n	8000f8e <pec15_calc+0x16>
	}

	return(remainder * 2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	b29b      	uxth	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	08008d6c 	.word	0x08008d6c

08000fe0 <Pec10_calc>:

/* Calculates  and returns the CRC10 */
uint16_t Pec10_calc( bool bIsRxCmd, uint8_t nLength, uint8_t *pDataBuf)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	603a      	str	r2, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	460b      	mov	r3, r1
 8000fee:	71bb      	strb	r3, [r7, #6]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	81fb      	strh	r3, [r7, #14]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 8000ff4:	238f      	movs	r3, #143	@ 0x8f
 8000ff6:	817b      	strh	r3, [r7, #10]
    uint8_t nByteIndex, nBitIndex;

    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	737b      	strb	r3, [r7, #13]
 8000ffc:	e024      	b.n	8001048 <Pec10_calc+0x68>
  {
    /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)pDataBuf[nByteIndex] << 2u);
 8000ffe:	7b7b      	ldrb	r3, [r7, #13]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	b29a      	uxth	r2, r3
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	4053      	eors	r3, r2
 800100e:	81fb      	strh	r3, [r7, #14]

    /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 8001010:	2308      	movs	r3, #8
 8001012:	733b      	strb	r3, [r7, #12]
 8001014:	e012      	b.n	800103c <Pec10_calc+0x5c>
    {
      /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <Pec10_calc+0x50>
      {
                nRemainder = (uint16_t)((nRemainder << 1u));
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	81fb      	strh	r3, [r7, #14]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001026:	89fa      	ldrh	r2, [r7, #14]
 8001028:	897b      	ldrh	r3, [r7, #10]
 800102a:	4053      	eors	r3, r2
 800102c:	81fb      	strh	r3, [r7, #14]
 800102e:	e002      	b.n	8001036 <Pec10_calc+0x56>
      }
      else
      {
                nRemainder = (uint16_t)(nRemainder << 1u);
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	81fb      	strh	r3, [r7, #14]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	3b01      	subs	r3, #1
 800103a:	733b      	strb	r3, [r7, #12]
 800103c:	7b3b      	ldrb	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1e9      	bne.n	8001016 <Pec10_calc+0x36>
    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	3301      	adds	r3, #1
 8001046:	737b      	strb	r3, [r7, #13]
 8001048:	7b7a      	ldrb	r2, [r7, #13]
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3d6      	bcc.n	8000ffe <Pec10_calc+0x1e>
      }
    }
  }

    /* If array is from received buffer add command counter to crc calculation */
    if (bIsRxCmd == true)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00e      	beq.n	8001074 <Pec10_calc+0x94>
  {
        nRemainder ^= (uint16_t)(((uint16_t)pDataBuf[nLength] & (uint8_t)0xFC) << 2u);
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b21b      	sxth	r3, r3
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	b21b      	sxth	r3, r3
 8001064:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 8001068:	b21a      	sxth	r2, r3
 800106a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800106e:	4053      	eors	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	81fb      	strh	r3, [r7, #14]
  }
  /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8001074:	2306      	movs	r3, #6
 8001076:	733b      	strb	r3, [r7, #12]
 8001078:	e012      	b.n	80010a0 <Pec10_calc+0xc0>
  {
    /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <Pec10_calc+0xb4>
    {
            nRemainder = (uint16_t)((nRemainder << 1u));
 8001084:	89fb      	ldrh	r3, [r7, #14]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	81fb      	strh	r3, [r7, #14]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 800108a:	89fa      	ldrh	r2, [r7, #14]
 800108c:	897b      	ldrh	r3, [r7, #10]
 800108e:	4053      	eors	r3, r2
 8001090:	81fb      	strh	r3, [r7, #14]
 8001092:	e002      	b.n	800109a <Pec10_calc+0xba>
    }
    else
    {
            nRemainder = (uint16_t)((nRemainder << 1u));
 8001094:	89fb      	ldrh	r3, [r7, #14]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	81fb      	strh	r3, [r7, #14]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	3b01      	subs	r3, #1
 800109e:	733b      	strb	r3, [r7, #12]
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1e9      	bne.n	800107a <Pec10_calc+0x9a>
    }
  }
    return ((uint16_t)(nRemainder & 0x3FFu));
 80010a6:	89fb      	ldrh	r3, [r7, #14]
 80010a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010ac:	b29b      	uxth	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <pec10_calc>:
uint16_t pec10_calc(uint8_t nLength, uint8_t *pDataBuf)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	6039      	str	r1, [r7, #0]
 80010c4:	71fb      	strb	r3, [r7, #7]
	bool bIsRxCmd=true;
 80010c6:	2301      	movs	r3, #1
 80010c8:	72fb      	strb	r3, [r7, #11]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 80010ca:	2310      	movs	r3, #16
 80010cc:	81fb      	strh	r3, [r7, #14]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 80010ce:	238f      	movs	r3, #143	@ 0x8f
 80010d0:	813b      	strh	r3, [r7, #8]
    uint8_t nByteIndex, nBitIndex;

    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 80010d2:	2300      	movs	r3, #0
 80010d4:	737b      	strb	r3, [r7, #13]
 80010d6:	e024      	b.n	8001122 <pec10_calc+0x68>
  {
    /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)pDataBuf[nByteIndex] << 2u);
 80010d8:	7b7b      	ldrb	r3, [r7, #13]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	4413      	add	r3, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	89fb      	ldrh	r3, [r7, #14]
 80010e6:	4053      	eors	r3, r2
 80010e8:	81fb      	strh	r3, [r7, #14]

    /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 80010ea:	2308      	movs	r3, #8
 80010ec:	733b      	strb	r3, [r7, #12]
 80010ee:	e012      	b.n	8001116 <pec10_calc+0x5c>
    {
      /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 80010f0:	89fb      	ldrh	r3, [r7, #14]
 80010f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d007      	beq.n	800110a <pec10_calc+0x50>
      {
                nRemainder = (uint16_t)((nRemainder << 1u));
 80010fa:	89fb      	ldrh	r3, [r7, #14]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	81fb      	strh	r3, [r7, #14]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001100:	89fa      	ldrh	r2, [r7, #14]
 8001102:	893b      	ldrh	r3, [r7, #8]
 8001104:	4053      	eors	r3, r2
 8001106:	81fb      	strh	r3, [r7, #14]
 8001108:	e002      	b.n	8001110 <pec10_calc+0x56>
      }
      else
      {
                nRemainder = (uint16_t)(nRemainder << 1u);
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	81fb      	strh	r3, [r7, #14]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	3b01      	subs	r3, #1
 8001114:	733b      	strb	r3, [r7, #12]
 8001116:	7b3b      	ldrb	r3, [r7, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e9      	bne.n	80010f0 <pec10_calc+0x36>
    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 800111c:	7b7b      	ldrb	r3, [r7, #13]
 800111e:	3301      	adds	r3, #1
 8001120:	737b      	strb	r3, [r7, #13]
 8001122:	7b7a      	ldrb	r2, [r7, #13]
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	429a      	cmp	r2, r3
 8001128:	d3d6      	bcc.n	80010d8 <pec10_calc+0x1e>
      }
    }
  }

    /* If array is from received buffer add command counter to crc calculation */
    if (bIsRxCmd == true)
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00e      	beq.n	800114e <pec10_calc+0x94>
  {
        nRemainder ^= (uint16_t)(((uint16_t)pDataBuf[nLength] & (uint8_t)0xFC) << 2u);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b21b      	sxth	r3, r3
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	b21b      	sxth	r3, r3
 800113e:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 8001142:	b21a      	sxth	r2, r3
 8001144:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001148:	4053      	eors	r3, r2
 800114a:	b21b      	sxth	r3, r3
 800114c:	81fb      	strh	r3, [r7, #14]
  }
  /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 800114e:	2306      	movs	r3, #6
 8001150:	733b      	strb	r3, [r7, #12]
 8001152:	e012      	b.n	800117a <pec10_calc+0xc0>
  {
    /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 8001154:	89fb      	ldrh	r3, [r7, #14]
 8001156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <pec10_calc+0xb4>
    {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800115e:	89fb      	ldrh	r3, [r7, #14]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	81fb      	strh	r3, [r7, #14]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001164:	89fa      	ldrh	r2, [r7, #14]
 8001166:	893b      	ldrh	r3, [r7, #8]
 8001168:	4053      	eors	r3, r2
 800116a:	81fb      	strh	r3, [r7, #14]
 800116c:	e002      	b.n	8001174 <pec10_calc+0xba>
    }
    else
    {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	81fb      	strh	r3, [r7, #14]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8001174:	7b3b      	ldrb	r3, [r7, #12]
 8001176:	3b01      	subs	r3, #1
 8001178:	733b      	strb	r3, [r7, #12]
 800117a:	7b3b      	ldrb	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e9      	bne.n	8001154 <pec10_calc+0x9a>
    }
  }
    return ((uint16_t)(nRemainder & 0x3FFu));
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001186:	b29b      	uxth	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <cmd_68>:
//***************** Read and Write to SPI ****************
/* Generic function to write 68xx commands. Function calculates PEC for tx_cmd data. */
void cmd_68(uint8_t tx_cmd[2]) //The command to be transmitted
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	723b      	strb	r3, [r7, #8]
	cmd[1] =  tx_cmd[1];
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	785b      	ldrb	r3, [r3, #1]
 80011a6:	727b      	strb	r3, [r7, #9]
	cmd_pec = pec15_calc(2, cmd);
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	2002      	movs	r0, #2
 80011b0:	f7ff fee2 	bl	8000f78 <pec15_calc>
 80011b4:	4603      	mov	r3, r0
 80011b6:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80011b8:	89fb      	ldrh	r3, [r7, #14]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	b29b      	uxth	r3, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 80011c2:	89fb      	ldrh	r3, [r7, #14]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	72fb      	strb	r3, [r7, #11]
	FEB_cs_low();
 80011c8:	f000 ffec 	bl	80021a4 <FEB_cs_low>
	FEB_spi_write_array(4,cmd);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	2004      	movs	r0, #4
 80011d4:	f000 fffe 	bl	80021d4 <FEB_spi_write_array>
	FEB_cs_high();
 80011d8:	f000 fff0 	bl	80021bc <FEB_cs_high>
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <cmd_68_r>:
void cmd_68_r(uint8_t tx_cmd[2],uint8_t* data, uint8_t len) //The command to be transmitted
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	4613      	mov	r3, r2
 80011f0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = tx_cmd[0];
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	743b      	strb	r3, [r7, #16]
	cmd[1] =  tx_cmd[1];
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	747b      	strb	r3, [r7, #17]
	cmd_pec = pec15_calc(2, cmd);
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4619      	mov	r1, r3
 8001204:	2002      	movs	r0, #2
 8001206:	f7ff feb7 	bl	8000f78 <pec15_calc>
 800120a:	4603      	mov	r3, r0
 800120c:	82fb      	strh	r3, [r7, #22]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 800120e:	8afb      	ldrh	r3, [r7, #22]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	b29b      	uxth	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t)(cmd_pec);
 8001218:	8afb      	ldrh	r3, [r7, #22]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	74fb      	strb	r3, [r7, #19]
	FEB_cs_low();
 800121e:	f000 ffc1 	bl	80021a4 <FEB_cs_low>
	FEB_spi_write_read(cmd, 4, data, len);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f107 0010 	add.w	r0, r7, #16
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	2104      	movs	r1, #4
 800122c:	f000 ffe6 	bl	80021fc <FEB_spi_write_read>
	FEB_cs_high();
 8001230:	f000 ffc4 	bl	80021bc <FEB_cs_high>
}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <write_68>:
 */
void write_68(uint8_t total_ic, //Number of ICs to be written to
			  uint8_t tx_cmd[2], //The command to be transmitted
			  uint8_t data[] // Payload Data
			  )
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	73fb      	strb	r3, [r7, #15]
	FEB_cs_low();
	FEB_spi_write_array(CMD_LEN, cmd);
	FEB_cs_high();

	free(cmd);*/
	 uint8_t BYTES_IN_REG = 6;
 800124a:	2306      	movs	r3, #6
 800124c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	 uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	3304      	adds	r3, #4
 8001258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	 uint16_t data_pec, cmd_pec;
	 uint8_t *cmd, copyArray[6], src_address = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	 uint8_t cmd_index;
	 cmd = (uint8_t *)calloc(CMD_LEN, sizeof(uint8_t));
 8001262:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001266:	2101      	movs	r1, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f004 fdcd 	bl	8005e08 <calloc>
 800126e:	4603      	mov	r3, r0
 8001270:	61fb      	str	r3, [r7, #28]
	 cmd[0] = tx_cmd[0];
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	781a      	ldrb	r2, [r3, #0]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	701a      	strb	r2, [r3, #0]
	 cmd[1] = tx_cmd[1];
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3301      	adds	r3, #1
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	7852      	ldrb	r2, [r2, #1]
 8001282:	701a      	strb	r2, [r3, #0]
	 cmd_pec = pec15_calc(2, cmd);
 8001284:	69f9      	ldr	r1, [r7, #28]
 8001286:	2002      	movs	r0, #2
 8001288:	f7ff fe76 	bl	8000f78 <pec15_calc>
 800128c:	4603      	mov	r3, r0
 800128e:	837b      	strh	r3, [r7, #26]
	 cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001290:	8b7b      	ldrh	r3, [r7, #26]
 8001292:	0a1b      	lsrs	r3, r3, #8
 8001294:	b29a      	uxth	r2, r3
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3302      	adds	r3, #2
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	701a      	strb	r2, [r3, #0]
	 cmd[3] = (uint8_t)(cmd_pec);
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3303      	adds	r3, #3
 80012a2:	8b7a      	ldrh	r2, [r7, #26]
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	701a      	strb	r2, [r3, #0]
	 cmd_index = 4;
 80012a8:	2304      	movs	r3, #4
 80012aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	 /* executes for each LTC68xx, this loops starts with the last IC on the stack */
	 for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) {
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80012b4:	e064      	b.n	8001380 <write_68+0x144>
		 src_address = ((current_ic-1) * 6);
 80012b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012ba:	461a      	mov	r2, r3
 80012bc:	0052      	lsls	r2, r2, #1
 80012be:	4413      	add	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	3b06      	subs	r3, #6
 80012c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	     /* The first configuration written is received by the last IC in the daisy chain */
	     for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80012d0:	e01d      	b.n	800130e <write_68+0xd2>
	     {
	        cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 80012d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012d6:	1e5a      	subs	r2, r3, #1
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	461a      	mov	r2, r3
 80012e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80012e6:	4413      	add	r3, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	441a      	add	r2, r3
 80012ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012f2:	69f9      	ldr	r1, [r7, #28]
 80012f4:	440b      	add	r3, r1
 80012f6:	7812      	ldrb	r2, [r2, #0]
 80012f8:	701a      	strb	r2, [r3, #0]
	        cmd_index = cmd_index + 1;
 80012fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012fe:	3301      	adds	r3, #1
 8001300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	     for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001304:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001308:	3301      	adds	r3, #1
 800130a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800130e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001312:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001316:	429a      	cmp	r2, r3
 8001318:	d3db      	bcc.n	80012d2 <write_68+0x96>
	      }
	     /* Copy each ic correspond data + pec value for calculate data pec */
	     memcpy(&copyArray[0], &data[src_address], 6); /* dst, src, size */
 800131a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	18d1      	adds	r1, r2, r3
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	2206      	movs	r2, #6
 8001328:	4618      	mov	r0, r3
 800132a:	f005 fc4e 	bl	8006bca <memcpy>
	     /* calculating the PEC for each Ics configuration register data */
	     data_pec = (uint16_t)Pec10_calc(false, BYTES_IN_REG, &copyArray[0]);
 800132e:	f107 0210 	add.w	r2, r7, #16
 8001332:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001336:	4619      	mov	r1, r3
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fe51 	bl	8000fe0 <Pec10_calc>
 800133e:	4603      	mov	r3, r0
 8001340:	833b      	strh	r3, [r7, #24]
	     cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8001342:	8b3b      	ldrh	r3, [r7, #24]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	b299      	uxth	r1, r3
 8001348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	4413      	add	r3, r2
 8001350:	b2ca      	uxtb	r2, r1
 8001352:	701a      	strb	r2, [r3, #0]
	     cmd_index = cmd_index + 1;
 8001354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001358:	3301      	adds	r3, #1
 800135a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	     cmd[cmd_index] = (uint8_t)data_pec;
 800135e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	4413      	add	r3, r2
 8001366:	8b3a      	ldrh	r2, [r7, #24]
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	701a      	strb	r2, [r3, #0]
	     cmd_index = cmd_index + 1;
 800136c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001370:	3301      	adds	r3, #1
 8001372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	 for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) {
 8001376:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800137a:	3b01      	subs	r3, #1
 800137c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001380:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001384:	2b00      	cmp	r3, #0
 8001386:	d196      	bne.n	80012b6 <write_68+0x7a>
	 }
	 FEB_cs_low();
 8001388:	f000 ff0c 	bl	80021a4 <FEB_cs_low>
	 FEB_spi_write_array(CMD_LEN, &cmd[0]);
 800138c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001390:	b29b      	uxth	r3, r3
 8001392:	69f9      	ldr	r1, [r7, #28]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 ff1d 	bl	80021d4 <FEB_spi_write_array>
	 FEB_cs_high();
 800139a:	f000 ff0f 	bl	80021bc <FEB_cs_high>
	 free(cmd);
 800139e:	69f8      	ldr	r0, [r7, #28]
 80013a0:	f004 fd56 	bl	8005e50 <free>
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	@ 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <transmitCMDR>:
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
	cmd[1]=(cmdcode%0x100);//selects second byte
	cmd_68(cmd);
}
void transmitCMDR(uint16_t cmdcode,uint8_t*data,uint8_t len){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	80fb      	strh	r3, [r7, #6]
 80013b8:	4613      	mov	r3, r2
 80013ba:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	0a1b      	lsrs	r3, r3, #8
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	733b      	strb	r3, [r7, #12]
	cmd[1]=(cmdcode%0x100);//selects second byte
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	737b      	strb	r3, [r7, #13]
	cmd_68_r(cmd,data,len);
 80013cc:	797a      	ldrb	r2, [r7, #5]
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	6839      	ldr	r1, [r7, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff05 	bl	80011e4 <cmd_68_r>
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <transmitCMDW>:

void transmitCMDW(uint16_t cmdcode,uint8_t*data){
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	6039      	str	r1, [r7, #0]
 80013ec:	80fb      	strh	r3, [r7, #6]
	uint8_t cmd[2];
	cmd[0]=(cmdcode/0x100);//selects first byte
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	733b      	strb	r3, [r7, #12]
	cmd[1]=(cmdcode%0x100);//selects second byte
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	737b      	strb	r3, [r7, #13]
	write_68(FEB_NUM_IC,cmd,data);
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	2002      	movs	r0, #2
 8001408:	f7ff ff18 	bl	800123c <write_68>
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	0000      	movs	r0, r0
	...

08001418 <convert_voltage>:

static uint8_t get_sensor(uint8_t mux, uint8_t channel) {
	return mux * 8 + channel;
}

static float convert_voltage(int16_t raw_code) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
	return raw_code * 0.000150 + 1.5;
 8001422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f89c 	bl	8000564 <__aeabi_i2d>
 800142c:	a30f      	add	r3, pc, #60	@ (adr r3, 800146c <convert_voltage+0x54>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff f901 	bl	8000638 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <convert_voltage+0x50>)
 8001444:	f7fe ff42 	bl	80002cc <__adddf3>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff fbca 	bl	8000be8 <__aeabi_d2f>
 8001454:	4603      	mov	r3, r0
 8001456:	ee07 3a90 	vmov	s15, r3
}
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	f3af 8000 	nop.w
 8001468:	3ff80000 	.word	0x3ff80000
 800146c:	30553261 	.word	0x30553261
 8001470:	3f23a92a 	.word	0x3f23a92a

08001474 <FEB_ADBMS_Init>:
	return voltage;
}
//TODO: Convert voltage to temperature
// ******************************** Functions ********************************

void FEB_ADBMS_Init() {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	FEB_cs_high();
 8001478:	f000 fea0 	bl	80021bc <FEB_cs_high>
	ADBMS6830B_init_cfg(FEB_NUM_IC, IC_Config);
 800147c:	490c      	ldr	r1, [pc, #48]	@ (80014b0 <FEB_ADBMS_Init+0x3c>)
 800147e:	2002      	movs	r0, #2
 8001480:	f000 f9aa 	bl	80017d8 <ADBMS6830B_init_cfg>
	ADBMS6830B_reset_crc_count(FEB_NUM_IC, IC_Config);
 8001484:	490a      	ldr	r1, [pc, #40]	@ (80014b0 <FEB_ADBMS_Init+0x3c>)
 8001486:	2002      	movs	r0, #2
 8001488:	f000 fa44 	bl	8001914 <ADBMS6830B_reset_crc_count>
	ADBMS6830B_init_reg_limits(FEB_NUM_IC, IC_Config);
 800148c:	4908      	ldr	r1, [pc, #32]	@ (80014b0 <FEB_ADBMS_Init+0x3c>)
 800148e:	2002      	movs	r0, #2
 8001490:	f000 faad 	bl	80019ee <ADBMS6830B_init_reg_limits>
	wakeup_sleep(FEB_NUM_IC);
 8001494:	2002      	movs	r0, #2
 8001496:	f000 fe3e 	bl	8002116 <wakeup_sleep>
	ADBMS6830B_wrALL(FEB_NUM_IC, IC_Config);
 800149a:	4905      	ldr	r1, [pc, #20]	@ (80014b0 <FEB_ADBMS_Init+0x3c>)
 800149c:	2002      	movs	r0, #2
 800149e:	f000 fc17 	bl	8001cd0 <ADBMS6830B_wrALL>
	ADBMS6830B_rdALL(FEB_NUM_IC, IC_Config);
 80014a2:	4903      	ldr	r1, [pc, #12]	@ (80014b0 <FEB_ADBMS_Init+0x3c>)
 80014a4:	2002      	movs	r0, #2
 80014a6:	f000 fc2f 	bl	8001d08 <ADBMS6830B_rdALL>


}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200001f4 	.word	0x200001f4

080014b4 <FEB_ADBMS_Voltage_Process>:
#define POLL_RATE 20
int poll = POLL_RATE;
void FEB_ADBMS_Voltage_Process() {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	start_adc_cell_voltage_measurements();
 80014b8:	f000 f81a 	bl	80014f0 <start_adc_cell_voltage_measurements>
	read_cell_voltages();
 80014bc:	f000 f82c 	bl	8001518 <read_cell_voltages>
	store_cell_voltages();
 80014c0:	f000 f842 	bl	8001548 <store_cell_voltages>
	validate_voltages();
 80014c4:	f000 f8c6 	bl	8001654 <validate_voltages>
	if(poll-- == 0){
 80014c8:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <FEB_ADBMS_Voltage_Process+0x34>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1e5a      	subs	r2, r3, #1
 80014ce:	4906      	ldr	r1, [pc, #24]	@ (80014e8 <FEB_ADBMS_Voltage_Process+0x34>)
 80014d0:	600a      	str	r2, [r1, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d105      	bne.n	80014e2 <FEB_ADBMS_Voltage_Process+0x2e>
		FEB_ADBMS_UART_Transmit(&FEB_ACC);
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <FEB_ADBMS_Voltage_Process+0x38>)
 80014d8:	f000 fec0 	bl	800225c <FEB_ADBMS_UART_Transmit>
		poll=POLL_RATE;
 80014dc:	4b02      	ldr	r3, [pc, #8]	@ (80014e8 <FEB_ADBMS_Voltage_Process+0x34>)
 80014de:	2214      	movs	r2, #20
 80014e0:	601a      	str	r2, [r3, #0]
	}

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000000 	.word	0x20000000
 80014ec:	2000040c 	.word	0x2000040c

080014f0 <start_adc_cell_voltage_measurements>:
	}
}

// ******************************** Voltage ********************************

void start_adc_cell_voltage_measurements() {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af02      	add	r7, sp, #8
	wakeup_sleep(FEB_NUM_IC);
 80014f6:	2002      	movs	r0, #2
 80014f8:	f000 fe0d 	bl	8002116 <wakeup_sleep>
	ADBMS6830B_adcv(1, 0, 1, 0, OWVR);
 80014fc:	2300      	movs	r3, #0
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2300      	movs	r3, #0
 8001502:	2201      	movs	r2, #1
 8001504:	2100      	movs	r1, #0
 8001506:	2001      	movs	r0, #1
 8001508:	f000 fac4 	bl	8001a94 <ADBMS6830B_adcv>
	HAL_Delay(1);
 800150c:	2001      	movs	r0, #1
 800150e:	f001 fced 	bl	8002eec <HAL_Delay>
	//ADBMS6830B_pollAdc();
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <read_cell_voltages>:

void read_cell_voltages() {
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	wakeup_sleep(FEB_NUM_IC);
 800151c:	2002      	movs	r0, #2
 800151e:	f000 fdfa 	bl	8002116 <wakeup_sleep>
	ADBMS6830B_rdcv(FEB_NUM_IC, IC_Config);
 8001522:	4908      	ldr	r1, [pc, #32]	@ (8001544 <read_cell_voltages+0x2c>)
 8001524:	2002      	movs	r0, #2
 8001526:	f000 fae7 	bl	8001af8 <ADBMS6830B_rdcv>
	HAL_Delay(5);
 800152a:	2005      	movs	r0, #5
 800152c:	f001 fcde 	bl	8002eec <HAL_Delay>
	wakeup_sleep(FEB_NUM_IC);
 8001530:	2002      	movs	r0, #2
 8001532:	f000 fdf0 	bl	8002116 <wakeup_sleep>
	ADBMS6830B_rdsv(FEB_NUM_IC, IC_Config);
 8001536:	4903      	ldr	r1, [pc, #12]	@ (8001544 <read_cell_voltages+0x2c>)
 8001538:	2002      	movs	r0, #2
 800153a:	f000 fb57 	bl	8001bec <ADBMS6830B_rdsv>
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200001f4 	.word	0x200001f4

08001548 <store_cell_voltages>:

void store_cell_voltages() {
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
	FEB_ACC.total_voltage_V = 0;
 800154e:	4b3f      	ldr	r3, [pc, #252]	@ (800164c <store_cell_voltages+0x104>)
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 8001556:	2300      	movs	r3, #0
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	e06e      	b.n	800163a <store_cell_voltages+0xf2>
		for(uint8_t ic =0; ic<FEB_NUM_ICPBANK;ic++){
 800155c:	2300      	movs	r3, #0
 800155e:	71bb      	strb	r3, [r7, #6]
 8001560:	e065      	b.n	800162e <store_cell_voltages+0xe6>
			for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_IC; cell ++) {
 8001562:	2300      	movs	r3, #0
 8001564:	717b      	strb	r3, [r7, #5]
 8001566:	e05c      	b.n	8001622 <store_cell_voltages+0xda>
				float CVoltage = convert_voltage(IC_Config[ic+bank*FEB_NUM_ICPBANK].cells.c_codes[cell]);
 8001568:	79ba      	ldrb	r2, [r7, #6]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	441a      	add	r2, r3
 8001570:	797b      	ldrb	r3, [r7, #5]
 8001572:	4937      	ldr	r1, [pc, #220]	@ (8001650 <store_cell_voltages+0x108>)
 8001574:	2086      	movs	r0, #134	@ 0x86
 8001576:	fb00 f202 	mul.w	r2, r0, r2
 800157a:	4413      	add	r3, r2
 800157c:	330c      	adds	r3, #12
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	440b      	add	r3, r1
 8001582:	88db      	ldrh	r3, [r3, #6]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ff46 	bl	8001418 <convert_voltage>
 800158c:	ed87 0a00 	vstr	s0, [r7]
				FEB_ACC.banks[bank].cells[cell+ic*FEB_NUM_CELLS_PER_IC].voltage_V = CVoltage;
 8001590:	79f9      	ldrb	r1, [r7, #7]
 8001592:	797a      	ldrb	r2, [r7, #5]
 8001594:	79bb      	ldrb	r3, [r7, #6]
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	441a      	add	r2, r3
 800159a:	482c      	ldr	r0, [pc, #176]	@ (800164c <store_cell_voltages+0x104>)
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	f44f 7221 	mov.w	r2, #644	@ 0x284
 80015a8:	fb01 f202 	mul.w	r2, r1, r2
 80015ac:	4413      	add	r3, r2
 80015ae:	4403      	add	r3, r0
 80015b0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	601a      	str	r2, [r3, #0]
				FEB_ACC.banks[bank].cells[cell+ic*FEB_NUM_CELLS_PER_IC].voltage_S = convert_voltage(IC_Config[ic+bank*FEB_NUM_ICPBANK].cells.s_codes[cell]);
 80015b8:	79ba      	ldrb	r2, [r7, #6]
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	441a      	add	r2, r3
 80015c0:	797b      	ldrb	r3, [r7, #5]
 80015c2:	4923      	ldr	r1, [pc, #140]	@ (8001650 <store_cell_voltages+0x108>)
 80015c4:	2086      	movs	r0, #134	@ 0x86
 80015c6:	fb00 f202 	mul.w	r2, r0, r2
 80015ca:	4413      	add	r3, r2
 80015cc:	331c      	adds	r3, #28
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	440b      	add	r3, r1
 80015d2:	895b      	ldrh	r3, [r3, #10]
 80015d4:	b219      	sxth	r1, r3
 80015d6:	79fd      	ldrb	r5, [r7, #7]
 80015d8:	797a      	ldrb	r2, [r7, #5]
 80015da:	79bb      	ldrb	r3, [r7, #6]
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	18d4      	adds	r4, r2, r3
 80015e0:	4608      	mov	r0, r1
 80015e2:	f7ff ff19 	bl	8001418 <convert_voltage>
 80015e6:	eef0 7a40 	vmov.f32	s15, s0
 80015ea:	4918      	ldr	r1, [pc, #96]	@ (800164c <store_cell_voltages+0x104>)
 80015ec:	4623      	mov	r3, r4
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4423      	add	r3, r4
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	f44f 7221 	mov.w	r2, #644	@ 0x284
 80015f8:	fb05 f202 	mul.w	r2, r5, r2
 80015fc:	4413      	add	r3, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001604:	edc3 7a00 	vstr	s15, [r3]
				FEB_ACC.total_voltage_V+=CVoltage;
 8001608:	4b10      	ldr	r3, [pc, #64]	@ (800164c <store_cell_voltages+0x104>)
 800160a:	ed93 7a00 	vldr	s14, [r3]
 800160e:	edd7 7a00 	vldr	s15, [r7]
 8001612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <store_cell_voltages+0x104>)
 8001618:	edc3 7a00 	vstr	s15, [r3]
			for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_IC; cell ++) {
 800161c:	797b      	ldrb	r3, [r7, #5]
 800161e:	3301      	adds	r3, #1
 8001620:	717b      	strb	r3, [r7, #5]
 8001622:	797b      	ldrb	r3, [r7, #5]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d99f      	bls.n	8001568 <store_cell_voltages+0x20>
		for(uint8_t ic =0; ic<FEB_NUM_ICPBANK;ic++){
 8001628:	79bb      	ldrb	r3, [r7, #6]
 800162a:	3301      	adds	r3, #1
 800162c:	71bb      	strb	r3, [r7, #6]
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d996      	bls.n	8001562 <store_cell_voltages+0x1a>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	3301      	adds	r3, #1
 8001638:	71fb      	strb	r3, [r7, #7]
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d08d      	beq.n	800155c <store_cell_voltages+0x14>
				//IC_Config[bank*FEB_NUM_ICPBANK+ic].cells.s_codes[ic]=0;
			}
		}

	}
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bdb0      	pop	{r4, r5, r7, pc}
 800164a:	bf00      	nop
 800164c:	2000040c 	.word	0x2000040c
 8001650:	200001f4 	.word	0x200001f4

08001654 <validate_voltages>:

void validate_voltages() {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
	uint16_t vMax = FEB_Config_Get_Cell_Max_Voltage_mV();
 800165a:	f000 fd93 	bl	8002184 <FEB_Config_Get_Cell_Max_Voltage_mV>
 800165e:	4603      	mov	r3, r0
 8001660:	81bb      	strh	r3, [r7, #12]
	uint16_t vMin = FEB_Config_Get_Cell_Min_Voltage_mV();
 8001662:	f000 fd7f 	bl	8002164 <FEB_Config_Get_Cell_Min_Voltage_mV>
 8001666:	4603      	mov	r3, r0
 8001668:	817b      	strh	r3, [r7, #10]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 800166a:	2300      	movs	r3, #0
 800166c:	73fb      	strb	r3, [r7, #15]
 800166e:	e027      	b.n	80016c0 <validate_voltages+0x6c>
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_IC; cell ++) {
 8001670:	2300      	movs	r3, #0
 8001672:	73bb      	strb	r3, [r7, #14]
 8001674:	e01e      	b.n	80016b4 <validate_voltages+0x60>
			float voltage = FEB_ACC.banks[bank].cells[cell].voltage_V;
 8001676:	7bf9      	ldrb	r1, [r7, #15]
 8001678:	7bba      	ldrb	r2, [r7, #14]
 800167a:	4815      	ldr	r0, [pc, #84]	@ (80016d0 <validate_voltages+0x7c>)
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	f44f 7221 	mov.w	r2, #644	@ 0x284
 8001688:	fb01 f202 	mul.w	r2, r1, r2
 800168c:	4413      	add	r3, r2
 800168e:	4403      	add	r3, r0
 8001690:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	607b      	str	r3, [r7, #4]
			if (voltage > vMax || voltage < vMin) {
 8001698:	89bb      	ldrh	r3, [r7, #12]
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80016a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_IC; cell ++) {
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	3301      	adds	r3, #1
 80016b2:	73bb      	strb	r3, [r7, #14]
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	d9dd      	bls.n	8001676 <validate_voltages+0x22>
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank ++) {
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	3301      	adds	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0d4      	beq.n	8001670 <validate_voltages+0x1c>
				//FEB_SM_Transition(FEB_SM_ST_FAULT_BMS);
			}
		}
	}
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	2000040c 	.word	0x2000040c
 80016d4:	00000000 	.word	0x00000000

080016d8 <SetOverVoltageThreshold>:
#include "FEB_ADBMS6830B_Driver.h"
#include "FEB_HW.h"
uint16_t SetOverVoltageThreshold(float voltage)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t vov_value;
  uint8_t rbits = 12;
 80016e2:	230c      	movs	r3, #12
 80016e4:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 80016e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ea:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80016ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016f2:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7fe ff46 	bl	8000588 <__aeabi_f2d>
 80016fc:	a314      	add	r3, pc, #80	@ (adr r3, 8001750 <SetOverVoltageThreshold+0x78>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7ff f8c3 	bl	800088c <__aeabi_ddiv>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff fa6b 	bl	8000be8 <__aeabi_d2f>
 8001712:	4603      	mov	r3, r0
 8001714:	607b      	str	r3, [r7, #4]
  vov_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	3b01      	subs	r3, #1
 800171a:	2202      	movs	r2, #2
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001728:	edd7 7a01 	vldr	s15, [r7, #4]
 800172c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001734:	ee17 3a90 	vmov	r3, s15
 8001738:	81bb      	strh	r3, [r7, #12]
  vov_value &= 0xFFF;
 800173a:	89bb      	ldrh	r3, [r7, #12]
 800173c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001740:	81bb      	strh	r3, [r7, #12]
  return vov_value;
 8001742:	89bb      	ldrh	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	f3af 8000 	nop.w
 8001750:	30553261 	.word	0x30553261
 8001754:	3f63a92a 	.word	0x3f63a92a

08001758 <SetUnderVoltageThreshold>:
uint16_t SetUnderVoltageThreshold(float voltage)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	ed87 0a01 	vstr	s0, [r7, #4]
  uint16_t vuv_value;
  uint8_t rbits = 12;
 8001762:	230c      	movs	r3, #12
 8001764:	73fb      	strb	r3, [r7, #15]
  voltage = (voltage - 1.5);
 8001766:	edd7 7a01 	vldr	s15, [r7, #4]
 800176a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800176e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001772:	edc7 7a01 	vstr	s15, [r7, #4]
  voltage = voltage / (16 * 0.000150);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7fe ff06 	bl	8000588 <__aeabi_f2d>
 800177c:	a314      	add	r3, pc, #80	@ (adr r3, 80017d0 <SetUnderVoltageThreshold+0x78>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f7ff f883 	bl	800088c <__aeabi_ddiv>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff fa2b 	bl	8000be8 <__aeabi_d2f>
 8001792:	4603      	mov	r3, r0
 8001794:	607b      	str	r3, [r7, #4]
  vuv_value = (uint16_t )(voltage + 2 * (1 << (rbits - 1)));
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	3b01      	subs	r3, #1
 800179a:	2202      	movs	r2, #2
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b4:	ee17 3a90 	vmov	r3, s15
 80017b8:	81bb      	strh	r3, [r7, #12]
  vuv_value &= 0xFFF;
 80017ba:	89bb      	ldrh	r3, [r7, #12]
 80017bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c0:	81bb      	strh	r3, [r7, #12]
  return vuv_value;
 80017c2:	89bb      	ldrh	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	f3af 8000 	nop.w
 80017d0:	30553261 	.word	0x30553261
 80017d4:	3f63a92a 	.word	0x3f63a92a

080017d8 <ADBMS6830B_init_cfg>:
/* Helper function to initialize CFG variables */
void ADBMS6830B_init_cfg(uint8_t total_ic, //Number of ICs in the system
					  cell_asic *ic //A two dimensional array that stores the data
					  )
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
	  for(uint8_t cic = 0; cic < total_ic; cic++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e087      	b.n	80018fa <ADBMS6830B_init_cfg+0x122>
	  {
	    /* Init config A */
	    ic[cic].configa.tx_data[0] = 0x83;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80017f0:	fb02 f303 	mul.w	r3, r2, r3
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	2283      	movs	r2, #131	@ 0x83
 80017fa:	701a      	strb	r2, [r3, #0]
	    ic[cic].configa.tx_data[1] = 0x01;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	4413      	add	r3, r2
 800180a:	2201      	movs	r2, #1
 800180c:	705a      	strb	r2, [r3, #1]
	    ic[cic].configa.tx_data[2] = 0x00;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	4413      	add	r3, r2
 800181c:	2200      	movs	r2, #0
 800181e:	709a      	strb	r2, [r3, #2]
	    ic[cic].configa.tx_data[3] = 0xCC;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	4413      	add	r3, r2
 800182e:	22cc      	movs	r2, #204	@ 0xcc
 8001830:	70da      	strb	r2, [r3, #3]
	    ic[cic].configa.tx_data[4] = 0x02;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	4413      	add	r3, r2
 8001840:	2202      	movs	r2, #2
 8001842:	711a      	strb	r2, [r3, #4]
	    ic[cic].configa.tx_data[5] = 0x00;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	4413      	add	r3, r2
 8001852:	2200      	movs	r2, #0
 8001854:	715a      	strb	r2, [r3, #5]
	    uint16_t VOVCode = SetOverVoltageThreshold(3.2);
 8001856:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8001910 <ADBMS6830B_init_cfg+0x138>
 800185a:	f7ff ff3d 	bl	80016d8 <SetOverVoltageThreshold>
 800185e:	4603      	mov	r3, r0
 8001860:	81bb      	strh	r3, [r7, #12]
	    uint16_t VUVCode = SetUnderVoltageThreshold(2.0);
 8001862:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001866:	f7ff ff77 	bl	8001758 <SetUnderVoltageThreshold>
 800186a:	4603      	mov	r3, r0
 800186c:	817b      	strh	r3, [r7, #10]
	    ic[cic].configb.tx_data[0] = VUVCode;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	4413      	add	r3, r2
 800187c:	897a      	ldrh	r2, [r7, #10]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	73da      	strb	r2, [r3, #15]
	    ic[cic].configb.tx_data[1] = (((VOVCode & 0x000F) << 4) | ((VUVCode ) >> 8));
 8001882:	89bb      	ldrh	r3, [r7, #12]
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	b25a      	sxtb	r2, r3
 8001888:	897b      	ldrh	r3, [r7, #10]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	b29b      	uxth	r3, r3
 800188e:	b25b      	sxtb	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b259      	sxtb	r1, r3
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800189a:	fb02 f303 	mul.w	r3, r2, r3
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	b2ca      	uxtb	r2, r1
 80018a4:	741a      	strb	r2, [r3, #16]
	    ic[cic].configb.tx_data[2] = ((VOVCode>>4)&0x0FF);
 80018a6:	89bb      	ldrh	r3, [r7, #12]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	b299      	uxth	r1, r3
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	b2ca      	uxtb	r2, r1
 80018bc:	745a      	strb	r2, [r3, #17]
	    ic[cic].configb.tx_data[3] = 0xFF;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	22ff      	movs	r2, #255	@ 0xff
 80018ce:	749a      	strb	r2, [r3, #18]
	    ic[cic].configb.tx_data[4] = 0x00;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	2200      	movs	r2, #0
 80018e0:	74da      	strb	r2, [r3, #19]
	    ic[cic].configb.tx_data[4] = 0x00;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80018e8:	fb02 f303 	mul.w	r3, r2, r3
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	2200      	movs	r2, #0
 80018f2:	74da      	strb	r2, [r3, #19]
	  for(uint8_t cic = 0; cic < total_ic; cic++)
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	3301      	adds	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	429a      	cmp	r2, r3
 8001900:	f4ff af73 	bcc.w	80017ea <ADBMS6830B_init_cfg+0x12>
	  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	404ccccd 	.word	0x404ccccd

08001914 <ADBMS6830B_reset_crc_count>:

/* Helper Function to reset PEC counters */
void ADBMS6830B_reset_crc_count(uint8_t total_ic, //Number of ICs in the system
							 cell_asic *ic //A two dimensional array that stores the data
							 )
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e058      	b.n	80019d8 <ADBMS6830B_reset_crc_count+0xc4>
	{
		ic[current_ic].crc_count.pec_count = 0;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	4413      	add	r3, r2
 8001934:	2200      	movs	r2, #0
 8001936:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
		ic[current_ic].crc_count.cfgr_pec = 0;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	4413      	add	r3, r2
 8001948:	2200      	movs	r2, #0
 800194a:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
		for (int i=0; i<6; i++)
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	e00f      	b.n	8001974 <ADBMS6830B_reset_crc_count+0x60>
		{
			ic[current_ic].crc_count.cell_pec[i]=0;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	441a      	add	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	3370      	adds	r3, #112	@ 0x70
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	2200      	movs	r2, #0
 800196c:	815a      	strh	r2, [r3, #10]
		for (int i=0; i<6; i++)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	3301      	adds	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b05      	cmp	r3, #5
 8001978:	ddec      	ble.n	8001954 <ADBMS6830B_reset_crc_count+0x40>

		}
		for (int i=0; i<4; i++)
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e00f      	b.n	80019a0 <ADBMS6830B_reset_crc_count+0x8c>
		{
			ic[current_ic].crc_count.aux_pec[i]=0;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001986:	fb02 f303 	mul.w	r3, r2, r3
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	441a      	add	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3378      	adds	r3, #120	@ 0x78
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	2200      	movs	r2, #0
 8001998:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<4; i++)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3301      	adds	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	ddec      	ble.n	8001980 <ADBMS6830B_reset_crc_count+0x6c>
		}
		for (int i=0; i<2; i++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	e00f      	b.n	80019cc <ADBMS6830B_reset_crc_count+0xb8>
		{
			ic[current_ic].crc_count.stat_pec[i]=0;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	441a      	add	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	337c      	adds	r3, #124	@ 0x7c
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	2200      	movs	r2, #0
 80019c4:	80da      	strh	r2, [r3, #6]
		for (int i=0; i<2; i++)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3301      	adds	r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	ddec      	ble.n	80019ac <ADBMS6830B_reset_crc_count+0x98>
	for (int current_ic = 0 ; current_ic < total_ic; current_ic++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dba2      	blt.n	8001926 <ADBMS6830B_reset_crc_count+0x12>
		}
	}
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <ADBMS6830B_init_reg_limits>:

/* Initialize the Register limits */
void ADBMS6830B_init_reg_limits(uint8_t total_ic, //The number of ICs in the system
							cell_asic *ic  //A two dimensional array where data will be written
							)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	6039      	str	r1, [r7, #0]
 80019f8:	71fb      	strb	r3, [r7, #7]
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 80019fa:	2300      	movs	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	e03e      	b.n	8001a7e <ADBMS6830B_init_reg_limits+0x90>
    ic[cic].ic_reg.cell_channels = 20;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	2214      	movs	r2, #20
 8001a10:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
    ic[cic].ic_reg.stat_channels = 4; //Doesn't matter?
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	4413      	add	r3, r2
 8001a22:	2204      	movs	r2, #4
 8001a24:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
    ic[cic].ic_reg.aux_channels = 6; //Doesn't matter?
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	2206      	movs	r2, #6
 8001a38:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    ic[cic].ic_reg.num_cv_reg = 6;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	2206      	movs	r2, #6
 8001a4c:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
    ic[cic].ic_reg.num_gpio_reg = 4;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	2204      	movs	r2, #4
 8001a60:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
    ic[cic].ic_reg.num_stat_reg = 5;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	2205      	movs	r2, #5
 8001a74:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
  for (uint8_t cic = 0; cic < total_ic; cic++) {
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3bc      	bcc.n	8001a00 <ADBMS6830B_init_reg_limits+0x12>
  }
}
 8001a86:	bf00      	nop
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <ADBMS6830B_adcv>:
				   uint8_t DCP, //Discharge Permit
				   uint8_t CONT, //Cell Channels to be measured
				   uint8_t RSTF, //Reset Filter
				   uint8_t OW //Open-wire bits
                 )
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	71fb      	strb	r3, [r7, #7]
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71bb      	strb	r3, [r7, #6]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	717b      	strb	r3, [r7, #5]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	713b      	strb	r3, [r7, #4]
	uint8_t cmd[2];

	cmd[0] = 0x02 + RD;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x60 | (CONT << 7) | (DCP << 4) | (RSTF << 2) | OW;
 8001aba:	797b      	ldrb	r3, [r7, #5]
 8001abc:	01db      	lsls	r3, r3, #7
 8001abe:	b25b      	sxtb	r3, r3
 8001ac0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ac4:	b25a      	sxtb	r2, r3
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	b25b      	sxtb	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b25a      	sxtb	r2, r3
 8001ad0:	793b      	ldrb	r3, [r7, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	737b      	strb	r3, [r7, #13]
	cmd_68(cmd);
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fb52 	bl	8001194 <cmd_68>
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}

08001af8 <ADBMS6830B_rdcv>:
*/

uint8_t ADBMS6830B_rdcv(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 8001af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001afc:	b089      	sub	sp, #36	@ 0x24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	6039      	str	r1, [r7, #0]
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	466b      	mov	r3, sp
 8001b08:	461e      	mov	r6, r3
#ifdef READALL
	uint8_t TxSize = 34;
 8001b0a:	2322      	movs	r3, #34	@ 0x22
 8001b0c:	76fb      	strb	r3, [r7, #27]
	uint8_t cell_data[TxSize*total_ic];
 8001b0e:	7efb      	ldrb	r3, [r7, #27]
 8001b10:	79fa      	ldrb	r2, [r7, #7]
 8001b12:	fb02 f103 	mul.w	r1, r2, r3
 8001b16:	1e4b      	subs	r3, r1, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	460a      	mov	r2, r1
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	4690      	mov	r8, r2
 8001b20:	4699      	mov	r9, r3
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b36:	460a      	mov	r2, r1
 8001b38:	2300      	movs	r3, #0
 8001b3a:	4614      	mov	r4, r2
 8001b3c:	461d      	mov	r5, r3
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	00eb      	lsls	r3, r5, #3
 8001b48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b4c:	00e2      	lsls	r2, r4, #3
 8001b4e:	460b      	mov	r3, r1
 8001b50:	3307      	adds	r3, #7
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	ebad 0d03 	sub.w	sp, sp, r3
 8001b5a:	466b      	mov	r3, sp
 8001b5c:	3300      	adds	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
	transmitCMDR(RDCVALL,cell_data,TxSize*total_ic);
 8001b60:	7efa      	ldrb	r2, [r7, #27]
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	fb12 f303 	smulbb	r3, r2, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	6939      	ldr	r1, [r7, #16]
 8001b6e:	200c      	movs	r0, #12
 8001b70:	f7ff fc1c 	bl	80013ac <transmitCMDR>
	for(int icn=0;icn<total_ic;icn++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	e016      	b.n	8001ba8 <ADBMS6830B_rdcv+0xb0>
		memcpy(&(ic[icn].cells.c_codes),cell_data+icn*TxSize,(size_t)TxSize);
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	f103 001e 	add.w	r0, r3, #30
 8001b8c:	7efb      	ldrb	r3, [r7, #27]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	fb02 f303 	mul.w	r3, r2, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4413      	add	r3, r2
 8001b9a:	7efa      	ldrb	r2, [r7, #27]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f005 f814 	bl	8006bca <memcpy>
	for(int icn=0;icn<total_ic;icn++)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dbe4      	blt.n	8001b7a <ADBMS6830B_rdcv+0x82>

	int16_t c_data_pec=pec10_calc(TxSize-2,cell_data);
 8001bb0:	7efb      	ldrb	r3, [r7, #27]
 8001bb2:	3b02      	subs	r3, #2
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	6939      	ldr	r1, [r7, #16]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fa7e 	bl	80010ba <pec10_calc>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	81fb      	strh	r3, [r7, #14]
	int16_t c_rx_pec=*(uint16_t*)(cell_data+TxSize-2);
 8001bc2:	7efb      	ldrb	r3, [r7, #27]
 8001bc4:	3b02      	subs	r3, #2
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4413      	add	r3, r2
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	81bb      	strh	r3, [r7, #12]

	return(c_data_pec!=c_rx_pec);
 8001bce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	bf14      	ite	ne
 8001bda:	2301      	movne	r3, #1
 8001bdc:	2300      	moveq	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	46b5      	mov	sp, r6
		if(c_data_pec!=c_rx_pec)errorCount++;
	}
	return errorCount;
#endif

}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3724      	adds	r7, #36	@ 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001bec <ADBMS6830B_rdsv>:

uint8_t ADBMS6830B_rdsv(uint8_t total_ic, // The number of ICs in the system
                     	   cell_asic *ic // Array of the parsed cell codes
                    	  )
{
 8001bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bf0:	b089      	sub	sp, #36	@ 0x24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	6039      	str	r1, [r7, #0]
 8001bf8:	71fb      	strb	r3, [r7, #7]
 8001bfa:	466b      	mov	r3, sp
 8001bfc:	461e      	mov	r6, r3
#ifdef READALL
	uint8_t TxSize = 34;
 8001bfe:	2322      	movs	r3, #34	@ 0x22
 8001c00:	76fb      	strb	r3, [r7, #27]
	uint8_t cell_data[TxSize*total_ic];
 8001c02:	7efb      	ldrb	r3, [r7, #27]
 8001c04:	79fa      	ldrb	r2, [r7, #7]
 8001c06:	fb02 f103 	mul.w	r1, r2, r3
 8001c0a:	1e4b      	subs	r3, r1, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	460a      	mov	r2, r1
 8001c10:	2300      	movs	r3, #0
 8001c12:	4690      	mov	r8, r2
 8001c14:	4699      	mov	r9, r3
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c2a:	460a      	mov	r2, r1
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	4614      	mov	r4, r2
 8001c30:	461d      	mov	r5, r3
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	00eb      	lsls	r3, r5, #3
 8001c3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c40:	00e2      	lsls	r2, r4, #3
 8001c42:	460b      	mov	r3, r1
 8001c44:	3307      	adds	r3, #7
 8001c46:	08db      	lsrs	r3, r3, #3
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	ebad 0d03 	sub.w	sp, sp, r3
 8001c4e:	466b      	mov	r3, sp
 8001c50:	3300      	adds	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
	transmitCMDR(RDSALL,cell_data,TxSize*total_ic);
 8001c54:	7efa      	ldrb	r2, [r7, #27]
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	fb12 f303 	smulbb	r3, r2, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	6939      	ldr	r1, [r7, #16]
 8001c62:	2010      	movs	r0, #16
 8001c64:	f7ff fba2 	bl	80013ac <transmitCMDR>
	for(int icn=0;icn<total_ic;icn++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	e016      	b.n	8001c9c <ADBMS6830B_rdsv+0xb0>
		memcpy(&(ic[icn].cells.s_codes),cell_data+icn*TxSize,(size_t)34);
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001c74:	fb02 f303 	mul.w	r3, r2, r3
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f103 0042 	add.w	r0, r3, #66	@ 0x42
 8001c80:	7efb      	ldrb	r3, [r7, #27]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	fb02 f303 	mul.w	r3, r2, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	2222      	movs	r2, #34	@ 0x22
 8001c90:	4619      	mov	r1, r3
 8001c92:	f004 ff9a 	bl	8006bca <memcpy>
	for(int icn=0;icn<total_ic;icn++)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbe4      	blt.n	8001c6e <ADBMS6830B_rdsv+0x82>
	uint16_t data_pec=pec10_calc(32,cell_data);
 8001ca4:	6939      	ldr	r1, [r7, #16]
 8001ca6:	2020      	movs	r0, #32
 8001ca8:	f7ff fa07 	bl	80010ba <pec10_calc>
 8001cac:	4603      	mov	r3, r0
 8001cae:	81fb      	strh	r3, [r7, #14]
	uint16_t rx_pec=*(uint16_t*)(cell_data+32);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	8c1b      	ldrh	r3, [r3, #32]
 8001cb4:	81bb      	strh	r3, [r7, #12]

	return(data_pec!=rx_pec);
 8001cb6:	89fa      	ldrh	r2, [r7, #14]
 8001cb8:	89bb      	ldrh	r3, [r7, #12]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	bf14      	ite	ne
 8001cbe:	2301      	movne	r3, #1
 8001cc0:	2300      	moveq	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	46b5      	mov	sp, r6
		int16_t c_rx_pec=*(uint16_t*)(cell_data+TxSize-2);
		if(c_data_pec!=c_rx_pec)errorCount++;
	}
	return errorCount;
#endif
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	@ 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001cd0 <ADBMS6830B_wrALL>:
// ******************************** Temperature ********************************
void ADBMS6830B_wrALL(uint8_t total_ic, //The number of ICs being written to
                      cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                     )
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
	wakeup_sleep(total_ic);
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fa19 	bl	8002116 <wakeup_sleep>
	ADBMS6830B_wrcfga(total_ic, ic);
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	6839      	ldr	r1, [r7, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f83b 	bl	8001d64 <ADBMS6830B_wrcfga>
	wakeup_sleep(total_ic);
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fa10 	bl	8002116 <wakeup_sleep>
	ADBMS6830B_wrcfgb(total_ic, ic);
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	6839      	ldr	r1, [r7, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f8fa 	bl	8001ef4 <ADBMS6830B_wrcfgb>
	//wakeup_sleep(total_ic);
	//ADBMS6830B_wrpwmga(total_ic, ic);
	//wakeup_sleep(total_ic);
	//ADBMS6830B_wrpwmgb(total_ic, ic);
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <ADBMS6830B_rdALL>:
void ADBMS6830B_rdALL(uint8_t total_ic, //The number of ICs being written to
                      cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                     )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
	wakeup_sleep(total_ic);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f9fd 	bl	8002116 <wakeup_sleep>
	ADBMS6830B_rdcfga(total_ic, ic);
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 f885 	bl	8001e30 <ADBMS6830B_rdcfga>
	wakeup_sleep(total_ic);
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f9f4 	bl	8002116 <wakeup_sleep>
	ADBMS6830B_rdcfgb(total_ic, ic);
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	6839      	ldr	r1, [r7, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f93c 	bl	8001fb0 <ADBMS6830B_rdcfgb>
	wakeup_sleep(total_ic);
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f9eb 	bl	8002116 <wakeup_sleep>
	ADBMS6830B_rdpwmga(total_ic, ic);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f96e 	bl	8002026 <ADBMS6830B_rdpwmga>
	wakeup_sleep(total_ic);
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f9e2 	bl	8002116 <wakeup_sleep>
	ADBMS6830B_rdpwmgb(total_ic, ic);
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	6839      	ldr	r1, [r7, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f9a1 	bl	800209e <ADBMS6830B_rdpwmgb>
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <ADBMS6830B_wrcfga>:
/* Write the ADBMS6830B CFGRA */
void ADBMS6830B_wrcfga(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8001d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d68:	b087      	sub	sp, #28
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	6039      	str	r1, [r7, #0]
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	466b      	mov	r3, sp
 8001d74:	461e      	mov	r6, r3
	uint8_t write_buffer[total_ic*6];
 8001d76:	79fa      	ldrb	r2, [r7, #7]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4619      	mov	r1, r3
 8001d82:	1e4b      	subs	r3, r1, #1
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	460a      	mov	r2, r1
 8001d88:	2300      	movs	r3, #0
 8001d8a:	4690      	mov	r8, r2
 8001d8c:	4699      	mov	r9, r3
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001da2:	460a      	mov	r2, r1
 8001da4:	2300      	movs	r3, #0
 8001da6:	4614      	mov	r4, r2
 8001da8:	461d      	mov	r5, r3
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	00eb      	lsls	r3, r5, #3
 8001db4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001db8:	00e2      	lsls	r2, r4, #3
 8001dba:	460b      	mov	r3, r1
 8001dbc:	3307      	adds	r3, #7
 8001dbe:	08db      	lsrs	r3, r3, #3
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	ebad 0d03 	sub.w	sp, sp, r3
 8001dc6:	466b      	mov	r3, sp
 8001dc8:	3300      	adds	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
	uint8_t write_count = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	75fb      	strb	r3, [r7, #23]
	uint8_t c_ic = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	72fb      	strb	r3, [r7, #11]
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	75bb      	strb	r3, [r7, #22]
 8001dd8:	e01c      	b.n	8001e14 <ADBMS6830B_wrcfga+0xb0>
	{
		c_ic = current_ic;
 8001dda:	7dbb      	ldrb	r3, [r7, #22]
 8001ddc:	72fb      	strb	r3, [r7, #11]
		for (uint8_t data = 0; data<6; data++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	757b      	strb	r3, [r7, #21]
 8001de2:	e011      	b.n	8001e08 <ADBMS6830B_wrcfga+0xa4>
		{
			write_buffer[write_count] = ic[c_ic].configa.tx_data[data];
 8001de4:	7afb      	ldrb	r3, [r7, #11]
 8001de6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	18d1      	adds	r1, r2, r3
 8001df2:	7d7a      	ldrb	r2, [r7, #21]
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	5c89      	ldrb	r1, [r1, r2]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	75fb      	strb	r3, [r7, #23]
		for (uint8_t data = 0; data<6; data++)
 8001e02:	7d7b      	ldrb	r3, [r7, #21]
 8001e04:	3301      	adds	r3, #1
 8001e06:	757b      	strb	r3, [r7, #21]
 8001e08:	7d7b      	ldrb	r3, [r7, #21]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d9ea      	bls.n	8001de4 <ADBMS6830B_wrcfga+0x80>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8001e0e:	7dbb      	ldrb	r3, [r7, #22]
 8001e10:	3301      	adds	r3, #1
 8001e12:	75bb      	strb	r3, [r7, #22]
 8001e14:	7dba      	ldrb	r2, [r7, #22]
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d3de      	bcc.n	8001dda <ADBMS6830B_wrcfga+0x76>
		}
	}

	transmitCMDW(WRCFGA,write_buffer);
 8001e1c:	68f9      	ldr	r1, [r7, #12]
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff fadf 	bl	80013e2 <transmitCMDW>
 8001e24:	46b5      	mov	sp, r6
}
 8001e26:	bf00      	nop
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001e30 <ADBMS6830B_rdcfga>:


void ADBMS6830B_rdcfga(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
	uint8_t TxSize = 8;
 8001e3c:	2308      	movs	r3, #8
 8001e3e:	75fb      	strb	r3, [r7, #23]
	uint8_t*cell_data;
	cell_data=(uint8_t*)malloc(TxSize * total_ic * sizeof(uint8_t));
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	79fa      	ldrb	r2, [r7, #7]
 8001e44:	fb02 f303 	mul.w	r3, r2, r3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 fff9 	bl	8005e40 <malloc>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	613b      	str	r3, [r7, #16]

	transmitCMDR(RDCFGA,cell_data,8*total_ic);
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	6939      	ldr	r1, [r7, #16]
 8001e5c:	2002      	movs	r0, #2
 8001e5e:	f7ff faa5 	bl	80013ac <transmitCMDR>
	for(int bank=0;bank<total_ic;bank++){
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	e015      	b.n	8001e94 <ADBMS6830B_rdcfga+0x64>
		memcpy(&(ic[bank].configa.rx_data),cell_data+bank*TxSize,(size_t)8);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	1d98      	adds	r0, r3, #6
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	fb02 f303 	mul.w	r3, r2, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	2208      	movs	r2, #8
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f004 fe9e 	bl	8006bca <memcpy>
	for(int bank=0;bank<total_ic;bank++){
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3301      	adds	r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dbe5      	blt.n	8001e68 <ADBMS6830B_rdcfga+0x38>
	}
	int16_t c_data_pec=pec10_calc(TxSize-2,cell_data);
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	3b02      	subs	r3, #2
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	6939      	ldr	r1, [r7, #16]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f908 	bl	80010ba <pec10_calc>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	81fb      	strh	r3, [r7, #14]
	int16_t c_rx_pec=*(uint16_t*)(cell_data+TxSize-2);
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	3b02      	subs	r3, #2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	81bb      	strh	r3, [r7, #12]
	for(int bank=0;bank<total_ic;bank++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	e010      	b.n	8001ee2 <ADBMS6830B_rdcfga+0xb2>
		ic[bank].configa.rx_pec_match=c_data_pec-c_rx_pec;
 8001ec0:	89fb      	ldrh	r3, [r7, #14]
 8001ec2:	b2d9      	uxtb	r1, r3
 8001ec4:	89bb      	ldrh	r3, [r7, #12]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	f44f 7086 	mov.w	r0, #268	@ 0x10c
 8001ece:	fb00 f303 	mul.w	r3, r0, r3
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	4403      	add	r3, r0
 8001ed6:	1a8a      	subs	r2, r1, r2
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	739a      	strb	r2, [r3, #14]
	for(int bank=0;bank<total_ic;bank++)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	dbea      	blt.n	8001ec0 <ADBMS6830B_rdcfga+0x90>
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <ADBMS6830B_wrcfgb>:
/* Write the ADBMS6830B CFGRB */
void ADBMS6830B_wrcfgb(uint8_t total_ic, //The number of ICs being written to
                    cell_asic ic[] // A two dimensional array of the configuration data that will be written
                   )
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b0c4      	sub	sp, #272	@ 0x110
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4602      	mov	r2, r0
 8001efc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f04:	6019      	str	r1, [r3, #0]
 8001f06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f0a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001f0e:	701a      	strb	r2, [r3, #0]
	uint8_t write_buffer[256];
	uint8_t write_count = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	uint8_t c_ic = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c

	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8001f22:	e031      	b.n	8001f88 <ADBMS6830B_wrcfgb+0x94>
	{
		c_ic = current_ic;
 8001f24:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001f28:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
		for (uint8_t data = 0; data<6; data++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8001f32:	e020      	b.n	8001f76 <ADBMS6830B_wrcfgb+0x82>
		{
			write_buffer[write_count] = ic[c_ic].configb.tx_data[data];
 8001f34:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8001f38:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001f3c:	fb02 f303 	mul.w	r3, r2, r3
 8001f40:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001f44:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	18d1      	adds	r1, r2, r3
 8001f4c:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8001f50:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001f54:	440a      	add	r2, r1
 8001f56:	7bd1      	ldrb	r1, [r2, #15]
 8001f58:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001f5c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001f60:	54d1      	strb	r1, [r2, r3]
			write_count++;
 8001f62:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001f66:	3301      	adds	r3, #1
 8001f68:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		for (uint8_t data = 0; data<6; data++)
 8001f6c:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001f70:	3301      	adds	r3, #1
 8001f72:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8001f76:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d9da      	bls.n	8001f34 <ADBMS6830B_wrcfgb+0x40>
	for (uint8_t current_ic = 0; current_ic<total_ic; current_ic++)
 8001f7e:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001f82:	3301      	adds	r3, #1
 8001f84:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8001f88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f8c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001f90:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d3c4      	bcc.n	8001f24 <ADBMS6830B_wrcfgb+0x30>
		}
	}
	transmitCMDW(WRCFGB,write_buffer);
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	2024      	movs	r0, #36	@ 0x24
 8001fa2:	f7ff fa1e 	bl	80013e2 <transmitCMDW>
}
 8001fa6:	bf00      	nop
 8001fa8:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <ADBMS6830B_rdcfgb>:

void ADBMS6830B_rdcfgb(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
	uint8_t TxSize = 8;
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	74fb      	strb	r3, [r7, #19]
	uint8_t*cell_data;
	cell_data=(uint8_t*)malloc(TxSize * total_ic * sizeof(uint8_t));
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	79fa      	ldrb	r2, [r7, #7]
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 ff39 	bl	8005e40 <malloc>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	60fb      	str	r3, [r7, #12]
	transmitCMDR(RDCFGB,cell_data,8*total_ic);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68f9      	ldr	r1, [r7, #12]
 8001fdc:	2026      	movs	r0, #38	@ 0x26
 8001fde:	f7ff f9e5 	bl	80013ac <transmitCMDR>
	for(int bank=0;bank<total_ic;bank++){
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e015      	b.n	8002014 <ADBMS6830B_rdcfgb+0x64>
		memcpy(&(ic[bank].configa.rx_data),cell_data+bank*TxSize,(size_t)8);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	1d98      	adds	r0, r3, #6
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	461a      	mov	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4413      	add	r3, r2
 8002006:	2208      	movs	r2, #8
 8002008:	4619      	mov	r1, r3
 800200a:	f004 fdde 	bl	8006bca <memcpy>
	for(int bank=0;bank<total_ic;bank++){
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbe5      	blt.n	8001fe8 <ADBMS6830B_rdcfgb+0x38>
	}

}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <ADBMS6830B_rdpwmga>:
	transmitCMDW(WRPWMA,write_buffer);
}
void ADBMS6830B_rdpwmga(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	6039      	str	r1, [r7, #0]
 8002030:	71fb      	strb	r3, [r7, #7]
	uint8_t TxSize = 8;
 8002032:	2308      	movs	r3, #8
 8002034:	74fb      	strb	r3, [r7, #19]
	uint8_t*cell_data;
	cell_data=(uint8_t*)malloc(TxSize * total_ic * sizeof(uint8_t));
 8002036:	7cfb      	ldrb	r3, [r7, #19]
 8002038:	79fa      	ldrb	r2, [r7, #7]
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f003 fefe 	bl	8005e40 <malloc>
 8002044:	4603      	mov	r3, r0
 8002046:	60fb      	str	r3, [r7, #12]
	transmitCMDR(RDPWMA,cell_data,8*total_ic);
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	68f9      	ldr	r1, [r7, #12]
 8002052:	2022      	movs	r0, #34	@ 0x22
 8002054:	f7ff f9aa 	bl	80013ac <transmitCMDR>
	for(int bank=0;bank<total_ic;bank++){
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e016      	b.n	800208c <ADBMS6830B_rdpwmga+0x66>
		memcpy(&(ic[bank].pwm.rx_data),cell_data+bank*TxSize,(size_t)8);
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	4413      	add	r3, r2
 800206c:	f103 00a9 	add.w	r0, r3, #169	@ 0xa9
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	461a      	mov	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4413      	add	r3, r2
 800207e:	2208      	movs	r2, #8
 8002080:	4619      	mov	r1, r3
 8002082:	f004 fda2 	bl	8006bca <memcpy>
	for(int bank=0;bank<total_ic;bank++){
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbe4      	blt.n	800205e <ADBMS6830B_rdpwmga+0x38>
	}

}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <ADBMS6830B_rdpwmgb>:
	transmitCMDW(WRPWMB,write_buffer);
}
void ADBMS6830B_rdpwmgb(uint8_t total_ic, //The number of ICs being written to
                   cell_asic ic[]  // A two dimensional array of the configuration data that will be written
                  )
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b086      	sub	sp, #24
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	6039      	str	r1, [r7, #0]
 80020a8:	71fb      	strb	r3, [r7, #7]
	uint8_t TxSize = 8;
 80020aa:	2308      	movs	r3, #8
 80020ac:	74fb      	strb	r3, [r7, #19]
	uint8_t*cell_data;
	cell_data=(uint8_t*)malloc(TxSize * total_ic * sizeof(uint8_t));
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	79fa      	ldrb	r2, [r7, #7]
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 fec2 	bl	8005e40 <malloc>
 80020bc:	4603      	mov	r3, r0
 80020be:	60fb      	str	r3, [r7, #12]
	transmitCMDR(RDPWMB,cell_data,8*total_ic);
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	68f9      	ldr	r1, [r7, #12]
 80020ca:	2023      	movs	r0, #35	@ 0x23
 80020cc:	f7ff f96e 	bl	80013ac <transmitCMDR>
	for(int bank=0;bank<total_ic;bank++){
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e016      	b.n	8002104 <ADBMS6830B_rdpwmgb+0x66>
		memcpy(&(ic[bank].pwmb.rx_data),cell_data+bank*TxSize,(size_t)8);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	f103 00b8 	add.w	r0, r3, #184	@ 0xb8
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4413      	add	r3, r2
 80020f6:	2208      	movs	r2, #8
 80020f8:	4619      	mov	r1, r3
 80020fa:	f004 fd66 	bl	8006bca <memcpy>
	for(int bank=0;bank<total_ic;bank++){
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	dbe4      	blt.n	80020d6 <ADBMS6830B_rdpwmgb+0x38>
	}

}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <wakeup_sleep>:
	}
	transmitCMDW(CLRFLAG, flagData);
}
/* Generic wakeup command to wake the ADBMS6830B from sleep state */
void wakeup_sleep(uint8_t total_ic) //Number of ICs in the system
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 1; i++) {
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e016      	b.n	8002154 <wakeup_sleep+0x3e>
		uint8_t nops = 10;
 8002126:	230a      	movs	r3, #10
 8002128:	72fb      	strb	r3, [r7, #11]
		FEB_cs_low();
 800212a:	f000 f83b 	bl	80021a4 <FEB_cs_low>
		while(nops-->0);
 800212e:	bf00      	nop
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	1e5a      	subs	r2, r3, #1
 8002134:	72fa      	strb	r2, [r7, #11]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1fa      	bne.n	8002130 <wakeup_sleep+0x1a>
		FEB_cs_high();
 800213a:	f000 f83f 	bl	80021bc <FEB_cs_high>
		nops=200;
 800213e:	23c8      	movs	r3, #200	@ 0xc8
 8002140:	72fb      	strb	r3, [r7, #11]
		while(nops-->0);
 8002142:	bf00      	nop
 8002144:	7afb      	ldrb	r3, [r7, #11]
 8002146:	1e5a      	subs	r2, r3, #1
 8002148:	72fa      	strb	r2, [r7, #11]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1fa      	bne.n	8002144 <wakeup_sleep+0x2e>
	for (int i = 0; i < 1; i++) {
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3301      	adds	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	dde5      	ble.n	8002126 <wakeup_sleep+0x10>
	}
}
 800215a:	bf00      	nop
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <FEB_Config_Get_Cell_Min_Voltage_mV>:
	}
}

/* ******** Interface ******** */

uint16_t FEB_Config_Get_Cell_Min_Voltage_mV(void) {
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
	//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
	uint16_t value = cell_min_voltage_mV;
 800216a:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <FEB_Config_Get_Cell_Min_Voltage_mV+0x1c>)
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	80fb      	strh	r3, [r7, #6]
	//osMutexRelease(FEB_SM_LockHandle);
	return value;
 8002170:	88fb      	ldrh	r3, [r7, #6]
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000694 	.word	0x20000694

08002184 <FEB_Config_Get_Cell_Max_Voltage_mV>:

uint16_t FEB_Config_Get_Cell_Max_Voltage_mV(void) {
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
	//while (osMutexAcquire(FEB_SM_LockHandle, UINT32_MAX) != osOK);
	uint16_t value = cell_max_voltage_mV;
 800218a:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <FEB_Config_Get_Cell_Max_Voltage_mV+0x1c>)
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	80fb      	strh	r3, [r7, #6]
	//osMutexRelease(FEB_SM_LockHandle);
	return value;
 8002190:	88fb      	ldrh	r3, [r7, #6]
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000696 	.word	0x20000696

080021a4 <FEB_cs_low>:

void FEB_delay_m(uint16_t milli) {
	HAL_Delay(milli);
}

void FEB_cs_low() {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2140      	movs	r1, #64	@ 0x40
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <FEB_cs_low+0x14>)
 80021ae:	f001 fa33 	bl	8003618 <HAL_GPIO_WritePin>
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40020400 	.word	0x40020400

080021bc <FEB_cs_high>:

void FEB_cs_high() {
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80021c0:	2201      	movs	r2, #1
 80021c2:	2140      	movs	r1, #64	@ 0x40
 80021c4:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <FEB_cs_high+0x14>)
 80021c6:	f001 fa27 	bl	8003618 <HAL_GPIO_WritePin>
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40020400 	.word	0x40020400

080021d4 <FEB_spi_write_array>:
void FEB_spi_write_array(
		uint16_t size,                     /*Option: Number of bytes to be written on the SPI port*/
		uint8_t *tx_Data                       /*Array of bytes to be written on the SPI port*/
		)
		{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	80fb      	strh	r3, [r7, #6]
		  HAL_SPI_Transmit(&hspi1, tx_Data, size, HAL_MAX_DELAY); /* SPI1 , data, size, timeout */
 80021e0:	88fa      	ldrh	r2, [r7, #6]
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	4803      	ldr	r0, [pc, #12]	@ (80021f8 <FEB_spi_write_array+0x24>)
 80021ea:	f002 fa16 	bl	800461a <HAL_SPI_Transmit>
		}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000714 	.word	0x20000714

080021fc <FEB_spi_write_read>:
		//catch error
	}
	return data;
}

void FEB_spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	461a      	mov	r2, r3
 8002208:	460b      	mov	r3, r1
 800220a:	72fb      	strb	r3, [r7, #11]
 800220c:	4613      	mov	r3, r2
 800220e:	72bb      	strb	r3, [r7, #10]
	if(HAL_SPI_Transmit(&hspi1,tx_Data,tx_len,HAL_MAX_DELAY) != HAL_OK){
 8002210:	7afb      	ldrb	r3, [r7, #11]
 8002212:	b29a      	uxth	r2, r3
 8002214:	f04f 33ff 	mov.w	r3, #4294967295
 8002218:	68f9      	ldr	r1, [r7, #12]
 800221a:	4807      	ldr	r0, [pc, #28]	@ (8002238 <FEB_spi_write_read+0x3c>)
 800221c:	f002 f9fd 	bl	800461a <HAL_SPI_Transmit>
		//catch error
	}
	if(HAL_SPI_Receive(&hspi1,rx_data,rx_len,HAL_MAX_DELAY) != HAL_OK){
 8002220:	7abb      	ldrb	r3, [r7, #10]
 8002222:	b29a      	uxth	r2, r3
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4803      	ldr	r0, [pc, #12]	@ (8002238 <FEB_spi_write_read+0x3c>)
 800222c:	f002 fb39 	bl	80048a2 <HAL_SPI_Receive>
		//catch error
	}
	return;
 8002230:	bf00      	nop
}
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000714 	.word	0x20000714

0800223c <FEB_Main_Setup>:
#include "FEB_Main.h"


// ******************************** Functions ********************************

void FEB_Main_Setup() {
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	//SM setup
	FEB_ADBMS_Init();
 8002240:	f7ff f918 	bl	8001474 <FEB_ADBMS_Init>
	//FEB_SM_Init();
	//FEB_CAN_Init();
	//IVT Setup
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}

08002248 <FEB_Task_ADBMS>:

void FEB_Task_ADBMS() {
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	FEB_ADBMS_Voltage_Process();
 800224c:	f7ff f932 	bl	80014b4 <FEB_ADBMS_Voltage_Process>
	//FEB_ADBMS_Temperature_Process();
	HAL_Delay(200);
 8002250:	20c8      	movs	r0, #200	@ 0xc8
 8002252:	f000 fe4b 	bl	8002eec <HAL_Delay>
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <FEB_ADBMS_UART_Transmit>:
// **************************************** Global Variables ********************************

static uint8_t counter = 0;

// **************************************** Functions ****************************************
void FEB_ADBMS_UART_Transmit(accumulator_t* FEB_ACC) {
 800225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002260:	b0ad      	sub	sp, #180	@ 0xb4
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
	int NUMLINES=3;
 8002266:	2303      	movs	r3, #3
 8002268:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 800226c:	2300      	movs	r3, #0
 800226e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8002272:	e166      	b.n	8002542 <FEB_ADBMS_UART_Transmit+0x2e6>
 8002274:	466b      	mov	r3, sp
 8002276:	60bb      	str	r3, [r7, #8]
		char UART_line[NUMLINES][32*FEB_NUM_CELLS_PER_IC*FEB_NUM_ICPBANK];
 8002278:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800227c:	1e4b      	subs	r3, r1, #1
 800227e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002282:	460a      	mov	r2, r1
 8002284:	2300      	movs	r3, #0
 8002286:	4614      	mov	r4, r2
 8002288:	461d      	mov	r5, r3
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	036b      	lsls	r3, r5, #13
 8002294:	ea43 43d4 	orr.w	r3, r3, r4, lsr #19
 8002298:	0362      	lsls	r2, r4, #13
 800229a:	460a      	mov	r2, r1
 800229c:	2300      	movs	r3, #0
 800229e:	4690      	mov	r8, r2
 80022a0:	4699      	mov	r9, r3
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	ea4f 3349 	mov.w	r3, r9, lsl #13
 80022ae:	ea43 43d8 	orr.w	r3, r3, r8, lsr #19
 80022b2:	ea4f 3248 	mov.w	r2, r8, lsl #13
 80022b6:	460b      	mov	r3, r1
 80022b8:	029b      	lsls	r3, r3, #10
 80022ba:	3307      	adds	r3, #7
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	ebad 0d03 	sub.w	sp, sp, r3
 80022c4:	466b      	mov	r3, sp
 80022c6:	3300      	adds	r3, #0
 80022c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		int offset[NUMLINES];
 80022cc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80022d0:	1e4b      	subs	r3, r1, #1
 80022d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022d6:	460a      	mov	r2, r1
 80022d8:	2300      	movs	r3, #0
 80022da:	4692      	mov	sl, r2
 80022dc:	469b      	mov	fp, r3
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80022ea:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80022ee:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80022f2:	460a      	mov	r2, r1
 80022f4:	2300      	movs	r3, #0
 80022f6:	603a      	str	r2, [r7, #0]
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	0143      	lsls	r3, r0, #5
 8002306:	6838      	ldr	r0, [r7, #0]
 8002308:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800230c:	6838      	ldr	r0, [r7, #0]
 800230e:	0142      	lsls	r2, r0, #5
 8002310:	460b      	mov	r3, r1
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	3307      	adds	r3, #7
 8002316:	08db      	lsrs	r3, r3, #3
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	ebad 0d03 	sub.w	sp, sp, r3
 800231e:	466b      	mov	r3, sp
 8002320:	3303      	adds	r3, #3
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		offset[0]=sprintf((char*)(UART_line[0]),"|Bnk %d|",bank);
 800232a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800232e:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 8002332:	4993      	ldr	r1, [pc, #588]	@ (8002580 <FEB_ADBMS_UART_Transmit+0x324>)
 8002334:	4618      	mov	r0, r3
 8002336:	f004 fb5b 	bl	80069f0 <siprintf>
 800233a:	4602      	mov	r2, r0
 800233c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002340:	601a      	str	r2, [r3, #0]
		offset[1]=sprintf((char*)(UART_line[1]),"|Vlt C|");
 8002342:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002346:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800234a:	498e      	ldr	r1, [pc, #568]	@ (8002584 <FEB_ADBMS_UART_Transmit+0x328>)
 800234c:	4618      	mov	r0, r3
 800234e:	f004 fb4f 	bl	80069f0 <siprintf>
 8002352:	4602      	mov	r2, r0
 8002354:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002358:	605a      	str	r2, [r3, #4]
		offset[2]=sprintf((char*)(UART_line[2]),"|Vlt S|");
 800235a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800235e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002362:	4989      	ldr	r1, [pc, #548]	@ (8002588 <FEB_ADBMS_UART_Transmit+0x32c>)
 8002364:	4618      	mov	r0, r3
 8002366:	f004 fb43 	bl	80069f0 <siprintf>
 800236a:	4602      	mov	r2, r0
 800236c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002370:	609a      	str	r2, [r3, #8]
		//offset[3]=sprintf((char*)(UART_line[3]),"|Tmp 1|");
		//offset[4]=sprintf((char*)(UART_line[4]),"|Tmp 2|");
		//offset[4]=sprintf((char*)(UART_line[5]),"|PWM  |");

		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_IC*FEB_NUM_ICPBANK; cell++) {
 8002372:	2300      	movs	r3, #0
 8002374:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8002378:	e074      	b.n	8002464 <FEB_ADBMS_UART_Transmit+0x208>
			offset[0]+=sprintf(((char*)(UART_line[0]) + offset[0]), (cell>=10)?"Cell  %d|":"Cell   %d|",cell);
 800237a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800237e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	1898      	adds	r0, r3, r2
 8002386:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800238a:	2b09      	cmp	r3, #9
 800238c:	d901      	bls.n	8002392 <FEB_ADBMS_UART_Transmit+0x136>
 800238e:	4b7f      	ldr	r3, [pc, #508]	@ (800258c <FEB_ADBMS_UART_Transmit+0x330>)
 8002390:	e000      	b.n	8002394 <FEB_ADBMS_UART_Transmit+0x138>
 8002392:	4b7f      	ldr	r3, [pc, #508]	@ (8002590 <FEB_ADBMS_UART_Transmit+0x334>)
 8002394:	f897 20ae 	ldrb.w	r2, [r7, #174]	@ 0xae
 8002398:	4619      	mov	r1, r3
 800239a:	f004 fb29 	bl	80069f0 <siprintf>
 800239e:	4602      	mov	r2, r0
 80023a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	441a      	add	r2, r3
 80023a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023ac:	601a      	str	r2, [r3, #0]
			offset[1]+=sprintf(((char*)(UART_line[1]) + offset[1]), "%.6f|",FEB_ACC->banks[bank].cells[cell].voltage_V);
 80023ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80023ba:	6852      	ldr	r2, [r2, #4]
 80023bc:	189e      	adds	r6, r3, r2
 80023be:	f897 00af 	ldrb.w	r0, [r7, #175]	@ 0xaf
 80023c2:	f897 20ae 	ldrb.w	r2, [r7, #174]	@ 0xae
 80023c6:	68f9      	ldr	r1, [r7, #12]
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	f44f 7221 	mov.w	r2, #644	@ 0x284
 80023d4:	fb00 f202 	mul.w	r2, r0, r2
 80023d8:	4413      	add	r3, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe f8d0 	bl	8000588 <__aeabi_f2d>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4969      	ldr	r1, [pc, #420]	@ (8002594 <FEB_ADBMS_UART_Transmit+0x338>)
 80023ee:	4630      	mov	r0, r6
 80023f0:	f004 fafe 	bl	80069f0 <siprintf>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	441a      	add	r2, r3
 80023fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002402:	605a      	str	r2, [r3, #4]
			offset[2]+=sprintf(((char*)(UART_line[2]) + offset[2]), "%.6f|",FEB_ACC->banks[bank].cells[cell].voltage_S);
 8002404:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800240c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002410:	6892      	ldr	r2, [r2, #8]
 8002412:	189e      	adds	r6, r3, r2
 8002414:	f897 00af 	ldrb.w	r0, [r7, #175]	@ 0xaf
 8002418:	f897 20ae 	ldrb.w	r2, [r7, #174]	@ 0xae
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	f44f 7221 	mov.w	r2, #644	@ 0x284
 800242a:	fb00 f202 	mul.w	r2, r0, r2
 800242e:	4413      	add	r3, r2
 8002430:	440b      	add	r3, r1
 8002432:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f8a5 	bl	8000588 <__aeabi_f2d>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4954      	ldr	r1, [pc, #336]	@ (8002594 <FEB_ADBMS_UART_Transmit+0x338>)
 8002444:	4630      	mov	r0, r6
 8002446:	f004 fad3 	bl	80069f0 <siprintf>
 800244a:	4602      	mov	r2, r0
 800244c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	441a      	add	r2, r3
 8002454:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002458:	609a      	str	r2, [r3, #8]
		for (uint8_t cell = 0; cell < FEB_NUM_CELLS_PER_IC*FEB_NUM_ICPBANK; cell++) {
 800245a:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800245e:	3301      	adds	r3, #1
 8002460:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8002464:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8002468:	2b1f      	cmp	r3, #31
 800246a:	d986      	bls.n	800237a <FEB_ADBMS_UART_Transmit+0x11e>
			//offset[3]+=sprintf(((char*)(UART_line[3]) + offset[3]), "%.6f|",FEB_ACC.banks[bank].temp_sensor_readings_V[cell]); // @suppress("Float formatting support")
			//offset[4]+=sprintf(((char*)(UART_line[4]) + offset[4]), "%.6f|",FEB_ACC.banks[bank].temp_sensor_readings_V[cell]);
			//offset[5]+=sprintf(((char*)(UART_line[4]) + offset[4]), "%X|",FEB_ACC.banks[bank].temp_sensor_readings_V[cell+16]);
		}
		offset[NUMLINES-1]+=sprintf(((char*)(UART_line[NUMLINES-1]) + offset[NUMLINES-1]), "\n\r");
 800246c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002470:	3b01      	subs	r3, #1
 8002472:	029b      	lsls	r3, r3, #10
 8002474:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002478:	4413      	add	r3, r2
 800247a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800247e:	1e51      	subs	r1, r2, #1
 8002480:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002484:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002488:	4413      	add	r3, r2
 800248a:	4943      	ldr	r1, [pc, #268]	@ (8002598 <FEB_ADBMS_UART_Transmit+0x33c>)
 800248c:	4618      	mov	r0, r3
 800248e:	f004 faaf 	bl	80069f0 <siprintf>
 8002492:	4601      	mov	r1, r0
 8002494:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002498:	1e5a      	subs	r2, r3, #1
 800249a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800249e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80024a6:	3a01      	subs	r2, #1
 80024a8:	4419      	add	r1, r3
 80024aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int line=0;line<NUMLINES;line++){
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024b8:	e036      	b.n	8002528 <FEB_ADBMS_UART_Transmit+0x2cc>
			offset[line]+=sprintf(((char*)(UART_line[line]) + offset[line]), "\n\r") ;
 80024ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024be:	029b      	lsls	r3, r3, #10
 80024c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80024c4:	4413      	add	r3, r2
 80024c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80024ca:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80024ce:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80024d2:	4413      	add	r3, r2
 80024d4:	4930      	ldr	r1, [pc, #192]	@ (8002598 <FEB_ADBMS_UART_Transmit+0x33c>)
 80024d6:	4618      	mov	r0, r3
 80024d8:	f004 fa8a 	bl	80069f0 <siprintf>
 80024dc:	4601      	mov	r1, r0
 80024de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80024e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ea:	4419      	add	r1, r3
 80024ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024f0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80024f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			HAL_UART_Transmit(&huart2, (uint8_t*) UART_line[line], offset[line]+1, 100);
 80024f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024fc:	029b      	lsls	r3, r3, #10
 80024fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002502:	18d1      	adds	r1, r2, r3
 8002504:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002508:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	b29b      	uxth	r3, r3
 8002512:	3301      	adds	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	2364      	movs	r3, #100	@ 0x64
 8002518:	4820      	ldr	r0, [pc, #128]	@ (800259c <FEB_ADBMS_UART_Transmit+0x340>)
 800251a:	f003 f8b9 	bl	8005690 <HAL_UART_Transmit>
		for(int line=0;line<NUMLINES;line++){
 800251e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002522:	3301      	adds	r3, #1
 8002524:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002528:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800252c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002530:	429a      	cmp	r2, r3
 8002532:	dbc2      	blt.n	80024ba <FEB_ADBMS_UART_Transmit+0x25e>
 8002534:	f8d7 d008 	ldr.w	sp, [r7, #8]
	for (uint8_t bank = 0; bank < FEB_NUM_BANKS; bank++) {
 8002538:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800253c:	3301      	adds	r3, #1
 800253e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8002542:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002546:	2b00      	cmp	r3, #0
 8002548:	f43f ae94 	beq.w	8002274 <FEB_ADBMS_UART_Transmit+0x18>
		}

	}
	char UART_line[128];
	size_t len =sprintf( (UART_line) , "------------------------------------------------------------------------------------------------\n\r\n\r");
 800254c:	f107 0310 	add.w	r3, r7, #16
 8002550:	4913      	ldr	r1, [pc, #76]	@ (80025a0 <FEB_ADBMS_UART_Transmit+0x344>)
 8002552:	4618      	mov	r0, r3
 8002554:	f004 fa4c 	bl	80069f0 <siprintf>
 8002558:	4603      	mov	r3, r0
 800255a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	HAL_UART_Transmit(&huart2, (uint8_t*) UART_line, len+1, 100);
 800255e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002562:	b29b      	uxth	r3, r3
 8002564:	3301      	adds	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	f107 0110 	add.w	r1, r7, #16
 800256c:	2364      	movs	r3, #100	@ 0x64
 800256e:	480b      	ldr	r0, [pc, #44]	@ (800259c <FEB_ADBMS_UART_Transmit+0x340>)
 8002570:	f003 f88e 	bl	8005690 <HAL_UART_Transmit>
}
 8002574:	bf00      	nop
 8002576:	37b4      	adds	r7, #180	@ 0xb4
 8002578:	46bd      	mov	sp, r7
 800257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800257e:	bf00      	nop
 8002580:	08008b60 	.word	0x08008b60
 8002584:	08008b6c 	.word	0x08008b6c
 8002588:	08008b74 	.word	0x08008b74
 800258c:	08008b7c 	.word	0x08008b7c
 8002590:	08008b88 	.word	0x08008b88
 8002594:	08008b94 	.word	0x08008b94
 8002598:	08008b9c 	.word	0x08008b9c
 800259c:	2000076c 	.word	0x2000076c
 80025a0:	08008ba0 	.word	0x08008ba0

080025a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025a8:	f000 fc5e 	bl	8002e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ac:	f000 f810 	bl	80025d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b0:	f000 f93c 	bl	800282c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025b4:	f000 f910 	bl	80027d8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80025b8:	f000 f8d8 	bl	800276c <MX_SPI1_Init>
  MX_CAN1_Init();
 80025bc:	f000 f874 	bl	80026a8 <MX_CAN1_Init>
  MX_I2C1_Init();
 80025c0:	f000 f8a6 	bl	8002710 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  FEB_Main_Setup();
 80025c4:	f7ff fe3a 	bl	800223c <FEB_Main_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FEB_Task_ADBMS();
 80025c8:	f7ff fe3e 	bl	8002248 <FEB_Task_ADBMS>
 80025cc:	e7fc      	b.n	80025c8 <main+0x24>
	...

080025d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b094      	sub	sp, #80	@ 0x50
 80025d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d6:	f107 031c 	add.w	r3, r7, #28
 80025da:	2234      	movs	r2, #52	@ 0x34
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f004 fa69 	bl	8006ab6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	4b29      	ldr	r3, [pc, #164]	@ (80026a0 <SystemClock_Config+0xd0>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	4a28      	ldr	r2, [pc, #160]	@ (80026a0 <SystemClock_Config+0xd0>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002602:	6413      	str	r3, [r2, #64]	@ 0x40
 8002604:	4b26      	ldr	r3, [pc, #152]	@ (80026a0 <SystemClock_Config+0xd0>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002610:	2300      	movs	r3, #0
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4b23      	ldr	r3, [pc, #140]	@ (80026a4 <SystemClock_Config+0xd4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a22      	ldr	r2, [pc, #136]	@ (80026a4 <SystemClock_Config+0xd4>)
 800261a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <SystemClock_Config+0xd4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800262c:	2301      	movs	r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002630:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002636:	2302      	movs	r3, #2
 8002638:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800263a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800263e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002640:	2304      	movs	r3, #4
 8002642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002644:	23a0      	movs	r3, #160	@ 0xa0
 8002646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002648:	2302      	movs	r3, #2
 800264a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800264c:	2302      	movs	r3, #2
 800264e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002650:	2302      	movs	r3, #2
 8002652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002654:	f107 031c 	add.w	r3, r7, #28
 8002658:	4618      	mov	r0, r3
 800265a:	f001 fcb7 	bl	8003fcc <HAL_RCC_OscConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002664:	f000 f9c8 	bl	80029f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002668:	230f      	movs	r3, #15
 800266a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800266c:	2302      	movs	r3, #2
 800266e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002674:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800267a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800267e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	2105      	movs	r1, #5
 8002686:	4618      	mov	r0, r3
 8002688:	f001 f924 	bl	80038d4 <HAL_RCC_ClockConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002692:	f000 f9b1 	bl	80029f8 <Error_Handler>
  }
}
 8002696:	bf00      	nop
 8002698:	3750      	adds	r7, #80	@ 0x50
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000

080026a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80026ac:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026ae:	4a17      	ldr	r2, [pc, #92]	@ (800270c <MX_CAN1_Init+0x64>)
 80026b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80026b2:	4b15      	ldr	r3, [pc, #84]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026b4:	2210      	movs	r2, #16
 80026b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80026b8:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80026be:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80026c4:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80026ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80026d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80026d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026d8:	2200      	movs	r2, #0
 80026da:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80026dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026de:	2200      	movs	r2, #0
 80026e0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80026e2:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80026e8:	4b07      	ldr	r3, [pc, #28]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80026ee:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80026f4:	4804      	ldr	r0, [pc, #16]	@ (8002708 <MX_CAN1_Init+0x60>)
 80026f6:	f000 fc1d 	bl	8002f34 <HAL_CAN_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8002700:	f000 f97a 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000698 	.word	0x20000698
 800270c:	40006400 	.word	0x40006400

08002710 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002714:	4b12      	ldr	r3, [pc, #72]	@ (8002760 <MX_I2C1_Init+0x50>)
 8002716:	4a13      	ldr	r2, [pc, #76]	@ (8002764 <MX_I2C1_Init+0x54>)
 8002718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800271a:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <MX_I2C1_Init+0x50>)
 800271c:	4a12      	ldr	r2, [pc, #72]	@ (8002768 <MX_I2C1_Init+0x58>)
 800271e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002720:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <MX_I2C1_Init+0x50>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002726:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <MX_I2C1_Init+0x50>)
 8002728:	2200      	movs	r2, #0
 800272a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <MX_I2C1_Init+0x50>)
 800272e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002732:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002734:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <MX_I2C1_Init+0x50>)
 8002736:	2200      	movs	r2, #0
 8002738:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800273a:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <MX_I2C1_Init+0x50>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002740:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <MX_I2C1_Init+0x50>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <MX_I2C1_Init+0x50>)
 8002748:	2200      	movs	r2, #0
 800274a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800274c:	4804      	ldr	r0, [pc, #16]	@ (8002760 <MX_I2C1_Init+0x50>)
 800274e:	f000 ff7d 	bl	800364c <HAL_I2C_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002758:	f000 f94e 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200006c0 	.word	0x200006c0
 8002764:	40005400 	.word	0x40005400
 8002768:	000186a0 	.word	0x000186a0

0800276c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002770:	4b17      	ldr	r3, [pc, #92]	@ (80027d0 <MX_SPI1_Init+0x64>)
 8002772:	4a18      	ldr	r2, [pc, #96]	@ (80027d4 <MX_SPI1_Init+0x68>)
 8002774:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002776:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <MX_SPI1_Init+0x64>)
 8002778:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800277c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800277e:	4b14      	ldr	r3, [pc, #80]	@ (80027d0 <MX_SPI1_Init+0x64>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002784:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <MX_SPI1_Init+0x64>)
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800278a:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <MX_SPI1_Init+0x64>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002790:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <MX_SPI1_Init+0x64>)
 8002792:	2200      	movs	r2, #0
 8002794:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <MX_SPI1_Init+0x64>)
 8002798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800279c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800279e:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <MX_SPI1_Init+0x64>)
 80027a0:	2228      	movs	r2, #40	@ 0x28
 80027a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027a4:	4b0a      	ldr	r3, [pc, #40]	@ (80027d0 <MX_SPI1_Init+0x64>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <MX_SPI1_Init+0x64>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b0:	4b07      	ldr	r3, [pc, #28]	@ (80027d0 <MX_SPI1_Init+0x64>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027b6:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <MX_SPI1_Init+0x64>)
 80027b8:	220a      	movs	r2, #10
 80027ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027bc:	4804      	ldr	r0, [pc, #16]	@ (80027d0 <MX_SPI1_Init+0x64>)
 80027be:	f001 fea3 	bl	8004508 <HAL_SPI_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027c8:	f000 f916 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000714 	.word	0x20000714
 80027d4:	40013000 	.word	0x40013000

080027d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027dc:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <MX_USART2_UART_Init+0x4c>)
 80027de:	4a12      	ldr	r2, [pc, #72]	@ (8002828 <MX_USART2_UART_Init+0x50>)
 80027e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <MX_USART2_UART_Init+0x4c>)
 80027e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <MX_USART2_UART_Init+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <MX_USART2_UART_Init+0x4c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <MX_USART2_UART_Init+0x4c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027fc:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <MX_USART2_UART_Init+0x4c>)
 80027fe:	220c      	movs	r2, #12
 8002800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <MX_USART2_UART_Init+0x4c>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <MX_USART2_UART_Init+0x4c>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800280e:	4805      	ldr	r0, [pc, #20]	@ (8002824 <MX_USART2_UART_Init+0x4c>)
 8002810:	f002 feee 	bl	80055f0 <HAL_UART_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800281a:	f000 f8ed 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000076c 	.word	0x2000076c
 8002828:	40004400 	.word	0x40004400

0800282c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	@ 0x28
 8002830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	4b5e      	ldr	r3, [pc, #376]	@ (80029c0 <MX_GPIO_Init+0x194>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	4a5d      	ldr	r2, [pc, #372]	@ (80029c0 <MX_GPIO_Init+0x194>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6313      	str	r3, [r2, #48]	@ 0x30
 8002852:	4b5b      	ldr	r3, [pc, #364]	@ (80029c0 <MX_GPIO_Init+0x194>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b57      	ldr	r3, [pc, #348]	@ (80029c0 <MX_GPIO_Init+0x194>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	4a56      	ldr	r2, [pc, #344]	@ (80029c0 <MX_GPIO_Init+0x194>)
 8002868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800286c:	6313      	str	r3, [r2, #48]	@ 0x30
 800286e:	4b54      	ldr	r3, [pc, #336]	@ (80029c0 <MX_GPIO_Init+0x194>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	4b50      	ldr	r3, [pc, #320]	@ (80029c0 <MX_GPIO_Init+0x194>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	4a4f      	ldr	r2, [pc, #316]	@ (80029c0 <MX_GPIO_Init+0x194>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6313      	str	r3, [r2, #48]	@ 0x30
 800288a:	4b4d      	ldr	r3, [pc, #308]	@ (80029c0 <MX_GPIO_Init+0x194>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	4b49      	ldr	r3, [pc, #292]	@ (80029c0 <MX_GPIO_Init+0x194>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	4a48      	ldr	r2, [pc, #288]	@ (80029c0 <MX_GPIO_Init+0x194>)
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a6:	4b46      	ldr	r3, [pc, #280]	@ (80029c0 <MX_GPIO_Init+0x194>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	4b42      	ldr	r3, [pc, #264]	@ (80029c0 <MX_GPIO_Init+0x194>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	4a41      	ldr	r2, [pc, #260]	@ (80029c0 <MX_GPIO_Init+0x194>)
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c2:	4b3f      	ldr	r3, [pc, #252]	@ (80029c0 <MX_GPIO_Init+0x194>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INDICATOR_Pin|BMS_IND_Pin|BMS_A_Pin|PC_AIR_Pin
 80028ce:	2200      	movs	r2, #0
 80028d0:	f242 010f 	movw	r1, #8207	@ 0x200f
 80028d4:	483b      	ldr	r0, [pc, #236]	@ (80029c4 <MX_GPIO_Init+0x198>)
 80028d6:	f000 fe9f 	bl	8003618 <HAL_GPIO_WritePin>
                          |CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80028da:	2200      	movs	r2, #0
 80028dc:	2101      	movs	r1, #1
 80028de:	483a      	ldr	r0, [pc, #232]	@ (80029c8 <MX_GPIO_Init+0x19c>)
 80028e0:	f000 fe9a 	bl	8003618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PC_REL_GPIO_Port, PC_REL_Pin, GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2104      	movs	r1, #4
 80028e8:	4838      	ldr	r0, [pc, #224]	@ (80029cc <MX_GPIO_Init+0x1a0>)
 80028ea:	f000 fe95 	bl	8003618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80028ee:	2201      	movs	r2, #1
 80028f0:	2140      	movs	r1, #64	@ 0x40
 80028f2:	4837      	ldr	r0, [pc, #220]	@ (80029d0 <MX_GPIO_Init+0x1a4>)
 80028f4:	f000 fe90 	bl	8003618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INDICATOR_Pin BMS_IND_Pin BMS_A_Pin PC_AIR_Pin */
  GPIO_InitStruct.Pin = INDICATOR_Pin|BMS_IND_Pin|BMS_A_Pin|PC_AIR_Pin;
 80028f8:	f242 0307 	movw	r3, #8199	@ 0x2007
 80028fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fe:	2301      	movs	r3, #1
 8002900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	482c      	ldr	r0, [pc, #176]	@ (80029c4 <MX_GPIO_Init+0x198>)
 8002912:	f000 fced 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002916:	2308      	movs	r3, #8
 8002918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291a:	2301      	movs	r3, #1
 800291c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800291e:	2301      	movs	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002922:	2301      	movs	r3, #1
 8002924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	4825      	ldr	r0, [pc, #148]	@ (80029c4 <MX_GPIO_Init+0x198>)
 800292e:	f000 fcdf 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002932:	2301      	movs	r3, #1
 8002934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002936:	2301      	movs	r3, #1
 8002938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	4619      	mov	r1, r3
 8002948:	481f      	ldr	r0, [pc, #124]	@ (80029c8 <MX_GPIO_Init+0x19c>)
 800294a:	f000 fcd1 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR__SENSE_Pin AIR__SENSEC5_Pin SHS_IMD_Pin SHS_TSMS_Pin
                           SHS_IN_Pin */
  GPIO_InitStruct.Pin = AIR__SENSE_Pin|AIR__SENSEC5_Pin|SHS_IMD_Pin|SHS_TSMS_Pin
 800294e:	f641 4330 	movw	r3, #7216	@ 0x1c30
 8002952:	617b      	str	r3, [r7, #20]
                          |SHS_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002954:	2300      	movs	r3, #0
 8002956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4619      	mov	r1, r3
 8002962:	4818      	ldr	r0, [pc, #96]	@ (80029c4 <MX_GPIO_Init+0x198>)
 8002964:	f000 fcc4 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WAKE_Pin INTR_Pin RST_Pin Alert_Pin */
  GPIO_InitStruct.Pin = WAKE_Pin|INTR_Pin|RST_Pin|Alert_Pin;
 8002968:	23a3      	movs	r3, #163	@ 0xa3
 800296a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4619      	mov	r1, r3
 800297a:	4815      	ldr	r0, [pc, #84]	@ (80029d0 <MX_GPIO_Init+0x1a4>)
 800297c:	f000 fcb8 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC_REL_Pin */
  GPIO_InitStruct.Pin = PC_REL_Pin;
 8002980:	2304      	movs	r3, #4
 8002982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002984:	2301      	movs	r3, #1
 8002986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PC_REL_GPIO_Port, &GPIO_InitStruct);
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	4619      	mov	r1, r3
 8002996:	480d      	ldr	r0, [pc, #52]	@ (80029cc <MX_GPIO_Init+0x1a0>)
 8002998:	f000 fcaa 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800299c:	2340      	movs	r3, #64	@ 0x40
 800299e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a0:	2301      	movs	r3, #1
 80029a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029a8:	2302      	movs	r3, #2
 80029aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4619      	mov	r1, r3
 80029b2:	4807      	ldr	r0, [pc, #28]	@ (80029d0 <MX_GPIO_Init+0x1a4>)
 80029b4:	f000 fc9c 	bl	80032f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029b8:	bf00      	nop
 80029ba:	3728      	adds	r7, #40	@ 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020800 	.word	0x40020800
 80029c8:	40020000 	.word	0x40020000
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	40020400 	.word	0x40020400

080029d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a04      	ldr	r2, [pc, #16]	@ (80029f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029e6:	f000 fa61 	bl	8002eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40010000 	.word	0x40010000

080029f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029fc:	b672      	cpsid	i
}
 80029fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <Error_Handler+0x8>

08002a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <HAL_MspInit+0x4c>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	4a0f      	ldr	r2, [pc, #60]	@ (8002a50 <HAL_MspInit+0x4c>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <HAL_MspInit+0x4c>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <HAL_MspInit+0x4c>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	4a08      	ldr	r2, [pc, #32]	@ (8002a50 <HAL_MspInit+0x4c>)
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_MspInit+0x4c>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800

08002a54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	@ 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_CAN_MspInit+0x84>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d12c      	bne.n	8002ad0 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b18      	ldr	r3, [pc, #96]	@ (8002adc <HAL_CAN_MspInit+0x88>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	4a17      	ldr	r2, [pc, #92]	@ (8002adc <HAL_CAN_MspInit+0x88>)
 8002a80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a86:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <HAL_CAN_MspInit+0x88>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <HAL_CAN_MspInit+0x88>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4a10      	ldr	r2, [pc, #64]	@ (8002adc <HAL_CAN_MspInit+0x88>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <HAL_CAN_MspInit+0x88>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002aae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002ac0:	2309      	movs	r3, #9
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4805      	ldr	r0, [pc, #20]	@ (8002ae0 <HAL_CAN_MspInit+0x8c>)
 8002acc:	f000 fc10 	bl	80032f0 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	@ 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40006400 	.word	0x40006400
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020000 	.word	0x40020000

08002ae4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	@ 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 0314 	add.w	r3, r7, #20
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a19      	ldr	r2, [pc, #100]	@ (8002b68 <HAL_I2C_MspInit+0x84>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d12c      	bne.n	8002b60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	4b18      	ldr	r3, [pc, #96]	@ (8002b6c <HAL_I2C_MspInit+0x88>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	4a17      	ldr	r2, [pc, #92]	@ (8002b6c <HAL_I2C_MspInit+0x88>)
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b16:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <HAL_I2C_MspInit+0x88>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b28:	2312      	movs	r3, #18
 8002b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b30:	2303      	movs	r3, #3
 8002b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b34:	2304      	movs	r3, #4
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	480c      	ldr	r0, [pc, #48]	@ (8002b70 <HAL_I2C_MspInit+0x8c>)
 8002b40:	f000 fbd6 	bl	80032f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <HAL_I2C_MspInit+0x88>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	4a07      	ldr	r2, [pc, #28]	@ (8002b6c <HAL_I2C_MspInit+0x88>)
 8002b4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_I2C_MspInit+0x88>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002b60:	bf00      	nop
 8002b62:	3728      	adds	r7, #40	@ 0x28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40005400 	.word	0x40005400
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020400 	.word	0x40020400

08002b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	@ 0x28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a19      	ldr	r2, [pc, #100]	@ (8002bf8 <HAL_SPI_MspInit+0x84>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d12b      	bne.n	8002bee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	4b18      	ldr	r3, [pc, #96]	@ (8002bfc <HAL_SPI_MspInit+0x88>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9e:	4a17      	ldr	r2, [pc, #92]	@ (8002bfc <HAL_SPI_MspInit+0x88>)
 8002ba0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ba6:	4b15      	ldr	r3, [pc, #84]	@ (8002bfc <HAL_SPI_MspInit+0x88>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b11      	ldr	r3, [pc, #68]	@ (8002bfc <HAL_SPI_MspInit+0x88>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	4a10      	ldr	r2, [pc, #64]	@ (8002bfc <HAL_SPI_MspInit+0x88>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <HAL_SPI_MspInit+0x88>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bce:	23e0      	movs	r3, #224	@ 0xe0
 8002bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bde:	2305      	movs	r3, #5
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	4619      	mov	r1, r3
 8002be8:	4805      	ldr	r0, [pc, #20]	@ (8002c00 <HAL_SPI_MspInit+0x8c>)
 8002bea:	f000 fb81 	bl	80032f0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002bee:	bf00      	nop
 8002bf0:	3728      	adds	r7, #40	@ 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40013000 	.word	0x40013000
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020000 	.word	0x40020000

08002c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	@ 0x28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a19      	ldr	r2, [pc, #100]	@ (8002c88 <HAL_UART_MspInit+0x84>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d12b      	bne.n	8002c7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	4b18      	ldr	r3, [pc, #96]	@ (8002c8c <HAL_UART_MspInit+0x88>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	4a17      	ldr	r2, [pc, #92]	@ (8002c8c <HAL_UART_MspInit+0x88>)
 8002c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c36:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <HAL_UART_MspInit+0x88>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <HAL_UART_MspInit+0x88>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	4a10      	ldr	r2, [pc, #64]	@ (8002c8c <HAL_UART_MspInit+0x88>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c52:	4b0e      	ldr	r3, [pc, #56]	@ (8002c8c <HAL_UART_MspInit+0x88>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c5e:	230c      	movs	r3, #12
 8002c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c6e:	2307      	movs	r3, #7
 8002c70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c72:	f107 0314 	add.w	r3, r7, #20
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	@ (8002c90 <HAL_UART_MspInit+0x8c>)
 8002c7a:	f000 fb39 	bl	80032f0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002c7e:	bf00      	nop
 8002c80:	3728      	adds	r7, #40	@ 0x28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40004400 	.word	0x40004400
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40020000 	.word	0x40020000

08002c94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08c      	sub	sp, #48	@ 0x30
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d68 <HAL_InitTick+0xd4>)
 8002caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cac:	4a2e      	ldr	r2, [pc, #184]	@ (8002d68 <HAL_InitTick+0xd4>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d68 <HAL_InitTick+0xd4>)
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cc0:	f107 020c 	add.w	r2, r7, #12
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 ff1c 	bl	8003b08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002cd0:	f000 ff06 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cdc:	4a23      	ldr	r2, [pc, #140]	@ (8002d6c <HAL_InitTick+0xd8>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0c9b      	lsrs	r3, r3, #18
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002ce8:	4b21      	ldr	r3, [pc, #132]	@ (8002d70 <HAL_InitTick+0xdc>)
 8002cea:	4a22      	ldr	r2, [pc, #136]	@ (8002d74 <HAL_InitTick+0xe0>)
 8002cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002cee:	4b20      	ldr	r3, [pc, #128]	@ (8002d70 <HAL_InitTick+0xdc>)
 8002cf0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cf4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d70 <HAL_InitTick+0xdc>)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d70 <HAL_InitTick+0xdc>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d02:	4b1b      	ldr	r3, [pc, #108]	@ (8002d70 <HAL_InitTick+0xdc>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d08:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <HAL_InitTick+0xdc>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002d0e:	4818      	ldr	r0, [pc, #96]	@ (8002d70 <HAL_InitTick+0xdc>)
 8002d10:	f002 f9cc 	bl	80050ac <HAL_TIM_Base_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d11b      	bne.n	8002d5a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002d22:	4813      	ldr	r0, [pc, #76]	@ (8002d70 <HAL_InitTick+0xdc>)
 8002d24:	f002 fa1c 	bl	8005160 <HAL_TIM_Base_Start_IT>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d111      	bne.n	8002d5a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d36:	2019      	movs	r0, #25
 8002d38:	f000 facc 	bl	80032d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b0f      	cmp	r3, #15
 8002d40:	d808      	bhi.n	8002d54 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002d42:	2200      	movs	r2, #0
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	2019      	movs	r0, #25
 8002d48:	f000 faa8 	bl	800329c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d78 <HAL_InitTick+0xe4>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e002      	b.n	8002d5a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3730      	adds	r7, #48	@ 0x30
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	431bde83 	.word	0x431bde83
 8002d70:	200007b4 	.word	0x200007b4
 8002d74:	40010000 	.word	0x40010000
 8002d78:	20000008 	.word	0x20000008

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <NMI_Handler+0x4>

08002d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <HardFault_Handler+0x4>

08002d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <MemManage_Handler+0x4>

08002d94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <BusFault_Handler+0x4>

08002d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <UsageFault_Handler+0x4>

08002da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002de0:	4802      	ldr	r0, [pc, #8]	@ (8002dec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002de2:	f002 fa2d 	bl	8005240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200007b4 	.word	0x200007b4

08002df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002df4:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <SystemInit+0x20>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	4a05      	ldr	r2, [pc, #20]	@ (8002e10 <SystemInit+0x20>)
 8002dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e18:	480d      	ldr	r0, [pc, #52]	@ (8002e50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e1a:	490e      	ldr	r1, [pc, #56]	@ (8002e54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e20:	e002      	b.n	8002e28 <LoopCopyDataInit>

08002e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e26:	3304      	adds	r3, #4

08002e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e2c:	d3f9      	bcc.n	8002e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e30:	4c0b      	ldr	r4, [pc, #44]	@ (8002e60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e34:	e001      	b.n	8002e3a <LoopFillZerobss>

08002e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e38:	3204      	adds	r2, #4

08002e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e3c:	d3fb      	bcc.n	8002e36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e3e:	f7ff ffd7 	bl	8002df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e42:	f003 fe9b 	bl	8006b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e46:	f7ff fbad 	bl	80025a4 <main>
  bx  lr    
 8002e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e54:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002e58:	08009308 	.word	0x08009308
  ldr r2, =_sbss
 8002e5c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002e60:	20000950 	.word	0x20000950

08002e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e64:	e7fe      	b.n	8002e64 <ADC_IRQHandler>
	...

08002e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <HAL_Init+0x40>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea8 <HAL_Init+0x40>)
 8002e72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <HAL_Init+0x40>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea8 <HAL_Init+0x40>)
 8002e7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e84:	4b08      	ldr	r3, [pc, #32]	@ (8002ea8 <HAL_Init+0x40>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a07      	ldr	r2, [pc, #28]	@ (8002ea8 <HAL_Init+0x40>)
 8002e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e90:	2003      	movs	r0, #3
 8002e92:	f000 f9f8 	bl	8003286 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e96:	200f      	movs	r0, #15
 8002e98:	f7ff fefc 	bl	8002c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e9c:	f7ff fdb2 	bl	8002a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023c00 	.word	0x40023c00

08002eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <HAL_IncTick+0x20>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <HAL_IncTick+0x24>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a04      	ldr	r2, [pc, #16]	@ (8002ed0 <HAL_IncTick+0x24>)
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	2000000c 	.word	0x2000000c
 8002ed0:	200007fc 	.word	0x200007fc

08002ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	@ (8002ee8 <HAL_GetTick+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	200007fc 	.word	0x200007fc

08002eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff ffee 	bl	8002ed4 <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d005      	beq.n	8002f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f06:	4b0a      	ldr	r3, [pc, #40]	@ (8002f30 <HAL_Delay+0x44>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f12:	bf00      	nop
 8002f14:	f7ff ffde 	bl	8002ed4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d8f7      	bhi.n	8002f14 <HAL_Delay+0x28>
  {
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	2000000c 	.word	0x2000000c

08002f34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0ed      	b.n	8003122 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff fd7e 	bl	8002a54 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f68:	f7ff ffb4 	bl	8002ed4 <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f6e:	e012      	b.n	8002f96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f70:	f7ff ffb0 	bl	8002ed4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b0a      	cmp	r3, #10
 8002f7c:	d90b      	bls.n	8002f96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2205      	movs	r2, #5
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0c5      	b.n	8003122 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0e5      	beq.n	8002f70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0202 	bic.w	r2, r2, #2
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fb4:	f7ff ff8e 	bl	8002ed4 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fba:	e012      	b.n	8002fe2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fbc:	f7ff ff8a 	bl	8002ed4 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b0a      	cmp	r3, #10
 8002fc8:	d90b      	bls.n	8002fe2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2205      	movs	r2, #5
 8002fda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e09f      	b.n	8003122 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e5      	bne.n	8002fbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7e1b      	ldrb	r3, [r3, #24]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d108      	bne.n	800300a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e007      	b.n	800301a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003018:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7e5b      	ldrb	r3, [r3, #25]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d108      	bne.n	8003034 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e007      	b.n	8003044 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003042:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7e9b      	ldrb	r3, [r3, #26]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d108      	bne.n	800305e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0220 	orr.w	r2, r2, #32
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e007      	b.n	800306e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0220 	bic.w	r2, r2, #32
 800306c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7edb      	ldrb	r3, [r3, #27]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d108      	bne.n	8003088 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0210 	bic.w	r2, r2, #16
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	e007      	b.n	8003098 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0210 	orr.w	r2, r2, #16
 8003096:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7f1b      	ldrb	r3, [r3, #28]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d108      	bne.n	80030b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0208 	orr.w	r2, r2, #8
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	e007      	b.n	80030c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0208 	bic.w	r2, r2, #8
 80030c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7f5b      	ldrb	r3, [r3, #29]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d108      	bne.n	80030dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0204 	orr.w	r2, r2, #4
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e007      	b.n	80030ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0204 	bic.w	r2, r2, #4
 80030ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	ea42 0103 	orr.w	r1, r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	1e5a      	subs	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800313c:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <__NVIC_SetPriorityGrouping+0x44>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003148:	4013      	ands	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003154:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800315c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800315e:	4a04      	ldr	r2, [pc, #16]	@ (8003170 <__NVIC_SetPriorityGrouping+0x44>)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	60d3      	str	r3, [r2, #12]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003178:	4b04      	ldr	r3, [pc, #16]	@ (800318c <__NVIC_GetPriorityGrouping+0x18>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	f003 0307 	and.w	r3, r3, #7
}
 8003182:	4618      	mov	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	db0b      	blt.n	80031ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	f003 021f 	and.w	r2, r3, #31
 80031a8:	4907      	ldr	r1, [pc, #28]	@ (80031c8 <__NVIC_EnableIRQ+0x38>)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2001      	movs	r0, #1
 80031b2:	fa00 f202 	lsl.w	r2, r0, r2
 80031b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000e100 	.word	0xe000e100

080031cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	db0a      	blt.n	80031f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	490c      	ldr	r1, [pc, #48]	@ (8003218 <__NVIC_SetPriority+0x4c>)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	0112      	lsls	r2, r2, #4
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	440b      	add	r3, r1
 80031f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f4:	e00a      	b.n	800320c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4908      	ldr	r1, [pc, #32]	@ (800321c <__NVIC_SetPriority+0x50>)
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	3b04      	subs	r3, #4
 8003204:	0112      	lsls	r2, r2, #4
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	440b      	add	r3, r1
 800320a:	761a      	strb	r2, [r3, #24]
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000e100 	.word	0xe000e100
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	@ 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f1c3 0307 	rsb	r3, r3, #7
 800323a:	2b04      	cmp	r3, #4
 800323c:	bf28      	it	cs
 800323e:	2304      	movcs	r3, #4
 8003240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3304      	adds	r3, #4
 8003246:	2b06      	cmp	r3, #6
 8003248:	d902      	bls.n	8003250 <NVIC_EncodePriority+0x30>
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3b03      	subs	r3, #3
 800324e:	e000      	b.n	8003252 <NVIC_EncodePriority+0x32>
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	f04f 32ff 	mov.w	r2, #4294967295
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	401a      	ands	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003268:	f04f 31ff 	mov.w	r1, #4294967295
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	43d9      	mvns	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	4313      	orrs	r3, r2
         );
}
 800327a:	4618      	mov	r0, r3
 800327c:	3724      	adds	r7, #36	@ 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ff4c 	bl	800312c <__NVIC_SetPriorityGrouping>
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032ae:	f7ff ff61 	bl	8003174 <__NVIC_GetPriorityGrouping>
 80032b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	6978      	ldr	r0, [r7, #20]
 80032ba:	f7ff ffb1 	bl	8003220 <NVIC_EncodePriority>
 80032be:	4602      	mov	r2, r0
 80032c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff ff80 	bl	80031cc <__NVIC_SetPriority>
}
 80032cc:	bf00      	nop
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff54 	bl	8003190 <__NVIC_EnableIRQ>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b089      	sub	sp, #36	@ 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	e165      	b.n	80035d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800330c:	2201      	movs	r2, #1
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	429a      	cmp	r2, r3
 8003326:	f040 8154 	bne.w	80035d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d005      	beq.n	8003342 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800333e:	2b02      	cmp	r3, #2
 8003340:	d130      	bne.n	80033a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	2203      	movs	r2, #3
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003378:	2201      	movs	r2, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 0201 	and.w	r2, r3, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d017      	beq.n	80033e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	2203      	movs	r2, #3
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d123      	bne.n	8003434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	08da      	lsrs	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3208      	adds	r2, #8
 80033f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	220f      	movs	r2, #15
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	08da      	lsrs	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3208      	adds	r2, #8
 800342e:	69b9      	ldr	r1, [r7, #24]
 8003430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2203      	movs	r2, #3
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0203 	and.w	r2, r3, #3
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80ae 	beq.w	80035d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	4b5d      	ldr	r3, [pc, #372]	@ (80035f0 <HAL_GPIO_Init+0x300>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	4a5c      	ldr	r2, [pc, #368]	@ (80035f0 <HAL_GPIO_Init+0x300>)
 8003480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003484:	6453      	str	r3, [r2, #68]	@ 0x44
 8003486:	4b5a      	ldr	r3, [pc, #360]	@ (80035f0 <HAL_GPIO_Init+0x300>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003492:	4a58      	ldr	r2, [pc, #352]	@ (80035f4 <HAL_GPIO_Init+0x304>)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	220f      	movs	r2, #15
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4f      	ldr	r2, [pc, #316]	@ (80035f8 <HAL_GPIO_Init+0x308>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d025      	beq.n	800350a <HAL_GPIO_Init+0x21a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4e      	ldr	r2, [pc, #312]	@ (80035fc <HAL_GPIO_Init+0x30c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01f      	beq.n	8003506 <HAL_GPIO_Init+0x216>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003600 <HAL_GPIO_Init+0x310>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d019      	beq.n	8003502 <HAL_GPIO_Init+0x212>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003604 <HAL_GPIO_Init+0x314>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_GPIO_Init+0x20e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003608 <HAL_GPIO_Init+0x318>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00d      	beq.n	80034fa <HAL_GPIO_Init+0x20a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4a      	ldr	r2, [pc, #296]	@ (800360c <HAL_GPIO_Init+0x31c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d007      	beq.n	80034f6 <HAL_GPIO_Init+0x206>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a49      	ldr	r2, [pc, #292]	@ (8003610 <HAL_GPIO_Init+0x320>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_GPIO_Init+0x202>
 80034ee:	2306      	movs	r3, #6
 80034f0:	e00c      	b.n	800350c <HAL_GPIO_Init+0x21c>
 80034f2:	2307      	movs	r3, #7
 80034f4:	e00a      	b.n	800350c <HAL_GPIO_Init+0x21c>
 80034f6:	2305      	movs	r3, #5
 80034f8:	e008      	b.n	800350c <HAL_GPIO_Init+0x21c>
 80034fa:	2304      	movs	r3, #4
 80034fc:	e006      	b.n	800350c <HAL_GPIO_Init+0x21c>
 80034fe:	2303      	movs	r3, #3
 8003500:	e004      	b.n	800350c <HAL_GPIO_Init+0x21c>
 8003502:	2302      	movs	r3, #2
 8003504:	e002      	b.n	800350c <HAL_GPIO_Init+0x21c>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_GPIO_Init+0x21c>
 800350a:	2300      	movs	r3, #0
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	f002 0203 	and.w	r2, r2, #3
 8003512:	0092      	lsls	r2, r2, #2
 8003514:	4093      	lsls	r3, r2
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800351c:	4935      	ldr	r1, [pc, #212]	@ (80035f4 <HAL_GPIO_Init+0x304>)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	089b      	lsrs	r3, r3, #2
 8003522:	3302      	adds	r3, #2
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800352a:	4b3a      	ldr	r3, [pc, #232]	@ (8003614 <HAL_GPIO_Init+0x324>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800354e:	4a31      	ldr	r2, [pc, #196]	@ (8003614 <HAL_GPIO_Init+0x324>)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003554:	4b2f      	ldr	r3, [pc, #188]	@ (8003614 <HAL_GPIO_Init+0x324>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003578:	4a26      	ldr	r2, [pc, #152]	@ (8003614 <HAL_GPIO_Init+0x324>)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800357e:	4b25      	ldr	r3, [pc, #148]	@ (8003614 <HAL_GPIO_Init+0x324>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003614 <HAL_GPIO_Init+0x324>)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <HAL_GPIO_Init+0x324>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035cc:	4a11      	ldr	r2, [pc, #68]	@ (8003614 <HAL_GPIO_Init+0x324>)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3301      	adds	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b0f      	cmp	r3, #15
 80035dc:	f67f ae96 	bls.w	800330c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	3724      	adds	r7, #36	@ 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40013800 	.word	0x40013800
 80035f8:	40020000 	.word	0x40020000
 80035fc:	40020400 	.word	0x40020400
 8003600:	40020800 	.word	0x40020800
 8003604:	40020c00 	.word	0x40020c00
 8003608:	40021000 	.word	0x40021000
 800360c:	40021400 	.word	0x40021400
 8003610:	40021800 	.word	0x40021800
 8003614:	40013c00 	.word	0x40013c00

08003618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	807b      	strh	r3, [r7, #2]
 8003624:	4613      	mov	r3, r2
 8003626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003628:	787b      	ldrb	r3, [r7, #1]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003634:	e003      	b.n	800363e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003636:	887b      	ldrh	r3, [r7, #2]
 8003638:	041a      	lsls	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	619a      	str	r2, [r3, #24]
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e12b      	b.n	80038b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fa36 	bl	8002ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	@ 0x24
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0201 	bic.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800369e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036b0:	f000 fa02 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 80036b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4a81      	ldr	r2, [pc, #516]	@ (80038c0 <HAL_I2C_Init+0x274>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d807      	bhi.n	80036d0 <HAL_I2C_Init+0x84>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4a80      	ldr	r2, [pc, #512]	@ (80038c4 <HAL_I2C_Init+0x278>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	bf94      	ite	ls
 80036c8:	2301      	movls	r3, #1
 80036ca:	2300      	movhi	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e006      	b.n	80036de <HAL_I2C_Init+0x92>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a7d      	ldr	r2, [pc, #500]	@ (80038c8 <HAL_I2C_Init+0x27c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	bf94      	ite	ls
 80036d8:	2301      	movls	r3, #1
 80036da:	2300      	movhi	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0e7      	b.n	80038b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4a78      	ldr	r2, [pc, #480]	@ (80038cc <HAL_I2C_Init+0x280>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	0c9b      	lsrs	r3, r3, #18
 80036f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a6a      	ldr	r2, [pc, #424]	@ (80038c0 <HAL_I2C_Init+0x274>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d802      	bhi.n	8003720 <HAL_I2C_Init+0xd4>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	3301      	adds	r3, #1
 800371e:	e009      	b.n	8003734 <HAL_I2C_Init+0xe8>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003726:	fb02 f303 	mul.w	r3, r2, r3
 800372a:	4a69      	ldr	r2, [pc, #420]	@ (80038d0 <HAL_I2C_Init+0x284>)
 800372c:	fba2 2303 	umull	r2, r3, r2, r3
 8003730:	099b      	lsrs	r3, r3, #6
 8003732:	3301      	adds	r3, #1
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	430b      	orrs	r3, r1
 800373a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003746:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	495c      	ldr	r1, [pc, #368]	@ (80038c0 <HAL_I2C_Init+0x274>)
 8003750:	428b      	cmp	r3, r1
 8003752:	d819      	bhi.n	8003788 <HAL_I2C_Init+0x13c>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	1e59      	subs	r1, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003762:	1c59      	adds	r1, r3, #1
 8003764:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003768:	400b      	ands	r3, r1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_I2C_Init+0x138>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1e59      	subs	r1, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	fbb1 f3f3 	udiv	r3, r1, r3
 800377c:	3301      	adds	r3, #1
 800377e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003782:	e051      	b.n	8003828 <HAL_I2C_Init+0x1dc>
 8003784:	2304      	movs	r3, #4
 8003786:	e04f      	b.n	8003828 <HAL_I2C_Init+0x1dc>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d111      	bne.n	80037b4 <HAL_I2C_Init+0x168>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1e58      	subs	r0, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	440b      	add	r3, r1
 800379e:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e012      	b.n	80037da <HAL_I2C_Init+0x18e>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1e58      	subs	r0, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	0099      	lsls	r1, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ca:	3301      	adds	r3, #1
 80037cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_I2C_Init+0x196>
 80037de:	2301      	movs	r3, #1
 80037e0:	e022      	b.n	8003828 <HAL_I2C_Init+0x1dc>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10e      	bne.n	8003808 <HAL_I2C_Init+0x1bc>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1e58      	subs	r0, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	440b      	add	r3, r1
 80037f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fc:	3301      	adds	r3, #1
 80037fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003806:	e00f      	b.n	8003828 <HAL_I2C_Init+0x1dc>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1e58      	subs	r0, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	0099      	lsls	r1, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	fbb0 f3f3 	udiv	r3, r0, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003824:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	6809      	ldr	r1, [r1, #0]
 800382c:	4313      	orrs	r3, r2
 800382e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003856:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6911      	ldr	r1, [r2, #16]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68d2      	ldr	r2, [r2, #12]
 8003862:	4311      	orrs	r1, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	430b      	orrs	r3, r1
 800386a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	000186a0 	.word	0x000186a0
 80038c4:	001e847f 	.word	0x001e847f
 80038c8:	003d08ff 	.word	0x003d08ff
 80038cc:	431bde83 	.word	0x431bde83
 80038d0:	10624dd3 	.word	0x10624dd3

080038d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0cc      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e8:	4b68      	ldr	r3, [pc, #416]	@ (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d90c      	bls.n	8003910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b65      	ldr	r3, [pc, #404]	@ (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b63      	ldr	r3, [pc, #396]	@ (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0b8      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003928:	4b59      	ldr	r3, [pc, #356]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a58      	ldr	r2, [pc, #352]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003932:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003940:	4b53      	ldr	r3, [pc, #332]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a52      	ldr	r2, [pc, #328]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800394a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b50      	ldr	r3, [pc, #320]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	494d      	ldr	r1, [pc, #308]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d044      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b47      	ldr	r3, [pc, #284]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d119      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d003      	beq.n	8003992 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398e:	2b03      	cmp	r3, #3
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003992:	4b3f      	ldr	r3, [pc, #252]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e06f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e067      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4b37      	ldr	r3, [pc, #220]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4934      	ldr	r1, [pc, #208]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c4:	f7ff fa86 	bl	8002ed4 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7ff fa82 	bl	8002ed4 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e04f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 020c 	and.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1eb      	bne.n	80039cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f4:	4b25      	ldr	r3, [pc, #148]	@ (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d20c      	bcs.n	8003a1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b22      	ldr	r3, [pc, #136]	@ (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b20      	ldr	r3, [pc, #128]	@ (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e032      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a28:	4b19      	ldr	r3, [pc, #100]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4916      	ldr	r1, [pc, #88]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a46:	4b12      	ldr	r3, [pc, #72]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	490e      	ldr	r1, [pc, #56]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a5a:	f000 f887 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	490a      	ldr	r1, [pc, #40]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	5ccb      	ldrb	r3, [r1, r3]
 8003a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a72:	4a09      	ldr	r2, [pc, #36]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a76:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff f90a 	bl	8002c94 <HAL_InitTick>

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023c00 	.word	0x40023c00
 8003a90:	40023800 	.word	0x40023800
 8003a94:	08008f6c 	.word	0x08008f6c
 8003a98:	20000004 	.word	0x20000004
 8003a9c:	20000008 	.word	0x20000008

08003aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa4:	4b03      	ldr	r3, [pc, #12]	@ (8003ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000004 	.word	0x20000004

08003ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003abc:	f7ff fff0 	bl	8003aa0 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0a9b      	lsrs	r3, r3, #10
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4903      	ldr	r1, [pc, #12]	@ (8003adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	08008f7c 	.word	0x08008f7c

08003ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ae4:	f7ff ffdc 	bl	8003aa0 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b05      	ldr	r3, [pc, #20]	@ (8003b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0b5b      	lsrs	r3, r3, #13
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4903      	ldr	r1, [pc, #12]	@ (8003b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40023800 	.word	0x40023800
 8003b04:	08008f7c 	.word	0x08008f7c

08003b08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	220f      	movs	r2, #15
 8003b16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b18:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <HAL_RCC_GetClockConfig+0x5c>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0203 	and.w	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b24:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <HAL_RCC_GetClockConfig+0x5c>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b30:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <HAL_RCC_GetClockConfig+0x5c>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b3c:	4b09      	ldr	r3, [pc, #36]	@ (8003b64 <HAL_RCC_GetClockConfig+0x5c>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	08db      	lsrs	r3, r3, #3
 8003b42:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b4a:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <HAL_RCC_GetClockConfig+0x60>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 020f 	and.w	r2, r3, #15
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	601a      	str	r2, [r3, #0]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40023c00 	.word	0x40023c00

08003b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b70:	b0ae      	sub	sp, #184	@ 0xb8
 8003b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b92:	4bcb      	ldr	r3, [pc, #812]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b0c      	cmp	r3, #12
 8003b9c:	f200 8206 	bhi.w	8003fac <HAL_RCC_GetSysClockFreq+0x440>
 8003ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bdd 	.word	0x08003bdd
 8003bac:	08003fad 	.word	0x08003fad
 8003bb0:	08003fad 	.word	0x08003fad
 8003bb4:	08003fad 	.word	0x08003fad
 8003bb8:	08003be5 	.word	0x08003be5
 8003bbc:	08003fad 	.word	0x08003fad
 8003bc0:	08003fad 	.word	0x08003fad
 8003bc4:	08003fad 	.word	0x08003fad
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003fad 	.word	0x08003fad
 8003bd0:	08003fad 	.word	0x08003fad
 8003bd4:	08003fad 	.word	0x08003fad
 8003bd8:	08003ddd 	.word	0x08003ddd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4bb9      	ldr	r3, [pc, #740]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003bde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003be2:	e1e7      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be4:	4bb8      	ldr	r3, [pc, #736]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003be6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003bea:	e1e3      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bec:	4bb4      	ldr	r3, [pc, #720]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf8:	4bb1      	ldr	r3, [pc, #708]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d071      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c04:	4bae      	ldr	r3, [pc, #696]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	099b      	lsrs	r3, r3, #6
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c10:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	462b      	mov	r3, r5
 8003c2e:	f04f 0000 	mov.w	r0, #0
 8003c32:	f04f 0100 	mov.w	r1, #0
 8003c36:	0159      	lsls	r1, r3, #5
 8003c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c3c:	0150      	lsls	r0, r2, #5
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4621      	mov	r1, r4
 8003c44:	1a51      	subs	r1, r2, r1
 8003c46:	6439      	str	r1, [r7, #64]	@ 0x40
 8003c48:	4629      	mov	r1, r5
 8003c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003c5c:	4649      	mov	r1, r9
 8003c5e:	018b      	lsls	r3, r1, #6
 8003c60:	4641      	mov	r1, r8
 8003c62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c66:	4641      	mov	r1, r8
 8003c68:	018a      	lsls	r2, r1, #6
 8003c6a:	4641      	mov	r1, r8
 8003c6c:	1a51      	subs	r1, r2, r1
 8003c6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c70:	4649      	mov	r1, r9
 8003c72:	eb63 0301 	sbc.w	r3, r3, r1
 8003c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003c84:	4649      	mov	r1, r9
 8003c86:	00cb      	lsls	r3, r1, #3
 8003c88:	4641      	mov	r1, r8
 8003c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c8e:	4641      	mov	r1, r8
 8003c90:	00ca      	lsls	r2, r1, #3
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	4622      	mov	r2, r4
 8003c9a:	189b      	adds	r3, r3, r2
 8003c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c9e:	462b      	mov	r3, r5
 8003ca0:	460a      	mov	r2, r1
 8003ca2:	eb42 0303 	adc.w	r3, r2, r3
 8003ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	024b      	lsls	r3, r1, #9
 8003cb8:	4621      	mov	r1, r4
 8003cba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	024a      	lsls	r2, r1, #9
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003cd8:	f7fc ffd6 	bl	8000c88 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ce6:	e067      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce8:	4b75      	ldr	r3, [pc, #468]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	099b      	lsrs	r3, r3, #6
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cf4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d02:	2300      	movs	r3, #0
 8003d04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d06:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	462b      	mov	r3, r5
 8003d0e:	f04f 0000 	mov.w	r0, #0
 8003d12:	f04f 0100 	mov.w	r1, #0
 8003d16:	0159      	lsls	r1, r3, #5
 8003d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d1c:	0150      	lsls	r0, r2, #5
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4621      	mov	r1, r4
 8003d24:	1a51      	subs	r1, r2, r1
 8003d26:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d28:	4629      	mov	r1, r5
 8003d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	018b      	lsls	r3, r1, #6
 8003d40:	4641      	mov	r1, r8
 8003d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d46:	4641      	mov	r1, r8
 8003d48:	018a      	lsls	r2, r1, #6
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d50:	4649      	mov	r1, r9
 8003d52:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d62:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d6a:	4692      	mov	sl, r2
 8003d6c:	469b      	mov	fp, r3
 8003d6e:	4623      	mov	r3, r4
 8003d70:	eb1a 0303 	adds.w	r3, sl, r3
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	462b      	mov	r3, r5
 8003d78:	eb4b 0303 	adc.w	r3, fp, r3
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	028b      	lsls	r3, r1, #10
 8003d8e:	4621      	mov	r1, r4
 8003d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d94:	4621      	mov	r1, r4
 8003d96:	028a      	lsls	r2, r1, #10
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003da0:	2200      	movs	r2, #0
 8003da2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003da4:	677a      	str	r2, [r7, #116]	@ 0x74
 8003da6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003daa:	f7fc ff6d 	bl	8000c88 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4613      	mov	r3, r2
 8003db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003db8:	4b41      	ldr	r3, [pc, #260]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003dca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003dda:	e0eb      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ddc:	4b38      	ldr	r3, [pc, #224]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003de4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003de8:	4b35      	ldr	r3, [pc, #212]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d06b      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df4:	4b32      	ldr	r3, [pc, #200]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	099b      	lsrs	r3, r3, #6
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e08:	2300      	movs	r3, #0
 8003e0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003e10:	4622      	mov	r2, r4
 8003e12:	462b      	mov	r3, r5
 8003e14:	f04f 0000 	mov.w	r0, #0
 8003e18:	f04f 0100 	mov.w	r1, #0
 8003e1c:	0159      	lsls	r1, r3, #5
 8003e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e22:	0150      	lsls	r0, r2, #5
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4621      	mov	r1, r4
 8003e2a:	1a51      	subs	r1, r2, r1
 8003e2c:	61b9      	str	r1, [r7, #24]
 8003e2e:	4629      	mov	r1, r5
 8003e30:	eb63 0301 	sbc.w	r3, r3, r1
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e42:	4659      	mov	r1, fp
 8003e44:	018b      	lsls	r3, r1, #6
 8003e46:	4651      	mov	r1, sl
 8003e48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e4c:	4651      	mov	r1, sl
 8003e4e:	018a      	lsls	r2, r1, #6
 8003e50:	4651      	mov	r1, sl
 8003e52:	ebb2 0801 	subs.w	r8, r2, r1
 8003e56:	4659      	mov	r1, fp
 8003e58:	eb63 0901 	sbc.w	r9, r3, r1
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e70:	4690      	mov	r8, r2
 8003e72:	4699      	mov	r9, r3
 8003e74:	4623      	mov	r3, r4
 8003e76:	eb18 0303 	adds.w	r3, r8, r3
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	462b      	mov	r3, r5
 8003e7e:	eb49 0303 	adc.w	r3, r9, r3
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e90:	4629      	mov	r1, r5
 8003e92:	024b      	lsls	r3, r1, #9
 8003e94:	4621      	mov	r1, r4
 8003e96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	024a      	lsls	r2, r1, #9
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003eaa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003eac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eb0:	f7fc feea 	bl	8000c88 <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4613      	mov	r3, r2
 8003eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ebe:	e065      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x420>
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	00f42400 	.word	0x00f42400
 8003ec8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003edc:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ede:	2300      	movs	r3, #0
 8003ee0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ee2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003ee6:	4642      	mov	r2, r8
 8003ee8:	464b      	mov	r3, r9
 8003eea:	f04f 0000 	mov.w	r0, #0
 8003eee:	f04f 0100 	mov.w	r1, #0
 8003ef2:	0159      	lsls	r1, r3, #5
 8003ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef8:	0150      	lsls	r0, r2, #5
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4641      	mov	r1, r8
 8003f00:	1a51      	subs	r1, r2, r1
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	4649      	mov	r1, r9
 8003f06:	eb63 0301 	sbc.w	r3, r3, r1
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f18:	4659      	mov	r1, fp
 8003f1a:	018b      	lsls	r3, r1, #6
 8003f1c:	4651      	mov	r1, sl
 8003f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f22:	4651      	mov	r1, sl
 8003f24:	018a      	lsls	r2, r1, #6
 8003f26:	4651      	mov	r1, sl
 8003f28:	1a54      	subs	r4, r2, r1
 8003f2a:	4659      	mov	r1, fp
 8003f2c:	eb63 0501 	sbc.w	r5, r3, r1
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	00eb      	lsls	r3, r5, #3
 8003f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f3e:	00e2      	lsls	r2, r4, #3
 8003f40:	4614      	mov	r4, r2
 8003f42:	461d      	mov	r5, r3
 8003f44:	4643      	mov	r3, r8
 8003f46:	18e3      	adds	r3, r4, r3
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	eb45 0303 	adc.w	r3, r5, r3
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f5e:	4629      	mov	r1, r5
 8003f60:	028b      	lsls	r3, r1, #10
 8003f62:	4621      	mov	r1, r4
 8003f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f68:	4621      	mov	r1, r4
 8003f6a:	028a      	lsls	r2, r1, #10
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f74:	2200      	movs	r2, #0
 8003f76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f78:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f7e:	f7fc fe83 	bl	8000c88 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4613      	mov	r3, r2
 8003f88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	0f1b      	lsrs	r3, r3, #28
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003faa:	e003      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fac:	4b06      	ldr	r3, [pc, #24]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	37b8      	adds	r7, #184	@ 0xb8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	00f42400 	.word	0x00f42400

08003fcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e28d      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8083 	beq.w	80040f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fec:	4b94      	ldr	r3, [pc, #592]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d019      	beq.n	800402c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ff8:	4b91      	ldr	r3, [pc, #580]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
        || \
 8004000:	2b08      	cmp	r3, #8
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004004:	4b8e      	ldr	r3, [pc, #568]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800400c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004010:	d00c      	beq.n	800402c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004012:	4b8b      	ldr	r3, [pc, #556]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800401a:	2b0c      	cmp	r3, #12
 800401c:	d112      	bne.n	8004044 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800401e:	4b88      	ldr	r3, [pc, #544]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800402a:	d10b      	bne.n	8004044 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800402c:	4b84      	ldr	r3, [pc, #528]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d05b      	beq.n	80040f0 <HAL_RCC_OscConfig+0x124>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d157      	bne.n	80040f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e25a      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404c:	d106      	bne.n	800405c <HAL_RCC_OscConfig+0x90>
 800404e:	4b7c      	ldr	r3, [pc, #496]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a7b      	ldr	r2, [pc, #492]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	e01d      	b.n	8004098 <HAL_RCC_OscConfig+0xcc>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004064:	d10c      	bne.n	8004080 <HAL_RCC_OscConfig+0xb4>
 8004066:	4b76      	ldr	r3, [pc, #472]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a75      	ldr	r2, [pc, #468]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 800406c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	4b73      	ldr	r3, [pc, #460]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a72      	ldr	r2, [pc, #456]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e00b      	b.n	8004098 <HAL_RCC_OscConfig+0xcc>
 8004080:	4b6f      	ldr	r3, [pc, #444]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a6e      	ldr	r2, [pc, #440]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	4b6c      	ldr	r3, [pc, #432]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a6b      	ldr	r2, [pc, #428]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d013      	beq.n	80040c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fe ff18 	bl	8002ed4 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a8:	f7fe ff14 	bl	8002ed4 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	@ 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e21f      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ba:	4b61      	ldr	r3, [pc, #388]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_RCC_OscConfig+0xdc>
 80040c6:	e014      	b.n	80040f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fe ff04 	bl	8002ed4 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d0:	f7fe ff00 	bl	8002ed4 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	@ 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e20b      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e2:	4b57      	ldr	r3, [pc, #348]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x104>
 80040ee:	e000      	b.n	80040f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d06f      	beq.n	80041de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040fe:	4b50      	ldr	r3, [pc, #320]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b00      	cmp	r3, #0
 8004108:	d017      	beq.n	800413a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800410a:	4b4d      	ldr	r3, [pc, #308]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004112:	2b08      	cmp	r3, #8
 8004114:	d105      	bne.n	8004122 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004116:	4b4a      	ldr	r3, [pc, #296]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004122:	4b47      	ldr	r3, [pc, #284]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800412a:	2b0c      	cmp	r3, #12
 800412c:	d11c      	bne.n	8004168 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800412e:	4b44      	ldr	r3, [pc, #272]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d116      	bne.n	8004168 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413a:	4b41      	ldr	r3, [pc, #260]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_RCC_OscConfig+0x186>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d001      	beq.n	8004152 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e1d3      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004152:	4b3b      	ldr	r3, [pc, #236]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4937      	ldr	r1, [pc, #220]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	e03a      	b.n	80041de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004170:	4b34      	ldr	r3, [pc, #208]	@ (8004244 <HAL_RCC_OscConfig+0x278>)
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004176:	f7fe fead 	bl	8002ed4 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417e:	f7fe fea9 	bl	8002ed4 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e1b4      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	4b2b      	ldr	r3, [pc, #172]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419c:	4b28      	ldr	r3, [pc, #160]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4925      	ldr	r1, [pc, #148]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	600b      	str	r3, [r1, #0]
 80041b0:	e015      	b.n	80041de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b2:	4b24      	ldr	r3, [pc, #144]	@ (8004244 <HAL_RCC_OscConfig+0x278>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fe fe8c 	bl	8002ed4 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c0:	f7fe fe88 	bl	8002ed4 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e193      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d036      	beq.n	8004258 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d016      	beq.n	8004220 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f2:	4b15      	ldr	r3, [pc, #84]	@ (8004248 <HAL_RCC_OscConfig+0x27c>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fe fe6c 	bl	8002ed4 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004200:	f7fe fe68 	bl	8002ed4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e173      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	4b0b      	ldr	r3, [pc, #44]	@ (8004240 <HAL_RCC_OscConfig+0x274>)
 8004214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x234>
 800421e:	e01b      	b.n	8004258 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004220:	4b09      	ldr	r3, [pc, #36]	@ (8004248 <HAL_RCC_OscConfig+0x27c>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004226:	f7fe fe55 	bl	8002ed4 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800422c:	e00e      	b.n	800424c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800422e:	f7fe fe51 	bl	8002ed4 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d907      	bls.n	800424c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e15c      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
 8004240:	40023800 	.word	0x40023800
 8004244:	42470000 	.word	0x42470000
 8004248:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424c:	4b8a      	ldr	r3, [pc, #552]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 800424e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1ea      	bne.n	800422e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 8097 	beq.w	8004394 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426a:	4b83      	ldr	r3, [pc, #524]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	4b7f      	ldr	r3, [pc, #508]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	4a7e      	ldr	r2, [pc, #504]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 8004280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004284:	6413      	str	r3, [r2, #64]	@ 0x40
 8004286:	4b7c      	ldr	r3, [pc, #496]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004292:	2301      	movs	r3, #1
 8004294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004296:	4b79      	ldr	r3, [pc, #484]	@ (800447c <HAL_RCC_OscConfig+0x4b0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d118      	bne.n	80042d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a2:	4b76      	ldr	r3, [pc, #472]	@ (800447c <HAL_RCC_OscConfig+0x4b0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a75      	ldr	r2, [pc, #468]	@ (800447c <HAL_RCC_OscConfig+0x4b0>)
 80042a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ae:	f7fe fe11 	bl	8002ed4 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b6:	f7fe fe0d 	bl	8002ed4 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e118      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	4b6c      	ldr	r3, [pc, #432]	@ (800447c <HAL_RCC_OscConfig+0x4b0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d106      	bne.n	80042ea <HAL_RCC_OscConfig+0x31e>
 80042dc:	4b66      	ldr	r3, [pc, #408]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e0:	4a65      	ldr	r2, [pc, #404]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e8:	e01c      	b.n	8004324 <HAL_RCC_OscConfig+0x358>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b05      	cmp	r3, #5
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0x340>
 80042f2:	4b61      	ldr	r3, [pc, #388]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f6:	4a60      	ldr	r2, [pc, #384]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 80042f8:	f043 0304 	orr.w	r3, r3, #4
 80042fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fe:	4b5e      	ldr	r3, [pc, #376]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004302:	4a5d      	ldr	r2, [pc, #372]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	6713      	str	r3, [r2, #112]	@ 0x70
 800430a:	e00b      	b.n	8004324 <HAL_RCC_OscConfig+0x358>
 800430c:	4b5a      	ldr	r3, [pc, #360]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004310:	4a59      	ldr	r2, [pc, #356]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	6713      	str	r3, [r2, #112]	@ 0x70
 8004318:	4b57      	ldr	r3, [pc, #348]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431c:	4a56      	ldr	r2, [pc, #344]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 800431e:	f023 0304 	bic.w	r3, r3, #4
 8004322:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fe fdd2 	bl	8002ed4 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004332:	e00a      	b.n	800434a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004334:	f7fe fdce 	bl	8002ed4 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e0d7      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434a:	4b4b      	ldr	r3, [pc, #300]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0ee      	beq.n	8004334 <HAL_RCC_OscConfig+0x368>
 8004356:	e014      	b.n	8004382 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fe fdbc 	bl	8002ed4 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435e:	e00a      	b.n	8004376 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004360:	f7fe fdb8 	bl	8002ed4 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e0c1      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004376:	4b40      	ldr	r3, [pc, #256]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1ee      	bne.n	8004360 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004382:	7dfb      	ldrb	r3, [r7, #23]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d105      	bne.n	8004394 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004388:	4b3b      	ldr	r3, [pc, #236]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	4a3a      	ldr	r2, [pc, #232]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 800438e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004392:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80ad 	beq.w	80044f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800439e:	4b36      	ldr	r3, [pc, #216]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d060      	beq.n	800446c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d145      	bne.n	800443e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b2:	4b33      	ldr	r3, [pc, #204]	@ (8004480 <HAL_RCC_OscConfig+0x4b4>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fe fd8c 	bl	8002ed4 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fe fd88 	bl	8002ed4 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e093      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	4b29      	ldr	r3, [pc, #164]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	019b      	lsls	r3, r3, #6
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	3b01      	subs	r3, #1
 80043f8:	041b      	lsls	r3, r3, #16
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004400:	061b      	lsls	r3, r3, #24
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004408:	071b      	lsls	r3, r3, #28
 800440a:	491b      	ldr	r1, [pc, #108]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	4313      	orrs	r3, r2
 800440e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004410:	4b1b      	ldr	r3, [pc, #108]	@ (8004480 <HAL_RCC_OscConfig+0x4b4>)
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fe fd5d 	bl	8002ed4 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441e:	f7fe fd59 	bl	8002ed4 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e064      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004430:	4b11      	ldr	r3, [pc, #68]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x452>
 800443c:	e05c      	b.n	80044f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443e:	4b10      	ldr	r3, [pc, #64]	@ (8004480 <HAL_RCC_OscConfig+0x4b4>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fe fd46 	bl	8002ed4 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444c:	f7fe fd42 	bl	8002ed4 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e04d      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445e:	4b06      	ldr	r3, [pc, #24]	@ (8004478 <HAL_RCC_OscConfig+0x4ac>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x480>
 800446a:	e045      	b.n	80044f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d107      	bne.n	8004484 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e040      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
 8004478:	40023800 	.word	0x40023800
 800447c:	40007000 	.word	0x40007000
 8004480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004484:	4b1f      	ldr	r3, [pc, #124]	@ (8004504 <HAL_RCC_OscConfig+0x538>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d030      	beq.n	80044f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d129      	bne.n	80044f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d122      	bne.n	80044f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044bc:	4293      	cmp	r3, r2
 80044be:	d119      	bne.n	80044f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	3b01      	subs	r3, #1
 80044ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d10f      	bne.n	80044f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800

08004508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e07b      	b.n	8004612 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	2b00      	cmp	r3, #0
 8004520:	d108      	bne.n	8004534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800452a:	d009      	beq.n	8004540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	61da      	str	r2, [r3, #28]
 8004532:	e005      	b.n	8004540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fe fb0a 	bl	8002b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004576:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c4:	ea42 0103 	orr.w	r1, r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	f003 0104 	and.w	r1, r3, #4
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	f003 0210 	and.w	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004600:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b088      	sub	sp, #32
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	4613      	mov	r3, r2
 8004628:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800462a:	f7fe fc53 	bl	8002ed4 <HAL_GetTick>
 800462e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d001      	beq.n	8004644 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
 8004642:	e12a      	b.n	800489a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_SPI_Transmit+0x36>
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e122      	b.n	800489a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_SPI_Transmit+0x48>
 800465e:	2302      	movs	r3, #2
 8004660:	e11b      	b.n	800489a <HAL_SPI_Transmit+0x280>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2203      	movs	r2, #3
 800466e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	88fa      	ldrh	r2, [r7, #6]
 8004682:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	88fa      	ldrh	r2, [r7, #6]
 8004688:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046b0:	d10f      	bne.n	80046d2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046dc:	2b40      	cmp	r3, #64	@ 0x40
 80046de:	d007      	beq.n	80046f0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046f8:	d152      	bne.n	80047a0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_SPI_Transmit+0xee>
 8004702:	8b7b      	ldrh	r3, [r7, #26]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d145      	bne.n	8004794 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470c:	881a      	ldrh	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004718:	1c9a      	adds	r2, r3, #2
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800472c:	e032      	b.n	8004794 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b02      	cmp	r3, #2
 800473a:	d112      	bne.n	8004762 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004740:	881a      	ldrh	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474c:	1c9a      	adds	r2, r3, #2
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004760:	e018      	b.n	8004794 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004762:	f7fe fbb7 	bl	8002ed4 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d803      	bhi.n	800477a <HAL_SPI_Transmit+0x160>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d102      	bne.n	8004780 <HAL_SPI_Transmit+0x166>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e082      	b.n	800489a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1c7      	bne.n	800472e <HAL_SPI_Transmit+0x114>
 800479e:	e053      	b.n	8004848 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_SPI_Transmit+0x194>
 80047a8:	8b7b      	ldrh	r3, [r7, #26]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d147      	bne.n	800483e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	330c      	adds	r3, #12
 80047b8:	7812      	ldrb	r2, [r2, #0]
 80047ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80047d4:	e033      	b.n	800483e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d113      	bne.n	800480c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	330c      	adds	r3, #12
 80047ee:	7812      	ldrb	r2, [r2, #0]
 80047f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	86da      	strh	r2, [r3, #54]	@ 0x36
 800480a:	e018      	b.n	800483e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800480c:	f7fe fb62 	bl	8002ed4 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d803      	bhi.n	8004824 <HAL_SPI_Transmit+0x20a>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004822:	d102      	bne.n	800482a <HAL_SPI_Transmit+0x210>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e02d      	b.n	800489a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1c6      	bne.n	80047d6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	6839      	ldr	r1, [r7, #0]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 fbd9 	bl	8005004 <SPI_EndRxTxTransaction>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004898:	2300      	movs	r3, #0
  }
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b088      	sub	sp, #32
 80048a6:	af02      	add	r7, sp, #8
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d001      	beq.n	80048c2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80048be:	2302      	movs	r3, #2
 80048c0:	e104      	b.n	8004acc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048ca:	d112      	bne.n	80048f2 <HAL_SPI_Receive+0x50>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10e      	bne.n	80048f2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2204      	movs	r2, #4
 80048d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048dc:	88fa      	ldrh	r2, [r7, #6]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	4613      	mov	r3, r2
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f8f3 	bl	8004ad4 <HAL_SPI_TransmitReceive>
 80048ee:	4603      	mov	r3, r0
 80048f0:	e0ec      	b.n	8004acc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048f2:	f7fe faef 	bl	8002ed4 <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Receive+0x62>
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0e1      	b.n	8004acc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_SPI_Receive+0x74>
 8004912:	2302      	movs	r3, #2
 8004914:	e0da      	b.n	8004acc <HAL_SPI_Receive+0x22a>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2204      	movs	r2, #4
 8004922:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	88fa      	ldrh	r2, [r7, #6]
 8004936:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004964:	d10f      	bne.n	8004986 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004974:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004984:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004990:	2b40      	cmp	r3, #64	@ 0x40
 8004992:	d007      	beq.n	80049a4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d170      	bne.n	8004a8e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80049ac:	e035      	b.n	8004a1a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d115      	bne.n	80049e8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f103 020c 	add.w	r2, r3, #12
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c8:	7812      	ldrb	r2, [r2, #0]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049e6:	e018      	b.n	8004a1a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049e8:	f7fe fa74 	bl	8002ed4 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d803      	bhi.n	8004a00 <HAL_SPI_Receive+0x15e>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fe:	d102      	bne.n	8004a06 <HAL_SPI_Receive+0x164>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e058      	b.n	8004acc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1c4      	bne.n	80049ae <HAL_SPI_Receive+0x10c>
 8004a24:	e038      	b.n	8004a98 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d113      	bne.n	8004a5c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3e:	b292      	uxth	r2, r2
 8004a40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a46:	1c9a      	adds	r2, r3, #2
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a5a:	e018      	b.n	8004a8e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a5c:	f7fe fa3a 	bl	8002ed4 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d803      	bhi.n	8004a74 <HAL_SPI_Receive+0x1d2>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d102      	bne.n	8004a7a <HAL_SPI_Receive+0x1d8>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e01e      	b.n	8004acc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1c6      	bne.n	8004a26 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	6839      	ldr	r1, [r7, #0]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fa4b 	bl	8004f38 <SPI_EndRxTransaction>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004aca:	2300      	movs	r3, #0
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	@ 0x28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ae6:	f7fe f9f5 	bl	8002ed4 <HAL_GetTick>
 8004aea:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004af2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004afa:	887b      	ldrh	r3, [r7, #2]
 8004afc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004afe:	7ffb      	ldrb	r3, [r7, #31]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d00c      	beq.n	8004b1e <HAL_SPI_TransmitReceive+0x4a>
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b0a:	d106      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x46>
 8004b14:	7ffb      	ldrb	r3, [r7, #31]
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d001      	beq.n	8004b1e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e17f      	b.n	8004e1e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x5c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x5c>
 8004b2a:	887b      	ldrh	r3, [r7, #2]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e174      	b.n	8004e1e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_SPI_TransmitReceive+0x6e>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e16d      	b.n	8004e1e <HAL_SPI_TransmitReceive+0x34a>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d003      	beq.n	8004b5e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2205      	movs	r2, #5
 8004b5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	887a      	ldrh	r2, [r7, #2]
 8004b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	887a      	ldrh	r2, [r7, #2]
 8004b74:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	887a      	ldrh	r2, [r7, #2]
 8004b80:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	887a      	ldrh	r2, [r7, #2]
 8004b86:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ba0:	d007      	beq.n	8004bb2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bba:	d17e      	bne.n	8004cba <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <HAL_SPI_TransmitReceive+0xf6>
 8004bc4:	8afb      	ldrh	r3, [r7, #22]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d16c      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	881a      	ldrh	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	1c9a      	adds	r2, r3, #2
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bee:	e059      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d11b      	bne.n	8004c36 <HAL_SPI_TransmitReceive+0x162>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d016      	beq.n	8004c36 <HAL_SPI_TransmitReceive+0x162>
 8004c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d113      	bne.n	8004c36 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c12:	881a      	ldrh	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1e:	1c9a      	adds	r2, r3, #2
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d119      	bne.n	8004c78 <HAL_SPI_TransmitReceive+0x1a4>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d014      	beq.n	8004c78 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c74:	2301      	movs	r3, #1
 8004c76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c78:	f7fe f92c 	bl	8002ed4 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d80d      	bhi.n	8004ca4 <HAL_SPI_TransmitReceive+0x1d0>
 8004c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d009      	beq.n	8004ca4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e0bc      	b.n	8004e1e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1a0      	bne.n	8004bf0 <HAL_SPI_TransmitReceive+0x11c>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d19b      	bne.n	8004bf0 <HAL_SPI_TransmitReceive+0x11c>
 8004cb8:	e082      	b.n	8004dc0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_SPI_TransmitReceive+0x1f4>
 8004cc2:	8afb      	ldrh	r3, [r7, #22]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d171      	bne.n	8004dac <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	7812      	ldrb	r2, [r2, #0]
 8004cd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cee:	e05d      	b.n	8004dac <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d11c      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x264>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d017      	beq.n	8004d38 <HAL_SPI_TransmitReceive+0x264>
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d114      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d119      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x2a6>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d014      	beq.n	8004d7a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d76:	2301      	movs	r3, #1
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d7a:	f7fe f8ab 	bl	8002ed4 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d803      	bhi.n	8004d92 <HAL_SPI_TransmitReceive+0x2be>
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d90:	d102      	bne.n	8004d98 <HAL_SPI_TransmitReceive+0x2c4>
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e038      	b.n	8004e1e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d19c      	bne.n	8004cf0 <HAL_SPI_TransmitReceive+0x21c>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d197      	bne.n	8004cf0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dc0:	6a3a      	ldr	r2, [r7, #32]
 8004dc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f91d 	bl	8005004 <SPI_EndRxTxTransaction>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e01d      	b.n	8004e1e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
  }
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3728      	adds	r7, #40	@ 0x28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	4613      	mov	r3, r2
 8004e36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e38:	f7fe f84c 	bl	8002ed4 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	4413      	add	r3, r2
 8004e46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e48:	f7fe f844 	bl	8002ed4 <HAL_GetTick>
 8004e4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e4e:	4b39      	ldr	r3, [pc, #228]	@ (8004f34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	015b      	lsls	r3, r3, #5
 8004e54:	0d1b      	lsrs	r3, r3, #20
 8004e56:	69fa      	ldr	r2, [r7, #28]
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e5e:	e054      	b.n	8004f0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e66:	d050      	beq.n	8004f0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e68:	f7fe f834 	bl	8002ed4 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	69fa      	ldr	r2, [r7, #28]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d902      	bls.n	8004e7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d13d      	bne.n	8004efa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e96:	d111      	bne.n	8004ebc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea0:	d004      	beq.n	8004eac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eaa:	d107      	bne.n	8004ebc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec4:	d10f      	bne.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ee4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e017      	b.n	8004f2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4013      	ands	r3, r2
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	bf0c      	ite	eq
 8004f1a:	2301      	moveq	r3, #1
 8004f1c:	2300      	movne	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d19b      	bne.n	8004e60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000004 	.word	0x20000004

08004f38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f4c:	d111      	bne.n	8004f72 <SPI_EndRxTransaction+0x3a>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f56:	d004      	beq.n	8004f62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f60:	d107      	bne.n	8004f72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f7a:	d12a      	bne.n	8004fd2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f84:	d012      	beq.n	8004fac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2180      	movs	r1, #128	@ 0x80
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff ff49 	bl	8004e28 <SPI_WaitFlagStateUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d02d      	beq.n	8004ff8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa0:	f043 0220 	orr.w	r2, r3, #32
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e026      	b.n	8004ffa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f7ff ff36 	bl	8004e28 <SPI_WaitFlagStateUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01a      	beq.n	8004ff8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc6:	f043 0220 	orr.w	r2, r3, #32
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e013      	b.n	8004ffa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2101      	movs	r1, #1
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7ff ff23 	bl	8004e28 <SPI_WaitFlagStateUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d007      	beq.n	8004ff8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fec:	f043 0220 	orr.w	r2, r3, #32
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e000      	b.n	8004ffa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2201      	movs	r2, #1
 8005018:	2102      	movs	r1, #2
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff ff04 	bl	8004e28 <SPI_WaitFlagStateUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502a:	f043 0220 	orr.w	r2, r3, #32
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e032      	b.n	800509c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005036:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <SPI_EndRxTxTransaction+0xa0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1b      	ldr	r2, [pc, #108]	@ (80050a8 <SPI_EndRxTxTransaction+0xa4>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	0d5b      	lsrs	r3, r3, #21
 8005042:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005046:	fb02 f303 	mul.w	r3, r2, r3
 800504a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005054:	d112      	bne.n	800507c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2200      	movs	r2, #0
 800505e:	2180      	movs	r1, #128	@ 0x80
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff fee1 	bl	8004e28 <SPI_WaitFlagStateUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d016      	beq.n	800509a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005070:	f043 0220 	orr.w	r2, r3, #32
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e00f      	b.n	800509c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	3b01      	subs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005092:	2b80      	cmp	r3, #128	@ 0x80
 8005094:	d0f2      	beq.n	800507c <SPI_EndRxTxTransaction+0x78>
 8005096:	e000      	b.n	800509a <SPI_EndRxTxTransaction+0x96>
        break;
 8005098:	bf00      	nop
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000004 	.word	0x20000004
 80050a8:	165e9f81 	.word	0x165e9f81

080050ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e041      	b.n	8005142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f839 	bl	800514a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f000 f9c0 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	d001      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e04e      	b.n	8005216 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a23      	ldr	r2, [pc, #140]	@ (8005224 <HAL_TIM_Base_Start_IT+0xc4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d022      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a2:	d01d      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005228 <HAL_TIM_Base_Start_IT+0xc8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d018      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1e      	ldr	r2, [pc, #120]	@ (800522c <HAL_TIM_Base_Start_IT+0xcc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d013      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005230 <HAL_TIM_Base_Start_IT+0xd0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00e      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005234 <HAL_TIM_Base_Start_IT+0xd4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d009      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a19      	ldr	r2, [pc, #100]	@ (8005238 <HAL_TIM_Base_Start_IT+0xd8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a18      	ldr	r2, [pc, #96]	@ (800523c <HAL_TIM_Base_Start_IT+0xdc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d111      	bne.n	8005204 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b06      	cmp	r3, #6
 80051f0:	d010      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0201 	orr.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005202:	e007      	b.n	8005214 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40010000 	.word	0x40010000
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40010400 	.word	0x40010400
 8005238:	40014000 	.word	0x40014000
 800523c:	40001800 	.word	0x40001800

08005240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d020      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01b      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0202 	mvn.w	r2, #2
 8005274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f8d2 	bl	8005434 <HAL_TIM_IC_CaptureCallback>
 8005290:	e005      	b.n	800529e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f8c4 	bl	8005420 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f8d5 	bl	8005448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d020      	beq.n	80052f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01b      	beq.n	80052f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0204 	mvn.w	r2, #4
 80052c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f8ac 	bl	8005434 <HAL_TIM_IC_CaptureCallback>
 80052dc:	e005      	b.n	80052ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f89e 	bl	8005420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f8af 	bl	8005448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d020      	beq.n	800533c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01b      	beq.n	800533c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0208 	mvn.w	r2, #8
 800530c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2204      	movs	r2, #4
 8005312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f886 	bl	8005434 <HAL_TIM_IC_CaptureCallback>
 8005328:	e005      	b.n	8005336 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f878 	bl	8005420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f889 	bl	8005448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b00      	cmp	r3, #0
 8005344:	d020      	beq.n	8005388 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01b      	beq.n	8005388 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0210 	mvn.w	r2, #16
 8005358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2208      	movs	r2, #8
 800535e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f860 	bl	8005434 <HAL_TIM_IC_CaptureCallback>
 8005374:	e005      	b.n	8005382 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f852 	bl	8005420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f863 	bl	8005448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00c      	beq.n	80053ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0201 	mvn.w	r2, #1
 80053a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fd fb14 	bl	80029d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00c      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f906 	bl	80055dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00c      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f834 	bl	800545c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0220 	mvn.w	r2, #32
 8005410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f8d8 	bl	80055c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a46      	ldr	r2, [pc, #280]	@ (800559c <TIM_Base_SetConfig+0x12c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800548e:	d00f      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a43      	ldr	r2, [pc, #268]	@ (80055a0 <TIM_Base_SetConfig+0x130>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00b      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a42      	ldr	r2, [pc, #264]	@ (80055a4 <TIM_Base_SetConfig+0x134>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a41      	ldr	r2, [pc, #260]	@ (80055a8 <TIM_Base_SetConfig+0x138>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a40      	ldr	r2, [pc, #256]	@ (80055ac <TIM_Base_SetConfig+0x13c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d108      	bne.n	80054c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a35      	ldr	r2, [pc, #212]	@ (800559c <TIM_Base_SetConfig+0x12c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d02b      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d0:	d027      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a32      	ldr	r2, [pc, #200]	@ (80055a0 <TIM_Base_SetConfig+0x130>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d023      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a31      	ldr	r2, [pc, #196]	@ (80055a4 <TIM_Base_SetConfig+0x134>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01f      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a30      	ldr	r2, [pc, #192]	@ (80055a8 <TIM_Base_SetConfig+0x138>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01b      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2f      	ldr	r2, [pc, #188]	@ (80055ac <TIM_Base_SetConfig+0x13c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d017      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2e      	ldr	r2, [pc, #184]	@ (80055b0 <TIM_Base_SetConfig+0x140>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2d      	ldr	r2, [pc, #180]	@ (80055b4 <TIM_Base_SetConfig+0x144>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00f      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2c      	ldr	r2, [pc, #176]	@ (80055b8 <TIM_Base_SetConfig+0x148>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00b      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2b      	ldr	r2, [pc, #172]	@ (80055bc <TIM_Base_SetConfig+0x14c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d007      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2a      	ldr	r2, [pc, #168]	@ (80055c0 <TIM_Base_SetConfig+0x150>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a29      	ldr	r2, [pc, #164]	@ (80055c4 <TIM_Base_SetConfig+0x154>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d108      	bne.n	8005534 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a10      	ldr	r2, [pc, #64]	@ (800559c <TIM_Base_SetConfig+0x12c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_Base_SetConfig+0xf8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a12      	ldr	r2, [pc, #72]	@ (80055ac <TIM_Base_SetConfig+0x13c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d103      	bne.n	8005570 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b01      	cmp	r3, #1
 8005580:	d105      	bne.n	800558e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	611a      	str	r2, [r3, #16]
  }
}
 800558e:	bf00      	nop
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40010000 	.word	0x40010000
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	40010400 	.word	0x40010400
 80055b0:	40014000 	.word	0x40014000
 80055b4:	40014400 	.word	0x40014400
 80055b8:	40014800 	.word	0x40014800
 80055bc:	40001800 	.word	0x40001800
 80055c0:	40001c00 	.word	0x40001c00
 80055c4:	40002000 	.word	0x40002000

080055c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e042      	b.n	8005688 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fd faf4 	bl	8002c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2224      	movs	r2, #36	@ 0x24
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f973 	bl	8005920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695a      	ldr	r2, [r3, #20]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	@ 0x28
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d175      	bne.n	800579c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_UART_Transmit+0x2c>
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e06e      	b.n	800579e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2221      	movs	r2, #33	@ 0x21
 80056ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ce:	f7fd fc01 	bl	8002ed4 <HAL_GetTick>
 80056d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	88fa      	ldrh	r2, [r7, #6]
 80056d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	88fa      	ldrh	r2, [r7, #6]
 80056de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e8:	d108      	bne.n	80056fc <HAL_UART_Transmit+0x6c>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d104      	bne.n	80056fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	e003      	b.n	8005704 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005704:	e02e      	b.n	8005764 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2200      	movs	r2, #0
 800570e:	2180      	movs	r1, #128	@ 0x80
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 f848 	bl	80057a6 <UART_WaitOnFlagUntilTimeout>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e03a      	b.n	800579e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10b      	bne.n	8005746 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800573c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	3302      	adds	r3, #2
 8005742:	61bb      	str	r3, [r7, #24]
 8005744:	e007      	b.n	8005756 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	3301      	adds	r3, #1
 8005754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1cb      	bne.n	8005706 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2200      	movs	r2, #0
 8005776:	2140      	movs	r1, #64	@ 0x40
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f814 	bl	80057a6 <UART_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e006      	b.n	800579e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	e000      	b.n	800579e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800579c:	2302      	movs	r3, #2
  }
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3720      	adds	r7, #32
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b086      	sub	sp, #24
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	4613      	mov	r3, r2
 80057b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b6:	e03b      	b.n	8005830 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057be:	d037      	beq.n	8005830 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c0:	f7fd fb88 	bl	8002ed4 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	6a3a      	ldr	r2, [r7, #32]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d302      	bcc.n	80057d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e03a      	b.n	8005850 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d023      	beq.n	8005830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b80      	cmp	r3, #128	@ 0x80
 80057ec:	d020      	beq.n	8005830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b40      	cmp	r3, #64	@ 0x40
 80057f2:	d01d      	beq.n	8005830 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d116      	bne.n	8005830 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f81d 	bl	8005858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2208      	movs	r2, #8
 8005822:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e00f      	b.n	8005850 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4013      	ands	r3, r2
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	429a      	cmp	r2, r3
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	429a      	cmp	r2, r3
 800584c:	d0b4      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005858:	b480      	push	{r7}
 800585a:	b095      	sub	sp, #84	@ 0x54
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	330c      	adds	r3, #12
 8005866:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005880:	643a      	str	r2, [r7, #64]	@ 0x40
 8005882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005886:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800588e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e5      	bne.n	8005860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3314      	adds	r3, #20
 800589a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3314      	adds	r3, #20
 80058b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e5      	bne.n	8005894 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d119      	bne.n	8005904 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f023 0310 	bic.w	r3, r3, #16
 80058e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058f0:	61ba      	str	r2, [r7, #24]
 80058f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6979      	ldr	r1, [r7, #20]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	613b      	str	r3, [r7, #16]
   return(result);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e5      	bne.n	80058d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005912:	bf00      	nop
 8005914:	3754      	adds	r7, #84	@ 0x54
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005924:	b0c0      	sub	sp, #256	@ 0x100
 8005926:	af00      	add	r7, sp, #0
 8005928:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593c:	68d9      	ldr	r1, [r3, #12]
 800593e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	ea40 0301 	orr.w	r3, r0, r1
 8005948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800594a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	431a      	orrs	r2, r3
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	431a      	orrs	r2, r3
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005978:	f021 010c 	bic.w	r1, r1, #12
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005986:	430b      	orrs	r3, r1
 8005988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599a:	6999      	ldr	r1, [r3, #24]
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	ea40 0301 	orr.w	r3, r0, r1
 80059a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b8f      	ldr	r3, [pc, #572]	@ (8005bec <UART_SetConfig+0x2cc>)
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d005      	beq.n	80059c0 <UART_SetConfig+0xa0>
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4b8d      	ldr	r3, [pc, #564]	@ (8005bf0 <UART_SetConfig+0x2d0>)
 80059bc:	429a      	cmp	r2, r3
 80059be:	d104      	bne.n	80059ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059c0:	f7fe f88e 	bl	8003ae0 <HAL_RCC_GetPCLK2Freq>
 80059c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059c8:	e003      	b.n	80059d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059ca:	f7fe f875 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 80059ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059dc:	f040 810c 	bne.w	8005bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059f2:	4622      	mov	r2, r4
 80059f4:	462b      	mov	r3, r5
 80059f6:	1891      	adds	r1, r2, r2
 80059f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059fa:	415b      	adcs	r3, r3
 80059fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a02:	4621      	mov	r1, r4
 8005a04:	eb12 0801 	adds.w	r8, r2, r1
 8005a08:	4629      	mov	r1, r5
 8005a0a:	eb43 0901 	adc.w	r9, r3, r1
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a22:	4690      	mov	r8, r2
 8005a24:	4699      	mov	r9, r3
 8005a26:	4623      	mov	r3, r4
 8005a28:	eb18 0303 	adds.w	r3, r8, r3
 8005a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a30:	462b      	mov	r3, r5
 8005a32:	eb49 0303 	adc.w	r3, r9, r3
 8005a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a4e:	460b      	mov	r3, r1
 8005a50:	18db      	adds	r3, r3, r3
 8005a52:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a54:	4613      	mov	r3, r2
 8005a56:	eb42 0303 	adc.w	r3, r2, r3
 8005a5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a64:	f7fb f910 	bl	8000c88 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4b61      	ldr	r3, [pc, #388]	@ (8005bf4 <UART_SetConfig+0x2d4>)
 8005a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	011c      	lsls	r4, r3, #4
 8005a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a88:	4642      	mov	r2, r8
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	1891      	adds	r1, r2, r2
 8005a8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a90:	415b      	adcs	r3, r3
 8005a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a98:	4641      	mov	r1, r8
 8005a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ab8:	4692      	mov	sl, r2
 8005aba:	469b      	mov	fp, r3
 8005abc:	4643      	mov	r3, r8
 8005abe:	eb1a 0303 	adds.w	r3, sl, r3
 8005ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ac6:	464b      	mov	r3, r9
 8005ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8005acc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005adc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	18db      	adds	r3, r3, r3
 8005ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aea:	4613      	mov	r3, r2
 8005aec:	eb42 0303 	adc.w	r3, r2, r3
 8005af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005afa:	f7fb f8c5 	bl	8000c88 <__aeabi_uldivmod>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4611      	mov	r1, r2
 8005b04:	4b3b      	ldr	r3, [pc, #236]	@ (8005bf4 <UART_SetConfig+0x2d4>)
 8005b06:	fba3 2301 	umull	r2, r3, r3, r1
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	2264      	movs	r2, #100	@ 0x64
 8005b0e:	fb02 f303 	mul.w	r3, r2, r3
 8005b12:	1acb      	subs	r3, r1, r3
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b1a:	4b36      	ldr	r3, [pc, #216]	@ (8005bf4 <UART_SetConfig+0x2d4>)
 8005b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b28:	441c      	add	r4, r3
 8005b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	464b      	mov	r3, r9
 8005b40:	1891      	adds	r1, r2, r2
 8005b42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b44:	415b      	adcs	r3, r3
 8005b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b4c:	4641      	mov	r1, r8
 8005b4e:	1851      	adds	r1, r2, r1
 8005b50:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b52:	4649      	mov	r1, r9
 8005b54:	414b      	adcs	r3, r1
 8005b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b64:	4659      	mov	r1, fp
 8005b66:	00cb      	lsls	r3, r1, #3
 8005b68:	4651      	mov	r1, sl
 8005b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b6e:	4651      	mov	r1, sl
 8005b70:	00ca      	lsls	r2, r1, #3
 8005b72:	4610      	mov	r0, r2
 8005b74:	4619      	mov	r1, r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	4642      	mov	r2, r8
 8005b7a:	189b      	adds	r3, r3, r2
 8005b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b80:	464b      	mov	r3, r9
 8005b82:	460a      	mov	r2, r1
 8005b84:	eb42 0303 	adc.w	r3, r2, r3
 8005b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	18db      	adds	r3, r3, r3
 8005ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	eb42 0303 	adc.w	r3, r2, r3
 8005bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005bb6:	f7fb f867 	bl	8000c88 <__aeabi_uldivmod>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <UART_SetConfig+0x2d4>)
 8005bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	2164      	movs	r1, #100	@ 0x64
 8005bc8:	fb01 f303 	mul.w	r3, r1, r3
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	3332      	adds	r3, #50	@ 0x32
 8005bd2:	4a08      	ldr	r2, [pc, #32]	@ (8005bf4 <UART_SetConfig+0x2d4>)
 8005bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	f003 0207 	and.w	r2, r3, #7
 8005bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4422      	add	r2, r4
 8005be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005be8:	e106      	b.n	8005df8 <UART_SetConfig+0x4d8>
 8005bea:	bf00      	nop
 8005bec:	40011000 	.word	0x40011000
 8005bf0:	40011400 	.word	0x40011400
 8005bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c0a:	4642      	mov	r2, r8
 8005c0c:	464b      	mov	r3, r9
 8005c0e:	1891      	adds	r1, r2, r2
 8005c10:	6239      	str	r1, [r7, #32]
 8005c12:	415b      	adcs	r3, r3
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c1a:	4641      	mov	r1, r8
 8005c1c:	1854      	adds	r4, r2, r1
 8005c1e:	4649      	mov	r1, r9
 8005c20:	eb43 0501 	adc.w	r5, r3, r1
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	00eb      	lsls	r3, r5, #3
 8005c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c32:	00e2      	lsls	r2, r4, #3
 8005c34:	4614      	mov	r4, r2
 8005c36:	461d      	mov	r5, r3
 8005c38:	4643      	mov	r3, r8
 8005c3a:	18e3      	adds	r3, r4, r3
 8005c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c40:	464b      	mov	r3, r9
 8005c42:	eb45 0303 	adc.w	r3, r5, r3
 8005c46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c66:	4629      	mov	r1, r5
 8005c68:	008b      	lsls	r3, r1, #2
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c70:	4621      	mov	r1, r4
 8005c72:	008a      	lsls	r2, r1, #2
 8005c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c78:	f7fb f806 	bl	8000c88 <__aeabi_uldivmod>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4b60      	ldr	r3, [pc, #384]	@ (8005e04 <UART_SetConfig+0x4e4>)
 8005c82:	fba3 2302 	umull	r2, r3, r3, r2
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	011c      	lsls	r4, r3, #4
 8005c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	1891      	adds	r1, r2, r2
 8005ca2:	61b9      	str	r1, [r7, #24]
 8005ca4:	415b      	adcs	r3, r3
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cac:	4641      	mov	r1, r8
 8005cae:	1851      	adds	r1, r2, r1
 8005cb0:	6139      	str	r1, [r7, #16]
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	414b      	adcs	r3, r1
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cc4:	4659      	mov	r1, fp
 8005cc6:	00cb      	lsls	r3, r1, #3
 8005cc8:	4651      	mov	r1, sl
 8005cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cce:	4651      	mov	r1, sl
 8005cd0:	00ca      	lsls	r2, r1, #3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	4642      	mov	r2, r8
 8005cda:	189b      	adds	r3, r3, r2
 8005cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ce0:	464b      	mov	r3, r9
 8005ce2:	460a      	mov	r2, r1
 8005ce4:	eb42 0303 	adc.w	r3, r2, r3
 8005ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d04:	4649      	mov	r1, r9
 8005d06:	008b      	lsls	r3, r1, #2
 8005d08:	4641      	mov	r1, r8
 8005d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d0e:	4641      	mov	r1, r8
 8005d10:	008a      	lsls	r2, r1, #2
 8005d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d16:	f7fa ffb7 	bl	8000c88 <__aeabi_uldivmod>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4b38      	ldr	r3, [pc, #224]	@ (8005e04 <UART_SetConfig+0x4e4>)
 8005d22:	fba3 2301 	umull	r2, r3, r3, r1
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	2264      	movs	r2, #100	@ 0x64
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	1acb      	subs	r3, r1, r3
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	3332      	adds	r3, #50	@ 0x32
 8005d34:	4a33      	ldr	r2, [pc, #204]	@ (8005e04 <UART_SetConfig+0x4e4>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d40:	441c      	add	r4, r3
 8005d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d46:	2200      	movs	r2, #0
 8005d48:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d50:	4642      	mov	r2, r8
 8005d52:	464b      	mov	r3, r9
 8005d54:	1891      	adds	r1, r2, r2
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	415b      	adcs	r3, r3
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d60:	4641      	mov	r1, r8
 8005d62:	1851      	adds	r1, r2, r1
 8005d64:	6039      	str	r1, [r7, #0]
 8005d66:	4649      	mov	r1, r9
 8005d68:	414b      	adcs	r3, r1
 8005d6a:	607b      	str	r3, [r7, #4]
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d78:	4659      	mov	r1, fp
 8005d7a:	00cb      	lsls	r3, r1, #3
 8005d7c:	4651      	mov	r1, sl
 8005d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d82:	4651      	mov	r1, sl
 8005d84:	00ca      	lsls	r2, r1, #3
 8005d86:	4610      	mov	r0, r2
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	189b      	adds	r3, r3, r2
 8005d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d92:	464b      	mov	r3, r9
 8005d94:	460a      	mov	r2, r1
 8005d96:	eb42 0303 	adc.w	r3, r2, r3
 8005d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005da6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005db4:	4649      	mov	r1, r9
 8005db6:	008b      	lsls	r3, r1, #2
 8005db8:	4641      	mov	r1, r8
 8005dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dbe:	4641      	mov	r1, r8
 8005dc0:	008a      	lsls	r2, r1, #2
 8005dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005dc6:	f7fa ff5f 	bl	8000c88 <__aeabi_uldivmod>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4b0d      	ldr	r3, [pc, #52]	@ (8005e04 <UART_SetConfig+0x4e4>)
 8005dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	2164      	movs	r1, #100	@ 0x64
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	3332      	adds	r3, #50	@ 0x32
 8005de2:	4a08      	ldr	r2, [pc, #32]	@ (8005e04 <UART_SetConfig+0x4e4>)
 8005de4:	fba2 2303 	umull	r2, r3, r2, r3
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	f003 020f 	and.w	r2, r3, #15
 8005dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4422      	add	r2, r4
 8005df6:	609a      	str	r2, [r3, #8]
}
 8005df8:	bf00      	nop
 8005dfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e04:	51eb851f 	.word	0x51eb851f

08005e08 <calloc>:
 8005e08:	4b02      	ldr	r3, [pc, #8]	@ (8005e14 <calloc+0xc>)
 8005e0a:	460a      	mov	r2, r1
 8005e0c:	4601      	mov	r1, r0
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	f000 b802 	b.w	8005e18 <_calloc_r>
 8005e14:	2000001c 	.word	0x2000001c

08005e18 <_calloc_r>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	fba1 5402 	umull	r5, r4, r1, r2
 8005e1e:	b93c      	cbnz	r4, 8005e30 <_calloc_r+0x18>
 8005e20:	4629      	mov	r1, r5
 8005e22:	f000 f83f 	bl	8005ea4 <_malloc_r>
 8005e26:	4606      	mov	r6, r0
 8005e28:	b928      	cbnz	r0, 8005e36 <_calloc_r+0x1e>
 8005e2a:	2600      	movs	r6, #0
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	220c      	movs	r2, #12
 8005e32:	6002      	str	r2, [r0, #0]
 8005e34:	e7f9      	b.n	8005e2a <_calloc_r+0x12>
 8005e36:	462a      	mov	r2, r5
 8005e38:	4621      	mov	r1, r4
 8005e3a:	f000 fe3c 	bl	8006ab6 <memset>
 8005e3e:	e7f5      	b.n	8005e2c <_calloc_r+0x14>

08005e40 <malloc>:
 8005e40:	4b02      	ldr	r3, [pc, #8]	@ (8005e4c <malloc+0xc>)
 8005e42:	4601      	mov	r1, r0
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	f000 b82d 	b.w	8005ea4 <_malloc_r>
 8005e4a:	bf00      	nop
 8005e4c:	2000001c 	.word	0x2000001c

08005e50 <free>:
 8005e50:	4b02      	ldr	r3, [pc, #8]	@ (8005e5c <free+0xc>)
 8005e52:	4601      	mov	r1, r0
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	f001 bd13 	b.w	8007880 <_free_r>
 8005e5a:	bf00      	nop
 8005e5c:	2000001c 	.word	0x2000001c

08005e60 <sbrk_aligned>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	4e0f      	ldr	r6, [pc, #60]	@ (8005ea0 <sbrk_aligned+0x40>)
 8005e64:	460c      	mov	r4, r1
 8005e66:	6831      	ldr	r1, [r6, #0]
 8005e68:	4605      	mov	r5, r0
 8005e6a:	b911      	cbnz	r1, 8005e72 <sbrk_aligned+0x12>
 8005e6c:	f000 fe64 	bl	8006b38 <_sbrk_r>
 8005e70:	6030      	str	r0, [r6, #0]
 8005e72:	4621      	mov	r1, r4
 8005e74:	4628      	mov	r0, r5
 8005e76:	f000 fe5f 	bl	8006b38 <_sbrk_r>
 8005e7a:	1c43      	adds	r3, r0, #1
 8005e7c:	d103      	bne.n	8005e86 <sbrk_aligned+0x26>
 8005e7e:	f04f 34ff 	mov.w	r4, #4294967295
 8005e82:	4620      	mov	r0, r4
 8005e84:	bd70      	pop	{r4, r5, r6, pc}
 8005e86:	1cc4      	adds	r4, r0, #3
 8005e88:	f024 0403 	bic.w	r4, r4, #3
 8005e8c:	42a0      	cmp	r0, r4
 8005e8e:	d0f8      	beq.n	8005e82 <sbrk_aligned+0x22>
 8005e90:	1a21      	subs	r1, r4, r0
 8005e92:	4628      	mov	r0, r5
 8005e94:	f000 fe50 	bl	8006b38 <_sbrk_r>
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d1f2      	bne.n	8005e82 <sbrk_aligned+0x22>
 8005e9c:	e7ef      	b.n	8005e7e <sbrk_aligned+0x1e>
 8005e9e:	bf00      	nop
 8005ea0:	20000800 	.word	0x20000800

08005ea4 <_malloc_r>:
 8005ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea8:	1ccd      	adds	r5, r1, #3
 8005eaa:	f025 0503 	bic.w	r5, r5, #3
 8005eae:	3508      	adds	r5, #8
 8005eb0:	2d0c      	cmp	r5, #12
 8005eb2:	bf38      	it	cc
 8005eb4:	250c      	movcc	r5, #12
 8005eb6:	2d00      	cmp	r5, #0
 8005eb8:	4606      	mov	r6, r0
 8005eba:	db01      	blt.n	8005ec0 <_malloc_r+0x1c>
 8005ebc:	42a9      	cmp	r1, r5
 8005ebe:	d904      	bls.n	8005eca <_malloc_r+0x26>
 8005ec0:	230c      	movs	r3, #12
 8005ec2:	6033      	str	r3, [r6, #0]
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fa0 <_malloc_r+0xfc>
 8005ece:	f000 f869 	bl	8005fa4 <__malloc_lock>
 8005ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ed6:	461c      	mov	r4, r3
 8005ed8:	bb44      	cbnz	r4, 8005f2c <_malloc_r+0x88>
 8005eda:	4629      	mov	r1, r5
 8005edc:	4630      	mov	r0, r6
 8005ede:	f7ff ffbf 	bl	8005e60 <sbrk_aligned>
 8005ee2:	1c43      	adds	r3, r0, #1
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	d158      	bne.n	8005f9a <_malloc_r+0xf6>
 8005ee8:	f8d8 4000 	ldr.w	r4, [r8]
 8005eec:	4627      	mov	r7, r4
 8005eee:	2f00      	cmp	r7, #0
 8005ef0:	d143      	bne.n	8005f7a <_malloc_r+0xd6>
 8005ef2:	2c00      	cmp	r4, #0
 8005ef4:	d04b      	beq.n	8005f8e <_malloc_r+0xea>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	4639      	mov	r1, r7
 8005efa:	4630      	mov	r0, r6
 8005efc:	eb04 0903 	add.w	r9, r4, r3
 8005f00:	f000 fe1a 	bl	8006b38 <_sbrk_r>
 8005f04:	4581      	cmp	r9, r0
 8005f06:	d142      	bne.n	8005f8e <_malloc_r+0xea>
 8005f08:	6821      	ldr	r1, [r4, #0]
 8005f0a:	1a6d      	subs	r5, r5, r1
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f7ff ffa6 	bl	8005e60 <sbrk_aligned>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d03a      	beq.n	8005f8e <_malloc_r+0xea>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	442b      	add	r3, r5
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	bb62      	cbnz	r2, 8005f80 <_malloc_r+0xdc>
 8005f26:	f8c8 7000 	str.w	r7, [r8]
 8005f2a:	e00f      	b.n	8005f4c <_malloc_r+0xa8>
 8005f2c:	6822      	ldr	r2, [r4, #0]
 8005f2e:	1b52      	subs	r2, r2, r5
 8005f30:	d420      	bmi.n	8005f74 <_malloc_r+0xd0>
 8005f32:	2a0b      	cmp	r2, #11
 8005f34:	d917      	bls.n	8005f66 <_malloc_r+0xc2>
 8005f36:	1961      	adds	r1, r4, r5
 8005f38:	42a3      	cmp	r3, r4
 8005f3a:	6025      	str	r5, [r4, #0]
 8005f3c:	bf18      	it	ne
 8005f3e:	6059      	strne	r1, [r3, #4]
 8005f40:	6863      	ldr	r3, [r4, #4]
 8005f42:	bf08      	it	eq
 8005f44:	f8c8 1000 	streq.w	r1, [r8]
 8005f48:	5162      	str	r2, [r4, r5]
 8005f4a:	604b      	str	r3, [r1, #4]
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f000 f82f 	bl	8005fb0 <__malloc_unlock>
 8005f52:	f104 000b 	add.w	r0, r4, #11
 8005f56:	1d23      	adds	r3, r4, #4
 8005f58:	f020 0007 	bic.w	r0, r0, #7
 8005f5c:	1ac2      	subs	r2, r0, r3
 8005f5e:	bf1c      	itt	ne
 8005f60:	1a1b      	subne	r3, r3, r0
 8005f62:	50a3      	strne	r3, [r4, r2]
 8005f64:	e7af      	b.n	8005ec6 <_malloc_r+0x22>
 8005f66:	6862      	ldr	r2, [r4, #4]
 8005f68:	42a3      	cmp	r3, r4
 8005f6a:	bf0c      	ite	eq
 8005f6c:	f8c8 2000 	streq.w	r2, [r8]
 8005f70:	605a      	strne	r2, [r3, #4]
 8005f72:	e7eb      	b.n	8005f4c <_malloc_r+0xa8>
 8005f74:	4623      	mov	r3, r4
 8005f76:	6864      	ldr	r4, [r4, #4]
 8005f78:	e7ae      	b.n	8005ed8 <_malloc_r+0x34>
 8005f7a:	463c      	mov	r4, r7
 8005f7c:	687f      	ldr	r7, [r7, #4]
 8005f7e:	e7b6      	b.n	8005eee <_malloc_r+0x4a>
 8005f80:	461a      	mov	r2, r3
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	d1fb      	bne.n	8005f80 <_malloc_r+0xdc>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	6053      	str	r3, [r2, #4]
 8005f8c:	e7de      	b.n	8005f4c <_malloc_r+0xa8>
 8005f8e:	230c      	movs	r3, #12
 8005f90:	6033      	str	r3, [r6, #0]
 8005f92:	4630      	mov	r0, r6
 8005f94:	f000 f80c 	bl	8005fb0 <__malloc_unlock>
 8005f98:	e794      	b.n	8005ec4 <_malloc_r+0x20>
 8005f9a:	6005      	str	r5, [r0, #0]
 8005f9c:	e7d6      	b.n	8005f4c <_malloc_r+0xa8>
 8005f9e:	bf00      	nop
 8005fa0:	20000804 	.word	0x20000804

08005fa4 <__malloc_lock>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	@ (8005fac <__malloc_lock+0x8>)
 8005fa6:	f000 be0e 	b.w	8006bc6 <__retarget_lock_acquire_recursive>
 8005faa:	bf00      	nop
 8005fac:	20000948 	.word	0x20000948

08005fb0 <__malloc_unlock>:
 8005fb0:	4801      	ldr	r0, [pc, #4]	@ (8005fb8 <__malloc_unlock+0x8>)
 8005fb2:	f000 be09 	b.w	8006bc8 <__retarget_lock_release_recursive>
 8005fb6:	bf00      	nop
 8005fb8:	20000948 	.word	0x20000948

08005fbc <__cvt>:
 8005fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	ec57 6b10 	vmov	r6, r7, d0
 8005fc4:	2f00      	cmp	r7, #0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	4619      	mov	r1, r3
 8005fca:	463b      	mov	r3, r7
 8005fcc:	bfbb      	ittet	lt
 8005fce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005fd2:	461f      	movlt	r7, r3
 8005fd4:	2300      	movge	r3, #0
 8005fd6:	232d      	movlt	r3, #45	@ 0x2d
 8005fd8:	700b      	strb	r3, [r1, #0]
 8005fda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fdc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005fe0:	4691      	mov	r9, r2
 8005fe2:	f023 0820 	bic.w	r8, r3, #32
 8005fe6:	bfbc      	itt	lt
 8005fe8:	4632      	movlt	r2, r6
 8005fea:	4616      	movlt	r6, r2
 8005fec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ff0:	d005      	beq.n	8005ffe <__cvt+0x42>
 8005ff2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005ff6:	d100      	bne.n	8005ffa <__cvt+0x3e>
 8005ff8:	3401      	adds	r4, #1
 8005ffa:	2102      	movs	r1, #2
 8005ffc:	e000      	b.n	8006000 <__cvt+0x44>
 8005ffe:	2103      	movs	r1, #3
 8006000:	ab03      	add	r3, sp, #12
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	ab02      	add	r3, sp, #8
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	ec47 6b10 	vmov	d0, r6, r7
 800600c:	4653      	mov	r3, sl
 800600e:	4622      	mov	r2, r4
 8006010:	f000 fe72 	bl	8006cf8 <_dtoa_r>
 8006014:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006018:	4605      	mov	r5, r0
 800601a:	d119      	bne.n	8006050 <__cvt+0x94>
 800601c:	f019 0f01 	tst.w	r9, #1
 8006020:	d00e      	beq.n	8006040 <__cvt+0x84>
 8006022:	eb00 0904 	add.w	r9, r0, r4
 8006026:	2200      	movs	r2, #0
 8006028:	2300      	movs	r3, #0
 800602a:	4630      	mov	r0, r6
 800602c:	4639      	mov	r1, r7
 800602e:	f7fa fd6b 	bl	8000b08 <__aeabi_dcmpeq>
 8006032:	b108      	cbz	r0, 8006038 <__cvt+0x7c>
 8006034:	f8cd 900c 	str.w	r9, [sp, #12]
 8006038:	2230      	movs	r2, #48	@ 0x30
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	454b      	cmp	r3, r9
 800603e:	d31e      	bcc.n	800607e <__cvt+0xc2>
 8006040:	9b03      	ldr	r3, [sp, #12]
 8006042:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006044:	1b5b      	subs	r3, r3, r5
 8006046:	4628      	mov	r0, r5
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	b004      	add	sp, #16
 800604c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006050:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006054:	eb00 0904 	add.w	r9, r0, r4
 8006058:	d1e5      	bne.n	8006026 <__cvt+0x6a>
 800605a:	7803      	ldrb	r3, [r0, #0]
 800605c:	2b30      	cmp	r3, #48	@ 0x30
 800605e:	d10a      	bne.n	8006076 <__cvt+0xba>
 8006060:	2200      	movs	r2, #0
 8006062:	2300      	movs	r3, #0
 8006064:	4630      	mov	r0, r6
 8006066:	4639      	mov	r1, r7
 8006068:	f7fa fd4e 	bl	8000b08 <__aeabi_dcmpeq>
 800606c:	b918      	cbnz	r0, 8006076 <__cvt+0xba>
 800606e:	f1c4 0401 	rsb	r4, r4, #1
 8006072:	f8ca 4000 	str.w	r4, [sl]
 8006076:	f8da 3000 	ldr.w	r3, [sl]
 800607a:	4499      	add	r9, r3
 800607c:	e7d3      	b.n	8006026 <__cvt+0x6a>
 800607e:	1c59      	adds	r1, r3, #1
 8006080:	9103      	str	r1, [sp, #12]
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e7d9      	b.n	800603a <__cvt+0x7e>

08006086 <__exponent>:
 8006086:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006088:	2900      	cmp	r1, #0
 800608a:	bfba      	itte	lt
 800608c:	4249      	neglt	r1, r1
 800608e:	232d      	movlt	r3, #45	@ 0x2d
 8006090:	232b      	movge	r3, #43	@ 0x2b
 8006092:	2909      	cmp	r1, #9
 8006094:	7002      	strb	r2, [r0, #0]
 8006096:	7043      	strb	r3, [r0, #1]
 8006098:	dd29      	ble.n	80060ee <__exponent+0x68>
 800609a:	f10d 0307 	add.w	r3, sp, #7
 800609e:	461d      	mov	r5, r3
 80060a0:	270a      	movs	r7, #10
 80060a2:	461a      	mov	r2, r3
 80060a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80060a8:	fb07 1416 	mls	r4, r7, r6, r1
 80060ac:	3430      	adds	r4, #48	@ 0x30
 80060ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 80060b2:	460c      	mov	r4, r1
 80060b4:	2c63      	cmp	r4, #99	@ 0x63
 80060b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80060ba:	4631      	mov	r1, r6
 80060bc:	dcf1      	bgt.n	80060a2 <__exponent+0x1c>
 80060be:	3130      	adds	r1, #48	@ 0x30
 80060c0:	1e94      	subs	r4, r2, #2
 80060c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80060c6:	1c41      	adds	r1, r0, #1
 80060c8:	4623      	mov	r3, r4
 80060ca:	42ab      	cmp	r3, r5
 80060cc:	d30a      	bcc.n	80060e4 <__exponent+0x5e>
 80060ce:	f10d 0309 	add.w	r3, sp, #9
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	42ac      	cmp	r4, r5
 80060d6:	bf88      	it	hi
 80060d8:	2300      	movhi	r3, #0
 80060da:	3302      	adds	r3, #2
 80060dc:	4403      	add	r3, r0
 80060de:	1a18      	subs	r0, r3, r0
 80060e0:	b003      	add	sp, #12
 80060e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060ec:	e7ed      	b.n	80060ca <__exponent+0x44>
 80060ee:	2330      	movs	r3, #48	@ 0x30
 80060f0:	3130      	adds	r1, #48	@ 0x30
 80060f2:	7083      	strb	r3, [r0, #2]
 80060f4:	70c1      	strb	r1, [r0, #3]
 80060f6:	1d03      	adds	r3, r0, #4
 80060f8:	e7f1      	b.n	80060de <__exponent+0x58>
	...

080060fc <_printf_float>:
 80060fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006100:	b08d      	sub	sp, #52	@ 0x34
 8006102:	460c      	mov	r4, r1
 8006104:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006108:	4616      	mov	r6, r2
 800610a:	461f      	mov	r7, r3
 800610c:	4605      	mov	r5, r0
 800610e:	f000 fcdb 	bl	8006ac8 <_localeconv_r>
 8006112:	6803      	ldr	r3, [r0, #0]
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	4618      	mov	r0, r3
 8006118:	f7fa f8ca 	bl	80002b0 <strlen>
 800611c:	2300      	movs	r3, #0
 800611e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006120:	f8d8 3000 	ldr.w	r3, [r8]
 8006124:	9005      	str	r0, [sp, #20]
 8006126:	3307      	adds	r3, #7
 8006128:	f023 0307 	bic.w	r3, r3, #7
 800612c:	f103 0208 	add.w	r2, r3, #8
 8006130:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006134:	f8d4 b000 	ldr.w	fp, [r4]
 8006138:	f8c8 2000 	str.w	r2, [r8]
 800613c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006140:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006144:	9307      	str	r3, [sp, #28]
 8006146:	f8cd 8018 	str.w	r8, [sp, #24]
 800614a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800614e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006152:	4b9c      	ldr	r3, [pc, #624]	@ (80063c4 <_printf_float+0x2c8>)
 8006154:	f04f 32ff 	mov.w	r2, #4294967295
 8006158:	f7fa fd08 	bl	8000b6c <__aeabi_dcmpun>
 800615c:	bb70      	cbnz	r0, 80061bc <_printf_float+0xc0>
 800615e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006162:	4b98      	ldr	r3, [pc, #608]	@ (80063c4 <_printf_float+0x2c8>)
 8006164:	f04f 32ff 	mov.w	r2, #4294967295
 8006168:	f7fa fce2 	bl	8000b30 <__aeabi_dcmple>
 800616c:	bb30      	cbnz	r0, 80061bc <_printf_float+0xc0>
 800616e:	2200      	movs	r2, #0
 8006170:	2300      	movs	r3, #0
 8006172:	4640      	mov	r0, r8
 8006174:	4649      	mov	r1, r9
 8006176:	f7fa fcd1 	bl	8000b1c <__aeabi_dcmplt>
 800617a:	b110      	cbz	r0, 8006182 <_printf_float+0x86>
 800617c:	232d      	movs	r3, #45	@ 0x2d
 800617e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006182:	4a91      	ldr	r2, [pc, #580]	@ (80063c8 <_printf_float+0x2cc>)
 8006184:	4b91      	ldr	r3, [pc, #580]	@ (80063cc <_printf_float+0x2d0>)
 8006186:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800618a:	bf94      	ite	ls
 800618c:	4690      	movls	r8, r2
 800618e:	4698      	movhi	r8, r3
 8006190:	2303      	movs	r3, #3
 8006192:	6123      	str	r3, [r4, #16]
 8006194:	f02b 0304 	bic.w	r3, fp, #4
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	f04f 0900 	mov.w	r9, #0
 800619e:	9700      	str	r7, [sp, #0]
 80061a0:	4633      	mov	r3, r6
 80061a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80061a4:	4621      	mov	r1, r4
 80061a6:	4628      	mov	r0, r5
 80061a8:	f000 f9d2 	bl	8006550 <_printf_common>
 80061ac:	3001      	adds	r0, #1
 80061ae:	f040 808d 	bne.w	80062cc <_printf_float+0x1d0>
 80061b2:	f04f 30ff 	mov.w	r0, #4294967295
 80061b6:	b00d      	add	sp, #52	@ 0x34
 80061b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061bc:	4642      	mov	r2, r8
 80061be:	464b      	mov	r3, r9
 80061c0:	4640      	mov	r0, r8
 80061c2:	4649      	mov	r1, r9
 80061c4:	f7fa fcd2 	bl	8000b6c <__aeabi_dcmpun>
 80061c8:	b140      	cbz	r0, 80061dc <_printf_float+0xe0>
 80061ca:	464b      	mov	r3, r9
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bfbc      	itt	lt
 80061d0:	232d      	movlt	r3, #45	@ 0x2d
 80061d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061d6:	4a7e      	ldr	r2, [pc, #504]	@ (80063d0 <_printf_float+0x2d4>)
 80061d8:	4b7e      	ldr	r3, [pc, #504]	@ (80063d4 <_printf_float+0x2d8>)
 80061da:	e7d4      	b.n	8006186 <_printf_float+0x8a>
 80061dc:	6863      	ldr	r3, [r4, #4]
 80061de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80061e2:	9206      	str	r2, [sp, #24]
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	d13b      	bne.n	8006260 <_printf_float+0x164>
 80061e8:	2306      	movs	r3, #6
 80061ea:	6063      	str	r3, [r4, #4]
 80061ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80061f0:	2300      	movs	r3, #0
 80061f2:	6022      	str	r2, [r4, #0]
 80061f4:	9303      	str	r3, [sp, #12]
 80061f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80061f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061fc:	ab09      	add	r3, sp, #36	@ 0x24
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	6861      	ldr	r1, [r4, #4]
 8006202:	ec49 8b10 	vmov	d0, r8, r9
 8006206:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800620a:	4628      	mov	r0, r5
 800620c:	f7ff fed6 	bl	8005fbc <__cvt>
 8006210:	9b06      	ldr	r3, [sp, #24]
 8006212:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006214:	2b47      	cmp	r3, #71	@ 0x47
 8006216:	4680      	mov	r8, r0
 8006218:	d129      	bne.n	800626e <_printf_float+0x172>
 800621a:	1cc8      	adds	r0, r1, #3
 800621c:	db02      	blt.n	8006224 <_printf_float+0x128>
 800621e:	6863      	ldr	r3, [r4, #4]
 8006220:	4299      	cmp	r1, r3
 8006222:	dd41      	ble.n	80062a8 <_printf_float+0x1ac>
 8006224:	f1aa 0a02 	sub.w	sl, sl, #2
 8006228:	fa5f fa8a 	uxtb.w	sl, sl
 800622c:	3901      	subs	r1, #1
 800622e:	4652      	mov	r2, sl
 8006230:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006234:	9109      	str	r1, [sp, #36]	@ 0x24
 8006236:	f7ff ff26 	bl	8006086 <__exponent>
 800623a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800623c:	1813      	adds	r3, r2, r0
 800623e:	2a01      	cmp	r2, #1
 8006240:	4681      	mov	r9, r0
 8006242:	6123      	str	r3, [r4, #16]
 8006244:	dc02      	bgt.n	800624c <_printf_float+0x150>
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	07d2      	lsls	r2, r2, #31
 800624a:	d501      	bpl.n	8006250 <_printf_float+0x154>
 800624c:	3301      	adds	r3, #1
 800624e:	6123      	str	r3, [r4, #16]
 8006250:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0a2      	beq.n	800619e <_printf_float+0xa2>
 8006258:	232d      	movs	r3, #45	@ 0x2d
 800625a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800625e:	e79e      	b.n	800619e <_printf_float+0xa2>
 8006260:	9a06      	ldr	r2, [sp, #24]
 8006262:	2a47      	cmp	r2, #71	@ 0x47
 8006264:	d1c2      	bne.n	80061ec <_printf_float+0xf0>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1c0      	bne.n	80061ec <_printf_float+0xf0>
 800626a:	2301      	movs	r3, #1
 800626c:	e7bd      	b.n	80061ea <_printf_float+0xee>
 800626e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006272:	d9db      	bls.n	800622c <_printf_float+0x130>
 8006274:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006278:	d118      	bne.n	80062ac <_printf_float+0x1b0>
 800627a:	2900      	cmp	r1, #0
 800627c:	6863      	ldr	r3, [r4, #4]
 800627e:	dd0b      	ble.n	8006298 <_printf_float+0x19c>
 8006280:	6121      	str	r1, [r4, #16]
 8006282:	b913      	cbnz	r3, 800628a <_printf_float+0x18e>
 8006284:	6822      	ldr	r2, [r4, #0]
 8006286:	07d0      	lsls	r0, r2, #31
 8006288:	d502      	bpl.n	8006290 <_printf_float+0x194>
 800628a:	3301      	adds	r3, #1
 800628c:	440b      	add	r3, r1
 800628e:	6123      	str	r3, [r4, #16]
 8006290:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006292:	f04f 0900 	mov.w	r9, #0
 8006296:	e7db      	b.n	8006250 <_printf_float+0x154>
 8006298:	b913      	cbnz	r3, 80062a0 <_printf_float+0x1a4>
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	07d2      	lsls	r2, r2, #31
 800629e:	d501      	bpl.n	80062a4 <_printf_float+0x1a8>
 80062a0:	3302      	adds	r3, #2
 80062a2:	e7f4      	b.n	800628e <_printf_float+0x192>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e7f2      	b.n	800628e <_printf_float+0x192>
 80062a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80062ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ae:	4299      	cmp	r1, r3
 80062b0:	db05      	blt.n	80062be <_printf_float+0x1c2>
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	6121      	str	r1, [r4, #16]
 80062b6:	07d8      	lsls	r0, r3, #31
 80062b8:	d5ea      	bpl.n	8006290 <_printf_float+0x194>
 80062ba:	1c4b      	adds	r3, r1, #1
 80062bc:	e7e7      	b.n	800628e <_printf_float+0x192>
 80062be:	2900      	cmp	r1, #0
 80062c0:	bfd4      	ite	le
 80062c2:	f1c1 0202 	rsble	r2, r1, #2
 80062c6:	2201      	movgt	r2, #1
 80062c8:	4413      	add	r3, r2
 80062ca:	e7e0      	b.n	800628e <_printf_float+0x192>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	055a      	lsls	r2, r3, #21
 80062d0:	d407      	bmi.n	80062e2 <_printf_float+0x1e6>
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	4642      	mov	r2, r8
 80062d6:	4631      	mov	r1, r6
 80062d8:	4628      	mov	r0, r5
 80062da:	47b8      	blx	r7
 80062dc:	3001      	adds	r0, #1
 80062de:	d12b      	bne.n	8006338 <_printf_float+0x23c>
 80062e0:	e767      	b.n	80061b2 <_printf_float+0xb6>
 80062e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062e6:	f240 80dd 	bls.w	80064a4 <_printf_float+0x3a8>
 80062ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062ee:	2200      	movs	r2, #0
 80062f0:	2300      	movs	r3, #0
 80062f2:	f7fa fc09 	bl	8000b08 <__aeabi_dcmpeq>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d033      	beq.n	8006362 <_printf_float+0x266>
 80062fa:	4a37      	ldr	r2, [pc, #220]	@ (80063d8 <_printf_float+0x2dc>)
 80062fc:	2301      	movs	r3, #1
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	47b8      	blx	r7
 8006304:	3001      	adds	r0, #1
 8006306:	f43f af54 	beq.w	80061b2 <_printf_float+0xb6>
 800630a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800630e:	4543      	cmp	r3, r8
 8006310:	db02      	blt.n	8006318 <_printf_float+0x21c>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	07d8      	lsls	r0, r3, #31
 8006316:	d50f      	bpl.n	8006338 <_printf_float+0x23c>
 8006318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	f43f af45 	beq.w	80061b2 <_printf_float+0xb6>
 8006328:	f04f 0900 	mov.w	r9, #0
 800632c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006330:	f104 0a1a 	add.w	sl, r4, #26
 8006334:	45c8      	cmp	r8, r9
 8006336:	dc09      	bgt.n	800634c <_printf_float+0x250>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	079b      	lsls	r3, r3, #30
 800633c:	f100 8103 	bmi.w	8006546 <_printf_float+0x44a>
 8006340:	68e0      	ldr	r0, [r4, #12]
 8006342:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006344:	4298      	cmp	r0, r3
 8006346:	bfb8      	it	lt
 8006348:	4618      	movlt	r0, r3
 800634a:	e734      	b.n	80061b6 <_printf_float+0xba>
 800634c:	2301      	movs	r3, #1
 800634e:	4652      	mov	r2, sl
 8006350:	4631      	mov	r1, r6
 8006352:	4628      	mov	r0, r5
 8006354:	47b8      	blx	r7
 8006356:	3001      	adds	r0, #1
 8006358:	f43f af2b 	beq.w	80061b2 <_printf_float+0xb6>
 800635c:	f109 0901 	add.w	r9, r9, #1
 8006360:	e7e8      	b.n	8006334 <_printf_float+0x238>
 8006362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	dc39      	bgt.n	80063dc <_printf_float+0x2e0>
 8006368:	4a1b      	ldr	r2, [pc, #108]	@ (80063d8 <_printf_float+0x2dc>)
 800636a:	2301      	movs	r3, #1
 800636c:	4631      	mov	r1, r6
 800636e:	4628      	mov	r0, r5
 8006370:	47b8      	blx	r7
 8006372:	3001      	adds	r0, #1
 8006374:	f43f af1d 	beq.w	80061b2 <_printf_float+0xb6>
 8006378:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800637c:	ea59 0303 	orrs.w	r3, r9, r3
 8006380:	d102      	bne.n	8006388 <_printf_float+0x28c>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	07d9      	lsls	r1, r3, #31
 8006386:	d5d7      	bpl.n	8006338 <_printf_float+0x23c>
 8006388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800638c:	4631      	mov	r1, r6
 800638e:	4628      	mov	r0, r5
 8006390:	47b8      	blx	r7
 8006392:	3001      	adds	r0, #1
 8006394:	f43f af0d 	beq.w	80061b2 <_printf_float+0xb6>
 8006398:	f04f 0a00 	mov.w	sl, #0
 800639c:	f104 0b1a 	add.w	fp, r4, #26
 80063a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a2:	425b      	negs	r3, r3
 80063a4:	4553      	cmp	r3, sl
 80063a6:	dc01      	bgt.n	80063ac <_printf_float+0x2b0>
 80063a8:	464b      	mov	r3, r9
 80063aa:	e793      	b.n	80062d4 <_printf_float+0x1d8>
 80063ac:	2301      	movs	r3, #1
 80063ae:	465a      	mov	r2, fp
 80063b0:	4631      	mov	r1, r6
 80063b2:	4628      	mov	r0, r5
 80063b4:	47b8      	blx	r7
 80063b6:	3001      	adds	r0, #1
 80063b8:	f43f aefb 	beq.w	80061b2 <_printf_float+0xb6>
 80063bc:	f10a 0a01 	add.w	sl, sl, #1
 80063c0:	e7ee      	b.n	80063a0 <_printf_float+0x2a4>
 80063c2:	bf00      	nop
 80063c4:	7fefffff 	.word	0x7fefffff
 80063c8:	08008f84 	.word	0x08008f84
 80063cc:	08008f88 	.word	0x08008f88
 80063d0:	08008f8c 	.word	0x08008f8c
 80063d4:	08008f90 	.word	0x08008f90
 80063d8:	08008f94 	.word	0x08008f94
 80063dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063e2:	4553      	cmp	r3, sl
 80063e4:	bfa8      	it	ge
 80063e6:	4653      	movge	r3, sl
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	4699      	mov	r9, r3
 80063ec:	dc36      	bgt.n	800645c <_printf_float+0x360>
 80063ee:	f04f 0b00 	mov.w	fp, #0
 80063f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063f6:	f104 021a 	add.w	r2, r4, #26
 80063fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063fc:	9306      	str	r3, [sp, #24]
 80063fe:	eba3 0309 	sub.w	r3, r3, r9
 8006402:	455b      	cmp	r3, fp
 8006404:	dc31      	bgt.n	800646a <_printf_float+0x36e>
 8006406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006408:	459a      	cmp	sl, r3
 800640a:	dc3a      	bgt.n	8006482 <_printf_float+0x386>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	07da      	lsls	r2, r3, #31
 8006410:	d437      	bmi.n	8006482 <_printf_float+0x386>
 8006412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006414:	ebaa 0903 	sub.w	r9, sl, r3
 8006418:	9b06      	ldr	r3, [sp, #24]
 800641a:	ebaa 0303 	sub.w	r3, sl, r3
 800641e:	4599      	cmp	r9, r3
 8006420:	bfa8      	it	ge
 8006422:	4699      	movge	r9, r3
 8006424:	f1b9 0f00 	cmp.w	r9, #0
 8006428:	dc33      	bgt.n	8006492 <_printf_float+0x396>
 800642a:	f04f 0800 	mov.w	r8, #0
 800642e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006432:	f104 0b1a 	add.w	fp, r4, #26
 8006436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006438:	ebaa 0303 	sub.w	r3, sl, r3
 800643c:	eba3 0309 	sub.w	r3, r3, r9
 8006440:	4543      	cmp	r3, r8
 8006442:	f77f af79 	ble.w	8006338 <_printf_float+0x23c>
 8006446:	2301      	movs	r3, #1
 8006448:	465a      	mov	r2, fp
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	f43f aeae 	beq.w	80061b2 <_printf_float+0xb6>
 8006456:	f108 0801 	add.w	r8, r8, #1
 800645a:	e7ec      	b.n	8006436 <_printf_float+0x33a>
 800645c:	4642      	mov	r2, r8
 800645e:	4631      	mov	r1, r6
 8006460:	4628      	mov	r0, r5
 8006462:	47b8      	blx	r7
 8006464:	3001      	adds	r0, #1
 8006466:	d1c2      	bne.n	80063ee <_printf_float+0x2f2>
 8006468:	e6a3      	b.n	80061b2 <_printf_float+0xb6>
 800646a:	2301      	movs	r3, #1
 800646c:	4631      	mov	r1, r6
 800646e:	4628      	mov	r0, r5
 8006470:	9206      	str	r2, [sp, #24]
 8006472:	47b8      	blx	r7
 8006474:	3001      	adds	r0, #1
 8006476:	f43f ae9c 	beq.w	80061b2 <_printf_float+0xb6>
 800647a:	9a06      	ldr	r2, [sp, #24]
 800647c:	f10b 0b01 	add.w	fp, fp, #1
 8006480:	e7bb      	b.n	80063fa <_printf_float+0x2fe>
 8006482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	d1c0      	bne.n	8006412 <_printf_float+0x316>
 8006490:	e68f      	b.n	80061b2 <_printf_float+0xb6>
 8006492:	9a06      	ldr	r2, [sp, #24]
 8006494:	464b      	mov	r3, r9
 8006496:	4442      	add	r2, r8
 8006498:	4631      	mov	r1, r6
 800649a:	4628      	mov	r0, r5
 800649c:	47b8      	blx	r7
 800649e:	3001      	adds	r0, #1
 80064a0:	d1c3      	bne.n	800642a <_printf_float+0x32e>
 80064a2:	e686      	b.n	80061b2 <_printf_float+0xb6>
 80064a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064a8:	f1ba 0f01 	cmp.w	sl, #1
 80064ac:	dc01      	bgt.n	80064b2 <_printf_float+0x3b6>
 80064ae:	07db      	lsls	r3, r3, #31
 80064b0:	d536      	bpl.n	8006520 <_printf_float+0x424>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4642      	mov	r2, r8
 80064b6:	4631      	mov	r1, r6
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b8      	blx	r7
 80064bc:	3001      	adds	r0, #1
 80064be:	f43f ae78 	beq.w	80061b2 <_printf_float+0xb6>
 80064c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064c6:	4631      	mov	r1, r6
 80064c8:	4628      	mov	r0, r5
 80064ca:	47b8      	blx	r7
 80064cc:	3001      	adds	r0, #1
 80064ce:	f43f ae70 	beq.w	80061b2 <_printf_float+0xb6>
 80064d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064d6:	2200      	movs	r2, #0
 80064d8:	2300      	movs	r3, #0
 80064da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064de:	f7fa fb13 	bl	8000b08 <__aeabi_dcmpeq>
 80064e2:	b9c0      	cbnz	r0, 8006516 <_printf_float+0x41a>
 80064e4:	4653      	mov	r3, sl
 80064e6:	f108 0201 	add.w	r2, r8, #1
 80064ea:	4631      	mov	r1, r6
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b8      	blx	r7
 80064f0:	3001      	adds	r0, #1
 80064f2:	d10c      	bne.n	800650e <_printf_float+0x412>
 80064f4:	e65d      	b.n	80061b2 <_printf_float+0xb6>
 80064f6:	2301      	movs	r3, #1
 80064f8:	465a      	mov	r2, fp
 80064fa:	4631      	mov	r1, r6
 80064fc:	4628      	mov	r0, r5
 80064fe:	47b8      	blx	r7
 8006500:	3001      	adds	r0, #1
 8006502:	f43f ae56 	beq.w	80061b2 <_printf_float+0xb6>
 8006506:	f108 0801 	add.w	r8, r8, #1
 800650a:	45d0      	cmp	r8, sl
 800650c:	dbf3      	blt.n	80064f6 <_printf_float+0x3fa>
 800650e:	464b      	mov	r3, r9
 8006510:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006514:	e6df      	b.n	80062d6 <_printf_float+0x1da>
 8006516:	f04f 0800 	mov.w	r8, #0
 800651a:	f104 0b1a 	add.w	fp, r4, #26
 800651e:	e7f4      	b.n	800650a <_printf_float+0x40e>
 8006520:	2301      	movs	r3, #1
 8006522:	4642      	mov	r2, r8
 8006524:	e7e1      	b.n	80064ea <_printf_float+0x3ee>
 8006526:	2301      	movs	r3, #1
 8006528:	464a      	mov	r2, r9
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	47b8      	blx	r7
 8006530:	3001      	adds	r0, #1
 8006532:	f43f ae3e 	beq.w	80061b2 <_printf_float+0xb6>
 8006536:	f108 0801 	add.w	r8, r8, #1
 800653a:	68e3      	ldr	r3, [r4, #12]
 800653c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800653e:	1a5b      	subs	r3, r3, r1
 8006540:	4543      	cmp	r3, r8
 8006542:	dcf0      	bgt.n	8006526 <_printf_float+0x42a>
 8006544:	e6fc      	b.n	8006340 <_printf_float+0x244>
 8006546:	f04f 0800 	mov.w	r8, #0
 800654a:	f104 0919 	add.w	r9, r4, #25
 800654e:	e7f4      	b.n	800653a <_printf_float+0x43e>

08006550 <_printf_common>:
 8006550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006554:	4616      	mov	r6, r2
 8006556:	4698      	mov	r8, r3
 8006558:	688a      	ldr	r2, [r1, #8]
 800655a:	690b      	ldr	r3, [r1, #16]
 800655c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006560:	4293      	cmp	r3, r2
 8006562:	bfb8      	it	lt
 8006564:	4613      	movlt	r3, r2
 8006566:	6033      	str	r3, [r6, #0]
 8006568:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800656c:	4607      	mov	r7, r0
 800656e:	460c      	mov	r4, r1
 8006570:	b10a      	cbz	r2, 8006576 <_printf_common+0x26>
 8006572:	3301      	adds	r3, #1
 8006574:	6033      	str	r3, [r6, #0]
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	0699      	lsls	r1, r3, #26
 800657a:	bf42      	ittt	mi
 800657c:	6833      	ldrmi	r3, [r6, #0]
 800657e:	3302      	addmi	r3, #2
 8006580:	6033      	strmi	r3, [r6, #0]
 8006582:	6825      	ldr	r5, [r4, #0]
 8006584:	f015 0506 	ands.w	r5, r5, #6
 8006588:	d106      	bne.n	8006598 <_printf_common+0x48>
 800658a:	f104 0a19 	add.w	sl, r4, #25
 800658e:	68e3      	ldr	r3, [r4, #12]
 8006590:	6832      	ldr	r2, [r6, #0]
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	42ab      	cmp	r3, r5
 8006596:	dc26      	bgt.n	80065e6 <_printf_common+0x96>
 8006598:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800659c:	6822      	ldr	r2, [r4, #0]
 800659e:	3b00      	subs	r3, #0
 80065a0:	bf18      	it	ne
 80065a2:	2301      	movne	r3, #1
 80065a4:	0692      	lsls	r2, r2, #26
 80065a6:	d42b      	bmi.n	8006600 <_printf_common+0xb0>
 80065a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065ac:	4641      	mov	r1, r8
 80065ae:	4638      	mov	r0, r7
 80065b0:	47c8      	blx	r9
 80065b2:	3001      	adds	r0, #1
 80065b4:	d01e      	beq.n	80065f4 <_printf_common+0xa4>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	6922      	ldr	r2, [r4, #16]
 80065ba:	f003 0306 	and.w	r3, r3, #6
 80065be:	2b04      	cmp	r3, #4
 80065c0:	bf02      	ittt	eq
 80065c2:	68e5      	ldreq	r5, [r4, #12]
 80065c4:	6833      	ldreq	r3, [r6, #0]
 80065c6:	1aed      	subeq	r5, r5, r3
 80065c8:	68a3      	ldr	r3, [r4, #8]
 80065ca:	bf0c      	ite	eq
 80065cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065d0:	2500      	movne	r5, #0
 80065d2:	4293      	cmp	r3, r2
 80065d4:	bfc4      	itt	gt
 80065d6:	1a9b      	subgt	r3, r3, r2
 80065d8:	18ed      	addgt	r5, r5, r3
 80065da:	2600      	movs	r6, #0
 80065dc:	341a      	adds	r4, #26
 80065de:	42b5      	cmp	r5, r6
 80065e0:	d11a      	bne.n	8006618 <_printf_common+0xc8>
 80065e2:	2000      	movs	r0, #0
 80065e4:	e008      	b.n	80065f8 <_printf_common+0xa8>
 80065e6:	2301      	movs	r3, #1
 80065e8:	4652      	mov	r2, sl
 80065ea:	4641      	mov	r1, r8
 80065ec:	4638      	mov	r0, r7
 80065ee:	47c8      	blx	r9
 80065f0:	3001      	adds	r0, #1
 80065f2:	d103      	bne.n	80065fc <_printf_common+0xac>
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fc:	3501      	adds	r5, #1
 80065fe:	e7c6      	b.n	800658e <_printf_common+0x3e>
 8006600:	18e1      	adds	r1, r4, r3
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	2030      	movs	r0, #48	@ 0x30
 8006606:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800660a:	4422      	add	r2, r4
 800660c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006610:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006614:	3302      	adds	r3, #2
 8006616:	e7c7      	b.n	80065a8 <_printf_common+0x58>
 8006618:	2301      	movs	r3, #1
 800661a:	4622      	mov	r2, r4
 800661c:	4641      	mov	r1, r8
 800661e:	4638      	mov	r0, r7
 8006620:	47c8      	blx	r9
 8006622:	3001      	adds	r0, #1
 8006624:	d0e6      	beq.n	80065f4 <_printf_common+0xa4>
 8006626:	3601      	adds	r6, #1
 8006628:	e7d9      	b.n	80065de <_printf_common+0x8e>
	...

0800662c <_printf_i>:
 800662c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006630:	7e0f      	ldrb	r7, [r1, #24]
 8006632:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006634:	2f78      	cmp	r7, #120	@ 0x78
 8006636:	4691      	mov	r9, r2
 8006638:	4680      	mov	r8, r0
 800663a:	460c      	mov	r4, r1
 800663c:	469a      	mov	sl, r3
 800663e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006642:	d807      	bhi.n	8006654 <_printf_i+0x28>
 8006644:	2f62      	cmp	r7, #98	@ 0x62
 8006646:	d80a      	bhi.n	800665e <_printf_i+0x32>
 8006648:	2f00      	cmp	r7, #0
 800664a:	f000 80d2 	beq.w	80067f2 <_printf_i+0x1c6>
 800664e:	2f58      	cmp	r7, #88	@ 0x58
 8006650:	f000 80b9 	beq.w	80067c6 <_printf_i+0x19a>
 8006654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006658:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800665c:	e03a      	b.n	80066d4 <_printf_i+0xa8>
 800665e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006662:	2b15      	cmp	r3, #21
 8006664:	d8f6      	bhi.n	8006654 <_printf_i+0x28>
 8006666:	a101      	add	r1, pc, #4	@ (adr r1, 800666c <_printf_i+0x40>)
 8006668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800666c:	080066c5 	.word	0x080066c5
 8006670:	080066d9 	.word	0x080066d9
 8006674:	08006655 	.word	0x08006655
 8006678:	08006655 	.word	0x08006655
 800667c:	08006655 	.word	0x08006655
 8006680:	08006655 	.word	0x08006655
 8006684:	080066d9 	.word	0x080066d9
 8006688:	08006655 	.word	0x08006655
 800668c:	08006655 	.word	0x08006655
 8006690:	08006655 	.word	0x08006655
 8006694:	08006655 	.word	0x08006655
 8006698:	080067d9 	.word	0x080067d9
 800669c:	08006703 	.word	0x08006703
 80066a0:	08006793 	.word	0x08006793
 80066a4:	08006655 	.word	0x08006655
 80066a8:	08006655 	.word	0x08006655
 80066ac:	080067fb 	.word	0x080067fb
 80066b0:	08006655 	.word	0x08006655
 80066b4:	08006703 	.word	0x08006703
 80066b8:	08006655 	.word	0x08006655
 80066bc:	08006655 	.word	0x08006655
 80066c0:	0800679b 	.word	0x0800679b
 80066c4:	6833      	ldr	r3, [r6, #0]
 80066c6:	1d1a      	adds	r2, r3, #4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6032      	str	r2, [r6, #0]
 80066cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066d4:	2301      	movs	r3, #1
 80066d6:	e09d      	b.n	8006814 <_printf_i+0x1e8>
 80066d8:	6833      	ldr	r3, [r6, #0]
 80066da:	6820      	ldr	r0, [r4, #0]
 80066dc:	1d19      	adds	r1, r3, #4
 80066de:	6031      	str	r1, [r6, #0]
 80066e0:	0606      	lsls	r6, r0, #24
 80066e2:	d501      	bpl.n	80066e8 <_printf_i+0xbc>
 80066e4:	681d      	ldr	r5, [r3, #0]
 80066e6:	e003      	b.n	80066f0 <_printf_i+0xc4>
 80066e8:	0645      	lsls	r5, r0, #25
 80066ea:	d5fb      	bpl.n	80066e4 <_printf_i+0xb8>
 80066ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066f0:	2d00      	cmp	r5, #0
 80066f2:	da03      	bge.n	80066fc <_printf_i+0xd0>
 80066f4:	232d      	movs	r3, #45	@ 0x2d
 80066f6:	426d      	negs	r5, r5
 80066f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066fc:	4859      	ldr	r0, [pc, #356]	@ (8006864 <_printf_i+0x238>)
 80066fe:	230a      	movs	r3, #10
 8006700:	e011      	b.n	8006726 <_printf_i+0xfa>
 8006702:	6821      	ldr	r1, [r4, #0]
 8006704:	6833      	ldr	r3, [r6, #0]
 8006706:	0608      	lsls	r0, r1, #24
 8006708:	f853 5b04 	ldr.w	r5, [r3], #4
 800670c:	d402      	bmi.n	8006714 <_printf_i+0xe8>
 800670e:	0649      	lsls	r1, r1, #25
 8006710:	bf48      	it	mi
 8006712:	b2ad      	uxthmi	r5, r5
 8006714:	2f6f      	cmp	r7, #111	@ 0x6f
 8006716:	4853      	ldr	r0, [pc, #332]	@ (8006864 <_printf_i+0x238>)
 8006718:	6033      	str	r3, [r6, #0]
 800671a:	bf14      	ite	ne
 800671c:	230a      	movne	r3, #10
 800671e:	2308      	moveq	r3, #8
 8006720:	2100      	movs	r1, #0
 8006722:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006726:	6866      	ldr	r6, [r4, #4]
 8006728:	60a6      	str	r6, [r4, #8]
 800672a:	2e00      	cmp	r6, #0
 800672c:	bfa2      	ittt	ge
 800672e:	6821      	ldrge	r1, [r4, #0]
 8006730:	f021 0104 	bicge.w	r1, r1, #4
 8006734:	6021      	strge	r1, [r4, #0]
 8006736:	b90d      	cbnz	r5, 800673c <_printf_i+0x110>
 8006738:	2e00      	cmp	r6, #0
 800673a:	d04b      	beq.n	80067d4 <_printf_i+0x1a8>
 800673c:	4616      	mov	r6, r2
 800673e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006742:	fb03 5711 	mls	r7, r3, r1, r5
 8006746:	5dc7      	ldrb	r7, [r0, r7]
 8006748:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800674c:	462f      	mov	r7, r5
 800674e:	42bb      	cmp	r3, r7
 8006750:	460d      	mov	r5, r1
 8006752:	d9f4      	bls.n	800673e <_printf_i+0x112>
 8006754:	2b08      	cmp	r3, #8
 8006756:	d10b      	bne.n	8006770 <_printf_i+0x144>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	07df      	lsls	r7, r3, #31
 800675c:	d508      	bpl.n	8006770 <_printf_i+0x144>
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	6861      	ldr	r1, [r4, #4]
 8006762:	4299      	cmp	r1, r3
 8006764:	bfde      	ittt	le
 8006766:	2330      	movle	r3, #48	@ 0x30
 8006768:	f806 3c01 	strble.w	r3, [r6, #-1]
 800676c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006770:	1b92      	subs	r2, r2, r6
 8006772:	6122      	str	r2, [r4, #16]
 8006774:	f8cd a000 	str.w	sl, [sp]
 8006778:	464b      	mov	r3, r9
 800677a:	aa03      	add	r2, sp, #12
 800677c:	4621      	mov	r1, r4
 800677e:	4640      	mov	r0, r8
 8006780:	f7ff fee6 	bl	8006550 <_printf_common>
 8006784:	3001      	adds	r0, #1
 8006786:	d14a      	bne.n	800681e <_printf_i+0x1f2>
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	b004      	add	sp, #16
 800678e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	f043 0320 	orr.w	r3, r3, #32
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	4833      	ldr	r0, [pc, #204]	@ (8006868 <_printf_i+0x23c>)
 800679c:	2778      	movs	r7, #120	@ 0x78
 800679e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	6831      	ldr	r1, [r6, #0]
 80067a6:	061f      	lsls	r7, r3, #24
 80067a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80067ac:	d402      	bmi.n	80067b4 <_printf_i+0x188>
 80067ae:	065f      	lsls	r7, r3, #25
 80067b0:	bf48      	it	mi
 80067b2:	b2ad      	uxthmi	r5, r5
 80067b4:	6031      	str	r1, [r6, #0]
 80067b6:	07d9      	lsls	r1, r3, #31
 80067b8:	bf44      	itt	mi
 80067ba:	f043 0320 	orrmi.w	r3, r3, #32
 80067be:	6023      	strmi	r3, [r4, #0]
 80067c0:	b11d      	cbz	r5, 80067ca <_printf_i+0x19e>
 80067c2:	2310      	movs	r3, #16
 80067c4:	e7ac      	b.n	8006720 <_printf_i+0xf4>
 80067c6:	4827      	ldr	r0, [pc, #156]	@ (8006864 <_printf_i+0x238>)
 80067c8:	e7e9      	b.n	800679e <_printf_i+0x172>
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	f023 0320 	bic.w	r3, r3, #32
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	e7f6      	b.n	80067c2 <_printf_i+0x196>
 80067d4:	4616      	mov	r6, r2
 80067d6:	e7bd      	b.n	8006754 <_printf_i+0x128>
 80067d8:	6833      	ldr	r3, [r6, #0]
 80067da:	6825      	ldr	r5, [r4, #0]
 80067dc:	6961      	ldr	r1, [r4, #20]
 80067de:	1d18      	adds	r0, r3, #4
 80067e0:	6030      	str	r0, [r6, #0]
 80067e2:	062e      	lsls	r6, r5, #24
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	d501      	bpl.n	80067ec <_printf_i+0x1c0>
 80067e8:	6019      	str	r1, [r3, #0]
 80067ea:	e002      	b.n	80067f2 <_printf_i+0x1c6>
 80067ec:	0668      	lsls	r0, r5, #25
 80067ee:	d5fb      	bpl.n	80067e8 <_printf_i+0x1bc>
 80067f0:	8019      	strh	r1, [r3, #0]
 80067f2:	2300      	movs	r3, #0
 80067f4:	6123      	str	r3, [r4, #16]
 80067f6:	4616      	mov	r6, r2
 80067f8:	e7bc      	b.n	8006774 <_printf_i+0x148>
 80067fa:	6833      	ldr	r3, [r6, #0]
 80067fc:	1d1a      	adds	r2, r3, #4
 80067fe:	6032      	str	r2, [r6, #0]
 8006800:	681e      	ldr	r6, [r3, #0]
 8006802:	6862      	ldr	r2, [r4, #4]
 8006804:	2100      	movs	r1, #0
 8006806:	4630      	mov	r0, r6
 8006808:	f7f9 fd02 	bl	8000210 <memchr>
 800680c:	b108      	cbz	r0, 8006812 <_printf_i+0x1e6>
 800680e:	1b80      	subs	r0, r0, r6
 8006810:	6060      	str	r0, [r4, #4]
 8006812:	6863      	ldr	r3, [r4, #4]
 8006814:	6123      	str	r3, [r4, #16]
 8006816:	2300      	movs	r3, #0
 8006818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800681c:	e7aa      	b.n	8006774 <_printf_i+0x148>
 800681e:	6923      	ldr	r3, [r4, #16]
 8006820:	4632      	mov	r2, r6
 8006822:	4649      	mov	r1, r9
 8006824:	4640      	mov	r0, r8
 8006826:	47d0      	blx	sl
 8006828:	3001      	adds	r0, #1
 800682a:	d0ad      	beq.n	8006788 <_printf_i+0x15c>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	079b      	lsls	r3, r3, #30
 8006830:	d413      	bmi.n	800685a <_printf_i+0x22e>
 8006832:	68e0      	ldr	r0, [r4, #12]
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	4298      	cmp	r0, r3
 8006838:	bfb8      	it	lt
 800683a:	4618      	movlt	r0, r3
 800683c:	e7a6      	b.n	800678c <_printf_i+0x160>
 800683e:	2301      	movs	r3, #1
 8006840:	4632      	mov	r2, r6
 8006842:	4649      	mov	r1, r9
 8006844:	4640      	mov	r0, r8
 8006846:	47d0      	blx	sl
 8006848:	3001      	adds	r0, #1
 800684a:	d09d      	beq.n	8006788 <_printf_i+0x15c>
 800684c:	3501      	adds	r5, #1
 800684e:	68e3      	ldr	r3, [r4, #12]
 8006850:	9903      	ldr	r1, [sp, #12]
 8006852:	1a5b      	subs	r3, r3, r1
 8006854:	42ab      	cmp	r3, r5
 8006856:	dcf2      	bgt.n	800683e <_printf_i+0x212>
 8006858:	e7eb      	b.n	8006832 <_printf_i+0x206>
 800685a:	2500      	movs	r5, #0
 800685c:	f104 0619 	add.w	r6, r4, #25
 8006860:	e7f5      	b.n	800684e <_printf_i+0x222>
 8006862:	bf00      	nop
 8006864:	08008f96 	.word	0x08008f96
 8006868:	08008fa7 	.word	0x08008fa7

0800686c <std>:
 800686c:	2300      	movs	r3, #0
 800686e:	b510      	push	{r4, lr}
 8006870:	4604      	mov	r4, r0
 8006872:	e9c0 3300 	strd	r3, r3, [r0]
 8006876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800687a:	6083      	str	r3, [r0, #8]
 800687c:	8181      	strh	r1, [r0, #12]
 800687e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006880:	81c2      	strh	r2, [r0, #14]
 8006882:	6183      	str	r3, [r0, #24]
 8006884:	4619      	mov	r1, r3
 8006886:	2208      	movs	r2, #8
 8006888:	305c      	adds	r0, #92	@ 0x5c
 800688a:	f000 f914 	bl	8006ab6 <memset>
 800688e:	4b0d      	ldr	r3, [pc, #52]	@ (80068c4 <std+0x58>)
 8006890:	6263      	str	r3, [r4, #36]	@ 0x24
 8006892:	4b0d      	ldr	r3, [pc, #52]	@ (80068c8 <std+0x5c>)
 8006894:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006896:	4b0d      	ldr	r3, [pc, #52]	@ (80068cc <std+0x60>)
 8006898:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800689a:	4b0d      	ldr	r3, [pc, #52]	@ (80068d0 <std+0x64>)
 800689c:	6323      	str	r3, [r4, #48]	@ 0x30
 800689e:	4b0d      	ldr	r3, [pc, #52]	@ (80068d4 <std+0x68>)
 80068a0:	6224      	str	r4, [r4, #32]
 80068a2:	429c      	cmp	r4, r3
 80068a4:	d006      	beq.n	80068b4 <std+0x48>
 80068a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068aa:	4294      	cmp	r4, r2
 80068ac:	d002      	beq.n	80068b4 <std+0x48>
 80068ae:	33d0      	adds	r3, #208	@ 0xd0
 80068b0:	429c      	cmp	r4, r3
 80068b2:	d105      	bne.n	80068c0 <std+0x54>
 80068b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068bc:	f000 b982 	b.w	8006bc4 <__retarget_lock_init_recursive>
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	bf00      	nop
 80068c4:	08006a31 	.word	0x08006a31
 80068c8:	08006a53 	.word	0x08006a53
 80068cc:	08006a8b 	.word	0x08006a8b
 80068d0:	08006aaf 	.word	0x08006aaf
 80068d4:	20000808 	.word	0x20000808

080068d8 <stdio_exit_handler>:
 80068d8:	4a02      	ldr	r2, [pc, #8]	@ (80068e4 <stdio_exit_handler+0xc>)
 80068da:	4903      	ldr	r1, [pc, #12]	@ (80068e8 <stdio_exit_handler+0x10>)
 80068dc:	4803      	ldr	r0, [pc, #12]	@ (80068ec <stdio_exit_handler+0x14>)
 80068de:	f000 b869 	b.w	80069b4 <_fwalk_sglue>
 80068e2:	bf00      	nop
 80068e4:	20000010 	.word	0x20000010
 80068e8:	080083d1 	.word	0x080083d1
 80068ec:	20000020 	.word	0x20000020

080068f0 <cleanup_stdio>:
 80068f0:	6841      	ldr	r1, [r0, #4]
 80068f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006924 <cleanup_stdio+0x34>)
 80068f4:	4299      	cmp	r1, r3
 80068f6:	b510      	push	{r4, lr}
 80068f8:	4604      	mov	r4, r0
 80068fa:	d001      	beq.n	8006900 <cleanup_stdio+0x10>
 80068fc:	f001 fd68 	bl	80083d0 <_fflush_r>
 8006900:	68a1      	ldr	r1, [r4, #8]
 8006902:	4b09      	ldr	r3, [pc, #36]	@ (8006928 <cleanup_stdio+0x38>)
 8006904:	4299      	cmp	r1, r3
 8006906:	d002      	beq.n	800690e <cleanup_stdio+0x1e>
 8006908:	4620      	mov	r0, r4
 800690a:	f001 fd61 	bl	80083d0 <_fflush_r>
 800690e:	68e1      	ldr	r1, [r4, #12]
 8006910:	4b06      	ldr	r3, [pc, #24]	@ (800692c <cleanup_stdio+0x3c>)
 8006912:	4299      	cmp	r1, r3
 8006914:	d004      	beq.n	8006920 <cleanup_stdio+0x30>
 8006916:	4620      	mov	r0, r4
 8006918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800691c:	f001 bd58 	b.w	80083d0 <_fflush_r>
 8006920:	bd10      	pop	{r4, pc}
 8006922:	bf00      	nop
 8006924:	20000808 	.word	0x20000808
 8006928:	20000870 	.word	0x20000870
 800692c:	200008d8 	.word	0x200008d8

08006930 <global_stdio_init.part.0>:
 8006930:	b510      	push	{r4, lr}
 8006932:	4b0b      	ldr	r3, [pc, #44]	@ (8006960 <global_stdio_init.part.0+0x30>)
 8006934:	4c0b      	ldr	r4, [pc, #44]	@ (8006964 <global_stdio_init.part.0+0x34>)
 8006936:	4a0c      	ldr	r2, [pc, #48]	@ (8006968 <global_stdio_init.part.0+0x38>)
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	4620      	mov	r0, r4
 800693c:	2200      	movs	r2, #0
 800693e:	2104      	movs	r1, #4
 8006940:	f7ff ff94 	bl	800686c <std>
 8006944:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006948:	2201      	movs	r2, #1
 800694a:	2109      	movs	r1, #9
 800694c:	f7ff ff8e 	bl	800686c <std>
 8006950:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006954:	2202      	movs	r2, #2
 8006956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800695a:	2112      	movs	r1, #18
 800695c:	f7ff bf86 	b.w	800686c <std>
 8006960:	20000940 	.word	0x20000940
 8006964:	20000808 	.word	0x20000808
 8006968:	080068d9 	.word	0x080068d9

0800696c <__sfp_lock_acquire>:
 800696c:	4801      	ldr	r0, [pc, #4]	@ (8006974 <__sfp_lock_acquire+0x8>)
 800696e:	f000 b92a 	b.w	8006bc6 <__retarget_lock_acquire_recursive>
 8006972:	bf00      	nop
 8006974:	20000949 	.word	0x20000949

08006978 <__sfp_lock_release>:
 8006978:	4801      	ldr	r0, [pc, #4]	@ (8006980 <__sfp_lock_release+0x8>)
 800697a:	f000 b925 	b.w	8006bc8 <__retarget_lock_release_recursive>
 800697e:	bf00      	nop
 8006980:	20000949 	.word	0x20000949

08006984 <__sinit>:
 8006984:	b510      	push	{r4, lr}
 8006986:	4604      	mov	r4, r0
 8006988:	f7ff fff0 	bl	800696c <__sfp_lock_acquire>
 800698c:	6a23      	ldr	r3, [r4, #32]
 800698e:	b11b      	cbz	r3, 8006998 <__sinit+0x14>
 8006990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006994:	f7ff bff0 	b.w	8006978 <__sfp_lock_release>
 8006998:	4b04      	ldr	r3, [pc, #16]	@ (80069ac <__sinit+0x28>)
 800699a:	6223      	str	r3, [r4, #32]
 800699c:	4b04      	ldr	r3, [pc, #16]	@ (80069b0 <__sinit+0x2c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f5      	bne.n	8006990 <__sinit+0xc>
 80069a4:	f7ff ffc4 	bl	8006930 <global_stdio_init.part.0>
 80069a8:	e7f2      	b.n	8006990 <__sinit+0xc>
 80069aa:	bf00      	nop
 80069ac:	080068f1 	.word	0x080068f1
 80069b0:	20000940 	.word	0x20000940

080069b4 <_fwalk_sglue>:
 80069b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b8:	4607      	mov	r7, r0
 80069ba:	4688      	mov	r8, r1
 80069bc:	4614      	mov	r4, r2
 80069be:	2600      	movs	r6, #0
 80069c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069c4:	f1b9 0901 	subs.w	r9, r9, #1
 80069c8:	d505      	bpl.n	80069d6 <_fwalk_sglue+0x22>
 80069ca:	6824      	ldr	r4, [r4, #0]
 80069cc:	2c00      	cmp	r4, #0
 80069ce:	d1f7      	bne.n	80069c0 <_fwalk_sglue+0xc>
 80069d0:	4630      	mov	r0, r6
 80069d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069d6:	89ab      	ldrh	r3, [r5, #12]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d907      	bls.n	80069ec <_fwalk_sglue+0x38>
 80069dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069e0:	3301      	adds	r3, #1
 80069e2:	d003      	beq.n	80069ec <_fwalk_sglue+0x38>
 80069e4:	4629      	mov	r1, r5
 80069e6:	4638      	mov	r0, r7
 80069e8:	47c0      	blx	r8
 80069ea:	4306      	orrs	r6, r0
 80069ec:	3568      	adds	r5, #104	@ 0x68
 80069ee:	e7e9      	b.n	80069c4 <_fwalk_sglue+0x10>

080069f0 <siprintf>:
 80069f0:	b40e      	push	{r1, r2, r3}
 80069f2:	b500      	push	{lr}
 80069f4:	b09c      	sub	sp, #112	@ 0x70
 80069f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80069f8:	9002      	str	r0, [sp, #8]
 80069fa:	9006      	str	r0, [sp, #24]
 80069fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a00:	4809      	ldr	r0, [pc, #36]	@ (8006a28 <siprintf+0x38>)
 8006a02:	9107      	str	r1, [sp, #28]
 8006a04:	9104      	str	r1, [sp, #16]
 8006a06:	4909      	ldr	r1, [pc, #36]	@ (8006a2c <siprintf+0x3c>)
 8006a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a0c:	9105      	str	r1, [sp, #20]
 8006a0e:	6800      	ldr	r0, [r0, #0]
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	a902      	add	r1, sp, #8
 8006a14:	f001 fb5c 	bl	80080d0 <_svfiprintf_r>
 8006a18:	9b02      	ldr	r3, [sp, #8]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	b01c      	add	sp, #112	@ 0x70
 8006a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a24:	b003      	add	sp, #12
 8006a26:	4770      	bx	lr
 8006a28:	2000001c 	.word	0x2000001c
 8006a2c:	ffff0208 	.word	0xffff0208

08006a30 <__sread>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	460c      	mov	r4, r1
 8006a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a38:	f000 f86c 	bl	8006b14 <_read_r>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	bfab      	itete	ge
 8006a40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a42:	89a3      	ldrhlt	r3, [r4, #12]
 8006a44:	181b      	addge	r3, r3, r0
 8006a46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a4a:	bfac      	ite	ge
 8006a4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a4e:	81a3      	strhlt	r3, [r4, #12]
 8006a50:	bd10      	pop	{r4, pc}

08006a52 <__swrite>:
 8006a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a56:	461f      	mov	r7, r3
 8006a58:	898b      	ldrh	r3, [r1, #12]
 8006a5a:	05db      	lsls	r3, r3, #23
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	4616      	mov	r6, r2
 8006a62:	d505      	bpl.n	8006a70 <__swrite+0x1e>
 8006a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a68:	2302      	movs	r3, #2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f000 f840 	bl	8006af0 <_lseek_r>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	463b      	mov	r3, r7
 8006a80:	4628      	mov	r0, r5
 8006a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a86:	f000 b867 	b.w	8006b58 <_write_r>

08006a8a <__sseek>:
 8006a8a:	b510      	push	{r4, lr}
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a92:	f000 f82d 	bl	8006af0 <_lseek_r>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	bf15      	itete	ne
 8006a9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006aa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006aa6:	81a3      	strheq	r3, [r4, #12]
 8006aa8:	bf18      	it	ne
 8006aaa:	81a3      	strhne	r3, [r4, #12]
 8006aac:	bd10      	pop	{r4, pc}

08006aae <__sclose>:
 8006aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab2:	f000 b80d 	b.w	8006ad0 <_close_r>

08006ab6 <memset>:
 8006ab6:	4402      	add	r2, r0
 8006ab8:	4603      	mov	r3, r0
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d100      	bne.n	8006ac0 <memset+0xa>
 8006abe:	4770      	bx	lr
 8006ac0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac4:	e7f9      	b.n	8006aba <memset+0x4>
	...

08006ac8 <_localeconv_r>:
 8006ac8:	4800      	ldr	r0, [pc, #0]	@ (8006acc <_localeconv_r+0x4>)
 8006aca:	4770      	bx	lr
 8006acc:	2000015c 	.word	0x2000015c

08006ad0 <_close_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4d06      	ldr	r5, [pc, #24]	@ (8006aec <_close_r+0x1c>)
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	4608      	mov	r0, r1
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	f001 ffe4 	bl	8008aa8 <_close>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_close_r+0x1a>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_close_r+0x1a>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	20000944 	.word	0x20000944

08006af0 <_lseek_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4d07      	ldr	r5, [pc, #28]	@ (8006b10 <_lseek_r+0x20>)
 8006af4:	4604      	mov	r4, r0
 8006af6:	4608      	mov	r0, r1
 8006af8:	4611      	mov	r1, r2
 8006afa:	2200      	movs	r2, #0
 8006afc:	602a      	str	r2, [r5, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	f001 fffa 	bl	8008af8 <_lseek>
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d102      	bne.n	8006b0e <_lseek_r+0x1e>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	b103      	cbz	r3, 8006b0e <_lseek_r+0x1e>
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
 8006b10:	20000944 	.word	0x20000944

08006b14 <_read_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4d07      	ldr	r5, [pc, #28]	@ (8006b34 <_read_r+0x20>)
 8006b18:	4604      	mov	r4, r0
 8006b1a:	4608      	mov	r0, r1
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	2200      	movs	r2, #0
 8006b20:	602a      	str	r2, [r5, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	f001 fff0 	bl	8008b08 <_read>
 8006b28:	1c43      	adds	r3, r0, #1
 8006b2a:	d102      	bne.n	8006b32 <_read_r+0x1e>
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	b103      	cbz	r3, 8006b32 <_read_r+0x1e>
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	20000944 	.word	0x20000944

08006b38 <_sbrk_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d06      	ldr	r5, [pc, #24]	@ (8006b54 <_sbrk_r+0x1c>)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4604      	mov	r4, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	602b      	str	r3, [r5, #0]
 8006b44:	f001 ffe8 	bl	8008b18 <_sbrk>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d102      	bne.n	8006b52 <_sbrk_r+0x1a>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	b103      	cbz	r3, 8006b52 <_sbrk_r+0x1a>
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	20000944 	.word	0x20000944

08006b58 <_write_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4d07      	ldr	r5, [pc, #28]	@ (8006b78 <_write_r+0x20>)
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	4608      	mov	r0, r1
 8006b60:	4611      	mov	r1, r2
 8006b62:	2200      	movs	r2, #0
 8006b64:	602a      	str	r2, [r5, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f001 ffe4 	bl	8008b34 <_write>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_write_r+0x1e>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_write_r+0x1e>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	20000944 	.word	0x20000944

08006b7c <__libc_init_array>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	4d0d      	ldr	r5, [pc, #52]	@ (8006bb4 <__libc_init_array+0x38>)
 8006b80:	4c0d      	ldr	r4, [pc, #52]	@ (8006bb8 <__libc_init_array+0x3c>)
 8006b82:	1b64      	subs	r4, r4, r5
 8006b84:	10a4      	asrs	r4, r4, #2
 8006b86:	2600      	movs	r6, #0
 8006b88:	42a6      	cmp	r6, r4
 8006b8a:	d109      	bne.n	8006ba0 <__libc_init_array+0x24>
 8006b8c:	4d0b      	ldr	r5, [pc, #44]	@ (8006bbc <__libc_init_array+0x40>)
 8006b8e:	4c0c      	ldr	r4, [pc, #48]	@ (8006bc0 <__libc_init_array+0x44>)
 8006b90:	f001 ffda 	bl	8008b48 <_init>
 8006b94:	1b64      	subs	r4, r4, r5
 8006b96:	10a4      	asrs	r4, r4, #2
 8006b98:	2600      	movs	r6, #0
 8006b9a:	42a6      	cmp	r6, r4
 8006b9c:	d105      	bne.n	8006baa <__libc_init_array+0x2e>
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba4:	4798      	blx	r3
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	e7ee      	b.n	8006b88 <__libc_init_array+0xc>
 8006baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bae:	4798      	blx	r3
 8006bb0:	3601      	adds	r6, #1
 8006bb2:	e7f2      	b.n	8006b9a <__libc_init_array+0x1e>
 8006bb4:	08009300 	.word	0x08009300
 8006bb8:	08009300 	.word	0x08009300
 8006bbc:	08009300 	.word	0x08009300
 8006bc0:	08009304 	.word	0x08009304

08006bc4 <__retarget_lock_init_recursive>:
 8006bc4:	4770      	bx	lr

08006bc6 <__retarget_lock_acquire_recursive>:
 8006bc6:	4770      	bx	lr

08006bc8 <__retarget_lock_release_recursive>:
 8006bc8:	4770      	bx	lr

08006bca <memcpy>:
 8006bca:	440a      	add	r2, r1
 8006bcc:	4291      	cmp	r1, r2
 8006bce:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bd2:	d100      	bne.n	8006bd6 <memcpy+0xc>
 8006bd4:	4770      	bx	lr
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006be0:	4291      	cmp	r1, r2
 8006be2:	d1f9      	bne.n	8006bd8 <memcpy+0xe>
 8006be4:	bd10      	pop	{r4, pc}

08006be6 <quorem>:
 8006be6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bea:	6903      	ldr	r3, [r0, #16]
 8006bec:	690c      	ldr	r4, [r1, #16]
 8006bee:	42a3      	cmp	r3, r4
 8006bf0:	4607      	mov	r7, r0
 8006bf2:	db7e      	blt.n	8006cf2 <quorem+0x10c>
 8006bf4:	3c01      	subs	r4, #1
 8006bf6:	f101 0814 	add.w	r8, r1, #20
 8006bfa:	00a3      	lsls	r3, r4, #2
 8006bfc:	f100 0514 	add.w	r5, r0, #20
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c10:	3301      	adds	r3, #1
 8006c12:	429a      	cmp	r2, r3
 8006c14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c18:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c1c:	d32e      	bcc.n	8006c7c <quorem+0x96>
 8006c1e:	f04f 0a00 	mov.w	sl, #0
 8006c22:	46c4      	mov	ip, r8
 8006c24:	46ae      	mov	lr, r5
 8006c26:	46d3      	mov	fp, sl
 8006c28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c2c:	b298      	uxth	r0, r3
 8006c2e:	fb06 a000 	mla	r0, r6, r0, sl
 8006c32:	0c02      	lsrs	r2, r0, #16
 8006c34:	0c1b      	lsrs	r3, r3, #16
 8006c36:	fb06 2303 	mla	r3, r6, r3, r2
 8006c3a:	f8de 2000 	ldr.w	r2, [lr]
 8006c3e:	b280      	uxth	r0, r0
 8006c40:	b292      	uxth	r2, r2
 8006c42:	1a12      	subs	r2, r2, r0
 8006c44:	445a      	add	r2, fp
 8006c46:	f8de 0000 	ldr.w	r0, [lr]
 8006c4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c58:	b292      	uxth	r2, r2
 8006c5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c5e:	45e1      	cmp	r9, ip
 8006c60:	f84e 2b04 	str.w	r2, [lr], #4
 8006c64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c68:	d2de      	bcs.n	8006c28 <quorem+0x42>
 8006c6a:	9b00      	ldr	r3, [sp, #0]
 8006c6c:	58eb      	ldr	r3, [r5, r3]
 8006c6e:	b92b      	cbnz	r3, 8006c7c <quorem+0x96>
 8006c70:	9b01      	ldr	r3, [sp, #4]
 8006c72:	3b04      	subs	r3, #4
 8006c74:	429d      	cmp	r5, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	d32f      	bcc.n	8006cda <quorem+0xf4>
 8006c7a:	613c      	str	r4, [r7, #16]
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	f001 f8c3 	bl	8007e08 <__mcmp>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	db25      	blt.n	8006cd2 <quorem+0xec>
 8006c86:	4629      	mov	r1, r5
 8006c88:	2000      	movs	r0, #0
 8006c8a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c8e:	f8d1 c000 	ldr.w	ip, [r1]
 8006c92:	fa1f fe82 	uxth.w	lr, r2
 8006c96:	fa1f f38c 	uxth.w	r3, ip
 8006c9a:	eba3 030e 	sub.w	r3, r3, lr
 8006c9e:	4403      	add	r3, r0
 8006ca0:	0c12      	lsrs	r2, r2, #16
 8006ca2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ca6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cb0:	45c1      	cmp	r9, r8
 8006cb2:	f841 3b04 	str.w	r3, [r1], #4
 8006cb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cba:	d2e6      	bcs.n	8006c8a <quorem+0xa4>
 8006cbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cc4:	b922      	cbnz	r2, 8006cd0 <quorem+0xea>
 8006cc6:	3b04      	subs	r3, #4
 8006cc8:	429d      	cmp	r5, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	d30b      	bcc.n	8006ce6 <quorem+0x100>
 8006cce:	613c      	str	r4, [r7, #16]
 8006cd0:	3601      	adds	r6, #1
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	b003      	add	sp, #12
 8006cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	3b04      	subs	r3, #4
 8006cde:	2a00      	cmp	r2, #0
 8006ce0:	d1cb      	bne.n	8006c7a <quorem+0x94>
 8006ce2:	3c01      	subs	r4, #1
 8006ce4:	e7c6      	b.n	8006c74 <quorem+0x8e>
 8006ce6:	6812      	ldr	r2, [r2, #0]
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	d1ef      	bne.n	8006cce <quorem+0xe8>
 8006cee:	3c01      	subs	r4, #1
 8006cf0:	e7ea      	b.n	8006cc8 <quorem+0xe2>
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	e7ee      	b.n	8006cd4 <quorem+0xee>
	...

08006cf8 <_dtoa_r>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	69c7      	ldr	r7, [r0, #28]
 8006cfe:	b099      	sub	sp, #100	@ 0x64
 8006d00:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d04:	ec55 4b10 	vmov	r4, r5, d0
 8006d08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006d0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d0c:	4683      	mov	fp, r0
 8006d0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d12:	b97f      	cbnz	r7, 8006d34 <_dtoa_r+0x3c>
 8006d14:	2010      	movs	r0, #16
 8006d16:	f7ff f893 	bl	8005e40 <malloc>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006d20:	b920      	cbnz	r0, 8006d2c <_dtoa_r+0x34>
 8006d22:	4ba7      	ldr	r3, [pc, #668]	@ (8006fc0 <_dtoa_r+0x2c8>)
 8006d24:	21ef      	movs	r1, #239	@ 0xef
 8006d26:	48a7      	ldr	r0, [pc, #668]	@ (8006fc4 <_dtoa_r+0x2cc>)
 8006d28:	f001 fb94 	bl	8008454 <__assert_func>
 8006d2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d30:	6007      	str	r7, [r0, #0]
 8006d32:	60c7      	str	r7, [r0, #12]
 8006d34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d38:	6819      	ldr	r1, [r3, #0]
 8006d3a:	b159      	cbz	r1, 8006d54 <_dtoa_r+0x5c>
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	604a      	str	r2, [r1, #4]
 8006d40:	2301      	movs	r3, #1
 8006d42:	4093      	lsls	r3, r2
 8006d44:	608b      	str	r3, [r1, #8]
 8006d46:	4658      	mov	r0, fp
 8006d48:	f000 fe24 	bl	8007994 <_Bfree>
 8006d4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	1e2b      	subs	r3, r5, #0
 8006d56:	bfb9      	ittee	lt
 8006d58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d5c:	9303      	strlt	r3, [sp, #12]
 8006d5e:	2300      	movge	r3, #0
 8006d60:	6033      	strge	r3, [r6, #0]
 8006d62:	9f03      	ldr	r7, [sp, #12]
 8006d64:	4b98      	ldr	r3, [pc, #608]	@ (8006fc8 <_dtoa_r+0x2d0>)
 8006d66:	bfbc      	itt	lt
 8006d68:	2201      	movlt	r2, #1
 8006d6a:	6032      	strlt	r2, [r6, #0]
 8006d6c:	43bb      	bics	r3, r7
 8006d6e:	d112      	bne.n	8006d96 <_dtoa_r+0x9e>
 8006d70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d7c:	4323      	orrs	r3, r4
 8006d7e:	f000 854d 	beq.w	800781c <_dtoa_r+0xb24>
 8006d82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006fdc <_dtoa_r+0x2e4>
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 854f 	beq.w	800782c <_dtoa_r+0xb34>
 8006d8e:	f10a 0303 	add.w	r3, sl, #3
 8006d92:	f000 bd49 	b.w	8007828 <_dtoa_r+0xb30>
 8006d96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	ec51 0b17 	vmov	r0, r1, d7
 8006da0:	2300      	movs	r3, #0
 8006da2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006da6:	f7f9 feaf 	bl	8000b08 <__aeabi_dcmpeq>
 8006daa:	4680      	mov	r8, r0
 8006dac:	b158      	cbz	r0, 8006dc6 <_dtoa_r+0xce>
 8006dae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006db0:	2301      	movs	r3, #1
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006db6:	b113      	cbz	r3, 8006dbe <_dtoa_r+0xc6>
 8006db8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006dba:	4b84      	ldr	r3, [pc, #528]	@ (8006fcc <_dtoa_r+0x2d4>)
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006fe0 <_dtoa_r+0x2e8>
 8006dc2:	f000 bd33 	b.w	800782c <_dtoa_r+0xb34>
 8006dc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006dca:	aa16      	add	r2, sp, #88	@ 0x58
 8006dcc:	a917      	add	r1, sp, #92	@ 0x5c
 8006dce:	4658      	mov	r0, fp
 8006dd0:	f001 f8ca 	bl	8007f68 <__d2b>
 8006dd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006dd8:	4681      	mov	r9, r0
 8006dda:	2e00      	cmp	r6, #0
 8006ddc:	d077      	beq.n	8006ece <_dtoa_r+0x1d6>
 8006dde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006de0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006df0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006df4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006df8:	4619      	mov	r1, r3
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4b74      	ldr	r3, [pc, #464]	@ (8006fd0 <_dtoa_r+0x2d8>)
 8006dfe:	f7f9 fa63 	bl	80002c8 <__aeabi_dsub>
 8006e02:	a369      	add	r3, pc, #420	@ (adr r3, 8006fa8 <_dtoa_r+0x2b0>)
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f7f9 fc16 	bl	8000638 <__aeabi_dmul>
 8006e0c:	a368      	add	r3, pc, #416	@ (adr r3, 8006fb0 <_dtoa_r+0x2b8>)
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	f7f9 fa5b 	bl	80002cc <__adddf3>
 8006e16:	4604      	mov	r4, r0
 8006e18:	4630      	mov	r0, r6
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	f7f9 fba2 	bl	8000564 <__aeabi_i2d>
 8006e20:	a365      	add	r3, pc, #404	@ (adr r3, 8006fb8 <_dtoa_r+0x2c0>)
 8006e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e26:	f7f9 fc07 	bl	8000638 <__aeabi_dmul>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4620      	mov	r0, r4
 8006e30:	4629      	mov	r1, r5
 8006e32:	f7f9 fa4b 	bl	80002cc <__adddf3>
 8006e36:	4604      	mov	r4, r0
 8006e38:	460d      	mov	r5, r1
 8006e3a:	f7f9 fead 	bl	8000b98 <__aeabi_d2iz>
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4607      	mov	r7, r0
 8006e42:	2300      	movs	r3, #0
 8006e44:	4620      	mov	r0, r4
 8006e46:	4629      	mov	r1, r5
 8006e48:	f7f9 fe68 	bl	8000b1c <__aeabi_dcmplt>
 8006e4c:	b140      	cbz	r0, 8006e60 <_dtoa_r+0x168>
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f7f9 fb88 	bl	8000564 <__aeabi_i2d>
 8006e54:	4622      	mov	r2, r4
 8006e56:	462b      	mov	r3, r5
 8006e58:	f7f9 fe56 	bl	8000b08 <__aeabi_dcmpeq>
 8006e5c:	b900      	cbnz	r0, 8006e60 <_dtoa_r+0x168>
 8006e5e:	3f01      	subs	r7, #1
 8006e60:	2f16      	cmp	r7, #22
 8006e62:	d851      	bhi.n	8006f08 <_dtoa_r+0x210>
 8006e64:	4b5b      	ldr	r3, [pc, #364]	@ (8006fd4 <_dtoa_r+0x2dc>)
 8006e66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e72:	f7f9 fe53 	bl	8000b1c <__aeabi_dcmplt>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d048      	beq.n	8006f0c <_dtoa_r+0x214>
 8006e7a:	3f01      	subs	r7, #1
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e82:	1b9b      	subs	r3, r3, r6
 8006e84:	1e5a      	subs	r2, r3, #1
 8006e86:	bf44      	itt	mi
 8006e88:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e8c:	2300      	movmi	r3, #0
 8006e8e:	9208      	str	r2, [sp, #32]
 8006e90:	bf54      	ite	pl
 8006e92:	f04f 0800 	movpl.w	r8, #0
 8006e96:	9308      	strmi	r3, [sp, #32]
 8006e98:	2f00      	cmp	r7, #0
 8006e9a:	db39      	blt.n	8006f10 <_dtoa_r+0x218>
 8006e9c:	9b08      	ldr	r3, [sp, #32]
 8006e9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006ea0:	443b      	add	r3, r7
 8006ea2:	9308      	str	r3, [sp, #32]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eaa:	2b09      	cmp	r3, #9
 8006eac:	d864      	bhi.n	8006f78 <_dtoa_r+0x280>
 8006eae:	2b05      	cmp	r3, #5
 8006eb0:	bfc4      	itt	gt
 8006eb2:	3b04      	subgt	r3, #4
 8006eb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb8:	f1a3 0302 	sub.w	r3, r3, #2
 8006ebc:	bfcc      	ite	gt
 8006ebe:	2400      	movgt	r4, #0
 8006ec0:	2401      	movle	r4, #1
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d863      	bhi.n	8006f8e <_dtoa_r+0x296>
 8006ec6:	e8df f003 	tbb	[pc, r3]
 8006eca:	372a      	.short	0x372a
 8006ecc:	5535      	.short	0x5535
 8006ece:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006ed2:	441e      	add	r6, r3
 8006ed4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ed8:	2b20      	cmp	r3, #32
 8006eda:	bfc1      	itttt	gt
 8006edc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ee0:	409f      	lslgt	r7, r3
 8006ee2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ee6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006eea:	bfd6      	itet	le
 8006eec:	f1c3 0320 	rsble	r3, r3, #32
 8006ef0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006ef4:	fa04 f003 	lslle.w	r0, r4, r3
 8006ef8:	f7f9 fb24 	bl	8000544 <__aeabi_ui2d>
 8006efc:	2201      	movs	r2, #1
 8006efe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f02:	3e01      	subs	r6, #1
 8006f04:	9214      	str	r2, [sp, #80]	@ 0x50
 8006f06:	e777      	b.n	8006df8 <_dtoa_r+0x100>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e7b8      	b.n	8006e7e <_dtoa_r+0x186>
 8006f0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006f0e:	e7b7      	b.n	8006e80 <_dtoa_r+0x188>
 8006f10:	427b      	negs	r3, r7
 8006f12:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f14:	2300      	movs	r3, #0
 8006f16:	eba8 0807 	sub.w	r8, r8, r7
 8006f1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f1c:	e7c4      	b.n	8006ea8 <_dtoa_r+0x1b0>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dc35      	bgt.n	8006f94 <_dtoa_r+0x29c>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	9307      	str	r3, [sp, #28]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f32:	e00b      	b.n	8006f4c <_dtoa_r+0x254>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e7f3      	b.n	8006f20 <_dtoa_r+0x228>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f3e:	18fb      	adds	r3, r7, r3
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	9307      	str	r3, [sp, #28]
 8006f48:	bfb8      	it	lt
 8006f4a:	2301      	movlt	r3, #1
 8006f4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f50:	2100      	movs	r1, #0
 8006f52:	2204      	movs	r2, #4
 8006f54:	f102 0514 	add.w	r5, r2, #20
 8006f58:	429d      	cmp	r5, r3
 8006f5a:	d91f      	bls.n	8006f9c <_dtoa_r+0x2a4>
 8006f5c:	6041      	str	r1, [r0, #4]
 8006f5e:	4658      	mov	r0, fp
 8006f60:	f000 fcd8 	bl	8007914 <_Balloc>
 8006f64:	4682      	mov	sl, r0
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d13c      	bne.n	8006fe4 <_dtoa_r+0x2ec>
 8006f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fd8 <_dtoa_r+0x2e0>)
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f72:	e6d8      	b.n	8006d26 <_dtoa_r+0x2e>
 8006f74:	2301      	movs	r3, #1
 8006f76:	e7e0      	b.n	8006f3a <_dtoa_r+0x242>
 8006f78:	2401      	movs	r4, #1
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f80:	f04f 33ff 	mov.w	r3, #4294967295
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	9307      	str	r3, [sp, #28]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2312      	movs	r3, #18
 8006f8c:	e7d0      	b.n	8006f30 <_dtoa_r+0x238>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f92:	e7f5      	b.n	8006f80 <_dtoa_r+0x288>
 8006f94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	9307      	str	r3, [sp, #28]
 8006f9a:	e7d7      	b.n	8006f4c <_dtoa_r+0x254>
 8006f9c:	3101      	adds	r1, #1
 8006f9e:	0052      	lsls	r2, r2, #1
 8006fa0:	e7d8      	b.n	8006f54 <_dtoa_r+0x25c>
 8006fa2:	bf00      	nop
 8006fa4:	f3af 8000 	nop.w
 8006fa8:	636f4361 	.word	0x636f4361
 8006fac:	3fd287a7 	.word	0x3fd287a7
 8006fb0:	8b60c8b3 	.word	0x8b60c8b3
 8006fb4:	3fc68a28 	.word	0x3fc68a28
 8006fb8:	509f79fb 	.word	0x509f79fb
 8006fbc:	3fd34413 	.word	0x3fd34413
 8006fc0:	08008fc5 	.word	0x08008fc5
 8006fc4:	08008fdc 	.word	0x08008fdc
 8006fc8:	7ff00000 	.word	0x7ff00000
 8006fcc:	08008f95 	.word	0x08008f95
 8006fd0:	3ff80000 	.word	0x3ff80000
 8006fd4:	080090d8 	.word	0x080090d8
 8006fd8:	08009034 	.word	0x08009034
 8006fdc:	08008fc1 	.word	0x08008fc1
 8006fe0:	08008f94 	.word	0x08008f94
 8006fe4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fe8:	6018      	str	r0, [r3, #0]
 8006fea:	9b07      	ldr	r3, [sp, #28]
 8006fec:	2b0e      	cmp	r3, #14
 8006fee:	f200 80a4 	bhi.w	800713a <_dtoa_r+0x442>
 8006ff2:	2c00      	cmp	r4, #0
 8006ff4:	f000 80a1 	beq.w	800713a <_dtoa_r+0x442>
 8006ff8:	2f00      	cmp	r7, #0
 8006ffa:	dd33      	ble.n	8007064 <_dtoa_r+0x36c>
 8006ffc:	4bad      	ldr	r3, [pc, #692]	@ (80072b4 <_dtoa_r+0x5bc>)
 8006ffe:	f007 020f 	and.w	r2, r7, #15
 8007002:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007006:	ed93 7b00 	vldr	d7, [r3]
 800700a:	05f8      	lsls	r0, r7, #23
 800700c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007010:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007014:	d516      	bpl.n	8007044 <_dtoa_r+0x34c>
 8007016:	4ba8      	ldr	r3, [pc, #672]	@ (80072b8 <_dtoa_r+0x5c0>)
 8007018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800701c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007020:	f7f9 fc34 	bl	800088c <__aeabi_ddiv>
 8007024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007028:	f004 040f 	and.w	r4, r4, #15
 800702c:	2603      	movs	r6, #3
 800702e:	4da2      	ldr	r5, [pc, #648]	@ (80072b8 <_dtoa_r+0x5c0>)
 8007030:	b954      	cbnz	r4, 8007048 <_dtoa_r+0x350>
 8007032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800703a:	f7f9 fc27 	bl	800088c <__aeabi_ddiv>
 800703e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007042:	e028      	b.n	8007096 <_dtoa_r+0x39e>
 8007044:	2602      	movs	r6, #2
 8007046:	e7f2      	b.n	800702e <_dtoa_r+0x336>
 8007048:	07e1      	lsls	r1, r4, #31
 800704a:	d508      	bpl.n	800705e <_dtoa_r+0x366>
 800704c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007050:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007054:	f7f9 faf0 	bl	8000638 <__aeabi_dmul>
 8007058:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800705c:	3601      	adds	r6, #1
 800705e:	1064      	asrs	r4, r4, #1
 8007060:	3508      	adds	r5, #8
 8007062:	e7e5      	b.n	8007030 <_dtoa_r+0x338>
 8007064:	f000 80d2 	beq.w	800720c <_dtoa_r+0x514>
 8007068:	427c      	negs	r4, r7
 800706a:	4b92      	ldr	r3, [pc, #584]	@ (80072b4 <_dtoa_r+0x5bc>)
 800706c:	4d92      	ldr	r5, [pc, #584]	@ (80072b8 <_dtoa_r+0x5c0>)
 800706e:	f004 020f 	and.w	r2, r4, #15
 8007072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800707e:	f7f9 fadb 	bl	8000638 <__aeabi_dmul>
 8007082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007086:	1124      	asrs	r4, r4, #4
 8007088:	2300      	movs	r3, #0
 800708a:	2602      	movs	r6, #2
 800708c:	2c00      	cmp	r4, #0
 800708e:	f040 80b2 	bne.w	80071f6 <_dtoa_r+0x4fe>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1d3      	bne.n	800703e <_dtoa_r+0x346>
 8007096:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007098:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 80b7 	beq.w	8007210 <_dtoa_r+0x518>
 80070a2:	4b86      	ldr	r3, [pc, #536]	@ (80072bc <_dtoa_r+0x5c4>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	4620      	mov	r0, r4
 80070a8:	4629      	mov	r1, r5
 80070aa:	f7f9 fd37 	bl	8000b1c <__aeabi_dcmplt>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	f000 80ae 	beq.w	8007210 <_dtoa_r+0x518>
 80070b4:	9b07      	ldr	r3, [sp, #28]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 80aa 	beq.w	8007210 <_dtoa_r+0x518>
 80070bc:	9b00      	ldr	r3, [sp, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	dd37      	ble.n	8007132 <_dtoa_r+0x43a>
 80070c2:	1e7b      	subs	r3, r7, #1
 80070c4:	9304      	str	r3, [sp, #16]
 80070c6:	4620      	mov	r0, r4
 80070c8:	4b7d      	ldr	r3, [pc, #500]	@ (80072c0 <_dtoa_r+0x5c8>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	4629      	mov	r1, r5
 80070ce:	f7f9 fab3 	bl	8000638 <__aeabi_dmul>
 80070d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070d6:	9c00      	ldr	r4, [sp, #0]
 80070d8:	3601      	adds	r6, #1
 80070da:	4630      	mov	r0, r6
 80070dc:	f7f9 fa42 	bl	8000564 <__aeabi_i2d>
 80070e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070e4:	f7f9 faa8 	bl	8000638 <__aeabi_dmul>
 80070e8:	4b76      	ldr	r3, [pc, #472]	@ (80072c4 <_dtoa_r+0x5cc>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	f7f9 f8ee 	bl	80002cc <__adddf3>
 80070f0:	4605      	mov	r5, r0
 80070f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80070f6:	2c00      	cmp	r4, #0
 80070f8:	f040 808d 	bne.w	8007216 <_dtoa_r+0x51e>
 80070fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007100:	4b71      	ldr	r3, [pc, #452]	@ (80072c8 <_dtoa_r+0x5d0>)
 8007102:	2200      	movs	r2, #0
 8007104:	f7f9 f8e0 	bl	80002c8 <__aeabi_dsub>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007110:	462a      	mov	r2, r5
 8007112:	4633      	mov	r3, r6
 8007114:	f7f9 fd20 	bl	8000b58 <__aeabi_dcmpgt>
 8007118:	2800      	cmp	r0, #0
 800711a:	f040 828b 	bne.w	8007634 <_dtoa_r+0x93c>
 800711e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007122:	462a      	mov	r2, r5
 8007124:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007128:	f7f9 fcf8 	bl	8000b1c <__aeabi_dcmplt>
 800712c:	2800      	cmp	r0, #0
 800712e:	f040 8128 	bne.w	8007382 <_dtoa_r+0x68a>
 8007132:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007136:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800713a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800713c:	2b00      	cmp	r3, #0
 800713e:	f2c0 815a 	blt.w	80073f6 <_dtoa_r+0x6fe>
 8007142:	2f0e      	cmp	r7, #14
 8007144:	f300 8157 	bgt.w	80073f6 <_dtoa_r+0x6fe>
 8007148:	4b5a      	ldr	r3, [pc, #360]	@ (80072b4 <_dtoa_r+0x5bc>)
 800714a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800714e:	ed93 7b00 	vldr	d7, [r3]
 8007152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007154:	2b00      	cmp	r3, #0
 8007156:	ed8d 7b00 	vstr	d7, [sp]
 800715a:	da03      	bge.n	8007164 <_dtoa_r+0x46c>
 800715c:	9b07      	ldr	r3, [sp, #28]
 800715e:	2b00      	cmp	r3, #0
 8007160:	f340 8101 	ble.w	8007366 <_dtoa_r+0x66e>
 8007164:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007168:	4656      	mov	r6, sl
 800716a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800716e:	4620      	mov	r0, r4
 8007170:	4629      	mov	r1, r5
 8007172:	f7f9 fb8b 	bl	800088c <__aeabi_ddiv>
 8007176:	f7f9 fd0f 	bl	8000b98 <__aeabi_d2iz>
 800717a:	4680      	mov	r8, r0
 800717c:	f7f9 f9f2 	bl	8000564 <__aeabi_i2d>
 8007180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007184:	f7f9 fa58 	bl	8000638 <__aeabi_dmul>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	4620      	mov	r0, r4
 800718e:	4629      	mov	r1, r5
 8007190:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007194:	f7f9 f898 	bl	80002c8 <__aeabi_dsub>
 8007198:	f806 4b01 	strb.w	r4, [r6], #1
 800719c:	9d07      	ldr	r5, [sp, #28]
 800719e:	eba6 040a 	sub.w	r4, r6, sl
 80071a2:	42a5      	cmp	r5, r4
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	f040 8117 	bne.w	80073da <_dtoa_r+0x6e2>
 80071ac:	f7f9 f88e 	bl	80002cc <__adddf3>
 80071b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071b4:	4604      	mov	r4, r0
 80071b6:	460d      	mov	r5, r1
 80071b8:	f7f9 fcce 	bl	8000b58 <__aeabi_dcmpgt>
 80071bc:	2800      	cmp	r0, #0
 80071be:	f040 80f9 	bne.w	80073b4 <_dtoa_r+0x6bc>
 80071c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071c6:	4620      	mov	r0, r4
 80071c8:	4629      	mov	r1, r5
 80071ca:	f7f9 fc9d 	bl	8000b08 <__aeabi_dcmpeq>
 80071ce:	b118      	cbz	r0, 80071d8 <_dtoa_r+0x4e0>
 80071d0:	f018 0f01 	tst.w	r8, #1
 80071d4:	f040 80ee 	bne.w	80073b4 <_dtoa_r+0x6bc>
 80071d8:	4649      	mov	r1, r9
 80071da:	4658      	mov	r0, fp
 80071dc:	f000 fbda 	bl	8007994 <_Bfree>
 80071e0:	2300      	movs	r3, #0
 80071e2:	7033      	strb	r3, [r6, #0]
 80071e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071e6:	3701      	adds	r7, #1
 80071e8:	601f      	str	r7, [r3, #0]
 80071ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 831d 	beq.w	800782c <_dtoa_r+0xb34>
 80071f2:	601e      	str	r6, [r3, #0]
 80071f4:	e31a      	b.n	800782c <_dtoa_r+0xb34>
 80071f6:	07e2      	lsls	r2, r4, #31
 80071f8:	d505      	bpl.n	8007206 <_dtoa_r+0x50e>
 80071fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071fe:	f7f9 fa1b 	bl	8000638 <__aeabi_dmul>
 8007202:	3601      	adds	r6, #1
 8007204:	2301      	movs	r3, #1
 8007206:	1064      	asrs	r4, r4, #1
 8007208:	3508      	adds	r5, #8
 800720a:	e73f      	b.n	800708c <_dtoa_r+0x394>
 800720c:	2602      	movs	r6, #2
 800720e:	e742      	b.n	8007096 <_dtoa_r+0x39e>
 8007210:	9c07      	ldr	r4, [sp, #28]
 8007212:	9704      	str	r7, [sp, #16]
 8007214:	e761      	b.n	80070da <_dtoa_r+0x3e2>
 8007216:	4b27      	ldr	r3, [pc, #156]	@ (80072b4 <_dtoa_r+0x5bc>)
 8007218:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800721a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800721e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007222:	4454      	add	r4, sl
 8007224:	2900      	cmp	r1, #0
 8007226:	d053      	beq.n	80072d0 <_dtoa_r+0x5d8>
 8007228:	4928      	ldr	r1, [pc, #160]	@ (80072cc <_dtoa_r+0x5d4>)
 800722a:	2000      	movs	r0, #0
 800722c:	f7f9 fb2e 	bl	800088c <__aeabi_ddiv>
 8007230:	4633      	mov	r3, r6
 8007232:	462a      	mov	r2, r5
 8007234:	f7f9 f848 	bl	80002c8 <__aeabi_dsub>
 8007238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800723c:	4656      	mov	r6, sl
 800723e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007242:	f7f9 fca9 	bl	8000b98 <__aeabi_d2iz>
 8007246:	4605      	mov	r5, r0
 8007248:	f7f9 f98c 	bl	8000564 <__aeabi_i2d>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007254:	f7f9 f838 	bl	80002c8 <__aeabi_dsub>
 8007258:	3530      	adds	r5, #48	@ 0x30
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007262:	f806 5b01 	strb.w	r5, [r6], #1
 8007266:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800726a:	f7f9 fc57 	bl	8000b1c <__aeabi_dcmplt>
 800726e:	2800      	cmp	r0, #0
 8007270:	d171      	bne.n	8007356 <_dtoa_r+0x65e>
 8007272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007276:	4911      	ldr	r1, [pc, #68]	@ (80072bc <_dtoa_r+0x5c4>)
 8007278:	2000      	movs	r0, #0
 800727a:	f7f9 f825 	bl	80002c8 <__aeabi_dsub>
 800727e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007282:	f7f9 fc4b 	bl	8000b1c <__aeabi_dcmplt>
 8007286:	2800      	cmp	r0, #0
 8007288:	f040 8095 	bne.w	80073b6 <_dtoa_r+0x6be>
 800728c:	42a6      	cmp	r6, r4
 800728e:	f43f af50 	beq.w	8007132 <_dtoa_r+0x43a>
 8007292:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007296:	4b0a      	ldr	r3, [pc, #40]	@ (80072c0 <_dtoa_r+0x5c8>)
 8007298:	2200      	movs	r2, #0
 800729a:	f7f9 f9cd 	bl	8000638 <__aeabi_dmul>
 800729e:	4b08      	ldr	r3, [pc, #32]	@ (80072c0 <_dtoa_r+0x5c8>)
 80072a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072a4:	2200      	movs	r2, #0
 80072a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072aa:	f7f9 f9c5 	bl	8000638 <__aeabi_dmul>
 80072ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072b2:	e7c4      	b.n	800723e <_dtoa_r+0x546>
 80072b4:	080090d8 	.word	0x080090d8
 80072b8:	080090b0 	.word	0x080090b0
 80072bc:	3ff00000 	.word	0x3ff00000
 80072c0:	40240000 	.word	0x40240000
 80072c4:	401c0000 	.word	0x401c0000
 80072c8:	40140000 	.word	0x40140000
 80072cc:	3fe00000 	.word	0x3fe00000
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	f7f9 f9b0 	bl	8000638 <__aeabi_dmul>
 80072d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80072de:	4656      	mov	r6, sl
 80072e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072e4:	f7f9 fc58 	bl	8000b98 <__aeabi_d2iz>
 80072e8:	4605      	mov	r5, r0
 80072ea:	f7f9 f93b 	bl	8000564 <__aeabi_i2d>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072f6:	f7f8 ffe7 	bl	80002c8 <__aeabi_dsub>
 80072fa:	3530      	adds	r5, #48	@ 0x30
 80072fc:	f806 5b01 	strb.w	r5, [r6], #1
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	42a6      	cmp	r6, r4
 8007306:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	d124      	bne.n	800735a <_dtoa_r+0x662>
 8007310:	4bac      	ldr	r3, [pc, #688]	@ (80075c4 <_dtoa_r+0x8cc>)
 8007312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007316:	f7f8 ffd9 	bl	80002cc <__adddf3>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007322:	f7f9 fc19 	bl	8000b58 <__aeabi_dcmpgt>
 8007326:	2800      	cmp	r0, #0
 8007328:	d145      	bne.n	80073b6 <_dtoa_r+0x6be>
 800732a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800732e:	49a5      	ldr	r1, [pc, #660]	@ (80075c4 <_dtoa_r+0x8cc>)
 8007330:	2000      	movs	r0, #0
 8007332:	f7f8 ffc9 	bl	80002c8 <__aeabi_dsub>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800733e:	f7f9 fbed 	bl	8000b1c <__aeabi_dcmplt>
 8007342:	2800      	cmp	r0, #0
 8007344:	f43f aef5 	beq.w	8007132 <_dtoa_r+0x43a>
 8007348:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800734a:	1e73      	subs	r3, r6, #1
 800734c:	9315      	str	r3, [sp, #84]	@ 0x54
 800734e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007352:	2b30      	cmp	r3, #48	@ 0x30
 8007354:	d0f8      	beq.n	8007348 <_dtoa_r+0x650>
 8007356:	9f04      	ldr	r7, [sp, #16]
 8007358:	e73e      	b.n	80071d8 <_dtoa_r+0x4e0>
 800735a:	4b9b      	ldr	r3, [pc, #620]	@ (80075c8 <_dtoa_r+0x8d0>)
 800735c:	f7f9 f96c 	bl	8000638 <__aeabi_dmul>
 8007360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007364:	e7bc      	b.n	80072e0 <_dtoa_r+0x5e8>
 8007366:	d10c      	bne.n	8007382 <_dtoa_r+0x68a>
 8007368:	4b98      	ldr	r3, [pc, #608]	@ (80075cc <_dtoa_r+0x8d4>)
 800736a:	2200      	movs	r2, #0
 800736c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007370:	f7f9 f962 	bl	8000638 <__aeabi_dmul>
 8007374:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007378:	f7f9 fbe4 	bl	8000b44 <__aeabi_dcmpge>
 800737c:	2800      	cmp	r0, #0
 800737e:	f000 8157 	beq.w	8007630 <_dtoa_r+0x938>
 8007382:	2400      	movs	r4, #0
 8007384:	4625      	mov	r5, r4
 8007386:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007388:	43db      	mvns	r3, r3
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	4656      	mov	r6, sl
 800738e:	2700      	movs	r7, #0
 8007390:	4621      	mov	r1, r4
 8007392:	4658      	mov	r0, fp
 8007394:	f000 fafe 	bl	8007994 <_Bfree>
 8007398:	2d00      	cmp	r5, #0
 800739a:	d0dc      	beq.n	8007356 <_dtoa_r+0x65e>
 800739c:	b12f      	cbz	r7, 80073aa <_dtoa_r+0x6b2>
 800739e:	42af      	cmp	r7, r5
 80073a0:	d003      	beq.n	80073aa <_dtoa_r+0x6b2>
 80073a2:	4639      	mov	r1, r7
 80073a4:	4658      	mov	r0, fp
 80073a6:	f000 faf5 	bl	8007994 <_Bfree>
 80073aa:	4629      	mov	r1, r5
 80073ac:	4658      	mov	r0, fp
 80073ae:	f000 faf1 	bl	8007994 <_Bfree>
 80073b2:	e7d0      	b.n	8007356 <_dtoa_r+0x65e>
 80073b4:	9704      	str	r7, [sp, #16]
 80073b6:	4633      	mov	r3, r6
 80073b8:	461e      	mov	r6, r3
 80073ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073be:	2a39      	cmp	r2, #57	@ 0x39
 80073c0:	d107      	bne.n	80073d2 <_dtoa_r+0x6da>
 80073c2:	459a      	cmp	sl, r3
 80073c4:	d1f8      	bne.n	80073b8 <_dtoa_r+0x6c0>
 80073c6:	9a04      	ldr	r2, [sp, #16]
 80073c8:	3201      	adds	r2, #1
 80073ca:	9204      	str	r2, [sp, #16]
 80073cc:	2230      	movs	r2, #48	@ 0x30
 80073ce:	f88a 2000 	strb.w	r2, [sl]
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	3201      	adds	r2, #1
 80073d6:	701a      	strb	r2, [r3, #0]
 80073d8:	e7bd      	b.n	8007356 <_dtoa_r+0x65e>
 80073da:	4b7b      	ldr	r3, [pc, #492]	@ (80075c8 <_dtoa_r+0x8d0>)
 80073dc:	2200      	movs	r2, #0
 80073de:	f7f9 f92b 	bl	8000638 <__aeabi_dmul>
 80073e2:	2200      	movs	r2, #0
 80073e4:	2300      	movs	r3, #0
 80073e6:	4604      	mov	r4, r0
 80073e8:	460d      	mov	r5, r1
 80073ea:	f7f9 fb8d 	bl	8000b08 <__aeabi_dcmpeq>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f43f aebb 	beq.w	800716a <_dtoa_r+0x472>
 80073f4:	e6f0      	b.n	80071d8 <_dtoa_r+0x4e0>
 80073f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073f8:	2a00      	cmp	r2, #0
 80073fa:	f000 80db 	beq.w	80075b4 <_dtoa_r+0x8bc>
 80073fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007400:	2a01      	cmp	r2, #1
 8007402:	f300 80bf 	bgt.w	8007584 <_dtoa_r+0x88c>
 8007406:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007408:	2a00      	cmp	r2, #0
 800740a:	f000 80b7 	beq.w	800757c <_dtoa_r+0x884>
 800740e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007412:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007414:	4646      	mov	r6, r8
 8007416:	9a08      	ldr	r2, [sp, #32]
 8007418:	2101      	movs	r1, #1
 800741a:	441a      	add	r2, r3
 800741c:	4658      	mov	r0, fp
 800741e:	4498      	add	r8, r3
 8007420:	9208      	str	r2, [sp, #32]
 8007422:	f000 fb6b 	bl	8007afc <__i2b>
 8007426:	4605      	mov	r5, r0
 8007428:	b15e      	cbz	r6, 8007442 <_dtoa_r+0x74a>
 800742a:	9b08      	ldr	r3, [sp, #32]
 800742c:	2b00      	cmp	r3, #0
 800742e:	dd08      	ble.n	8007442 <_dtoa_r+0x74a>
 8007430:	42b3      	cmp	r3, r6
 8007432:	9a08      	ldr	r2, [sp, #32]
 8007434:	bfa8      	it	ge
 8007436:	4633      	movge	r3, r6
 8007438:	eba8 0803 	sub.w	r8, r8, r3
 800743c:	1af6      	subs	r6, r6, r3
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	9308      	str	r3, [sp, #32]
 8007442:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007444:	b1f3      	cbz	r3, 8007484 <_dtoa_r+0x78c>
 8007446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 80b7 	beq.w	80075bc <_dtoa_r+0x8c4>
 800744e:	b18c      	cbz	r4, 8007474 <_dtoa_r+0x77c>
 8007450:	4629      	mov	r1, r5
 8007452:	4622      	mov	r2, r4
 8007454:	4658      	mov	r0, fp
 8007456:	f000 fc11 	bl	8007c7c <__pow5mult>
 800745a:	464a      	mov	r2, r9
 800745c:	4601      	mov	r1, r0
 800745e:	4605      	mov	r5, r0
 8007460:	4658      	mov	r0, fp
 8007462:	f000 fb61 	bl	8007b28 <__multiply>
 8007466:	4649      	mov	r1, r9
 8007468:	9004      	str	r0, [sp, #16]
 800746a:	4658      	mov	r0, fp
 800746c:	f000 fa92 	bl	8007994 <_Bfree>
 8007470:	9b04      	ldr	r3, [sp, #16]
 8007472:	4699      	mov	r9, r3
 8007474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007476:	1b1a      	subs	r2, r3, r4
 8007478:	d004      	beq.n	8007484 <_dtoa_r+0x78c>
 800747a:	4649      	mov	r1, r9
 800747c:	4658      	mov	r0, fp
 800747e:	f000 fbfd 	bl	8007c7c <__pow5mult>
 8007482:	4681      	mov	r9, r0
 8007484:	2101      	movs	r1, #1
 8007486:	4658      	mov	r0, fp
 8007488:	f000 fb38 	bl	8007afc <__i2b>
 800748c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800748e:	4604      	mov	r4, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 81cf 	beq.w	8007834 <_dtoa_r+0xb3c>
 8007496:	461a      	mov	r2, r3
 8007498:	4601      	mov	r1, r0
 800749a:	4658      	mov	r0, fp
 800749c:	f000 fbee 	bl	8007c7c <__pow5mult>
 80074a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	4604      	mov	r4, r0
 80074a6:	f300 8095 	bgt.w	80075d4 <_dtoa_r+0x8dc>
 80074aa:	9b02      	ldr	r3, [sp, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f040 8087 	bne.w	80075c0 <_dtoa_r+0x8c8>
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 8089 	bne.w	80075d0 <_dtoa_r+0x8d8>
 80074be:	9b03      	ldr	r3, [sp, #12]
 80074c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074c4:	0d1b      	lsrs	r3, r3, #20
 80074c6:	051b      	lsls	r3, r3, #20
 80074c8:	b12b      	cbz	r3, 80074d6 <_dtoa_r+0x7de>
 80074ca:	9b08      	ldr	r3, [sp, #32]
 80074cc:	3301      	adds	r3, #1
 80074ce:	9308      	str	r3, [sp, #32]
 80074d0:	f108 0801 	add.w	r8, r8, #1
 80074d4:	2301      	movs	r3, #1
 80074d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 81b0 	beq.w	8007840 <_dtoa_r+0xb48>
 80074e0:	6923      	ldr	r3, [r4, #16]
 80074e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074e6:	6918      	ldr	r0, [r3, #16]
 80074e8:	f000 fabc 	bl	8007a64 <__hi0bits>
 80074ec:	f1c0 0020 	rsb	r0, r0, #32
 80074f0:	9b08      	ldr	r3, [sp, #32]
 80074f2:	4418      	add	r0, r3
 80074f4:	f010 001f 	ands.w	r0, r0, #31
 80074f8:	d077      	beq.n	80075ea <_dtoa_r+0x8f2>
 80074fa:	f1c0 0320 	rsb	r3, r0, #32
 80074fe:	2b04      	cmp	r3, #4
 8007500:	dd6b      	ble.n	80075da <_dtoa_r+0x8e2>
 8007502:	9b08      	ldr	r3, [sp, #32]
 8007504:	f1c0 001c 	rsb	r0, r0, #28
 8007508:	4403      	add	r3, r0
 800750a:	4480      	add	r8, r0
 800750c:	4406      	add	r6, r0
 800750e:	9308      	str	r3, [sp, #32]
 8007510:	f1b8 0f00 	cmp.w	r8, #0
 8007514:	dd05      	ble.n	8007522 <_dtoa_r+0x82a>
 8007516:	4649      	mov	r1, r9
 8007518:	4642      	mov	r2, r8
 800751a:	4658      	mov	r0, fp
 800751c:	f000 fc08 	bl	8007d30 <__lshift>
 8007520:	4681      	mov	r9, r0
 8007522:	9b08      	ldr	r3, [sp, #32]
 8007524:	2b00      	cmp	r3, #0
 8007526:	dd05      	ble.n	8007534 <_dtoa_r+0x83c>
 8007528:	4621      	mov	r1, r4
 800752a:	461a      	mov	r2, r3
 800752c:	4658      	mov	r0, fp
 800752e:	f000 fbff 	bl	8007d30 <__lshift>
 8007532:	4604      	mov	r4, r0
 8007534:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007536:	2b00      	cmp	r3, #0
 8007538:	d059      	beq.n	80075ee <_dtoa_r+0x8f6>
 800753a:	4621      	mov	r1, r4
 800753c:	4648      	mov	r0, r9
 800753e:	f000 fc63 	bl	8007e08 <__mcmp>
 8007542:	2800      	cmp	r0, #0
 8007544:	da53      	bge.n	80075ee <_dtoa_r+0x8f6>
 8007546:	1e7b      	subs	r3, r7, #1
 8007548:	9304      	str	r3, [sp, #16]
 800754a:	4649      	mov	r1, r9
 800754c:	2300      	movs	r3, #0
 800754e:	220a      	movs	r2, #10
 8007550:	4658      	mov	r0, fp
 8007552:	f000 fa41 	bl	80079d8 <__multadd>
 8007556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007558:	4681      	mov	r9, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 8172 	beq.w	8007844 <_dtoa_r+0xb4c>
 8007560:	2300      	movs	r3, #0
 8007562:	4629      	mov	r1, r5
 8007564:	220a      	movs	r2, #10
 8007566:	4658      	mov	r0, fp
 8007568:	f000 fa36 	bl	80079d8 <__multadd>
 800756c:	9b00      	ldr	r3, [sp, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	4605      	mov	r5, r0
 8007572:	dc67      	bgt.n	8007644 <_dtoa_r+0x94c>
 8007574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007576:	2b02      	cmp	r3, #2
 8007578:	dc41      	bgt.n	80075fe <_dtoa_r+0x906>
 800757a:	e063      	b.n	8007644 <_dtoa_r+0x94c>
 800757c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800757e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007582:	e746      	b.n	8007412 <_dtoa_r+0x71a>
 8007584:	9b07      	ldr	r3, [sp, #28]
 8007586:	1e5c      	subs	r4, r3, #1
 8007588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800758a:	42a3      	cmp	r3, r4
 800758c:	bfbf      	itttt	lt
 800758e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007590:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007592:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007594:	1ae3      	sublt	r3, r4, r3
 8007596:	bfb4      	ite	lt
 8007598:	18d2      	addlt	r2, r2, r3
 800759a:	1b1c      	subge	r4, r3, r4
 800759c:	9b07      	ldr	r3, [sp, #28]
 800759e:	bfbc      	itt	lt
 80075a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80075a2:	2400      	movlt	r4, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bfb5      	itete	lt
 80075a8:	eba8 0603 	sublt.w	r6, r8, r3
 80075ac:	9b07      	ldrge	r3, [sp, #28]
 80075ae:	2300      	movlt	r3, #0
 80075b0:	4646      	movge	r6, r8
 80075b2:	e730      	b.n	8007416 <_dtoa_r+0x71e>
 80075b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80075b8:	4646      	mov	r6, r8
 80075ba:	e735      	b.n	8007428 <_dtoa_r+0x730>
 80075bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075be:	e75c      	b.n	800747a <_dtoa_r+0x782>
 80075c0:	2300      	movs	r3, #0
 80075c2:	e788      	b.n	80074d6 <_dtoa_r+0x7de>
 80075c4:	3fe00000 	.word	0x3fe00000
 80075c8:	40240000 	.word	0x40240000
 80075cc:	40140000 	.word	0x40140000
 80075d0:	9b02      	ldr	r3, [sp, #8]
 80075d2:	e780      	b.n	80074d6 <_dtoa_r+0x7de>
 80075d4:	2300      	movs	r3, #0
 80075d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80075d8:	e782      	b.n	80074e0 <_dtoa_r+0x7e8>
 80075da:	d099      	beq.n	8007510 <_dtoa_r+0x818>
 80075dc:	9a08      	ldr	r2, [sp, #32]
 80075de:	331c      	adds	r3, #28
 80075e0:	441a      	add	r2, r3
 80075e2:	4498      	add	r8, r3
 80075e4:	441e      	add	r6, r3
 80075e6:	9208      	str	r2, [sp, #32]
 80075e8:	e792      	b.n	8007510 <_dtoa_r+0x818>
 80075ea:	4603      	mov	r3, r0
 80075ec:	e7f6      	b.n	80075dc <_dtoa_r+0x8e4>
 80075ee:	9b07      	ldr	r3, [sp, #28]
 80075f0:	9704      	str	r7, [sp, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	dc20      	bgt.n	8007638 <_dtoa_r+0x940>
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	dd1e      	ble.n	800763c <_dtoa_r+0x944>
 80075fe:	9b00      	ldr	r3, [sp, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f47f aec0 	bne.w	8007386 <_dtoa_r+0x68e>
 8007606:	4621      	mov	r1, r4
 8007608:	2205      	movs	r2, #5
 800760a:	4658      	mov	r0, fp
 800760c:	f000 f9e4 	bl	80079d8 <__multadd>
 8007610:	4601      	mov	r1, r0
 8007612:	4604      	mov	r4, r0
 8007614:	4648      	mov	r0, r9
 8007616:	f000 fbf7 	bl	8007e08 <__mcmp>
 800761a:	2800      	cmp	r0, #0
 800761c:	f77f aeb3 	ble.w	8007386 <_dtoa_r+0x68e>
 8007620:	4656      	mov	r6, sl
 8007622:	2331      	movs	r3, #49	@ 0x31
 8007624:	f806 3b01 	strb.w	r3, [r6], #1
 8007628:	9b04      	ldr	r3, [sp, #16]
 800762a:	3301      	adds	r3, #1
 800762c:	9304      	str	r3, [sp, #16]
 800762e:	e6ae      	b.n	800738e <_dtoa_r+0x696>
 8007630:	9c07      	ldr	r4, [sp, #28]
 8007632:	9704      	str	r7, [sp, #16]
 8007634:	4625      	mov	r5, r4
 8007636:	e7f3      	b.n	8007620 <_dtoa_r+0x928>
 8007638:	9b07      	ldr	r3, [sp, #28]
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8104 	beq.w	800784c <_dtoa_r+0xb54>
 8007644:	2e00      	cmp	r6, #0
 8007646:	dd05      	ble.n	8007654 <_dtoa_r+0x95c>
 8007648:	4629      	mov	r1, r5
 800764a:	4632      	mov	r2, r6
 800764c:	4658      	mov	r0, fp
 800764e:	f000 fb6f 	bl	8007d30 <__lshift>
 8007652:	4605      	mov	r5, r0
 8007654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007656:	2b00      	cmp	r3, #0
 8007658:	d05a      	beq.n	8007710 <_dtoa_r+0xa18>
 800765a:	6869      	ldr	r1, [r5, #4]
 800765c:	4658      	mov	r0, fp
 800765e:	f000 f959 	bl	8007914 <_Balloc>
 8007662:	4606      	mov	r6, r0
 8007664:	b928      	cbnz	r0, 8007672 <_dtoa_r+0x97a>
 8007666:	4b84      	ldr	r3, [pc, #528]	@ (8007878 <_dtoa_r+0xb80>)
 8007668:	4602      	mov	r2, r0
 800766a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800766e:	f7ff bb5a 	b.w	8006d26 <_dtoa_r+0x2e>
 8007672:	692a      	ldr	r2, [r5, #16]
 8007674:	3202      	adds	r2, #2
 8007676:	0092      	lsls	r2, r2, #2
 8007678:	f105 010c 	add.w	r1, r5, #12
 800767c:	300c      	adds	r0, #12
 800767e:	f7ff faa4 	bl	8006bca <memcpy>
 8007682:	2201      	movs	r2, #1
 8007684:	4631      	mov	r1, r6
 8007686:	4658      	mov	r0, fp
 8007688:	f000 fb52 	bl	8007d30 <__lshift>
 800768c:	f10a 0301 	add.w	r3, sl, #1
 8007690:	9307      	str	r3, [sp, #28]
 8007692:	9b00      	ldr	r3, [sp, #0]
 8007694:	4453      	add	r3, sl
 8007696:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007698:	9b02      	ldr	r3, [sp, #8]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	462f      	mov	r7, r5
 80076a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80076a2:	4605      	mov	r5, r0
 80076a4:	9b07      	ldr	r3, [sp, #28]
 80076a6:	4621      	mov	r1, r4
 80076a8:	3b01      	subs	r3, #1
 80076aa:	4648      	mov	r0, r9
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	f7ff fa9a 	bl	8006be6 <quorem>
 80076b2:	4639      	mov	r1, r7
 80076b4:	9002      	str	r0, [sp, #8]
 80076b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80076ba:	4648      	mov	r0, r9
 80076bc:	f000 fba4 	bl	8007e08 <__mcmp>
 80076c0:	462a      	mov	r2, r5
 80076c2:	9008      	str	r0, [sp, #32]
 80076c4:	4621      	mov	r1, r4
 80076c6:	4658      	mov	r0, fp
 80076c8:	f000 fbba 	bl	8007e40 <__mdiff>
 80076cc:	68c2      	ldr	r2, [r0, #12]
 80076ce:	4606      	mov	r6, r0
 80076d0:	bb02      	cbnz	r2, 8007714 <_dtoa_r+0xa1c>
 80076d2:	4601      	mov	r1, r0
 80076d4:	4648      	mov	r0, r9
 80076d6:	f000 fb97 	bl	8007e08 <__mcmp>
 80076da:	4602      	mov	r2, r0
 80076dc:	4631      	mov	r1, r6
 80076de:	4658      	mov	r0, fp
 80076e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80076e2:	f000 f957 	bl	8007994 <_Bfree>
 80076e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076ea:	9e07      	ldr	r6, [sp, #28]
 80076ec:	ea43 0102 	orr.w	r1, r3, r2
 80076f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076f2:	4319      	orrs	r1, r3
 80076f4:	d110      	bne.n	8007718 <_dtoa_r+0xa20>
 80076f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076fa:	d029      	beq.n	8007750 <_dtoa_r+0xa58>
 80076fc:	9b08      	ldr	r3, [sp, #32]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	dd02      	ble.n	8007708 <_dtoa_r+0xa10>
 8007702:	9b02      	ldr	r3, [sp, #8]
 8007704:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007708:	9b00      	ldr	r3, [sp, #0]
 800770a:	f883 8000 	strb.w	r8, [r3]
 800770e:	e63f      	b.n	8007390 <_dtoa_r+0x698>
 8007710:	4628      	mov	r0, r5
 8007712:	e7bb      	b.n	800768c <_dtoa_r+0x994>
 8007714:	2201      	movs	r2, #1
 8007716:	e7e1      	b.n	80076dc <_dtoa_r+0x9e4>
 8007718:	9b08      	ldr	r3, [sp, #32]
 800771a:	2b00      	cmp	r3, #0
 800771c:	db04      	blt.n	8007728 <_dtoa_r+0xa30>
 800771e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007720:	430b      	orrs	r3, r1
 8007722:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007724:	430b      	orrs	r3, r1
 8007726:	d120      	bne.n	800776a <_dtoa_r+0xa72>
 8007728:	2a00      	cmp	r2, #0
 800772a:	dded      	ble.n	8007708 <_dtoa_r+0xa10>
 800772c:	4649      	mov	r1, r9
 800772e:	2201      	movs	r2, #1
 8007730:	4658      	mov	r0, fp
 8007732:	f000 fafd 	bl	8007d30 <__lshift>
 8007736:	4621      	mov	r1, r4
 8007738:	4681      	mov	r9, r0
 800773a:	f000 fb65 	bl	8007e08 <__mcmp>
 800773e:	2800      	cmp	r0, #0
 8007740:	dc03      	bgt.n	800774a <_dtoa_r+0xa52>
 8007742:	d1e1      	bne.n	8007708 <_dtoa_r+0xa10>
 8007744:	f018 0f01 	tst.w	r8, #1
 8007748:	d0de      	beq.n	8007708 <_dtoa_r+0xa10>
 800774a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800774e:	d1d8      	bne.n	8007702 <_dtoa_r+0xa0a>
 8007750:	9a00      	ldr	r2, [sp, #0]
 8007752:	2339      	movs	r3, #57	@ 0x39
 8007754:	7013      	strb	r3, [r2, #0]
 8007756:	4633      	mov	r3, r6
 8007758:	461e      	mov	r6, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007760:	2a39      	cmp	r2, #57	@ 0x39
 8007762:	d052      	beq.n	800780a <_dtoa_r+0xb12>
 8007764:	3201      	adds	r2, #1
 8007766:	701a      	strb	r2, [r3, #0]
 8007768:	e612      	b.n	8007390 <_dtoa_r+0x698>
 800776a:	2a00      	cmp	r2, #0
 800776c:	dd07      	ble.n	800777e <_dtoa_r+0xa86>
 800776e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007772:	d0ed      	beq.n	8007750 <_dtoa_r+0xa58>
 8007774:	9a00      	ldr	r2, [sp, #0]
 8007776:	f108 0301 	add.w	r3, r8, #1
 800777a:	7013      	strb	r3, [r2, #0]
 800777c:	e608      	b.n	8007390 <_dtoa_r+0x698>
 800777e:	9b07      	ldr	r3, [sp, #28]
 8007780:	9a07      	ldr	r2, [sp, #28]
 8007782:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007788:	4293      	cmp	r3, r2
 800778a:	d028      	beq.n	80077de <_dtoa_r+0xae6>
 800778c:	4649      	mov	r1, r9
 800778e:	2300      	movs	r3, #0
 8007790:	220a      	movs	r2, #10
 8007792:	4658      	mov	r0, fp
 8007794:	f000 f920 	bl	80079d8 <__multadd>
 8007798:	42af      	cmp	r7, r5
 800779a:	4681      	mov	r9, r0
 800779c:	f04f 0300 	mov.w	r3, #0
 80077a0:	f04f 020a 	mov.w	r2, #10
 80077a4:	4639      	mov	r1, r7
 80077a6:	4658      	mov	r0, fp
 80077a8:	d107      	bne.n	80077ba <_dtoa_r+0xac2>
 80077aa:	f000 f915 	bl	80079d8 <__multadd>
 80077ae:	4607      	mov	r7, r0
 80077b0:	4605      	mov	r5, r0
 80077b2:	9b07      	ldr	r3, [sp, #28]
 80077b4:	3301      	adds	r3, #1
 80077b6:	9307      	str	r3, [sp, #28]
 80077b8:	e774      	b.n	80076a4 <_dtoa_r+0x9ac>
 80077ba:	f000 f90d 	bl	80079d8 <__multadd>
 80077be:	4629      	mov	r1, r5
 80077c0:	4607      	mov	r7, r0
 80077c2:	2300      	movs	r3, #0
 80077c4:	220a      	movs	r2, #10
 80077c6:	4658      	mov	r0, fp
 80077c8:	f000 f906 	bl	80079d8 <__multadd>
 80077cc:	4605      	mov	r5, r0
 80077ce:	e7f0      	b.n	80077b2 <_dtoa_r+0xaba>
 80077d0:	9b00      	ldr	r3, [sp, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfcc      	ite	gt
 80077d6:	461e      	movgt	r6, r3
 80077d8:	2601      	movle	r6, #1
 80077da:	4456      	add	r6, sl
 80077dc:	2700      	movs	r7, #0
 80077de:	4649      	mov	r1, r9
 80077e0:	2201      	movs	r2, #1
 80077e2:	4658      	mov	r0, fp
 80077e4:	f000 faa4 	bl	8007d30 <__lshift>
 80077e8:	4621      	mov	r1, r4
 80077ea:	4681      	mov	r9, r0
 80077ec:	f000 fb0c 	bl	8007e08 <__mcmp>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	dcb0      	bgt.n	8007756 <_dtoa_r+0xa5e>
 80077f4:	d102      	bne.n	80077fc <_dtoa_r+0xb04>
 80077f6:	f018 0f01 	tst.w	r8, #1
 80077fa:	d1ac      	bne.n	8007756 <_dtoa_r+0xa5e>
 80077fc:	4633      	mov	r3, r6
 80077fe:	461e      	mov	r6, r3
 8007800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007804:	2a30      	cmp	r2, #48	@ 0x30
 8007806:	d0fa      	beq.n	80077fe <_dtoa_r+0xb06>
 8007808:	e5c2      	b.n	8007390 <_dtoa_r+0x698>
 800780a:	459a      	cmp	sl, r3
 800780c:	d1a4      	bne.n	8007758 <_dtoa_r+0xa60>
 800780e:	9b04      	ldr	r3, [sp, #16]
 8007810:	3301      	adds	r3, #1
 8007812:	9304      	str	r3, [sp, #16]
 8007814:	2331      	movs	r3, #49	@ 0x31
 8007816:	f88a 3000 	strb.w	r3, [sl]
 800781a:	e5b9      	b.n	8007390 <_dtoa_r+0x698>
 800781c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800781e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800787c <_dtoa_r+0xb84>
 8007822:	b11b      	cbz	r3, 800782c <_dtoa_r+0xb34>
 8007824:	f10a 0308 	add.w	r3, sl, #8
 8007828:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	4650      	mov	r0, sl
 800782e:	b019      	add	sp, #100	@ 0x64
 8007830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007836:	2b01      	cmp	r3, #1
 8007838:	f77f ae37 	ble.w	80074aa <_dtoa_r+0x7b2>
 800783c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800783e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007840:	2001      	movs	r0, #1
 8007842:	e655      	b.n	80074f0 <_dtoa_r+0x7f8>
 8007844:	9b00      	ldr	r3, [sp, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f77f aed6 	ble.w	80075f8 <_dtoa_r+0x900>
 800784c:	4656      	mov	r6, sl
 800784e:	4621      	mov	r1, r4
 8007850:	4648      	mov	r0, r9
 8007852:	f7ff f9c8 	bl	8006be6 <quorem>
 8007856:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800785a:	f806 8b01 	strb.w	r8, [r6], #1
 800785e:	9b00      	ldr	r3, [sp, #0]
 8007860:	eba6 020a 	sub.w	r2, r6, sl
 8007864:	4293      	cmp	r3, r2
 8007866:	ddb3      	ble.n	80077d0 <_dtoa_r+0xad8>
 8007868:	4649      	mov	r1, r9
 800786a:	2300      	movs	r3, #0
 800786c:	220a      	movs	r2, #10
 800786e:	4658      	mov	r0, fp
 8007870:	f000 f8b2 	bl	80079d8 <__multadd>
 8007874:	4681      	mov	r9, r0
 8007876:	e7ea      	b.n	800784e <_dtoa_r+0xb56>
 8007878:	08009034 	.word	0x08009034
 800787c:	08008fb8 	.word	0x08008fb8

08007880 <_free_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4605      	mov	r5, r0
 8007884:	2900      	cmp	r1, #0
 8007886:	d041      	beq.n	800790c <_free_r+0x8c>
 8007888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800788c:	1f0c      	subs	r4, r1, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	bfb8      	it	lt
 8007892:	18e4      	addlt	r4, r4, r3
 8007894:	f7fe fb86 	bl	8005fa4 <__malloc_lock>
 8007898:	4a1d      	ldr	r2, [pc, #116]	@ (8007910 <_free_r+0x90>)
 800789a:	6813      	ldr	r3, [r2, #0]
 800789c:	b933      	cbnz	r3, 80078ac <_free_r+0x2c>
 800789e:	6063      	str	r3, [r4, #4]
 80078a0:	6014      	str	r4, [r2, #0]
 80078a2:	4628      	mov	r0, r5
 80078a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078a8:	f7fe bb82 	b.w	8005fb0 <__malloc_unlock>
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	d908      	bls.n	80078c2 <_free_r+0x42>
 80078b0:	6820      	ldr	r0, [r4, #0]
 80078b2:	1821      	adds	r1, r4, r0
 80078b4:	428b      	cmp	r3, r1
 80078b6:	bf01      	itttt	eq
 80078b8:	6819      	ldreq	r1, [r3, #0]
 80078ba:	685b      	ldreq	r3, [r3, #4]
 80078bc:	1809      	addeq	r1, r1, r0
 80078be:	6021      	streq	r1, [r4, #0]
 80078c0:	e7ed      	b.n	800789e <_free_r+0x1e>
 80078c2:	461a      	mov	r2, r3
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	b10b      	cbz	r3, 80078cc <_free_r+0x4c>
 80078c8:	42a3      	cmp	r3, r4
 80078ca:	d9fa      	bls.n	80078c2 <_free_r+0x42>
 80078cc:	6811      	ldr	r1, [r2, #0]
 80078ce:	1850      	adds	r0, r2, r1
 80078d0:	42a0      	cmp	r0, r4
 80078d2:	d10b      	bne.n	80078ec <_free_r+0x6c>
 80078d4:	6820      	ldr	r0, [r4, #0]
 80078d6:	4401      	add	r1, r0
 80078d8:	1850      	adds	r0, r2, r1
 80078da:	4283      	cmp	r3, r0
 80078dc:	6011      	str	r1, [r2, #0]
 80078de:	d1e0      	bne.n	80078a2 <_free_r+0x22>
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	6053      	str	r3, [r2, #4]
 80078e6:	4408      	add	r0, r1
 80078e8:	6010      	str	r0, [r2, #0]
 80078ea:	e7da      	b.n	80078a2 <_free_r+0x22>
 80078ec:	d902      	bls.n	80078f4 <_free_r+0x74>
 80078ee:	230c      	movs	r3, #12
 80078f0:	602b      	str	r3, [r5, #0]
 80078f2:	e7d6      	b.n	80078a2 <_free_r+0x22>
 80078f4:	6820      	ldr	r0, [r4, #0]
 80078f6:	1821      	adds	r1, r4, r0
 80078f8:	428b      	cmp	r3, r1
 80078fa:	bf04      	itt	eq
 80078fc:	6819      	ldreq	r1, [r3, #0]
 80078fe:	685b      	ldreq	r3, [r3, #4]
 8007900:	6063      	str	r3, [r4, #4]
 8007902:	bf04      	itt	eq
 8007904:	1809      	addeq	r1, r1, r0
 8007906:	6021      	streq	r1, [r4, #0]
 8007908:	6054      	str	r4, [r2, #4]
 800790a:	e7ca      	b.n	80078a2 <_free_r+0x22>
 800790c:	bd38      	pop	{r3, r4, r5, pc}
 800790e:	bf00      	nop
 8007910:	20000804 	.word	0x20000804

08007914 <_Balloc>:
 8007914:	b570      	push	{r4, r5, r6, lr}
 8007916:	69c6      	ldr	r6, [r0, #28]
 8007918:	4604      	mov	r4, r0
 800791a:	460d      	mov	r5, r1
 800791c:	b976      	cbnz	r6, 800793c <_Balloc+0x28>
 800791e:	2010      	movs	r0, #16
 8007920:	f7fe fa8e 	bl	8005e40 <malloc>
 8007924:	4602      	mov	r2, r0
 8007926:	61e0      	str	r0, [r4, #28]
 8007928:	b920      	cbnz	r0, 8007934 <_Balloc+0x20>
 800792a:	4b18      	ldr	r3, [pc, #96]	@ (800798c <_Balloc+0x78>)
 800792c:	4818      	ldr	r0, [pc, #96]	@ (8007990 <_Balloc+0x7c>)
 800792e:	216b      	movs	r1, #107	@ 0x6b
 8007930:	f000 fd90 	bl	8008454 <__assert_func>
 8007934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007938:	6006      	str	r6, [r0, #0]
 800793a:	60c6      	str	r6, [r0, #12]
 800793c:	69e6      	ldr	r6, [r4, #28]
 800793e:	68f3      	ldr	r3, [r6, #12]
 8007940:	b183      	cbz	r3, 8007964 <_Balloc+0x50>
 8007942:	69e3      	ldr	r3, [r4, #28]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800794a:	b9b8      	cbnz	r0, 800797c <_Balloc+0x68>
 800794c:	2101      	movs	r1, #1
 800794e:	fa01 f605 	lsl.w	r6, r1, r5
 8007952:	1d72      	adds	r2, r6, #5
 8007954:	0092      	lsls	r2, r2, #2
 8007956:	4620      	mov	r0, r4
 8007958:	f7fe fa5e 	bl	8005e18 <_calloc_r>
 800795c:	b160      	cbz	r0, 8007978 <_Balloc+0x64>
 800795e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007962:	e00e      	b.n	8007982 <_Balloc+0x6e>
 8007964:	2221      	movs	r2, #33	@ 0x21
 8007966:	2104      	movs	r1, #4
 8007968:	4620      	mov	r0, r4
 800796a:	f7fe fa55 	bl	8005e18 <_calloc_r>
 800796e:	69e3      	ldr	r3, [r4, #28]
 8007970:	60f0      	str	r0, [r6, #12]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e4      	bne.n	8007942 <_Balloc+0x2e>
 8007978:	2000      	movs	r0, #0
 800797a:	bd70      	pop	{r4, r5, r6, pc}
 800797c:	6802      	ldr	r2, [r0, #0]
 800797e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007982:	2300      	movs	r3, #0
 8007984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007988:	e7f7      	b.n	800797a <_Balloc+0x66>
 800798a:	bf00      	nop
 800798c:	08008fc5 	.word	0x08008fc5
 8007990:	08009045 	.word	0x08009045

08007994 <_Bfree>:
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	69c6      	ldr	r6, [r0, #28]
 8007998:	4605      	mov	r5, r0
 800799a:	460c      	mov	r4, r1
 800799c:	b976      	cbnz	r6, 80079bc <_Bfree+0x28>
 800799e:	2010      	movs	r0, #16
 80079a0:	f7fe fa4e 	bl	8005e40 <malloc>
 80079a4:	4602      	mov	r2, r0
 80079a6:	61e8      	str	r0, [r5, #28]
 80079a8:	b920      	cbnz	r0, 80079b4 <_Bfree+0x20>
 80079aa:	4b09      	ldr	r3, [pc, #36]	@ (80079d0 <_Bfree+0x3c>)
 80079ac:	4809      	ldr	r0, [pc, #36]	@ (80079d4 <_Bfree+0x40>)
 80079ae:	218f      	movs	r1, #143	@ 0x8f
 80079b0:	f000 fd50 	bl	8008454 <__assert_func>
 80079b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079b8:	6006      	str	r6, [r0, #0]
 80079ba:	60c6      	str	r6, [r0, #12]
 80079bc:	b13c      	cbz	r4, 80079ce <_Bfree+0x3a>
 80079be:	69eb      	ldr	r3, [r5, #28]
 80079c0:	6862      	ldr	r2, [r4, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079c8:	6021      	str	r1, [r4, #0]
 80079ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	08008fc5 	.word	0x08008fc5
 80079d4:	08009045 	.word	0x08009045

080079d8 <__multadd>:
 80079d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079dc:	690d      	ldr	r5, [r1, #16]
 80079de:	4607      	mov	r7, r0
 80079e0:	460c      	mov	r4, r1
 80079e2:	461e      	mov	r6, r3
 80079e4:	f101 0c14 	add.w	ip, r1, #20
 80079e8:	2000      	movs	r0, #0
 80079ea:	f8dc 3000 	ldr.w	r3, [ip]
 80079ee:	b299      	uxth	r1, r3
 80079f0:	fb02 6101 	mla	r1, r2, r1, r6
 80079f4:	0c1e      	lsrs	r6, r3, #16
 80079f6:	0c0b      	lsrs	r3, r1, #16
 80079f8:	fb02 3306 	mla	r3, r2, r6, r3
 80079fc:	b289      	uxth	r1, r1
 80079fe:	3001      	adds	r0, #1
 8007a00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a04:	4285      	cmp	r5, r0
 8007a06:	f84c 1b04 	str.w	r1, [ip], #4
 8007a0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a0e:	dcec      	bgt.n	80079ea <__multadd+0x12>
 8007a10:	b30e      	cbz	r6, 8007a56 <__multadd+0x7e>
 8007a12:	68a3      	ldr	r3, [r4, #8]
 8007a14:	42ab      	cmp	r3, r5
 8007a16:	dc19      	bgt.n	8007a4c <__multadd+0x74>
 8007a18:	6861      	ldr	r1, [r4, #4]
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	3101      	adds	r1, #1
 8007a1e:	f7ff ff79 	bl	8007914 <_Balloc>
 8007a22:	4680      	mov	r8, r0
 8007a24:	b928      	cbnz	r0, 8007a32 <__multadd+0x5a>
 8007a26:	4602      	mov	r2, r0
 8007a28:	4b0c      	ldr	r3, [pc, #48]	@ (8007a5c <__multadd+0x84>)
 8007a2a:	480d      	ldr	r0, [pc, #52]	@ (8007a60 <__multadd+0x88>)
 8007a2c:	21ba      	movs	r1, #186	@ 0xba
 8007a2e:	f000 fd11 	bl	8008454 <__assert_func>
 8007a32:	6922      	ldr	r2, [r4, #16]
 8007a34:	3202      	adds	r2, #2
 8007a36:	f104 010c 	add.w	r1, r4, #12
 8007a3a:	0092      	lsls	r2, r2, #2
 8007a3c:	300c      	adds	r0, #12
 8007a3e:	f7ff f8c4 	bl	8006bca <memcpy>
 8007a42:	4621      	mov	r1, r4
 8007a44:	4638      	mov	r0, r7
 8007a46:	f7ff ffa5 	bl	8007994 <_Bfree>
 8007a4a:	4644      	mov	r4, r8
 8007a4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a50:	3501      	adds	r5, #1
 8007a52:	615e      	str	r6, [r3, #20]
 8007a54:	6125      	str	r5, [r4, #16]
 8007a56:	4620      	mov	r0, r4
 8007a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a5c:	08009034 	.word	0x08009034
 8007a60:	08009045 	.word	0x08009045

08007a64 <__hi0bits>:
 8007a64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a68:	4603      	mov	r3, r0
 8007a6a:	bf36      	itet	cc
 8007a6c:	0403      	lslcc	r3, r0, #16
 8007a6e:	2000      	movcs	r0, #0
 8007a70:	2010      	movcc	r0, #16
 8007a72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a76:	bf3c      	itt	cc
 8007a78:	021b      	lslcc	r3, r3, #8
 8007a7a:	3008      	addcc	r0, #8
 8007a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a80:	bf3c      	itt	cc
 8007a82:	011b      	lslcc	r3, r3, #4
 8007a84:	3004      	addcc	r0, #4
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a8a:	bf3c      	itt	cc
 8007a8c:	009b      	lslcc	r3, r3, #2
 8007a8e:	3002      	addcc	r0, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	db05      	blt.n	8007aa0 <__hi0bits+0x3c>
 8007a94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a98:	f100 0001 	add.w	r0, r0, #1
 8007a9c:	bf08      	it	eq
 8007a9e:	2020      	moveq	r0, #32
 8007aa0:	4770      	bx	lr

08007aa2 <__lo0bits>:
 8007aa2:	6803      	ldr	r3, [r0, #0]
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	f013 0007 	ands.w	r0, r3, #7
 8007aaa:	d00b      	beq.n	8007ac4 <__lo0bits+0x22>
 8007aac:	07d9      	lsls	r1, r3, #31
 8007aae:	d421      	bmi.n	8007af4 <__lo0bits+0x52>
 8007ab0:	0798      	lsls	r0, r3, #30
 8007ab2:	bf49      	itett	mi
 8007ab4:	085b      	lsrmi	r3, r3, #1
 8007ab6:	089b      	lsrpl	r3, r3, #2
 8007ab8:	2001      	movmi	r0, #1
 8007aba:	6013      	strmi	r3, [r2, #0]
 8007abc:	bf5c      	itt	pl
 8007abe:	6013      	strpl	r3, [r2, #0]
 8007ac0:	2002      	movpl	r0, #2
 8007ac2:	4770      	bx	lr
 8007ac4:	b299      	uxth	r1, r3
 8007ac6:	b909      	cbnz	r1, 8007acc <__lo0bits+0x2a>
 8007ac8:	0c1b      	lsrs	r3, r3, #16
 8007aca:	2010      	movs	r0, #16
 8007acc:	b2d9      	uxtb	r1, r3
 8007ace:	b909      	cbnz	r1, 8007ad4 <__lo0bits+0x32>
 8007ad0:	3008      	adds	r0, #8
 8007ad2:	0a1b      	lsrs	r3, r3, #8
 8007ad4:	0719      	lsls	r1, r3, #28
 8007ad6:	bf04      	itt	eq
 8007ad8:	091b      	lsreq	r3, r3, #4
 8007ada:	3004      	addeq	r0, #4
 8007adc:	0799      	lsls	r1, r3, #30
 8007ade:	bf04      	itt	eq
 8007ae0:	089b      	lsreq	r3, r3, #2
 8007ae2:	3002      	addeq	r0, #2
 8007ae4:	07d9      	lsls	r1, r3, #31
 8007ae6:	d403      	bmi.n	8007af0 <__lo0bits+0x4e>
 8007ae8:	085b      	lsrs	r3, r3, #1
 8007aea:	f100 0001 	add.w	r0, r0, #1
 8007aee:	d003      	beq.n	8007af8 <__lo0bits+0x56>
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	4770      	bx	lr
 8007af4:	2000      	movs	r0, #0
 8007af6:	4770      	bx	lr
 8007af8:	2020      	movs	r0, #32
 8007afa:	4770      	bx	lr

08007afc <__i2b>:
 8007afc:	b510      	push	{r4, lr}
 8007afe:	460c      	mov	r4, r1
 8007b00:	2101      	movs	r1, #1
 8007b02:	f7ff ff07 	bl	8007914 <_Balloc>
 8007b06:	4602      	mov	r2, r0
 8007b08:	b928      	cbnz	r0, 8007b16 <__i2b+0x1a>
 8007b0a:	4b05      	ldr	r3, [pc, #20]	@ (8007b20 <__i2b+0x24>)
 8007b0c:	4805      	ldr	r0, [pc, #20]	@ (8007b24 <__i2b+0x28>)
 8007b0e:	f240 1145 	movw	r1, #325	@ 0x145
 8007b12:	f000 fc9f 	bl	8008454 <__assert_func>
 8007b16:	2301      	movs	r3, #1
 8007b18:	6144      	str	r4, [r0, #20]
 8007b1a:	6103      	str	r3, [r0, #16]
 8007b1c:	bd10      	pop	{r4, pc}
 8007b1e:	bf00      	nop
 8007b20:	08009034 	.word	0x08009034
 8007b24:	08009045 	.word	0x08009045

08007b28 <__multiply>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	4614      	mov	r4, r2
 8007b2e:	690a      	ldr	r2, [r1, #16]
 8007b30:	6923      	ldr	r3, [r4, #16]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	bfa8      	it	ge
 8007b36:	4623      	movge	r3, r4
 8007b38:	460f      	mov	r7, r1
 8007b3a:	bfa4      	itt	ge
 8007b3c:	460c      	movge	r4, r1
 8007b3e:	461f      	movge	r7, r3
 8007b40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007b44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007b48:	68a3      	ldr	r3, [r4, #8]
 8007b4a:	6861      	ldr	r1, [r4, #4]
 8007b4c:	eb0a 0609 	add.w	r6, sl, r9
 8007b50:	42b3      	cmp	r3, r6
 8007b52:	b085      	sub	sp, #20
 8007b54:	bfb8      	it	lt
 8007b56:	3101      	addlt	r1, #1
 8007b58:	f7ff fedc 	bl	8007914 <_Balloc>
 8007b5c:	b930      	cbnz	r0, 8007b6c <__multiply+0x44>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	4b44      	ldr	r3, [pc, #272]	@ (8007c74 <__multiply+0x14c>)
 8007b62:	4845      	ldr	r0, [pc, #276]	@ (8007c78 <__multiply+0x150>)
 8007b64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b68:	f000 fc74 	bl	8008454 <__assert_func>
 8007b6c:	f100 0514 	add.w	r5, r0, #20
 8007b70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b74:	462b      	mov	r3, r5
 8007b76:	2200      	movs	r2, #0
 8007b78:	4543      	cmp	r3, r8
 8007b7a:	d321      	bcc.n	8007bc0 <__multiply+0x98>
 8007b7c:	f107 0114 	add.w	r1, r7, #20
 8007b80:	f104 0214 	add.w	r2, r4, #20
 8007b84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b8c:	9302      	str	r3, [sp, #8]
 8007b8e:	1b13      	subs	r3, r2, r4
 8007b90:	3b15      	subs	r3, #21
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	3304      	adds	r3, #4
 8007b98:	f104 0715 	add.w	r7, r4, #21
 8007b9c:	42ba      	cmp	r2, r7
 8007b9e:	bf38      	it	cc
 8007ba0:	2304      	movcc	r3, #4
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	9b02      	ldr	r3, [sp, #8]
 8007ba6:	9103      	str	r1, [sp, #12]
 8007ba8:	428b      	cmp	r3, r1
 8007baa:	d80c      	bhi.n	8007bc6 <__multiply+0x9e>
 8007bac:	2e00      	cmp	r6, #0
 8007bae:	dd03      	ble.n	8007bb8 <__multiply+0x90>
 8007bb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d05b      	beq.n	8007c70 <__multiply+0x148>
 8007bb8:	6106      	str	r6, [r0, #16]
 8007bba:	b005      	add	sp, #20
 8007bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc0:	f843 2b04 	str.w	r2, [r3], #4
 8007bc4:	e7d8      	b.n	8007b78 <__multiply+0x50>
 8007bc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007bca:	f1ba 0f00 	cmp.w	sl, #0
 8007bce:	d024      	beq.n	8007c1a <__multiply+0xf2>
 8007bd0:	f104 0e14 	add.w	lr, r4, #20
 8007bd4:	46a9      	mov	r9, r5
 8007bd6:	f04f 0c00 	mov.w	ip, #0
 8007bda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007bde:	f8d9 3000 	ldr.w	r3, [r9]
 8007be2:	fa1f fb87 	uxth.w	fp, r7
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007bec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007bf0:	f8d9 7000 	ldr.w	r7, [r9]
 8007bf4:	4463      	add	r3, ip
 8007bf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007bfa:	fb0a c70b 	mla	r7, sl, fp, ip
 8007bfe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c08:	4572      	cmp	r2, lr
 8007c0a:	f849 3b04 	str.w	r3, [r9], #4
 8007c0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c12:	d8e2      	bhi.n	8007bda <__multiply+0xb2>
 8007c14:	9b01      	ldr	r3, [sp, #4]
 8007c16:	f845 c003 	str.w	ip, [r5, r3]
 8007c1a:	9b03      	ldr	r3, [sp, #12]
 8007c1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007c20:	3104      	adds	r1, #4
 8007c22:	f1b9 0f00 	cmp.w	r9, #0
 8007c26:	d021      	beq.n	8007c6c <__multiply+0x144>
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	f104 0c14 	add.w	ip, r4, #20
 8007c2e:	46ae      	mov	lr, r5
 8007c30:	f04f 0a00 	mov.w	sl, #0
 8007c34:	f8bc b000 	ldrh.w	fp, [ip]
 8007c38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007c3c:	fb09 770b 	mla	r7, r9, fp, r7
 8007c40:	4457      	add	r7, sl
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c48:	f84e 3b04 	str.w	r3, [lr], #4
 8007c4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c54:	f8be 3000 	ldrh.w	r3, [lr]
 8007c58:	fb09 330a 	mla	r3, r9, sl, r3
 8007c5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007c60:	4562      	cmp	r2, ip
 8007c62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c66:	d8e5      	bhi.n	8007c34 <__multiply+0x10c>
 8007c68:	9f01      	ldr	r7, [sp, #4]
 8007c6a:	51eb      	str	r3, [r5, r7]
 8007c6c:	3504      	adds	r5, #4
 8007c6e:	e799      	b.n	8007ba4 <__multiply+0x7c>
 8007c70:	3e01      	subs	r6, #1
 8007c72:	e79b      	b.n	8007bac <__multiply+0x84>
 8007c74:	08009034 	.word	0x08009034
 8007c78:	08009045 	.word	0x08009045

08007c7c <__pow5mult>:
 8007c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c80:	4615      	mov	r5, r2
 8007c82:	f012 0203 	ands.w	r2, r2, #3
 8007c86:	4607      	mov	r7, r0
 8007c88:	460e      	mov	r6, r1
 8007c8a:	d007      	beq.n	8007c9c <__pow5mult+0x20>
 8007c8c:	4c25      	ldr	r4, [pc, #148]	@ (8007d24 <__pow5mult+0xa8>)
 8007c8e:	3a01      	subs	r2, #1
 8007c90:	2300      	movs	r3, #0
 8007c92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c96:	f7ff fe9f 	bl	80079d8 <__multadd>
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	10ad      	asrs	r5, r5, #2
 8007c9e:	d03d      	beq.n	8007d1c <__pow5mult+0xa0>
 8007ca0:	69fc      	ldr	r4, [r7, #28]
 8007ca2:	b97c      	cbnz	r4, 8007cc4 <__pow5mult+0x48>
 8007ca4:	2010      	movs	r0, #16
 8007ca6:	f7fe f8cb 	bl	8005e40 <malloc>
 8007caa:	4602      	mov	r2, r0
 8007cac:	61f8      	str	r0, [r7, #28]
 8007cae:	b928      	cbnz	r0, 8007cbc <__pow5mult+0x40>
 8007cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d28 <__pow5mult+0xac>)
 8007cb2:	481e      	ldr	r0, [pc, #120]	@ (8007d2c <__pow5mult+0xb0>)
 8007cb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007cb8:	f000 fbcc 	bl	8008454 <__assert_func>
 8007cbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cc0:	6004      	str	r4, [r0, #0]
 8007cc2:	60c4      	str	r4, [r0, #12]
 8007cc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007cc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ccc:	b94c      	cbnz	r4, 8007ce2 <__pow5mult+0x66>
 8007cce:	f240 2171 	movw	r1, #625	@ 0x271
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	f7ff ff12 	bl	8007afc <__i2b>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cde:	4604      	mov	r4, r0
 8007ce0:	6003      	str	r3, [r0, #0]
 8007ce2:	f04f 0900 	mov.w	r9, #0
 8007ce6:	07eb      	lsls	r3, r5, #31
 8007ce8:	d50a      	bpl.n	8007d00 <__pow5mult+0x84>
 8007cea:	4631      	mov	r1, r6
 8007cec:	4622      	mov	r2, r4
 8007cee:	4638      	mov	r0, r7
 8007cf0:	f7ff ff1a 	bl	8007b28 <__multiply>
 8007cf4:	4631      	mov	r1, r6
 8007cf6:	4680      	mov	r8, r0
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f7ff fe4b 	bl	8007994 <_Bfree>
 8007cfe:	4646      	mov	r6, r8
 8007d00:	106d      	asrs	r5, r5, #1
 8007d02:	d00b      	beq.n	8007d1c <__pow5mult+0xa0>
 8007d04:	6820      	ldr	r0, [r4, #0]
 8007d06:	b938      	cbnz	r0, 8007d18 <__pow5mult+0x9c>
 8007d08:	4622      	mov	r2, r4
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	f7ff ff0b 	bl	8007b28 <__multiply>
 8007d12:	6020      	str	r0, [r4, #0]
 8007d14:	f8c0 9000 	str.w	r9, [r0]
 8007d18:	4604      	mov	r4, r0
 8007d1a:	e7e4      	b.n	8007ce6 <__pow5mult+0x6a>
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d22:	bf00      	nop
 8007d24:	080090a0 	.word	0x080090a0
 8007d28:	08008fc5 	.word	0x08008fc5
 8007d2c:	08009045 	.word	0x08009045

08007d30 <__lshift>:
 8007d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d34:	460c      	mov	r4, r1
 8007d36:	6849      	ldr	r1, [r1, #4]
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d3e:	68a3      	ldr	r3, [r4, #8]
 8007d40:	4607      	mov	r7, r0
 8007d42:	4691      	mov	r9, r2
 8007d44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d48:	f108 0601 	add.w	r6, r8, #1
 8007d4c:	42b3      	cmp	r3, r6
 8007d4e:	db0b      	blt.n	8007d68 <__lshift+0x38>
 8007d50:	4638      	mov	r0, r7
 8007d52:	f7ff fddf 	bl	8007914 <_Balloc>
 8007d56:	4605      	mov	r5, r0
 8007d58:	b948      	cbnz	r0, 8007d6e <__lshift+0x3e>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	4b28      	ldr	r3, [pc, #160]	@ (8007e00 <__lshift+0xd0>)
 8007d5e:	4829      	ldr	r0, [pc, #164]	@ (8007e04 <__lshift+0xd4>)
 8007d60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d64:	f000 fb76 	bl	8008454 <__assert_func>
 8007d68:	3101      	adds	r1, #1
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	e7ee      	b.n	8007d4c <__lshift+0x1c>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f100 0114 	add.w	r1, r0, #20
 8007d74:	f100 0210 	add.w	r2, r0, #16
 8007d78:	4618      	mov	r0, r3
 8007d7a:	4553      	cmp	r3, sl
 8007d7c:	db33      	blt.n	8007de6 <__lshift+0xb6>
 8007d7e:	6920      	ldr	r0, [r4, #16]
 8007d80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d84:	f104 0314 	add.w	r3, r4, #20
 8007d88:	f019 091f 	ands.w	r9, r9, #31
 8007d8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d94:	d02b      	beq.n	8007dee <__lshift+0xbe>
 8007d96:	f1c9 0e20 	rsb	lr, r9, #32
 8007d9a:	468a      	mov	sl, r1
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	fa00 f009 	lsl.w	r0, r0, r9
 8007da4:	4310      	orrs	r0, r2
 8007da6:	f84a 0b04 	str.w	r0, [sl], #4
 8007daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dae:	459c      	cmp	ip, r3
 8007db0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007db4:	d8f3      	bhi.n	8007d9e <__lshift+0x6e>
 8007db6:	ebac 0304 	sub.w	r3, ip, r4
 8007dba:	3b15      	subs	r3, #21
 8007dbc:	f023 0303 	bic.w	r3, r3, #3
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	f104 0015 	add.w	r0, r4, #21
 8007dc6:	4584      	cmp	ip, r0
 8007dc8:	bf38      	it	cc
 8007dca:	2304      	movcc	r3, #4
 8007dcc:	50ca      	str	r2, [r1, r3]
 8007dce:	b10a      	cbz	r2, 8007dd4 <__lshift+0xa4>
 8007dd0:	f108 0602 	add.w	r6, r8, #2
 8007dd4:	3e01      	subs	r6, #1
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	612e      	str	r6, [r5, #16]
 8007dda:	4621      	mov	r1, r4
 8007ddc:	f7ff fdda 	bl	8007994 <_Bfree>
 8007de0:	4628      	mov	r0, r5
 8007de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dea:	3301      	adds	r3, #1
 8007dec:	e7c5      	b.n	8007d7a <__lshift+0x4a>
 8007dee:	3904      	subs	r1, #4
 8007df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007df8:	459c      	cmp	ip, r3
 8007dfa:	d8f9      	bhi.n	8007df0 <__lshift+0xc0>
 8007dfc:	e7ea      	b.n	8007dd4 <__lshift+0xa4>
 8007dfe:	bf00      	nop
 8007e00:	08009034 	.word	0x08009034
 8007e04:	08009045 	.word	0x08009045

08007e08 <__mcmp>:
 8007e08:	690a      	ldr	r2, [r1, #16]
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	6900      	ldr	r0, [r0, #16]
 8007e0e:	1a80      	subs	r0, r0, r2
 8007e10:	b530      	push	{r4, r5, lr}
 8007e12:	d10e      	bne.n	8007e32 <__mcmp+0x2a>
 8007e14:	3314      	adds	r3, #20
 8007e16:	3114      	adds	r1, #20
 8007e18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e28:	4295      	cmp	r5, r2
 8007e2a:	d003      	beq.n	8007e34 <__mcmp+0x2c>
 8007e2c:	d205      	bcs.n	8007e3a <__mcmp+0x32>
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e32:	bd30      	pop	{r4, r5, pc}
 8007e34:	42a3      	cmp	r3, r4
 8007e36:	d3f3      	bcc.n	8007e20 <__mcmp+0x18>
 8007e38:	e7fb      	b.n	8007e32 <__mcmp+0x2a>
 8007e3a:	2001      	movs	r0, #1
 8007e3c:	e7f9      	b.n	8007e32 <__mcmp+0x2a>
	...

08007e40 <__mdiff>:
 8007e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	4689      	mov	r9, r1
 8007e46:	4606      	mov	r6, r0
 8007e48:	4611      	mov	r1, r2
 8007e4a:	4648      	mov	r0, r9
 8007e4c:	4614      	mov	r4, r2
 8007e4e:	f7ff ffdb 	bl	8007e08 <__mcmp>
 8007e52:	1e05      	subs	r5, r0, #0
 8007e54:	d112      	bne.n	8007e7c <__mdiff+0x3c>
 8007e56:	4629      	mov	r1, r5
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7ff fd5b 	bl	8007914 <_Balloc>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	b928      	cbnz	r0, 8007e6e <__mdiff+0x2e>
 8007e62:	4b3f      	ldr	r3, [pc, #252]	@ (8007f60 <__mdiff+0x120>)
 8007e64:	f240 2137 	movw	r1, #567	@ 0x237
 8007e68:	483e      	ldr	r0, [pc, #248]	@ (8007f64 <__mdiff+0x124>)
 8007e6a:	f000 faf3 	bl	8008454 <__assert_func>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e74:	4610      	mov	r0, r2
 8007e76:	b003      	add	sp, #12
 8007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7c:	bfbc      	itt	lt
 8007e7e:	464b      	movlt	r3, r9
 8007e80:	46a1      	movlt	r9, r4
 8007e82:	4630      	mov	r0, r6
 8007e84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e88:	bfba      	itte	lt
 8007e8a:	461c      	movlt	r4, r3
 8007e8c:	2501      	movlt	r5, #1
 8007e8e:	2500      	movge	r5, #0
 8007e90:	f7ff fd40 	bl	8007914 <_Balloc>
 8007e94:	4602      	mov	r2, r0
 8007e96:	b918      	cbnz	r0, 8007ea0 <__mdiff+0x60>
 8007e98:	4b31      	ldr	r3, [pc, #196]	@ (8007f60 <__mdiff+0x120>)
 8007e9a:	f240 2145 	movw	r1, #581	@ 0x245
 8007e9e:	e7e3      	b.n	8007e68 <__mdiff+0x28>
 8007ea0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ea4:	6926      	ldr	r6, [r4, #16]
 8007ea6:	60c5      	str	r5, [r0, #12]
 8007ea8:	f109 0310 	add.w	r3, r9, #16
 8007eac:	f109 0514 	add.w	r5, r9, #20
 8007eb0:	f104 0e14 	add.w	lr, r4, #20
 8007eb4:	f100 0b14 	add.w	fp, r0, #20
 8007eb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007ebc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	46d9      	mov	r9, fp
 8007ec4:	f04f 0c00 	mov.w	ip, #0
 8007ec8:	9b01      	ldr	r3, [sp, #4]
 8007eca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007ece:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	fa1f f38a 	uxth.w	r3, sl
 8007ed8:	4619      	mov	r1, r3
 8007eda:	b283      	uxth	r3, r0
 8007edc:	1acb      	subs	r3, r1, r3
 8007ede:	0c00      	lsrs	r0, r0, #16
 8007ee0:	4463      	add	r3, ip
 8007ee2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ee6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ef0:	4576      	cmp	r6, lr
 8007ef2:	f849 3b04 	str.w	r3, [r9], #4
 8007ef6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007efa:	d8e5      	bhi.n	8007ec8 <__mdiff+0x88>
 8007efc:	1b33      	subs	r3, r6, r4
 8007efe:	3b15      	subs	r3, #21
 8007f00:	f023 0303 	bic.w	r3, r3, #3
 8007f04:	3415      	adds	r4, #21
 8007f06:	3304      	adds	r3, #4
 8007f08:	42a6      	cmp	r6, r4
 8007f0a:	bf38      	it	cc
 8007f0c:	2304      	movcc	r3, #4
 8007f0e:	441d      	add	r5, r3
 8007f10:	445b      	add	r3, fp
 8007f12:	461e      	mov	r6, r3
 8007f14:	462c      	mov	r4, r5
 8007f16:	4544      	cmp	r4, r8
 8007f18:	d30e      	bcc.n	8007f38 <__mdiff+0xf8>
 8007f1a:	f108 0103 	add.w	r1, r8, #3
 8007f1e:	1b49      	subs	r1, r1, r5
 8007f20:	f021 0103 	bic.w	r1, r1, #3
 8007f24:	3d03      	subs	r5, #3
 8007f26:	45a8      	cmp	r8, r5
 8007f28:	bf38      	it	cc
 8007f2a:	2100      	movcc	r1, #0
 8007f2c:	440b      	add	r3, r1
 8007f2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f32:	b191      	cbz	r1, 8007f5a <__mdiff+0x11a>
 8007f34:	6117      	str	r7, [r2, #16]
 8007f36:	e79d      	b.n	8007e74 <__mdiff+0x34>
 8007f38:	f854 1b04 	ldr.w	r1, [r4], #4
 8007f3c:	46e6      	mov	lr, ip
 8007f3e:	0c08      	lsrs	r0, r1, #16
 8007f40:	fa1c fc81 	uxtah	ip, ip, r1
 8007f44:	4471      	add	r1, lr
 8007f46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007f4a:	b289      	uxth	r1, r1
 8007f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f50:	f846 1b04 	str.w	r1, [r6], #4
 8007f54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f58:	e7dd      	b.n	8007f16 <__mdiff+0xd6>
 8007f5a:	3f01      	subs	r7, #1
 8007f5c:	e7e7      	b.n	8007f2e <__mdiff+0xee>
 8007f5e:	bf00      	nop
 8007f60:	08009034 	.word	0x08009034
 8007f64:	08009045 	.word	0x08009045

08007f68 <__d2b>:
 8007f68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f6c:	460f      	mov	r7, r1
 8007f6e:	2101      	movs	r1, #1
 8007f70:	ec59 8b10 	vmov	r8, r9, d0
 8007f74:	4616      	mov	r6, r2
 8007f76:	f7ff fccd 	bl	8007914 <_Balloc>
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	b930      	cbnz	r0, 8007f8c <__d2b+0x24>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	4b23      	ldr	r3, [pc, #140]	@ (8008010 <__d2b+0xa8>)
 8007f82:	4824      	ldr	r0, [pc, #144]	@ (8008014 <__d2b+0xac>)
 8007f84:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f88:	f000 fa64 	bl	8008454 <__assert_func>
 8007f8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f94:	b10d      	cbz	r5, 8007f9a <__d2b+0x32>
 8007f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	f1b8 0300 	subs.w	r3, r8, #0
 8007fa0:	d023      	beq.n	8007fea <__d2b+0x82>
 8007fa2:	4668      	mov	r0, sp
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	f7ff fd7c 	bl	8007aa2 <__lo0bits>
 8007faa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007fae:	b1d0      	cbz	r0, 8007fe6 <__d2b+0x7e>
 8007fb0:	f1c0 0320 	rsb	r3, r0, #32
 8007fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	40c2      	lsrs	r2, r0
 8007fbc:	6163      	str	r3, [r4, #20]
 8007fbe:	9201      	str	r2, [sp, #4]
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	61a3      	str	r3, [r4, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	bf0c      	ite	eq
 8007fc8:	2201      	moveq	r2, #1
 8007fca:	2202      	movne	r2, #2
 8007fcc:	6122      	str	r2, [r4, #16]
 8007fce:	b1a5      	cbz	r5, 8007ffa <__d2b+0x92>
 8007fd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007fd4:	4405      	add	r5, r0
 8007fd6:	603d      	str	r5, [r7, #0]
 8007fd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007fdc:	6030      	str	r0, [r6, #0]
 8007fde:	4620      	mov	r0, r4
 8007fe0:	b003      	add	sp, #12
 8007fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fe6:	6161      	str	r1, [r4, #20]
 8007fe8:	e7ea      	b.n	8007fc0 <__d2b+0x58>
 8007fea:	a801      	add	r0, sp, #4
 8007fec:	f7ff fd59 	bl	8007aa2 <__lo0bits>
 8007ff0:	9b01      	ldr	r3, [sp, #4]
 8007ff2:	6163      	str	r3, [r4, #20]
 8007ff4:	3020      	adds	r0, #32
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	e7e8      	b.n	8007fcc <__d2b+0x64>
 8007ffa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ffe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008002:	6038      	str	r0, [r7, #0]
 8008004:	6918      	ldr	r0, [r3, #16]
 8008006:	f7ff fd2d 	bl	8007a64 <__hi0bits>
 800800a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800800e:	e7e5      	b.n	8007fdc <__d2b+0x74>
 8008010:	08009034 	.word	0x08009034
 8008014:	08009045 	.word	0x08009045

08008018 <__ssputs_r>:
 8008018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	688e      	ldr	r6, [r1, #8]
 800801e:	461f      	mov	r7, r3
 8008020:	42be      	cmp	r6, r7
 8008022:	680b      	ldr	r3, [r1, #0]
 8008024:	4682      	mov	sl, r0
 8008026:	460c      	mov	r4, r1
 8008028:	4690      	mov	r8, r2
 800802a:	d82d      	bhi.n	8008088 <__ssputs_r+0x70>
 800802c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008030:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008034:	d026      	beq.n	8008084 <__ssputs_r+0x6c>
 8008036:	6965      	ldr	r5, [r4, #20]
 8008038:	6909      	ldr	r1, [r1, #16]
 800803a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800803e:	eba3 0901 	sub.w	r9, r3, r1
 8008042:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008046:	1c7b      	adds	r3, r7, #1
 8008048:	444b      	add	r3, r9
 800804a:	106d      	asrs	r5, r5, #1
 800804c:	429d      	cmp	r5, r3
 800804e:	bf38      	it	cc
 8008050:	461d      	movcc	r5, r3
 8008052:	0553      	lsls	r3, r2, #21
 8008054:	d527      	bpl.n	80080a6 <__ssputs_r+0x8e>
 8008056:	4629      	mov	r1, r5
 8008058:	f7fd ff24 	bl	8005ea4 <_malloc_r>
 800805c:	4606      	mov	r6, r0
 800805e:	b360      	cbz	r0, 80080ba <__ssputs_r+0xa2>
 8008060:	6921      	ldr	r1, [r4, #16]
 8008062:	464a      	mov	r2, r9
 8008064:	f7fe fdb1 	bl	8006bca <memcpy>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800806e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	6126      	str	r6, [r4, #16]
 8008076:	6165      	str	r5, [r4, #20]
 8008078:	444e      	add	r6, r9
 800807a:	eba5 0509 	sub.w	r5, r5, r9
 800807e:	6026      	str	r6, [r4, #0]
 8008080:	60a5      	str	r5, [r4, #8]
 8008082:	463e      	mov	r6, r7
 8008084:	42be      	cmp	r6, r7
 8008086:	d900      	bls.n	800808a <__ssputs_r+0x72>
 8008088:	463e      	mov	r6, r7
 800808a:	6820      	ldr	r0, [r4, #0]
 800808c:	4632      	mov	r2, r6
 800808e:	4641      	mov	r1, r8
 8008090:	f000 f9c6 	bl	8008420 <memmove>
 8008094:	68a3      	ldr	r3, [r4, #8]
 8008096:	1b9b      	subs	r3, r3, r6
 8008098:	60a3      	str	r3, [r4, #8]
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	4433      	add	r3, r6
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	2000      	movs	r0, #0
 80080a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a6:	462a      	mov	r2, r5
 80080a8:	f000 fa04 	bl	80084b4 <_realloc_r>
 80080ac:	4606      	mov	r6, r0
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d1e0      	bne.n	8008074 <__ssputs_r+0x5c>
 80080b2:	6921      	ldr	r1, [r4, #16]
 80080b4:	4650      	mov	r0, sl
 80080b6:	f7ff fbe3 	bl	8007880 <_free_r>
 80080ba:	230c      	movs	r3, #12
 80080bc:	f8ca 3000 	str.w	r3, [sl]
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080c6:	81a3      	strh	r3, [r4, #12]
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295
 80080cc:	e7e9      	b.n	80080a2 <__ssputs_r+0x8a>
	...

080080d0 <_svfiprintf_r>:
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	4698      	mov	r8, r3
 80080d6:	898b      	ldrh	r3, [r1, #12]
 80080d8:	061b      	lsls	r3, r3, #24
 80080da:	b09d      	sub	sp, #116	@ 0x74
 80080dc:	4607      	mov	r7, r0
 80080de:	460d      	mov	r5, r1
 80080e0:	4614      	mov	r4, r2
 80080e2:	d510      	bpl.n	8008106 <_svfiprintf_r+0x36>
 80080e4:	690b      	ldr	r3, [r1, #16]
 80080e6:	b973      	cbnz	r3, 8008106 <_svfiprintf_r+0x36>
 80080e8:	2140      	movs	r1, #64	@ 0x40
 80080ea:	f7fd fedb 	bl	8005ea4 <_malloc_r>
 80080ee:	6028      	str	r0, [r5, #0]
 80080f0:	6128      	str	r0, [r5, #16]
 80080f2:	b930      	cbnz	r0, 8008102 <_svfiprintf_r+0x32>
 80080f4:	230c      	movs	r3, #12
 80080f6:	603b      	str	r3, [r7, #0]
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295
 80080fc:	b01d      	add	sp, #116	@ 0x74
 80080fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008102:	2340      	movs	r3, #64	@ 0x40
 8008104:	616b      	str	r3, [r5, #20]
 8008106:	2300      	movs	r3, #0
 8008108:	9309      	str	r3, [sp, #36]	@ 0x24
 800810a:	2320      	movs	r3, #32
 800810c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008110:	f8cd 800c 	str.w	r8, [sp, #12]
 8008114:	2330      	movs	r3, #48	@ 0x30
 8008116:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082b4 <_svfiprintf_r+0x1e4>
 800811a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800811e:	f04f 0901 	mov.w	r9, #1
 8008122:	4623      	mov	r3, r4
 8008124:	469a      	mov	sl, r3
 8008126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800812a:	b10a      	cbz	r2, 8008130 <_svfiprintf_r+0x60>
 800812c:	2a25      	cmp	r2, #37	@ 0x25
 800812e:	d1f9      	bne.n	8008124 <_svfiprintf_r+0x54>
 8008130:	ebba 0b04 	subs.w	fp, sl, r4
 8008134:	d00b      	beq.n	800814e <_svfiprintf_r+0x7e>
 8008136:	465b      	mov	r3, fp
 8008138:	4622      	mov	r2, r4
 800813a:	4629      	mov	r1, r5
 800813c:	4638      	mov	r0, r7
 800813e:	f7ff ff6b 	bl	8008018 <__ssputs_r>
 8008142:	3001      	adds	r0, #1
 8008144:	f000 80a7 	beq.w	8008296 <_svfiprintf_r+0x1c6>
 8008148:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800814a:	445a      	add	r2, fp
 800814c:	9209      	str	r2, [sp, #36]	@ 0x24
 800814e:	f89a 3000 	ldrb.w	r3, [sl]
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 809f 	beq.w	8008296 <_svfiprintf_r+0x1c6>
 8008158:	2300      	movs	r3, #0
 800815a:	f04f 32ff 	mov.w	r2, #4294967295
 800815e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008162:	f10a 0a01 	add.w	sl, sl, #1
 8008166:	9304      	str	r3, [sp, #16]
 8008168:	9307      	str	r3, [sp, #28]
 800816a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800816e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008170:	4654      	mov	r4, sl
 8008172:	2205      	movs	r2, #5
 8008174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008178:	484e      	ldr	r0, [pc, #312]	@ (80082b4 <_svfiprintf_r+0x1e4>)
 800817a:	f7f8 f849 	bl	8000210 <memchr>
 800817e:	9a04      	ldr	r2, [sp, #16]
 8008180:	b9d8      	cbnz	r0, 80081ba <_svfiprintf_r+0xea>
 8008182:	06d0      	lsls	r0, r2, #27
 8008184:	bf44      	itt	mi
 8008186:	2320      	movmi	r3, #32
 8008188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800818c:	0711      	lsls	r1, r2, #28
 800818e:	bf44      	itt	mi
 8008190:	232b      	movmi	r3, #43	@ 0x2b
 8008192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008196:	f89a 3000 	ldrb.w	r3, [sl]
 800819a:	2b2a      	cmp	r3, #42	@ 0x2a
 800819c:	d015      	beq.n	80081ca <_svfiprintf_r+0xfa>
 800819e:	9a07      	ldr	r2, [sp, #28]
 80081a0:	4654      	mov	r4, sl
 80081a2:	2000      	movs	r0, #0
 80081a4:	f04f 0c0a 	mov.w	ip, #10
 80081a8:	4621      	mov	r1, r4
 80081aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ae:	3b30      	subs	r3, #48	@ 0x30
 80081b0:	2b09      	cmp	r3, #9
 80081b2:	d94b      	bls.n	800824c <_svfiprintf_r+0x17c>
 80081b4:	b1b0      	cbz	r0, 80081e4 <_svfiprintf_r+0x114>
 80081b6:	9207      	str	r2, [sp, #28]
 80081b8:	e014      	b.n	80081e4 <_svfiprintf_r+0x114>
 80081ba:	eba0 0308 	sub.w	r3, r0, r8
 80081be:	fa09 f303 	lsl.w	r3, r9, r3
 80081c2:	4313      	orrs	r3, r2
 80081c4:	9304      	str	r3, [sp, #16]
 80081c6:	46a2      	mov	sl, r4
 80081c8:	e7d2      	b.n	8008170 <_svfiprintf_r+0xa0>
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	1d19      	adds	r1, r3, #4
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	9103      	str	r1, [sp, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bfbb      	ittet	lt
 80081d6:	425b      	neglt	r3, r3
 80081d8:	f042 0202 	orrlt.w	r2, r2, #2
 80081dc:	9307      	strge	r3, [sp, #28]
 80081de:	9307      	strlt	r3, [sp, #28]
 80081e0:	bfb8      	it	lt
 80081e2:	9204      	strlt	r2, [sp, #16]
 80081e4:	7823      	ldrb	r3, [r4, #0]
 80081e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80081e8:	d10a      	bne.n	8008200 <_svfiprintf_r+0x130>
 80081ea:	7863      	ldrb	r3, [r4, #1]
 80081ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ee:	d132      	bne.n	8008256 <_svfiprintf_r+0x186>
 80081f0:	9b03      	ldr	r3, [sp, #12]
 80081f2:	1d1a      	adds	r2, r3, #4
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	9203      	str	r2, [sp, #12]
 80081f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081fc:	3402      	adds	r4, #2
 80081fe:	9305      	str	r3, [sp, #20]
 8008200:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082c4 <_svfiprintf_r+0x1f4>
 8008204:	7821      	ldrb	r1, [r4, #0]
 8008206:	2203      	movs	r2, #3
 8008208:	4650      	mov	r0, sl
 800820a:	f7f8 f801 	bl	8000210 <memchr>
 800820e:	b138      	cbz	r0, 8008220 <_svfiprintf_r+0x150>
 8008210:	9b04      	ldr	r3, [sp, #16]
 8008212:	eba0 000a 	sub.w	r0, r0, sl
 8008216:	2240      	movs	r2, #64	@ 0x40
 8008218:	4082      	lsls	r2, r0
 800821a:	4313      	orrs	r3, r2
 800821c:	3401      	adds	r4, #1
 800821e:	9304      	str	r3, [sp, #16]
 8008220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008224:	4824      	ldr	r0, [pc, #144]	@ (80082b8 <_svfiprintf_r+0x1e8>)
 8008226:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800822a:	2206      	movs	r2, #6
 800822c:	f7f7 fff0 	bl	8000210 <memchr>
 8008230:	2800      	cmp	r0, #0
 8008232:	d036      	beq.n	80082a2 <_svfiprintf_r+0x1d2>
 8008234:	4b21      	ldr	r3, [pc, #132]	@ (80082bc <_svfiprintf_r+0x1ec>)
 8008236:	bb1b      	cbnz	r3, 8008280 <_svfiprintf_r+0x1b0>
 8008238:	9b03      	ldr	r3, [sp, #12]
 800823a:	3307      	adds	r3, #7
 800823c:	f023 0307 	bic.w	r3, r3, #7
 8008240:	3308      	adds	r3, #8
 8008242:	9303      	str	r3, [sp, #12]
 8008244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008246:	4433      	add	r3, r6
 8008248:	9309      	str	r3, [sp, #36]	@ 0x24
 800824a:	e76a      	b.n	8008122 <_svfiprintf_r+0x52>
 800824c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008250:	460c      	mov	r4, r1
 8008252:	2001      	movs	r0, #1
 8008254:	e7a8      	b.n	80081a8 <_svfiprintf_r+0xd8>
 8008256:	2300      	movs	r3, #0
 8008258:	3401      	adds	r4, #1
 800825a:	9305      	str	r3, [sp, #20]
 800825c:	4619      	mov	r1, r3
 800825e:	f04f 0c0a 	mov.w	ip, #10
 8008262:	4620      	mov	r0, r4
 8008264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008268:	3a30      	subs	r2, #48	@ 0x30
 800826a:	2a09      	cmp	r2, #9
 800826c:	d903      	bls.n	8008276 <_svfiprintf_r+0x1a6>
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0c6      	beq.n	8008200 <_svfiprintf_r+0x130>
 8008272:	9105      	str	r1, [sp, #20]
 8008274:	e7c4      	b.n	8008200 <_svfiprintf_r+0x130>
 8008276:	fb0c 2101 	mla	r1, ip, r1, r2
 800827a:	4604      	mov	r4, r0
 800827c:	2301      	movs	r3, #1
 800827e:	e7f0      	b.n	8008262 <_svfiprintf_r+0x192>
 8008280:	ab03      	add	r3, sp, #12
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	462a      	mov	r2, r5
 8008286:	4b0e      	ldr	r3, [pc, #56]	@ (80082c0 <_svfiprintf_r+0x1f0>)
 8008288:	a904      	add	r1, sp, #16
 800828a:	4638      	mov	r0, r7
 800828c:	f7fd ff36 	bl	80060fc <_printf_float>
 8008290:	1c42      	adds	r2, r0, #1
 8008292:	4606      	mov	r6, r0
 8008294:	d1d6      	bne.n	8008244 <_svfiprintf_r+0x174>
 8008296:	89ab      	ldrh	r3, [r5, #12]
 8008298:	065b      	lsls	r3, r3, #25
 800829a:	f53f af2d 	bmi.w	80080f8 <_svfiprintf_r+0x28>
 800829e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082a0:	e72c      	b.n	80080fc <_svfiprintf_r+0x2c>
 80082a2:	ab03      	add	r3, sp, #12
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	462a      	mov	r2, r5
 80082a8:	4b05      	ldr	r3, [pc, #20]	@ (80082c0 <_svfiprintf_r+0x1f0>)
 80082aa:	a904      	add	r1, sp, #16
 80082ac:	4638      	mov	r0, r7
 80082ae:	f7fe f9bd 	bl	800662c <_printf_i>
 80082b2:	e7ed      	b.n	8008290 <_svfiprintf_r+0x1c0>
 80082b4:	080091a0 	.word	0x080091a0
 80082b8:	080091aa 	.word	0x080091aa
 80082bc:	080060fd 	.word	0x080060fd
 80082c0:	08008019 	.word	0x08008019
 80082c4:	080091a6 	.word	0x080091a6

080082c8 <__sflush_r>:
 80082c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d0:	0716      	lsls	r6, r2, #28
 80082d2:	4605      	mov	r5, r0
 80082d4:	460c      	mov	r4, r1
 80082d6:	d454      	bmi.n	8008382 <__sflush_r+0xba>
 80082d8:	684b      	ldr	r3, [r1, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	dc02      	bgt.n	80082e4 <__sflush_r+0x1c>
 80082de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	dd48      	ble.n	8008376 <__sflush_r+0xae>
 80082e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082e6:	2e00      	cmp	r6, #0
 80082e8:	d045      	beq.n	8008376 <__sflush_r+0xae>
 80082ea:	2300      	movs	r3, #0
 80082ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082f0:	682f      	ldr	r7, [r5, #0]
 80082f2:	6a21      	ldr	r1, [r4, #32]
 80082f4:	602b      	str	r3, [r5, #0]
 80082f6:	d030      	beq.n	800835a <__sflush_r+0x92>
 80082f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	0759      	lsls	r1, r3, #29
 80082fe:	d505      	bpl.n	800830c <__sflush_r+0x44>
 8008300:	6863      	ldr	r3, [r4, #4]
 8008302:	1ad2      	subs	r2, r2, r3
 8008304:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008306:	b10b      	cbz	r3, 800830c <__sflush_r+0x44>
 8008308:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800830a:	1ad2      	subs	r2, r2, r3
 800830c:	2300      	movs	r3, #0
 800830e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008310:	6a21      	ldr	r1, [r4, #32]
 8008312:	4628      	mov	r0, r5
 8008314:	47b0      	blx	r6
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	d106      	bne.n	800832a <__sflush_r+0x62>
 800831c:	6829      	ldr	r1, [r5, #0]
 800831e:	291d      	cmp	r1, #29
 8008320:	d82b      	bhi.n	800837a <__sflush_r+0xb2>
 8008322:	4a2a      	ldr	r2, [pc, #168]	@ (80083cc <__sflush_r+0x104>)
 8008324:	410a      	asrs	r2, r1
 8008326:	07d6      	lsls	r6, r2, #31
 8008328:	d427      	bmi.n	800837a <__sflush_r+0xb2>
 800832a:	2200      	movs	r2, #0
 800832c:	6062      	str	r2, [r4, #4]
 800832e:	04d9      	lsls	r1, r3, #19
 8008330:	6922      	ldr	r2, [r4, #16]
 8008332:	6022      	str	r2, [r4, #0]
 8008334:	d504      	bpl.n	8008340 <__sflush_r+0x78>
 8008336:	1c42      	adds	r2, r0, #1
 8008338:	d101      	bne.n	800833e <__sflush_r+0x76>
 800833a:	682b      	ldr	r3, [r5, #0]
 800833c:	b903      	cbnz	r3, 8008340 <__sflush_r+0x78>
 800833e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008342:	602f      	str	r7, [r5, #0]
 8008344:	b1b9      	cbz	r1, 8008376 <__sflush_r+0xae>
 8008346:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800834a:	4299      	cmp	r1, r3
 800834c:	d002      	beq.n	8008354 <__sflush_r+0x8c>
 800834e:	4628      	mov	r0, r5
 8008350:	f7ff fa96 	bl	8007880 <_free_r>
 8008354:	2300      	movs	r3, #0
 8008356:	6363      	str	r3, [r4, #52]	@ 0x34
 8008358:	e00d      	b.n	8008376 <__sflush_r+0xae>
 800835a:	2301      	movs	r3, #1
 800835c:	4628      	mov	r0, r5
 800835e:	47b0      	blx	r6
 8008360:	4602      	mov	r2, r0
 8008362:	1c50      	adds	r0, r2, #1
 8008364:	d1c9      	bne.n	80082fa <__sflush_r+0x32>
 8008366:	682b      	ldr	r3, [r5, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d0c6      	beq.n	80082fa <__sflush_r+0x32>
 800836c:	2b1d      	cmp	r3, #29
 800836e:	d001      	beq.n	8008374 <__sflush_r+0xac>
 8008370:	2b16      	cmp	r3, #22
 8008372:	d11e      	bne.n	80083b2 <__sflush_r+0xea>
 8008374:	602f      	str	r7, [r5, #0]
 8008376:	2000      	movs	r0, #0
 8008378:	e022      	b.n	80083c0 <__sflush_r+0xf8>
 800837a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800837e:	b21b      	sxth	r3, r3
 8008380:	e01b      	b.n	80083ba <__sflush_r+0xf2>
 8008382:	690f      	ldr	r7, [r1, #16]
 8008384:	2f00      	cmp	r7, #0
 8008386:	d0f6      	beq.n	8008376 <__sflush_r+0xae>
 8008388:	0793      	lsls	r3, r2, #30
 800838a:	680e      	ldr	r6, [r1, #0]
 800838c:	bf08      	it	eq
 800838e:	694b      	ldreq	r3, [r1, #20]
 8008390:	600f      	str	r7, [r1, #0]
 8008392:	bf18      	it	ne
 8008394:	2300      	movne	r3, #0
 8008396:	eba6 0807 	sub.w	r8, r6, r7
 800839a:	608b      	str	r3, [r1, #8]
 800839c:	f1b8 0f00 	cmp.w	r8, #0
 80083a0:	dde9      	ble.n	8008376 <__sflush_r+0xae>
 80083a2:	6a21      	ldr	r1, [r4, #32]
 80083a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80083a6:	4643      	mov	r3, r8
 80083a8:	463a      	mov	r2, r7
 80083aa:	4628      	mov	r0, r5
 80083ac:	47b0      	blx	r6
 80083ae:	2800      	cmp	r0, #0
 80083b0:	dc08      	bgt.n	80083c4 <__sflush_r+0xfc>
 80083b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	f04f 30ff 	mov.w	r0, #4294967295
 80083c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c4:	4407      	add	r7, r0
 80083c6:	eba8 0800 	sub.w	r8, r8, r0
 80083ca:	e7e7      	b.n	800839c <__sflush_r+0xd4>
 80083cc:	dfbffffe 	.word	0xdfbffffe

080083d0 <_fflush_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	690b      	ldr	r3, [r1, #16]
 80083d4:	4605      	mov	r5, r0
 80083d6:	460c      	mov	r4, r1
 80083d8:	b913      	cbnz	r3, 80083e0 <_fflush_r+0x10>
 80083da:	2500      	movs	r5, #0
 80083dc:	4628      	mov	r0, r5
 80083de:	bd38      	pop	{r3, r4, r5, pc}
 80083e0:	b118      	cbz	r0, 80083ea <_fflush_r+0x1a>
 80083e2:	6a03      	ldr	r3, [r0, #32]
 80083e4:	b90b      	cbnz	r3, 80083ea <_fflush_r+0x1a>
 80083e6:	f7fe facd 	bl	8006984 <__sinit>
 80083ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d0f3      	beq.n	80083da <_fflush_r+0xa>
 80083f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083f4:	07d0      	lsls	r0, r2, #31
 80083f6:	d404      	bmi.n	8008402 <_fflush_r+0x32>
 80083f8:	0599      	lsls	r1, r3, #22
 80083fa:	d402      	bmi.n	8008402 <_fflush_r+0x32>
 80083fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083fe:	f7fe fbe2 	bl	8006bc6 <__retarget_lock_acquire_recursive>
 8008402:	4628      	mov	r0, r5
 8008404:	4621      	mov	r1, r4
 8008406:	f7ff ff5f 	bl	80082c8 <__sflush_r>
 800840a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800840c:	07da      	lsls	r2, r3, #31
 800840e:	4605      	mov	r5, r0
 8008410:	d4e4      	bmi.n	80083dc <_fflush_r+0xc>
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	059b      	lsls	r3, r3, #22
 8008416:	d4e1      	bmi.n	80083dc <_fflush_r+0xc>
 8008418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800841a:	f7fe fbd5 	bl	8006bc8 <__retarget_lock_release_recursive>
 800841e:	e7dd      	b.n	80083dc <_fflush_r+0xc>

08008420 <memmove>:
 8008420:	4288      	cmp	r0, r1
 8008422:	b510      	push	{r4, lr}
 8008424:	eb01 0402 	add.w	r4, r1, r2
 8008428:	d902      	bls.n	8008430 <memmove+0x10>
 800842a:	4284      	cmp	r4, r0
 800842c:	4623      	mov	r3, r4
 800842e:	d807      	bhi.n	8008440 <memmove+0x20>
 8008430:	1e43      	subs	r3, r0, #1
 8008432:	42a1      	cmp	r1, r4
 8008434:	d008      	beq.n	8008448 <memmove+0x28>
 8008436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800843a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800843e:	e7f8      	b.n	8008432 <memmove+0x12>
 8008440:	4402      	add	r2, r0
 8008442:	4601      	mov	r1, r0
 8008444:	428a      	cmp	r2, r1
 8008446:	d100      	bne.n	800844a <memmove+0x2a>
 8008448:	bd10      	pop	{r4, pc}
 800844a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800844e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008452:	e7f7      	b.n	8008444 <memmove+0x24>

08008454 <__assert_func>:
 8008454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008456:	4614      	mov	r4, r2
 8008458:	461a      	mov	r2, r3
 800845a:	4b09      	ldr	r3, [pc, #36]	@ (8008480 <__assert_func+0x2c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4605      	mov	r5, r0
 8008460:	68d8      	ldr	r0, [r3, #12]
 8008462:	b954      	cbnz	r4, 800847a <__assert_func+0x26>
 8008464:	4b07      	ldr	r3, [pc, #28]	@ (8008484 <__assert_func+0x30>)
 8008466:	461c      	mov	r4, r3
 8008468:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800846c:	9100      	str	r1, [sp, #0]
 800846e:	462b      	mov	r3, r5
 8008470:	4905      	ldr	r1, [pc, #20]	@ (8008488 <__assert_func+0x34>)
 8008472:	f000 f85b 	bl	800852c <fiprintf>
 8008476:	f000 f86b 	bl	8008550 <abort>
 800847a:	4b04      	ldr	r3, [pc, #16]	@ (800848c <__assert_func+0x38>)
 800847c:	e7f4      	b.n	8008468 <__assert_func+0x14>
 800847e:	bf00      	nop
 8008480:	2000001c 	.word	0x2000001c
 8008484:	080091f6 	.word	0x080091f6
 8008488:	080091c8 	.word	0x080091c8
 800848c:	080091bb 	.word	0x080091bb

08008490 <__ascii_mbtowc>:
 8008490:	b082      	sub	sp, #8
 8008492:	b901      	cbnz	r1, 8008496 <__ascii_mbtowc+0x6>
 8008494:	a901      	add	r1, sp, #4
 8008496:	b142      	cbz	r2, 80084aa <__ascii_mbtowc+0x1a>
 8008498:	b14b      	cbz	r3, 80084ae <__ascii_mbtowc+0x1e>
 800849a:	7813      	ldrb	r3, [r2, #0]
 800849c:	600b      	str	r3, [r1, #0]
 800849e:	7812      	ldrb	r2, [r2, #0]
 80084a0:	1e10      	subs	r0, r2, #0
 80084a2:	bf18      	it	ne
 80084a4:	2001      	movne	r0, #1
 80084a6:	b002      	add	sp, #8
 80084a8:	4770      	bx	lr
 80084aa:	4610      	mov	r0, r2
 80084ac:	e7fb      	b.n	80084a6 <__ascii_mbtowc+0x16>
 80084ae:	f06f 0001 	mvn.w	r0, #1
 80084b2:	e7f8      	b.n	80084a6 <__ascii_mbtowc+0x16>

080084b4 <_realloc_r>:
 80084b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b8:	4680      	mov	r8, r0
 80084ba:	4615      	mov	r5, r2
 80084bc:	460c      	mov	r4, r1
 80084be:	b921      	cbnz	r1, 80084ca <_realloc_r+0x16>
 80084c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084c4:	4611      	mov	r1, r2
 80084c6:	f7fd bced 	b.w	8005ea4 <_malloc_r>
 80084ca:	b92a      	cbnz	r2, 80084d8 <_realloc_r+0x24>
 80084cc:	f7ff f9d8 	bl	8007880 <_free_r>
 80084d0:	2400      	movs	r4, #0
 80084d2:	4620      	mov	r0, r4
 80084d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d8:	f000 f841 	bl	800855e <_malloc_usable_size_r>
 80084dc:	4285      	cmp	r5, r0
 80084de:	4606      	mov	r6, r0
 80084e0:	d802      	bhi.n	80084e8 <_realloc_r+0x34>
 80084e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80084e6:	d8f4      	bhi.n	80084d2 <_realloc_r+0x1e>
 80084e8:	4629      	mov	r1, r5
 80084ea:	4640      	mov	r0, r8
 80084ec:	f7fd fcda 	bl	8005ea4 <_malloc_r>
 80084f0:	4607      	mov	r7, r0
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d0ec      	beq.n	80084d0 <_realloc_r+0x1c>
 80084f6:	42b5      	cmp	r5, r6
 80084f8:	462a      	mov	r2, r5
 80084fa:	4621      	mov	r1, r4
 80084fc:	bf28      	it	cs
 80084fe:	4632      	movcs	r2, r6
 8008500:	f7fe fb63 	bl	8006bca <memcpy>
 8008504:	4621      	mov	r1, r4
 8008506:	4640      	mov	r0, r8
 8008508:	f7ff f9ba 	bl	8007880 <_free_r>
 800850c:	463c      	mov	r4, r7
 800850e:	e7e0      	b.n	80084d2 <_realloc_r+0x1e>

08008510 <__ascii_wctomb>:
 8008510:	4603      	mov	r3, r0
 8008512:	4608      	mov	r0, r1
 8008514:	b141      	cbz	r1, 8008528 <__ascii_wctomb+0x18>
 8008516:	2aff      	cmp	r2, #255	@ 0xff
 8008518:	d904      	bls.n	8008524 <__ascii_wctomb+0x14>
 800851a:	228a      	movs	r2, #138	@ 0x8a
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	f04f 30ff 	mov.w	r0, #4294967295
 8008522:	4770      	bx	lr
 8008524:	700a      	strb	r2, [r1, #0]
 8008526:	2001      	movs	r0, #1
 8008528:	4770      	bx	lr
	...

0800852c <fiprintf>:
 800852c:	b40e      	push	{r1, r2, r3}
 800852e:	b503      	push	{r0, r1, lr}
 8008530:	4601      	mov	r1, r0
 8008532:	ab03      	add	r3, sp, #12
 8008534:	4805      	ldr	r0, [pc, #20]	@ (800854c <fiprintf+0x20>)
 8008536:	f853 2b04 	ldr.w	r2, [r3], #4
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	9301      	str	r3, [sp, #4]
 800853e:	f000 f83f 	bl	80085c0 <_vfiprintf_r>
 8008542:	b002      	add	sp, #8
 8008544:	f85d eb04 	ldr.w	lr, [sp], #4
 8008548:	b003      	add	sp, #12
 800854a:	4770      	bx	lr
 800854c:	2000001c 	.word	0x2000001c

08008550 <abort>:
 8008550:	b508      	push	{r3, lr}
 8008552:	2006      	movs	r0, #6
 8008554:	f000 fa08 	bl	8008968 <raise>
 8008558:	2001      	movs	r0, #1
 800855a:	f000 faf3 	bl	8008b44 <_exit>

0800855e <_malloc_usable_size_r>:
 800855e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008562:	1f18      	subs	r0, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	bfbc      	itt	lt
 8008568:	580b      	ldrlt	r3, [r1, r0]
 800856a:	18c0      	addlt	r0, r0, r3
 800856c:	4770      	bx	lr

0800856e <__sfputc_r>:
 800856e:	6893      	ldr	r3, [r2, #8]
 8008570:	3b01      	subs	r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	b410      	push	{r4}
 8008576:	6093      	str	r3, [r2, #8]
 8008578:	da08      	bge.n	800858c <__sfputc_r+0x1e>
 800857a:	6994      	ldr	r4, [r2, #24]
 800857c:	42a3      	cmp	r3, r4
 800857e:	db01      	blt.n	8008584 <__sfputc_r+0x16>
 8008580:	290a      	cmp	r1, #10
 8008582:	d103      	bne.n	800858c <__sfputc_r+0x1e>
 8008584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008588:	f000 b932 	b.w	80087f0 <__swbuf_r>
 800858c:	6813      	ldr	r3, [r2, #0]
 800858e:	1c58      	adds	r0, r3, #1
 8008590:	6010      	str	r0, [r2, #0]
 8008592:	7019      	strb	r1, [r3, #0]
 8008594:	4608      	mov	r0, r1
 8008596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800859a:	4770      	bx	lr

0800859c <__sfputs_r>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	4606      	mov	r6, r0
 80085a0:	460f      	mov	r7, r1
 80085a2:	4614      	mov	r4, r2
 80085a4:	18d5      	adds	r5, r2, r3
 80085a6:	42ac      	cmp	r4, r5
 80085a8:	d101      	bne.n	80085ae <__sfputs_r+0x12>
 80085aa:	2000      	movs	r0, #0
 80085ac:	e007      	b.n	80085be <__sfputs_r+0x22>
 80085ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b2:	463a      	mov	r2, r7
 80085b4:	4630      	mov	r0, r6
 80085b6:	f7ff ffda 	bl	800856e <__sfputc_r>
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	d1f3      	bne.n	80085a6 <__sfputs_r+0xa>
 80085be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085c0 <_vfiprintf_r>:
 80085c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	460d      	mov	r5, r1
 80085c6:	b09d      	sub	sp, #116	@ 0x74
 80085c8:	4614      	mov	r4, r2
 80085ca:	4698      	mov	r8, r3
 80085cc:	4606      	mov	r6, r0
 80085ce:	b118      	cbz	r0, 80085d8 <_vfiprintf_r+0x18>
 80085d0:	6a03      	ldr	r3, [r0, #32]
 80085d2:	b90b      	cbnz	r3, 80085d8 <_vfiprintf_r+0x18>
 80085d4:	f7fe f9d6 	bl	8006984 <__sinit>
 80085d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085da:	07d9      	lsls	r1, r3, #31
 80085dc:	d405      	bmi.n	80085ea <_vfiprintf_r+0x2a>
 80085de:	89ab      	ldrh	r3, [r5, #12]
 80085e0:	059a      	lsls	r2, r3, #22
 80085e2:	d402      	bmi.n	80085ea <_vfiprintf_r+0x2a>
 80085e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085e6:	f7fe faee 	bl	8006bc6 <__retarget_lock_acquire_recursive>
 80085ea:	89ab      	ldrh	r3, [r5, #12]
 80085ec:	071b      	lsls	r3, r3, #28
 80085ee:	d501      	bpl.n	80085f4 <_vfiprintf_r+0x34>
 80085f0:	692b      	ldr	r3, [r5, #16]
 80085f2:	b99b      	cbnz	r3, 800861c <_vfiprintf_r+0x5c>
 80085f4:	4629      	mov	r1, r5
 80085f6:	4630      	mov	r0, r6
 80085f8:	f000 f938 	bl	800886c <__swsetup_r>
 80085fc:	b170      	cbz	r0, 800861c <_vfiprintf_r+0x5c>
 80085fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008600:	07dc      	lsls	r4, r3, #31
 8008602:	d504      	bpl.n	800860e <_vfiprintf_r+0x4e>
 8008604:	f04f 30ff 	mov.w	r0, #4294967295
 8008608:	b01d      	add	sp, #116	@ 0x74
 800860a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860e:	89ab      	ldrh	r3, [r5, #12]
 8008610:	0598      	lsls	r0, r3, #22
 8008612:	d4f7      	bmi.n	8008604 <_vfiprintf_r+0x44>
 8008614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008616:	f7fe fad7 	bl	8006bc8 <__retarget_lock_release_recursive>
 800861a:	e7f3      	b.n	8008604 <_vfiprintf_r+0x44>
 800861c:	2300      	movs	r3, #0
 800861e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008620:	2320      	movs	r3, #32
 8008622:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008626:	f8cd 800c 	str.w	r8, [sp, #12]
 800862a:	2330      	movs	r3, #48	@ 0x30
 800862c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087dc <_vfiprintf_r+0x21c>
 8008630:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008634:	f04f 0901 	mov.w	r9, #1
 8008638:	4623      	mov	r3, r4
 800863a:	469a      	mov	sl, r3
 800863c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008640:	b10a      	cbz	r2, 8008646 <_vfiprintf_r+0x86>
 8008642:	2a25      	cmp	r2, #37	@ 0x25
 8008644:	d1f9      	bne.n	800863a <_vfiprintf_r+0x7a>
 8008646:	ebba 0b04 	subs.w	fp, sl, r4
 800864a:	d00b      	beq.n	8008664 <_vfiprintf_r+0xa4>
 800864c:	465b      	mov	r3, fp
 800864e:	4622      	mov	r2, r4
 8008650:	4629      	mov	r1, r5
 8008652:	4630      	mov	r0, r6
 8008654:	f7ff ffa2 	bl	800859c <__sfputs_r>
 8008658:	3001      	adds	r0, #1
 800865a:	f000 80a7 	beq.w	80087ac <_vfiprintf_r+0x1ec>
 800865e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008660:	445a      	add	r2, fp
 8008662:	9209      	str	r2, [sp, #36]	@ 0x24
 8008664:	f89a 3000 	ldrb.w	r3, [sl]
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 809f 	beq.w	80087ac <_vfiprintf_r+0x1ec>
 800866e:	2300      	movs	r3, #0
 8008670:	f04f 32ff 	mov.w	r2, #4294967295
 8008674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008678:	f10a 0a01 	add.w	sl, sl, #1
 800867c:	9304      	str	r3, [sp, #16]
 800867e:	9307      	str	r3, [sp, #28]
 8008680:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008684:	931a      	str	r3, [sp, #104]	@ 0x68
 8008686:	4654      	mov	r4, sl
 8008688:	2205      	movs	r2, #5
 800868a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800868e:	4853      	ldr	r0, [pc, #332]	@ (80087dc <_vfiprintf_r+0x21c>)
 8008690:	f7f7 fdbe 	bl	8000210 <memchr>
 8008694:	9a04      	ldr	r2, [sp, #16]
 8008696:	b9d8      	cbnz	r0, 80086d0 <_vfiprintf_r+0x110>
 8008698:	06d1      	lsls	r1, r2, #27
 800869a:	bf44      	itt	mi
 800869c:	2320      	movmi	r3, #32
 800869e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086a2:	0713      	lsls	r3, r2, #28
 80086a4:	bf44      	itt	mi
 80086a6:	232b      	movmi	r3, #43	@ 0x2b
 80086a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086ac:	f89a 3000 	ldrb.w	r3, [sl]
 80086b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b2:	d015      	beq.n	80086e0 <_vfiprintf_r+0x120>
 80086b4:	9a07      	ldr	r2, [sp, #28]
 80086b6:	4654      	mov	r4, sl
 80086b8:	2000      	movs	r0, #0
 80086ba:	f04f 0c0a 	mov.w	ip, #10
 80086be:	4621      	mov	r1, r4
 80086c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086c4:	3b30      	subs	r3, #48	@ 0x30
 80086c6:	2b09      	cmp	r3, #9
 80086c8:	d94b      	bls.n	8008762 <_vfiprintf_r+0x1a2>
 80086ca:	b1b0      	cbz	r0, 80086fa <_vfiprintf_r+0x13a>
 80086cc:	9207      	str	r2, [sp, #28]
 80086ce:	e014      	b.n	80086fa <_vfiprintf_r+0x13a>
 80086d0:	eba0 0308 	sub.w	r3, r0, r8
 80086d4:	fa09 f303 	lsl.w	r3, r9, r3
 80086d8:	4313      	orrs	r3, r2
 80086da:	9304      	str	r3, [sp, #16]
 80086dc:	46a2      	mov	sl, r4
 80086de:	e7d2      	b.n	8008686 <_vfiprintf_r+0xc6>
 80086e0:	9b03      	ldr	r3, [sp, #12]
 80086e2:	1d19      	adds	r1, r3, #4
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	9103      	str	r1, [sp, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	bfbb      	ittet	lt
 80086ec:	425b      	neglt	r3, r3
 80086ee:	f042 0202 	orrlt.w	r2, r2, #2
 80086f2:	9307      	strge	r3, [sp, #28]
 80086f4:	9307      	strlt	r3, [sp, #28]
 80086f6:	bfb8      	it	lt
 80086f8:	9204      	strlt	r2, [sp, #16]
 80086fa:	7823      	ldrb	r3, [r4, #0]
 80086fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80086fe:	d10a      	bne.n	8008716 <_vfiprintf_r+0x156>
 8008700:	7863      	ldrb	r3, [r4, #1]
 8008702:	2b2a      	cmp	r3, #42	@ 0x2a
 8008704:	d132      	bne.n	800876c <_vfiprintf_r+0x1ac>
 8008706:	9b03      	ldr	r3, [sp, #12]
 8008708:	1d1a      	adds	r2, r3, #4
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	9203      	str	r2, [sp, #12]
 800870e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008712:	3402      	adds	r4, #2
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087ec <_vfiprintf_r+0x22c>
 800871a:	7821      	ldrb	r1, [r4, #0]
 800871c:	2203      	movs	r2, #3
 800871e:	4650      	mov	r0, sl
 8008720:	f7f7 fd76 	bl	8000210 <memchr>
 8008724:	b138      	cbz	r0, 8008736 <_vfiprintf_r+0x176>
 8008726:	9b04      	ldr	r3, [sp, #16]
 8008728:	eba0 000a 	sub.w	r0, r0, sl
 800872c:	2240      	movs	r2, #64	@ 0x40
 800872e:	4082      	lsls	r2, r0
 8008730:	4313      	orrs	r3, r2
 8008732:	3401      	adds	r4, #1
 8008734:	9304      	str	r3, [sp, #16]
 8008736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873a:	4829      	ldr	r0, [pc, #164]	@ (80087e0 <_vfiprintf_r+0x220>)
 800873c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008740:	2206      	movs	r2, #6
 8008742:	f7f7 fd65 	bl	8000210 <memchr>
 8008746:	2800      	cmp	r0, #0
 8008748:	d03f      	beq.n	80087ca <_vfiprintf_r+0x20a>
 800874a:	4b26      	ldr	r3, [pc, #152]	@ (80087e4 <_vfiprintf_r+0x224>)
 800874c:	bb1b      	cbnz	r3, 8008796 <_vfiprintf_r+0x1d6>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	3307      	adds	r3, #7
 8008752:	f023 0307 	bic.w	r3, r3, #7
 8008756:	3308      	adds	r3, #8
 8008758:	9303      	str	r3, [sp, #12]
 800875a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800875c:	443b      	add	r3, r7
 800875e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008760:	e76a      	b.n	8008638 <_vfiprintf_r+0x78>
 8008762:	fb0c 3202 	mla	r2, ip, r2, r3
 8008766:	460c      	mov	r4, r1
 8008768:	2001      	movs	r0, #1
 800876a:	e7a8      	b.n	80086be <_vfiprintf_r+0xfe>
 800876c:	2300      	movs	r3, #0
 800876e:	3401      	adds	r4, #1
 8008770:	9305      	str	r3, [sp, #20]
 8008772:	4619      	mov	r1, r3
 8008774:	f04f 0c0a 	mov.w	ip, #10
 8008778:	4620      	mov	r0, r4
 800877a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800877e:	3a30      	subs	r2, #48	@ 0x30
 8008780:	2a09      	cmp	r2, #9
 8008782:	d903      	bls.n	800878c <_vfiprintf_r+0x1cc>
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0c6      	beq.n	8008716 <_vfiprintf_r+0x156>
 8008788:	9105      	str	r1, [sp, #20]
 800878a:	e7c4      	b.n	8008716 <_vfiprintf_r+0x156>
 800878c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008790:	4604      	mov	r4, r0
 8008792:	2301      	movs	r3, #1
 8008794:	e7f0      	b.n	8008778 <_vfiprintf_r+0x1b8>
 8008796:	ab03      	add	r3, sp, #12
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	462a      	mov	r2, r5
 800879c:	4b12      	ldr	r3, [pc, #72]	@ (80087e8 <_vfiprintf_r+0x228>)
 800879e:	a904      	add	r1, sp, #16
 80087a0:	4630      	mov	r0, r6
 80087a2:	f7fd fcab 	bl	80060fc <_printf_float>
 80087a6:	4607      	mov	r7, r0
 80087a8:	1c78      	adds	r0, r7, #1
 80087aa:	d1d6      	bne.n	800875a <_vfiprintf_r+0x19a>
 80087ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087ae:	07d9      	lsls	r1, r3, #31
 80087b0:	d405      	bmi.n	80087be <_vfiprintf_r+0x1fe>
 80087b2:	89ab      	ldrh	r3, [r5, #12]
 80087b4:	059a      	lsls	r2, r3, #22
 80087b6:	d402      	bmi.n	80087be <_vfiprintf_r+0x1fe>
 80087b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ba:	f7fe fa05 	bl	8006bc8 <__retarget_lock_release_recursive>
 80087be:	89ab      	ldrh	r3, [r5, #12]
 80087c0:	065b      	lsls	r3, r3, #25
 80087c2:	f53f af1f 	bmi.w	8008604 <_vfiprintf_r+0x44>
 80087c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087c8:	e71e      	b.n	8008608 <_vfiprintf_r+0x48>
 80087ca:	ab03      	add	r3, sp, #12
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	462a      	mov	r2, r5
 80087d0:	4b05      	ldr	r3, [pc, #20]	@ (80087e8 <_vfiprintf_r+0x228>)
 80087d2:	a904      	add	r1, sp, #16
 80087d4:	4630      	mov	r0, r6
 80087d6:	f7fd ff29 	bl	800662c <_printf_i>
 80087da:	e7e4      	b.n	80087a6 <_vfiprintf_r+0x1e6>
 80087dc:	080091a0 	.word	0x080091a0
 80087e0:	080091aa 	.word	0x080091aa
 80087e4:	080060fd 	.word	0x080060fd
 80087e8:	0800859d 	.word	0x0800859d
 80087ec:	080091a6 	.word	0x080091a6

080087f0 <__swbuf_r>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	460e      	mov	r6, r1
 80087f4:	4614      	mov	r4, r2
 80087f6:	4605      	mov	r5, r0
 80087f8:	b118      	cbz	r0, 8008802 <__swbuf_r+0x12>
 80087fa:	6a03      	ldr	r3, [r0, #32]
 80087fc:	b90b      	cbnz	r3, 8008802 <__swbuf_r+0x12>
 80087fe:	f7fe f8c1 	bl	8006984 <__sinit>
 8008802:	69a3      	ldr	r3, [r4, #24]
 8008804:	60a3      	str	r3, [r4, #8]
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	071a      	lsls	r2, r3, #28
 800880a:	d501      	bpl.n	8008810 <__swbuf_r+0x20>
 800880c:	6923      	ldr	r3, [r4, #16]
 800880e:	b943      	cbnz	r3, 8008822 <__swbuf_r+0x32>
 8008810:	4621      	mov	r1, r4
 8008812:	4628      	mov	r0, r5
 8008814:	f000 f82a 	bl	800886c <__swsetup_r>
 8008818:	b118      	cbz	r0, 8008822 <__swbuf_r+0x32>
 800881a:	f04f 37ff 	mov.w	r7, #4294967295
 800881e:	4638      	mov	r0, r7
 8008820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	6922      	ldr	r2, [r4, #16]
 8008826:	1a98      	subs	r0, r3, r2
 8008828:	6963      	ldr	r3, [r4, #20]
 800882a:	b2f6      	uxtb	r6, r6
 800882c:	4283      	cmp	r3, r0
 800882e:	4637      	mov	r7, r6
 8008830:	dc05      	bgt.n	800883e <__swbuf_r+0x4e>
 8008832:	4621      	mov	r1, r4
 8008834:	4628      	mov	r0, r5
 8008836:	f7ff fdcb 	bl	80083d0 <_fflush_r>
 800883a:	2800      	cmp	r0, #0
 800883c:	d1ed      	bne.n	800881a <__swbuf_r+0x2a>
 800883e:	68a3      	ldr	r3, [r4, #8]
 8008840:	3b01      	subs	r3, #1
 8008842:	60a3      	str	r3, [r4, #8]
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	6022      	str	r2, [r4, #0]
 800884a:	701e      	strb	r6, [r3, #0]
 800884c:	6962      	ldr	r2, [r4, #20]
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	429a      	cmp	r2, r3
 8008852:	d004      	beq.n	800885e <__swbuf_r+0x6e>
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	07db      	lsls	r3, r3, #31
 8008858:	d5e1      	bpl.n	800881e <__swbuf_r+0x2e>
 800885a:	2e0a      	cmp	r6, #10
 800885c:	d1df      	bne.n	800881e <__swbuf_r+0x2e>
 800885e:	4621      	mov	r1, r4
 8008860:	4628      	mov	r0, r5
 8008862:	f7ff fdb5 	bl	80083d0 <_fflush_r>
 8008866:	2800      	cmp	r0, #0
 8008868:	d0d9      	beq.n	800881e <__swbuf_r+0x2e>
 800886a:	e7d6      	b.n	800881a <__swbuf_r+0x2a>

0800886c <__swsetup_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4b29      	ldr	r3, [pc, #164]	@ (8008914 <__swsetup_r+0xa8>)
 8008870:	4605      	mov	r5, r0
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	460c      	mov	r4, r1
 8008876:	b118      	cbz	r0, 8008880 <__swsetup_r+0x14>
 8008878:	6a03      	ldr	r3, [r0, #32]
 800887a:	b90b      	cbnz	r3, 8008880 <__swsetup_r+0x14>
 800887c:	f7fe f882 	bl	8006984 <__sinit>
 8008880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008884:	0719      	lsls	r1, r3, #28
 8008886:	d422      	bmi.n	80088ce <__swsetup_r+0x62>
 8008888:	06da      	lsls	r2, r3, #27
 800888a:	d407      	bmi.n	800889c <__swsetup_r+0x30>
 800888c:	2209      	movs	r2, #9
 800888e:	602a      	str	r2, [r5, #0]
 8008890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008894:	81a3      	strh	r3, [r4, #12]
 8008896:	f04f 30ff 	mov.w	r0, #4294967295
 800889a:	e033      	b.n	8008904 <__swsetup_r+0x98>
 800889c:	0758      	lsls	r0, r3, #29
 800889e:	d512      	bpl.n	80088c6 <__swsetup_r+0x5a>
 80088a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088a2:	b141      	cbz	r1, 80088b6 <__swsetup_r+0x4a>
 80088a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088a8:	4299      	cmp	r1, r3
 80088aa:	d002      	beq.n	80088b2 <__swsetup_r+0x46>
 80088ac:	4628      	mov	r0, r5
 80088ae:	f7fe ffe7 	bl	8007880 <_free_r>
 80088b2:	2300      	movs	r3, #0
 80088b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80088b6:	89a3      	ldrh	r3, [r4, #12]
 80088b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088bc:	81a3      	strh	r3, [r4, #12]
 80088be:	2300      	movs	r3, #0
 80088c0:	6063      	str	r3, [r4, #4]
 80088c2:	6923      	ldr	r3, [r4, #16]
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	f043 0308 	orr.w	r3, r3, #8
 80088cc:	81a3      	strh	r3, [r4, #12]
 80088ce:	6923      	ldr	r3, [r4, #16]
 80088d0:	b94b      	cbnz	r3, 80088e6 <__swsetup_r+0x7a>
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088dc:	d003      	beq.n	80088e6 <__swsetup_r+0x7a>
 80088de:	4621      	mov	r1, r4
 80088e0:	4628      	mov	r0, r5
 80088e2:	f000 f883 	bl	80089ec <__smakebuf_r>
 80088e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ea:	f013 0201 	ands.w	r2, r3, #1
 80088ee:	d00a      	beq.n	8008906 <__swsetup_r+0x9a>
 80088f0:	2200      	movs	r2, #0
 80088f2:	60a2      	str	r2, [r4, #8]
 80088f4:	6962      	ldr	r2, [r4, #20]
 80088f6:	4252      	negs	r2, r2
 80088f8:	61a2      	str	r2, [r4, #24]
 80088fa:	6922      	ldr	r2, [r4, #16]
 80088fc:	b942      	cbnz	r2, 8008910 <__swsetup_r+0xa4>
 80088fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008902:	d1c5      	bne.n	8008890 <__swsetup_r+0x24>
 8008904:	bd38      	pop	{r3, r4, r5, pc}
 8008906:	0799      	lsls	r1, r3, #30
 8008908:	bf58      	it	pl
 800890a:	6962      	ldrpl	r2, [r4, #20]
 800890c:	60a2      	str	r2, [r4, #8]
 800890e:	e7f4      	b.n	80088fa <__swsetup_r+0x8e>
 8008910:	2000      	movs	r0, #0
 8008912:	e7f7      	b.n	8008904 <__swsetup_r+0x98>
 8008914:	2000001c 	.word	0x2000001c

08008918 <_raise_r>:
 8008918:	291f      	cmp	r1, #31
 800891a:	b538      	push	{r3, r4, r5, lr}
 800891c:	4605      	mov	r5, r0
 800891e:	460c      	mov	r4, r1
 8008920:	d904      	bls.n	800892c <_raise_r+0x14>
 8008922:	2316      	movs	r3, #22
 8008924:	6003      	str	r3, [r0, #0]
 8008926:	f04f 30ff 	mov.w	r0, #4294967295
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800892e:	b112      	cbz	r2, 8008936 <_raise_r+0x1e>
 8008930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008934:	b94b      	cbnz	r3, 800894a <_raise_r+0x32>
 8008936:	4628      	mov	r0, r5
 8008938:	f000 f830 	bl	800899c <_getpid_r>
 800893c:	4622      	mov	r2, r4
 800893e:	4601      	mov	r1, r0
 8008940:	4628      	mov	r0, r5
 8008942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008946:	f000 b817 	b.w	8008978 <_kill_r>
 800894a:	2b01      	cmp	r3, #1
 800894c:	d00a      	beq.n	8008964 <_raise_r+0x4c>
 800894e:	1c59      	adds	r1, r3, #1
 8008950:	d103      	bne.n	800895a <_raise_r+0x42>
 8008952:	2316      	movs	r3, #22
 8008954:	6003      	str	r3, [r0, #0]
 8008956:	2001      	movs	r0, #1
 8008958:	e7e7      	b.n	800892a <_raise_r+0x12>
 800895a:	2100      	movs	r1, #0
 800895c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008960:	4620      	mov	r0, r4
 8008962:	4798      	blx	r3
 8008964:	2000      	movs	r0, #0
 8008966:	e7e0      	b.n	800892a <_raise_r+0x12>

08008968 <raise>:
 8008968:	4b02      	ldr	r3, [pc, #8]	@ (8008974 <raise+0xc>)
 800896a:	4601      	mov	r1, r0
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	f7ff bfd3 	b.w	8008918 <_raise_r>
 8008972:	bf00      	nop
 8008974:	2000001c 	.word	0x2000001c

08008978 <_kill_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d07      	ldr	r5, [pc, #28]	@ (8008998 <_kill_r+0x20>)
 800897c:	2300      	movs	r3, #0
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	4611      	mov	r1, r2
 8008984:	602b      	str	r3, [r5, #0]
 8008986:	f000 f8af 	bl	8008ae8 <_kill>
 800898a:	1c43      	adds	r3, r0, #1
 800898c:	d102      	bne.n	8008994 <_kill_r+0x1c>
 800898e:	682b      	ldr	r3, [r5, #0]
 8008990:	b103      	cbz	r3, 8008994 <_kill_r+0x1c>
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	bd38      	pop	{r3, r4, r5, pc}
 8008996:	bf00      	nop
 8008998:	20000944 	.word	0x20000944

0800899c <_getpid_r>:
 800899c:	f000 b894 	b.w	8008ac8 <_getpid>

080089a0 <__swhatbuf_r>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	460c      	mov	r4, r1
 80089a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a8:	2900      	cmp	r1, #0
 80089aa:	b096      	sub	sp, #88	@ 0x58
 80089ac:	4615      	mov	r5, r2
 80089ae:	461e      	mov	r6, r3
 80089b0:	da0d      	bge.n	80089ce <__swhatbuf_r+0x2e>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089b8:	f04f 0100 	mov.w	r1, #0
 80089bc:	bf14      	ite	ne
 80089be:	2340      	movne	r3, #64	@ 0x40
 80089c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089c4:	2000      	movs	r0, #0
 80089c6:	6031      	str	r1, [r6, #0]
 80089c8:	602b      	str	r3, [r5, #0]
 80089ca:	b016      	add	sp, #88	@ 0x58
 80089cc:	bd70      	pop	{r4, r5, r6, pc}
 80089ce:	466a      	mov	r2, sp
 80089d0:	f000 f848 	bl	8008a64 <_fstat_r>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	dbec      	blt.n	80089b2 <__swhatbuf_r+0x12>
 80089d8:	9901      	ldr	r1, [sp, #4]
 80089da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089e2:	4259      	negs	r1, r3
 80089e4:	4159      	adcs	r1, r3
 80089e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ea:	e7eb      	b.n	80089c4 <__swhatbuf_r+0x24>

080089ec <__smakebuf_r>:
 80089ec:	898b      	ldrh	r3, [r1, #12]
 80089ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f0:	079d      	lsls	r5, r3, #30
 80089f2:	4606      	mov	r6, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	d507      	bpl.n	8008a08 <__smakebuf_r+0x1c>
 80089f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	6123      	str	r3, [r4, #16]
 8008a00:	2301      	movs	r3, #1
 8008a02:	6163      	str	r3, [r4, #20]
 8008a04:	b003      	add	sp, #12
 8008a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a08:	ab01      	add	r3, sp, #4
 8008a0a:	466a      	mov	r2, sp
 8008a0c:	f7ff ffc8 	bl	80089a0 <__swhatbuf_r>
 8008a10:	9f00      	ldr	r7, [sp, #0]
 8008a12:	4605      	mov	r5, r0
 8008a14:	4639      	mov	r1, r7
 8008a16:	4630      	mov	r0, r6
 8008a18:	f7fd fa44 	bl	8005ea4 <_malloc_r>
 8008a1c:	b948      	cbnz	r0, 8008a32 <__smakebuf_r+0x46>
 8008a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a22:	059a      	lsls	r2, r3, #22
 8008a24:	d4ee      	bmi.n	8008a04 <__smakebuf_r+0x18>
 8008a26:	f023 0303 	bic.w	r3, r3, #3
 8008a2a:	f043 0302 	orr.w	r3, r3, #2
 8008a2e:	81a3      	strh	r3, [r4, #12]
 8008a30:	e7e2      	b.n	80089f8 <__smakebuf_r+0xc>
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	6020      	str	r0, [r4, #0]
 8008a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	9b01      	ldr	r3, [sp, #4]
 8008a3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a42:	b15b      	cbz	r3, 8008a5c <__smakebuf_r+0x70>
 8008a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f000 f81d 	bl	8008a88 <_isatty_r>
 8008a4e:	b128      	cbz	r0, 8008a5c <__smakebuf_r+0x70>
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	f043 0301 	orr.w	r3, r3, #1
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	431d      	orrs	r5, r3
 8008a60:	81a5      	strh	r5, [r4, #12]
 8008a62:	e7cf      	b.n	8008a04 <__smakebuf_r+0x18>

08008a64 <_fstat_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4d07      	ldr	r5, [pc, #28]	@ (8008a84 <_fstat_r+0x20>)
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	4611      	mov	r1, r2
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	f000 f821 	bl	8008ab8 <_fstat>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	d102      	bne.n	8008a80 <_fstat_r+0x1c>
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	b103      	cbz	r3, 8008a80 <_fstat_r+0x1c>
 8008a7e:	6023      	str	r3, [r4, #0]
 8008a80:	bd38      	pop	{r3, r4, r5, pc}
 8008a82:	bf00      	nop
 8008a84:	20000944 	.word	0x20000944

08008a88 <_isatty_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d06      	ldr	r5, [pc, #24]	@ (8008aa4 <_isatty_r+0x1c>)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	f000 f820 	bl	8008ad8 <_isatty>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_isatty_r+0x1a>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_isatty_r+0x1a>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	20000944 	.word	0x20000944

08008aa8 <_close>:
 8008aa8:	4b02      	ldr	r3, [pc, #8]	@ (8008ab4 <_close+0xc>)
 8008aaa:	2258      	movs	r2, #88	@ 0x58
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab2:	4770      	bx	lr
 8008ab4:	20000944 	.word	0x20000944

08008ab8 <_fstat>:
 8008ab8:	4b02      	ldr	r3, [pc, #8]	@ (8008ac4 <_fstat+0xc>)
 8008aba:	2258      	movs	r2, #88	@ 0x58
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac2:	4770      	bx	lr
 8008ac4:	20000944 	.word	0x20000944

08008ac8 <_getpid>:
 8008ac8:	4b02      	ldr	r3, [pc, #8]	@ (8008ad4 <_getpid+0xc>)
 8008aca:	2258      	movs	r2, #88	@ 0x58
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad2:	4770      	bx	lr
 8008ad4:	20000944 	.word	0x20000944

08008ad8 <_isatty>:
 8008ad8:	4b02      	ldr	r3, [pc, #8]	@ (8008ae4 <_isatty+0xc>)
 8008ada:	2258      	movs	r2, #88	@ 0x58
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	2000      	movs	r0, #0
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	20000944 	.word	0x20000944

08008ae8 <_kill>:
 8008ae8:	4b02      	ldr	r3, [pc, #8]	@ (8008af4 <_kill+0xc>)
 8008aea:	2258      	movs	r2, #88	@ 0x58
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	f04f 30ff 	mov.w	r0, #4294967295
 8008af2:	4770      	bx	lr
 8008af4:	20000944 	.word	0x20000944

08008af8 <_lseek>:
 8008af8:	4b02      	ldr	r3, [pc, #8]	@ (8008b04 <_lseek+0xc>)
 8008afa:	2258      	movs	r2, #88	@ 0x58
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	f04f 30ff 	mov.w	r0, #4294967295
 8008b02:	4770      	bx	lr
 8008b04:	20000944 	.word	0x20000944

08008b08 <_read>:
 8008b08:	4b02      	ldr	r3, [pc, #8]	@ (8008b14 <_read+0xc>)
 8008b0a:	2258      	movs	r2, #88	@ 0x58
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b12:	4770      	bx	lr
 8008b14:	20000944 	.word	0x20000944

08008b18 <_sbrk>:
 8008b18:	4a04      	ldr	r2, [pc, #16]	@ (8008b2c <_sbrk+0x14>)
 8008b1a:	6811      	ldr	r1, [r2, #0]
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	b909      	cbnz	r1, 8008b24 <_sbrk+0xc>
 8008b20:	4903      	ldr	r1, [pc, #12]	@ (8008b30 <_sbrk+0x18>)
 8008b22:	6011      	str	r1, [r2, #0]
 8008b24:	6810      	ldr	r0, [r2, #0]
 8008b26:	4403      	add	r3, r0
 8008b28:	6013      	str	r3, [r2, #0]
 8008b2a:	4770      	bx	lr
 8008b2c:	2000094c 	.word	0x2000094c
 8008b30:	20000950 	.word	0x20000950

08008b34 <_write>:
 8008b34:	4b02      	ldr	r3, [pc, #8]	@ (8008b40 <_write+0xc>)
 8008b36:	2258      	movs	r2, #88	@ 0x58
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3e:	4770      	bx	lr
 8008b40:	20000944 	.word	0x20000944

08008b44 <_exit>:
 8008b44:	e7fe      	b.n	8008b44 <_exit>
	...

08008b48 <_init>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr

08008b54 <_fini>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	bf00      	nop
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr
