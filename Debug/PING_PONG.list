
PING_PONG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080043a0  080043a0  000053a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800445c  0800445c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800445c  0800445c  0000545c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004464  08004464  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004464  08004464  00005464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004468  08004468  00005468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800446c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000005c  080044c8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080044c8  000062d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d64d  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002138  00000000  00000000  000136d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00015818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e1  00000000  00000000  00016388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022643  00000000  00000000  00016c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010415  00000000  00000000  000392ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd722  00000000  00000000  000496c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116de3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003408  00000000  00000000  00116e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0011a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004388 	.word	0x08004388

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004388 	.word	0x08004388

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <FEB_CAN_Init>:
uint8_t FEB_CAN_PONGED;


// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 80005b4:	f000 f80c 	bl	80005d0 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80005b8:	4804      	ldr	r0, [pc, #16]	@ (80005cc <FEB_CAN_Init+0x1c>)
 80005ba:	f000 ffc1 	bl	8001540 <HAL_CAN_Start>
        // Code Error - Shutdown
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005be:	2102      	movs	r1, #2
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <FEB_CAN_Init+0x1c>)
 80005c2:	f001 fa23 	bl	8001a0c <HAL_CAN_ActivateNotification>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000c4 	.word	0x200000c4

080005d0 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	71fb      	strb	r3, [r7, #7]
    if(FEB_CAN_PINGPONG_MODE) filter_bank =FEB_CAN_PINGPONG_Filter(&hcan1, CAN_RX_FIFO0, filter_bank);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	461a      	mov	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <FEB_CAN_Filter_Config+0x24>)
 80005e2:	f000 f8a7 	bl	8000734 <FEB_CAN_PINGPONG_Filter>
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]

	// Assign Filter
    // filter_bank = Function(&hcan1, CAN_RX_FIFO0, filter_bank);
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200000c4 	.word	0x200000c4

080005f8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &FEB_CAN_Rx_Header, FEB_CAN_Rx_Data) == HAL_OK) {
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000602:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000604:	2100      	movs	r1, #0
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f001 f8ee 	bl	80017e8 <HAL_CAN_GetRxMessage>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d103      	bne.n	800061a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		if(FEB_CAN_PINGPONG_MODE){
			FEB_CAN_PONG(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
 8000612:	4904      	ldr	r1, [pc, #16]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000616:	f000 f86b 	bl	80006f0 <FEB_CAN_PONG>
		else{
			//YOUR HANDLER HERE!!!
		}

	}
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000b4 	.word	0x200000b4
 8000628:	20000090 	.word	0x20000090

0800062c <FEB_CAN_PING>:

void FEB_CAN_PING(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	//Reset known members
	FEB_CAN_PONGED=0;
 8000632:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <FEB_CAN_PING+0xac>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]

	FEB_CAN_Tx_Header.DLC = 8;
 8000638:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <FEB_CAN_PING+0xb0>)
 800063a:	2208      	movs	r2, #8
 800063c:	611a      	str	r2, [r3, #16]
	FEB_CAN_Tx_Header.StdId = FEB_CAN_PINGER_A;
 800063e:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <FEB_CAN_PING+0xb0>)
 8000640:	4a27      	ldr	r2, [pc, #156]	@ (80006e0 <FEB_CAN_PING+0xb4>)
 8000642:	601a      	str	r2, [r3, #0]
	//FEB_CAN_Tx_Header.StdId = FEB_CAN_PINGER_B;
	//FEB_CAN_Tx_Header.StdId = FEB_CAN_PINGER_C;
	//FEB_CAN_Tx_Header.StdId = FEB_CAN_PINGER_D;
	FEB_CAN_Tx_Header.IDE = CAN_ID_STD;
 8000644:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <FEB_CAN_PING+0xb0>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 800064a:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <FEB_CAN_PING+0xb0>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.TransmitGlobalTime = DISABLE;
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <FEB_CAN_PING+0xb0>)
 8000652:	2200      	movs	r2, #0
 8000654:	751a      	strb	r2, [r3, #20]

	// Copy data to Tx buffer
	FEB_CAN_Tx_Data[0] = (uint8_t) 0xA1;
 8000656:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <FEB_CAN_PING+0xb8>)
 8000658:	22a1      	movs	r2, #161	@ 0xa1
 800065a:	701a      	strb	r2, [r3, #0]
	FEB_CAN_Tx_Data[1] = (uint8_t) 0xA2;
 800065c:	4b21      	ldr	r3, [pc, #132]	@ (80006e4 <FEB_CAN_PING+0xb8>)
 800065e:	22a2      	movs	r2, #162	@ 0xa2
 8000660:	705a      	strb	r2, [r3, #1]
	FEB_CAN_Tx_Data[2] = (uint8_t) 0xA3;
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <FEB_CAN_PING+0xb8>)
 8000664:	22a3      	movs	r2, #163	@ 0xa3
 8000666:	709a      	strb	r2, [r3, #2]
	FEB_CAN_Tx_Data[3] = (uint8_t) 0xA4;
 8000668:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <FEB_CAN_PING+0xb8>)
 800066a:	22a4      	movs	r2, #164	@ 0xa4
 800066c:	70da      	strb	r2, [r3, #3]
	FEB_CAN_Tx_Data[4] = (uint8_t) 0xA5;
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <FEB_CAN_PING+0xb8>)
 8000670:	22a5      	movs	r2, #165	@ 0xa5
 8000672:	711a      	strb	r2, [r3, #4]
	FEB_CAN_Tx_Data[5] = (uint8_t) 0xA6;
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <FEB_CAN_PING+0xb8>)
 8000676:	22a6      	movs	r2, #166	@ 0xa6
 8000678:	715a      	strb	r2, [r3, #5]
	FEB_CAN_Tx_Data[6] = (uint8_t) 0xA7;
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <FEB_CAN_PING+0xb8>)
 800067c:	22a7      	movs	r2, #167	@ 0xa7
 800067e:	719a      	strb	r2, [r3, #6]
	FEB_CAN_Tx_Data[7] = (uint8_t) 0xA8;
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <FEB_CAN_PING+0xb8>)
 8000682:	22a8      	movs	r2, #168	@ 0xa8
 8000684:	71da      	strb	r2, [r3, #7]

	// Delay until mailbox available
	uint32_t timeout=HAL_GetTick()+FEB_CAN_TIMEOUT_MS;
 8000686:	f000 fd4f 	bl	8001128 <HAL_GetTick>
 800068a:	4603      	mov	r3, r0
 800068c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000690:	607b      	str	r3, [r7, #4]
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {if(HAL_GetTick()>timeout) FEB_UART_Transmit_CAN_Error(FEB_CAN_EXCEPTION_TIMEOUT);}
 8000692:	e009      	b.n	80006a8 <FEB_CAN_PING+0x7c>
 8000694:	f000 fd48 	bl	8001128 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4293      	cmp	r3, r2
 800069e:	d203      	bcs.n	80006a8 <FEB_CAN_PING+0x7c>
 80006a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a4:	f000 f8f0 	bl	8000888 <FEB_UART_Transmit_CAN_Error>
 80006a8:	480f      	ldr	r0, [pc, #60]	@ (80006e8 <FEB_CAN_PING+0xbc>)
 80006aa:	f001 f868 	bl	800177e <HAL_CAN_GetTxMailboxesFreeLevel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d0ef      	beq.n	8000694 <FEB_CAN_PING+0x68>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(&hcan1, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {FEB_UART_Transmit_CAN_Error(FEB_CAN_EXCEPTION_TxFAIL);}
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <FEB_CAN_PING+0xc0>)
 80006b6:	4a0b      	ldr	r2, [pc, #44]	@ (80006e4 <FEB_CAN_PING+0xb8>)
 80006b8:	4908      	ldr	r1, [pc, #32]	@ (80006dc <FEB_CAN_PING+0xb0>)
 80006ba:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <FEB_CAN_PING+0xbc>)
 80006bc:	f000 ff84 	bl	80015c8 <HAL_CAN_AddTxMessage>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d003      	beq.n	80006ce <FEB_CAN_PING+0xa2>
 80006c6:	f240 30e9 	movw	r0, #1001	@ 0x3e9
 80006ca:	f000 f8dd 	bl	8000888 <FEB_UART_Transmit_CAN_Error>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000c0 	.word	0x200000c0
 80006dc:	20000078 	.word	0x20000078
 80006e0:	000a0001 	.word	0x000a0001
 80006e4:	200000ac 	.word	0x200000ac
 80006e8:	200000c4 	.word	0x200000c4
 80006ec:	200000bc 	.word	0x200000bc

080006f0 <FEB_CAN_PONG>:

void FEB_CAN_PONG(CAN_RxHeaderTypeDef *FEB_CAN_Rx_Header, uint8_t FEB_CAN_Rx_Data[]){
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	FEB_CAN_PONGED+=FEB_CAN_Rx_Header->StdId;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <FEB_CAN_PONG+0x28>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4413      	add	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b03      	ldr	r3, [pc, #12]	@ (8000718 <FEB_CAN_PONG+0x28>)
 800070a:	701a      	strb	r2, [r3, #0]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	200000c0 	.word	0x200000c0

0800071c <FEB_CAN_GET_PONGED>:

uint8_t FEB_CAN_GET_PONGED(void){
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	return FEB_CAN_PONGED;
 8000720:	4b03      	ldr	r3, [pc, #12]	@ (8000730 <FEB_CAN_GET_PONGED+0x14>)
 8000722:	781b      	ldrb	r3, [r3, #0]
}
 8000724:	4618      	mov	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	200000c0 	.word	0x200000c0

08000734 <FEB_CAN_PINGPONG_Filter>:

uint8_t FEB_CAN_PINGPONG_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank){
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	@ 0x30
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
 8000740:	4613      	mov	r3, r2
 8000742:	70bb      	strb	r3, [r7, #2]
    // For multiple filters, create array of filter IDs and loop over IDs.

	CAN_FilterTypeDef filter_config;

    // Standard CAN - 2.0A - 11 bit
    filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000744:	2301      	movs	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter_config.FilterBank = filter_bank;
 8000748:	78bb      	ldrb	r3, [r7, #2]
 800074a:	61fb      	str	r3, [r7, #28]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	61bb      	str	r3, [r7, #24]
	filter_config.FilterIdHigh = 0xA0001;
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <FEB_CAN_PINGPONG_Filter+0x88>)
 8000752:	60bb      	str	r3, [r7, #8]
	filter_config.FilterIdLow = 0xD1;
 8000754:	23d1      	movs	r3, #209	@ 0xd1
 8000756:	60fb      	str	r3, [r7, #12]
	filter_config.FilterMaskIdHigh = 0xFFE0;
 8000758:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800075c:	613b      	str	r3, [r7, #16]
	filter_config.FilterMaskIdLow = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000766:	2301      	movs	r3, #1
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
	filter_config.SlaveStartFilterBank = 27;
 800076a:	231b      	movs	r3, #27
 800076c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    filter_bank++;
 800076e:	78bb      	ldrb	r3, [r7, #2]
 8000770:	3301      	adds	r3, #1
 8000772:	70bb      	strb	r3, [r7, #2]

    // Extended CAN - 2.0B - 29 bit
	filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000774:	2301      	movs	r3, #1
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter_config.FilterBank = filter_bank;
 8000778:	78bb      	ldrb	r3, [r7, #2]
 800077a:	61fb      	str	r3, [r7, #28]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	61bb      	str	r3, [r7, #24]
	filter_config.FilterIdHigh = /* ID */ 0 >> 13;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
	filter_config.FilterIdLow = (/* ID */ 0 & 0x1FFF) << 3;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
	filter_config.FilterMaskIdHigh = 0xFFFF;
 8000788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800078c:	613b      	str	r3, [r7, #16]
	filter_config.FilterMaskIdLow = 0xFFF8;
 800078e:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000792:	617b      	str	r3, [r7, #20]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000798:	2301      	movs	r3, #1
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
	filter_config.SlaveStartFilterBank = 27;
 800079c:	231b      	movs	r3, #27
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    filter_bank++;
 80007a0:	78bb      	ldrb	r3, [r7, #2]
 80007a2:	3301      	adds	r3, #1
 80007a4:	70bb      	strb	r3, [r7, #2]

	if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	4619      	mov	r1, r3
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 fde7 	bl	8001380 <HAL_CAN_ConfigFilter>
        // Code Error - Shutdown
	}

	return filter_bank;
 80007b2:	78bb      	ldrb	r3, [r7, #2]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3730      	adds	r7, #48	@ 0x30
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	000a0001 	.word	0x000a0001

080007c0 <FEB_Main_Setup>:

#include "main.h"

// **************************************** Functions ****************************************

void FEB_Main_Setup(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	FEB_CAN_Init();
 80007c4:	f7ff fef4 	bl	80005b0 <FEB_CAN_Init>
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <FEB_Main_Loop>:

void FEB_Main_Loop(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	if(FEB_CAN_PINGPONG_MODE){
		FEB_CAN_PING();
 80007d0:	f7ff ff2c 	bl	800062c <FEB_CAN_PING>

		FEB_UART_Transmit_Process();
 80007d4:	f000 f80e 	bl	80007f4 <FEB_UART_Transmit_Process>

		FEB_UART_Transmit_PingPong_Members();
 80007d8:	f000 f834 	bl	8000844 <FEB_UART_Transmit_PingPong_Members>

		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80007dc:	2120      	movs	r1, #32
 80007de:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <FEB_Main_Loop+0x24>)
 80007e0:	f001 fe29 	bl	8002436 <HAL_GPIO_TogglePin>

		HAL_Delay(1000);
 80007e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e8:	f000 fcaa 	bl	8001140 <HAL_Delay>
	}
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40020000 	.word	0x40020000

080007f4 <FEB_UART_Transmit_Process>:

static uint8_t counter = 0;

// **************************************** Functions ****************************************

void FEB_UART_Transmit_Process(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	f5ad 6d00 	sub.w	sp, sp, #2048	@ 0x800
 80007fa:	af00      	add	r7, sp, #0
	char str[2048];

	sprintf(str, "Counter: %u\n\r  ", counter);
 80007fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <FEB_UART_Transmit_Process+0x44>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	463b      	mov	r3, r7
 8000804:	490d      	ldr	r1, [pc, #52]	@ (800083c <FEB_UART_Transmit_Process+0x48>)
 8000806:	4618      	mov	r0, r3
 8000808:	f003 f91e 	bl	8003a48 <siprintf>

	counter++;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <FEB_UART_Transmit_Process+0x44>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <FEB_UART_Transmit_Process+0x44>)
 8000816:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), 100);
 8000818:	463b      	mov	r3, r7
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fcf8 	bl	8000210 <strlen>
 8000820:	4603      	mov	r3, r0
 8000822:	b29a      	uxth	r2, r3
 8000824:	4639      	mov	r1, r7
 8000826:	2364      	movs	r3, #100	@ 0x64
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <FEB_UART_Transmit_Process+0x4c>)
 800082a:	f002 fd98 	bl	800335e <HAL_UART_Transmit>
}
 800082e:	bf00      	nop
 8000830:	f507 6700 	add.w	r7, r7, #2048	@ 0x800
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000c1 	.word	0x200000c1
 800083c:	080043a0 	.word	0x080043a0
 8000840:	20000140 	.word	0x20000140

08000844 <FEB_UART_Transmit_PingPong_Members>:

void FEB_UART_Transmit_PingPong_Members(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	f5ad 6d00 	sub.w	sp, sp, #2048	@ 0x800
 800084a:	af00      	add	r7, sp, #0
	char str[2048];

	sprintf(str, "Members: %u\n\r", FEB_CAN_GET_PONGED());
 800084c:	f7ff ff66 	bl	800071c <FEB_CAN_GET_PONGED>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	463b      	mov	r3, r7
 8000856:	490a      	ldr	r1, [pc, #40]	@ (8000880 <FEB_UART_Transmit_PingPong_Members+0x3c>)
 8000858:	4618      	mov	r0, r3
 800085a:	f003 f8f5 	bl	8003a48 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), 100);
 800085e:	463b      	mov	r3, r7
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fcd5 	bl	8000210 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	b29a      	uxth	r2, r3
 800086a:	4639      	mov	r1, r7
 800086c:	2364      	movs	r3, #100	@ 0x64
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <FEB_UART_Transmit_PingPong_Members+0x40>)
 8000870:	f002 fd75 	bl	800335e <HAL_UART_Transmit>
}
 8000874:	bf00      	nop
 8000876:	f507 6700 	add.w	r7, r7, #2048	@ 0x800
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	080043b0 	.word	0x080043b0
 8000884:	20000140 	.word	0x20000140

08000888 <FEB_UART_Transmit_CAN_Error>:

void FEB_UART_Transmit_CAN_Error(int ErrorCode) {
 8000888:	b580      	push	{r7, lr}
 800088a:	f6ad 0d08 	subw	sp, sp, #2056	@ 0x808
 800088e:	af00      	add	r7, sp, #0
 8000890:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8000894:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 8000898:	6018      	str	r0, [r3, #0]
	char str[2048];

	switch (ErrorCode){
 800089a:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 800089e:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d01e      	beq.n	80008ea <FEB_UART_Transmit_CAN_Error+0x62>
 80008ac:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 80008b0:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80008ba:	4293      	cmp	r3, r2
 80008bc:	dc1d      	bgt.n	80008fa <FEB_UART_Transmit_CAN_Error+0x72>
 80008be:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 80008c2:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d015      	beq.n	80008f8 <FEB_UART_Transmit_CAN_Error+0x70>
 80008cc:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 80008d0:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008da:	d10e      	bne.n	80008fa <FEB_UART_Transmit_CAN_Error+0x72>
	case 0:
		break;
	case FEB_CAN_EXCEPTION_TIMEOUT:
		sprintf(str, "CAN Timeout while waiting for empty mailboxes!\n");
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	490f      	ldr	r1, [pc, #60]	@ (8000920 <FEB_UART_Transmit_CAN_Error+0x98>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f003 f8b0 	bl	8003a48 <siprintf>
		break;
 80008e8:	e007      	b.n	80008fa <FEB_UART_Transmit_CAN_Error+0x72>
	case FEB_CAN_EXCEPTION_TxFAIL:
		sprintf(str, "Transmission failed to send!\n");
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	490d      	ldr	r1, [pc, #52]	@ (8000924 <FEB_UART_Transmit_CAN_Error+0x9c>)
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 f8a9 	bl	8003a48 <siprintf>
		break;
 80008f6:	e000      	b.n	80008fa <FEB_UART_Transmit_CAN_Error+0x72>
		break;
 80008f8:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), 100);
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fc86 	bl	8000210 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b29a      	uxth	r2, r3
 8000908:	f107 0108 	add.w	r1, r7, #8
 800090c:	2364      	movs	r3, #100	@ 0x64
 800090e:	4806      	ldr	r0, [pc, #24]	@ (8000928 <FEB_UART_Transmit_CAN_Error+0xa0>)
 8000910:	f002 fd25 	bl	800335e <HAL_UART_Transmit>
}
 8000914:	bf00      	nop
 8000916:	f607 0708 	addw	r7, r7, #2056	@ 0x808
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	080043c0 	.word	0x080043c0
 8000924:	080043f0 	.word	0x080043f0
 8000928:	20000140 	.word	0x20000140

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f000 fb94 	bl	800105c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f80e 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 f906 	bl	8000b48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800093c:	f000 f8da 	bl	8000af4 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000940:	f000 f874 	bl	8000a2c <MX_CAN1_Init>
  MX_I2C1_Init();
 8000944:	f000 f8a8 	bl	8000a98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  FEB_Main_Setup();
 8000948:	f7ff ff3a 	bl	80007c0 <FEB_Main_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	FEB_Main_Loop();
 800094c:	f7ff ff3e 	bl	80007cc <FEB_Main_Loop>
 8000950:	e7fc      	b.n	800094c <main+0x20>
	...

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b094      	sub	sp, #80	@ 0x50
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2234      	movs	r2, #52	@ 0x34
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f003 f890 	bl	8003a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <SystemClock_Config+0xd0>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	4a28      	ldr	r2, [pc, #160]	@ (8000a24 <SystemClock_Config+0xd0>)
 8000982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000986:	6413      	str	r3, [r2, #64]	@ 0x40
 8000988:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <SystemClock_Config+0xd0>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <SystemClock_Config+0xd4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a22      	ldr	r2, [pc, #136]	@ (8000a28 <SystemClock_Config+0xd4>)
 800099e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <SystemClock_Config+0xd4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ba:	2302      	movs	r3, #2
 80009bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009c4:	2304      	movs	r3, #4
 80009c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80009c8:	23a0      	movs	r3, #160	@ 0xa0
 80009ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 f9d3 	bl	8002d88 <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009e8:	f000 f96c 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	230f      	movs	r3, #15
 80009ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	2302      	movs	r3, #2
 80009f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	2105      	movs	r1, #5
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 fe72 	bl	80026f4 <HAL_RCC_ClockConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a16:	f000 f955 	bl	8000cc4 <Error_Handler>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3750      	adds	r7, #80	@ 0x50
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40007000 	.word	0x40007000

08000a2c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a30:	4b17      	ldr	r3, [pc, #92]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a32:	4a18      	ldr	r2, [pc, #96]	@ (8000a94 <MX_CAN1_Init+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a38:	2210      	movs	r2, #16
 8000a3a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a4e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a68:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_CAN1_Init+0x64>)
 8000a7c:	f000 fb84 	bl	8001188 <HAL_CAN_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000a86:	f000 f91d 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000c4 	.word	0x200000c4
 8000a94:	40006400 	.word	0x40006400

08000a98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <MX_I2C1_Init+0x50>)
 8000a9e:	4a13      	ldr	r2, [pc, #76]	@ (8000aec <MX_I2C1_Init+0x54>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_I2C1_Init+0x50>)
 8000aa4:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <MX_I2C1_Init+0x58>)
 8000aa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_I2C1_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_I2C1_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_I2C1_Init+0x50>)
 8000ab6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <MX_I2C1_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_I2C1_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <MX_I2C1_Init+0x50>)
 8000ad6:	f001 fcc9 	bl	800246c <HAL_I2C_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae0:	f000 f8f0 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000ec 	.word	0x200000ec
 8000aec:	40005400 	.word	0x40005400
 8000af0:	000186a0 	.word	0x000186a0

08000af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <MX_USART2_UART_Init+0x50>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	f002 fbca 	bl	80032c4 <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f000 f8c5 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000140 	.word	0x20000140
 8000b44:	40004400 	.word	0x40004400

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b54      	ldr	r3, [pc, #336]	@ (8000cb4 <MX_GPIO_Init+0x16c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a53      	ldr	r2, [pc, #332]	@ (8000cb4 <MX_GPIO_Init+0x16c>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b51      	ldr	r3, [pc, #324]	@ (8000cb4 <MX_GPIO_Init+0x16c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b4d      	ldr	r3, [pc, #308]	@ (8000cb4 <MX_GPIO_Init+0x16c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a4c      	ldr	r2, [pc, #304]	@ (8000cb4 <MX_GPIO_Init+0x16c>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb4 <MX_GPIO_Init+0x16c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	4b46      	ldr	r3, [pc, #280]	@ (8000cb4 <MX_GPIO_Init+0x16c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a45      	ldr	r2, [pc, #276]	@ (8000cb4 <MX_GPIO_Init+0x16c>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b43      	ldr	r3, [pc, #268]	@ (8000cb4 <MX_GPIO_Init+0x16c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8000cb4 <MX_GPIO_Init+0x16c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a3e      	ldr	r2, [pc, #248]	@ (8000cb4 <MX_GPIO_Init+0x16c>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8000cb4 <MX_GPIO_Init+0x16c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f640 0108 	movw	r1, #2056	@ 0x808
 8000bd4:	4838      	ldr	r0, [pc, #224]	@ (8000cb8 <MX_GPIO_Init+0x170>)
 8000bd6:	f001 fc15 	bl	8002404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2122      	movs	r1, #34	@ 0x22
 8000bde:	4837      	ldr	r0, [pc, #220]	@ (8000cbc <MX_GPIO_Init+0x174>)
 8000be0:	f001 fc10 	bl	8002404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2120      	movs	r1, #32
 8000be8:	4835      	ldr	r0, [pc, #212]	@ (8000cc0 <MX_GPIO_Init+0x178>)
 8000bea:	f001 fc0b 	bl	8002404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	482c      	ldr	r0, [pc, #176]	@ (8000cb8 <MX_GPIO_Init+0x170>)
 8000c06:	f001 fa69 	bl	80020dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12;
 8000c0a:	f241 4306 	movw	r3, #5126	@ 0x1406
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4826      	ldr	r0, [pc, #152]	@ (8000cb8 <MX_GPIO_Init+0x170>)
 8000c20:	f001 fa5c 	bl	80020dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11;
 8000c24:	f640 0308 	movw	r3, #2056	@ 0x808
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481e      	ldr	r0, [pc, #120]	@ (8000cb8 <MX_GPIO_Init+0x170>)
 8000c3e:	f001 fa4d 	bl	80020dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8000c42:	2322      	movs	r3, #34	@ 0x22
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4818      	ldr	r0, [pc, #96]	@ (8000cbc <MX_GPIO_Init+0x174>)
 8000c5a:	f001 fa3f 	bl	80020dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4812      	ldr	r0, [pc, #72]	@ (8000cbc <MX_GPIO_Init+0x174>)
 8000c74:	f001 fa32 	bl	80020dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000c78:	23d0      	movs	r3, #208	@ 0xd0
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <MX_GPIO_Init+0x178>)
 8000c8c:	f001 fa26 	bl	80020dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c90:	2320      	movs	r3, #32
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4806      	ldr	r0, [pc, #24]	@ (8000cc0 <MX_GPIO_Init+0x178>)
 8000ca8:	f001 fa18 	bl	80020dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	@ 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020400 	.word	0x40020400

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <Error_Handler+0x8>

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	4a0f      	ldr	r2, [pc, #60]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d0e:	2007      	movs	r0, #7
 8000d10:	f001 f9a2 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a21      	ldr	r2, [pc, #132]	@ (8000dc4 <HAL_CAN_MspInit+0xa4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d13c      	bne.n	8000dbc <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b20      	ldr	r3, [pc, #128]	@ (8000dc8 <HAL_CAN_MspInit+0xa8>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc8 <HAL_CAN_MspInit+0xa8>)
 8000d4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d52:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <HAL_CAN_MspInit+0xa8>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <HAL_CAN_MspInit+0xa8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a18      	ldr	r2, [pc, #96]	@ (8000dc8 <HAL_CAN_MspInit+0xa8>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <HAL_CAN_MspInit+0xa8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d7a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d8c:	2309      	movs	r3, #9
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	480d      	ldr	r0, [pc, #52]	@ (8000dcc <HAL_CAN_MspInit+0xac>)
 8000d98:	f001 f9a0 	bl	80020dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2014      	movs	r0, #20
 8000da2:	f001 f964 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000da6:	2014      	movs	r0, #20
 8000da8:	f001 f97d 	bl	80020a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	2015      	movs	r0, #21
 8000db2:	f001 f95c 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000db6:	2015      	movs	r0, #21
 8000db8:	f001 f975 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	@ 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40006400 	.word	0x40006400
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a19      	ldr	r2, [pc, #100]	@ (8000e54 <HAL_I2C_MspInit+0x84>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d12c      	bne.n	8000e4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <HAL_I2C_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <HAL_I2C_MspInit+0x88>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <HAL_I2C_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e14:	2312      	movs	r3, #18
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e20:	2304      	movs	r3, #4
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <HAL_I2C_MspInit+0x8c>)
 8000e2c:	f001 f956 	bl	80020dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <HAL_I2C_MspInit+0x88>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	4a07      	ldr	r2, [pc, #28]	@ (8000e58 <HAL_I2C_MspInit+0x88>)
 8000e3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <HAL_I2C_MspInit+0x88>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	@ 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40005400 	.word	0x40005400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020400 	.word	0x40020400

08000e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	@ 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a19      	ldr	r2, [pc, #100]	@ (8000ee4 <HAL_UART_MspInit+0x84>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d12b      	bne.n	8000eda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <HAL_UART_MspInit+0x88>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ee8 <HAL_UART_MspInit+0x88>)
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <HAL_UART_MspInit+0x88>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <HAL_UART_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a10      	ldr	r2, [pc, #64]	@ (8000ee8 <HAL_UART_MspInit+0x88>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_UART_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eba:	230c      	movs	r3, #12
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	@ (8000eec <HAL_UART_MspInit+0x8c>)
 8000ed6:	f001 f901 	bl	80020dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	@ 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40004400 	.word	0x40004400
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020000 	.word	0x40020000

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <MemManage_Handler+0x4>

08000f08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f46:	f000 f8db 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f54:	4802      	ldr	r0, [pc, #8]	@ (8000f60 <CAN1_RX0_IRQHandler+0x10>)
 8000f56:	f000 fd7f 	bl	8001a58 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000c4 	.word	0x200000c4

08000f64 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <CAN1_RX1_IRQHandler+0x10>)
 8000f6a:	f000 fd75 	bl	8001a58 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000c4 	.word	0x200000c4

08000f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f80:	4a14      	ldr	r2, [pc, #80]	@ (8000fd4 <_sbrk+0x5c>)
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <_sbrk+0x60>)
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <_sbrk+0x64>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	@ (8000fe0 <_sbrk+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d207      	bcs.n	8000fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa8:	f002 fd76 	bl	8003a98 <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	e009      	b.n	8000fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <_sbrk+0x64>)
 8000fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20020000 	.word	0x20020000
 8000fd8:	00000400 	.word	0x00000400
 8000fdc:	20000184 	.word	0x20000184
 8000fe0:	200002d8 	.word	0x200002d8

08000fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480d      	ldr	r0, [pc, #52]	@ (8001044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800100e:	490e      	ldr	r1, [pc, #56]	@ (8001048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001010:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0b      	ldr	r2, [pc, #44]	@ (8001050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001024:	4c0b      	ldr	r4, [pc, #44]	@ (8001054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001032:	f7ff ffd7 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f002 fd35 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff fc77 	bl	800092c <main>
  bx  lr    
 800103e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800104c:	0800446c 	.word	0x0800446c
  ldr r2, =_sbss
 8001050:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001054:	200002d4 	.word	0x200002d4

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>
	...

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001060:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <HAL_Init+0x40>)
 8001066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800106a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800106c:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <HAL_Init+0x40>)
 8001072:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	@ (800109c <HAL_Init+0x40>)
 800107e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f000 ffe7 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108a:	2000      	movs	r0, #0
 800108c:	f000 f808 	bl	80010a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001090:	f7ff fe1e 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023c00 	.word	0x40023c00

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <HAL_InitTick+0x54>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <HAL_InitTick+0x58>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 ffff 	bl	80020c2 <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f000 ffc7 	bl	800206e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <HAL_InitTick+0x5c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	20000188 	.word	0x20000188

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000188 	.word	0x20000188

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff ffee 	bl	8001128 <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_Delay+0x44>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffde 	bl	8001128 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008

08001188 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0ed      	b.n	8001376 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff fdba 	bl	8000d20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0201 	orr.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011bc:	f7ff ffb4 	bl	8001128 <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011c2:	e012      	b.n	80011ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c4:	f7ff ffb0 	bl	8001128 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b0a      	cmp	r3, #10
 80011d0:	d90b      	bls.n	80011ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2205      	movs	r2, #5
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e0c5      	b.n	8001376 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0e5      	beq.n	80011c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0202 	bic.w	r2, r2, #2
 8001206:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001208:	f7ff ff8e 	bl	8001128 <HAL_GetTick>
 800120c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800120e:	e012      	b.n	8001236 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001210:	f7ff ff8a 	bl	8001128 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b0a      	cmp	r3, #10
 800121c:	d90b      	bls.n	8001236 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001222:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2205      	movs	r2, #5
 800122e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e09f      	b.n	8001376 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1e5      	bne.n	8001210 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7e1b      	ldrb	r3, [r3, #24]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e007      	b.n	800126e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7e5b      	ldrb	r3, [r3, #25]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e007      	b.n	8001298 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001296:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7e9b      	ldrb	r3, [r3, #26]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0220 	orr.w	r2, r2, #32
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e007      	b.n	80012c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0220 	bic.w	r2, r2, #32
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7edb      	ldrb	r3, [r3, #27]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0210 	bic.w	r2, r2, #16
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e007      	b.n	80012ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0210 	orr.w	r2, r2, #16
 80012ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7f1b      	ldrb	r3, [r3, #28]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d108      	bne.n	8001306 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0208 	orr.w	r2, r2, #8
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	e007      	b.n	8001316 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0208 	bic.w	r2, r2, #8
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7f5b      	ldrb	r3, [r3, #29]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d108      	bne.n	8001330 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0204 	orr.w	r2, r2, #4
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e007      	b.n	8001340 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0204 	bic.w	r2, r2, #4
 800133e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	ea42 0103 	orr.w	r1, r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001396:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001398:	7cfb      	ldrb	r3, [r7, #19]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d003      	beq.n	80013a6 <HAL_CAN_ConfigFilter+0x26>
 800139e:	7cfb      	ldrb	r3, [r7, #19]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	f040 80be 	bne.w	8001522 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80013a6:	4b65      	ldr	r3, [pc, #404]	@ (800153c <HAL_CAN_ConfigFilter+0x1bc>)
 80013a8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013c0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	431a      	orrs	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f003 031f 	and.w	r3, r3, #31
 80013e6:	2201      	movs	r2, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	401a      	ands	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d123      	bne.n	8001450 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	43db      	mvns	r3, r3
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800142a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3248      	adds	r2, #72	@ 0x48
 8001430:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001444:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001446:	6979      	ldr	r1, [r7, #20]
 8001448:	3348      	adds	r3, #72	@ 0x48
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d122      	bne.n	800149e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	431a      	orrs	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001478:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3248      	adds	r2, #72	@ 0x48
 800147e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001492:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001494:	6979      	ldr	r1, [r7, #20]
 8001496:	3348      	adds	r3, #72	@ 0x48
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	401a      	ands	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80014b8:	e007      	b.n	80014ca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	431a      	orrs	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43db      	mvns	r3, r3
 80014dc:	401a      	ands	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80014e4:	e007      	b.n	80014f6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d107      	bne.n	800150e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	431a      	orrs	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001514:	f023 0201 	bic.w	r2, r3, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e006      	b.n	8001530 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
  }
}
 8001530:	4618      	mov	r0, r3
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40006400 	.word	0x40006400

08001540 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b01      	cmp	r3, #1
 8001552:	d12e      	bne.n	80015b2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800156c:	f7ff fddc 	bl	8001128 <HAL_GetTick>
 8001570:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001572:	e012      	b.n	800159a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001574:	f7ff fdd8 	bl	8001128 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b0a      	cmp	r3, #10
 8001580:	d90b      	bls.n	800159a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001586:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2205      	movs	r2, #5
 8001592:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e012      	b.n	80015c0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e5      	bne.n	8001574 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e006      	b.n	80015c0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
  }
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	@ 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015e6:	7ffb      	ldrb	r3, [r7, #31]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d003      	beq.n	80015f4 <HAL_CAN_AddTxMessage+0x2c>
 80015ec:	7ffb      	ldrb	r3, [r7, #31]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	f040 80b8 	bne.w	8001764 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10a      	bne.n	8001614 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80a0 	beq.w	8001754 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	0e1b      	lsrs	r3, r3, #24
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d907      	bls.n	8001634 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e09e      	b.n	8001772 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001634:	2201      	movs	r2, #1
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	409a      	lsls	r2, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10d      	bne.n	8001662 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001650:	68f9      	ldr	r1, [r7, #12]
 8001652:	6809      	ldr	r1, [r1, #0]
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3318      	adds	r3, #24
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	440b      	add	r3, r1
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e00f      	b.n	8001682 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800166c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001672:	68f9      	ldr	r1, [r7, #12]
 8001674:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001676:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3318      	adds	r3, #24
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	440b      	add	r3, r1
 8001680:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6819      	ldr	r1, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3318      	adds	r3, #24
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	440b      	add	r3, r1
 8001692:	3304      	adds	r3, #4
 8001694:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	7d1b      	ldrb	r3, [r3, #20]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d111      	bne.n	80016c2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3318      	adds	r3, #24
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	4413      	add	r3, r2
 80016aa:	3304      	adds	r3, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	6811      	ldr	r1, [r2, #0]
 80016b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3318      	adds	r3, #24
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	440b      	add	r3, r1
 80016be:	3304      	adds	r3, #4
 80016c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3307      	adds	r3, #7
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	061a      	lsls	r2, r3, #24
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3306      	adds	r3, #6
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3305      	adds	r3, #5
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	4313      	orrs	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	3204      	adds	r2, #4
 80016e2:	7812      	ldrb	r2, [r2, #0]
 80016e4:	4610      	mov	r0, r2
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	6811      	ldr	r1, [r2, #0]
 80016ea:	ea43 0200 	orr.w	r2, r3, r0
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	440b      	add	r3, r1
 80016f4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80016f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3303      	adds	r3, #3
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	061a      	lsls	r2, r3, #24
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3302      	adds	r3, #2
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	041b      	lsls	r3, r3, #16
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3301      	adds	r3, #1
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	4313      	orrs	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	4610      	mov	r0, r2
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	6811      	ldr	r1, [r2, #0]
 8001720:	ea43 0200 	orr.w	r2, r3, r0
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	440b      	add	r3, r1
 800172a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800172e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3318      	adds	r3, #24
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	6811      	ldr	r1, [r2, #0]
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3318      	adds	r3, #24
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	440b      	add	r3, r1
 800174e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	e00e      	b.n	8001772 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001758:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e006      	b.n	8001772 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001768:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
  }
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800177e:	b480      	push	{r7}
 8001780:	b085      	sub	sp, #20
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001790:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001792:	7afb      	ldrb	r3, [r7, #11]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d002      	beq.n	800179e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001798:	7afb      	ldrb	r3, [r7, #11]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d11d      	bne.n	80017da <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3301      	adds	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3301      	adds	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d003      	beq.n	800180c <HAL_CAN_GetRxMessage+0x24>
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b02      	cmp	r3, #2
 8001808:	f040 80f3 	bne.w	80019f2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10e      	bne.n	8001830 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d116      	bne.n	800184e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0e7      	b.n	8001a00 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d107      	bne.n	800184e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0d8      	b.n	8001a00 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	331b      	adds	r3, #27
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0204 	and.w	r2, r3, #4
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10c      	bne.n	8001886 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	331b      	adds	r3, #27
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	4413      	add	r3, r2
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	0d5b      	lsrs	r3, r3, #21
 800187c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e00b      	b.n	800189e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	331b      	adds	r3, #27
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	4413      	add	r3, r2
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	331b      	adds	r3, #27
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0202 	and.w	r2, r3, #2
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	331b      	adds	r3, #27
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	3304      	adds	r3, #4
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 020f 	and.w	r2, r3, #15
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	331b      	adds	r3, #27
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	4413      	add	r3, r2
 80018d8:	3304      	adds	r3, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	331b      	adds	r3, #27
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	4413      	add	r3, r2
 80018f0:	3304      	adds	r3, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	4413      	add	r3, r2
 8001906:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	4413      	add	r3, r2
 800191c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	0a1a      	lsrs	r2, r3, #8
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4413      	add	r3, r2
 8001936:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	0c1a      	lsrs	r2, r3, #16
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	3302      	adds	r3, #2
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4413      	add	r3, r2
 8001950:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0e1a      	lsrs	r2, r3, #24
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	3303      	adds	r3, #3
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4413      	add	r3, r2
 800196a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	3304      	adds	r3, #4
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	4413      	add	r3, r2
 8001982:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0a1a      	lsrs	r2, r3, #8
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	3305      	adds	r3, #5
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	4413      	add	r3, r2
 800199c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	0c1a      	lsrs	r2, r3, #16
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	3306      	adds	r3, #6
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0e1a      	lsrs	r2, r3, #24
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	3307      	adds	r3, #7
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d108      	bne.n	80019de <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0220 	orr.w	r2, r2, #32
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	e007      	b.n	80019ee <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 0220 	orr.w	r2, r2, #32
 80019ec:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e006      	b.n	8001a00 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
  }
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a1c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d002      	beq.n	8001a2a <HAL_CAN_ActivateNotification+0x1e>
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d109      	bne.n	8001a3e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6959      	ldr	r1, [r3, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e006      	b.n	8001a4c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
  }
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	@ 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d07c      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d023      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2201      	movs	r2, #1
 8001aae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f983 	bl	8001dc6 <HAL_CAN_TxMailbox0CompleteCallback>
 8001ac0:	e016      	b.n	8001af0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d004      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad4:	e00c      	b.n	8001af0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae8:	e002      	b.n	8001af0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f989 	bl	8001e02 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d024      	beq.n	8001b44 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f963 	bl	8001dda <HAL_CAN_TxMailbox1CompleteCallback>
 8001b14:	e016      	b.n	8001b44 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b28:	e00c      	b.n	8001b44 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b3c:	e002      	b.n	8001b44 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f969 	bl	8001e16 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d024      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f943 	bl	8001dee <HAL_CAN_TxMailbox2CompleteCallback>
 8001b68:	e016      	b.n	8001b98 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7c:	e00c      	b.n	8001b98 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b90:	e002      	b.n	8001b98 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f949 	bl	8001e2a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00c      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f930 	bl	8001e3e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d009      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe fcfe 	bl	80005f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00c      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2208      	movs	r2, #8
 8001c3a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f912 	bl	8001e66 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d009      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8f9 	bl	8001e52 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2210      	movs	r2, #16
 8001c7a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f8fc 	bl	8001e7a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00b      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2208      	movs	r2, #8
 8001c9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f8f5 	bl	8001e8e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d07b      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d072      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d043      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d03e      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d26:	2b60      	cmp	r3, #96	@ 0x60
 8001d28:	d02b      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x32a>
 8001d2a:	2b60      	cmp	r3, #96	@ 0x60
 8001d2c:	d82e      	bhi.n	8001d8c <HAL_CAN_IRQHandler+0x334>
 8001d2e:	2b50      	cmp	r3, #80	@ 0x50
 8001d30:	d022      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x320>
 8001d32:	2b50      	cmp	r3, #80	@ 0x50
 8001d34:	d82a      	bhi.n	8001d8c <HAL_CAN_IRQHandler+0x334>
 8001d36:	2b40      	cmp	r3, #64	@ 0x40
 8001d38:	d019      	beq.n	8001d6e <HAL_CAN_IRQHandler+0x316>
 8001d3a:	2b40      	cmp	r3, #64	@ 0x40
 8001d3c:	d826      	bhi.n	8001d8c <HAL_CAN_IRQHandler+0x334>
 8001d3e:	2b30      	cmp	r3, #48	@ 0x30
 8001d40:	d010      	beq.n	8001d64 <HAL_CAN_IRQHandler+0x30c>
 8001d42:	2b30      	cmp	r3, #48	@ 0x30
 8001d44:	d822      	bhi.n	8001d8c <HAL_CAN_IRQHandler+0x334>
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d002      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x2f8>
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d005      	beq.n	8001d5a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d4e:	e01d      	b.n	8001d8c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	f043 0308 	orr.w	r3, r3, #8
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d58:	e019      	b.n	8001d8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	f043 0310 	orr.w	r3, r3, #16
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d62:	e014      	b.n	8001d8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	f043 0320 	orr.w	r3, r3, #32
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d6c:	e00f      	b.n	8001d8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d76:	e00a      	b.n	8001d8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d80:	e005      	b.n	8001d8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d8a:	e000      	b.n	8001d8e <HAL_CAN_IRQHandler+0x336>
            break;
 8001d8c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699a      	ldr	r2, [r3, #24]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d9c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2204      	movs	r2, #4
 8001da4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f872 	bl	8001ea2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	@ 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eea:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	60d3      	str	r3, [r2, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f04:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <__NVIC_GetPriorityGrouping+0x18>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	f003 0307 	and.w	r3, r3, #7
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db0b      	blt.n	8001f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	f003 021f 	and.w	r2, r3, #31
 8001f34:	4907      	ldr	r1, [pc, #28]	@ (8001f54 <__NVIC_EnableIRQ+0x38>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000e100 	.word	0xe000e100

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	@ (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	@ (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	@ 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	@ 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002024:	d301      	bcc.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <SysTick_Config+0x40>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	210f      	movs	r1, #15
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f7ff ff8e 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <SysTick_Config+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002042:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <SysTick_Config+0x40>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff29 	bl	8001eb8 <__NVIC_SetPriorityGrouping>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002080:	f7ff ff3e 	bl	8001f00 <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff8e 	bl	8001fac <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5d 	bl	8001f58 <__NVIC_SetPriority>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff31 	bl	8001f1c <__NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffa2 	bl	8002014 <SysTick_Config>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	@ 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	e165      	b.n	80023c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020f8:	2201      	movs	r2, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	429a      	cmp	r2, r3
 8002112:	f040 8154 	bne.w	80023be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d005      	beq.n	800212e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212a:	2b02      	cmp	r3, #2
 800212c:	d130      	bne.n	8002190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	2203      	movs	r2, #3
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 0201 	and.w	r2, r3, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b03      	cmp	r3, #3
 800219a:	d017      	beq.n	80021cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d123      	bne.n	8002220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	08da      	lsrs	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3208      	adds	r2, #8
 80021e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	220f      	movs	r2, #15
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	08da      	lsrs	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3208      	adds	r2, #8
 800221a:	69b9      	ldr	r1, [r7, #24]
 800221c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0203 	and.w	r2, r3, #3
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80ae 	beq.w	80023be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b5d      	ldr	r3, [pc, #372]	@ (80023dc <HAL_GPIO_Init+0x300>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	4a5c      	ldr	r2, [pc, #368]	@ (80023dc <HAL_GPIO_Init+0x300>)
 800226c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002270:	6453      	str	r3, [r2, #68]	@ 0x44
 8002272:	4b5a      	ldr	r3, [pc, #360]	@ (80023dc <HAL_GPIO_Init+0x300>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800227e:	4a58      	ldr	r2, [pc, #352]	@ (80023e0 <HAL_GPIO_Init+0x304>)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	3302      	adds	r3, #2
 8002286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	220f      	movs	r2, #15
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4f      	ldr	r2, [pc, #316]	@ (80023e4 <HAL_GPIO_Init+0x308>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d025      	beq.n	80022f6 <HAL_GPIO_Init+0x21a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4e      	ldr	r2, [pc, #312]	@ (80023e8 <HAL_GPIO_Init+0x30c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01f      	beq.n	80022f2 <HAL_GPIO_Init+0x216>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4d      	ldr	r2, [pc, #308]	@ (80023ec <HAL_GPIO_Init+0x310>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d019      	beq.n	80022ee <HAL_GPIO_Init+0x212>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4c      	ldr	r2, [pc, #304]	@ (80023f0 <HAL_GPIO_Init+0x314>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0x20e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4b      	ldr	r2, [pc, #300]	@ (80023f4 <HAL_GPIO_Init+0x318>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00d      	beq.n	80022e6 <HAL_GPIO_Init+0x20a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4a      	ldr	r2, [pc, #296]	@ (80023f8 <HAL_GPIO_Init+0x31c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x206>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a49      	ldr	r2, [pc, #292]	@ (80023fc <HAL_GPIO_Init+0x320>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_GPIO_Init+0x202>
 80022da:	2306      	movs	r3, #6
 80022dc:	e00c      	b.n	80022f8 <HAL_GPIO_Init+0x21c>
 80022de:	2307      	movs	r3, #7
 80022e0:	e00a      	b.n	80022f8 <HAL_GPIO_Init+0x21c>
 80022e2:	2305      	movs	r3, #5
 80022e4:	e008      	b.n	80022f8 <HAL_GPIO_Init+0x21c>
 80022e6:	2304      	movs	r3, #4
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x21c>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e004      	b.n	80022f8 <HAL_GPIO_Init+0x21c>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_Init+0x21c>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_Init+0x21c>
 80022f6:	2300      	movs	r3, #0
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	f002 0203 	and.w	r2, r2, #3
 80022fe:	0092      	lsls	r2, r2, #2
 8002300:	4093      	lsls	r3, r2
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002308:	4935      	ldr	r1, [pc, #212]	@ (80023e0 <HAL_GPIO_Init+0x304>)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002316:	4b3a      	ldr	r3, [pc, #232]	@ (8002400 <HAL_GPIO_Init+0x324>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233a:	4a31      	ldr	r2, [pc, #196]	@ (8002400 <HAL_GPIO_Init+0x324>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002340:	4b2f      	ldr	r3, [pc, #188]	@ (8002400 <HAL_GPIO_Init+0x324>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002364:	4a26      	ldr	r2, [pc, #152]	@ (8002400 <HAL_GPIO_Init+0x324>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800236a:	4b25      	ldr	r3, [pc, #148]	@ (8002400 <HAL_GPIO_Init+0x324>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800238e:	4a1c      	ldr	r2, [pc, #112]	@ (8002400 <HAL_GPIO_Init+0x324>)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002394:	4b1a      	ldr	r3, [pc, #104]	@ (8002400 <HAL_GPIO_Init+0x324>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b8:	4a11      	ldr	r2, [pc, #68]	@ (8002400 <HAL_GPIO_Init+0x324>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	f67f ae96 	bls.w	80020f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3724      	adds	r7, #36	@ 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40013800 	.word	0x40013800
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40020400 	.word	0x40020400
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40020c00 	.word	0x40020c00
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40021400 	.word	0x40021400
 80023fc:	40021800 	.word	0x40021800
 8002400:	40013c00 	.word	0x40013c00

08002404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
 8002410:	4613      	mov	r3, r2
 8002412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002414:	787b      	ldrb	r3, [r7, #1]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002420:	e003      	b.n	800242a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	041a      	lsls	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	619a      	str	r2, [r3, #24]
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002448:	887a      	ldrh	r2, [r7, #2]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4013      	ands	r3, r2
 800244e:	041a      	lsls	r2, r3, #16
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43d9      	mvns	r1, r3
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	400b      	ands	r3, r1
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e12b      	b.n	80026d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe fc9c 	bl	8000dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	@ 0x24
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d0:	f000 fa02 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 80024d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a81      	ldr	r2, [pc, #516]	@ (80026e0 <HAL_I2C_Init+0x274>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d807      	bhi.n	80024f0 <HAL_I2C_Init+0x84>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a80      	ldr	r2, [pc, #512]	@ (80026e4 <HAL_I2C_Init+0x278>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	bf94      	ite	ls
 80024e8:	2301      	movls	r3, #1
 80024ea:	2300      	movhi	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e006      	b.n	80024fe <HAL_I2C_Init+0x92>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4a7d      	ldr	r2, [pc, #500]	@ (80026e8 <HAL_I2C_Init+0x27c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	bf94      	ite	ls
 80024f8:	2301      	movls	r3, #1
 80024fa:	2300      	movhi	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0e7      	b.n	80026d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4a78      	ldr	r2, [pc, #480]	@ (80026ec <HAL_I2C_Init+0x280>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0c9b      	lsrs	r3, r3, #18
 8002510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	430a      	orrs	r2, r1
 8002524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a6a      	ldr	r2, [pc, #424]	@ (80026e0 <HAL_I2C_Init+0x274>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d802      	bhi.n	8002540 <HAL_I2C_Init+0xd4>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3301      	adds	r3, #1
 800253e:	e009      	b.n	8002554 <HAL_I2C_Init+0xe8>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	4a69      	ldr	r2, [pc, #420]	@ (80026f0 <HAL_I2C_Init+0x284>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	3301      	adds	r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	430b      	orrs	r3, r1
 800255a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002566:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	495c      	ldr	r1, [pc, #368]	@ (80026e0 <HAL_I2C_Init+0x274>)
 8002570:	428b      	cmp	r3, r1
 8002572:	d819      	bhi.n	80025a8 <HAL_I2C_Init+0x13c>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1e59      	subs	r1, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002582:	1c59      	adds	r1, r3, #1
 8002584:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002588:	400b      	ands	r3, r1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_I2C_Init+0x138>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e59      	subs	r1, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fbb1 f3f3 	udiv	r3, r1, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a2:	e051      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 80025a4:	2304      	movs	r3, #4
 80025a6:	e04f      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d111      	bne.n	80025d4 <HAL_I2C_Init+0x168>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e58      	subs	r0, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	e012      	b.n	80025fa <HAL_I2C_Init+0x18e>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1e58      	subs	r0, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	0099      	lsls	r1, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Init+0x196>
 80025fe:	2301      	movs	r3, #1
 8002600:	e022      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10e      	bne.n	8002628 <HAL_I2C_Init+0x1bc>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1e58      	subs	r0, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	440b      	add	r3, r1
 8002618:	fbb0 f3f3 	udiv	r3, r0, r3
 800261c:	3301      	adds	r3, #1
 800261e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002626:	e00f      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e58      	subs	r0, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	0099      	lsls	r1, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	fbb0 f3f3 	udiv	r3, r0, r3
 800263e:	3301      	adds	r3, #1
 8002640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	6809      	ldr	r1, [r1, #0]
 800264c:	4313      	orrs	r3, r2
 800264e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002676:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6911      	ldr	r1, [r2, #16]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68d2      	ldr	r2, [r2, #12]
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	430b      	orrs	r3, r1
 800268a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	000186a0 	.word	0x000186a0
 80026e4:	001e847f 	.word	0x001e847f
 80026e8:	003d08ff 	.word	0x003d08ff
 80026ec:	431bde83 	.word	0x431bde83
 80026f0:	10624dd3 	.word	0x10624dd3

080026f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0cc      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002708:	4b68      	ldr	r3, [pc, #416]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d90c      	bls.n	8002730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b65      	ldr	r3, [pc, #404]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b63      	ldr	r3, [pc, #396]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0b8      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002748:	4b59      	ldr	r3, [pc, #356]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a58      	ldr	r2, [pc, #352]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002760:	4b53      	ldr	r3, [pc, #332]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a52      	ldr	r2, [pc, #328]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800276a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b50      	ldr	r3, [pc, #320]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	494d      	ldr	r1, [pc, #308]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d044      	beq.n	8002814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	4b47      	ldr	r3, [pc, #284]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d119      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e07f      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d003      	beq.n	80027b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b2:	4b3f      	ldr	r3, [pc, #252]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e06f      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c2:	4b3b      	ldr	r3, [pc, #236]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e067      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d2:	4b37      	ldr	r3, [pc, #220]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f023 0203 	bic.w	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4934      	ldr	r1, [pc, #208]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e4:	f7fe fca0 	bl	8001128 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7fe fc9c 	bl	8001128 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e04f      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	4b2b      	ldr	r3, [pc, #172]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 020c 	and.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	429a      	cmp	r2, r3
 8002812:	d1eb      	bne.n	80027ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002814:	4b25      	ldr	r3, [pc, #148]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d20c      	bcs.n	800283c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b22      	ldr	r3, [pc, #136]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b20      	ldr	r3, [pc, #128]	@ (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e032      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002848:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4916      	ldr	r1, [pc, #88]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002866:	4b12      	ldr	r3, [pc, #72]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	490e      	ldr	r1, [pc, #56]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800287a:	f000 f855 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 800287e:	4602      	mov	r2, r0
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	490a      	ldr	r1, [pc, #40]	@ (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	5ccb      	ldrb	r3, [r1, r3]
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	4a09      	ldr	r2, [pc, #36]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002896:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <HAL_RCC_ClockConfig+0x1c8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fc00 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023c00 	.word	0x40023c00
 80028b0:	40023800 	.word	0x40023800
 80028b4:	08004410 	.word	0x08004410
 80028b8:	20000000 	.word	0x20000000
 80028bc:	20000004 	.word	0x20000004

080028c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c4:	4b03      	ldr	r3, [pc, #12]	@ (80028d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000000 	.word	0x20000000

080028d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028dc:	f7ff fff0 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0a9b      	lsrs	r3, r3, #10
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4903      	ldr	r1, [pc, #12]	@ (80028fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	08004420 	.word	0x08004420

08002900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002904:	f7ff ffdc 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0b5b      	lsrs	r3, r3, #13
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4903      	ldr	r1, [pc, #12]	@ (8002924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	08004420 	.word	0x08004420

08002928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800292c:	b0ae      	sub	sp, #184	@ 0xb8
 800292e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294e:	4bcb      	ldr	r3, [pc, #812]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b0c      	cmp	r3, #12
 8002958:	f200 8206 	bhi.w	8002d68 <HAL_RCC_GetSysClockFreq+0x440>
 800295c:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <HAL_RCC_GetSysClockFreq+0x3c>)
 800295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002962:	bf00      	nop
 8002964:	08002999 	.word	0x08002999
 8002968:	08002d69 	.word	0x08002d69
 800296c:	08002d69 	.word	0x08002d69
 8002970:	08002d69 	.word	0x08002d69
 8002974:	080029a1 	.word	0x080029a1
 8002978:	08002d69 	.word	0x08002d69
 800297c:	08002d69 	.word	0x08002d69
 8002980:	08002d69 	.word	0x08002d69
 8002984:	080029a9 	.word	0x080029a9
 8002988:	08002d69 	.word	0x08002d69
 800298c:	08002d69 	.word	0x08002d69
 8002990:	08002d69 	.word	0x08002d69
 8002994:	08002b99 	.word	0x08002b99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002998:	4bb9      	ldr	r3, [pc, #740]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x358>)
 800299a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800299e:	e1e7      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029a0:	4bb8      	ldr	r3, [pc, #736]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x35c>)
 80029a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029a6:	e1e3      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a8:	4bb4      	ldr	r3, [pc, #720]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029b4:	4bb1      	ldr	r3, [pc, #708]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d071      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c0:	4bae      	ldr	r3, [pc, #696]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	099b      	lsrs	r3, r3, #6
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80029d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029e6:	4622      	mov	r2, r4
 80029e8:	462b      	mov	r3, r5
 80029ea:	f04f 0000 	mov.w	r0, #0
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	0159      	lsls	r1, r3, #5
 80029f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f8:	0150      	lsls	r0, r2, #5
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4621      	mov	r1, r4
 8002a00:	1a51      	subs	r1, r2, r1
 8002a02:	6439      	str	r1, [r7, #64]	@ 0x40
 8002a04:	4629      	mov	r1, r5
 8002a06:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002a18:	4649      	mov	r1, r9
 8002a1a:	018b      	lsls	r3, r1, #6
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a22:	4641      	mov	r1, r8
 8002a24:	018a      	lsls	r2, r1, #6
 8002a26:	4641      	mov	r1, r8
 8002a28:	1a51      	subs	r1, r2, r1
 8002a2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002a40:	4649      	mov	r1, r9
 8002a42:	00cb      	lsls	r3, r1, #3
 8002a44:	4641      	mov	r1, r8
 8002a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a4a:	4641      	mov	r1, r8
 8002a4c:	00ca      	lsls	r2, r1, #3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	4622      	mov	r2, r4
 8002a56:	189b      	adds	r3, r3, r2
 8002a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a5a:	462b      	mov	r3, r5
 8002a5c:	460a      	mov	r2, r1
 8002a5e:	eb42 0303 	adc.w	r3, r2, r3
 8002a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a70:	4629      	mov	r1, r5
 8002a72:	024b      	lsls	r3, r1, #9
 8002a74:	4621      	mov	r1, r4
 8002a76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	024a      	lsls	r2, r1, #9
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a94:	f7fd fc14 	bl	80002c0 <__aeabi_uldivmod>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aa2:	e067      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa4:	4b75      	ldr	r3, [pc, #468]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ab0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002abe:	2300      	movs	r3, #0
 8002ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ac2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	462b      	mov	r3, r5
 8002aca:	f04f 0000 	mov.w	r0, #0
 8002ace:	f04f 0100 	mov.w	r1, #0
 8002ad2:	0159      	lsls	r1, r3, #5
 8002ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ad8:	0150      	lsls	r0, r2, #5
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4621      	mov	r1, r4
 8002ae0:	1a51      	subs	r1, r2, r1
 8002ae2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002af8:	4649      	mov	r1, r9
 8002afa:	018b      	lsls	r3, r1, #6
 8002afc:	4641      	mov	r1, r8
 8002afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b02:	4641      	mov	r1, r8
 8002b04:	018a      	lsls	r2, r1, #6
 8002b06:	4641      	mov	r1, r8
 8002b08:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b26:	4692      	mov	sl, r2
 8002b28:	469b      	mov	fp, r3
 8002b2a:	4623      	mov	r3, r4
 8002b2c:	eb1a 0303 	adds.w	r3, sl, r3
 8002b30:	623b      	str	r3, [r7, #32]
 8002b32:	462b      	mov	r3, r5
 8002b34:	eb4b 0303 	adc.w	r3, fp, r3
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b60:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b66:	f7fd fbab 	bl	80002c0 <__aeabi_uldivmod>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4613      	mov	r3, r2
 8002b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b74:	4b41      	ldr	r3, [pc, #260]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b96:	e0eb      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b98:	4b38      	ldr	r3, [pc, #224]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba4:	4b35      	ldr	r3, [pc, #212]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d06b      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb0:	4b32      	ldr	r3, [pc, #200]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	099b      	lsrs	r3, r3, #6
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bc8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002bcc:	4622      	mov	r2, r4
 8002bce:	462b      	mov	r3, r5
 8002bd0:	f04f 0000 	mov.w	r0, #0
 8002bd4:	f04f 0100 	mov.w	r1, #0
 8002bd8:	0159      	lsls	r1, r3, #5
 8002bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bde:	0150      	lsls	r0, r2, #5
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4621      	mov	r1, r4
 8002be6:	1a51      	subs	r1, r2, r1
 8002be8:	61b9      	str	r1, [r7, #24]
 8002bea:	4629      	mov	r1, r5
 8002bec:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002bfe:	4659      	mov	r1, fp
 8002c00:	018b      	lsls	r3, r1, #6
 8002c02:	4651      	mov	r1, sl
 8002c04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c08:	4651      	mov	r1, sl
 8002c0a:	018a      	lsls	r2, r1, #6
 8002c0c:	4651      	mov	r1, sl
 8002c0e:	ebb2 0801 	subs.w	r8, r2, r1
 8002c12:	4659      	mov	r1, fp
 8002c14:	eb63 0901 	sbc.w	r9, r3, r1
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c2c:	4690      	mov	r8, r2
 8002c2e:	4699      	mov	r9, r3
 8002c30:	4623      	mov	r3, r4
 8002c32:	eb18 0303 	adds.w	r3, r8, r3
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	462b      	mov	r3, r5
 8002c3a:	eb49 0303 	adc.w	r3, r9, r3
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	024b      	lsls	r3, r1, #9
 8002c50:	4621      	mov	r1, r4
 8002c52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c56:	4621      	mov	r1, r4
 8002c58:	024a      	lsls	r2, r1, #9
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c62:	2200      	movs	r2, #0
 8002c64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c66:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c6c:	f7fd fb28 	bl	80002c0 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c7a:	e065      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x420>
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	00f42400 	.word	0x00f42400
 8002c84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c88:	4b3d      	ldr	r3, [pc, #244]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	2200      	movs	r2, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	4611      	mov	r1, r2
 8002c94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c98:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002ca2:	4642      	mov	r2, r8
 8002ca4:	464b      	mov	r3, r9
 8002ca6:	f04f 0000 	mov.w	r0, #0
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	0159      	lsls	r1, r3, #5
 8002cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb4:	0150      	lsls	r0, r2, #5
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4641      	mov	r1, r8
 8002cbc:	1a51      	subs	r1, r2, r1
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002cd4:	4659      	mov	r1, fp
 8002cd6:	018b      	lsls	r3, r1, #6
 8002cd8:	4651      	mov	r1, sl
 8002cda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cde:	4651      	mov	r1, sl
 8002ce0:	018a      	lsls	r2, r1, #6
 8002ce2:	4651      	mov	r1, sl
 8002ce4:	1a54      	subs	r4, r2, r1
 8002ce6:	4659      	mov	r1, fp
 8002ce8:	eb63 0501 	sbc.w	r5, r3, r1
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	00eb      	lsls	r3, r5, #3
 8002cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cfa:	00e2      	lsls	r2, r4, #3
 8002cfc:	4614      	mov	r4, r2
 8002cfe:	461d      	mov	r5, r3
 8002d00:	4643      	mov	r3, r8
 8002d02:	18e3      	adds	r3, r4, r3
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	464b      	mov	r3, r9
 8002d08:	eb45 0303 	adc.w	r3, r5, r3
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	028b      	lsls	r3, r1, #10
 8002d1e:	4621      	mov	r1, r4
 8002d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d24:	4621      	mov	r1, r4
 8002d26:	028a      	lsls	r2, r1, #10
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d30:	2200      	movs	r2, #0
 8002d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d34:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002d36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d3a:	f7fd fac1 	bl	80002c0 <__aeabi_uldivmod>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4613      	mov	r3, r2
 8002d44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d48:	4b0d      	ldr	r3, [pc, #52]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	0f1b      	lsrs	r3, r3, #28
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d66:	e003      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d68:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	37b8      	adds	r7, #184	@ 0xb8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	00f42400 	.word	0x00f42400

08002d88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e28d      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8083 	beq.w	8002eae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002da8:	4b94      	ldr	r3, [pc, #592]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d019      	beq.n	8002de8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002db4:	4b91      	ldr	r3, [pc, #580]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dc0:	4b8e      	ldr	r3, [pc, #568]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dcc:	d00c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dce:	4b8b      	ldr	r3, [pc, #556]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d112      	bne.n	8002e00 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dda:	4b88      	ldr	r3, [pc, #544]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002de6:	d10b      	bne.n	8002e00 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	4b84      	ldr	r3, [pc, #528]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d05b      	beq.n	8002eac <HAL_RCC_OscConfig+0x124>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d157      	bne.n	8002eac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e25a      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e08:	d106      	bne.n	8002e18 <HAL_RCC_OscConfig+0x90>
 8002e0a:	4b7c      	ldr	r3, [pc, #496]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a7b      	ldr	r2, [pc, #492]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e01d      	b.n	8002e54 <HAL_RCC_OscConfig+0xcc>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0xb4>
 8002e22:	4b76      	ldr	r3, [pc, #472]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a75      	ldr	r2, [pc, #468]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	4b73      	ldr	r3, [pc, #460]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a72      	ldr	r2, [pc, #456]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCC_OscConfig+0xcc>
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a6e      	ldr	r2, [pc, #440]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b6c      	ldr	r3, [pc, #432]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d013      	beq.n	8002e84 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe f964 	bl	8001128 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe f960 	bl	8001128 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	@ 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e21f      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b61      	ldr	r3, [pc, #388]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0xdc>
 8002e82:	e014      	b.n	8002eae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe f950 	bl	8001128 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fe f94c 	bl	8001128 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	@ 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e20b      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	4b57      	ldr	r3, [pc, #348]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x104>
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d06f      	beq.n	8002f9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002eba:	4b50      	ldr	r3, [pc, #320]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d017      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ec6:	4b4d      	ldr	r3, [pc, #308]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d105      	bne.n	8002ede <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ede:	4b47      	ldr	r3, [pc, #284]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d11c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eea:	4b44      	ldr	r3, [pc, #272]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d116      	bne.n	8002f24 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef6:	4b41      	ldr	r3, [pc, #260]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_RCC_OscConfig+0x186>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e1d3      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4937      	ldr	r1, [pc, #220]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	e03a      	b.n	8002f9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d020      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2c:	4b34      	ldr	r3, [pc, #208]	@ (8003000 <HAL_RCC_OscConfig+0x278>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe f8f9 	bl	8001128 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f3a:	f7fe f8f5 	bl	8001128 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e1b4      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f58:	4b28      	ldr	r3, [pc, #160]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4925      	ldr	r1, [pc, #148]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]
 8002f6c:	e015      	b.n	8002f9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6e:	4b24      	ldr	r3, [pc, #144]	@ (8003000 <HAL_RCC_OscConfig+0x278>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe f8d8 	bl	8001128 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f7c:	f7fe f8d4 	bl	8001128 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e193      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d036      	beq.n	8003014 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d016      	beq.n	8002fdc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fae:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fe f8b8 	bl	8001128 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fbc:	f7fe f8b4 	bl	8001128 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e173      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fce:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x234>
 8002fda:	e01b      	b.n	8003014 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fdc:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe2:	f7fe f8a1 	bl	8001128 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe8:	e00e      	b.n	8003008 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fea:	f7fe f89d 	bl	8001128 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d907      	bls.n	8003008 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e15c      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
 8002ffc:	40023800 	.word	0x40023800
 8003000:	42470000 	.word	0x42470000
 8003004:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003008:	4b8a      	ldr	r3, [pc, #552]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800300a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ea      	bne.n	8002fea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8097 	beq.w	8003150 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003022:	2300      	movs	r3, #0
 8003024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003026:	4b83      	ldr	r3, [pc, #524]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10f      	bne.n	8003052 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	4b7f      	ldr	r3, [pc, #508]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	4a7e      	ldr	r2, [pc, #504]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003040:	6413      	str	r3, [r2, #64]	@ 0x40
 8003042:	4b7c      	ldr	r3, [pc, #496]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003052:	4b79      	ldr	r3, [pc, #484]	@ (8003238 <HAL_RCC_OscConfig+0x4b0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d118      	bne.n	8003090 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800305e:	4b76      	ldr	r3, [pc, #472]	@ (8003238 <HAL_RCC_OscConfig+0x4b0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a75      	ldr	r2, [pc, #468]	@ (8003238 <HAL_RCC_OscConfig+0x4b0>)
 8003064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306a:	f7fe f85d 	bl	8001128 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003072:	f7fe f859 	bl	8001128 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e118      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	4b6c      	ldr	r3, [pc, #432]	@ (8003238 <HAL_RCC_OscConfig+0x4b0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x31e>
 8003098:	4b66      	ldr	r3, [pc, #408]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309c:	4a65      	ldr	r2, [pc, #404]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a4:	e01c      	b.n	80030e0 <HAL_RCC_OscConfig+0x358>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x340>
 80030ae:	4b61      	ldr	r3, [pc, #388]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b2:	4a60      	ldr	r2, [pc, #384]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ba:	4b5e      	ldr	r3, [pc, #376]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030be:	4a5d      	ldr	r2, [pc, #372]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0x358>
 80030c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030cc:	4a59      	ldr	r2, [pc, #356]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d4:	4b57      	ldr	r3, [pc, #348]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d8:	4a56      	ldr	r2, [pc, #344]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80030da:	f023 0304 	bic.w	r3, r3, #4
 80030de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d015      	beq.n	8003114 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7fe f81e 	bl	8001128 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fe f81a 	bl	8001128 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e0d7      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003106:	4b4b      	ldr	r3, [pc, #300]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0ee      	beq.n	80030f0 <HAL_RCC_OscConfig+0x368>
 8003112:	e014      	b.n	800313e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7fe f808 	bl	8001128 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311a:	e00a      	b.n	8003132 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fe f804 	bl	8001128 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e0c1      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003132:	4b40      	ldr	r3, [pc, #256]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1ee      	bne.n	800311c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313e:	7dfb      	ldrb	r3, [r7, #23]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d105      	bne.n	8003150 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003144:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	4a3a      	ldr	r2, [pc, #232]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800314a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800314e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80ad 	beq.w	80032b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800315a:	4b36      	ldr	r3, [pc, #216]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b08      	cmp	r3, #8
 8003164:	d060      	beq.n	8003228 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d145      	bne.n	80031fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b33      	ldr	r3, [pc, #204]	@ (800323c <HAL_RCC_OscConfig+0x4b4>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fd ffd8 	bl	8001128 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7fd ffd4 	bl	8001128 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e093      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	4b29      	ldr	r3, [pc, #164]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	019b      	lsls	r3, r3, #6
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	3b01      	subs	r3, #1
 80031b4:	041b      	lsls	r3, r3, #16
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	071b      	lsls	r3, r3, #28
 80031c6:	491b      	ldr	r1, [pc, #108]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031cc:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_RCC_OscConfig+0x4b4>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fd ffa9 	bl	8001128 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031da:	f7fd ffa5 	bl	8001128 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e064      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ec:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x452>
 80031f8:	e05c      	b.n	80032b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b10      	ldr	r3, [pc, #64]	@ (800323c <HAL_RCC_OscConfig+0x4b4>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fd ff92 	bl	8001128 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003208:	f7fd ff8e 	bl	8001128 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e04d      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <HAL_RCC_OscConfig+0x4ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x480>
 8003226:	e045      	b.n	80032b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d107      	bne.n	8003240 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e040      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
 8003234:	40023800 	.word	0x40023800
 8003238:	40007000 	.word	0x40007000
 800323c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003240:	4b1f      	ldr	r3, [pc, #124]	@ (80032c0 <HAL_RCC_OscConfig+0x538>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d030      	beq.n	80032b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d129      	bne.n	80032b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d122      	bne.n	80032b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003270:	4013      	ands	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003278:	4293      	cmp	r3, r2
 800327a:	d119      	bne.n	80032b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d10f      	bne.n	80032b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800

080032c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e03f      	b.n	8003356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fd fdb8 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2224      	movs	r2, #36	@ 0x24
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f929 	bl	8003560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800331c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800332c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800333c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b08a      	sub	sp, #40	@ 0x28
 8003362:	af02      	add	r7, sp, #8
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b20      	cmp	r3, #32
 800337c:	d17c      	bne.n	8003478 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_UART_Transmit+0x2c>
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e075      	b.n	800347a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_UART_Transmit+0x3e>
 8003398:	2302      	movs	r3, #2
 800339a:	e06e      	b.n	800347a <HAL_UART_Transmit+0x11c>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2221      	movs	r2, #33	@ 0x21
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033b2:	f7fd feb9 	bl	8001128 <HAL_GetTick>
 80033b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	88fa      	ldrh	r2, [r7, #6]
 80033bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	88fa      	ldrh	r2, [r7, #6]
 80033c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033cc:	d108      	bne.n	80033e0 <HAL_UART_Transmit+0x82>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	e003      	b.n	80033e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80033f0:	e02a      	b.n	8003448 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2200      	movs	r2, #0
 80033fa:	2180      	movs	r1, #128	@ 0x80
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f840 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e036      	b.n	800347a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003420:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	3302      	adds	r3, #2
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	e007      	b.n	800343a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	781a      	ldrb	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	3301      	adds	r3, #1
 8003438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1cf      	bne.n	80033f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2200      	movs	r2, #0
 800345a:	2140      	movs	r1, #64	@ 0x40
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f810 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e006      	b.n	800347a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b090      	sub	sp, #64	@ 0x40
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	4613      	mov	r3, r2
 8003490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003492:	e050      	b.n	8003536 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349a:	d04c      	beq.n	8003536 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800349c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80034a2:	f7fd fe41 	bl	8001128 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d241      	bcs.n	8003536 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	330c      	adds	r3, #12
 80034b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80034c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034d2:	637a      	str	r2, [r7, #52]	@ 0x34
 80034d4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80034e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e5      	bne.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3314      	adds	r3, #20
 80034ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	613b      	str	r3, [r7, #16]
   return(result);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3314      	adds	r3, #20
 8003504:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003506:	623a      	str	r2, [r7, #32]
 8003508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	69f9      	ldr	r1, [r7, #28]
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	61bb      	str	r3, [r7, #24]
   return(result);
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e5      	bne.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e00f      	b.n	8003556 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4013      	ands	r3, r2
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	bf0c      	ite	eq
 8003546:	2301      	moveq	r3, #1
 8003548:	2300      	movne	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	429a      	cmp	r2, r3
 8003552:	d09f      	beq.n	8003494 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3740      	adds	r7, #64	@ 0x40
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003564:	b0c0      	sub	sp, #256	@ 0x100
 8003566:	af00      	add	r7, sp, #0
 8003568:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357c:	68d9      	ldr	r1, [r3, #12]
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	ea40 0301 	orr.w	r3, r0, r1
 8003588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	431a      	orrs	r2, r3
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	431a      	orrs	r2, r3
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80035b8:	f021 010c 	bic.w	r1, r1, #12
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80035c6:	430b      	orrs	r3, r1
 80035c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80035d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035da:	6999      	ldr	r1, [r3, #24]
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	ea40 0301 	orr.w	r3, r0, r1
 80035e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b8f      	ldr	r3, [pc, #572]	@ (800382c <UART_SetConfig+0x2cc>)
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d005      	beq.n	8003600 <UART_SetConfig+0xa0>
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003830 <UART_SetConfig+0x2d0>)
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d104      	bne.n	800360a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003600:	f7ff f97e 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8003604:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003608:	e003      	b.n	8003612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800360a:	f7ff f965 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 800360e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800361c:	f040 810c 	bne.w	8003838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003624:	2200      	movs	r2, #0
 8003626:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800362a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800362e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003632:	4622      	mov	r2, r4
 8003634:	462b      	mov	r3, r5
 8003636:	1891      	adds	r1, r2, r2
 8003638:	65b9      	str	r1, [r7, #88]	@ 0x58
 800363a:	415b      	adcs	r3, r3
 800363c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800363e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003642:	4621      	mov	r1, r4
 8003644:	eb12 0801 	adds.w	r8, r2, r1
 8003648:	4629      	mov	r1, r5
 800364a:	eb43 0901 	adc.w	r9, r3, r1
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800365a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800365e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003662:	4690      	mov	r8, r2
 8003664:	4699      	mov	r9, r3
 8003666:	4623      	mov	r3, r4
 8003668:	eb18 0303 	adds.w	r3, r8, r3
 800366c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003670:	462b      	mov	r3, r5
 8003672:	eb49 0303 	adc.w	r3, r9, r3
 8003676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003686:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800368a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800368e:	460b      	mov	r3, r1
 8003690:	18db      	adds	r3, r3, r3
 8003692:	653b      	str	r3, [r7, #80]	@ 0x50
 8003694:	4613      	mov	r3, r2
 8003696:	eb42 0303 	adc.w	r3, r2, r3
 800369a:	657b      	str	r3, [r7, #84]	@ 0x54
 800369c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80036a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80036a4:	f7fc fe0c 	bl	80002c0 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4b61      	ldr	r3, [pc, #388]	@ (8003834 <UART_SetConfig+0x2d4>)
 80036ae:	fba3 2302 	umull	r2, r3, r3, r2
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	011c      	lsls	r4, r3, #4
 80036b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80036c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80036c8:	4642      	mov	r2, r8
 80036ca:	464b      	mov	r3, r9
 80036cc:	1891      	adds	r1, r2, r2
 80036ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80036d0:	415b      	adcs	r3, r3
 80036d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036d8:	4641      	mov	r1, r8
 80036da:	eb12 0a01 	adds.w	sl, r2, r1
 80036de:	4649      	mov	r1, r9
 80036e0:	eb43 0b01 	adc.w	fp, r3, r1
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036f8:	4692      	mov	sl, r2
 80036fa:	469b      	mov	fp, r3
 80036fc:	4643      	mov	r3, r8
 80036fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003702:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003706:	464b      	mov	r3, r9
 8003708:	eb4b 0303 	adc.w	r3, fp, r3
 800370c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800371c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003724:	460b      	mov	r3, r1
 8003726:	18db      	adds	r3, r3, r3
 8003728:	643b      	str	r3, [r7, #64]	@ 0x40
 800372a:	4613      	mov	r3, r2
 800372c:	eb42 0303 	adc.w	r3, r2, r3
 8003730:	647b      	str	r3, [r7, #68]	@ 0x44
 8003732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800373a:	f7fc fdc1 	bl	80002c0 <__aeabi_uldivmod>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4611      	mov	r1, r2
 8003744:	4b3b      	ldr	r3, [pc, #236]	@ (8003834 <UART_SetConfig+0x2d4>)
 8003746:	fba3 2301 	umull	r2, r3, r3, r1
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2264      	movs	r2, #100	@ 0x64
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	1acb      	subs	r3, r1, r3
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800375a:	4b36      	ldr	r3, [pc, #216]	@ (8003834 <UART_SetConfig+0x2d4>)
 800375c:	fba3 2302 	umull	r2, r3, r3, r2
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003768:	441c      	add	r4, r3
 800376a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800376e:	2200      	movs	r2, #0
 8003770:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003774:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800377c:	4642      	mov	r2, r8
 800377e:	464b      	mov	r3, r9
 8003780:	1891      	adds	r1, r2, r2
 8003782:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003784:	415b      	adcs	r3, r3
 8003786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800378c:	4641      	mov	r1, r8
 800378e:	1851      	adds	r1, r2, r1
 8003790:	6339      	str	r1, [r7, #48]	@ 0x30
 8003792:	4649      	mov	r1, r9
 8003794:	414b      	adcs	r3, r1
 8003796:	637b      	str	r3, [r7, #52]	@ 0x34
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80037a4:	4659      	mov	r1, fp
 80037a6:	00cb      	lsls	r3, r1, #3
 80037a8:	4651      	mov	r1, sl
 80037aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ae:	4651      	mov	r1, sl
 80037b0:	00ca      	lsls	r2, r1, #3
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	4642      	mov	r2, r8
 80037ba:	189b      	adds	r3, r3, r2
 80037bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037c0:	464b      	mov	r3, r9
 80037c2:	460a      	mov	r2, r1
 80037c4:	eb42 0303 	adc.w	r3, r2, r3
 80037c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80037dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037e0:	460b      	mov	r3, r1
 80037e2:	18db      	adds	r3, r3, r3
 80037e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037e6:	4613      	mov	r3, r2
 80037e8:	eb42 0303 	adc.w	r3, r2, r3
 80037ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80037f6:	f7fc fd63 	bl	80002c0 <__aeabi_uldivmod>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <UART_SetConfig+0x2d4>)
 8003800:	fba3 1302 	umull	r1, r3, r3, r2
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	2164      	movs	r1, #100	@ 0x64
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	3332      	adds	r3, #50	@ 0x32
 8003812:	4a08      	ldr	r2, [pc, #32]	@ (8003834 <UART_SetConfig+0x2d4>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	f003 0207 	and.w	r2, r3, #7
 800381e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4422      	add	r2, r4
 8003826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003828:	e106      	b.n	8003a38 <UART_SetConfig+0x4d8>
 800382a:	bf00      	nop
 800382c:	40011000 	.word	0x40011000
 8003830:	40011400 	.word	0x40011400
 8003834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800383c:	2200      	movs	r2, #0
 800383e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003842:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800384a:	4642      	mov	r2, r8
 800384c:	464b      	mov	r3, r9
 800384e:	1891      	adds	r1, r2, r2
 8003850:	6239      	str	r1, [r7, #32]
 8003852:	415b      	adcs	r3, r3
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24
 8003856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800385a:	4641      	mov	r1, r8
 800385c:	1854      	adds	r4, r2, r1
 800385e:	4649      	mov	r1, r9
 8003860:	eb43 0501 	adc.w	r5, r3, r1
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	00eb      	lsls	r3, r5, #3
 800386e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003872:	00e2      	lsls	r2, r4, #3
 8003874:	4614      	mov	r4, r2
 8003876:	461d      	mov	r5, r3
 8003878:	4643      	mov	r3, r8
 800387a:	18e3      	adds	r3, r4, r3
 800387c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003880:	464b      	mov	r3, r9
 8003882:	eb45 0303 	adc.w	r3, r5, r3
 8003886:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003896:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80038a6:	4629      	mov	r1, r5
 80038a8:	008b      	lsls	r3, r1, #2
 80038aa:	4621      	mov	r1, r4
 80038ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038b0:	4621      	mov	r1, r4
 80038b2:	008a      	lsls	r2, r1, #2
 80038b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80038b8:	f7fc fd02 	bl	80002c0 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4b60      	ldr	r3, [pc, #384]	@ (8003a44 <UART_SetConfig+0x4e4>)
 80038c2:	fba3 2302 	umull	r2, r3, r3, r2
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	011c      	lsls	r4, r3, #4
 80038ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80038dc:	4642      	mov	r2, r8
 80038de:	464b      	mov	r3, r9
 80038e0:	1891      	adds	r1, r2, r2
 80038e2:	61b9      	str	r1, [r7, #24]
 80038e4:	415b      	adcs	r3, r3
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ec:	4641      	mov	r1, r8
 80038ee:	1851      	adds	r1, r2, r1
 80038f0:	6139      	str	r1, [r7, #16]
 80038f2:	4649      	mov	r1, r9
 80038f4:	414b      	adcs	r3, r1
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003904:	4659      	mov	r1, fp
 8003906:	00cb      	lsls	r3, r1, #3
 8003908:	4651      	mov	r1, sl
 800390a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800390e:	4651      	mov	r1, sl
 8003910:	00ca      	lsls	r2, r1, #3
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	4603      	mov	r3, r0
 8003918:	4642      	mov	r2, r8
 800391a:	189b      	adds	r3, r3, r2
 800391c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003920:	464b      	mov	r3, r9
 8003922:	460a      	mov	r2, r1
 8003924:	eb42 0303 	adc.w	r3, r2, r3
 8003928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003936:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003944:	4649      	mov	r1, r9
 8003946:	008b      	lsls	r3, r1, #2
 8003948:	4641      	mov	r1, r8
 800394a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800394e:	4641      	mov	r1, r8
 8003950:	008a      	lsls	r2, r1, #2
 8003952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003956:	f7fc fcb3 	bl	80002c0 <__aeabi_uldivmod>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4611      	mov	r1, r2
 8003960:	4b38      	ldr	r3, [pc, #224]	@ (8003a44 <UART_SetConfig+0x4e4>)
 8003962:	fba3 2301 	umull	r2, r3, r3, r1
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2264      	movs	r2, #100	@ 0x64
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	1acb      	subs	r3, r1, r3
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	3332      	adds	r3, #50	@ 0x32
 8003974:	4a33      	ldr	r2, [pc, #204]	@ (8003a44 <UART_SetConfig+0x4e4>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003980:	441c      	add	r4, r3
 8003982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003986:	2200      	movs	r2, #0
 8003988:	673b      	str	r3, [r7, #112]	@ 0x70
 800398a:	677a      	str	r2, [r7, #116]	@ 0x74
 800398c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003990:	4642      	mov	r2, r8
 8003992:	464b      	mov	r3, r9
 8003994:	1891      	adds	r1, r2, r2
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	415b      	adcs	r3, r3
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039a0:	4641      	mov	r1, r8
 80039a2:	1851      	adds	r1, r2, r1
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	4649      	mov	r1, r9
 80039a8:	414b      	adcs	r3, r1
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039b8:	4659      	mov	r1, fp
 80039ba:	00cb      	lsls	r3, r1, #3
 80039bc:	4651      	mov	r1, sl
 80039be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039c2:	4651      	mov	r1, sl
 80039c4:	00ca      	lsls	r2, r1, #3
 80039c6:	4610      	mov	r0, r2
 80039c8:	4619      	mov	r1, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	4642      	mov	r2, r8
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039d2:	464b      	mov	r3, r9
 80039d4:	460a      	mov	r2, r1
 80039d6:	eb42 0303 	adc.w	r3, r2, r3
 80039da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80039e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039f4:	4649      	mov	r1, r9
 80039f6:	008b      	lsls	r3, r1, #2
 80039f8:	4641      	mov	r1, r8
 80039fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039fe:	4641      	mov	r1, r8
 8003a00:	008a      	lsls	r2, r1, #2
 8003a02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a06:	f7fc fc5b 	bl	80002c0 <__aeabi_uldivmod>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a44 <UART_SetConfig+0x4e4>)
 8003a10:	fba3 1302 	umull	r1, r3, r3, r2
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	2164      	movs	r1, #100	@ 0x64
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	3332      	adds	r3, #50	@ 0x32
 8003a22:	4a08      	ldr	r2, [pc, #32]	@ (8003a44 <UART_SetConfig+0x4e4>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	f003 020f 	and.w	r2, r3, #15
 8003a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4422      	add	r2, r4
 8003a36:	609a      	str	r2, [r3, #8]
}
 8003a38:	bf00      	nop
 8003a3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a44:	51eb851f 	.word	0x51eb851f

08003a48 <siprintf>:
 8003a48:	b40e      	push	{r1, r2, r3}
 8003a4a:	b500      	push	{lr}
 8003a4c:	b09c      	sub	sp, #112	@ 0x70
 8003a4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003a50:	9002      	str	r0, [sp, #8]
 8003a52:	9006      	str	r0, [sp, #24]
 8003a54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a58:	4809      	ldr	r0, [pc, #36]	@ (8003a80 <siprintf+0x38>)
 8003a5a:	9107      	str	r1, [sp, #28]
 8003a5c:	9104      	str	r1, [sp, #16]
 8003a5e:	4909      	ldr	r1, [pc, #36]	@ (8003a84 <siprintf+0x3c>)
 8003a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a64:	9105      	str	r1, [sp, #20]
 8003a66:	6800      	ldr	r0, [r0, #0]
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	a902      	add	r1, sp, #8
 8003a6c:	f000 f994 	bl	8003d98 <_svfiprintf_r>
 8003a70:	9b02      	ldr	r3, [sp, #8]
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	b01c      	add	sp, #112	@ 0x70
 8003a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a7c:	b003      	add	sp, #12
 8003a7e:	4770      	bx	lr
 8003a80:	2000000c 	.word	0x2000000c
 8003a84:	ffff0208 	.word	0xffff0208

08003a88 <memset>:
 8003a88:	4402      	add	r2, r0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <memset+0xa>
 8003a90:	4770      	bx	lr
 8003a92:	f803 1b01 	strb.w	r1, [r3], #1
 8003a96:	e7f9      	b.n	8003a8c <memset+0x4>

08003a98 <__errno>:
 8003a98:	4b01      	ldr	r3, [pc, #4]	@ (8003aa0 <__errno+0x8>)
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	2000000c 	.word	0x2000000c

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8003adc <__libc_init_array+0x38>)
 8003aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8003ae0 <__libc_init_array+0x3c>)
 8003aaa:	1b64      	subs	r4, r4, r5
 8003aac:	10a4      	asrs	r4, r4, #2
 8003aae:	2600      	movs	r6, #0
 8003ab0:	42a6      	cmp	r6, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8003ae4 <__libc_init_array+0x40>)
 8003ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8003ae8 <__libc_init_array+0x44>)
 8003ab8:	f000 fc66 	bl	8004388 <_init>
 8003abc:	1b64      	subs	r4, r4, r5
 8003abe:	10a4      	asrs	r4, r4, #2
 8003ac0:	2600      	movs	r6, #0
 8003ac2:	42a6      	cmp	r6, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003acc:	4798      	blx	r3
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad6:	4798      	blx	r3
 8003ad8:	3601      	adds	r6, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	08004464 	.word	0x08004464
 8003ae0:	08004464 	.word	0x08004464
 8003ae4:	08004464 	.word	0x08004464
 8003ae8:	08004468 	.word	0x08004468

08003aec <__retarget_lock_acquire_recursive>:
 8003aec:	4770      	bx	lr

08003aee <__retarget_lock_release_recursive>:
 8003aee:	4770      	bx	lr

08003af0 <_free_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4605      	mov	r5, r0
 8003af4:	2900      	cmp	r1, #0
 8003af6:	d041      	beq.n	8003b7c <_free_r+0x8c>
 8003af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003afc:	1f0c      	subs	r4, r1, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bfb8      	it	lt
 8003b02:	18e4      	addlt	r4, r4, r3
 8003b04:	f000 f8e0 	bl	8003cc8 <__malloc_lock>
 8003b08:	4a1d      	ldr	r2, [pc, #116]	@ (8003b80 <_free_r+0x90>)
 8003b0a:	6813      	ldr	r3, [r2, #0]
 8003b0c:	b933      	cbnz	r3, 8003b1c <_free_r+0x2c>
 8003b0e:	6063      	str	r3, [r4, #4]
 8003b10:	6014      	str	r4, [r2, #0]
 8003b12:	4628      	mov	r0, r5
 8003b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b18:	f000 b8dc 	b.w	8003cd4 <__malloc_unlock>
 8003b1c:	42a3      	cmp	r3, r4
 8003b1e:	d908      	bls.n	8003b32 <_free_r+0x42>
 8003b20:	6820      	ldr	r0, [r4, #0]
 8003b22:	1821      	adds	r1, r4, r0
 8003b24:	428b      	cmp	r3, r1
 8003b26:	bf01      	itttt	eq
 8003b28:	6819      	ldreq	r1, [r3, #0]
 8003b2a:	685b      	ldreq	r3, [r3, #4]
 8003b2c:	1809      	addeq	r1, r1, r0
 8003b2e:	6021      	streq	r1, [r4, #0]
 8003b30:	e7ed      	b.n	8003b0e <_free_r+0x1e>
 8003b32:	461a      	mov	r2, r3
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	b10b      	cbz	r3, 8003b3c <_free_r+0x4c>
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	d9fa      	bls.n	8003b32 <_free_r+0x42>
 8003b3c:	6811      	ldr	r1, [r2, #0]
 8003b3e:	1850      	adds	r0, r2, r1
 8003b40:	42a0      	cmp	r0, r4
 8003b42:	d10b      	bne.n	8003b5c <_free_r+0x6c>
 8003b44:	6820      	ldr	r0, [r4, #0]
 8003b46:	4401      	add	r1, r0
 8003b48:	1850      	adds	r0, r2, r1
 8003b4a:	4283      	cmp	r3, r0
 8003b4c:	6011      	str	r1, [r2, #0]
 8003b4e:	d1e0      	bne.n	8003b12 <_free_r+0x22>
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	6053      	str	r3, [r2, #4]
 8003b56:	4408      	add	r0, r1
 8003b58:	6010      	str	r0, [r2, #0]
 8003b5a:	e7da      	b.n	8003b12 <_free_r+0x22>
 8003b5c:	d902      	bls.n	8003b64 <_free_r+0x74>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	602b      	str	r3, [r5, #0]
 8003b62:	e7d6      	b.n	8003b12 <_free_r+0x22>
 8003b64:	6820      	ldr	r0, [r4, #0]
 8003b66:	1821      	adds	r1, r4, r0
 8003b68:	428b      	cmp	r3, r1
 8003b6a:	bf04      	itt	eq
 8003b6c:	6819      	ldreq	r1, [r3, #0]
 8003b6e:	685b      	ldreq	r3, [r3, #4]
 8003b70:	6063      	str	r3, [r4, #4]
 8003b72:	bf04      	itt	eq
 8003b74:	1809      	addeq	r1, r1, r0
 8003b76:	6021      	streq	r1, [r4, #0]
 8003b78:	6054      	str	r4, [r2, #4]
 8003b7a:	e7ca      	b.n	8003b12 <_free_r+0x22>
 8003b7c:	bd38      	pop	{r3, r4, r5, pc}
 8003b7e:	bf00      	nop
 8003b80:	200002d0 	.word	0x200002d0

08003b84 <sbrk_aligned>:
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	4e0f      	ldr	r6, [pc, #60]	@ (8003bc4 <sbrk_aligned+0x40>)
 8003b88:	460c      	mov	r4, r1
 8003b8a:	6831      	ldr	r1, [r6, #0]
 8003b8c:	4605      	mov	r5, r0
 8003b8e:	b911      	cbnz	r1, 8003b96 <sbrk_aligned+0x12>
 8003b90:	f000 fba6 	bl	80042e0 <_sbrk_r>
 8003b94:	6030      	str	r0, [r6, #0]
 8003b96:	4621      	mov	r1, r4
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f000 fba1 	bl	80042e0 <_sbrk_r>
 8003b9e:	1c43      	adds	r3, r0, #1
 8003ba0:	d103      	bne.n	8003baa <sbrk_aligned+0x26>
 8003ba2:	f04f 34ff 	mov.w	r4, #4294967295
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
 8003baa:	1cc4      	adds	r4, r0, #3
 8003bac:	f024 0403 	bic.w	r4, r4, #3
 8003bb0:	42a0      	cmp	r0, r4
 8003bb2:	d0f8      	beq.n	8003ba6 <sbrk_aligned+0x22>
 8003bb4:	1a21      	subs	r1, r4, r0
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f000 fb92 	bl	80042e0 <_sbrk_r>
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d1f2      	bne.n	8003ba6 <sbrk_aligned+0x22>
 8003bc0:	e7ef      	b.n	8003ba2 <sbrk_aligned+0x1e>
 8003bc2:	bf00      	nop
 8003bc4:	200002cc 	.word	0x200002cc

08003bc8 <_malloc_r>:
 8003bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bcc:	1ccd      	adds	r5, r1, #3
 8003bce:	f025 0503 	bic.w	r5, r5, #3
 8003bd2:	3508      	adds	r5, #8
 8003bd4:	2d0c      	cmp	r5, #12
 8003bd6:	bf38      	it	cc
 8003bd8:	250c      	movcc	r5, #12
 8003bda:	2d00      	cmp	r5, #0
 8003bdc:	4606      	mov	r6, r0
 8003bde:	db01      	blt.n	8003be4 <_malloc_r+0x1c>
 8003be0:	42a9      	cmp	r1, r5
 8003be2:	d904      	bls.n	8003bee <_malloc_r+0x26>
 8003be4:	230c      	movs	r3, #12
 8003be6:	6033      	str	r3, [r6, #0]
 8003be8:	2000      	movs	r0, #0
 8003bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003cc4 <_malloc_r+0xfc>
 8003bf2:	f000 f869 	bl	8003cc8 <__malloc_lock>
 8003bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8003bfa:	461c      	mov	r4, r3
 8003bfc:	bb44      	cbnz	r4, 8003c50 <_malloc_r+0x88>
 8003bfe:	4629      	mov	r1, r5
 8003c00:	4630      	mov	r0, r6
 8003c02:	f7ff ffbf 	bl	8003b84 <sbrk_aligned>
 8003c06:	1c43      	adds	r3, r0, #1
 8003c08:	4604      	mov	r4, r0
 8003c0a:	d158      	bne.n	8003cbe <_malloc_r+0xf6>
 8003c0c:	f8d8 4000 	ldr.w	r4, [r8]
 8003c10:	4627      	mov	r7, r4
 8003c12:	2f00      	cmp	r7, #0
 8003c14:	d143      	bne.n	8003c9e <_malloc_r+0xd6>
 8003c16:	2c00      	cmp	r4, #0
 8003c18:	d04b      	beq.n	8003cb2 <_malloc_r+0xea>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	4639      	mov	r1, r7
 8003c1e:	4630      	mov	r0, r6
 8003c20:	eb04 0903 	add.w	r9, r4, r3
 8003c24:	f000 fb5c 	bl	80042e0 <_sbrk_r>
 8003c28:	4581      	cmp	r9, r0
 8003c2a:	d142      	bne.n	8003cb2 <_malloc_r+0xea>
 8003c2c:	6821      	ldr	r1, [r4, #0]
 8003c2e:	1a6d      	subs	r5, r5, r1
 8003c30:	4629      	mov	r1, r5
 8003c32:	4630      	mov	r0, r6
 8003c34:	f7ff ffa6 	bl	8003b84 <sbrk_aligned>
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d03a      	beq.n	8003cb2 <_malloc_r+0xea>
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	442b      	add	r3, r5
 8003c40:	6023      	str	r3, [r4, #0]
 8003c42:	f8d8 3000 	ldr.w	r3, [r8]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	bb62      	cbnz	r2, 8003ca4 <_malloc_r+0xdc>
 8003c4a:	f8c8 7000 	str.w	r7, [r8]
 8003c4e:	e00f      	b.n	8003c70 <_malloc_r+0xa8>
 8003c50:	6822      	ldr	r2, [r4, #0]
 8003c52:	1b52      	subs	r2, r2, r5
 8003c54:	d420      	bmi.n	8003c98 <_malloc_r+0xd0>
 8003c56:	2a0b      	cmp	r2, #11
 8003c58:	d917      	bls.n	8003c8a <_malloc_r+0xc2>
 8003c5a:	1961      	adds	r1, r4, r5
 8003c5c:	42a3      	cmp	r3, r4
 8003c5e:	6025      	str	r5, [r4, #0]
 8003c60:	bf18      	it	ne
 8003c62:	6059      	strne	r1, [r3, #4]
 8003c64:	6863      	ldr	r3, [r4, #4]
 8003c66:	bf08      	it	eq
 8003c68:	f8c8 1000 	streq.w	r1, [r8]
 8003c6c:	5162      	str	r2, [r4, r5]
 8003c6e:	604b      	str	r3, [r1, #4]
 8003c70:	4630      	mov	r0, r6
 8003c72:	f000 f82f 	bl	8003cd4 <__malloc_unlock>
 8003c76:	f104 000b 	add.w	r0, r4, #11
 8003c7a:	1d23      	adds	r3, r4, #4
 8003c7c:	f020 0007 	bic.w	r0, r0, #7
 8003c80:	1ac2      	subs	r2, r0, r3
 8003c82:	bf1c      	itt	ne
 8003c84:	1a1b      	subne	r3, r3, r0
 8003c86:	50a3      	strne	r3, [r4, r2]
 8003c88:	e7af      	b.n	8003bea <_malloc_r+0x22>
 8003c8a:	6862      	ldr	r2, [r4, #4]
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	bf0c      	ite	eq
 8003c90:	f8c8 2000 	streq.w	r2, [r8]
 8003c94:	605a      	strne	r2, [r3, #4]
 8003c96:	e7eb      	b.n	8003c70 <_malloc_r+0xa8>
 8003c98:	4623      	mov	r3, r4
 8003c9a:	6864      	ldr	r4, [r4, #4]
 8003c9c:	e7ae      	b.n	8003bfc <_malloc_r+0x34>
 8003c9e:	463c      	mov	r4, r7
 8003ca0:	687f      	ldr	r7, [r7, #4]
 8003ca2:	e7b6      	b.n	8003c12 <_malloc_r+0x4a>
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	42a3      	cmp	r3, r4
 8003caa:	d1fb      	bne.n	8003ca4 <_malloc_r+0xdc>
 8003cac:	2300      	movs	r3, #0
 8003cae:	6053      	str	r3, [r2, #4]
 8003cb0:	e7de      	b.n	8003c70 <_malloc_r+0xa8>
 8003cb2:	230c      	movs	r3, #12
 8003cb4:	6033      	str	r3, [r6, #0]
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	f000 f80c 	bl	8003cd4 <__malloc_unlock>
 8003cbc:	e794      	b.n	8003be8 <_malloc_r+0x20>
 8003cbe:	6005      	str	r5, [r0, #0]
 8003cc0:	e7d6      	b.n	8003c70 <_malloc_r+0xa8>
 8003cc2:	bf00      	nop
 8003cc4:	200002d0 	.word	0x200002d0

08003cc8 <__malloc_lock>:
 8003cc8:	4801      	ldr	r0, [pc, #4]	@ (8003cd0 <__malloc_lock+0x8>)
 8003cca:	f7ff bf0f 	b.w	8003aec <__retarget_lock_acquire_recursive>
 8003cce:	bf00      	nop
 8003cd0:	200002c8 	.word	0x200002c8

08003cd4 <__malloc_unlock>:
 8003cd4:	4801      	ldr	r0, [pc, #4]	@ (8003cdc <__malloc_unlock+0x8>)
 8003cd6:	f7ff bf0a 	b.w	8003aee <__retarget_lock_release_recursive>
 8003cda:	bf00      	nop
 8003cdc:	200002c8 	.word	0x200002c8

08003ce0 <__ssputs_r>:
 8003ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce4:	688e      	ldr	r6, [r1, #8]
 8003ce6:	461f      	mov	r7, r3
 8003ce8:	42be      	cmp	r6, r7
 8003cea:	680b      	ldr	r3, [r1, #0]
 8003cec:	4682      	mov	sl, r0
 8003cee:	460c      	mov	r4, r1
 8003cf0:	4690      	mov	r8, r2
 8003cf2:	d82d      	bhi.n	8003d50 <__ssputs_r+0x70>
 8003cf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003cfc:	d026      	beq.n	8003d4c <__ssputs_r+0x6c>
 8003cfe:	6965      	ldr	r5, [r4, #20]
 8003d00:	6909      	ldr	r1, [r1, #16]
 8003d02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d06:	eba3 0901 	sub.w	r9, r3, r1
 8003d0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d0e:	1c7b      	adds	r3, r7, #1
 8003d10:	444b      	add	r3, r9
 8003d12:	106d      	asrs	r5, r5, #1
 8003d14:	429d      	cmp	r5, r3
 8003d16:	bf38      	it	cc
 8003d18:	461d      	movcc	r5, r3
 8003d1a:	0553      	lsls	r3, r2, #21
 8003d1c:	d527      	bpl.n	8003d6e <__ssputs_r+0x8e>
 8003d1e:	4629      	mov	r1, r5
 8003d20:	f7ff ff52 	bl	8003bc8 <_malloc_r>
 8003d24:	4606      	mov	r6, r0
 8003d26:	b360      	cbz	r0, 8003d82 <__ssputs_r+0xa2>
 8003d28:	6921      	ldr	r1, [r4, #16]
 8003d2a:	464a      	mov	r2, r9
 8003d2c:	f000 fae8 	bl	8004300 <memcpy>
 8003d30:	89a3      	ldrh	r3, [r4, #12]
 8003d32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d3a:	81a3      	strh	r3, [r4, #12]
 8003d3c:	6126      	str	r6, [r4, #16]
 8003d3e:	6165      	str	r5, [r4, #20]
 8003d40:	444e      	add	r6, r9
 8003d42:	eba5 0509 	sub.w	r5, r5, r9
 8003d46:	6026      	str	r6, [r4, #0]
 8003d48:	60a5      	str	r5, [r4, #8]
 8003d4a:	463e      	mov	r6, r7
 8003d4c:	42be      	cmp	r6, r7
 8003d4e:	d900      	bls.n	8003d52 <__ssputs_r+0x72>
 8003d50:	463e      	mov	r6, r7
 8003d52:	6820      	ldr	r0, [r4, #0]
 8003d54:	4632      	mov	r2, r6
 8003d56:	4641      	mov	r1, r8
 8003d58:	f000 faa8 	bl	80042ac <memmove>
 8003d5c:	68a3      	ldr	r3, [r4, #8]
 8003d5e:	1b9b      	subs	r3, r3, r6
 8003d60:	60a3      	str	r3, [r4, #8]
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	4433      	add	r3, r6
 8003d66:	6023      	str	r3, [r4, #0]
 8003d68:	2000      	movs	r0, #0
 8003d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6e:	462a      	mov	r2, r5
 8003d70:	f000 fad4 	bl	800431c <_realloc_r>
 8003d74:	4606      	mov	r6, r0
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d1e0      	bne.n	8003d3c <__ssputs_r+0x5c>
 8003d7a:	6921      	ldr	r1, [r4, #16]
 8003d7c:	4650      	mov	r0, sl
 8003d7e:	f7ff feb7 	bl	8003af0 <_free_r>
 8003d82:	230c      	movs	r3, #12
 8003d84:	f8ca 3000 	str.w	r3, [sl]
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	e7e9      	b.n	8003d6a <__ssputs_r+0x8a>
	...

08003d98 <_svfiprintf_r>:
 8003d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9c:	4698      	mov	r8, r3
 8003d9e:	898b      	ldrh	r3, [r1, #12]
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	b09d      	sub	sp, #116	@ 0x74
 8003da4:	4607      	mov	r7, r0
 8003da6:	460d      	mov	r5, r1
 8003da8:	4614      	mov	r4, r2
 8003daa:	d510      	bpl.n	8003dce <_svfiprintf_r+0x36>
 8003dac:	690b      	ldr	r3, [r1, #16]
 8003dae:	b973      	cbnz	r3, 8003dce <_svfiprintf_r+0x36>
 8003db0:	2140      	movs	r1, #64	@ 0x40
 8003db2:	f7ff ff09 	bl	8003bc8 <_malloc_r>
 8003db6:	6028      	str	r0, [r5, #0]
 8003db8:	6128      	str	r0, [r5, #16]
 8003dba:	b930      	cbnz	r0, 8003dca <_svfiprintf_r+0x32>
 8003dbc:	230c      	movs	r3, #12
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc4:	b01d      	add	sp, #116	@ 0x74
 8003dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dca:	2340      	movs	r3, #64	@ 0x40
 8003dcc:	616b      	str	r3, [r5, #20]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ddc:	2330      	movs	r3, #48	@ 0x30
 8003dde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f7c <_svfiprintf_r+0x1e4>
 8003de2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003de6:	f04f 0901 	mov.w	r9, #1
 8003dea:	4623      	mov	r3, r4
 8003dec:	469a      	mov	sl, r3
 8003dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003df2:	b10a      	cbz	r2, 8003df8 <_svfiprintf_r+0x60>
 8003df4:	2a25      	cmp	r2, #37	@ 0x25
 8003df6:	d1f9      	bne.n	8003dec <_svfiprintf_r+0x54>
 8003df8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dfc:	d00b      	beq.n	8003e16 <_svfiprintf_r+0x7e>
 8003dfe:	465b      	mov	r3, fp
 8003e00:	4622      	mov	r2, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	4638      	mov	r0, r7
 8003e06:	f7ff ff6b 	bl	8003ce0 <__ssputs_r>
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	f000 80a7 	beq.w	8003f5e <_svfiprintf_r+0x1c6>
 8003e10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e12:	445a      	add	r2, fp
 8003e14:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e16:	f89a 3000 	ldrb.w	r3, [sl]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 809f 	beq.w	8003f5e <_svfiprintf_r+0x1c6>
 8003e20:	2300      	movs	r3, #0
 8003e22:	f04f 32ff 	mov.w	r2, #4294967295
 8003e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e2a:	f10a 0a01 	add.w	sl, sl, #1
 8003e2e:	9304      	str	r3, [sp, #16]
 8003e30:	9307      	str	r3, [sp, #28]
 8003e32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e36:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e38:	4654      	mov	r4, sl
 8003e3a:	2205      	movs	r2, #5
 8003e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e40:	484e      	ldr	r0, [pc, #312]	@ (8003f7c <_svfiprintf_r+0x1e4>)
 8003e42:	f7fc f9ed 	bl	8000220 <memchr>
 8003e46:	9a04      	ldr	r2, [sp, #16]
 8003e48:	b9d8      	cbnz	r0, 8003e82 <_svfiprintf_r+0xea>
 8003e4a:	06d0      	lsls	r0, r2, #27
 8003e4c:	bf44      	itt	mi
 8003e4e:	2320      	movmi	r3, #32
 8003e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e54:	0711      	lsls	r1, r2, #28
 8003e56:	bf44      	itt	mi
 8003e58:	232b      	movmi	r3, #43	@ 0x2b
 8003e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e64:	d015      	beq.n	8003e92 <_svfiprintf_r+0xfa>
 8003e66:	9a07      	ldr	r2, [sp, #28]
 8003e68:	4654      	mov	r4, sl
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f04f 0c0a 	mov.w	ip, #10
 8003e70:	4621      	mov	r1, r4
 8003e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e76:	3b30      	subs	r3, #48	@ 0x30
 8003e78:	2b09      	cmp	r3, #9
 8003e7a:	d94b      	bls.n	8003f14 <_svfiprintf_r+0x17c>
 8003e7c:	b1b0      	cbz	r0, 8003eac <_svfiprintf_r+0x114>
 8003e7e:	9207      	str	r2, [sp, #28]
 8003e80:	e014      	b.n	8003eac <_svfiprintf_r+0x114>
 8003e82:	eba0 0308 	sub.w	r3, r0, r8
 8003e86:	fa09 f303 	lsl.w	r3, r9, r3
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	9304      	str	r3, [sp, #16]
 8003e8e:	46a2      	mov	sl, r4
 8003e90:	e7d2      	b.n	8003e38 <_svfiprintf_r+0xa0>
 8003e92:	9b03      	ldr	r3, [sp, #12]
 8003e94:	1d19      	adds	r1, r3, #4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	9103      	str	r1, [sp, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bfbb      	ittet	lt
 8003e9e:	425b      	neglt	r3, r3
 8003ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ea4:	9307      	strge	r3, [sp, #28]
 8003ea6:	9307      	strlt	r3, [sp, #28]
 8003ea8:	bfb8      	it	lt
 8003eaa:	9204      	strlt	r2, [sp, #16]
 8003eac:	7823      	ldrb	r3, [r4, #0]
 8003eae:	2b2e      	cmp	r3, #46	@ 0x2e
 8003eb0:	d10a      	bne.n	8003ec8 <_svfiprintf_r+0x130>
 8003eb2:	7863      	ldrb	r3, [r4, #1]
 8003eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eb6:	d132      	bne.n	8003f1e <_svfiprintf_r+0x186>
 8003eb8:	9b03      	ldr	r3, [sp, #12]
 8003eba:	1d1a      	adds	r2, r3, #4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	9203      	str	r2, [sp, #12]
 8003ec0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ec4:	3402      	adds	r4, #2
 8003ec6:	9305      	str	r3, [sp, #20]
 8003ec8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f8c <_svfiprintf_r+0x1f4>
 8003ecc:	7821      	ldrb	r1, [r4, #0]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	4650      	mov	r0, sl
 8003ed2:	f7fc f9a5 	bl	8000220 <memchr>
 8003ed6:	b138      	cbz	r0, 8003ee8 <_svfiprintf_r+0x150>
 8003ed8:	9b04      	ldr	r3, [sp, #16]
 8003eda:	eba0 000a 	sub.w	r0, r0, sl
 8003ede:	2240      	movs	r2, #64	@ 0x40
 8003ee0:	4082      	lsls	r2, r0
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	3401      	adds	r4, #1
 8003ee6:	9304      	str	r3, [sp, #16]
 8003ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eec:	4824      	ldr	r0, [pc, #144]	@ (8003f80 <_svfiprintf_r+0x1e8>)
 8003eee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ef2:	2206      	movs	r2, #6
 8003ef4:	f7fc f994 	bl	8000220 <memchr>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d036      	beq.n	8003f6a <_svfiprintf_r+0x1d2>
 8003efc:	4b21      	ldr	r3, [pc, #132]	@ (8003f84 <_svfiprintf_r+0x1ec>)
 8003efe:	bb1b      	cbnz	r3, 8003f48 <_svfiprintf_r+0x1b0>
 8003f00:	9b03      	ldr	r3, [sp, #12]
 8003f02:	3307      	adds	r3, #7
 8003f04:	f023 0307 	bic.w	r3, r3, #7
 8003f08:	3308      	adds	r3, #8
 8003f0a:	9303      	str	r3, [sp, #12]
 8003f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f0e:	4433      	add	r3, r6
 8003f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f12:	e76a      	b.n	8003dea <_svfiprintf_r+0x52>
 8003f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f18:	460c      	mov	r4, r1
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	e7a8      	b.n	8003e70 <_svfiprintf_r+0xd8>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	3401      	adds	r4, #1
 8003f22:	9305      	str	r3, [sp, #20]
 8003f24:	4619      	mov	r1, r3
 8003f26:	f04f 0c0a 	mov.w	ip, #10
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f30:	3a30      	subs	r2, #48	@ 0x30
 8003f32:	2a09      	cmp	r2, #9
 8003f34:	d903      	bls.n	8003f3e <_svfiprintf_r+0x1a6>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0c6      	beq.n	8003ec8 <_svfiprintf_r+0x130>
 8003f3a:	9105      	str	r1, [sp, #20]
 8003f3c:	e7c4      	b.n	8003ec8 <_svfiprintf_r+0x130>
 8003f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f42:	4604      	mov	r4, r0
 8003f44:	2301      	movs	r3, #1
 8003f46:	e7f0      	b.n	8003f2a <_svfiprintf_r+0x192>
 8003f48:	ab03      	add	r3, sp, #12
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	462a      	mov	r2, r5
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f88 <_svfiprintf_r+0x1f0>)
 8003f50:	a904      	add	r1, sp, #16
 8003f52:	4638      	mov	r0, r7
 8003f54:	f3af 8000 	nop.w
 8003f58:	1c42      	adds	r2, r0, #1
 8003f5a:	4606      	mov	r6, r0
 8003f5c:	d1d6      	bne.n	8003f0c <_svfiprintf_r+0x174>
 8003f5e:	89ab      	ldrh	r3, [r5, #12]
 8003f60:	065b      	lsls	r3, r3, #25
 8003f62:	f53f af2d 	bmi.w	8003dc0 <_svfiprintf_r+0x28>
 8003f66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f68:	e72c      	b.n	8003dc4 <_svfiprintf_r+0x2c>
 8003f6a:	ab03      	add	r3, sp, #12
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	462a      	mov	r2, r5
 8003f70:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <_svfiprintf_r+0x1f0>)
 8003f72:	a904      	add	r1, sp, #16
 8003f74:	4638      	mov	r0, r7
 8003f76:	f000 f879 	bl	800406c <_printf_i>
 8003f7a:	e7ed      	b.n	8003f58 <_svfiprintf_r+0x1c0>
 8003f7c:	08004428 	.word	0x08004428
 8003f80:	08004432 	.word	0x08004432
 8003f84:	00000000 	.word	0x00000000
 8003f88:	08003ce1 	.word	0x08003ce1
 8003f8c:	0800442e 	.word	0x0800442e

08003f90 <_printf_common>:
 8003f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f94:	4616      	mov	r6, r2
 8003f96:	4698      	mov	r8, r3
 8003f98:	688a      	ldr	r2, [r1, #8]
 8003f9a:	690b      	ldr	r3, [r1, #16]
 8003f9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	bfb8      	it	lt
 8003fa4:	4613      	movlt	r3, r2
 8003fa6:	6033      	str	r3, [r6, #0]
 8003fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fac:	4607      	mov	r7, r0
 8003fae:	460c      	mov	r4, r1
 8003fb0:	b10a      	cbz	r2, 8003fb6 <_printf_common+0x26>
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	6033      	str	r3, [r6, #0]
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	0699      	lsls	r1, r3, #26
 8003fba:	bf42      	ittt	mi
 8003fbc:	6833      	ldrmi	r3, [r6, #0]
 8003fbe:	3302      	addmi	r3, #2
 8003fc0:	6033      	strmi	r3, [r6, #0]
 8003fc2:	6825      	ldr	r5, [r4, #0]
 8003fc4:	f015 0506 	ands.w	r5, r5, #6
 8003fc8:	d106      	bne.n	8003fd8 <_printf_common+0x48>
 8003fca:	f104 0a19 	add.w	sl, r4, #25
 8003fce:	68e3      	ldr	r3, [r4, #12]
 8003fd0:	6832      	ldr	r2, [r6, #0]
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	42ab      	cmp	r3, r5
 8003fd6:	dc26      	bgt.n	8004026 <_printf_common+0x96>
 8003fd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fdc:	6822      	ldr	r2, [r4, #0]
 8003fde:	3b00      	subs	r3, #0
 8003fe0:	bf18      	it	ne
 8003fe2:	2301      	movne	r3, #1
 8003fe4:	0692      	lsls	r2, r2, #26
 8003fe6:	d42b      	bmi.n	8004040 <_printf_common+0xb0>
 8003fe8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fec:	4641      	mov	r1, r8
 8003fee:	4638      	mov	r0, r7
 8003ff0:	47c8      	blx	r9
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d01e      	beq.n	8004034 <_printf_common+0xa4>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	6922      	ldr	r2, [r4, #16]
 8003ffa:	f003 0306 	and.w	r3, r3, #6
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	bf02      	ittt	eq
 8004002:	68e5      	ldreq	r5, [r4, #12]
 8004004:	6833      	ldreq	r3, [r6, #0]
 8004006:	1aed      	subeq	r5, r5, r3
 8004008:	68a3      	ldr	r3, [r4, #8]
 800400a:	bf0c      	ite	eq
 800400c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004010:	2500      	movne	r5, #0
 8004012:	4293      	cmp	r3, r2
 8004014:	bfc4      	itt	gt
 8004016:	1a9b      	subgt	r3, r3, r2
 8004018:	18ed      	addgt	r5, r5, r3
 800401a:	2600      	movs	r6, #0
 800401c:	341a      	adds	r4, #26
 800401e:	42b5      	cmp	r5, r6
 8004020:	d11a      	bne.n	8004058 <_printf_common+0xc8>
 8004022:	2000      	movs	r0, #0
 8004024:	e008      	b.n	8004038 <_printf_common+0xa8>
 8004026:	2301      	movs	r3, #1
 8004028:	4652      	mov	r2, sl
 800402a:	4641      	mov	r1, r8
 800402c:	4638      	mov	r0, r7
 800402e:	47c8      	blx	r9
 8004030:	3001      	adds	r0, #1
 8004032:	d103      	bne.n	800403c <_printf_common+0xac>
 8004034:	f04f 30ff 	mov.w	r0, #4294967295
 8004038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800403c:	3501      	adds	r5, #1
 800403e:	e7c6      	b.n	8003fce <_printf_common+0x3e>
 8004040:	18e1      	adds	r1, r4, r3
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	2030      	movs	r0, #48	@ 0x30
 8004046:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800404a:	4422      	add	r2, r4
 800404c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004050:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004054:	3302      	adds	r3, #2
 8004056:	e7c7      	b.n	8003fe8 <_printf_common+0x58>
 8004058:	2301      	movs	r3, #1
 800405a:	4622      	mov	r2, r4
 800405c:	4641      	mov	r1, r8
 800405e:	4638      	mov	r0, r7
 8004060:	47c8      	blx	r9
 8004062:	3001      	adds	r0, #1
 8004064:	d0e6      	beq.n	8004034 <_printf_common+0xa4>
 8004066:	3601      	adds	r6, #1
 8004068:	e7d9      	b.n	800401e <_printf_common+0x8e>
	...

0800406c <_printf_i>:
 800406c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004070:	7e0f      	ldrb	r7, [r1, #24]
 8004072:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004074:	2f78      	cmp	r7, #120	@ 0x78
 8004076:	4691      	mov	r9, r2
 8004078:	4680      	mov	r8, r0
 800407a:	460c      	mov	r4, r1
 800407c:	469a      	mov	sl, r3
 800407e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004082:	d807      	bhi.n	8004094 <_printf_i+0x28>
 8004084:	2f62      	cmp	r7, #98	@ 0x62
 8004086:	d80a      	bhi.n	800409e <_printf_i+0x32>
 8004088:	2f00      	cmp	r7, #0
 800408a:	f000 80d2 	beq.w	8004232 <_printf_i+0x1c6>
 800408e:	2f58      	cmp	r7, #88	@ 0x58
 8004090:	f000 80b9 	beq.w	8004206 <_printf_i+0x19a>
 8004094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004098:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800409c:	e03a      	b.n	8004114 <_printf_i+0xa8>
 800409e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040a2:	2b15      	cmp	r3, #21
 80040a4:	d8f6      	bhi.n	8004094 <_printf_i+0x28>
 80040a6:	a101      	add	r1, pc, #4	@ (adr r1, 80040ac <_printf_i+0x40>)
 80040a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040ac:	08004105 	.word	0x08004105
 80040b0:	08004119 	.word	0x08004119
 80040b4:	08004095 	.word	0x08004095
 80040b8:	08004095 	.word	0x08004095
 80040bc:	08004095 	.word	0x08004095
 80040c0:	08004095 	.word	0x08004095
 80040c4:	08004119 	.word	0x08004119
 80040c8:	08004095 	.word	0x08004095
 80040cc:	08004095 	.word	0x08004095
 80040d0:	08004095 	.word	0x08004095
 80040d4:	08004095 	.word	0x08004095
 80040d8:	08004219 	.word	0x08004219
 80040dc:	08004143 	.word	0x08004143
 80040e0:	080041d3 	.word	0x080041d3
 80040e4:	08004095 	.word	0x08004095
 80040e8:	08004095 	.word	0x08004095
 80040ec:	0800423b 	.word	0x0800423b
 80040f0:	08004095 	.word	0x08004095
 80040f4:	08004143 	.word	0x08004143
 80040f8:	08004095 	.word	0x08004095
 80040fc:	08004095 	.word	0x08004095
 8004100:	080041db 	.word	0x080041db
 8004104:	6833      	ldr	r3, [r6, #0]
 8004106:	1d1a      	adds	r2, r3, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6032      	str	r2, [r6, #0]
 800410c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004110:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004114:	2301      	movs	r3, #1
 8004116:	e09d      	b.n	8004254 <_printf_i+0x1e8>
 8004118:	6833      	ldr	r3, [r6, #0]
 800411a:	6820      	ldr	r0, [r4, #0]
 800411c:	1d19      	adds	r1, r3, #4
 800411e:	6031      	str	r1, [r6, #0]
 8004120:	0606      	lsls	r6, r0, #24
 8004122:	d501      	bpl.n	8004128 <_printf_i+0xbc>
 8004124:	681d      	ldr	r5, [r3, #0]
 8004126:	e003      	b.n	8004130 <_printf_i+0xc4>
 8004128:	0645      	lsls	r5, r0, #25
 800412a:	d5fb      	bpl.n	8004124 <_printf_i+0xb8>
 800412c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004130:	2d00      	cmp	r5, #0
 8004132:	da03      	bge.n	800413c <_printf_i+0xd0>
 8004134:	232d      	movs	r3, #45	@ 0x2d
 8004136:	426d      	negs	r5, r5
 8004138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800413c:	4859      	ldr	r0, [pc, #356]	@ (80042a4 <_printf_i+0x238>)
 800413e:	230a      	movs	r3, #10
 8004140:	e011      	b.n	8004166 <_printf_i+0xfa>
 8004142:	6821      	ldr	r1, [r4, #0]
 8004144:	6833      	ldr	r3, [r6, #0]
 8004146:	0608      	lsls	r0, r1, #24
 8004148:	f853 5b04 	ldr.w	r5, [r3], #4
 800414c:	d402      	bmi.n	8004154 <_printf_i+0xe8>
 800414e:	0649      	lsls	r1, r1, #25
 8004150:	bf48      	it	mi
 8004152:	b2ad      	uxthmi	r5, r5
 8004154:	2f6f      	cmp	r7, #111	@ 0x6f
 8004156:	4853      	ldr	r0, [pc, #332]	@ (80042a4 <_printf_i+0x238>)
 8004158:	6033      	str	r3, [r6, #0]
 800415a:	bf14      	ite	ne
 800415c:	230a      	movne	r3, #10
 800415e:	2308      	moveq	r3, #8
 8004160:	2100      	movs	r1, #0
 8004162:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004166:	6866      	ldr	r6, [r4, #4]
 8004168:	60a6      	str	r6, [r4, #8]
 800416a:	2e00      	cmp	r6, #0
 800416c:	bfa2      	ittt	ge
 800416e:	6821      	ldrge	r1, [r4, #0]
 8004170:	f021 0104 	bicge.w	r1, r1, #4
 8004174:	6021      	strge	r1, [r4, #0]
 8004176:	b90d      	cbnz	r5, 800417c <_printf_i+0x110>
 8004178:	2e00      	cmp	r6, #0
 800417a:	d04b      	beq.n	8004214 <_printf_i+0x1a8>
 800417c:	4616      	mov	r6, r2
 800417e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004182:	fb03 5711 	mls	r7, r3, r1, r5
 8004186:	5dc7      	ldrb	r7, [r0, r7]
 8004188:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800418c:	462f      	mov	r7, r5
 800418e:	42bb      	cmp	r3, r7
 8004190:	460d      	mov	r5, r1
 8004192:	d9f4      	bls.n	800417e <_printf_i+0x112>
 8004194:	2b08      	cmp	r3, #8
 8004196:	d10b      	bne.n	80041b0 <_printf_i+0x144>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	07df      	lsls	r7, r3, #31
 800419c:	d508      	bpl.n	80041b0 <_printf_i+0x144>
 800419e:	6923      	ldr	r3, [r4, #16]
 80041a0:	6861      	ldr	r1, [r4, #4]
 80041a2:	4299      	cmp	r1, r3
 80041a4:	bfde      	ittt	le
 80041a6:	2330      	movle	r3, #48	@ 0x30
 80041a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041b0:	1b92      	subs	r2, r2, r6
 80041b2:	6122      	str	r2, [r4, #16]
 80041b4:	f8cd a000 	str.w	sl, [sp]
 80041b8:	464b      	mov	r3, r9
 80041ba:	aa03      	add	r2, sp, #12
 80041bc:	4621      	mov	r1, r4
 80041be:	4640      	mov	r0, r8
 80041c0:	f7ff fee6 	bl	8003f90 <_printf_common>
 80041c4:	3001      	adds	r0, #1
 80041c6:	d14a      	bne.n	800425e <_printf_i+0x1f2>
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295
 80041cc:	b004      	add	sp, #16
 80041ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	f043 0320 	orr.w	r3, r3, #32
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	4833      	ldr	r0, [pc, #204]	@ (80042a8 <_printf_i+0x23c>)
 80041dc:	2778      	movs	r7, #120	@ 0x78
 80041de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	6831      	ldr	r1, [r6, #0]
 80041e6:	061f      	lsls	r7, r3, #24
 80041e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80041ec:	d402      	bmi.n	80041f4 <_printf_i+0x188>
 80041ee:	065f      	lsls	r7, r3, #25
 80041f0:	bf48      	it	mi
 80041f2:	b2ad      	uxthmi	r5, r5
 80041f4:	6031      	str	r1, [r6, #0]
 80041f6:	07d9      	lsls	r1, r3, #31
 80041f8:	bf44      	itt	mi
 80041fa:	f043 0320 	orrmi.w	r3, r3, #32
 80041fe:	6023      	strmi	r3, [r4, #0]
 8004200:	b11d      	cbz	r5, 800420a <_printf_i+0x19e>
 8004202:	2310      	movs	r3, #16
 8004204:	e7ac      	b.n	8004160 <_printf_i+0xf4>
 8004206:	4827      	ldr	r0, [pc, #156]	@ (80042a4 <_printf_i+0x238>)
 8004208:	e7e9      	b.n	80041de <_printf_i+0x172>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	f023 0320 	bic.w	r3, r3, #32
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	e7f6      	b.n	8004202 <_printf_i+0x196>
 8004214:	4616      	mov	r6, r2
 8004216:	e7bd      	b.n	8004194 <_printf_i+0x128>
 8004218:	6833      	ldr	r3, [r6, #0]
 800421a:	6825      	ldr	r5, [r4, #0]
 800421c:	6961      	ldr	r1, [r4, #20]
 800421e:	1d18      	adds	r0, r3, #4
 8004220:	6030      	str	r0, [r6, #0]
 8004222:	062e      	lsls	r6, r5, #24
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	d501      	bpl.n	800422c <_printf_i+0x1c0>
 8004228:	6019      	str	r1, [r3, #0]
 800422a:	e002      	b.n	8004232 <_printf_i+0x1c6>
 800422c:	0668      	lsls	r0, r5, #25
 800422e:	d5fb      	bpl.n	8004228 <_printf_i+0x1bc>
 8004230:	8019      	strh	r1, [r3, #0]
 8004232:	2300      	movs	r3, #0
 8004234:	6123      	str	r3, [r4, #16]
 8004236:	4616      	mov	r6, r2
 8004238:	e7bc      	b.n	80041b4 <_printf_i+0x148>
 800423a:	6833      	ldr	r3, [r6, #0]
 800423c:	1d1a      	adds	r2, r3, #4
 800423e:	6032      	str	r2, [r6, #0]
 8004240:	681e      	ldr	r6, [r3, #0]
 8004242:	6862      	ldr	r2, [r4, #4]
 8004244:	2100      	movs	r1, #0
 8004246:	4630      	mov	r0, r6
 8004248:	f7fb ffea 	bl	8000220 <memchr>
 800424c:	b108      	cbz	r0, 8004252 <_printf_i+0x1e6>
 800424e:	1b80      	subs	r0, r0, r6
 8004250:	6060      	str	r0, [r4, #4]
 8004252:	6863      	ldr	r3, [r4, #4]
 8004254:	6123      	str	r3, [r4, #16]
 8004256:	2300      	movs	r3, #0
 8004258:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800425c:	e7aa      	b.n	80041b4 <_printf_i+0x148>
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	4632      	mov	r2, r6
 8004262:	4649      	mov	r1, r9
 8004264:	4640      	mov	r0, r8
 8004266:	47d0      	blx	sl
 8004268:	3001      	adds	r0, #1
 800426a:	d0ad      	beq.n	80041c8 <_printf_i+0x15c>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	079b      	lsls	r3, r3, #30
 8004270:	d413      	bmi.n	800429a <_printf_i+0x22e>
 8004272:	68e0      	ldr	r0, [r4, #12]
 8004274:	9b03      	ldr	r3, [sp, #12]
 8004276:	4298      	cmp	r0, r3
 8004278:	bfb8      	it	lt
 800427a:	4618      	movlt	r0, r3
 800427c:	e7a6      	b.n	80041cc <_printf_i+0x160>
 800427e:	2301      	movs	r3, #1
 8004280:	4632      	mov	r2, r6
 8004282:	4649      	mov	r1, r9
 8004284:	4640      	mov	r0, r8
 8004286:	47d0      	blx	sl
 8004288:	3001      	adds	r0, #1
 800428a:	d09d      	beq.n	80041c8 <_printf_i+0x15c>
 800428c:	3501      	adds	r5, #1
 800428e:	68e3      	ldr	r3, [r4, #12]
 8004290:	9903      	ldr	r1, [sp, #12]
 8004292:	1a5b      	subs	r3, r3, r1
 8004294:	42ab      	cmp	r3, r5
 8004296:	dcf2      	bgt.n	800427e <_printf_i+0x212>
 8004298:	e7eb      	b.n	8004272 <_printf_i+0x206>
 800429a:	2500      	movs	r5, #0
 800429c:	f104 0619 	add.w	r6, r4, #25
 80042a0:	e7f5      	b.n	800428e <_printf_i+0x222>
 80042a2:	bf00      	nop
 80042a4:	08004439 	.word	0x08004439
 80042a8:	0800444a 	.word	0x0800444a

080042ac <memmove>:
 80042ac:	4288      	cmp	r0, r1
 80042ae:	b510      	push	{r4, lr}
 80042b0:	eb01 0402 	add.w	r4, r1, r2
 80042b4:	d902      	bls.n	80042bc <memmove+0x10>
 80042b6:	4284      	cmp	r4, r0
 80042b8:	4623      	mov	r3, r4
 80042ba:	d807      	bhi.n	80042cc <memmove+0x20>
 80042bc:	1e43      	subs	r3, r0, #1
 80042be:	42a1      	cmp	r1, r4
 80042c0:	d008      	beq.n	80042d4 <memmove+0x28>
 80042c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042ca:	e7f8      	b.n	80042be <memmove+0x12>
 80042cc:	4402      	add	r2, r0
 80042ce:	4601      	mov	r1, r0
 80042d0:	428a      	cmp	r2, r1
 80042d2:	d100      	bne.n	80042d6 <memmove+0x2a>
 80042d4:	bd10      	pop	{r4, pc}
 80042d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042de:	e7f7      	b.n	80042d0 <memmove+0x24>

080042e0 <_sbrk_r>:
 80042e0:	b538      	push	{r3, r4, r5, lr}
 80042e2:	4d06      	ldr	r5, [pc, #24]	@ (80042fc <_sbrk_r+0x1c>)
 80042e4:	2300      	movs	r3, #0
 80042e6:	4604      	mov	r4, r0
 80042e8:	4608      	mov	r0, r1
 80042ea:	602b      	str	r3, [r5, #0]
 80042ec:	f7fc fe44 	bl	8000f78 <_sbrk>
 80042f0:	1c43      	adds	r3, r0, #1
 80042f2:	d102      	bne.n	80042fa <_sbrk_r+0x1a>
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	b103      	cbz	r3, 80042fa <_sbrk_r+0x1a>
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	200002c4 	.word	0x200002c4

08004300 <memcpy>:
 8004300:	440a      	add	r2, r1
 8004302:	4291      	cmp	r1, r2
 8004304:	f100 33ff 	add.w	r3, r0, #4294967295
 8004308:	d100      	bne.n	800430c <memcpy+0xc>
 800430a:	4770      	bx	lr
 800430c:	b510      	push	{r4, lr}
 800430e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004316:	4291      	cmp	r1, r2
 8004318:	d1f9      	bne.n	800430e <memcpy+0xe>
 800431a:	bd10      	pop	{r4, pc}

0800431c <_realloc_r>:
 800431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004320:	4680      	mov	r8, r0
 8004322:	4615      	mov	r5, r2
 8004324:	460c      	mov	r4, r1
 8004326:	b921      	cbnz	r1, 8004332 <_realloc_r+0x16>
 8004328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800432c:	4611      	mov	r1, r2
 800432e:	f7ff bc4b 	b.w	8003bc8 <_malloc_r>
 8004332:	b92a      	cbnz	r2, 8004340 <_realloc_r+0x24>
 8004334:	f7ff fbdc 	bl	8003af0 <_free_r>
 8004338:	2400      	movs	r4, #0
 800433a:	4620      	mov	r0, r4
 800433c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004340:	f000 f81a 	bl	8004378 <_malloc_usable_size_r>
 8004344:	4285      	cmp	r5, r0
 8004346:	4606      	mov	r6, r0
 8004348:	d802      	bhi.n	8004350 <_realloc_r+0x34>
 800434a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800434e:	d8f4      	bhi.n	800433a <_realloc_r+0x1e>
 8004350:	4629      	mov	r1, r5
 8004352:	4640      	mov	r0, r8
 8004354:	f7ff fc38 	bl	8003bc8 <_malloc_r>
 8004358:	4607      	mov	r7, r0
 800435a:	2800      	cmp	r0, #0
 800435c:	d0ec      	beq.n	8004338 <_realloc_r+0x1c>
 800435e:	42b5      	cmp	r5, r6
 8004360:	462a      	mov	r2, r5
 8004362:	4621      	mov	r1, r4
 8004364:	bf28      	it	cs
 8004366:	4632      	movcs	r2, r6
 8004368:	f7ff ffca 	bl	8004300 <memcpy>
 800436c:	4621      	mov	r1, r4
 800436e:	4640      	mov	r0, r8
 8004370:	f7ff fbbe 	bl	8003af0 <_free_r>
 8004374:	463c      	mov	r4, r7
 8004376:	e7e0      	b.n	800433a <_realloc_r+0x1e>

08004378 <_malloc_usable_size_r>:
 8004378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800437c:	1f18      	subs	r0, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	bfbc      	itt	lt
 8004382:	580b      	ldrlt	r3, [r1, r0]
 8004384:	18c0      	addlt	r0, r0, r3
 8004386:	4770      	bx	lr

08004388 <_init>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	bf00      	nop
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr

08004394 <_fini>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	bf00      	nop
 8004398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439a:	bc08      	pop	{r3}
 800439c:	469e      	mov	lr, r3
 800439e:	4770      	bx	lr
