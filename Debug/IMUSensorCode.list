
IMUSensorCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006714  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  080068e8  080068e8  000078e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d30  08006d30  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006d30  08006d30  00007d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d38  08006d38  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d38  08006d38  00007d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d3c  08006d3c  00007d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006d40  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001d4  08006f14  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08006f14  000084d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d769  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202b  00000000  00000000  0001596d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00017998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ad  00000000  00000000  00018608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f35  00000000  00000000  00018fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a61  00000000  00000000  0003beea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce636  00000000  00000000  0004c94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011af81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ec  00000000  00000000  0011afc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0011f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080068cc 	.word	0x080068cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080068cc 	.word	0x080068cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <FEB_Main_Setup>:
extern UART_HandleTypeDef huart2;

BNO08x_RVC_Data sensor_data;
//char buffer[256];  // Buffer to hold formatted strings

void FEB_Main_Setup (void) {
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
	        Error_Handler();
	    }
	    sprintf(buffer, "BNO08x sensor initialized successfully.\r\n");
	    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <FEB_Main_Loop>:

void FEB_Main_Loop(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	// Read sensor data
	BNO08x_RVC_Read(&huart4);
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <FEB_Main_Loop+0x18>)
 8000f8e:	f000 f80b 	bl	8000fa8 <BNO08x_RVC_Read>
	// Handle reading error
	sprintf(buffer, "Failed to read sensor data.\r\n");
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
	} */

	HAL_Delay(500); // Delay for 1 second
 8000f92:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f96:	f000 ff41 	bl	8001e1c <HAL_Delay>

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200002f0 	.word	0x200002f0
 8000fa4:	00000000 	.word	0x00000000

08000fa8 <BNO08x_RVC_Read>:
int BNO08x_RVC_Init(UART_HandleTypeDef *huart) {
    // IF we need initilization
    return 0;
}

int BNO08x_RVC_Read(UART_HandleTypeDef *huart) {
 8000fa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fac:	b0d6      	sub	sp, #344	@ 0x158
 8000fae:	af04      	add	r7, sp, #16
 8000fb0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000fb4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000fb8:	6018      	str	r0, [r3, #0]
    //uint8_t checksum = 0;
    BNO08x_RVC_Data data;
    char debug_buffer[256]; // Buffer for debug printing

    // Controlling the header
    if (HAL_UART_Receive(huart, header, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000fba:	f507 71a2 	add.w	r1, r7, #324	@ 0x144
 8000fbe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000fc2:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fca:	2202      	movs	r2, #2
 8000fcc:	6800      	ldr	r0, [r0, #0]
 8000fce:	f002 fa6d 	bl	80034ac <HAL_UART_Receive>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d016      	beq.n	8001006 <BNO08x_RVC_Read+0x5e>
        sprintf(debug_buffer, "Error: Failed to receive header.\r\n");
 8000fd8:	f107 0318 	add.w	r3, r7, #24
 8000fdc:	49ce      	ldr	r1, [pc, #824]	@ (8001318 <BNO08x_RVC_Read+0x370>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f003 fa84 	bl	80044ec <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)debug_buffer, strlen(debug_buffer), HAL_MAX_DELAY);
 8000fe4:	f107 0318 	add.w	r3, r7, #24
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff f961 	bl	80002b0 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	f107 0118 	add.w	r1, r7, #24
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ffa:	48c8      	ldr	r0, [pc, #800]	@ (800131c <BNO08x_RVC_Read+0x374>)
 8000ffc:	f002 f9cb 	bl	8003396 <HAL_UART_Transmit>
        return -1;
 8001000:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001004:	e179      	b.n	80012fa <BNO08x_RVC_Read+0x352>
    }

    if (header[0] != 0xAA || header[1] != 0xAA) {
 8001006:	f897 3144 	ldrb.w	r3, [r7, #324]	@ 0x144
 800100a:	2baa      	cmp	r3, #170	@ 0xaa
 800100c:	d103      	bne.n	8001016 <BNO08x_RVC_Read+0x6e>
 800100e:	f897 3145 	ldrb.w	r3, [r7, #325]	@ 0x145
 8001012:	2baa      	cmp	r3, #170	@ 0xaa
 8001014:	d01a      	beq.n	800104c <BNO08x_RVC_Read+0xa4>
        sprintf(debug_buffer, "Error: Invalid header (0x%02X 0x%02X).\r\n", header[0], header[1]);
 8001016:	f897 3144 	ldrb.w	r3, [r7, #324]	@ 0x144
 800101a:	461a      	mov	r2, r3
 800101c:	f897 3145 	ldrb.w	r3, [r7, #325]	@ 0x145
 8001020:	f107 0018 	add.w	r0, r7, #24
 8001024:	49be      	ldr	r1, [pc, #760]	@ (8001320 <BNO08x_RVC_Read+0x378>)
 8001026:	f003 fa61 	bl	80044ec <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)debug_buffer, strlen(debug_buffer), HAL_MAX_DELAY);
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f93e 	bl	80002b0 <strlen>
 8001034:	4603      	mov	r3, r0
 8001036:	b29a      	uxth	r2, r3
 8001038:	f107 0118 	add.w	r1, r7, #24
 800103c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001040:	48b6      	ldr	r0, [pc, #728]	@ (800131c <BNO08x_RVC_Read+0x374>)
 8001042:	f002 f9a8 	bl	8003396 <HAL_UART_Transmit>
        return -1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104a:	e156      	b.n	80012fa <BNO08x_RVC_Read+0x352>
    }

    // Receiving the remaining 17 bytes
    if (HAL_UART_Receive(huart, buffer, 18, HAL_MAX_DELAY) != HAL_OK) { //17
 800104c:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8001050:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001054:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 8001058:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800105c:	2212      	movs	r2, #18
 800105e:	6800      	ldr	r0, [r0, #0]
 8001060:	f002 fa24 	bl	80034ac <HAL_UART_Receive>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d016      	beq.n	8001098 <BNO08x_RVC_Read+0xf0>
        sprintf(debug_buffer, "Error: Failed to receive payload.\r\n");
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	49ad      	ldr	r1, [pc, #692]	@ (8001324 <BNO08x_RVC_Read+0x37c>)
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fa3b 	bl	80044ec <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)debug_buffer, strlen(debug_buffer), HAL_MAX_DELAY);
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f918 	bl	80002b0 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	b29a      	uxth	r2, r3
 8001084:	f107 0118 	add.w	r1, r7, #24
 8001088:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800108c:	48a3      	ldr	r0, [pc, #652]	@ (800131c <BNO08x_RVC_Read+0x374>)
 800108e:	f002 f982 	bl	8003396 <HAL_UART_Transmit>
        return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001096:	e130      	b.n	80012fa <BNO08x_RVC_Read+0x352>
       return -1;
    } */

    // Raw data -> Meaningful data
    int16_t raw_data[6];
    for (uint8_t i = 0; i < 6; i++) {
 8001098:	2300      	movs	r3, #0
 800109a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 800109e:	e023      	b.n	80010e8 <BNO08x_RVC_Read+0x140>
        raw_data[i] = (int16_t)((buffer[1 + (i * 2) + 1] << 8) | buffer[1 + (i * 2)]);
 80010a0:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 80010a4:	3301      	adds	r3, #1
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80010ac:	443b      	add	r3, r7
 80010ae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b219      	sxth	r1, r3
 80010b6:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	3301      	adds	r3, #1
 80010be:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80010c2:	443b      	add	r3, r7
 80010c4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	f897 2147 	ldrb.w	r2, [r7, #327]	@ 0x147
 80010ce:	430b      	orrs	r3, r1
 80010d0:	b219      	sxth	r1, r3
 80010d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80010d6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80010da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint8_t i = 0; i < 6; i++) {
 80010de:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 80010e2:	3301      	adds	r3, #1
 80010e4:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 80010e8:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d9d7      	bls.n	80010a0 <BNO08x_RVC_Read+0xf8>
    }

    // Conversion
    data.yaw = (float)raw_data[0] * DEGREE_SCALE;
 80010f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80010f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80010f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001104:	ee17 0a90 	vmov	r0, s15
 8001108:	f7ff fa3e 	bl	8000588 <__aeabi_f2d>
 800110c:	a37e      	add	r3, pc, #504	@ (adr r3, 8001308 <BNO08x_RVC_Read+0x360>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff fa91 	bl	8000638 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd63 	bl	8000be8 <__aeabi_d2f>
 8001122:	4603      	mov	r3, r0
 8001124:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    data.pitch = (float)raw_data[1] * DEGREE_SCALE;
 8001128:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800112c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001130:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	ee17 0a90 	vmov	r0, s15
 8001140:	f7ff fa22 	bl	8000588 <__aeabi_f2d>
 8001144:	a370      	add	r3, pc, #448	@ (adr r3, 8001308 <BNO08x_RVC_Read+0x360>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff fa75 	bl	8000638 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fd47 	bl	8000be8 <__aeabi_d2f>
 800115a:	4603      	mov	r3, r0
 800115c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    data.roll = (float)raw_data[2] * DEGREE_SCALE;
 8001160:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001164:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001168:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	ee17 0a90 	vmov	r0, s15
 8001178:	f7ff fa06 	bl	8000588 <__aeabi_f2d>
 800117c:	a362      	add	r3, pc, #392	@ (adr r3, 8001308 <BNO08x_RVC_Read+0x360>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fa59 	bl	8000638 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fd2b 	bl	8000be8 <__aeabi_d2f>
 8001192:	4603      	mov	r3, r0
 8001194:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    data.x_accel = (float)raw_data[3] * MILLI_G_TO_MS2;
 8001198:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800119c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80011a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ac:	ee17 0a90 	vmov	r0, s15
 80011b0:	f7ff f9ea 	bl	8000588 <__aeabi_f2d>
 80011b4:	a356      	add	r3, pc, #344	@ (adr r3, 8001310 <BNO08x_RVC_Read+0x368>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fa3d 	bl	8000638 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fd0f 	bl	8000be8 <__aeabi_d2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    data.y_accel = (float)raw_data[4] * MILLI_G_TO_MS2;
 80011d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80011d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80011d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e4:	ee17 0a90 	vmov	r0, s15
 80011e8:	f7ff f9ce 	bl	8000588 <__aeabi_f2d>
 80011ec:	a348      	add	r3, pc, #288	@ (adr r3, 8001310 <BNO08x_RVC_Read+0x368>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff fa21 	bl	8000638 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fcf3 	bl	8000be8 <__aeabi_d2f>
 8001202:	4603      	mov	r3, r0
 8001204:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    data.z_accel = (float)raw_data[5] * MILLI_G_TO_MS2;
 8001208:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800120c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001210:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff f9b2 	bl	8000588 <__aeabi_f2d>
 8001224:	a33a      	add	r3, pc, #232	@ (adr r3, 8001310 <BNO08x_RVC_Read+0x368>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fa05 	bl	8000638 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fcd7 	bl	8000be8 <__aeabi_d2f>
 800123a:	4603      	mov	r3, r0
 800123c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    // Printing the data to see
    sprintf(debug_buffer, "Yaw: %.2f, Pitch: %.2f, Roll: %.2f\r\n", data.yaw, data.pitch, data.roll);
 8001240:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f99f 	bl	8000588 <__aeabi_f2d>
 800124a:	4680      	mov	r8, r0
 800124c:	4689      	mov	r9, r1
 800124e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f998 	bl	8000588 <__aeabi_f2d>
 8001258:	4604      	mov	r4, r0
 800125a:	460d      	mov	r5, r1
 800125c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f991 	bl	8000588 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	f107 0018 	add.w	r0, r7, #24
 800126e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001272:	e9cd 4500 	strd	r4, r5, [sp]
 8001276:	4642      	mov	r2, r8
 8001278:	464b      	mov	r3, r9
 800127a:	492b      	ldr	r1, [pc, #172]	@ (8001328 <BNO08x_RVC_Read+0x380>)
 800127c:	f003 f936 	bl	80044ec <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)debug_buffer, strlen(debug_buffer), HAL_MAX_DELAY);
 8001280:	f107 0318 	add.w	r3, r7, #24
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f813 	bl	80002b0 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	f107 0118 	add.w	r1, r7, #24
 8001292:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001296:	4821      	ldr	r0, [pc, #132]	@ (800131c <BNO08x_RVC_Read+0x374>)
 8001298:	f002 f87d 	bl	8003396 <HAL_UART_Transmit>
    sprintf(debug_buffer, "Accel X: %.2f, Y: %.2f, Z: %.2f\r\n", data.x_accel, data.y_accel, data.z_accel);
 800129c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f971 	bl	8000588 <__aeabi_f2d>
 80012a6:	4680      	mov	r8, r0
 80012a8:	4689      	mov	r9, r1
 80012aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f96a 	bl	8000588 <__aeabi_f2d>
 80012b4:	4604      	mov	r4, r0
 80012b6:	460d      	mov	r5, r1
 80012b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f963 	bl	8000588 <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	f107 0018 	add.w	r0, r7, #24
 80012ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012ce:	e9cd 4500 	strd	r4, r5, [sp]
 80012d2:	4642      	mov	r2, r8
 80012d4:	464b      	mov	r3, r9
 80012d6:	4915      	ldr	r1, [pc, #84]	@ (800132c <BNO08x_RVC_Read+0x384>)
 80012d8:	f003 f908 	bl	80044ec <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)debug_buffer, strlen(debug_buffer), HAL_MAX_DELAY);
 80012dc:	f107 0318 	add.w	r3, r7, #24
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7fe ffe5 	bl	80002b0 <strlen>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	f107 0118 	add.w	r1, r7, #24
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012f2:	480a      	ldr	r0, [pc, #40]	@ (800131c <BNO08x_RVC_Read+0x374>)
 80012f4:	f002 f84f 	bl	8003396 <HAL_UART_Transmit>

    return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001300:	46bd      	mov	sp, r7
 8001302:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001306:	bf00      	nop
 8001308:	47ae147b 	.word	0x47ae147b
 800130c:	3f847ae1 	.word	0x3f847ae1
 8001310:	fe40e31f 	.word	0xfe40e31f
 8001314:	3f841588 	.word	0x3f841588
 8001318:	080068e8 	.word	0x080068e8
 800131c:	20000338 	.word	0x20000338
 8001320:	0800690c 	.word	0x0800690c
 8001324:	08006938 	.word	0x08006938
 8001328:	0800695c 	.word	0x0800695c
 800132c:	08006984 	.word	0x08006984

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001334:	f000 fd00 	bl	8001d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001338:	f000 f812 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133c:	f000 f964 	bl	8001608 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001340:	f000 f938 	bl	80015b4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001344:	f000 f8d6 	bl	80014f4 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001348:	f000 f878 	bl	800143c <MX_I2C1_Init>
  MX_I2C3_Init();
 800134c:	f000 f8a4 	bl	8001498 <MX_I2C3_Init>
  MX_UART4_Init();
 8001350:	f000 f906 	bl	8001560 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  FEB_Main_Setup();
 8001354:	f7ff fe10 	bl	8000f78 <FEB_Main_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	FEB_Main_Loop();
 8001358:	f7ff fe16 	bl	8000f88 <FEB_Main_Loop>
 800135c:	e7fc      	b.n	8001358 <main+0x28>
	...

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	@ 0x50
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2234      	movs	r2, #52	@ 0x34
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f003 f99e 	bl	80046b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <SystemClock_Config+0xd4>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	4a29      	ldr	r2, [pc, #164]	@ (8001434 <SystemClock_Config+0xd4>)
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001392:	6413      	str	r3, [r2, #64]	@ 0x40
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <SystemClock_Config+0xd4>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013a0:	2300      	movs	r3, #0
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	4b24      	ldr	r3, [pc, #144]	@ (8001438 <SystemClock_Config+0xd8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013ac:	4a22      	ldr	r2, [pc, #136]	@ (8001438 <SystemClock_Config+0xd8>)
 80013ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b20      	ldr	r3, [pc, #128]	@ (8001438 <SystemClock_Config+0xd8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c8:	2310      	movs	r3, #16
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013cc:	2302      	movs	r3, #2
 80013ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d0:	2300      	movs	r3, #0
 80013d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013d4:	2310      	movs	r3, #16
 80013d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013d8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013de:	2304      	movs	r3, #4
 80013e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013e2:	2302      	movs	r3, #2
 80013e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 fc5a 	bl	8002ca8 <HAL_RCC_OscConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013fa:	f000 f9ad 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fe:	230f      	movs	r3, #15
 8001400:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001402:	2302      	movs	r3, #2
 8001404:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800140a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800140e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	2102      	movs	r1, #2
 800141a:	4618      	mov	r0, r3
 800141c:	f001 f8fa 	bl	8002614 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001426:	f000 f997 	bl	8001758 <Error_Handler>
  }
}
 800142a:	bf00      	nop
 800142c:	3750      	adds	r7, #80	@ 0x50
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40007000 	.word	0x40007000

0800143c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001440:	4b12      	ldr	r3, [pc, #72]	@ (800148c <MX_I2C1_Init+0x50>)
 8001442:	4a13      	ldr	r2, [pc, #76]	@ (8001490 <MX_I2C1_Init+0x54>)
 8001444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001446:	4b11      	ldr	r3, [pc, #68]	@ (800148c <MX_I2C1_Init+0x50>)
 8001448:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <MX_I2C1_Init+0x58>)
 800144a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800144c:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <MX_I2C1_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <MX_I2C1_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_I2C1_Init+0x50>)
 800145a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800145e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001460:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <MX_I2C1_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_I2C1_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146c:	4b07      	ldr	r3, [pc, #28]	@ (800148c <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	@ (800148c <MX_I2C1_Init+0x50>)
 800147a:	f000 ff87 	bl	800238c <HAL_I2C_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001484:	f000 f968 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200001f0 	.word	0x200001f0
 8001490:	40005400 	.word	0x40005400
 8001494:	000186a0 	.word	0x000186a0

08001498 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <MX_I2C3_Init+0x50>)
 800149e:	4a13      	ldr	r2, [pc, #76]	@ (80014ec <MX_I2C3_Init+0x54>)
 80014a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_I2C3_Init+0x50>)
 80014a4:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <MX_I2C3_Init+0x58>)
 80014a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <MX_I2C3_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_I2C3_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_I2C3_Init+0x50>)
 80014b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <MX_I2C3_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_I2C3_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c8:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <MX_I2C3_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_I2C3_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <MX_I2C3_Init+0x50>)
 80014d6:	f000 ff59 	bl	800238c <HAL_I2C_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014e0:	f000 f93a 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000244 	.word	0x20000244
 80014ec:	40005c00 	.word	0x40005c00
 80014f0:	000186a0 	.word	0x000186a0

080014f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014f8:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <MX_SPI2_Init+0x64>)
 80014fa:	4a18      	ldr	r2, [pc, #96]	@ (800155c <MX_SPI2_Init+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014fe:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <MX_SPI2_Init+0x64>)
 8001500:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001504:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <MX_SPI2_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <MX_SPI2_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_SPI2_Init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001518:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_SPI2_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_SPI2_Init+0x64>)
 8001520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001524:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <MX_SPI2_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800152c:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <MX_SPI2_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <MX_SPI2_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <MX_SPI2_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <MX_SPI2_Init+0x64>)
 8001540:	220a      	movs	r2, #10
 8001542:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001544:	4804      	ldr	r0, [pc, #16]	@ (8001558 <MX_SPI2_Init+0x64>)
 8001546:	f001 fe4d 	bl	80031e4 <HAL_SPI_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001550:	f000 f902 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000298 	.word	0x20000298
 800155c:	40003800 	.word	0x40003800

08001560 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_UART4_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <MX_UART4_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <MX_UART4_Init+0x4c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_UART4_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_UART4_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <MX_UART4_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_UART4_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <MX_UART4_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_UART4_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_UART4_Init+0x4c>)
 8001598:	f001 fead 	bl	80032f6 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80015a2:	f000 f8d9 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200002f0 	.word	0x200002f0
 80015b0:	40004c00 	.word	0x40004c00

080015b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <MX_USART2_UART_Init+0x4c>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <MX_USART2_UART_Init+0x50>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <MX_USART2_UART_Init+0x4c>)
 80015c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <MX_USART2_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <MX_USART2_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <MX_USART2_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <MX_USART2_UART_Init+0x4c>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <MX_USART2_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <MX_USART2_UART_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	@ (8001600 <MX_USART2_UART_Init+0x4c>)
 80015ec:	f001 fe83 	bl	80032f6 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015f6:	f000 f8af 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000338 	.word	0x20000338
 8001604:	40004400 	.word	0x40004400

08001608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	@ 0x28
 800160c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b49      	ldr	r3, [pc, #292]	@ (8001748 <MX_GPIO_Init+0x140>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a48      	ldr	r2, [pc, #288]	@ (8001748 <MX_GPIO_Init+0x140>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b46      	ldr	r3, [pc, #280]	@ (8001748 <MX_GPIO_Init+0x140>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b42      	ldr	r3, [pc, #264]	@ (8001748 <MX_GPIO_Init+0x140>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a41      	ldr	r2, [pc, #260]	@ (8001748 <MX_GPIO_Init+0x140>)
 8001644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b3f      	ldr	r3, [pc, #252]	@ (8001748 <MX_GPIO_Init+0x140>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <MX_GPIO_Init+0x140>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a3a      	ldr	r2, [pc, #232]	@ (8001748 <MX_GPIO_Init+0x140>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b38      	ldr	r3, [pc, #224]	@ (8001748 <MX_GPIO_Init+0x140>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <MX_GPIO_Init+0x140>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a33      	ldr	r2, [pc, #204]	@ (8001748 <MX_GPIO_Init+0x140>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <MX_GPIO_Init+0x140>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2120      	movs	r1, #32
 8001692:	482e      	ldr	r0, [pc, #184]	@ (800174c <MX_GPIO_Init+0x144>)
 8001694:	f000 fe60 	bl	8002358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800169e:	482c      	ldr	r0, [pc, #176]	@ (8001750 <MX_GPIO_Init+0x148>)
 80016a0:	f000 fe5a 	bl	8002358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016aa:	482a      	ldr	r0, [pc, #168]	@ (8001754 <MX_GPIO_Init+0x14c>)
 80016ac:	f000 fe54 	bl	8002358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4823      	ldr	r0, [pc, #140]	@ (8001754 <MX_GPIO_Init+0x14c>)
 80016c8:	f000 fcb2 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016cc:	2320      	movs	r3, #32
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	481a      	ldr	r0, [pc, #104]	@ (800174c <MX_GPIO_Init+0x144>)
 80016e4:	f000 fca4 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4813      	ldr	r0, [pc, #76]	@ (8001750 <MX_GPIO_Init+0x148>)
 8001702:	f000 fc95 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001706:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	480e      	ldr	r0, [pc, #56]	@ (8001754 <MX_GPIO_Init+0x14c>)
 800171c:	f000 fc88 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4806      	ldr	r0, [pc, #24]	@ (8001754 <MX_GPIO_Init+0x14c>)
 800173a:	f000 fc79 	bl	8002030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	@ 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000
 8001750:	40020400 	.word	0x40020400
 8001754:	40020800 	.word	0x40020800

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <Error_Handler+0x8>

08001764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <HAL_MspInit+0x4c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	4a0f      	ldr	r2, [pc, #60]	@ (80017b0 <HAL_MspInit+0x4c>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001778:	6453      	str	r3, [r2, #68]	@ 0x44
 800177a:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <HAL_MspInit+0x4c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <HAL_MspInit+0x4c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <HAL_MspInit+0x4c>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	@ 0x40
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_MspInit+0x4c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017a2:	2007      	movs	r0, #7
 80017a4:	f000 fc10 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800

080017b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	@ 0x30
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a41      	ldr	r2, [pc, #260]	@ (80018d8 <HAL_I2C_MspInit+0x124>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d12c      	bne.n	8001830 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	4b40      	ldr	r3, [pc, #256]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a3f      	ldr	r2, [pc, #252]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b3d      	ldr	r3, [pc, #244]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017f2:	23c0      	movs	r3, #192	@ 0xc0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f6:	2312      	movs	r3, #18
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001802:	2304      	movs	r3, #4
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	4834      	ldr	r0, [pc, #208]	@ (80018e0 <HAL_I2C_MspInit+0x12c>)
 800180e:	f000 fc0f 	bl	8002030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	4a30      	ldr	r2, [pc, #192]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 800181c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001820:	6413      	str	r3, [r2, #64]	@ 0x40
 8001822:	4b2e      	ldr	r3, [pc, #184]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800182e:	e04f      	b.n	80018d0 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2b      	ldr	r2, [pc, #172]	@ (80018e4 <HAL_I2C_MspInit+0x130>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d14a      	bne.n	80018d0 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b27      	ldr	r3, [pc, #156]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a26      	ldr	r2, [pc, #152]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b24      	ldr	r3, [pc, #144]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a1f      	ldr	r2, [pc, #124]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001872:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001878:	2312      	movs	r3, #18
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001884:	2304      	movs	r3, #4
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4619      	mov	r1, r3
 800188e:	4816      	ldr	r0, [pc, #88]	@ (80018e8 <HAL_I2C_MspInit+0x134>)
 8001890:	f000 fbce 	bl	8002030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001894:	2310      	movs	r3, #16
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001898:	2312      	movs	r3, #18
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018a4:	2304      	movs	r3, #4
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	480c      	ldr	r0, [pc, #48]	@ (80018e0 <HAL_I2C_MspInit+0x12c>)
 80018b0:	f000 fbbe 	bl	8002030 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	4a07      	ldr	r2, [pc, #28]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 80018be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_I2C_MspInit+0x128>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
}
 80018d0:	bf00      	nop
 80018d2:	3730      	adds	r7, #48	@ 0x30
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40005400 	.word	0x40005400
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40005c00 	.word	0x40005c00
 80018e8:	40020000 	.word	0x40020000

080018ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a30      	ldr	r2, [pc, #192]	@ (80019cc <HAL_SPI_MspInit+0xe0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d15a      	bne.n	80019c4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <HAL_SPI_MspInit+0xe4>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	4a2e      	ldr	r2, [pc, #184]	@ (80019d0 <HAL_SPI_MspInit+0xe4>)
 8001918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800191c:	6413      	str	r3, [r2, #64]	@ 0x40
 800191e:	4b2c      	ldr	r3, [pc, #176]	@ (80019d0 <HAL_SPI_MspInit+0xe4>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <HAL_SPI_MspInit+0xe4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a27      	ldr	r2, [pc, #156]	@ (80019d0 <HAL_SPI_MspInit+0xe4>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <HAL_SPI_MspInit+0xe4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <HAL_SPI_MspInit+0xe4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	4a20      	ldr	r2, [pc, #128]	@ (80019d0 <HAL_SPI_MspInit+0xe4>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	@ 0x30
 8001956:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <HAL_SPI_MspInit+0xe4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001962:	2302      	movs	r3, #2
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001972:	2307      	movs	r3, #7
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4815      	ldr	r0, [pc, #84]	@ (80019d4 <HAL_SPI_MspInit+0xe8>)
 800197e:	f000 fb57 	bl	8002030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001982:	2304      	movs	r3, #4
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001992:	2305      	movs	r3, #5
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	480d      	ldr	r0, [pc, #52]	@ (80019d4 <HAL_SPI_MspInit+0xe8>)
 800199e:	f000 fb47 	bl	8002030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019b4:	2305      	movs	r3, #5
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	4806      	ldr	r0, [pc, #24]	@ (80019d8 <HAL_SPI_MspInit+0xec>)
 80019c0:	f000 fb36 	bl	8002030 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	@ 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40003800 	.word	0x40003800
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40020400 	.word	0x40020400

080019dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	@ 0x30
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a32      	ldr	r2, [pc, #200]	@ (8001ac4 <HAL_UART_MspInit+0xe8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d12c      	bne.n	8001a58 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a30      	ldr	r2, [pc, #192]	@ (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a29      	ldr	r2, [pc, #164]	@ (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b27      	ldr	r3, [pc, #156]	@ (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a36:	2303      	movs	r3, #3
 8001a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a46:	2308      	movs	r3, #8
 8001a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	481e      	ldr	r0, [pc, #120]	@ (8001acc <HAL_UART_MspInit+0xf0>)
 8001a52:	f000 faed 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a56:	e030      	b.n	8001aba <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad0 <HAL_UART_MspInit+0xf4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d12b      	bne.n	8001aba <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	4a17      	ldr	r2, [pc, #92]	@ (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a10      	ldr	r2, [pc, #64]	@ (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a9a:	230c      	movs	r3, #12
 8001a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aaa:	2307      	movs	r3, #7
 8001aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4805      	ldr	r0, [pc, #20]	@ (8001acc <HAL_UART_MspInit+0xf0>)
 8001ab6:	f000 fabb 	bl	8002030 <HAL_GPIO_Init>
}
 8001aba:	bf00      	nop
 8001abc:	3730      	adds	r7, #48	@ 0x30
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40004c00 	.word	0x40004c00
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40004400 	.word	0x40004400

08001ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <NMI_Handler+0x4>

08001adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2a:	f000 f957 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  return 1;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_kill>:

int _kill(int pid, int sig)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b4c:	f002 fdbc 	bl	80046c8 <__errno>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2216      	movs	r2, #22
 8001b54:	601a      	str	r2, [r3, #0]
  return -1;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_exit>:

void _exit (int status)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b6a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ffe7 	bl	8001b42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <_exit+0x12>

08001b78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e00a      	b.n	8001ba0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b8a:	f3af 8000 	nop.w
 8001b8e:	4601      	mov	r1, r0
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	60ba      	str	r2, [r7, #8]
 8001b96:	b2ca      	uxtb	r2, r1
 8001b98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	dbf0      	blt.n	8001b8a <_read+0x12>
  }

  return len;
 8001ba8:	687b      	ldr	r3, [r7, #4]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e009      	b.n	8001bd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	60ba      	str	r2, [r7, #8]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf1      	blt.n	8001bc4 <_write+0x12>
  }
  return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_close>:

int _close(int file)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c12:	605a      	str	r2, [r3, #4]
  return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_isatty>:

int _isatty(int file)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c5c:	4a14      	ldr	r2, [pc, #80]	@ (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	@ (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c84:	f002 fd20 	bl	80046c8 <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	@ (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20020000 	.word	0x20020000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	20000380 	.word	0x20000380
 8001cbc:	200004d8 	.word	0x200004d8

08001cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <SystemInit+0x20>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cca:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <SystemInit+0x20>)
 8001ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ce8:	f7ff ffea 	bl	8001cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cec:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cee:	490d      	ldr	r1, [pc, #52]	@ (8001d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d04:	4c0a      	ldr	r4, [pc, #40]	@ (8001d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d12:	f002 fcdf 	bl	80046d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d16:	f7ff fb0b 	bl	8001330 <main>
  bx  lr    
 8001d1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d28:	08006d40 	.word	0x08006d40
  ldr r2, =_sbss
 8001d2c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d30:	200004d4 	.word	0x200004d4

08001d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC_IRQHandler>
	...

08001d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_Init+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <HAL_Init+0x40>)
 8001d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_Init+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <HAL_Init+0x40>)
 8001d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_Init+0x40>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 f931 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 f808 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff fcfa 	bl	8001764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_InitTick+0x54>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_InitTick+0x58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f93b 	bl	8002016 <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001db8:	f000 f911 	bl	8001fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	@ (8001dd8 <HAL_InitTick+0x5c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_IncTick+0x20>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x24>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <HAL_IncTick+0x24>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	20000384 	.word	0x20000384

08001e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_GetTick+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000384 	.word	0x20000384

08001e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff ffee 	bl	8001e04 <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffde 	bl	8001e04 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
  {
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008

08001e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	@ (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	@ (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fa8:	f7ff ff8e 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff47 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff5c 	bl	8001eac <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff8e 	bl	8001f1c <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffb0 	bl	8001f84 <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	e165      	b.n	8002318 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800204c:	2201      	movs	r2, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	f040 8154 	bne.w	8002312 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d005      	beq.n	8002082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	2b02      	cmp	r3, #2
 8002080:	d130      	bne.n	80020e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b8:	2201      	movs	r2, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 0201 	and.w	r2, r3, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d017      	beq.n	8002120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d123      	bne.n	8002174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	08da      	lsrs	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3208      	adds	r2, #8
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	08da      	lsrs	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	69b9      	ldr	r1, [r7, #24]
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80ae 	beq.w	8002312 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002330 <HAL_GPIO_Init+0x300>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	4a5c      	ldr	r2, [pc, #368]	@ (8002330 <HAL_GPIO_Init+0x300>)
 80021c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002330 <HAL_GPIO_Init+0x300>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d2:	4a58      	ldr	r2, [pc, #352]	@ (8002334 <HAL_GPIO_Init+0x304>)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002338 <HAL_GPIO_Init+0x308>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d025      	beq.n	800224a <HAL_GPIO_Init+0x21a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4e      	ldr	r2, [pc, #312]	@ (800233c <HAL_GPIO_Init+0x30c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d01f      	beq.n	8002246 <HAL_GPIO_Init+0x216>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4d      	ldr	r2, [pc, #308]	@ (8002340 <HAL_GPIO_Init+0x310>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_Init+0x212>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4c      	ldr	r2, [pc, #304]	@ (8002344 <HAL_GPIO_Init+0x314>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0x20e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4b      	ldr	r2, [pc, #300]	@ (8002348 <HAL_GPIO_Init+0x318>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_GPIO_Init+0x20a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4a      	ldr	r2, [pc, #296]	@ (800234c <HAL_GPIO_Init+0x31c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x206>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a49      	ldr	r2, [pc, #292]	@ (8002350 <HAL_GPIO_Init+0x320>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_Init+0x202>
 800222e:	2306      	movs	r3, #6
 8002230:	e00c      	b.n	800224c <HAL_GPIO_Init+0x21c>
 8002232:	2307      	movs	r3, #7
 8002234:	e00a      	b.n	800224c <HAL_GPIO_Init+0x21c>
 8002236:	2305      	movs	r3, #5
 8002238:	e008      	b.n	800224c <HAL_GPIO_Init+0x21c>
 800223a:	2304      	movs	r3, #4
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x21c>
 800223e:	2303      	movs	r3, #3
 8002240:	e004      	b.n	800224c <HAL_GPIO_Init+0x21c>
 8002242:	2302      	movs	r3, #2
 8002244:	e002      	b.n	800224c <HAL_GPIO_Init+0x21c>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_GPIO_Init+0x21c>
 800224a:	2300      	movs	r3, #0
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	f002 0203 	and.w	r2, r2, #3
 8002252:	0092      	lsls	r2, r2, #2
 8002254:	4093      	lsls	r3, r2
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800225c:	4935      	ldr	r1, [pc, #212]	@ (8002334 <HAL_GPIO_Init+0x304>)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	089b      	lsrs	r3, r3, #2
 8002262:	3302      	adds	r3, #2
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800226a:	4b3a      	ldr	r3, [pc, #232]	@ (8002354 <HAL_GPIO_Init+0x324>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800228e:	4a31      	ldr	r2, [pc, #196]	@ (8002354 <HAL_GPIO_Init+0x324>)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002294:	4b2f      	ldr	r3, [pc, #188]	@ (8002354 <HAL_GPIO_Init+0x324>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b8:	4a26      	ldr	r2, [pc, #152]	@ (8002354 <HAL_GPIO_Init+0x324>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022be:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <HAL_GPIO_Init+0x324>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002354 <HAL_GPIO_Init+0x324>)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <HAL_GPIO_Init+0x324>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800230c:	4a11      	ldr	r2, [pc, #68]	@ (8002354 <HAL_GPIO_Init+0x324>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3301      	adds	r3, #1
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	2b0f      	cmp	r3, #15
 800231c:	f67f ae96 	bls.w	800204c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3724      	adds	r7, #36	@ 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800
 8002334:	40013800 	.word	0x40013800
 8002338:	40020000 	.word	0x40020000
 800233c:	40020400 	.word	0x40020400
 8002340:	40020800 	.word	0x40020800
 8002344:	40020c00 	.word	0x40020c00
 8002348:	40021000 	.word	0x40021000
 800234c:	40021400 	.word	0x40021400
 8002350:	40021800 	.word	0x40021800
 8002354:	40013c00 	.word	0x40013c00

08002358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
 8002364:	4613      	mov	r3, r2
 8002366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002368:	787b      	ldrb	r3, [r7, #1]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002374:	e003      	b.n	800237e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002376:	887b      	ldrh	r3, [r7, #2]
 8002378:	041a      	lsls	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	619a      	str	r2, [r3, #24]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e12b      	b.n	80025f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff f9fe 	bl	80017b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2224      	movs	r2, #36	@ 0x24
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023f0:	f000 fa02 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 80023f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4a81      	ldr	r2, [pc, #516]	@ (8002600 <HAL_I2C_Init+0x274>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d807      	bhi.n	8002410 <HAL_I2C_Init+0x84>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4a80      	ldr	r2, [pc, #512]	@ (8002604 <HAL_I2C_Init+0x278>)
 8002404:	4293      	cmp	r3, r2
 8002406:	bf94      	ite	ls
 8002408:	2301      	movls	r3, #1
 800240a:	2300      	movhi	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e006      	b.n	800241e <HAL_I2C_Init+0x92>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a7d      	ldr	r2, [pc, #500]	@ (8002608 <HAL_I2C_Init+0x27c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	bf94      	ite	ls
 8002418:	2301      	movls	r3, #1
 800241a:	2300      	movhi	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0e7      	b.n	80025f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a78      	ldr	r2, [pc, #480]	@ (800260c <HAL_I2C_Init+0x280>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	0c9b      	lsrs	r3, r3, #18
 8002430:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a6a      	ldr	r2, [pc, #424]	@ (8002600 <HAL_I2C_Init+0x274>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d802      	bhi.n	8002460 <HAL_I2C_Init+0xd4>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3301      	adds	r3, #1
 800245e:	e009      	b.n	8002474 <HAL_I2C_Init+0xe8>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002466:	fb02 f303 	mul.w	r3, r2, r3
 800246a:	4a69      	ldr	r2, [pc, #420]	@ (8002610 <HAL_I2C_Init+0x284>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	3301      	adds	r3, #1
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002486:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	495c      	ldr	r1, [pc, #368]	@ (8002600 <HAL_I2C_Init+0x274>)
 8002490:	428b      	cmp	r3, r1
 8002492:	d819      	bhi.n	80024c8 <HAL_I2C_Init+0x13c>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1e59      	subs	r1, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a2:	1c59      	adds	r1, r3, #1
 80024a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024a8:	400b      	ands	r3, r1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_I2C_Init+0x138>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1e59      	subs	r1, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c2:	e051      	b.n	8002568 <HAL_I2C_Init+0x1dc>
 80024c4:	2304      	movs	r3, #4
 80024c6:	e04f      	b.n	8002568 <HAL_I2C_Init+0x1dc>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d111      	bne.n	80024f4 <HAL_I2C_Init+0x168>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1e58      	subs	r0, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	440b      	add	r3, r1
 80024de:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e012      	b.n	800251a <HAL_I2C_Init+0x18e>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1e58      	subs	r0, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	0099      	lsls	r1, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	fbb0 f3f3 	udiv	r3, r0, r3
 800250a:	3301      	adds	r3, #1
 800250c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Init+0x196>
 800251e:	2301      	movs	r3, #1
 8002520:	e022      	b.n	8002568 <HAL_I2C_Init+0x1dc>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10e      	bne.n	8002548 <HAL_I2C_Init+0x1bc>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1e58      	subs	r0, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	440b      	add	r3, r1
 8002538:	fbb0 f3f3 	udiv	r3, r0, r3
 800253c:	3301      	adds	r3, #1
 800253e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002546:	e00f      	b.n	8002568 <HAL_I2C_Init+0x1dc>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1e58      	subs	r0, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	0099      	lsls	r1, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	fbb0 f3f3 	udiv	r3, r0, r3
 800255e:	3301      	adds	r3, #1
 8002560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002564:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	6809      	ldr	r1, [r1, #0]
 800256c:	4313      	orrs	r3, r2
 800256e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002596:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6911      	ldr	r1, [r2, #16]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68d2      	ldr	r2, [r2, #12]
 80025a2:	4311      	orrs	r1, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	000186a0 	.word	0x000186a0
 8002604:	001e847f 	.word	0x001e847f
 8002608:	003d08ff 	.word	0x003d08ff
 800260c:	431bde83 	.word	0x431bde83
 8002610:	10624dd3 	.word	0x10624dd3

08002614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0cc      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002628:	4b68      	ldr	r3, [pc, #416]	@ (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d90c      	bls.n	8002650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b65      	ldr	r3, [pc, #404]	@ (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b63      	ldr	r3, [pc, #396]	@ (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0b8      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002668:	4b59      	ldr	r3, [pc, #356]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a58      	ldr	r2, [pc, #352]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002672:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002680:	4b53      	ldr	r3, [pc, #332]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a52      	ldr	r2, [pc, #328]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800268a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268c:	4b50      	ldr	r3, [pc, #320]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	494d      	ldr	r1, [pc, #308]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d044      	beq.n	8002734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b47      	ldr	r3, [pc, #284]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d119      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e07f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d2:	4b3f      	ldr	r3, [pc, #252]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e2:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e067      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f2:	4b37      	ldr	r3, [pc, #220]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f023 0203 	bic.w	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4934      	ldr	r1, [pc, #208]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	4313      	orrs	r3, r2
 8002702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002704:	f7ff fb7e 	bl	8001e04 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	e00a      	b.n	8002722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270c:	f7ff fb7a 	bl	8001e04 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e04f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	4b2b      	ldr	r3, [pc, #172]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 020c 	and.w	r2, r3, #12
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	429a      	cmp	r2, r3
 8002732:	d1eb      	bne.n	800270c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002734:	4b25      	ldr	r3, [pc, #148]	@ (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d20c      	bcs.n	800275c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b22      	ldr	r3, [pc, #136]	@ (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e032      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4916      	ldr	r1, [pc, #88]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002786:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	490e      	ldr	r1, [pc, #56]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800279a:	f000 f855 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	490a      	ldr	r1, [pc, #40]	@ (80027d4 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	fa22 f303 	lsr.w	r3, r2, r3
 80027b2:	4a09      	ldr	r2, [pc, #36]	@ (80027d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fade 	bl	8001d7c <HAL_InitTick>

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023c00 	.word	0x40023c00
 80027d0:	40023800 	.word	0x40023800
 80027d4:	080069a8 	.word	0x080069a8
 80027d8:	20000000 	.word	0x20000000
 80027dc:	20000004 	.word	0x20000004

080027e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e4:	4b03      	ldr	r3, [pc, #12]	@ (80027f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000000 	.word	0x20000000

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027fc:	f7ff fff0 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	0a9b      	lsrs	r3, r3, #10
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4903      	ldr	r1, [pc, #12]	@ (800281c <HAL_RCC_GetPCLK1Freq+0x24>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40023800 	.word	0x40023800
 800281c:	080069b8 	.word	0x080069b8

08002820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002824:	f7ff ffdc 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	0b5b      	lsrs	r3, r3, #13
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4903      	ldr	r1, [pc, #12]	@ (8002844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40023800 	.word	0x40023800
 8002844:	080069b8 	.word	0x080069b8

08002848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800284c:	b0ae      	sub	sp, #184	@ 0xb8
 800284e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800286e:	4bcb      	ldr	r3, [pc, #812]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b0c      	cmp	r3, #12
 8002878:	f200 8206 	bhi.w	8002c88 <HAL_RCC_GetSysClockFreq+0x440>
 800287c:	a201      	add	r2, pc, #4	@ (adr r2, 8002884 <HAL_RCC_GetSysClockFreq+0x3c>)
 800287e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002882:	bf00      	nop
 8002884:	080028b9 	.word	0x080028b9
 8002888:	08002c89 	.word	0x08002c89
 800288c:	08002c89 	.word	0x08002c89
 8002890:	08002c89 	.word	0x08002c89
 8002894:	080028c1 	.word	0x080028c1
 8002898:	08002c89 	.word	0x08002c89
 800289c:	08002c89 	.word	0x08002c89
 80028a0:	08002c89 	.word	0x08002c89
 80028a4:	080028c9 	.word	0x080028c9
 80028a8:	08002c89 	.word	0x08002c89
 80028ac:	08002c89 	.word	0x08002c89
 80028b0:	08002c89 	.word	0x08002c89
 80028b4:	08002ab9 	.word	0x08002ab9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028b8:	4bb9      	ldr	r3, [pc, #740]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x358>)
 80028ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028be:	e1e7      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4bb8      	ldr	r3, [pc, #736]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80028c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028c6:	e1e3      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c8:	4bb4      	ldr	r3, [pc, #720]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d4:	4bb1      	ldr	r3, [pc, #708]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d071      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e0:	4bae      	ldr	r3, [pc, #696]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028ec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80028f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002906:	4622      	mov	r2, r4
 8002908:	462b      	mov	r3, r5
 800290a:	f04f 0000 	mov.w	r0, #0
 800290e:	f04f 0100 	mov.w	r1, #0
 8002912:	0159      	lsls	r1, r3, #5
 8002914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002918:	0150      	lsls	r0, r2, #5
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4621      	mov	r1, r4
 8002920:	1a51      	subs	r1, r2, r1
 8002922:	6439      	str	r1, [r7, #64]	@ 0x40
 8002924:	4629      	mov	r1, r5
 8002926:	eb63 0301 	sbc.w	r3, r3, r1
 800292a:	647b      	str	r3, [r7, #68]	@ 0x44
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002938:	4649      	mov	r1, r9
 800293a:	018b      	lsls	r3, r1, #6
 800293c:	4641      	mov	r1, r8
 800293e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002942:	4641      	mov	r1, r8
 8002944:	018a      	lsls	r2, r1, #6
 8002946:	4641      	mov	r1, r8
 8002948:	1a51      	subs	r1, r2, r1
 800294a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800294c:	4649      	mov	r1, r9
 800294e:	eb63 0301 	sbc.w	r3, r3, r1
 8002952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002960:	4649      	mov	r1, r9
 8002962:	00cb      	lsls	r3, r1, #3
 8002964:	4641      	mov	r1, r8
 8002966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800296a:	4641      	mov	r1, r8
 800296c:	00ca      	lsls	r2, r1, #3
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	4603      	mov	r3, r0
 8002974:	4622      	mov	r2, r4
 8002976:	189b      	adds	r3, r3, r2
 8002978:	633b      	str	r3, [r7, #48]	@ 0x30
 800297a:	462b      	mov	r3, r5
 800297c:	460a      	mov	r2, r1
 800297e:	eb42 0303 	adc.w	r3, r2, r3
 8002982:	637b      	str	r3, [r7, #52]	@ 0x34
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002990:	4629      	mov	r1, r5
 8002992:	024b      	lsls	r3, r1, #9
 8002994:	4621      	mov	r1, r4
 8002996:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800299a:	4621      	mov	r1, r4
 800299c:	024a      	lsls	r2, r1, #9
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80029b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80029b4:	f7fe f968 	bl	8000c88 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4613      	mov	r3, r2
 80029be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029c2:	e067      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c4:	4b75      	ldr	r3, [pc, #468]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029d0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80029d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029de:	2300      	movs	r3, #0
 80029e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80029e6:	4622      	mov	r2, r4
 80029e8:	462b      	mov	r3, r5
 80029ea:	f04f 0000 	mov.w	r0, #0
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	0159      	lsls	r1, r3, #5
 80029f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f8:	0150      	lsls	r0, r2, #5
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4621      	mov	r1, r4
 8002a00:	1a51      	subs	r1, r2, r1
 8002a02:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002a04:	4629      	mov	r1, r5
 8002a06:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002a18:	4649      	mov	r1, r9
 8002a1a:	018b      	lsls	r3, r1, #6
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a22:	4641      	mov	r1, r8
 8002a24:	018a      	lsls	r2, r1, #6
 8002a26:	4641      	mov	r1, r8
 8002a28:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a46:	4692      	mov	sl, r2
 8002a48:	469b      	mov	fp, r3
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	eb1a 0303 	adds.w	r3, sl, r3
 8002a50:	623b      	str	r3, [r7, #32]
 8002a52:	462b      	mov	r3, r5
 8002a54:	eb4b 0303 	adc.w	r3, fp, r3
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a66:	4629      	mov	r1, r5
 8002a68:	028b      	lsls	r3, r1, #10
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a70:	4621      	mov	r1, r4
 8002a72:	028a      	lsls	r2, r1, #10
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a80:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a86:	f7fe f8ff 	bl	8000c88 <__aeabi_uldivmod>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4613      	mov	r3, r2
 8002a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a94:	4b41      	ldr	r3, [pc, #260]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002aa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002aaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ab6:	e0eb      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab8:	4b38      	ldr	r3, [pc, #224]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac4:	4b35      	ldr	r3, [pc, #212]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d06b      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad0:	4b32      	ldr	r3, [pc, #200]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	099b      	lsrs	r3, r3, #6
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ada:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002adc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ae8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002aec:	4622      	mov	r2, r4
 8002aee:	462b      	mov	r3, r5
 8002af0:	f04f 0000 	mov.w	r0, #0
 8002af4:	f04f 0100 	mov.w	r1, #0
 8002af8:	0159      	lsls	r1, r3, #5
 8002afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002afe:	0150      	lsls	r0, r2, #5
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4621      	mov	r1, r4
 8002b06:	1a51      	subs	r1, r2, r1
 8002b08:	61b9      	str	r1, [r7, #24]
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	eb63 0301 	sbc.w	r3, r3, r1
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b1e:	4659      	mov	r1, fp
 8002b20:	018b      	lsls	r3, r1, #6
 8002b22:	4651      	mov	r1, sl
 8002b24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b28:	4651      	mov	r1, sl
 8002b2a:	018a      	lsls	r2, r1, #6
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	ebb2 0801 	subs.w	r8, r2, r1
 8002b32:	4659      	mov	r1, fp
 8002b34:	eb63 0901 	sbc.w	r9, r3, r1
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b4c:	4690      	mov	r8, r2
 8002b4e:	4699      	mov	r9, r3
 8002b50:	4623      	mov	r3, r4
 8002b52:	eb18 0303 	adds.w	r3, r8, r3
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	462b      	mov	r3, r5
 8002b5a:	eb49 0303 	adc.w	r3, r9, r3
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	024b      	lsls	r3, r1, #9
 8002b70:	4621      	mov	r1, r4
 8002b72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b76:	4621      	mov	r1, r4
 8002b78:	024a      	lsls	r2, r1, #9
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b82:	2200      	movs	r2, #0
 8002b84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b8c:	f7fe f87c 	bl	8000c88 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b9a:	e065      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x420>
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	00f42400 	.word	0x00f42400
 8002ba4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bba:	2300      	movs	r3, #0
 8002bbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bbe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002bc2:	4642      	mov	r2, r8
 8002bc4:	464b      	mov	r3, r9
 8002bc6:	f04f 0000 	mov.w	r0, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	0159      	lsls	r1, r3, #5
 8002bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd4:	0150      	lsls	r0, r2, #5
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4641      	mov	r1, r8
 8002bdc:	1a51      	subs	r1, r2, r1
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	4649      	mov	r1, r9
 8002be2:	eb63 0301 	sbc.w	r3, r3, r1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	018b      	lsls	r3, r1, #6
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bfe:	4651      	mov	r1, sl
 8002c00:	018a      	lsls	r2, r1, #6
 8002c02:	4651      	mov	r1, sl
 8002c04:	1a54      	subs	r4, r2, r1
 8002c06:	4659      	mov	r1, fp
 8002c08:	eb63 0501 	sbc.w	r5, r3, r1
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	00eb      	lsls	r3, r5, #3
 8002c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c1a:	00e2      	lsls	r2, r4, #3
 8002c1c:	4614      	mov	r4, r2
 8002c1e:	461d      	mov	r5, r3
 8002c20:	4643      	mov	r3, r8
 8002c22:	18e3      	adds	r3, r4, r3
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	464b      	mov	r3, r9
 8002c28:	eb45 0303 	adc.w	r3, r5, r3
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	028b      	lsls	r3, r1, #10
 8002c3e:	4621      	mov	r1, r4
 8002c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c44:	4621      	mov	r1, r4
 8002c46:	028a      	lsls	r2, r1, #10
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c50:	2200      	movs	r2, #0
 8002c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c54:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c56:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c5a:	f7fe f815 	bl	8000c88 <__aeabi_uldivmod>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4613      	mov	r3, r2
 8002c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	0f1b      	lsrs	r3, r3, #28
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c86:	e003      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	37b8      	adds	r7, #184	@ 0xb8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	00f42400 	.word	0x00f42400

08002ca8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e28d      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8083 	beq.w	8002dce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002cc8:	4b94      	ldr	r3, [pc, #592]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d019      	beq.n	8002d08 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cd4:	4b91      	ldr	r3, [pc, #580]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
        || \
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ce0:	4b8e      	ldr	r3, [pc, #568]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cec:	d00c      	beq.n	8002d08 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cee:	4b8b      	ldr	r3, [pc, #556]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	d112      	bne.n	8002d20 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfa:	4b88      	ldr	r3, [pc, #544]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d06:	d10b      	bne.n	8002d20 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	4b84      	ldr	r3, [pc, #528]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d05b      	beq.n	8002dcc <HAL_RCC_OscConfig+0x124>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d157      	bne.n	8002dcc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e25a      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d28:	d106      	bne.n	8002d38 <HAL_RCC_OscConfig+0x90>
 8002d2a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7b      	ldr	r2, [pc, #492]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e01d      	b.n	8002d74 <HAL_RCC_OscConfig+0xcc>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0xb4>
 8002d42:	4b76      	ldr	r3, [pc, #472]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a75      	ldr	r2, [pc, #468]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b73      	ldr	r3, [pc, #460]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a72      	ldr	r2, [pc, #456]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0xcc>
 8002d5c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a6e      	ldr	r2, [pc, #440]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b6c      	ldr	r3, [pc, #432]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a6b      	ldr	r2, [pc, #428]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7ff f842 	bl	8001e04 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7ff f83e 	bl	8001e04 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	@ 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e21f      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b61      	ldr	r3, [pc, #388]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0xdc>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7ff f82e 	bl	8001e04 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dac:	f7ff f82a 	bl	8001e04 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	@ 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e20b      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dbe:	4b57      	ldr	r3, [pc, #348]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x104>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d06f      	beq.n	8002eba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dda:	4b50      	ldr	r3, [pc, #320]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d017      	beq.n	8002e16 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002de6:	4b4d      	ldr	r3, [pc, #308]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
        || \
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d105      	bne.n	8002dfe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002df2:	4b4a      	ldr	r3, [pc, #296]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfe:	4b47      	ldr	r3, [pc, #284]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d11c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0a:	4b44      	ldr	r3, [pc, #272]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d116      	bne.n	8002e44 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	4b41      	ldr	r3, [pc, #260]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_RCC_OscConfig+0x186>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e1d3      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4937      	ldr	r1, [pc, #220]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	e03a      	b.n	8002eba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e4c:	4b34      	ldr	r3, [pc, #208]	@ (8002f20 <HAL_RCC_OscConfig+0x278>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7fe ffd7 	bl	8001e04 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5a:	f7fe ffd3 	bl	8001e04 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e1b4      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e78:	4b28      	ldr	r3, [pc, #160]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4925      	ldr	r1, [pc, #148]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
 8002e8c:	e015      	b.n	8002eba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8e:	4b24      	ldr	r3, [pc, #144]	@ (8002f20 <HAL_RCC_OscConfig+0x278>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe ffb6 	bl	8001e04 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9c:	f7fe ffb2 	bl	8001e04 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e193      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d036      	beq.n	8002f34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d016      	beq.n	8002efc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ece:	4b15      	ldr	r3, [pc, #84]	@ (8002f24 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fe ff96 	bl	8001e04 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002edc:	f7fe ff92 	bl	8001e04 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e173      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <HAL_RCC_OscConfig+0x274>)
 8002ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x234>
 8002efa:	e01b      	b.n	8002f34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efc:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe ff7f 	bl	8001e04 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	e00e      	b.n	8002f28 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f0a:	f7fe ff7b 	bl	8001e04 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d907      	bls.n	8002f28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e15c      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	42470000 	.word	0x42470000
 8002f24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	4b8a      	ldr	r3, [pc, #552]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1ea      	bne.n	8002f0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8097 	beq.w	8003070 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f46:	4b83      	ldr	r3, [pc, #524]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10f      	bne.n	8002f72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	4b7f      	ldr	r3, [pc, #508]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f62:	4b7c      	ldr	r3, [pc, #496]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f72:	4b79      	ldr	r3, [pc, #484]	@ (8003158 <HAL_RCC_OscConfig+0x4b0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d118      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7e:	4b76      	ldr	r3, [pc, #472]	@ (8003158 <HAL_RCC_OscConfig+0x4b0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a75      	ldr	r2, [pc, #468]	@ (8003158 <HAL_RCC_OscConfig+0x4b0>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8a:	f7fe ff3b 	bl	8001e04 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f92:	f7fe ff37 	bl	8001e04 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e118      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8003158 <HAL_RCC_OscConfig+0x4b0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x31e>
 8002fb8:	4b66      	ldr	r3, [pc, #408]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbc:	4a65      	ldr	r2, [pc, #404]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc4:	e01c      	b.n	8003000 <HAL_RCC_OscConfig+0x358>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x340>
 8002fce:	4b61      	ldr	r3, [pc, #388]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	4a60      	ldr	r2, [pc, #384]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fd4:	f043 0304 	orr.w	r3, r3, #4
 8002fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fda:	4b5e      	ldr	r3, [pc, #376]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fde:	4a5d      	ldr	r2, [pc, #372]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0x358>
 8002fe8:	4b5a      	ldr	r3, [pc, #360]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fec:	4a59      	ldr	r2, [pc, #356]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff4:	4b57      	ldr	r3, [pc, #348]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff8:	4a56      	ldr	r2, [pc, #344]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8002ffa:	f023 0304 	bic.w	r3, r3, #4
 8002ffe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d015      	beq.n	8003034 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fe fefc 	bl	8001e04 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7fe fef8 	bl	8001e04 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0d7      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003026:	4b4b      	ldr	r3, [pc, #300]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0ee      	beq.n	8003010 <HAL_RCC_OscConfig+0x368>
 8003032:	e014      	b.n	800305e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fe fee6 	bl	8001e04 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7fe fee2 	bl	8001e04 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0c1      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003052:	4b40      	ldr	r3, [pc, #256]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1ee      	bne.n	800303c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800305e:	7dfb      	ldrb	r3, [r7, #23]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003064:	4b3b      	ldr	r3, [pc, #236]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003068:	4a3a      	ldr	r2, [pc, #232]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 800306a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800306e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80ad 	beq.w	80031d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800307a:	4b36      	ldr	r3, [pc, #216]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b08      	cmp	r3, #8
 8003084:	d060      	beq.n	8003148 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d145      	bne.n	800311a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308e:	4b33      	ldr	r3, [pc, #204]	@ (800315c <HAL_RCC_OscConfig+0x4b4>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe feb6 	bl	8001e04 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe feb2 	bl	8001e04 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e093      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	4b29      	ldr	r3, [pc, #164]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	3b01      	subs	r3, #1
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030dc:	061b      	lsls	r3, r3, #24
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	071b      	lsls	r3, r3, #28
 80030e6:	491b      	ldr	r1, [pc, #108]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ec:	4b1b      	ldr	r3, [pc, #108]	@ (800315c <HAL_RCC_OscConfig+0x4b4>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe fe87 	bl	8001e04 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fe fe83 	bl	8001e04 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e064      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310c:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x452>
 8003118:	e05c      	b.n	80031d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b10      	ldr	r3, [pc, #64]	@ (800315c <HAL_RCC_OscConfig+0x4b4>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe fe70 	bl	8001e04 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe fe6c 	bl	8001e04 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e04d      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_RCC_OscConfig+0x4ac>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x480>
 8003146:	e045      	b.n	80031d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d107      	bne.n	8003160 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e040      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
 8003154:	40023800 	.word	0x40023800
 8003158:	40007000 	.word	0x40007000
 800315c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003160:	4b1f      	ldr	r3, [pc, #124]	@ (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d030      	beq.n	80031d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d129      	bne.n	80031d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d122      	bne.n	80031d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003196:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003198:	4293      	cmp	r3, r2
 800319a:	d119      	bne.n	80031d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	3b01      	subs	r3, #1
 80031aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d10f      	bne.n	80031d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800

080031e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e07b      	b.n	80032ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d108      	bne.n	8003210 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003206:	d009      	beq.n	800321c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	61da      	str	r2, [r3, #28]
 800320e:	e005      	b.n	800321c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fe fb58 	bl	80018ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003252:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a0:	ea42 0103 	orr.w	r1, r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0104 	and.w	r1, r3, #4
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	f003 0210 	and.w	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e042      	b.n	800338e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d106      	bne.n	8003322 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7fe fb5d 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2224      	movs	r2, #36	@ 0x24
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003338:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fa0a 	bl	8003754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800334e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800335e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800336e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b08a      	sub	sp, #40	@ 0x28
 800339a:	af02      	add	r7, sp, #8
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d175      	bne.n	80034a2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_UART_Transmit+0x2c>
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e06e      	b.n	80034a4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2221      	movs	r2, #33	@ 0x21
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033d4:	f7fe fd16 	bl	8001e04 <HAL_GetTick>
 80033d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	88fa      	ldrh	r2, [r7, #6]
 80033de:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ee:	d108      	bne.n	8003402 <HAL_UART_Transmit+0x6c>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d104      	bne.n	8003402 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	e003      	b.n	800340a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800340a:	e02e      	b.n	800346a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2200      	movs	r2, #0
 8003414:	2180      	movs	r1, #128	@ 0x80
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f8df 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e03a      	b.n	80034a4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003442:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	3302      	adds	r3, #2
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	e007      	b.n	800345c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	781a      	ldrb	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3301      	adds	r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1cb      	bne.n	800340c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2200      	movs	r2, #0
 800347c:	2140      	movs	r1, #64	@ 0x40
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f8ab 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e006      	b.n	80034a4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e000      	b.n	80034a4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
  }
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	@ 0x28
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	f040 8081 	bne.w	80035d0 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_UART_Receive+0x2e>
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e079      	b.n	80035d2 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2222      	movs	r2, #34	@ 0x22
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f2:	f7fe fc87 	bl	8001e04 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800350c:	d108      	bne.n	8003520 <HAL_UART_Receive+0x74>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	e003      	b.n	8003528 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003528:	e047      	b.n	80035ba <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2200      	movs	r2, #0
 8003532:	2120      	movs	r1, #32
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f850 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e042      	b.n	80035d2 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10c      	bne.n	800356c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355e:	b29a      	uxth	r2, r3
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	3302      	adds	r3, #2
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e01f      	b.n	80035ac <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003574:	d007      	beq.n	8003586 <HAL_UART_Receive+0xda>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <HAL_UART_Receive+0xe8>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e008      	b.n	80035a6 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3301      	adds	r3, #1
 80035aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1b2      	bne.n	800352a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ea:	e03b      	b.n	8003664 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035f2:	d037      	beq.n	8003664 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7fe fc06 	bl	8001e04 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	6a3a      	ldr	r2, [r7, #32]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <UART_WaitOnFlagUntilTimeout+0x30>
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e03a      	b.n	8003684 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d023      	beq.n	8003664 <UART_WaitOnFlagUntilTimeout+0x8a>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b80      	cmp	r3, #128	@ 0x80
 8003620:	d020      	beq.n	8003664 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b40      	cmp	r3, #64	@ 0x40
 8003626:	d01d      	beq.n	8003664 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b08      	cmp	r3, #8
 8003634:	d116      	bne.n	8003664 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f81d 	bl	800368c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2208      	movs	r2, #8
 8003656:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e00f      	b.n	8003684 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	429a      	cmp	r2, r3
 8003680:	d0b4      	beq.n	80035ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800368c:	b480      	push	{r7}
 800368e:	b095      	sub	sp, #84	@ 0x54
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	330c      	adds	r3, #12
 800369a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369e:	e853 3f00 	ldrex	r3, [r3]
 80036a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	330c      	adds	r3, #12
 80036b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80036b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036bc:	e841 2300 	strex	r3, r2, [r1]
 80036c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e5      	bne.n	8003694 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3314      	adds	r3, #20
 80036ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	e853 3f00 	ldrex	r3, [r3]
 80036d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f023 0301 	bic.w	r3, r3, #1
 80036de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3314      	adds	r3, #20
 80036e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f0:	e841 2300 	strex	r3, r2, [r1]
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e5      	bne.n	80036c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003700:	2b01      	cmp	r3, #1
 8003702:	d119      	bne.n	8003738 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	330c      	adds	r3, #12
 800370a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	60bb      	str	r3, [r7, #8]
   return(result);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f023 0310 	bic.w	r3, r3, #16
 800371a:	647b      	str	r3, [r7, #68]	@ 0x44
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003724:	61ba      	str	r2, [r7, #24]
 8003726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003728:	6979      	ldr	r1, [r7, #20]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	e841 2300 	strex	r3, r2, [r1]
 8003730:	613b      	str	r3, [r7, #16]
   return(result);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e5      	bne.n	8003704 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003746:	bf00      	nop
 8003748:	3754      	adds	r7, #84	@ 0x54
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003758:	b0c0      	sub	sp, #256	@ 0x100
 800375a:	af00      	add	r7, sp, #0
 800375c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	68d9      	ldr	r1, [r3, #12]
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	ea40 0301 	orr.w	r3, r0, r1
 800377c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	431a      	orrs	r2, r3
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	431a      	orrs	r2, r3
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037ac:	f021 010c 	bic.w	r1, r1, #12
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037ba:	430b      	orrs	r3, r1
 80037bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ce:	6999      	ldr	r1, [r3, #24]
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	ea40 0301 	orr.w	r3, r0, r1
 80037da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003a20 <UART_SetConfig+0x2cc>)
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d005      	beq.n	80037f4 <UART_SetConfig+0xa0>
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003a24 <UART_SetConfig+0x2d0>)
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d104      	bne.n	80037fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037f4:	f7ff f814 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 80037f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037fc:	e003      	b.n	8003806 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037fe:	f7fe fffb 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8003802:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003810:	f040 810c 	bne.w	8003a2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003818:	2200      	movs	r2, #0
 800381a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800381e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003822:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003826:	4622      	mov	r2, r4
 8003828:	462b      	mov	r3, r5
 800382a:	1891      	adds	r1, r2, r2
 800382c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800382e:	415b      	adcs	r3, r3
 8003830:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003836:	4621      	mov	r1, r4
 8003838:	eb12 0801 	adds.w	r8, r2, r1
 800383c:	4629      	mov	r1, r5
 800383e:	eb43 0901 	adc.w	r9, r3, r1
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003856:	4690      	mov	r8, r2
 8003858:	4699      	mov	r9, r3
 800385a:	4623      	mov	r3, r4
 800385c:	eb18 0303 	adds.w	r3, r8, r3
 8003860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003864:	462b      	mov	r3, r5
 8003866:	eb49 0303 	adc.w	r3, r9, r3
 800386a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800387a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800387e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003882:	460b      	mov	r3, r1
 8003884:	18db      	adds	r3, r3, r3
 8003886:	653b      	str	r3, [r7, #80]	@ 0x50
 8003888:	4613      	mov	r3, r2
 800388a:	eb42 0303 	adc.w	r3, r2, r3
 800388e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003898:	f7fd f9f6 	bl	8000c88 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4b61      	ldr	r3, [pc, #388]	@ (8003a28 <UART_SetConfig+0x2d4>)
 80038a2:	fba3 2302 	umull	r2, r3, r3, r2
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	011c      	lsls	r4, r3, #4
 80038aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	1891      	adds	r1, r2, r2
 80038c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038c4:	415b      	adcs	r3, r3
 80038c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038cc:	4641      	mov	r1, r8
 80038ce:	eb12 0a01 	adds.w	sl, r2, r1
 80038d2:	4649      	mov	r1, r9
 80038d4:	eb43 0b01 	adc.w	fp, r3, r1
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ec:	4692      	mov	sl, r2
 80038ee:	469b      	mov	fp, r3
 80038f0:	4643      	mov	r3, r8
 80038f2:	eb1a 0303 	adds.w	r3, sl, r3
 80038f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038fa:	464b      	mov	r3, r9
 80038fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003900:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003910:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003914:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003918:	460b      	mov	r3, r1
 800391a:	18db      	adds	r3, r3, r3
 800391c:	643b      	str	r3, [r7, #64]	@ 0x40
 800391e:	4613      	mov	r3, r2
 8003920:	eb42 0303 	adc.w	r3, r2, r3
 8003924:	647b      	str	r3, [r7, #68]	@ 0x44
 8003926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800392a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800392e:	f7fd f9ab 	bl	8000c88 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4611      	mov	r1, r2
 8003938:	4b3b      	ldr	r3, [pc, #236]	@ (8003a28 <UART_SetConfig+0x2d4>)
 800393a:	fba3 2301 	umull	r2, r3, r3, r1
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2264      	movs	r2, #100	@ 0x64
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	1acb      	subs	r3, r1, r3
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800394e:	4b36      	ldr	r3, [pc, #216]	@ (8003a28 <UART_SetConfig+0x2d4>)
 8003950:	fba3 2302 	umull	r2, r3, r3, r2
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800395c:	441c      	add	r4, r3
 800395e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003962:	2200      	movs	r2, #0
 8003964:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003968:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800396c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003970:	4642      	mov	r2, r8
 8003972:	464b      	mov	r3, r9
 8003974:	1891      	adds	r1, r2, r2
 8003976:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003978:	415b      	adcs	r3, r3
 800397a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800397c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003980:	4641      	mov	r1, r8
 8003982:	1851      	adds	r1, r2, r1
 8003984:	6339      	str	r1, [r7, #48]	@ 0x30
 8003986:	4649      	mov	r1, r9
 8003988:	414b      	adcs	r3, r1
 800398a:	637b      	str	r3, [r7, #52]	@ 0x34
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003998:	4659      	mov	r1, fp
 800399a:	00cb      	lsls	r3, r1, #3
 800399c:	4651      	mov	r1, sl
 800399e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a2:	4651      	mov	r1, sl
 80039a4:	00ca      	lsls	r2, r1, #3
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	4642      	mov	r2, r8
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039b4:	464b      	mov	r3, r9
 80039b6:	460a      	mov	r2, r1
 80039b8:	eb42 0303 	adc.w	r3, r2, r3
 80039bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039d4:	460b      	mov	r3, r1
 80039d6:	18db      	adds	r3, r3, r3
 80039d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039da:	4613      	mov	r3, r2
 80039dc:	eb42 0303 	adc.w	r3, r2, r3
 80039e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039ea:	f7fd f94d 	bl	8000c88 <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003a28 <UART_SetConfig+0x2d4>)
 80039f4:	fba3 1302 	umull	r1, r3, r3, r2
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	2164      	movs	r1, #100	@ 0x64
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	3332      	adds	r3, #50	@ 0x32
 8003a06:	4a08      	ldr	r2, [pc, #32]	@ (8003a28 <UART_SetConfig+0x2d4>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	f003 0207 	and.w	r2, r3, #7
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4422      	add	r2, r4
 8003a1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a1c:	e106      	b.n	8003c2c <UART_SetConfig+0x4d8>
 8003a1e:	bf00      	nop
 8003a20:	40011000 	.word	0x40011000
 8003a24:	40011400 	.word	0x40011400
 8003a28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a3e:	4642      	mov	r2, r8
 8003a40:	464b      	mov	r3, r9
 8003a42:	1891      	adds	r1, r2, r2
 8003a44:	6239      	str	r1, [r7, #32]
 8003a46:	415b      	adcs	r3, r3
 8003a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a4e:	4641      	mov	r1, r8
 8003a50:	1854      	adds	r4, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0501 	adc.w	r5, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	00eb      	lsls	r3, r5, #3
 8003a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a66:	00e2      	lsls	r2, r4, #3
 8003a68:	4614      	mov	r4, r2
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	4643      	mov	r3, r8
 8003a6e:	18e3      	adds	r3, r4, r3
 8003a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a74:	464b      	mov	r3, r9
 8003a76:	eb45 0303 	adc.w	r3, r5, r3
 8003a7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	008b      	lsls	r3, r1, #2
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	008a      	lsls	r2, r1, #2
 8003aa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003aac:	f7fd f8ec 	bl	8000c88 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4b60      	ldr	r3, [pc, #384]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	011c      	lsls	r4, r3, #4
 8003abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ac8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003acc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	1891      	adds	r1, r2, r2
 8003ad6:	61b9      	str	r1, [r7, #24]
 8003ad8:	415b      	adcs	r3, r3
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	1851      	adds	r1, r2, r1
 8003ae4:	6139      	str	r1, [r7, #16]
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	414b      	adcs	r3, r1
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003af8:	4659      	mov	r1, fp
 8003afa:	00cb      	lsls	r3, r1, #3
 8003afc:	4651      	mov	r1, sl
 8003afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b02:	4651      	mov	r1, sl
 8003b04:	00ca      	lsls	r2, r1, #3
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b14:	464b      	mov	r3, r9
 8003b16:	460a      	mov	r2, r1
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b38:	4649      	mov	r1, r9
 8003b3a:	008b      	lsls	r3, r1, #2
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b42:	4641      	mov	r1, r8
 8003b44:	008a      	lsls	r2, r1, #2
 8003b46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b4a:	f7fd f89d 	bl	8000c88 <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	4b38      	ldr	r3, [pc, #224]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003b56:	fba3 2301 	umull	r2, r3, r3, r1
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2264      	movs	r2, #100	@ 0x64
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	1acb      	subs	r3, r1, r3
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	3332      	adds	r3, #50	@ 0x32
 8003b68:	4a33      	ldr	r2, [pc, #204]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b74:	441c      	add	r4, r3
 8003b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b84:	4642      	mov	r2, r8
 8003b86:	464b      	mov	r3, r9
 8003b88:	1891      	adds	r1, r2, r2
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	415b      	adcs	r3, r3
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b94:	4641      	mov	r1, r8
 8003b96:	1851      	adds	r1, r2, r1
 8003b98:	6039      	str	r1, [r7, #0]
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	414b      	adcs	r3, r1
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bac:	4659      	mov	r1, fp
 8003bae:	00cb      	lsls	r3, r1, #3
 8003bb0:	4651      	mov	r1, sl
 8003bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bb6:	4651      	mov	r1, sl
 8003bb8:	00ca      	lsls	r2, r1, #3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	189b      	adds	r3, r3, r2
 8003bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	460a      	mov	r2, r1
 8003bca:	eb42 0303 	adc.w	r3, r2, r3
 8003bce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bda:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003be8:	4649      	mov	r1, r9
 8003bea:	008b      	lsls	r3, r1, #2
 8003bec:	4641      	mov	r1, r8
 8003bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	008a      	lsls	r2, r1, #2
 8003bf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bfa:	f7fd f845 	bl	8000c88 <__aeabi_uldivmod>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003c04:	fba3 1302 	umull	r1, r3, r3, r2
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	2164      	movs	r1, #100	@ 0x64
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	3332      	adds	r3, #50	@ 0x32
 8003c16:	4a08      	ldr	r2, [pc, #32]	@ (8003c38 <UART_SetConfig+0x4e4>)
 8003c18:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	f003 020f 	and.w	r2, r3, #15
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4422      	add	r2, r4
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c32:	46bd      	mov	sp, r7
 8003c34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c38:	51eb851f 	.word	0x51eb851f

08003c3c <__cvt>:
 8003c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c40:	ec57 6b10 	vmov	r6, r7, d0
 8003c44:	2f00      	cmp	r7, #0
 8003c46:	460c      	mov	r4, r1
 8003c48:	4619      	mov	r1, r3
 8003c4a:	463b      	mov	r3, r7
 8003c4c:	bfbb      	ittet	lt
 8003c4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003c52:	461f      	movlt	r7, r3
 8003c54:	2300      	movge	r3, #0
 8003c56:	232d      	movlt	r3, #45	@ 0x2d
 8003c58:	700b      	strb	r3, [r1, #0]
 8003c5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003c60:	4691      	mov	r9, r2
 8003c62:	f023 0820 	bic.w	r8, r3, #32
 8003c66:	bfbc      	itt	lt
 8003c68:	4632      	movlt	r2, r6
 8003c6a:	4616      	movlt	r6, r2
 8003c6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c70:	d005      	beq.n	8003c7e <__cvt+0x42>
 8003c72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c76:	d100      	bne.n	8003c7a <__cvt+0x3e>
 8003c78:	3401      	adds	r4, #1
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	e000      	b.n	8003c80 <__cvt+0x44>
 8003c7e:	2103      	movs	r1, #3
 8003c80:	ab03      	add	r3, sp, #12
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	ab02      	add	r3, sp, #8
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	ec47 6b10 	vmov	d0, r6, r7
 8003c8c:	4653      	mov	r3, sl
 8003c8e:	4622      	mov	r2, r4
 8003c90:	f000 fdd2 	bl	8004838 <_dtoa_r>
 8003c94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003c98:	4605      	mov	r5, r0
 8003c9a:	d119      	bne.n	8003cd0 <__cvt+0x94>
 8003c9c:	f019 0f01 	tst.w	r9, #1
 8003ca0:	d00e      	beq.n	8003cc0 <__cvt+0x84>
 8003ca2:	eb00 0904 	add.w	r9, r0, r4
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2300      	movs	r3, #0
 8003caa:	4630      	mov	r0, r6
 8003cac:	4639      	mov	r1, r7
 8003cae:	f7fc ff2b 	bl	8000b08 <__aeabi_dcmpeq>
 8003cb2:	b108      	cbz	r0, 8003cb8 <__cvt+0x7c>
 8003cb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8003cb8:	2230      	movs	r2, #48	@ 0x30
 8003cba:	9b03      	ldr	r3, [sp, #12]
 8003cbc:	454b      	cmp	r3, r9
 8003cbe:	d31e      	bcc.n	8003cfe <__cvt+0xc2>
 8003cc0:	9b03      	ldr	r3, [sp, #12]
 8003cc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003cc4:	1b5b      	subs	r3, r3, r5
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	b004      	add	sp, #16
 8003ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003cd4:	eb00 0904 	add.w	r9, r0, r4
 8003cd8:	d1e5      	bne.n	8003ca6 <__cvt+0x6a>
 8003cda:	7803      	ldrb	r3, [r0, #0]
 8003cdc:	2b30      	cmp	r3, #48	@ 0x30
 8003cde:	d10a      	bne.n	8003cf6 <__cvt+0xba>
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	4630      	mov	r0, r6
 8003ce6:	4639      	mov	r1, r7
 8003ce8:	f7fc ff0e 	bl	8000b08 <__aeabi_dcmpeq>
 8003cec:	b918      	cbnz	r0, 8003cf6 <__cvt+0xba>
 8003cee:	f1c4 0401 	rsb	r4, r4, #1
 8003cf2:	f8ca 4000 	str.w	r4, [sl]
 8003cf6:	f8da 3000 	ldr.w	r3, [sl]
 8003cfa:	4499      	add	r9, r3
 8003cfc:	e7d3      	b.n	8003ca6 <__cvt+0x6a>
 8003cfe:	1c59      	adds	r1, r3, #1
 8003d00:	9103      	str	r1, [sp, #12]
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e7d9      	b.n	8003cba <__cvt+0x7e>

08003d06 <__exponent>:
 8003d06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d08:	2900      	cmp	r1, #0
 8003d0a:	bfba      	itte	lt
 8003d0c:	4249      	neglt	r1, r1
 8003d0e:	232d      	movlt	r3, #45	@ 0x2d
 8003d10:	232b      	movge	r3, #43	@ 0x2b
 8003d12:	2909      	cmp	r1, #9
 8003d14:	7002      	strb	r2, [r0, #0]
 8003d16:	7043      	strb	r3, [r0, #1]
 8003d18:	dd29      	ble.n	8003d6e <__exponent+0x68>
 8003d1a:	f10d 0307 	add.w	r3, sp, #7
 8003d1e:	461d      	mov	r5, r3
 8003d20:	270a      	movs	r7, #10
 8003d22:	461a      	mov	r2, r3
 8003d24:	fbb1 f6f7 	udiv	r6, r1, r7
 8003d28:	fb07 1416 	mls	r4, r7, r6, r1
 8003d2c:	3430      	adds	r4, #48	@ 0x30
 8003d2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d32:	460c      	mov	r4, r1
 8003d34:	2c63      	cmp	r4, #99	@ 0x63
 8003d36:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003d3a:	4631      	mov	r1, r6
 8003d3c:	dcf1      	bgt.n	8003d22 <__exponent+0x1c>
 8003d3e:	3130      	adds	r1, #48	@ 0x30
 8003d40:	1e94      	subs	r4, r2, #2
 8003d42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d46:	1c41      	adds	r1, r0, #1
 8003d48:	4623      	mov	r3, r4
 8003d4a:	42ab      	cmp	r3, r5
 8003d4c:	d30a      	bcc.n	8003d64 <__exponent+0x5e>
 8003d4e:	f10d 0309 	add.w	r3, sp, #9
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	42ac      	cmp	r4, r5
 8003d56:	bf88      	it	hi
 8003d58:	2300      	movhi	r3, #0
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	4403      	add	r3, r0
 8003d5e:	1a18      	subs	r0, r3, r0
 8003d60:	b003      	add	sp, #12
 8003d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d6c:	e7ed      	b.n	8003d4a <__exponent+0x44>
 8003d6e:	2330      	movs	r3, #48	@ 0x30
 8003d70:	3130      	adds	r1, #48	@ 0x30
 8003d72:	7083      	strb	r3, [r0, #2]
 8003d74:	70c1      	strb	r1, [r0, #3]
 8003d76:	1d03      	adds	r3, r0, #4
 8003d78:	e7f1      	b.n	8003d5e <__exponent+0x58>
	...

08003d7c <_printf_float>:
 8003d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d80:	b08d      	sub	sp, #52	@ 0x34
 8003d82:	460c      	mov	r4, r1
 8003d84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003d88:	4616      	mov	r6, r2
 8003d8a:	461f      	mov	r7, r3
 8003d8c:	4605      	mov	r5, r0
 8003d8e:	f000 fc97 	bl	80046c0 <_localeconv_r>
 8003d92:	6803      	ldr	r3, [r0, #0]
 8003d94:	9304      	str	r3, [sp, #16]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fc fa8a 	bl	80002b0 <strlen>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003da0:	f8d8 3000 	ldr.w	r3, [r8]
 8003da4:	9005      	str	r0, [sp, #20]
 8003da6:	3307      	adds	r3, #7
 8003da8:	f023 0307 	bic.w	r3, r3, #7
 8003dac:	f103 0208 	add.w	r2, r3, #8
 8003db0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003db4:	f8d4 b000 	ldr.w	fp, [r4]
 8003db8:	f8c8 2000 	str.w	r2, [r8]
 8003dbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003dc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003dc4:	9307      	str	r3, [sp, #28]
 8003dc6:	f8cd 8018 	str.w	r8, [sp, #24]
 8003dca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dd2:	4b9c      	ldr	r3, [pc, #624]	@ (8004044 <_printf_float+0x2c8>)
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003dd8:	f7fc fec8 	bl	8000b6c <__aeabi_dcmpun>
 8003ddc:	bb70      	cbnz	r0, 8003e3c <_printf_float+0xc0>
 8003dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003de2:	4b98      	ldr	r3, [pc, #608]	@ (8004044 <_printf_float+0x2c8>)
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003de8:	f7fc fea2 	bl	8000b30 <__aeabi_dcmple>
 8003dec:	bb30      	cbnz	r0, 8003e3c <_printf_float+0xc0>
 8003dee:	2200      	movs	r2, #0
 8003df0:	2300      	movs	r3, #0
 8003df2:	4640      	mov	r0, r8
 8003df4:	4649      	mov	r1, r9
 8003df6:	f7fc fe91 	bl	8000b1c <__aeabi_dcmplt>
 8003dfa:	b110      	cbz	r0, 8003e02 <_printf_float+0x86>
 8003dfc:	232d      	movs	r3, #45	@ 0x2d
 8003dfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e02:	4a91      	ldr	r2, [pc, #580]	@ (8004048 <_printf_float+0x2cc>)
 8003e04:	4b91      	ldr	r3, [pc, #580]	@ (800404c <_printf_float+0x2d0>)
 8003e06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003e0a:	bf94      	ite	ls
 8003e0c:	4690      	movls	r8, r2
 8003e0e:	4698      	movhi	r8, r3
 8003e10:	2303      	movs	r3, #3
 8003e12:	6123      	str	r3, [r4, #16]
 8003e14:	f02b 0304 	bic.w	r3, fp, #4
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	f04f 0900 	mov.w	r9, #0
 8003e1e:	9700      	str	r7, [sp, #0]
 8003e20:	4633      	mov	r3, r6
 8003e22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003e24:	4621      	mov	r1, r4
 8003e26:	4628      	mov	r0, r5
 8003e28:	f000 f9d2 	bl	80041d0 <_printf_common>
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	f040 808d 	bne.w	8003f4c <_printf_float+0x1d0>
 8003e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e36:	b00d      	add	sp, #52	@ 0x34
 8003e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	464b      	mov	r3, r9
 8003e40:	4640      	mov	r0, r8
 8003e42:	4649      	mov	r1, r9
 8003e44:	f7fc fe92 	bl	8000b6c <__aeabi_dcmpun>
 8003e48:	b140      	cbz	r0, 8003e5c <_printf_float+0xe0>
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bfbc      	itt	lt
 8003e50:	232d      	movlt	r3, #45	@ 0x2d
 8003e52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e56:	4a7e      	ldr	r2, [pc, #504]	@ (8004050 <_printf_float+0x2d4>)
 8003e58:	4b7e      	ldr	r3, [pc, #504]	@ (8004054 <_printf_float+0x2d8>)
 8003e5a:	e7d4      	b.n	8003e06 <_printf_float+0x8a>
 8003e5c:	6863      	ldr	r3, [r4, #4]
 8003e5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003e62:	9206      	str	r2, [sp, #24]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	d13b      	bne.n	8003ee0 <_printf_float+0x164>
 8003e68:	2306      	movs	r3, #6
 8003e6a:	6063      	str	r3, [r4, #4]
 8003e6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003e70:	2300      	movs	r3, #0
 8003e72:	6022      	str	r2, [r4, #0]
 8003e74:	9303      	str	r3, [sp, #12]
 8003e76:	ab0a      	add	r3, sp, #40	@ 0x28
 8003e78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003e7c:	ab09      	add	r3, sp, #36	@ 0x24
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	6861      	ldr	r1, [r4, #4]
 8003e82:	ec49 8b10 	vmov	d0, r8, r9
 8003e86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f7ff fed6 	bl	8003c3c <__cvt>
 8003e90:	9b06      	ldr	r3, [sp, #24]
 8003e92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003e94:	2b47      	cmp	r3, #71	@ 0x47
 8003e96:	4680      	mov	r8, r0
 8003e98:	d129      	bne.n	8003eee <_printf_float+0x172>
 8003e9a:	1cc8      	adds	r0, r1, #3
 8003e9c:	db02      	blt.n	8003ea4 <_printf_float+0x128>
 8003e9e:	6863      	ldr	r3, [r4, #4]
 8003ea0:	4299      	cmp	r1, r3
 8003ea2:	dd41      	ble.n	8003f28 <_printf_float+0x1ac>
 8003ea4:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ea8:	fa5f fa8a 	uxtb.w	sl, sl
 8003eac:	3901      	subs	r1, #1
 8003eae:	4652      	mov	r2, sl
 8003eb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003eb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8003eb6:	f7ff ff26 	bl	8003d06 <__exponent>
 8003eba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ebc:	1813      	adds	r3, r2, r0
 8003ebe:	2a01      	cmp	r2, #1
 8003ec0:	4681      	mov	r9, r0
 8003ec2:	6123      	str	r3, [r4, #16]
 8003ec4:	dc02      	bgt.n	8003ecc <_printf_float+0x150>
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	07d2      	lsls	r2, r2, #31
 8003eca:	d501      	bpl.n	8003ed0 <_printf_float+0x154>
 8003ecc:	3301      	adds	r3, #1
 8003ece:	6123      	str	r3, [r4, #16]
 8003ed0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0a2      	beq.n	8003e1e <_printf_float+0xa2>
 8003ed8:	232d      	movs	r3, #45	@ 0x2d
 8003eda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ede:	e79e      	b.n	8003e1e <_printf_float+0xa2>
 8003ee0:	9a06      	ldr	r2, [sp, #24]
 8003ee2:	2a47      	cmp	r2, #71	@ 0x47
 8003ee4:	d1c2      	bne.n	8003e6c <_printf_float+0xf0>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1c0      	bne.n	8003e6c <_printf_float+0xf0>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e7bd      	b.n	8003e6a <_printf_float+0xee>
 8003eee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ef2:	d9db      	bls.n	8003eac <_printf_float+0x130>
 8003ef4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ef8:	d118      	bne.n	8003f2c <_printf_float+0x1b0>
 8003efa:	2900      	cmp	r1, #0
 8003efc:	6863      	ldr	r3, [r4, #4]
 8003efe:	dd0b      	ble.n	8003f18 <_printf_float+0x19c>
 8003f00:	6121      	str	r1, [r4, #16]
 8003f02:	b913      	cbnz	r3, 8003f0a <_printf_float+0x18e>
 8003f04:	6822      	ldr	r2, [r4, #0]
 8003f06:	07d0      	lsls	r0, r2, #31
 8003f08:	d502      	bpl.n	8003f10 <_printf_float+0x194>
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	440b      	add	r3, r1
 8003f0e:	6123      	str	r3, [r4, #16]
 8003f10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003f12:	f04f 0900 	mov.w	r9, #0
 8003f16:	e7db      	b.n	8003ed0 <_printf_float+0x154>
 8003f18:	b913      	cbnz	r3, 8003f20 <_printf_float+0x1a4>
 8003f1a:	6822      	ldr	r2, [r4, #0]
 8003f1c:	07d2      	lsls	r2, r2, #31
 8003f1e:	d501      	bpl.n	8003f24 <_printf_float+0x1a8>
 8003f20:	3302      	adds	r3, #2
 8003f22:	e7f4      	b.n	8003f0e <_printf_float+0x192>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e7f2      	b.n	8003f0e <_printf_float+0x192>
 8003f28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f2e:	4299      	cmp	r1, r3
 8003f30:	db05      	blt.n	8003f3e <_printf_float+0x1c2>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	6121      	str	r1, [r4, #16]
 8003f36:	07d8      	lsls	r0, r3, #31
 8003f38:	d5ea      	bpl.n	8003f10 <_printf_float+0x194>
 8003f3a:	1c4b      	adds	r3, r1, #1
 8003f3c:	e7e7      	b.n	8003f0e <_printf_float+0x192>
 8003f3e:	2900      	cmp	r1, #0
 8003f40:	bfd4      	ite	le
 8003f42:	f1c1 0202 	rsble	r2, r1, #2
 8003f46:	2201      	movgt	r2, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	e7e0      	b.n	8003f0e <_printf_float+0x192>
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	055a      	lsls	r2, r3, #21
 8003f50:	d407      	bmi.n	8003f62 <_printf_float+0x1e6>
 8003f52:	6923      	ldr	r3, [r4, #16]
 8003f54:	4642      	mov	r2, r8
 8003f56:	4631      	mov	r1, r6
 8003f58:	4628      	mov	r0, r5
 8003f5a:	47b8      	blx	r7
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d12b      	bne.n	8003fb8 <_printf_float+0x23c>
 8003f60:	e767      	b.n	8003e32 <_printf_float+0xb6>
 8003f62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f66:	f240 80dd 	bls.w	8004124 <_printf_float+0x3a8>
 8003f6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2300      	movs	r3, #0
 8003f72:	f7fc fdc9 	bl	8000b08 <__aeabi_dcmpeq>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d033      	beq.n	8003fe2 <_printf_float+0x266>
 8003f7a:	4a37      	ldr	r2, [pc, #220]	@ (8004058 <_printf_float+0x2dc>)
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	4631      	mov	r1, r6
 8003f80:	4628      	mov	r0, r5
 8003f82:	47b8      	blx	r7
 8003f84:	3001      	adds	r0, #1
 8003f86:	f43f af54 	beq.w	8003e32 <_printf_float+0xb6>
 8003f8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003f8e:	4543      	cmp	r3, r8
 8003f90:	db02      	blt.n	8003f98 <_printf_float+0x21c>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	07d8      	lsls	r0, r3, #31
 8003f96:	d50f      	bpl.n	8003fb8 <_printf_float+0x23c>
 8003f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f9c:	4631      	mov	r1, r6
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	47b8      	blx	r7
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	f43f af45 	beq.w	8003e32 <_printf_float+0xb6>
 8003fa8:	f04f 0900 	mov.w	r9, #0
 8003fac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003fb0:	f104 0a1a 	add.w	sl, r4, #26
 8003fb4:	45c8      	cmp	r8, r9
 8003fb6:	dc09      	bgt.n	8003fcc <_printf_float+0x250>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	079b      	lsls	r3, r3, #30
 8003fbc:	f100 8103 	bmi.w	80041c6 <_printf_float+0x44a>
 8003fc0:	68e0      	ldr	r0, [r4, #12]
 8003fc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003fc4:	4298      	cmp	r0, r3
 8003fc6:	bfb8      	it	lt
 8003fc8:	4618      	movlt	r0, r3
 8003fca:	e734      	b.n	8003e36 <_printf_float+0xba>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	4652      	mov	r2, sl
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	47b8      	blx	r7
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	f43f af2b 	beq.w	8003e32 <_printf_float+0xb6>
 8003fdc:	f109 0901 	add.w	r9, r9, #1
 8003fe0:	e7e8      	b.n	8003fb4 <_printf_float+0x238>
 8003fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	dc39      	bgt.n	800405c <_printf_float+0x2e0>
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8004058 <_printf_float+0x2dc>)
 8003fea:	2301      	movs	r3, #1
 8003fec:	4631      	mov	r1, r6
 8003fee:	4628      	mov	r0, r5
 8003ff0:	47b8      	blx	r7
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	f43f af1d 	beq.w	8003e32 <_printf_float+0xb6>
 8003ff8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003ffc:	ea59 0303 	orrs.w	r3, r9, r3
 8004000:	d102      	bne.n	8004008 <_printf_float+0x28c>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	07d9      	lsls	r1, r3, #31
 8004006:	d5d7      	bpl.n	8003fb8 <_printf_float+0x23c>
 8004008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800400c:	4631      	mov	r1, r6
 800400e:	4628      	mov	r0, r5
 8004010:	47b8      	blx	r7
 8004012:	3001      	adds	r0, #1
 8004014:	f43f af0d 	beq.w	8003e32 <_printf_float+0xb6>
 8004018:	f04f 0a00 	mov.w	sl, #0
 800401c:	f104 0b1a 	add.w	fp, r4, #26
 8004020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004022:	425b      	negs	r3, r3
 8004024:	4553      	cmp	r3, sl
 8004026:	dc01      	bgt.n	800402c <_printf_float+0x2b0>
 8004028:	464b      	mov	r3, r9
 800402a:	e793      	b.n	8003f54 <_printf_float+0x1d8>
 800402c:	2301      	movs	r3, #1
 800402e:	465a      	mov	r2, fp
 8004030:	4631      	mov	r1, r6
 8004032:	4628      	mov	r0, r5
 8004034:	47b8      	blx	r7
 8004036:	3001      	adds	r0, #1
 8004038:	f43f aefb 	beq.w	8003e32 <_printf_float+0xb6>
 800403c:	f10a 0a01 	add.w	sl, sl, #1
 8004040:	e7ee      	b.n	8004020 <_printf_float+0x2a4>
 8004042:	bf00      	nop
 8004044:	7fefffff 	.word	0x7fefffff
 8004048:	080069c0 	.word	0x080069c0
 800404c:	080069c4 	.word	0x080069c4
 8004050:	080069c8 	.word	0x080069c8
 8004054:	080069cc 	.word	0x080069cc
 8004058:	080069d0 	.word	0x080069d0
 800405c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800405e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004062:	4553      	cmp	r3, sl
 8004064:	bfa8      	it	ge
 8004066:	4653      	movge	r3, sl
 8004068:	2b00      	cmp	r3, #0
 800406a:	4699      	mov	r9, r3
 800406c:	dc36      	bgt.n	80040dc <_printf_float+0x360>
 800406e:	f04f 0b00 	mov.w	fp, #0
 8004072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004076:	f104 021a 	add.w	r2, r4, #26
 800407a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800407c:	9306      	str	r3, [sp, #24]
 800407e:	eba3 0309 	sub.w	r3, r3, r9
 8004082:	455b      	cmp	r3, fp
 8004084:	dc31      	bgt.n	80040ea <_printf_float+0x36e>
 8004086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004088:	459a      	cmp	sl, r3
 800408a:	dc3a      	bgt.n	8004102 <_printf_float+0x386>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	07da      	lsls	r2, r3, #31
 8004090:	d437      	bmi.n	8004102 <_printf_float+0x386>
 8004092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004094:	ebaa 0903 	sub.w	r9, sl, r3
 8004098:	9b06      	ldr	r3, [sp, #24]
 800409a:	ebaa 0303 	sub.w	r3, sl, r3
 800409e:	4599      	cmp	r9, r3
 80040a0:	bfa8      	it	ge
 80040a2:	4699      	movge	r9, r3
 80040a4:	f1b9 0f00 	cmp.w	r9, #0
 80040a8:	dc33      	bgt.n	8004112 <_printf_float+0x396>
 80040aa:	f04f 0800 	mov.w	r8, #0
 80040ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040b2:	f104 0b1a 	add.w	fp, r4, #26
 80040b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040b8:	ebaa 0303 	sub.w	r3, sl, r3
 80040bc:	eba3 0309 	sub.w	r3, r3, r9
 80040c0:	4543      	cmp	r3, r8
 80040c2:	f77f af79 	ble.w	8003fb8 <_printf_float+0x23c>
 80040c6:	2301      	movs	r3, #1
 80040c8:	465a      	mov	r2, fp
 80040ca:	4631      	mov	r1, r6
 80040cc:	4628      	mov	r0, r5
 80040ce:	47b8      	blx	r7
 80040d0:	3001      	adds	r0, #1
 80040d2:	f43f aeae 	beq.w	8003e32 <_printf_float+0xb6>
 80040d6:	f108 0801 	add.w	r8, r8, #1
 80040da:	e7ec      	b.n	80040b6 <_printf_float+0x33a>
 80040dc:	4642      	mov	r2, r8
 80040de:	4631      	mov	r1, r6
 80040e0:	4628      	mov	r0, r5
 80040e2:	47b8      	blx	r7
 80040e4:	3001      	adds	r0, #1
 80040e6:	d1c2      	bne.n	800406e <_printf_float+0x2f2>
 80040e8:	e6a3      	b.n	8003e32 <_printf_float+0xb6>
 80040ea:	2301      	movs	r3, #1
 80040ec:	4631      	mov	r1, r6
 80040ee:	4628      	mov	r0, r5
 80040f0:	9206      	str	r2, [sp, #24]
 80040f2:	47b8      	blx	r7
 80040f4:	3001      	adds	r0, #1
 80040f6:	f43f ae9c 	beq.w	8003e32 <_printf_float+0xb6>
 80040fa:	9a06      	ldr	r2, [sp, #24]
 80040fc:	f10b 0b01 	add.w	fp, fp, #1
 8004100:	e7bb      	b.n	800407a <_printf_float+0x2fe>
 8004102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004106:	4631      	mov	r1, r6
 8004108:	4628      	mov	r0, r5
 800410a:	47b8      	blx	r7
 800410c:	3001      	adds	r0, #1
 800410e:	d1c0      	bne.n	8004092 <_printf_float+0x316>
 8004110:	e68f      	b.n	8003e32 <_printf_float+0xb6>
 8004112:	9a06      	ldr	r2, [sp, #24]
 8004114:	464b      	mov	r3, r9
 8004116:	4442      	add	r2, r8
 8004118:	4631      	mov	r1, r6
 800411a:	4628      	mov	r0, r5
 800411c:	47b8      	blx	r7
 800411e:	3001      	adds	r0, #1
 8004120:	d1c3      	bne.n	80040aa <_printf_float+0x32e>
 8004122:	e686      	b.n	8003e32 <_printf_float+0xb6>
 8004124:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004128:	f1ba 0f01 	cmp.w	sl, #1
 800412c:	dc01      	bgt.n	8004132 <_printf_float+0x3b6>
 800412e:	07db      	lsls	r3, r3, #31
 8004130:	d536      	bpl.n	80041a0 <_printf_float+0x424>
 8004132:	2301      	movs	r3, #1
 8004134:	4642      	mov	r2, r8
 8004136:	4631      	mov	r1, r6
 8004138:	4628      	mov	r0, r5
 800413a:	47b8      	blx	r7
 800413c:	3001      	adds	r0, #1
 800413e:	f43f ae78 	beq.w	8003e32 <_printf_float+0xb6>
 8004142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004146:	4631      	mov	r1, r6
 8004148:	4628      	mov	r0, r5
 800414a:	47b8      	blx	r7
 800414c:	3001      	adds	r0, #1
 800414e:	f43f ae70 	beq.w	8003e32 <_printf_float+0xb6>
 8004152:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004156:	2200      	movs	r2, #0
 8004158:	2300      	movs	r3, #0
 800415a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800415e:	f7fc fcd3 	bl	8000b08 <__aeabi_dcmpeq>
 8004162:	b9c0      	cbnz	r0, 8004196 <_printf_float+0x41a>
 8004164:	4653      	mov	r3, sl
 8004166:	f108 0201 	add.w	r2, r8, #1
 800416a:	4631      	mov	r1, r6
 800416c:	4628      	mov	r0, r5
 800416e:	47b8      	blx	r7
 8004170:	3001      	adds	r0, #1
 8004172:	d10c      	bne.n	800418e <_printf_float+0x412>
 8004174:	e65d      	b.n	8003e32 <_printf_float+0xb6>
 8004176:	2301      	movs	r3, #1
 8004178:	465a      	mov	r2, fp
 800417a:	4631      	mov	r1, r6
 800417c:	4628      	mov	r0, r5
 800417e:	47b8      	blx	r7
 8004180:	3001      	adds	r0, #1
 8004182:	f43f ae56 	beq.w	8003e32 <_printf_float+0xb6>
 8004186:	f108 0801 	add.w	r8, r8, #1
 800418a:	45d0      	cmp	r8, sl
 800418c:	dbf3      	blt.n	8004176 <_printf_float+0x3fa>
 800418e:	464b      	mov	r3, r9
 8004190:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004194:	e6df      	b.n	8003f56 <_printf_float+0x1da>
 8004196:	f04f 0800 	mov.w	r8, #0
 800419a:	f104 0b1a 	add.w	fp, r4, #26
 800419e:	e7f4      	b.n	800418a <_printf_float+0x40e>
 80041a0:	2301      	movs	r3, #1
 80041a2:	4642      	mov	r2, r8
 80041a4:	e7e1      	b.n	800416a <_printf_float+0x3ee>
 80041a6:	2301      	movs	r3, #1
 80041a8:	464a      	mov	r2, r9
 80041aa:	4631      	mov	r1, r6
 80041ac:	4628      	mov	r0, r5
 80041ae:	47b8      	blx	r7
 80041b0:	3001      	adds	r0, #1
 80041b2:	f43f ae3e 	beq.w	8003e32 <_printf_float+0xb6>
 80041b6:	f108 0801 	add.w	r8, r8, #1
 80041ba:	68e3      	ldr	r3, [r4, #12]
 80041bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80041be:	1a5b      	subs	r3, r3, r1
 80041c0:	4543      	cmp	r3, r8
 80041c2:	dcf0      	bgt.n	80041a6 <_printf_float+0x42a>
 80041c4:	e6fc      	b.n	8003fc0 <_printf_float+0x244>
 80041c6:	f04f 0800 	mov.w	r8, #0
 80041ca:	f104 0919 	add.w	r9, r4, #25
 80041ce:	e7f4      	b.n	80041ba <_printf_float+0x43e>

080041d0 <_printf_common>:
 80041d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d4:	4616      	mov	r6, r2
 80041d6:	4698      	mov	r8, r3
 80041d8:	688a      	ldr	r2, [r1, #8]
 80041da:	690b      	ldr	r3, [r1, #16]
 80041dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041e0:	4293      	cmp	r3, r2
 80041e2:	bfb8      	it	lt
 80041e4:	4613      	movlt	r3, r2
 80041e6:	6033      	str	r3, [r6, #0]
 80041e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041ec:	4607      	mov	r7, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	b10a      	cbz	r2, 80041f6 <_printf_common+0x26>
 80041f2:	3301      	adds	r3, #1
 80041f4:	6033      	str	r3, [r6, #0]
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	0699      	lsls	r1, r3, #26
 80041fa:	bf42      	ittt	mi
 80041fc:	6833      	ldrmi	r3, [r6, #0]
 80041fe:	3302      	addmi	r3, #2
 8004200:	6033      	strmi	r3, [r6, #0]
 8004202:	6825      	ldr	r5, [r4, #0]
 8004204:	f015 0506 	ands.w	r5, r5, #6
 8004208:	d106      	bne.n	8004218 <_printf_common+0x48>
 800420a:	f104 0a19 	add.w	sl, r4, #25
 800420e:	68e3      	ldr	r3, [r4, #12]
 8004210:	6832      	ldr	r2, [r6, #0]
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	42ab      	cmp	r3, r5
 8004216:	dc26      	bgt.n	8004266 <_printf_common+0x96>
 8004218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800421c:	6822      	ldr	r2, [r4, #0]
 800421e:	3b00      	subs	r3, #0
 8004220:	bf18      	it	ne
 8004222:	2301      	movne	r3, #1
 8004224:	0692      	lsls	r2, r2, #26
 8004226:	d42b      	bmi.n	8004280 <_printf_common+0xb0>
 8004228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800422c:	4641      	mov	r1, r8
 800422e:	4638      	mov	r0, r7
 8004230:	47c8      	blx	r9
 8004232:	3001      	adds	r0, #1
 8004234:	d01e      	beq.n	8004274 <_printf_common+0xa4>
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	6922      	ldr	r2, [r4, #16]
 800423a:	f003 0306 	and.w	r3, r3, #6
 800423e:	2b04      	cmp	r3, #4
 8004240:	bf02      	ittt	eq
 8004242:	68e5      	ldreq	r5, [r4, #12]
 8004244:	6833      	ldreq	r3, [r6, #0]
 8004246:	1aed      	subeq	r5, r5, r3
 8004248:	68a3      	ldr	r3, [r4, #8]
 800424a:	bf0c      	ite	eq
 800424c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004250:	2500      	movne	r5, #0
 8004252:	4293      	cmp	r3, r2
 8004254:	bfc4      	itt	gt
 8004256:	1a9b      	subgt	r3, r3, r2
 8004258:	18ed      	addgt	r5, r5, r3
 800425a:	2600      	movs	r6, #0
 800425c:	341a      	adds	r4, #26
 800425e:	42b5      	cmp	r5, r6
 8004260:	d11a      	bne.n	8004298 <_printf_common+0xc8>
 8004262:	2000      	movs	r0, #0
 8004264:	e008      	b.n	8004278 <_printf_common+0xa8>
 8004266:	2301      	movs	r3, #1
 8004268:	4652      	mov	r2, sl
 800426a:	4641      	mov	r1, r8
 800426c:	4638      	mov	r0, r7
 800426e:	47c8      	blx	r9
 8004270:	3001      	adds	r0, #1
 8004272:	d103      	bne.n	800427c <_printf_common+0xac>
 8004274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427c:	3501      	adds	r5, #1
 800427e:	e7c6      	b.n	800420e <_printf_common+0x3e>
 8004280:	18e1      	adds	r1, r4, r3
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	2030      	movs	r0, #48	@ 0x30
 8004286:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800428a:	4422      	add	r2, r4
 800428c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004294:	3302      	adds	r3, #2
 8004296:	e7c7      	b.n	8004228 <_printf_common+0x58>
 8004298:	2301      	movs	r3, #1
 800429a:	4622      	mov	r2, r4
 800429c:	4641      	mov	r1, r8
 800429e:	4638      	mov	r0, r7
 80042a0:	47c8      	blx	r9
 80042a2:	3001      	adds	r0, #1
 80042a4:	d0e6      	beq.n	8004274 <_printf_common+0xa4>
 80042a6:	3601      	adds	r6, #1
 80042a8:	e7d9      	b.n	800425e <_printf_common+0x8e>
	...

080042ac <_printf_i>:
 80042ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042b0:	7e0f      	ldrb	r7, [r1, #24]
 80042b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042b4:	2f78      	cmp	r7, #120	@ 0x78
 80042b6:	4691      	mov	r9, r2
 80042b8:	4680      	mov	r8, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	469a      	mov	sl, r3
 80042be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042c2:	d807      	bhi.n	80042d4 <_printf_i+0x28>
 80042c4:	2f62      	cmp	r7, #98	@ 0x62
 80042c6:	d80a      	bhi.n	80042de <_printf_i+0x32>
 80042c8:	2f00      	cmp	r7, #0
 80042ca:	f000 80d2 	beq.w	8004472 <_printf_i+0x1c6>
 80042ce:	2f58      	cmp	r7, #88	@ 0x58
 80042d0:	f000 80b9 	beq.w	8004446 <_printf_i+0x19a>
 80042d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042dc:	e03a      	b.n	8004354 <_printf_i+0xa8>
 80042de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042e2:	2b15      	cmp	r3, #21
 80042e4:	d8f6      	bhi.n	80042d4 <_printf_i+0x28>
 80042e6:	a101      	add	r1, pc, #4	@ (adr r1, 80042ec <_printf_i+0x40>)
 80042e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042ec:	08004345 	.word	0x08004345
 80042f0:	08004359 	.word	0x08004359
 80042f4:	080042d5 	.word	0x080042d5
 80042f8:	080042d5 	.word	0x080042d5
 80042fc:	080042d5 	.word	0x080042d5
 8004300:	080042d5 	.word	0x080042d5
 8004304:	08004359 	.word	0x08004359
 8004308:	080042d5 	.word	0x080042d5
 800430c:	080042d5 	.word	0x080042d5
 8004310:	080042d5 	.word	0x080042d5
 8004314:	080042d5 	.word	0x080042d5
 8004318:	08004459 	.word	0x08004459
 800431c:	08004383 	.word	0x08004383
 8004320:	08004413 	.word	0x08004413
 8004324:	080042d5 	.word	0x080042d5
 8004328:	080042d5 	.word	0x080042d5
 800432c:	0800447b 	.word	0x0800447b
 8004330:	080042d5 	.word	0x080042d5
 8004334:	08004383 	.word	0x08004383
 8004338:	080042d5 	.word	0x080042d5
 800433c:	080042d5 	.word	0x080042d5
 8004340:	0800441b 	.word	0x0800441b
 8004344:	6833      	ldr	r3, [r6, #0]
 8004346:	1d1a      	adds	r2, r3, #4
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6032      	str	r2, [r6, #0]
 800434c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004354:	2301      	movs	r3, #1
 8004356:	e09d      	b.n	8004494 <_printf_i+0x1e8>
 8004358:	6833      	ldr	r3, [r6, #0]
 800435a:	6820      	ldr	r0, [r4, #0]
 800435c:	1d19      	adds	r1, r3, #4
 800435e:	6031      	str	r1, [r6, #0]
 8004360:	0606      	lsls	r6, r0, #24
 8004362:	d501      	bpl.n	8004368 <_printf_i+0xbc>
 8004364:	681d      	ldr	r5, [r3, #0]
 8004366:	e003      	b.n	8004370 <_printf_i+0xc4>
 8004368:	0645      	lsls	r5, r0, #25
 800436a:	d5fb      	bpl.n	8004364 <_printf_i+0xb8>
 800436c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004370:	2d00      	cmp	r5, #0
 8004372:	da03      	bge.n	800437c <_printf_i+0xd0>
 8004374:	232d      	movs	r3, #45	@ 0x2d
 8004376:	426d      	negs	r5, r5
 8004378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800437c:	4859      	ldr	r0, [pc, #356]	@ (80044e4 <_printf_i+0x238>)
 800437e:	230a      	movs	r3, #10
 8004380:	e011      	b.n	80043a6 <_printf_i+0xfa>
 8004382:	6821      	ldr	r1, [r4, #0]
 8004384:	6833      	ldr	r3, [r6, #0]
 8004386:	0608      	lsls	r0, r1, #24
 8004388:	f853 5b04 	ldr.w	r5, [r3], #4
 800438c:	d402      	bmi.n	8004394 <_printf_i+0xe8>
 800438e:	0649      	lsls	r1, r1, #25
 8004390:	bf48      	it	mi
 8004392:	b2ad      	uxthmi	r5, r5
 8004394:	2f6f      	cmp	r7, #111	@ 0x6f
 8004396:	4853      	ldr	r0, [pc, #332]	@ (80044e4 <_printf_i+0x238>)
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	bf14      	ite	ne
 800439c:	230a      	movne	r3, #10
 800439e:	2308      	moveq	r3, #8
 80043a0:	2100      	movs	r1, #0
 80043a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043a6:	6866      	ldr	r6, [r4, #4]
 80043a8:	60a6      	str	r6, [r4, #8]
 80043aa:	2e00      	cmp	r6, #0
 80043ac:	bfa2      	ittt	ge
 80043ae:	6821      	ldrge	r1, [r4, #0]
 80043b0:	f021 0104 	bicge.w	r1, r1, #4
 80043b4:	6021      	strge	r1, [r4, #0]
 80043b6:	b90d      	cbnz	r5, 80043bc <_printf_i+0x110>
 80043b8:	2e00      	cmp	r6, #0
 80043ba:	d04b      	beq.n	8004454 <_printf_i+0x1a8>
 80043bc:	4616      	mov	r6, r2
 80043be:	fbb5 f1f3 	udiv	r1, r5, r3
 80043c2:	fb03 5711 	mls	r7, r3, r1, r5
 80043c6:	5dc7      	ldrb	r7, [r0, r7]
 80043c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043cc:	462f      	mov	r7, r5
 80043ce:	42bb      	cmp	r3, r7
 80043d0:	460d      	mov	r5, r1
 80043d2:	d9f4      	bls.n	80043be <_printf_i+0x112>
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d10b      	bne.n	80043f0 <_printf_i+0x144>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	07df      	lsls	r7, r3, #31
 80043dc:	d508      	bpl.n	80043f0 <_printf_i+0x144>
 80043de:	6923      	ldr	r3, [r4, #16]
 80043e0:	6861      	ldr	r1, [r4, #4]
 80043e2:	4299      	cmp	r1, r3
 80043e4:	bfde      	ittt	le
 80043e6:	2330      	movle	r3, #48	@ 0x30
 80043e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80043f0:	1b92      	subs	r2, r2, r6
 80043f2:	6122      	str	r2, [r4, #16]
 80043f4:	f8cd a000 	str.w	sl, [sp]
 80043f8:	464b      	mov	r3, r9
 80043fa:	aa03      	add	r2, sp, #12
 80043fc:	4621      	mov	r1, r4
 80043fe:	4640      	mov	r0, r8
 8004400:	f7ff fee6 	bl	80041d0 <_printf_common>
 8004404:	3001      	adds	r0, #1
 8004406:	d14a      	bne.n	800449e <_printf_i+0x1f2>
 8004408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800440c:	b004      	add	sp, #16
 800440e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	f043 0320 	orr.w	r3, r3, #32
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	4833      	ldr	r0, [pc, #204]	@ (80044e8 <_printf_i+0x23c>)
 800441c:	2778      	movs	r7, #120	@ 0x78
 800441e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	6831      	ldr	r1, [r6, #0]
 8004426:	061f      	lsls	r7, r3, #24
 8004428:	f851 5b04 	ldr.w	r5, [r1], #4
 800442c:	d402      	bmi.n	8004434 <_printf_i+0x188>
 800442e:	065f      	lsls	r7, r3, #25
 8004430:	bf48      	it	mi
 8004432:	b2ad      	uxthmi	r5, r5
 8004434:	6031      	str	r1, [r6, #0]
 8004436:	07d9      	lsls	r1, r3, #31
 8004438:	bf44      	itt	mi
 800443a:	f043 0320 	orrmi.w	r3, r3, #32
 800443e:	6023      	strmi	r3, [r4, #0]
 8004440:	b11d      	cbz	r5, 800444a <_printf_i+0x19e>
 8004442:	2310      	movs	r3, #16
 8004444:	e7ac      	b.n	80043a0 <_printf_i+0xf4>
 8004446:	4827      	ldr	r0, [pc, #156]	@ (80044e4 <_printf_i+0x238>)
 8004448:	e7e9      	b.n	800441e <_printf_i+0x172>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	f023 0320 	bic.w	r3, r3, #32
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	e7f6      	b.n	8004442 <_printf_i+0x196>
 8004454:	4616      	mov	r6, r2
 8004456:	e7bd      	b.n	80043d4 <_printf_i+0x128>
 8004458:	6833      	ldr	r3, [r6, #0]
 800445a:	6825      	ldr	r5, [r4, #0]
 800445c:	6961      	ldr	r1, [r4, #20]
 800445e:	1d18      	adds	r0, r3, #4
 8004460:	6030      	str	r0, [r6, #0]
 8004462:	062e      	lsls	r6, r5, #24
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	d501      	bpl.n	800446c <_printf_i+0x1c0>
 8004468:	6019      	str	r1, [r3, #0]
 800446a:	e002      	b.n	8004472 <_printf_i+0x1c6>
 800446c:	0668      	lsls	r0, r5, #25
 800446e:	d5fb      	bpl.n	8004468 <_printf_i+0x1bc>
 8004470:	8019      	strh	r1, [r3, #0]
 8004472:	2300      	movs	r3, #0
 8004474:	6123      	str	r3, [r4, #16]
 8004476:	4616      	mov	r6, r2
 8004478:	e7bc      	b.n	80043f4 <_printf_i+0x148>
 800447a:	6833      	ldr	r3, [r6, #0]
 800447c:	1d1a      	adds	r2, r3, #4
 800447e:	6032      	str	r2, [r6, #0]
 8004480:	681e      	ldr	r6, [r3, #0]
 8004482:	6862      	ldr	r2, [r4, #4]
 8004484:	2100      	movs	r1, #0
 8004486:	4630      	mov	r0, r6
 8004488:	f7fb fec2 	bl	8000210 <memchr>
 800448c:	b108      	cbz	r0, 8004492 <_printf_i+0x1e6>
 800448e:	1b80      	subs	r0, r0, r6
 8004490:	6060      	str	r0, [r4, #4]
 8004492:	6863      	ldr	r3, [r4, #4]
 8004494:	6123      	str	r3, [r4, #16]
 8004496:	2300      	movs	r3, #0
 8004498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800449c:	e7aa      	b.n	80043f4 <_printf_i+0x148>
 800449e:	6923      	ldr	r3, [r4, #16]
 80044a0:	4632      	mov	r2, r6
 80044a2:	4649      	mov	r1, r9
 80044a4:	4640      	mov	r0, r8
 80044a6:	47d0      	blx	sl
 80044a8:	3001      	adds	r0, #1
 80044aa:	d0ad      	beq.n	8004408 <_printf_i+0x15c>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	079b      	lsls	r3, r3, #30
 80044b0:	d413      	bmi.n	80044da <_printf_i+0x22e>
 80044b2:	68e0      	ldr	r0, [r4, #12]
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	4298      	cmp	r0, r3
 80044b8:	bfb8      	it	lt
 80044ba:	4618      	movlt	r0, r3
 80044bc:	e7a6      	b.n	800440c <_printf_i+0x160>
 80044be:	2301      	movs	r3, #1
 80044c0:	4632      	mov	r2, r6
 80044c2:	4649      	mov	r1, r9
 80044c4:	4640      	mov	r0, r8
 80044c6:	47d0      	blx	sl
 80044c8:	3001      	adds	r0, #1
 80044ca:	d09d      	beq.n	8004408 <_printf_i+0x15c>
 80044cc:	3501      	adds	r5, #1
 80044ce:	68e3      	ldr	r3, [r4, #12]
 80044d0:	9903      	ldr	r1, [sp, #12]
 80044d2:	1a5b      	subs	r3, r3, r1
 80044d4:	42ab      	cmp	r3, r5
 80044d6:	dcf2      	bgt.n	80044be <_printf_i+0x212>
 80044d8:	e7eb      	b.n	80044b2 <_printf_i+0x206>
 80044da:	2500      	movs	r5, #0
 80044dc:	f104 0619 	add.w	r6, r4, #25
 80044e0:	e7f5      	b.n	80044ce <_printf_i+0x222>
 80044e2:	bf00      	nop
 80044e4:	080069d2 	.word	0x080069d2
 80044e8:	080069e3 	.word	0x080069e3

080044ec <siprintf>:
 80044ec:	b40e      	push	{r1, r2, r3}
 80044ee:	b500      	push	{lr}
 80044f0:	b09c      	sub	sp, #112	@ 0x70
 80044f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80044f4:	9002      	str	r0, [sp, #8]
 80044f6:	9006      	str	r0, [sp, #24]
 80044f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80044fc:	4809      	ldr	r0, [pc, #36]	@ (8004524 <siprintf+0x38>)
 80044fe:	9107      	str	r1, [sp, #28]
 8004500:	9104      	str	r1, [sp, #16]
 8004502:	4909      	ldr	r1, [pc, #36]	@ (8004528 <siprintf+0x3c>)
 8004504:	f853 2b04 	ldr.w	r2, [r3], #4
 8004508:	9105      	str	r1, [sp, #20]
 800450a:	6800      	ldr	r0, [r0, #0]
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	a902      	add	r1, sp, #8
 8004510:	f000 ffb2 	bl	8005478 <_svfiprintf_r>
 8004514:	9b02      	ldr	r3, [sp, #8]
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	b01c      	add	sp, #112	@ 0x70
 800451c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004520:	b003      	add	sp, #12
 8004522:	4770      	bx	lr
 8004524:	20000018 	.word	0x20000018
 8004528:	ffff0208 	.word	0xffff0208

0800452c <std>:
 800452c:	2300      	movs	r3, #0
 800452e:	b510      	push	{r4, lr}
 8004530:	4604      	mov	r4, r0
 8004532:	e9c0 3300 	strd	r3, r3, [r0]
 8004536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800453a:	6083      	str	r3, [r0, #8]
 800453c:	8181      	strh	r1, [r0, #12]
 800453e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004540:	81c2      	strh	r2, [r0, #14]
 8004542:	6183      	str	r3, [r0, #24]
 8004544:	4619      	mov	r1, r3
 8004546:	2208      	movs	r2, #8
 8004548:	305c      	adds	r0, #92	@ 0x5c
 800454a:	f000 f8b1 	bl	80046b0 <memset>
 800454e:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <std+0x58>)
 8004550:	6263      	str	r3, [r4, #36]	@ 0x24
 8004552:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <std+0x5c>)
 8004554:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004556:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <std+0x60>)
 8004558:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800455a:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <std+0x64>)
 800455c:	6323      	str	r3, [r4, #48]	@ 0x30
 800455e:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <std+0x68>)
 8004560:	6224      	str	r4, [r4, #32]
 8004562:	429c      	cmp	r4, r3
 8004564:	d006      	beq.n	8004574 <std+0x48>
 8004566:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800456a:	4294      	cmp	r4, r2
 800456c:	d002      	beq.n	8004574 <std+0x48>
 800456e:	33d0      	adds	r3, #208	@ 0xd0
 8004570:	429c      	cmp	r4, r3
 8004572:	d105      	bne.n	8004580 <std+0x54>
 8004574:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800457c:	f000 b8ce 	b.w	800471c <__retarget_lock_init_recursive>
 8004580:	bd10      	pop	{r4, pc}
 8004582:	bf00      	nop
 8004584:	08006039 	.word	0x08006039
 8004588:	0800605b 	.word	0x0800605b
 800458c:	08006093 	.word	0x08006093
 8004590:	080060b7 	.word	0x080060b7
 8004594:	20000388 	.word	0x20000388

08004598 <stdio_exit_handler>:
 8004598:	4a02      	ldr	r2, [pc, #8]	@ (80045a4 <stdio_exit_handler+0xc>)
 800459a:	4903      	ldr	r1, [pc, #12]	@ (80045a8 <stdio_exit_handler+0x10>)
 800459c:	4803      	ldr	r0, [pc, #12]	@ (80045ac <stdio_exit_handler+0x14>)
 800459e:	f000 b869 	b.w	8004674 <_fwalk_sglue>
 80045a2:	bf00      	nop
 80045a4:	2000000c 	.word	0x2000000c
 80045a8:	080058cd 	.word	0x080058cd
 80045ac:	2000001c 	.word	0x2000001c

080045b0 <cleanup_stdio>:
 80045b0:	6841      	ldr	r1, [r0, #4]
 80045b2:	4b0c      	ldr	r3, [pc, #48]	@ (80045e4 <cleanup_stdio+0x34>)
 80045b4:	4299      	cmp	r1, r3
 80045b6:	b510      	push	{r4, lr}
 80045b8:	4604      	mov	r4, r0
 80045ba:	d001      	beq.n	80045c0 <cleanup_stdio+0x10>
 80045bc:	f001 f986 	bl	80058cc <_fflush_r>
 80045c0:	68a1      	ldr	r1, [r4, #8]
 80045c2:	4b09      	ldr	r3, [pc, #36]	@ (80045e8 <cleanup_stdio+0x38>)
 80045c4:	4299      	cmp	r1, r3
 80045c6:	d002      	beq.n	80045ce <cleanup_stdio+0x1e>
 80045c8:	4620      	mov	r0, r4
 80045ca:	f001 f97f 	bl	80058cc <_fflush_r>
 80045ce:	68e1      	ldr	r1, [r4, #12]
 80045d0:	4b06      	ldr	r3, [pc, #24]	@ (80045ec <cleanup_stdio+0x3c>)
 80045d2:	4299      	cmp	r1, r3
 80045d4:	d004      	beq.n	80045e0 <cleanup_stdio+0x30>
 80045d6:	4620      	mov	r0, r4
 80045d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045dc:	f001 b976 	b.w	80058cc <_fflush_r>
 80045e0:	bd10      	pop	{r4, pc}
 80045e2:	bf00      	nop
 80045e4:	20000388 	.word	0x20000388
 80045e8:	200003f0 	.word	0x200003f0
 80045ec:	20000458 	.word	0x20000458

080045f0 <global_stdio_init.part.0>:
 80045f0:	b510      	push	{r4, lr}
 80045f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <global_stdio_init.part.0+0x30>)
 80045f4:	4c0b      	ldr	r4, [pc, #44]	@ (8004624 <global_stdio_init.part.0+0x34>)
 80045f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004628 <global_stdio_init.part.0+0x38>)
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	4620      	mov	r0, r4
 80045fc:	2200      	movs	r2, #0
 80045fe:	2104      	movs	r1, #4
 8004600:	f7ff ff94 	bl	800452c <std>
 8004604:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004608:	2201      	movs	r2, #1
 800460a:	2109      	movs	r1, #9
 800460c:	f7ff ff8e 	bl	800452c <std>
 8004610:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004614:	2202      	movs	r2, #2
 8004616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800461a:	2112      	movs	r1, #18
 800461c:	f7ff bf86 	b.w	800452c <std>
 8004620:	200004c0 	.word	0x200004c0
 8004624:	20000388 	.word	0x20000388
 8004628:	08004599 	.word	0x08004599

0800462c <__sfp_lock_acquire>:
 800462c:	4801      	ldr	r0, [pc, #4]	@ (8004634 <__sfp_lock_acquire+0x8>)
 800462e:	f000 b876 	b.w	800471e <__retarget_lock_acquire_recursive>
 8004632:	bf00      	nop
 8004634:	200004c5 	.word	0x200004c5

08004638 <__sfp_lock_release>:
 8004638:	4801      	ldr	r0, [pc, #4]	@ (8004640 <__sfp_lock_release+0x8>)
 800463a:	f000 b871 	b.w	8004720 <__retarget_lock_release_recursive>
 800463e:	bf00      	nop
 8004640:	200004c5 	.word	0x200004c5

08004644 <__sinit>:
 8004644:	b510      	push	{r4, lr}
 8004646:	4604      	mov	r4, r0
 8004648:	f7ff fff0 	bl	800462c <__sfp_lock_acquire>
 800464c:	6a23      	ldr	r3, [r4, #32]
 800464e:	b11b      	cbz	r3, 8004658 <__sinit+0x14>
 8004650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004654:	f7ff bff0 	b.w	8004638 <__sfp_lock_release>
 8004658:	4b04      	ldr	r3, [pc, #16]	@ (800466c <__sinit+0x28>)
 800465a:	6223      	str	r3, [r4, #32]
 800465c:	4b04      	ldr	r3, [pc, #16]	@ (8004670 <__sinit+0x2c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f5      	bne.n	8004650 <__sinit+0xc>
 8004664:	f7ff ffc4 	bl	80045f0 <global_stdio_init.part.0>
 8004668:	e7f2      	b.n	8004650 <__sinit+0xc>
 800466a:	bf00      	nop
 800466c:	080045b1 	.word	0x080045b1
 8004670:	200004c0 	.word	0x200004c0

08004674 <_fwalk_sglue>:
 8004674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004678:	4607      	mov	r7, r0
 800467a:	4688      	mov	r8, r1
 800467c:	4614      	mov	r4, r2
 800467e:	2600      	movs	r6, #0
 8004680:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004684:	f1b9 0901 	subs.w	r9, r9, #1
 8004688:	d505      	bpl.n	8004696 <_fwalk_sglue+0x22>
 800468a:	6824      	ldr	r4, [r4, #0]
 800468c:	2c00      	cmp	r4, #0
 800468e:	d1f7      	bne.n	8004680 <_fwalk_sglue+0xc>
 8004690:	4630      	mov	r0, r6
 8004692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004696:	89ab      	ldrh	r3, [r5, #12]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d907      	bls.n	80046ac <_fwalk_sglue+0x38>
 800469c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046a0:	3301      	adds	r3, #1
 80046a2:	d003      	beq.n	80046ac <_fwalk_sglue+0x38>
 80046a4:	4629      	mov	r1, r5
 80046a6:	4638      	mov	r0, r7
 80046a8:	47c0      	blx	r8
 80046aa:	4306      	orrs	r6, r0
 80046ac:	3568      	adds	r5, #104	@ 0x68
 80046ae:	e7e9      	b.n	8004684 <_fwalk_sglue+0x10>

080046b0 <memset>:
 80046b0:	4402      	add	r2, r0
 80046b2:	4603      	mov	r3, r0
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d100      	bne.n	80046ba <memset+0xa>
 80046b8:	4770      	bx	lr
 80046ba:	f803 1b01 	strb.w	r1, [r3], #1
 80046be:	e7f9      	b.n	80046b4 <memset+0x4>

080046c0 <_localeconv_r>:
 80046c0:	4800      	ldr	r0, [pc, #0]	@ (80046c4 <_localeconv_r+0x4>)
 80046c2:	4770      	bx	lr
 80046c4:	20000158 	.word	0x20000158

080046c8 <__errno>:
 80046c8:	4b01      	ldr	r3, [pc, #4]	@ (80046d0 <__errno+0x8>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000018 	.word	0x20000018

080046d4 <__libc_init_array>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	4d0d      	ldr	r5, [pc, #52]	@ (800470c <__libc_init_array+0x38>)
 80046d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004710 <__libc_init_array+0x3c>)
 80046da:	1b64      	subs	r4, r4, r5
 80046dc:	10a4      	asrs	r4, r4, #2
 80046de:	2600      	movs	r6, #0
 80046e0:	42a6      	cmp	r6, r4
 80046e2:	d109      	bne.n	80046f8 <__libc_init_array+0x24>
 80046e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004714 <__libc_init_array+0x40>)
 80046e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004718 <__libc_init_array+0x44>)
 80046e8:	f002 f8f0 	bl	80068cc <_init>
 80046ec:	1b64      	subs	r4, r4, r5
 80046ee:	10a4      	asrs	r4, r4, #2
 80046f0:	2600      	movs	r6, #0
 80046f2:	42a6      	cmp	r6, r4
 80046f4:	d105      	bne.n	8004702 <__libc_init_array+0x2e>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fc:	4798      	blx	r3
 80046fe:	3601      	adds	r6, #1
 8004700:	e7ee      	b.n	80046e0 <__libc_init_array+0xc>
 8004702:	f855 3b04 	ldr.w	r3, [r5], #4
 8004706:	4798      	blx	r3
 8004708:	3601      	adds	r6, #1
 800470a:	e7f2      	b.n	80046f2 <__libc_init_array+0x1e>
 800470c:	08006d38 	.word	0x08006d38
 8004710:	08006d38 	.word	0x08006d38
 8004714:	08006d38 	.word	0x08006d38
 8004718:	08006d3c 	.word	0x08006d3c

0800471c <__retarget_lock_init_recursive>:
 800471c:	4770      	bx	lr

0800471e <__retarget_lock_acquire_recursive>:
 800471e:	4770      	bx	lr

08004720 <__retarget_lock_release_recursive>:
 8004720:	4770      	bx	lr

08004722 <quorem>:
 8004722:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004726:	6903      	ldr	r3, [r0, #16]
 8004728:	690c      	ldr	r4, [r1, #16]
 800472a:	42a3      	cmp	r3, r4
 800472c:	4607      	mov	r7, r0
 800472e:	db7e      	blt.n	800482e <quorem+0x10c>
 8004730:	3c01      	subs	r4, #1
 8004732:	f101 0814 	add.w	r8, r1, #20
 8004736:	00a3      	lsls	r3, r4, #2
 8004738:	f100 0514 	add.w	r5, r0, #20
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004742:	9301      	str	r3, [sp, #4]
 8004744:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800474c:	3301      	adds	r3, #1
 800474e:	429a      	cmp	r2, r3
 8004750:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004754:	fbb2 f6f3 	udiv	r6, r2, r3
 8004758:	d32e      	bcc.n	80047b8 <quorem+0x96>
 800475a:	f04f 0a00 	mov.w	sl, #0
 800475e:	46c4      	mov	ip, r8
 8004760:	46ae      	mov	lr, r5
 8004762:	46d3      	mov	fp, sl
 8004764:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004768:	b298      	uxth	r0, r3
 800476a:	fb06 a000 	mla	r0, r6, r0, sl
 800476e:	0c02      	lsrs	r2, r0, #16
 8004770:	0c1b      	lsrs	r3, r3, #16
 8004772:	fb06 2303 	mla	r3, r6, r3, r2
 8004776:	f8de 2000 	ldr.w	r2, [lr]
 800477a:	b280      	uxth	r0, r0
 800477c:	b292      	uxth	r2, r2
 800477e:	1a12      	subs	r2, r2, r0
 8004780:	445a      	add	r2, fp
 8004782:	f8de 0000 	ldr.w	r0, [lr]
 8004786:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800478a:	b29b      	uxth	r3, r3
 800478c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004790:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004794:	b292      	uxth	r2, r2
 8004796:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800479a:	45e1      	cmp	r9, ip
 800479c:	f84e 2b04 	str.w	r2, [lr], #4
 80047a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80047a4:	d2de      	bcs.n	8004764 <quorem+0x42>
 80047a6:	9b00      	ldr	r3, [sp, #0]
 80047a8:	58eb      	ldr	r3, [r5, r3]
 80047aa:	b92b      	cbnz	r3, 80047b8 <quorem+0x96>
 80047ac:	9b01      	ldr	r3, [sp, #4]
 80047ae:	3b04      	subs	r3, #4
 80047b0:	429d      	cmp	r5, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	d32f      	bcc.n	8004816 <quorem+0xf4>
 80047b6:	613c      	str	r4, [r7, #16]
 80047b8:	4638      	mov	r0, r7
 80047ba:	f001 fb35 	bl	8005e28 <__mcmp>
 80047be:	2800      	cmp	r0, #0
 80047c0:	db25      	blt.n	800480e <quorem+0xec>
 80047c2:	4629      	mov	r1, r5
 80047c4:	2000      	movs	r0, #0
 80047c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80047ca:	f8d1 c000 	ldr.w	ip, [r1]
 80047ce:	fa1f fe82 	uxth.w	lr, r2
 80047d2:	fa1f f38c 	uxth.w	r3, ip
 80047d6:	eba3 030e 	sub.w	r3, r3, lr
 80047da:	4403      	add	r3, r0
 80047dc:	0c12      	lsrs	r2, r2, #16
 80047de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80047e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047ec:	45c1      	cmp	r9, r8
 80047ee:	f841 3b04 	str.w	r3, [r1], #4
 80047f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80047f6:	d2e6      	bcs.n	80047c6 <quorem+0xa4>
 80047f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004800:	b922      	cbnz	r2, 800480c <quorem+0xea>
 8004802:	3b04      	subs	r3, #4
 8004804:	429d      	cmp	r5, r3
 8004806:	461a      	mov	r2, r3
 8004808:	d30b      	bcc.n	8004822 <quorem+0x100>
 800480a:	613c      	str	r4, [r7, #16]
 800480c:	3601      	adds	r6, #1
 800480e:	4630      	mov	r0, r6
 8004810:	b003      	add	sp, #12
 8004812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	3b04      	subs	r3, #4
 800481a:	2a00      	cmp	r2, #0
 800481c:	d1cb      	bne.n	80047b6 <quorem+0x94>
 800481e:	3c01      	subs	r4, #1
 8004820:	e7c6      	b.n	80047b0 <quorem+0x8e>
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	3b04      	subs	r3, #4
 8004826:	2a00      	cmp	r2, #0
 8004828:	d1ef      	bne.n	800480a <quorem+0xe8>
 800482a:	3c01      	subs	r4, #1
 800482c:	e7ea      	b.n	8004804 <quorem+0xe2>
 800482e:	2000      	movs	r0, #0
 8004830:	e7ee      	b.n	8004810 <quorem+0xee>
 8004832:	0000      	movs	r0, r0
 8004834:	0000      	movs	r0, r0
	...

08004838 <_dtoa_r>:
 8004838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800483c:	69c7      	ldr	r7, [r0, #28]
 800483e:	b099      	sub	sp, #100	@ 0x64
 8004840:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004844:	ec55 4b10 	vmov	r4, r5, d0
 8004848:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800484a:	9109      	str	r1, [sp, #36]	@ 0x24
 800484c:	4683      	mov	fp, r0
 800484e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004850:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004852:	b97f      	cbnz	r7, 8004874 <_dtoa_r+0x3c>
 8004854:	2010      	movs	r0, #16
 8004856:	f000 ff0b 	bl	8005670 <malloc>
 800485a:	4602      	mov	r2, r0
 800485c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004860:	b920      	cbnz	r0, 800486c <_dtoa_r+0x34>
 8004862:	4ba7      	ldr	r3, [pc, #668]	@ (8004b00 <_dtoa_r+0x2c8>)
 8004864:	21ef      	movs	r1, #239	@ 0xef
 8004866:	48a7      	ldr	r0, [pc, #668]	@ (8004b04 <_dtoa_r+0x2cc>)
 8004868:	f001 fcd6 	bl	8006218 <__assert_func>
 800486c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004870:	6007      	str	r7, [r0, #0]
 8004872:	60c7      	str	r7, [r0, #12]
 8004874:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004878:	6819      	ldr	r1, [r3, #0]
 800487a:	b159      	cbz	r1, 8004894 <_dtoa_r+0x5c>
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	604a      	str	r2, [r1, #4]
 8004880:	2301      	movs	r3, #1
 8004882:	4093      	lsls	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
 8004886:	4658      	mov	r0, fp
 8004888:	f001 f894 	bl	80059b4 <_Bfree>
 800488c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	1e2b      	subs	r3, r5, #0
 8004896:	bfb9      	ittee	lt
 8004898:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800489c:	9303      	strlt	r3, [sp, #12]
 800489e:	2300      	movge	r3, #0
 80048a0:	6033      	strge	r3, [r6, #0]
 80048a2:	9f03      	ldr	r7, [sp, #12]
 80048a4:	4b98      	ldr	r3, [pc, #608]	@ (8004b08 <_dtoa_r+0x2d0>)
 80048a6:	bfbc      	itt	lt
 80048a8:	2201      	movlt	r2, #1
 80048aa:	6032      	strlt	r2, [r6, #0]
 80048ac:	43bb      	bics	r3, r7
 80048ae:	d112      	bne.n	80048d6 <_dtoa_r+0x9e>
 80048b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80048b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80048bc:	4323      	orrs	r3, r4
 80048be:	f000 854d 	beq.w	800535c <_dtoa_r+0xb24>
 80048c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80048c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004b1c <_dtoa_r+0x2e4>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 854f 	beq.w	800536c <_dtoa_r+0xb34>
 80048ce:	f10a 0303 	add.w	r3, sl, #3
 80048d2:	f000 bd49 	b.w	8005368 <_dtoa_r+0xb30>
 80048d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048da:	2200      	movs	r2, #0
 80048dc:	ec51 0b17 	vmov	r0, r1, d7
 80048e0:	2300      	movs	r3, #0
 80048e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80048e6:	f7fc f90f 	bl	8000b08 <__aeabi_dcmpeq>
 80048ea:	4680      	mov	r8, r0
 80048ec:	b158      	cbz	r0, 8004906 <_dtoa_r+0xce>
 80048ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80048f0:	2301      	movs	r3, #1
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80048f6:	b113      	cbz	r3, 80048fe <_dtoa_r+0xc6>
 80048f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80048fa:	4b84      	ldr	r3, [pc, #528]	@ (8004b0c <_dtoa_r+0x2d4>)
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004b20 <_dtoa_r+0x2e8>
 8004902:	f000 bd33 	b.w	800536c <_dtoa_r+0xb34>
 8004906:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800490a:	aa16      	add	r2, sp, #88	@ 0x58
 800490c:	a917      	add	r1, sp, #92	@ 0x5c
 800490e:	4658      	mov	r0, fp
 8004910:	f001 fb3a 	bl	8005f88 <__d2b>
 8004914:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004918:	4681      	mov	r9, r0
 800491a:	2e00      	cmp	r6, #0
 800491c:	d077      	beq.n	8004a0e <_dtoa_r+0x1d6>
 800491e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004920:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800492c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004930:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004934:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004938:	4619      	mov	r1, r3
 800493a:	2200      	movs	r2, #0
 800493c:	4b74      	ldr	r3, [pc, #464]	@ (8004b10 <_dtoa_r+0x2d8>)
 800493e:	f7fb fcc3 	bl	80002c8 <__aeabi_dsub>
 8004942:	a369      	add	r3, pc, #420	@ (adr r3, 8004ae8 <_dtoa_r+0x2b0>)
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f7fb fe76 	bl	8000638 <__aeabi_dmul>
 800494c:	a368      	add	r3, pc, #416	@ (adr r3, 8004af0 <_dtoa_r+0x2b8>)
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f7fb fcbb 	bl	80002cc <__adddf3>
 8004956:	4604      	mov	r4, r0
 8004958:	4630      	mov	r0, r6
 800495a:	460d      	mov	r5, r1
 800495c:	f7fb fe02 	bl	8000564 <__aeabi_i2d>
 8004960:	a365      	add	r3, pc, #404	@ (adr r3, 8004af8 <_dtoa_r+0x2c0>)
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	f7fb fe67 	bl	8000638 <__aeabi_dmul>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	4620      	mov	r0, r4
 8004970:	4629      	mov	r1, r5
 8004972:	f7fb fcab 	bl	80002cc <__adddf3>
 8004976:	4604      	mov	r4, r0
 8004978:	460d      	mov	r5, r1
 800497a:	f7fc f90d 	bl	8000b98 <__aeabi_d2iz>
 800497e:	2200      	movs	r2, #0
 8004980:	4607      	mov	r7, r0
 8004982:	2300      	movs	r3, #0
 8004984:	4620      	mov	r0, r4
 8004986:	4629      	mov	r1, r5
 8004988:	f7fc f8c8 	bl	8000b1c <__aeabi_dcmplt>
 800498c:	b140      	cbz	r0, 80049a0 <_dtoa_r+0x168>
 800498e:	4638      	mov	r0, r7
 8004990:	f7fb fde8 	bl	8000564 <__aeabi_i2d>
 8004994:	4622      	mov	r2, r4
 8004996:	462b      	mov	r3, r5
 8004998:	f7fc f8b6 	bl	8000b08 <__aeabi_dcmpeq>
 800499c:	b900      	cbnz	r0, 80049a0 <_dtoa_r+0x168>
 800499e:	3f01      	subs	r7, #1
 80049a0:	2f16      	cmp	r7, #22
 80049a2:	d851      	bhi.n	8004a48 <_dtoa_r+0x210>
 80049a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b14 <_dtoa_r+0x2dc>)
 80049a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049b2:	f7fc f8b3 	bl	8000b1c <__aeabi_dcmplt>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d048      	beq.n	8004a4c <_dtoa_r+0x214>
 80049ba:	3f01      	subs	r7, #1
 80049bc:	2300      	movs	r3, #0
 80049be:	9312      	str	r3, [sp, #72]	@ 0x48
 80049c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80049c2:	1b9b      	subs	r3, r3, r6
 80049c4:	1e5a      	subs	r2, r3, #1
 80049c6:	bf44      	itt	mi
 80049c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80049cc:	2300      	movmi	r3, #0
 80049ce:	9208      	str	r2, [sp, #32]
 80049d0:	bf54      	ite	pl
 80049d2:	f04f 0800 	movpl.w	r8, #0
 80049d6:	9308      	strmi	r3, [sp, #32]
 80049d8:	2f00      	cmp	r7, #0
 80049da:	db39      	blt.n	8004a50 <_dtoa_r+0x218>
 80049dc:	9b08      	ldr	r3, [sp, #32]
 80049de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80049e0:	443b      	add	r3, r7
 80049e2:	9308      	str	r3, [sp, #32]
 80049e4:	2300      	movs	r3, #0
 80049e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80049e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049ea:	2b09      	cmp	r3, #9
 80049ec:	d864      	bhi.n	8004ab8 <_dtoa_r+0x280>
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	bfc4      	itt	gt
 80049f2:	3b04      	subgt	r3, #4
 80049f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80049f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049f8:	f1a3 0302 	sub.w	r3, r3, #2
 80049fc:	bfcc      	ite	gt
 80049fe:	2400      	movgt	r4, #0
 8004a00:	2401      	movle	r4, #1
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d863      	bhi.n	8004ace <_dtoa_r+0x296>
 8004a06:	e8df f003 	tbb	[pc, r3]
 8004a0a:	372a      	.short	0x372a
 8004a0c:	5535      	.short	0x5535
 8004a0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004a12:	441e      	add	r6, r3
 8004a14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	bfc1      	itttt	gt
 8004a1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004a20:	409f      	lslgt	r7, r3
 8004a22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004a26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004a2a:	bfd6      	itet	le
 8004a2c:	f1c3 0320 	rsble	r3, r3, #32
 8004a30:	ea47 0003 	orrgt.w	r0, r7, r3
 8004a34:	fa04 f003 	lslle.w	r0, r4, r3
 8004a38:	f7fb fd84 	bl	8000544 <__aeabi_ui2d>
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004a42:	3e01      	subs	r6, #1
 8004a44:	9214      	str	r2, [sp, #80]	@ 0x50
 8004a46:	e777      	b.n	8004938 <_dtoa_r+0x100>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e7b8      	b.n	80049be <_dtoa_r+0x186>
 8004a4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8004a4e:	e7b7      	b.n	80049c0 <_dtoa_r+0x188>
 8004a50:	427b      	negs	r3, r7
 8004a52:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a54:	2300      	movs	r3, #0
 8004a56:	eba8 0807 	sub.w	r8, r8, r7
 8004a5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a5c:	e7c4      	b.n	80049e8 <_dtoa_r+0x1b0>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	dc35      	bgt.n	8004ad4 <_dtoa_r+0x29c>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	9307      	str	r3, [sp, #28]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	920e      	str	r2, [sp, #56]	@ 0x38
 8004a72:	e00b      	b.n	8004a8c <_dtoa_r+0x254>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e7f3      	b.n	8004a60 <_dtoa_r+0x228>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	3301      	adds	r3, #1
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	9307      	str	r3, [sp, #28]
 8004a88:	bfb8      	it	lt
 8004a8a:	2301      	movlt	r3, #1
 8004a8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004a90:	2100      	movs	r1, #0
 8004a92:	2204      	movs	r2, #4
 8004a94:	f102 0514 	add.w	r5, r2, #20
 8004a98:	429d      	cmp	r5, r3
 8004a9a:	d91f      	bls.n	8004adc <_dtoa_r+0x2a4>
 8004a9c:	6041      	str	r1, [r0, #4]
 8004a9e:	4658      	mov	r0, fp
 8004aa0:	f000 ff48 	bl	8005934 <_Balloc>
 8004aa4:	4682      	mov	sl, r0
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d13c      	bne.n	8004b24 <_dtoa_r+0x2ec>
 8004aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <_dtoa_r+0x2e0>)
 8004aac:	4602      	mov	r2, r0
 8004aae:	f240 11af 	movw	r1, #431	@ 0x1af
 8004ab2:	e6d8      	b.n	8004866 <_dtoa_r+0x2e>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e7e0      	b.n	8004a7a <_dtoa_r+0x242>
 8004ab8:	2401      	movs	r4, #1
 8004aba:	2300      	movs	r3, #0
 8004abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004abe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004ac0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	9307      	str	r3, [sp, #28]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2312      	movs	r3, #18
 8004acc:	e7d0      	b.n	8004a70 <_dtoa_r+0x238>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ad2:	e7f5      	b.n	8004ac0 <_dtoa_r+0x288>
 8004ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	9307      	str	r3, [sp, #28]
 8004ada:	e7d7      	b.n	8004a8c <_dtoa_r+0x254>
 8004adc:	3101      	adds	r1, #1
 8004ade:	0052      	lsls	r2, r2, #1
 8004ae0:	e7d8      	b.n	8004a94 <_dtoa_r+0x25c>
 8004ae2:	bf00      	nop
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	636f4361 	.word	0x636f4361
 8004aec:	3fd287a7 	.word	0x3fd287a7
 8004af0:	8b60c8b3 	.word	0x8b60c8b3
 8004af4:	3fc68a28 	.word	0x3fc68a28
 8004af8:	509f79fb 	.word	0x509f79fb
 8004afc:	3fd34413 	.word	0x3fd34413
 8004b00:	08006a01 	.word	0x08006a01
 8004b04:	08006a18 	.word	0x08006a18
 8004b08:	7ff00000 	.word	0x7ff00000
 8004b0c:	080069d1 	.word	0x080069d1
 8004b10:	3ff80000 	.word	0x3ff80000
 8004b14:	08006b20 	.word	0x08006b20
 8004b18:	08006a70 	.word	0x08006a70
 8004b1c:	080069fd 	.word	0x080069fd
 8004b20:	080069d0 	.word	0x080069d0
 8004b24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b28:	6018      	str	r0, [r3, #0]
 8004b2a:	9b07      	ldr	r3, [sp, #28]
 8004b2c:	2b0e      	cmp	r3, #14
 8004b2e:	f200 80a4 	bhi.w	8004c7a <_dtoa_r+0x442>
 8004b32:	2c00      	cmp	r4, #0
 8004b34:	f000 80a1 	beq.w	8004c7a <_dtoa_r+0x442>
 8004b38:	2f00      	cmp	r7, #0
 8004b3a:	dd33      	ble.n	8004ba4 <_dtoa_r+0x36c>
 8004b3c:	4bad      	ldr	r3, [pc, #692]	@ (8004df4 <_dtoa_r+0x5bc>)
 8004b3e:	f007 020f 	and.w	r2, r7, #15
 8004b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b46:	ed93 7b00 	vldr	d7, [r3]
 8004b4a:	05f8      	lsls	r0, r7, #23
 8004b4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004b50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004b54:	d516      	bpl.n	8004b84 <_dtoa_r+0x34c>
 8004b56:	4ba8      	ldr	r3, [pc, #672]	@ (8004df8 <_dtoa_r+0x5c0>)
 8004b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b60:	f7fb fe94 	bl	800088c <__aeabi_ddiv>
 8004b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b68:	f004 040f 	and.w	r4, r4, #15
 8004b6c:	2603      	movs	r6, #3
 8004b6e:	4da2      	ldr	r5, [pc, #648]	@ (8004df8 <_dtoa_r+0x5c0>)
 8004b70:	b954      	cbnz	r4, 8004b88 <_dtoa_r+0x350>
 8004b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b7a:	f7fb fe87 	bl	800088c <__aeabi_ddiv>
 8004b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b82:	e028      	b.n	8004bd6 <_dtoa_r+0x39e>
 8004b84:	2602      	movs	r6, #2
 8004b86:	e7f2      	b.n	8004b6e <_dtoa_r+0x336>
 8004b88:	07e1      	lsls	r1, r4, #31
 8004b8a:	d508      	bpl.n	8004b9e <_dtoa_r+0x366>
 8004b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b94:	f7fb fd50 	bl	8000638 <__aeabi_dmul>
 8004b98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b9c:	3601      	adds	r6, #1
 8004b9e:	1064      	asrs	r4, r4, #1
 8004ba0:	3508      	adds	r5, #8
 8004ba2:	e7e5      	b.n	8004b70 <_dtoa_r+0x338>
 8004ba4:	f000 80d2 	beq.w	8004d4c <_dtoa_r+0x514>
 8004ba8:	427c      	negs	r4, r7
 8004baa:	4b92      	ldr	r3, [pc, #584]	@ (8004df4 <_dtoa_r+0x5bc>)
 8004bac:	4d92      	ldr	r5, [pc, #584]	@ (8004df8 <_dtoa_r+0x5c0>)
 8004bae:	f004 020f 	and.w	r2, r4, #15
 8004bb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bbe:	f7fb fd3b 	bl	8000638 <__aeabi_dmul>
 8004bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bc6:	1124      	asrs	r4, r4, #4
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2602      	movs	r6, #2
 8004bcc:	2c00      	cmp	r4, #0
 8004bce:	f040 80b2 	bne.w	8004d36 <_dtoa_r+0x4fe>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1d3      	bne.n	8004b7e <_dtoa_r+0x346>
 8004bd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004bd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80b7 	beq.w	8004d50 <_dtoa_r+0x518>
 8004be2:	4b86      	ldr	r3, [pc, #536]	@ (8004dfc <_dtoa_r+0x5c4>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	4620      	mov	r0, r4
 8004be8:	4629      	mov	r1, r5
 8004bea:	f7fb ff97 	bl	8000b1c <__aeabi_dcmplt>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	f000 80ae 	beq.w	8004d50 <_dtoa_r+0x518>
 8004bf4:	9b07      	ldr	r3, [sp, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80aa 	beq.w	8004d50 <_dtoa_r+0x518>
 8004bfc:	9b00      	ldr	r3, [sp, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	dd37      	ble.n	8004c72 <_dtoa_r+0x43a>
 8004c02:	1e7b      	subs	r3, r7, #1
 8004c04:	9304      	str	r3, [sp, #16]
 8004c06:	4620      	mov	r0, r4
 8004c08:	4b7d      	ldr	r3, [pc, #500]	@ (8004e00 <_dtoa_r+0x5c8>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	f7fb fd13 	bl	8000638 <__aeabi_dmul>
 8004c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c16:	9c00      	ldr	r4, [sp, #0]
 8004c18:	3601      	adds	r6, #1
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	f7fb fca2 	bl	8000564 <__aeabi_i2d>
 8004c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c24:	f7fb fd08 	bl	8000638 <__aeabi_dmul>
 8004c28:	4b76      	ldr	r3, [pc, #472]	@ (8004e04 <_dtoa_r+0x5cc>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f7fb fb4e 	bl	80002cc <__adddf3>
 8004c30:	4605      	mov	r5, r0
 8004c32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004c36:	2c00      	cmp	r4, #0
 8004c38:	f040 808d 	bne.w	8004d56 <_dtoa_r+0x51e>
 8004c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c40:	4b71      	ldr	r3, [pc, #452]	@ (8004e08 <_dtoa_r+0x5d0>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	f7fb fb40 	bl	80002c8 <__aeabi_dsub>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c50:	462a      	mov	r2, r5
 8004c52:	4633      	mov	r3, r6
 8004c54:	f7fb ff80 	bl	8000b58 <__aeabi_dcmpgt>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	f040 828b 	bne.w	8005174 <_dtoa_r+0x93c>
 8004c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c62:	462a      	mov	r2, r5
 8004c64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004c68:	f7fb ff58 	bl	8000b1c <__aeabi_dcmplt>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	f040 8128 	bne.w	8004ec2 <_dtoa_r+0x68a>
 8004c72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004c76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004c7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f2c0 815a 	blt.w	8004f36 <_dtoa_r+0x6fe>
 8004c82:	2f0e      	cmp	r7, #14
 8004c84:	f300 8157 	bgt.w	8004f36 <_dtoa_r+0x6fe>
 8004c88:	4b5a      	ldr	r3, [pc, #360]	@ (8004df4 <_dtoa_r+0x5bc>)
 8004c8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c8e:	ed93 7b00 	vldr	d7, [r3]
 8004c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	ed8d 7b00 	vstr	d7, [sp]
 8004c9a:	da03      	bge.n	8004ca4 <_dtoa_r+0x46c>
 8004c9c:	9b07      	ldr	r3, [sp, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f340 8101 	ble.w	8004ea6 <_dtoa_r+0x66e>
 8004ca4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004ca8:	4656      	mov	r6, sl
 8004caa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cae:	4620      	mov	r0, r4
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	f7fb fdeb 	bl	800088c <__aeabi_ddiv>
 8004cb6:	f7fb ff6f 	bl	8000b98 <__aeabi_d2iz>
 8004cba:	4680      	mov	r8, r0
 8004cbc:	f7fb fc52 	bl	8000564 <__aeabi_i2d>
 8004cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cc4:	f7fb fcb8 	bl	8000638 <__aeabi_dmul>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4620      	mov	r0, r4
 8004cce:	4629      	mov	r1, r5
 8004cd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004cd4:	f7fb faf8 	bl	80002c8 <__aeabi_dsub>
 8004cd8:	f806 4b01 	strb.w	r4, [r6], #1
 8004cdc:	9d07      	ldr	r5, [sp, #28]
 8004cde:	eba6 040a 	sub.w	r4, r6, sl
 8004ce2:	42a5      	cmp	r5, r4
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	f040 8117 	bne.w	8004f1a <_dtoa_r+0x6e2>
 8004cec:	f7fb faee 	bl	80002cc <__adddf3>
 8004cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	460d      	mov	r5, r1
 8004cf8:	f7fb ff2e 	bl	8000b58 <__aeabi_dcmpgt>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	f040 80f9 	bne.w	8004ef4 <_dtoa_r+0x6bc>
 8004d02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d06:	4620      	mov	r0, r4
 8004d08:	4629      	mov	r1, r5
 8004d0a:	f7fb fefd 	bl	8000b08 <__aeabi_dcmpeq>
 8004d0e:	b118      	cbz	r0, 8004d18 <_dtoa_r+0x4e0>
 8004d10:	f018 0f01 	tst.w	r8, #1
 8004d14:	f040 80ee 	bne.w	8004ef4 <_dtoa_r+0x6bc>
 8004d18:	4649      	mov	r1, r9
 8004d1a:	4658      	mov	r0, fp
 8004d1c:	f000 fe4a 	bl	80059b4 <_Bfree>
 8004d20:	2300      	movs	r3, #0
 8004d22:	7033      	strb	r3, [r6, #0]
 8004d24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004d26:	3701      	adds	r7, #1
 8004d28:	601f      	str	r7, [r3, #0]
 8004d2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 831d 	beq.w	800536c <_dtoa_r+0xb34>
 8004d32:	601e      	str	r6, [r3, #0]
 8004d34:	e31a      	b.n	800536c <_dtoa_r+0xb34>
 8004d36:	07e2      	lsls	r2, r4, #31
 8004d38:	d505      	bpl.n	8004d46 <_dtoa_r+0x50e>
 8004d3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d3e:	f7fb fc7b 	bl	8000638 <__aeabi_dmul>
 8004d42:	3601      	adds	r6, #1
 8004d44:	2301      	movs	r3, #1
 8004d46:	1064      	asrs	r4, r4, #1
 8004d48:	3508      	adds	r5, #8
 8004d4a:	e73f      	b.n	8004bcc <_dtoa_r+0x394>
 8004d4c:	2602      	movs	r6, #2
 8004d4e:	e742      	b.n	8004bd6 <_dtoa_r+0x39e>
 8004d50:	9c07      	ldr	r4, [sp, #28]
 8004d52:	9704      	str	r7, [sp, #16]
 8004d54:	e761      	b.n	8004c1a <_dtoa_r+0x3e2>
 8004d56:	4b27      	ldr	r3, [pc, #156]	@ (8004df4 <_dtoa_r+0x5bc>)
 8004d58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d62:	4454      	add	r4, sl
 8004d64:	2900      	cmp	r1, #0
 8004d66:	d053      	beq.n	8004e10 <_dtoa_r+0x5d8>
 8004d68:	4928      	ldr	r1, [pc, #160]	@ (8004e0c <_dtoa_r+0x5d4>)
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	f7fb fd8e 	bl	800088c <__aeabi_ddiv>
 8004d70:	4633      	mov	r3, r6
 8004d72:	462a      	mov	r2, r5
 8004d74:	f7fb faa8 	bl	80002c8 <__aeabi_dsub>
 8004d78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d7c:	4656      	mov	r6, sl
 8004d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d82:	f7fb ff09 	bl	8000b98 <__aeabi_d2iz>
 8004d86:	4605      	mov	r5, r0
 8004d88:	f7fb fbec 	bl	8000564 <__aeabi_i2d>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d94:	f7fb fa98 	bl	80002c8 <__aeabi_dsub>
 8004d98:	3530      	adds	r5, #48	@ 0x30
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004da2:	f806 5b01 	strb.w	r5, [r6], #1
 8004da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004daa:	f7fb feb7 	bl	8000b1c <__aeabi_dcmplt>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d171      	bne.n	8004e96 <_dtoa_r+0x65e>
 8004db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004db6:	4911      	ldr	r1, [pc, #68]	@ (8004dfc <_dtoa_r+0x5c4>)
 8004db8:	2000      	movs	r0, #0
 8004dba:	f7fb fa85 	bl	80002c8 <__aeabi_dsub>
 8004dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004dc2:	f7fb feab 	bl	8000b1c <__aeabi_dcmplt>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	f040 8095 	bne.w	8004ef6 <_dtoa_r+0x6be>
 8004dcc:	42a6      	cmp	r6, r4
 8004dce:	f43f af50 	beq.w	8004c72 <_dtoa_r+0x43a>
 8004dd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004e00 <_dtoa_r+0x5c8>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f7fb fc2d 	bl	8000638 <__aeabi_dmul>
 8004dde:	4b08      	ldr	r3, [pc, #32]	@ (8004e00 <_dtoa_r+0x5c8>)
 8004de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004de4:	2200      	movs	r2, #0
 8004de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dea:	f7fb fc25 	bl	8000638 <__aeabi_dmul>
 8004dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004df2:	e7c4      	b.n	8004d7e <_dtoa_r+0x546>
 8004df4:	08006b20 	.word	0x08006b20
 8004df8:	08006af8 	.word	0x08006af8
 8004dfc:	3ff00000 	.word	0x3ff00000
 8004e00:	40240000 	.word	0x40240000
 8004e04:	401c0000 	.word	0x401c0000
 8004e08:	40140000 	.word	0x40140000
 8004e0c:	3fe00000 	.word	0x3fe00000
 8004e10:	4631      	mov	r1, r6
 8004e12:	4628      	mov	r0, r5
 8004e14:	f7fb fc10 	bl	8000638 <__aeabi_dmul>
 8004e18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8004e1e:	4656      	mov	r6, sl
 8004e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e24:	f7fb feb8 	bl	8000b98 <__aeabi_d2iz>
 8004e28:	4605      	mov	r5, r0
 8004e2a:	f7fb fb9b 	bl	8000564 <__aeabi_i2d>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e36:	f7fb fa47 	bl	80002c8 <__aeabi_dsub>
 8004e3a:	3530      	adds	r5, #48	@ 0x30
 8004e3c:	f806 5b01 	strb.w	r5, [r6], #1
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	42a6      	cmp	r6, r4
 8004e46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	d124      	bne.n	8004e9a <_dtoa_r+0x662>
 8004e50:	4bac      	ldr	r3, [pc, #688]	@ (8005104 <_dtoa_r+0x8cc>)
 8004e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e56:	f7fb fa39 	bl	80002cc <__adddf3>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e62:	f7fb fe79 	bl	8000b58 <__aeabi_dcmpgt>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d145      	bne.n	8004ef6 <_dtoa_r+0x6be>
 8004e6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e6e:	49a5      	ldr	r1, [pc, #660]	@ (8005104 <_dtoa_r+0x8cc>)
 8004e70:	2000      	movs	r0, #0
 8004e72:	f7fb fa29 	bl	80002c8 <__aeabi_dsub>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e7e:	f7fb fe4d 	bl	8000b1c <__aeabi_dcmplt>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	f43f aef5 	beq.w	8004c72 <_dtoa_r+0x43a>
 8004e88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004e8a:	1e73      	subs	r3, r6, #1
 8004e8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004e8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004e92:	2b30      	cmp	r3, #48	@ 0x30
 8004e94:	d0f8      	beq.n	8004e88 <_dtoa_r+0x650>
 8004e96:	9f04      	ldr	r7, [sp, #16]
 8004e98:	e73e      	b.n	8004d18 <_dtoa_r+0x4e0>
 8004e9a:	4b9b      	ldr	r3, [pc, #620]	@ (8005108 <_dtoa_r+0x8d0>)
 8004e9c:	f7fb fbcc 	bl	8000638 <__aeabi_dmul>
 8004ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ea4:	e7bc      	b.n	8004e20 <_dtoa_r+0x5e8>
 8004ea6:	d10c      	bne.n	8004ec2 <_dtoa_r+0x68a>
 8004ea8:	4b98      	ldr	r3, [pc, #608]	@ (800510c <_dtoa_r+0x8d4>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eb0:	f7fb fbc2 	bl	8000638 <__aeabi_dmul>
 8004eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004eb8:	f7fb fe44 	bl	8000b44 <__aeabi_dcmpge>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	f000 8157 	beq.w	8005170 <_dtoa_r+0x938>
 8004ec2:	2400      	movs	r4, #0
 8004ec4:	4625      	mov	r5, r4
 8004ec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	9304      	str	r3, [sp, #16]
 8004ecc:	4656      	mov	r6, sl
 8004ece:	2700      	movs	r7, #0
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	4658      	mov	r0, fp
 8004ed4:	f000 fd6e 	bl	80059b4 <_Bfree>
 8004ed8:	2d00      	cmp	r5, #0
 8004eda:	d0dc      	beq.n	8004e96 <_dtoa_r+0x65e>
 8004edc:	b12f      	cbz	r7, 8004eea <_dtoa_r+0x6b2>
 8004ede:	42af      	cmp	r7, r5
 8004ee0:	d003      	beq.n	8004eea <_dtoa_r+0x6b2>
 8004ee2:	4639      	mov	r1, r7
 8004ee4:	4658      	mov	r0, fp
 8004ee6:	f000 fd65 	bl	80059b4 <_Bfree>
 8004eea:	4629      	mov	r1, r5
 8004eec:	4658      	mov	r0, fp
 8004eee:	f000 fd61 	bl	80059b4 <_Bfree>
 8004ef2:	e7d0      	b.n	8004e96 <_dtoa_r+0x65e>
 8004ef4:	9704      	str	r7, [sp, #16]
 8004ef6:	4633      	mov	r3, r6
 8004ef8:	461e      	mov	r6, r3
 8004efa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004efe:	2a39      	cmp	r2, #57	@ 0x39
 8004f00:	d107      	bne.n	8004f12 <_dtoa_r+0x6da>
 8004f02:	459a      	cmp	sl, r3
 8004f04:	d1f8      	bne.n	8004ef8 <_dtoa_r+0x6c0>
 8004f06:	9a04      	ldr	r2, [sp, #16]
 8004f08:	3201      	adds	r2, #1
 8004f0a:	9204      	str	r2, [sp, #16]
 8004f0c:	2230      	movs	r2, #48	@ 0x30
 8004f0e:	f88a 2000 	strb.w	r2, [sl]
 8004f12:	781a      	ldrb	r2, [r3, #0]
 8004f14:	3201      	adds	r2, #1
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	e7bd      	b.n	8004e96 <_dtoa_r+0x65e>
 8004f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8005108 <_dtoa_r+0x8d0>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f7fb fb8b 	bl	8000638 <__aeabi_dmul>
 8004f22:	2200      	movs	r2, #0
 8004f24:	2300      	movs	r3, #0
 8004f26:	4604      	mov	r4, r0
 8004f28:	460d      	mov	r5, r1
 8004f2a:	f7fb fded 	bl	8000b08 <__aeabi_dcmpeq>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	f43f aebb 	beq.w	8004caa <_dtoa_r+0x472>
 8004f34:	e6f0      	b.n	8004d18 <_dtoa_r+0x4e0>
 8004f36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004f38:	2a00      	cmp	r2, #0
 8004f3a:	f000 80db 	beq.w	80050f4 <_dtoa_r+0x8bc>
 8004f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f40:	2a01      	cmp	r2, #1
 8004f42:	f300 80bf 	bgt.w	80050c4 <_dtoa_r+0x88c>
 8004f46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004f48:	2a00      	cmp	r2, #0
 8004f4a:	f000 80b7 	beq.w	80050bc <_dtoa_r+0x884>
 8004f4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004f52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f54:	4646      	mov	r6, r8
 8004f56:	9a08      	ldr	r2, [sp, #32]
 8004f58:	2101      	movs	r1, #1
 8004f5a:	441a      	add	r2, r3
 8004f5c:	4658      	mov	r0, fp
 8004f5e:	4498      	add	r8, r3
 8004f60:	9208      	str	r2, [sp, #32]
 8004f62:	f000 fddb 	bl	8005b1c <__i2b>
 8004f66:	4605      	mov	r5, r0
 8004f68:	b15e      	cbz	r6, 8004f82 <_dtoa_r+0x74a>
 8004f6a:	9b08      	ldr	r3, [sp, #32]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	dd08      	ble.n	8004f82 <_dtoa_r+0x74a>
 8004f70:	42b3      	cmp	r3, r6
 8004f72:	9a08      	ldr	r2, [sp, #32]
 8004f74:	bfa8      	it	ge
 8004f76:	4633      	movge	r3, r6
 8004f78:	eba8 0803 	sub.w	r8, r8, r3
 8004f7c:	1af6      	subs	r6, r6, r3
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	9308      	str	r3, [sp, #32]
 8004f82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f84:	b1f3      	cbz	r3, 8004fc4 <_dtoa_r+0x78c>
 8004f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80b7 	beq.w	80050fc <_dtoa_r+0x8c4>
 8004f8e:	b18c      	cbz	r4, 8004fb4 <_dtoa_r+0x77c>
 8004f90:	4629      	mov	r1, r5
 8004f92:	4622      	mov	r2, r4
 8004f94:	4658      	mov	r0, fp
 8004f96:	f000 fe81 	bl	8005c9c <__pow5mult>
 8004f9a:	464a      	mov	r2, r9
 8004f9c:	4601      	mov	r1, r0
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	4658      	mov	r0, fp
 8004fa2:	f000 fdd1 	bl	8005b48 <__multiply>
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	9004      	str	r0, [sp, #16]
 8004faa:	4658      	mov	r0, fp
 8004fac:	f000 fd02 	bl	80059b4 <_Bfree>
 8004fb0:	9b04      	ldr	r3, [sp, #16]
 8004fb2:	4699      	mov	r9, r3
 8004fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fb6:	1b1a      	subs	r2, r3, r4
 8004fb8:	d004      	beq.n	8004fc4 <_dtoa_r+0x78c>
 8004fba:	4649      	mov	r1, r9
 8004fbc:	4658      	mov	r0, fp
 8004fbe:	f000 fe6d 	bl	8005c9c <__pow5mult>
 8004fc2:	4681      	mov	r9, r0
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	4658      	mov	r0, fp
 8004fc8:	f000 fda8 	bl	8005b1c <__i2b>
 8004fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004fce:	4604      	mov	r4, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 81cf 	beq.w	8005374 <_dtoa_r+0xb3c>
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4601      	mov	r1, r0
 8004fda:	4658      	mov	r0, fp
 8004fdc:	f000 fe5e 	bl	8005c9c <__pow5mult>
 8004fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	f300 8095 	bgt.w	8005114 <_dtoa_r+0x8dc>
 8004fea:	9b02      	ldr	r3, [sp, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f040 8087 	bne.w	8005100 <_dtoa_r+0x8c8>
 8004ff2:	9b03      	ldr	r3, [sp, #12]
 8004ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f040 8089 	bne.w	8005110 <_dtoa_r+0x8d8>
 8004ffe:	9b03      	ldr	r3, [sp, #12]
 8005000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005004:	0d1b      	lsrs	r3, r3, #20
 8005006:	051b      	lsls	r3, r3, #20
 8005008:	b12b      	cbz	r3, 8005016 <_dtoa_r+0x7de>
 800500a:	9b08      	ldr	r3, [sp, #32]
 800500c:	3301      	adds	r3, #1
 800500e:	9308      	str	r3, [sp, #32]
 8005010:	f108 0801 	add.w	r8, r8, #1
 8005014:	2301      	movs	r3, #1
 8005016:	930a      	str	r3, [sp, #40]	@ 0x28
 8005018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 81b0 	beq.w	8005380 <_dtoa_r+0xb48>
 8005020:	6923      	ldr	r3, [r4, #16]
 8005022:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005026:	6918      	ldr	r0, [r3, #16]
 8005028:	f000 fd2c 	bl	8005a84 <__hi0bits>
 800502c:	f1c0 0020 	rsb	r0, r0, #32
 8005030:	9b08      	ldr	r3, [sp, #32]
 8005032:	4418      	add	r0, r3
 8005034:	f010 001f 	ands.w	r0, r0, #31
 8005038:	d077      	beq.n	800512a <_dtoa_r+0x8f2>
 800503a:	f1c0 0320 	rsb	r3, r0, #32
 800503e:	2b04      	cmp	r3, #4
 8005040:	dd6b      	ble.n	800511a <_dtoa_r+0x8e2>
 8005042:	9b08      	ldr	r3, [sp, #32]
 8005044:	f1c0 001c 	rsb	r0, r0, #28
 8005048:	4403      	add	r3, r0
 800504a:	4480      	add	r8, r0
 800504c:	4406      	add	r6, r0
 800504e:	9308      	str	r3, [sp, #32]
 8005050:	f1b8 0f00 	cmp.w	r8, #0
 8005054:	dd05      	ble.n	8005062 <_dtoa_r+0x82a>
 8005056:	4649      	mov	r1, r9
 8005058:	4642      	mov	r2, r8
 800505a:	4658      	mov	r0, fp
 800505c:	f000 fe78 	bl	8005d50 <__lshift>
 8005060:	4681      	mov	r9, r0
 8005062:	9b08      	ldr	r3, [sp, #32]
 8005064:	2b00      	cmp	r3, #0
 8005066:	dd05      	ble.n	8005074 <_dtoa_r+0x83c>
 8005068:	4621      	mov	r1, r4
 800506a:	461a      	mov	r2, r3
 800506c:	4658      	mov	r0, fp
 800506e:	f000 fe6f 	bl	8005d50 <__lshift>
 8005072:	4604      	mov	r4, r0
 8005074:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005076:	2b00      	cmp	r3, #0
 8005078:	d059      	beq.n	800512e <_dtoa_r+0x8f6>
 800507a:	4621      	mov	r1, r4
 800507c:	4648      	mov	r0, r9
 800507e:	f000 fed3 	bl	8005e28 <__mcmp>
 8005082:	2800      	cmp	r0, #0
 8005084:	da53      	bge.n	800512e <_dtoa_r+0x8f6>
 8005086:	1e7b      	subs	r3, r7, #1
 8005088:	9304      	str	r3, [sp, #16]
 800508a:	4649      	mov	r1, r9
 800508c:	2300      	movs	r3, #0
 800508e:	220a      	movs	r2, #10
 8005090:	4658      	mov	r0, fp
 8005092:	f000 fcb1 	bl	80059f8 <__multadd>
 8005096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005098:	4681      	mov	r9, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 8172 	beq.w	8005384 <_dtoa_r+0xb4c>
 80050a0:	2300      	movs	r3, #0
 80050a2:	4629      	mov	r1, r5
 80050a4:	220a      	movs	r2, #10
 80050a6:	4658      	mov	r0, fp
 80050a8:	f000 fca6 	bl	80059f8 <__multadd>
 80050ac:	9b00      	ldr	r3, [sp, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	4605      	mov	r5, r0
 80050b2:	dc67      	bgt.n	8005184 <_dtoa_r+0x94c>
 80050b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	dc41      	bgt.n	800513e <_dtoa_r+0x906>
 80050ba:	e063      	b.n	8005184 <_dtoa_r+0x94c>
 80050bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80050be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80050c2:	e746      	b.n	8004f52 <_dtoa_r+0x71a>
 80050c4:	9b07      	ldr	r3, [sp, #28]
 80050c6:	1e5c      	subs	r4, r3, #1
 80050c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050ca:	42a3      	cmp	r3, r4
 80050cc:	bfbf      	itttt	lt
 80050ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80050d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80050d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80050d4:	1ae3      	sublt	r3, r4, r3
 80050d6:	bfb4      	ite	lt
 80050d8:	18d2      	addlt	r2, r2, r3
 80050da:	1b1c      	subge	r4, r3, r4
 80050dc:	9b07      	ldr	r3, [sp, #28]
 80050de:	bfbc      	itt	lt
 80050e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80050e2:	2400      	movlt	r4, #0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bfb5      	itete	lt
 80050e8:	eba8 0603 	sublt.w	r6, r8, r3
 80050ec:	9b07      	ldrge	r3, [sp, #28]
 80050ee:	2300      	movlt	r3, #0
 80050f0:	4646      	movge	r6, r8
 80050f2:	e730      	b.n	8004f56 <_dtoa_r+0x71e>
 80050f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80050f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80050f8:	4646      	mov	r6, r8
 80050fa:	e735      	b.n	8004f68 <_dtoa_r+0x730>
 80050fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050fe:	e75c      	b.n	8004fba <_dtoa_r+0x782>
 8005100:	2300      	movs	r3, #0
 8005102:	e788      	b.n	8005016 <_dtoa_r+0x7de>
 8005104:	3fe00000 	.word	0x3fe00000
 8005108:	40240000 	.word	0x40240000
 800510c:	40140000 	.word	0x40140000
 8005110:	9b02      	ldr	r3, [sp, #8]
 8005112:	e780      	b.n	8005016 <_dtoa_r+0x7de>
 8005114:	2300      	movs	r3, #0
 8005116:	930a      	str	r3, [sp, #40]	@ 0x28
 8005118:	e782      	b.n	8005020 <_dtoa_r+0x7e8>
 800511a:	d099      	beq.n	8005050 <_dtoa_r+0x818>
 800511c:	9a08      	ldr	r2, [sp, #32]
 800511e:	331c      	adds	r3, #28
 8005120:	441a      	add	r2, r3
 8005122:	4498      	add	r8, r3
 8005124:	441e      	add	r6, r3
 8005126:	9208      	str	r2, [sp, #32]
 8005128:	e792      	b.n	8005050 <_dtoa_r+0x818>
 800512a:	4603      	mov	r3, r0
 800512c:	e7f6      	b.n	800511c <_dtoa_r+0x8e4>
 800512e:	9b07      	ldr	r3, [sp, #28]
 8005130:	9704      	str	r7, [sp, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	dc20      	bgt.n	8005178 <_dtoa_r+0x940>
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800513a:	2b02      	cmp	r3, #2
 800513c:	dd1e      	ble.n	800517c <_dtoa_r+0x944>
 800513e:	9b00      	ldr	r3, [sp, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f47f aec0 	bne.w	8004ec6 <_dtoa_r+0x68e>
 8005146:	4621      	mov	r1, r4
 8005148:	2205      	movs	r2, #5
 800514a:	4658      	mov	r0, fp
 800514c:	f000 fc54 	bl	80059f8 <__multadd>
 8005150:	4601      	mov	r1, r0
 8005152:	4604      	mov	r4, r0
 8005154:	4648      	mov	r0, r9
 8005156:	f000 fe67 	bl	8005e28 <__mcmp>
 800515a:	2800      	cmp	r0, #0
 800515c:	f77f aeb3 	ble.w	8004ec6 <_dtoa_r+0x68e>
 8005160:	4656      	mov	r6, sl
 8005162:	2331      	movs	r3, #49	@ 0x31
 8005164:	f806 3b01 	strb.w	r3, [r6], #1
 8005168:	9b04      	ldr	r3, [sp, #16]
 800516a:	3301      	adds	r3, #1
 800516c:	9304      	str	r3, [sp, #16]
 800516e:	e6ae      	b.n	8004ece <_dtoa_r+0x696>
 8005170:	9c07      	ldr	r4, [sp, #28]
 8005172:	9704      	str	r7, [sp, #16]
 8005174:	4625      	mov	r5, r4
 8005176:	e7f3      	b.n	8005160 <_dtoa_r+0x928>
 8005178:	9b07      	ldr	r3, [sp, #28]
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8104 	beq.w	800538c <_dtoa_r+0xb54>
 8005184:	2e00      	cmp	r6, #0
 8005186:	dd05      	ble.n	8005194 <_dtoa_r+0x95c>
 8005188:	4629      	mov	r1, r5
 800518a:	4632      	mov	r2, r6
 800518c:	4658      	mov	r0, fp
 800518e:	f000 fddf 	bl	8005d50 <__lshift>
 8005192:	4605      	mov	r5, r0
 8005194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005196:	2b00      	cmp	r3, #0
 8005198:	d05a      	beq.n	8005250 <_dtoa_r+0xa18>
 800519a:	6869      	ldr	r1, [r5, #4]
 800519c:	4658      	mov	r0, fp
 800519e:	f000 fbc9 	bl	8005934 <_Balloc>
 80051a2:	4606      	mov	r6, r0
 80051a4:	b928      	cbnz	r0, 80051b2 <_dtoa_r+0x97a>
 80051a6:	4b84      	ldr	r3, [pc, #528]	@ (80053b8 <_dtoa_r+0xb80>)
 80051a8:	4602      	mov	r2, r0
 80051aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80051ae:	f7ff bb5a 	b.w	8004866 <_dtoa_r+0x2e>
 80051b2:	692a      	ldr	r2, [r5, #16]
 80051b4:	3202      	adds	r2, #2
 80051b6:	0092      	lsls	r2, r2, #2
 80051b8:	f105 010c 	add.w	r1, r5, #12
 80051bc:	300c      	adds	r0, #12
 80051be:	f001 f81d 	bl	80061fc <memcpy>
 80051c2:	2201      	movs	r2, #1
 80051c4:	4631      	mov	r1, r6
 80051c6:	4658      	mov	r0, fp
 80051c8:	f000 fdc2 	bl	8005d50 <__lshift>
 80051cc:	f10a 0301 	add.w	r3, sl, #1
 80051d0:	9307      	str	r3, [sp, #28]
 80051d2:	9b00      	ldr	r3, [sp, #0]
 80051d4:	4453      	add	r3, sl
 80051d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051d8:	9b02      	ldr	r3, [sp, #8]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	462f      	mov	r7, r5
 80051e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80051e2:	4605      	mov	r5, r0
 80051e4:	9b07      	ldr	r3, [sp, #28]
 80051e6:	4621      	mov	r1, r4
 80051e8:	3b01      	subs	r3, #1
 80051ea:	4648      	mov	r0, r9
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	f7ff fa98 	bl	8004722 <quorem>
 80051f2:	4639      	mov	r1, r7
 80051f4:	9002      	str	r0, [sp, #8]
 80051f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80051fa:	4648      	mov	r0, r9
 80051fc:	f000 fe14 	bl	8005e28 <__mcmp>
 8005200:	462a      	mov	r2, r5
 8005202:	9008      	str	r0, [sp, #32]
 8005204:	4621      	mov	r1, r4
 8005206:	4658      	mov	r0, fp
 8005208:	f000 fe2a 	bl	8005e60 <__mdiff>
 800520c:	68c2      	ldr	r2, [r0, #12]
 800520e:	4606      	mov	r6, r0
 8005210:	bb02      	cbnz	r2, 8005254 <_dtoa_r+0xa1c>
 8005212:	4601      	mov	r1, r0
 8005214:	4648      	mov	r0, r9
 8005216:	f000 fe07 	bl	8005e28 <__mcmp>
 800521a:	4602      	mov	r2, r0
 800521c:	4631      	mov	r1, r6
 800521e:	4658      	mov	r0, fp
 8005220:	920e      	str	r2, [sp, #56]	@ 0x38
 8005222:	f000 fbc7 	bl	80059b4 <_Bfree>
 8005226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005228:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800522a:	9e07      	ldr	r6, [sp, #28]
 800522c:	ea43 0102 	orr.w	r1, r3, r2
 8005230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005232:	4319      	orrs	r1, r3
 8005234:	d110      	bne.n	8005258 <_dtoa_r+0xa20>
 8005236:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800523a:	d029      	beq.n	8005290 <_dtoa_r+0xa58>
 800523c:	9b08      	ldr	r3, [sp, #32]
 800523e:	2b00      	cmp	r3, #0
 8005240:	dd02      	ble.n	8005248 <_dtoa_r+0xa10>
 8005242:	9b02      	ldr	r3, [sp, #8]
 8005244:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005248:	9b00      	ldr	r3, [sp, #0]
 800524a:	f883 8000 	strb.w	r8, [r3]
 800524e:	e63f      	b.n	8004ed0 <_dtoa_r+0x698>
 8005250:	4628      	mov	r0, r5
 8005252:	e7bb      	b.n	80051cc <_dtoa_r+0x994>
 8005254:	2201      	movs	r2, #1
 8005256:	e7e1      	b.n	800521c <_dtoa_r+0x9e4>
 8005258:	9b08      	ldr	r3, [sp, #32]
 800525a:	2b00      	cmp	r3, #0
 800525c:	db04      	blt.n	8005268 <_dtoa_r+0xa30>
 800525e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005260:	430b      	orrs	r3, r1
 8005262:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005264:	430b      	orrs	r3, r1
 8005266:	d120      	bne.n	80052aa <_dtoa_r+0xa72>
 8005268:	2a00      	cmp	r2, #0
 800526a:	dded      	ble.n	8005248 <_dtoa_r+0xa10>
 800526c:	4649      	mov	r1, r9
 800526e:	2201      	movs	r2, #1
 8005270:	4658      	mov	r0, fp
 8005272:	f000 fd6d 	bl	8005d50 <__lshift>
 8005276:	4621      	mov	r1, r4
 8005278:	4681      	mov	r9, r0
 800527a:	f000 fdd5 	bl	8005e28 <__mcmp>
 800527e:	2800      	cmp	r0, #0
 8005280:	dc03      	bgt.n	800528a <_dtoa_r+0xa52>
 8005282:	d1e1      	bne.n	8005248 <_dtoa_r+0xa10>
 8005284:	f018 0f01 	tst.w	r8, #1
 8005288:	d0de      	beq.n	8005248 <_dtoa_r+0xa10>
 800528a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800528e:	d1d8      	bne.n	8005242 <_dtoa_r+0xa0a>
 8005290:	9a00      	ldr	r2, [sp, #0]
 8005292:	2339      	movs	r3, #57	@ 0x39
 8005294:	7013      	strb	r3, [r2, #0]
 8005296:	4633      	mov	r3, r6
 8005298:	461e      	mov	r6, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80052a0:	2a39      	cmp	r2, #57	@ 0x39
 80052a2:	d052      	beq.n	800534a <_dtoa_r+0xb12>
 80052a4:	3201      	adds	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	e612      	b.n	8004ed0 <_dtoa_r+0x698>
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	dd07      	ble.n	80052be <_dtoa_r+0xa86>
 80052ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052b2:	d0ed      	beq.n	8005290 <_dtoa_r+0xa58>
 80052b4:	9a00      	ldr	r2, [sp, #0]
 80052b6:	f108 0301 	add.w	r3, r8, #1
 80052ba:	7013      	strb	r3, [r2, #0]
 80052bc:	e608      	b.n	8004ed0 <_dtoa_r+0x698>
 80052be:	9b07      	ldr	r3, [sp, #28]
 80052c0:	9a07      	ldr	r2, [sp, #28]
 80052c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80052c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d028      	beq.n	800531e <_dtoa_r+0xae6>
 80052cc:	4649      	mov	r1, r9
 80052ce:	2300      	movs	r3, #0
 80052d0:	220a      	movs	r2, #10
 80052d2:	4658      	mov	r0, fp
 80052d4:	f000 fb90 	bl	80059f8 <__multadd>
 80052d8:	42af      	cmp	r7, r5
 80052da:	4681      	mov	r9, r0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	f04f 020a 	mov.w	r2, #10
 80052e4:	4639      	mov	r1, r7
 80052e6:	4658      	mov	r0, fp
 80052e8:	d107      	bne.n	80052fa <_dtoa_r+0xac2>
 80052ea:	f000 fb85 	bl	80059f8 <__multadd>
 80052ee:	4607      	mov	r7, r0
 80052f0:	4605      	mov	r5, r0
 80052f2:	9b07      	ldr	r3, [sp, #28]
 80052f4:	3301      	adds	r3, #1
 80052f6:	9307      	str	r3, [sp, #28]
 80052f8:	e774      	b.n	80051e4 <_dtoa_r+0x9ac>
 80052fa:	f000 fb7d 	bl	80059f8 <__multadd>
 80052fe:	4629      	mov	r1, r5
 8005300:	4607      	mov	r7, r0
 8005302:	2300      	movs	r3, #0
 8005304:	220a      	movs	r2, #10
 8005306:	4658      	mov	r0, fp
 8005308:	f000 fb76 	bl	80059f8 <__multadd>
 800530c:	4605      	mov	r5, r0
 800530e:	e7f0      	b.n	80052f2 <_dtoa_r+0xaba>
 8005310:	9b00      	ldr	r3, [sp, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	bfcc      	ite	gt
 8005316:	461e      	movgt	r6, r3
 8005318:	2601      	movle	r6, #1
 800531a:	4456      	add	r6, sl
 800531c:	2700      	movs	r7, #0
 800531e:	4649      	mov	r1, r9
 8005320:	2201      	movs	r2, #1
 8005322:	4658      	mov	r0, fp
 8005324:	f000 fd14 	bl	8005d50 <__lshift>
 8005328:	4621      	mov	r1, r4
 800532a:	4681      	mov	r9, r0
 800532c:	f000 fd7c 	bl	8005e28 <__mcmp>
 8005330:	2800      	cmp	r0, #0
 8005332:	dcb0      	bgt.n	8005296 <_dtoa_r+0xa5e>
 8005334:	d102      	bne.n	800533c <_dtoa_r+0xb04>
 8005336:	f018 0f01 	tst.w	r8, #1
 800533a:	d1ac      	bne.n	8005296 <_dtoa_r+0xa5e>
 800533c:	4633      	mov	r3, r6
 800533e:	461e      	mov	r6, r3
 8005340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005344:	2a30      	cmp	r2, #48	@ 0x30
 8005346:	d0fa      	beq.n	800533e <_dtoa_r+0xb06>
 8005348:	e5c2      	b.n	8004ed0 <_dtoa_r+0x698>
 800534a:	459a      	cmp	sl, r3
 800534c:	d1a4      	bne.n	8005298 <_dtoa_r+0xa60>
 800534e:	9b04      	ldr	r3, [sp, #16]
 8005350:	3301      	adds	r3, #1
 8005352:	9304      	str	r3, [sp, #16]
 8005354:	2331      	movs	r3, #49	@ 0x31
 8005356:	f88a 3000 	strb.w	r3, [sl]
 800535a:	e5b9      	b.n	8004ed0 <_dtoa_r+0x698>
 800535c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800535e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80053bc <_dtoa_r+0xb84>
 8005362:	b11b      	cbz	r3, 800536c <_dtoa_r+0xb34>
 8005364:	f10a 0308 	add.w	r3, sl, #8
 8005368:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	4650      	mov	r0, sl
 800536e:	b019      	add	sp, #100	@ 0x64
 8005370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005376:	2b01      	cmp	r3, #1
 8005378:	f77f ae37 	ble.w	8004fea <_dtoa_r+0x7b2>
 800537c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800537e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005380:	2001      	movs	r0, #1
 8005382:	e655      	b.n	8005030 <_dtoa_r+0x7f8>
 8005384:	9b00      	ldr	r3, [sp, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f77f aed6 	ble.w	8005138 <_dtoa_r+0x900>
 800538c:	4656      	mov	r6, sl
 800538e:	4621      	mov	r1, r4
 8005390:	4648      	mov	r0, r9
 8005392:	f7ff f9c6 	bl	8004722 <quorem>
 8005396:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800539a:	f806 8b01 	strb.w	r8, [r6], #1
 800539e:	9b00      	ldr	r3, [sp, #0]
 80053a0:	eba6 020a 	sub.w	r2, r6, sl
 80053a4:	4293      	cmp	r3, r2
 80053a6:	ddb3      	ble.n	8005310 <_dtoa_r+0xad8>
 80053a8:	4649      	mov	r1, r9
 80053aa:	2300      	movs	r3, #0
 80053ac:	220a      	movs	r2, #10
 80053ae:	4658      	mov	r0, fp
 80053b0:	f000 fb22 	bl	80059f8 <__multadd>
 80053b4:	4681      	mov	r9, r0
 80053b6:	e7ea      	b.n	800538e <_dtoa_r+0xb56>
 80053b8:	08006a70 	.word	0x08006a70
 80053bc:	080069f4 	.word	0x080069f4

080053c0 <__ssputs_r>:
 80053c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c4:	688e      	ldr	r6, [r1, #8]
 80053c6:	461f      	mov	r7, r3
 80053c8:	42be      	cmp	r6, r7
 80053ca:	680b      	ldr	r3, [r1, #0]
 80053cc:	4682      	mov	sl, r0
 80053ce:	460c      	mov	r4, r1
 80053d0:	4690      	mov	r8, r2
 80053d2:	d82d      	bhi.n	8005430 <__ssputs_r+0x70>
 80053d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80053dc:	d026      	beq.n	800542c <__ssputs_r+0x6c>
 80053de:	6965      	ldr	r5, [r4, #20]
 80053e0:	6909      	ldr	r1, [r1, #16]
 80053e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053e6:	eba3 0901 	sub.w	r9, r3, r1
 80053ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053ee:	1c7b      	adds	r3, r7, #1
 80053f0:	444b      	add	r3, r9
 80053f2:	106d      	asrs	r5, r5, #1
 80053f4:	429d      	cmp	r5, r3
 80053f6:	bf38      	it	cc
 80053f8:	461d      	movcc	r5, r3
 80053fa:	0553      	lsls	r3, r2, #21
 80053fc:	d527      	bpl.n	800544e <__ssputs_r+0x8e>
 80053fe:	4629      	mov	r1, r5
 8005400:	f000 f960 	bl	80056c4 <_malloc_r>
 8005404:	4606      	mov	r6, r0
 8005406:	b360      	cbz	r0, 8005462 <__ssputs_r+0xa2>
 8005408:	6921      	ldr	r1, [r4, #16]
 800540a:	464a      	mov	r2, r9
 800540c:	f000 fef6 	bl	80061fc <memcpy>
 8005410:	89a3      	ldrh	r3, [r4, #12]
 8005412:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800541a:	81a3      	strh	r3, [r4, #12]
 800541c:	6126      	str	r6, [r4, #16]
 800541e:	6165      	str	r5, [r4, #20]
 8005420:	444e      	add	r6, r9
 8005422:	eba5 0509 	sub.w	r5, r5, r9
 8005426:	6026      	str	r6, [r4, #0]
 8005428:	60a5      	str	r5, [r4, #8]
 800542a:	463e      	mov	r6, r7
 800542c:	42be      	cmp	r6, r7
 800542e:	d900      	bls.n	8005432 <__ssputs_r+0x72>
 8005430:	463e      	mov	r6, r7
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	4632      	mov	r2, r6
 8005436:	4641      	mov	r1, r8
 8005438:	f000 fe6f 	bl	800611a <memmove>
 800543c:	68a3      	ldr	r3, [r4, #8]
 800543e:	1b9b      	subs	r3, r3, r6
 8005440:	60a3      	str	r3, [r4, #8]
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	4433      	add	r3, r6
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	2000      	movs	r0, #0
 800544a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800544e:	462a      	mov	r2, r5
 8005450:	f000 fe35 	bl	80060be <_realloc_r>
 8005454:	4606      	mov	r6, r0
 8005456:	2800      	cmp	r0, #0
 8005458:	d1e0      	bne.n	800541c <__ssputs_r+0x5c>
 800545a:	6921      	ldr	r1, [r4, #16]
 800545c:	4650      	mov	r0, sl
 800545e:	f000 ff0d 	bl	800627c <_free_r>
 8005462:	230c      	movs	r3, #12
 8005464:	f8ca 3000 	str.w	r3, [sl]
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800546e:	81a3      	strh	r3, [r4, #12]
 8005470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005474:	e7e9      	b.n	800544a <__ssputs_r+0x8a>
	...

08005478 <_svfiprintf_r>:
 8005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	4698      	mov	r8, r3
 800547e:	898b      	ldrh	r3, [r1, #12]
 8005480:	061b      	lsls	r3, r3, #24
 8005482:	b09d      	sub	sp, #116	@ 0x74
 8005484:	4607      	mov	r7, r0
 8005486:	460d      	mov	r5, r1
 8005488:	4614      	mov	r4, r2
 800548a:	d510      	bpl.n	80054ae <_svfiprintf_r+0x36>
 800548c:	690b      	ldr	r3, [r1, #16]
 800548e:	b973      	cbnz	r3, 80054ae <_svfiprintf_r+0x36>
 8005490:	2140      	movs	r1, #64	@ 0x40
 8005492:	f000 f917 	bl	80056c4 <_malloc_r>
 8005496:	6028      	str	r0, [r5, #0]
 8005498:	6128      	str	r0, [r5, #16]
 800549a:	b930      	cbnz	r0, 80054aa <_svfiprintf_r+0x32>
 800549c:	230c      	movs	r3, #12
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054a4:	b01d      	add	sp, #116	@ 0x74
 80054a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054aa:	2340      	movs	r3, #64	@ 0x40
 80054ac:	616b      	str	r3, [r5, #20]
 80054ae:	2300      	movs	r3, #0
 80054b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80054b2:	2320      	movs	r3, #32
 80054b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80054bc:	2330      	movs	r3, #48	@ 0x30
 80054be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800565c <_svfiprintf_r+0x1e4>
 80054c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054c6:	f04f 0901 	mov.w	r9, #1
 80054ca:	4623      	mov	r3, r4
 80054cc:	469a      	mov	sl, r3
 80054ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054d2:	b10a      	cbz	r2, 80054d8 <_svfiprintf_r+0x60>
 80054d4:	2a25      	cmp	r2, #37	@ 0x25
 80054d6:	d1f9      	bne.n	80054cc <_svfiprintf_r+0x54>
 80054d8:	ebba 0b04 	subs.w	fp, sl, r4
 80054dc:	d00b      	beq.n	80054f6 <_svfiprintf_r+0x7e>
 80054de:	465b      	mov	r3, fp
 80054e0:	4622      	mov	r2, r4
 80054e2:	4629      	mov	r1, r5
 80054e4:	4638      	mov	r0, r7
 80054e6:	f7ff ff6b 	bl	80053c0 <__ssputs_r>
 80054ea:	3001      	adds	r0, #1
 80054ec:	f000 80a7 	beq.w	800563e <_svfiprintf_r+0x1c6>
 80054f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054f2:	445a      	add	r2, fp
 80054f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80054f6:	f89a 3000 	ldrb.w	r3, [sl]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 809f 	beq.w	800563e <_svfiprintf_r+0x1c6>
 8005500:	2300      	movs	r3, #0
 8005502:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800550a:	f10a 0a01 	add.w	sl, sl, #1
 800550e:	9304      	str	r3, [sp, #16]
 8005510:	9307      	str	r3, [sp, #28]
 8005512:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005516:	931a      	str	r3, [sp, #104]	@ 0x68
 8005518:	4654      	mov	r4, sl
 800551a:	2205      	movs	r2, #5
 800551c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005520:	484e      	ldr	r0, [pc, #312]	@ (800565c <_svfiprintf_r+0x1e4>)
 8005522:	f7fa fe75 	bl	8000210 <memchr>
 8005526:	9a04      	ldr	r2, [sp, #16]
 8005528:	b9d8      	cbnz	r0, 8005562 <_svfiprintf_r+0xea>
 800552a:	06d0      	lsls	r0, r2, #27
 800552c:	bf44      	itt	mi
 800552e:	2320      	movmi	r3, #32
 8005530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005534:	0711      	lsls	r1, r2, #28
 8005536:	bf44      	itt	mi
 8005538:	232b      	movmi	r3, #43	@ 0x2b
 800553a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800553e:	f89a 3000 	ldrb.w	r3, [sl]
 8005542:	2b2a      	cmp	r3, #42	@ 0x2a
 8005544:	d015      	beq.n	8005572 <_svfiprintf_r+0xfa>
 8005546:	9a07      	ldr	r2, [sp, #28]
 8005548:	4654      	mov	r4, sl
 800554a:	2000      	movs	r0, #0
 800554c:	f04f 0c0a 	mov.w	ip, #10
 8005550:	4621      	mov	r1, r4
 8005552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005556:	3b30      	subs	r3, #48	@ 0x30
 8005558:	2b09      	cmp	r3, #9
 800555a:	d94b      	bls.n	80055f4 <_svfiprintf_r+0x17c>
 800555c:	b1b0      	cbz	r0, 800558c <_svfiprintf_r+0x114>
 800555e:	9207      	str	r2, [sp, #28]
 8005560:	e014      	b.n	800558c <_svfiprintf_r+0x114>
 8005562:	eba0 0308 	sub.w	r3, r0, r8
 8005566:	fa09 f303 	lsl.w	r3, r9, r3
 800556a:	4313      	orrs	r3, r2
 800556c:	9304      	str	r3, [sp, #16]
 800556e:	46a2      	mov	sl, r4
 8005570:	e7d2      	b.n	8005518 <_svfiprintf_r+0xa0>
 8005572:	9b03      	ldr	r3, [sp, #12]
 8005574:	1d19      	adds	r1, r3, #4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	9103      	str	r1, [sp, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	bfbb      	ittet	lt
 800557e:	425b      	neglt	r3, r3
 8005580:	f042 0202 	orrlt.w	r2, r2, #2
 8005584:	9307      	strge	r3, [sp, #28]
 8005586:	9307      	strlt	r3, [sp, #28]
 8005588:	bfb8      	it	lt
 800558a:	9204      	strlt	r2, [sp, #16]
 800558c:	7823      	ldrb	r3, [r4, #0]
 800558e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005590:	d10a      	bne.n	80055a8 <_svfiprintf_r+0x130>
 8005592:	7863      	ldrb	r3, [r4, #1]
 8005594:	2b2a      	cmp	r3, #42	@ 0x2a
 8005596:	d132      	bne.n	80055fe <_svfiprintf_r+0x186>
 8005598:	9b03      	ldr	r3, [sp, #12]
 800559a:	1d1a      	adds	r2, r3, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	9203      	str	r2, [sp, #12]
 80055a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055a4:	3402      	adds	r4, #2
 80055a6:	9305      	str	r3, [sp, #20]
 80055a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800566c <_svfiprintf_r+0x1f4>
 80055ac:	7821      	ldrb	r1, [r4, #0]
 80055ae:	2203      	movs	r2, #3
 80055b0:	4650      	mov	r0, sl
 80055b2:	f7fa fe2d 	bl	8000210 <memchr>
 80055b6:	b138      	cbz	r0, 80055c8 <_svfiprintf_r+0x150>
 80055b8:	9b04      	ldr	r3, [sp, #16]
 80055ba:	eba0 000a 	sub.w	r0, r0, sl
 80055be:	2240      	movs	r2, #64	@ 0x40
 80055c0:	4082      	lsls	r2, r0
 80055c2:	4313      	orrs	r3, r2
 80055c4:	3401      	adds	r4, #1
 80055c6:	9304      	str	r3, [sp, #16]
 80055c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055cc:	4824      	ldr	r0, [pc, #144]	@ (8005660 <_svfiprintf_r+0x1e8>)
 80055ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055d2:	2206      	movs	r2, #6
 80055d4:	f7fa fe1c 	bl	8000210 <memchr>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d036      	beq.n	800564a <_svfiprintf_r+0x1d2>
 80055dc:	4b21      	ldr	r3, [pc, #132]	@ (8005664 <_svfiprintf_r+0x1ec>)
 80055de:	bb1b      	cbnz	r3, 8005628 <_svfiprintf_r+0x1b0>
 80055e0:	9b03      	ldr	r3, [sp, #12]
 80055e2:	3307      	adds	r3, #7
 80055e4:	f023 0307 	bic.w	r3, r3, #7
 80055e8:	3308      	adds	r3, #8
 80055ea:	9303      	str	r3, [sp, #12]
 80055ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055ee:	4433      	add	r3, r6
 80055f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80055f2:	e76a      	b.n	80054ca <_svfiprintf_r+0x52>
 80055f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055f8:	460c      	mov	r4, r1
 80055fa:	2001      	movs	r0, #1
 80055fc:	e7a8      	b.n	8005550 <_svfiprintf_r+0xd8>
 80055fe:	2300      	movs	r3, #0
 8005600:	3401      	adds	r4, #1
 8005602:	9305      	str	r3, [sp, #20]
 8005604:	4619      	mov	r1, r3
 8005606:	f04f 0c0a 	mov.w	ip, #10
 800560a:	4620      	mov	r0, r4
 800560c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005610:	3a30      	subs	r2, #48	@ 0x30
 8005612:	2a09      	cmp	r2, #9
 8005614:	d903      	bls.n	800561e <_svfiprintf_r+0x1a6>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0c6      	beq.n	80055a8 <_svfiprintf_r+0x130>
 800561a:	9105      	str	r1, [sp, #20]
 800561c:	e7c4      	b.n	80055a8 <_svfiprintf_r+0x130>
 800561e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005622:	4604      	mov	r4, r0
 8005624:	2301      	movs	r3, #1
 8005626:	e7f0      	b.n	800560a <_svfiprintf_r+0x192>
 8005628:	ab03      	add	r3, sp, #12
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	462a      	mov	r2, r5
 800562e:	4b0e      	ldr	r3, [pc, #56]	@ (8005668 <_svfiprintf_r+0x1f0>)
 8005630:	a904      	add	r1, sp, #16
 8005632:	4638      	mov	r0, r7
 8005634:	f7fe fba2 	bl	8003d7c <_printf_float>
 8005638:	1c42      	adds	r2, r0, #1
 800563a:	4606      	mov	r6, r0
 800563c:	d1d6      	bne.n	80055ec <_svfiprintf_r+0x174>
 800563e:	89ab      	ldrh	r3, [r5, #12]
 8005640:	065b      	lsls	r3, r3, #25
 8005642:	f53f af2d 	bmi.w	80054a0 <_svfiprintf_r+0x28>
 8005646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005648:	e72c      	b.n	80054a4 <_svfiprintf_r+0x2c>
 800564a:	ab03      	add	r3, sp, #12
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	462a      	mov	r2, r5
 8005650:	4b05      	ldr	r3, [pc, #20]	@ (8005668 <_svfiprintf_r+0x1f0>)
 8005652:	a904      	add	r1, sp, #16
 8005654:	4638      	mov	r0, r7
 8005656:	f7fe fe29 	bl	80042ac <_printf_i>
 800565a:	e7ed      	b.n	8005638 <_svfiprintf_r+0x1c0>
 800565c:	08006a81 	.word	0x08006a81
 8005660:	08006a8b 	.word	0x08006a8b
 8005664:	08003d7d 	.word	0x08003d7d
 8005668:	080053c1 	.word	0x080053c1
 800566c:	08006a87 	.word	0x08006a87

08005670 <malloc>:
 8005670:	4b02      	ldr	r3, [pc, #8]	@ (800567c <malloc+0xc>)
 8005672:	4601      	mov	r1, r0
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	f000 b825 	b.w	80056c4 <_malloc_r>
 800567a:	bf00      	nop
 800567c:	20000018 	.word	0x20000018

08005680 <sbrk_aligned>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	4e0f      	ldr	r6, [pc, #60]	@ (80056c0 <sbrk_aligned+0x40>)
 8005684:	460c      	mov	r4, r1
 8005686:	6831      	ldr	r1, [r6, #0]
 8005688:	4605      	mov	r5, r0
 800568a:	b911      	cbnz	r1, 8005692 <sbrk_aligned+0x12>
 800568c:	f000 fd94 	bl	80061b8 <_sbrk_r>
 8005690:	6030      	str	r0, [r6, #0]
 8005692:	4621      	mov	r1, r4
 8005694:	4628      	mov	r0, r5
 8005696:	f000 fd8f 	bl	80061b8 <_sbrk_r>
 800569a:	1c43      	adds	r3, r0, #1
 800569c:	d103      	bne.n	80056a6 <sbrk_aligned+0x26>
 800569e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80056a2:	4620      	mov	r0, r4
 80056a4:	bd70      	pop	{r4, r5, r6, pc}
 80056a6:	1cc4      	adds	r4, r0, #3
 80056a8:	f024 0403 	bic.w	r4, r4, #3
 80056ac:	42a0      	cmp	r0, r4
 80056ae:	d0f8      	beq.n	80056a2 <sbrk_aligned+0x22>
 80056b0:	1a21      	subs	r1, r4, r0
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 fd80 	bl	80061b8 <_sbrk_r>
 80056b8:	3001      	adds	r0, #1
 80056ba:	d1f2      	bne.n	80056a2 <sbrk_aligned+0x22>
 80056bc:	e7ef      	b.n	800569e <sbrk_aligned+0x1e>
 80056be:	bf00      	nop
 80056c0:	200004c8 	.word	0x200004c8

080056c4 <_malloc_r>:
 80056c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c8:	1ccd      	adds	r5, r1, #3
 80056ca:	f025 0503 	bic.w	r5, r5, #3
 80056ce:	3508      	adds	r5, #8
 80056d0:	2d0c      	cmp	r5, #12
 80056d2:	bf38      	it	cc
 80056d4:	250c      	movcc	r5, #12
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	4606      	mov	r6, r0
 80056da:	db01      	blt.n	80056e0 <_malloc_r+0x1c>
 80056dc:	42a9      	cmp	r1, r5
 80056de:	d904      	bls.n	80056ea <_malloc_r+0x26>
 80056e0:	230c      	movs	r3, #12
 80056e2:	6033      	str	r3, [r6, #0]
 80056e4:	2000      	movs	r0, #0
 80056e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057c0 <_malloc_r+0xfc>
 80056ee:	f000 f915 	bl	800591c <__malloc_lock>
 80056f2:	f8d8 3000 	ldr.w	r3, [r8]
 80056f6:	461c      	mov	r4, r3
 80056f8:	bb44      	cbnz	r4, 800574c <_malloc_r+0x88>
 80056fa:	4629      	mov	r1, r5
 80056fc:	4630      	mov	r0, r6
 80056fe:	f7ff ffbf 	bl	8005680 <sbrk_aligned>
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	4604      	mov	r4, r0
 8005706:	d158      	bne.n	80057ba <_malloc_r+0xf6>
 8005708:	f8d8 4000 	ldr.w	r4, [r8]
 800570c:	4627      	mov	r7, r4
 800570e:	2f00      	cmp	r7, #0
 8005710:	d143      	bne.n	800579a <_malloc_r+0xd6>
 8005712:	2c00      	cmp	r4, #0
 8005714:	d04b      	beq.n	80057ae <_malloc_r+0xea>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	4639      	mov	r1, r7
 800571a:	4630      	mov	r0, r6
 800571c:	eb04 0903 	add.w	r9, r4, r3
 8005720:	f000 fd4a 	bl	80061b8 <_sbrk_r>
 8005724:	4581      	cmp	r9, r0
 8005726:	d142      	bne.n	80057ae <_malloc_r+0xea>
 8005728:	6821      	ldr	r1, [r4, #0]
 800572a:	1a6d      	subs	r5, r5, r1
 800572c:	4629      	mov	r1, r5
 800572e:	4630      	mov	r0, r6
 8005730:	f7ff ffa6 	bl	8005680 <sbrk_aligned>
 8005734:	3001      	adds	r0, #1
 8005736:	d03a      	beq.n	80057ae <_malloc_r+0xea>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	442b      	add	r3, r5
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	f8d8 3000 	ldr.w	r3, [r8]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	bb62      	cbnz	r2, 80057a0 <_malloc_r+0xdc>
 8005746:	f8c8 7000 	str.w	r7, [r8]
 800574a:	e00f      	b.n	800576c <_malloc_r+0xa8>
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	1b52      	subs	r2, r2, r5
 8005750:	d420      	bmi.n	8005794 <_malloc_r+0xd0>
 8005752:	2a0b      	cmp	r2, #11
 8005754:	d917      	bls.n	8005786 <_malloc_r+0xc2>
 8005756:	1961      	adds	r1, r4, r5
 8005758:	42a3      	cmp	r3, r4
 800575a:	6025      	str	r5, [r4, #0]
 800575c:	bf18      	it	ne
 800575e:	6059      	strne	r1, [r3, #4]
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	bf08      	it	eq
 8005764:	f8c8 1000 	streq.w	r1, [r8]
 8005768:	5162      	str	r2, [r4, r5]
 800576a:	604b      	str	r3, [r1, #4]
 800576c:	4630      	mov	r0, r6
 800576e:	f000 f8db 	bl	8005928 <__malloc_unlock>
 8005772:	f104 000b 	add.w	r0, r4, #11
 8005776:	1d23      	adds	r3, r4, #4
 8005778:	f020 0007 	bic.w	r0, r0, #7
 800577c:	1ac2      	subs	r2, r0, r3
 800577e:	bf1c      	itt	ne
 8005780:	1a1b      	subne	r3, r3, r0
 8005782:	50a3      	strne	r3, [r4, r2]
 8005784:	e7af      	b.n	80056e6 <_malloc_r+0x22>
 8005786:	6862      	ldr	r2, [r4, #4]
 8005788:	42a3      	cmp	r3, r4
 800578a:	bf0c      	ite	eq
 800578c:	f8c8 2000 	streq.w	r2, [r8]
 8005790:	605a      	strne	r2, [r3, #4]
 8005792:	e7eb      	b.n	800576c <_malloc_r+0xa8>
 8005794:	4623      	mov	r3, r4
 8005796:	6864      	ldr	r4, [r4, #4]
 8005798:	e7ae      	b.n	80056f8 <_malloc_r+0x34>
 800579a:	463c      	mov	r4, r7
 800579c:	687f      	ldr	r7, [r7, #4]
 800579e:	e7b6      	b.n	800570e <_malloc_r+0x4a>
 80057a0:	461a      	mov	r2, r3
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d1fb      	bne.n	80057a0 <_malloc_r+0xdc>
 80057a8:	2300      	movs	r3, #0
 80057aa:	6053      	str	r3, [r2, #4]
 80057ac:	e7de      	b.n	800576c <_malloc_r+0xa8>
 80057ae:	230c      	movs	r3, #12
 80057b0:	6033      	str	r3, [r6, #0]
 80057b2:	4630      	mov	r0, r6
 80057b4:	f000 f8b8 	bl	8005928 <__malloc_unlock>
 80057b8:	e794      	b.n	80056e4 <_malloc_r+0x20>
 80057ba:	6005      	str	r5, [r0, #0]
 80057bc:	e7d6      	b.n	800576c <_malloc_r+0xa8>
 80057be:	bf00      	nop
 80057c0:	200004cc 	.word	0x200004cc

080057c4 <__sflush_r>:
 80057c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057cc:	0716      	lsls	r6, r2, #28
 80057ce:	4605      	mov	r5, r0
 80057d0:	460c      	mov	r4, r1
 80057d2:	d454      	bmi.n	800587e <__sflush_r+0xba>
 80057d4:	684b      	ldr	r3, [r1, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	dc02      	bgt.n	80057e0 <__sflush_r+0x1c>
 80057da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dd48      	ble.n	8005872 <__sflush_r+0xae>
 80057e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80057e2:	2e00      	cmp	r6, #0
 80057e4:	d045      	beq.n	8005872 <__sflush_r+0xae>
 80057e6:	2300      	movs	r3, #0
 80057e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80057ec:	682f      	ldr	r7, [r5, #0]
 80057ee:	6a21      	ldr	r1, [r4, #32]
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	d030      	beq.n	8005856 <__sflush_r+0x92>
 80057f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	0759      	lsls	r1, r3, #29
 80057fa:	d505      	bpl.n	8005808 <__sflush_r+0x44>
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	1ad2      	subs	r2, r2, r3
 8005800:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005802:	b10b      	cbz	r3, 8005808 <__sflush_r+0x44>
 8005804:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005806:	1ad2      	subs	r2, r2, r3
 8005808:	2300      	movs	r3, #0
 800580a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800580c:	6a21      	ldr	r1, [r4, #32]
 800580e:	4628      	mov	r0, r5
 8005810:	47b0      	blx	r6
 8005812:	1c43      	adds	r3, r0, #1
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	d106      	bne.n	8005826 <__sflush_r+0x62>
 8005818:	6829      	ldr	r1, [r5, #0]
 800581a:	291d      	cmp	r1, #29
 800581c:	d82b      	bhi.n	8005876 <__sflush_r+0xb2>
 800581e:	4a2a      	ldr	r2, [pc, #168]	@ (80058c8 <__sflush_r+0x104>)
 8005820:	410a      	asrs	r2, r1
 8005822:	07d6      	lsls	r6, r2, #31
 8005824:	d427      	bmi.n	8005876 <__sflush_r+0xb2>
 8005826:	2200      	movs	r2, #0
 8005828:	6062      	str	r2, [r4, #4]
 800582a:	04d9      	lsls	r1, r3, #19
 800582c:	6922      	ldr	r2, [r4, #16]
 800582e:	6022      	str	r2, [r4, #0]
 8005830:	d504      	bpl.n	800583c <__sflush_r+0x78>
 8005832:	1c42      	adds	r2, r0, #1
 8005834:	d101      	bne.n	800583a <__sflush_r+0x76>
 8005836:	682b      	ldr	r3, [r5, #0]
 8005838:	b903      	cbnz	r3, 800583c <__sflush_r+0x78>
 800583a:	6560      	str	r0, [r4, #84]	@ 0x54
 800583c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800583e:	602f      	str	r7, [r5, #0]
 8005840:	b1b9      	cbz	r1, 8005872 <__sflush_r+0xae>
 8005842:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005846:	4299      	cmp	r1, r3
 8005848:	d002      	beq.n	8005850 <__sflush_r+0x8c>
 800584a:	4628      	mov	r0, r5
 800584c:	f000 fd16 	bl	800627c <_free_r>
 8005850:	2300      	movs	r3, #0
 8005852:	6363      	str	r3, [r4, #52]	@ 0x34
 8005854:	e00d      	b.n	8005872 <__sflush_r+0xae>
 8005856:	2301      	movs	r3, #1
 8005858:	4628      	mov	r0, r5
 800585a:	47b0      	blx	r6
 800585c:	4602      	mov	r2, r0
 800585e:	1c50      	adds	r0, r2, #1
 8005860:	d1c9      	bne.n	80057f6 <__sflush_r+0x32>
 8005862:	682b      	ldr	r3, [r5, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0c6      	beq.n	80057f6 <__sflush_r+0x32>
 8005868:	2b1d      	cmp	r3, #29
 800586a:	d001      	beq.n	8005870 <__sflush_r+0xac>
 800586c:	2b16      	cmp	r3, #22
 800586e:	d11e      	bne.n	80058ae <__sflush_r+0xea>
 8005870:	602f      	str	r7, [r5, #0]
 8005872:	2000      	movs	r0, #0
 8005874:	e022      	b.n	80058bc <__sflush_r+0xf8>
 8005876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800587a:	b21b      	sxth	r3, r3
 800587c:	e01b      	b.n	80058b6 <__sflush_r+0xf2>
 800587e:	690f      	ldr	r7, [r1, #16]
 8005880:	2f00      	cmp	r7, #0
 8005882:	d0f6      	beq.n	8005872 <__sflush_r+0xae>
 8005884:	0793      	lsls	r3, r2, #30
 8005886:	680e      	ldr	r6, [r1, #0]
 8005888:	bf08      	it	eq
 800588a:	694b      	ldreq	r3, [r1, #20]
 800588c:	600f      	str	r7, [r1, #0]
 800588e:	bf18      	it	ne
 8005890:	2300      	movne	r3, #0
 8005892:	eba6 0807 	sub.w	r8, r6, r7
 8005896:	608b      	str	r3, [r1, #8]
 8005898:	f1b8 0f00 	cmp.w	r8, #0
 800589c:	dde9      	ble.n	8005872 <__sflush_r+0xae>
 800589e:	6a21      	ldr	r1, [r4, #32]
 80058a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80058a2:	4643      	mov	r3, r8
 80058a4:	463a      	mov	r2, r7
 80058a6:	4628      	mov	r0, r5
 80058a8:	47b0      	blx	r6
 80058aa:	2800      	cmp	r0, #0
 80058ac:	dc08      	bgt.n	80058c0 <__sflush_r+0xfc>
 80058ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058b6:	81a3      	strh	r3, [r4, #12]
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c0:	4407      	add	r7, r0
 80058c2:	eba8 0800 	sub.w	r8, r8, r0
 80058c6:	e7e7      	b.n	8005898 <__sflush_r+0xd4>
 80058c8:	dfbffffe 	.word	0xdfbffffe

080058cc <_fflush_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	690b      	ldr	r3, [r1, #16]
 80058d0:	4605      	mov	r5, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	b913      	cbnz	r3, 80058dc <_fflush_r+0x10>
 80058d6:	2500      	movs	r5, #0
 80058d8:	4628      	mov	r0, r5
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	b118      	cbz	r0, 80058e6 <_fflush_r+0x1a>
 80058de:	6a03      	ldr	r3, [r0, #32]
 80058e0:	b90b      	cbnz	r3, 80058e6 <_fflush_r+0x1a>
 80058e2:	f7fe feaf 	bl	8004644 <__sinit>
 80058e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f3      	beq.n	80058d6 <_fflush_r+0xa>
 80058ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80058f0:	07d0      	lsls	r0, r2, #31
 80058f2:	d404      	bmi.n	80058fe <_fflush_r+0x32>
 80058f4:	0599      	lsls	r1, r3, #22
 80058f6:	d402      	bmi.n	80058fe <_fflush_r+0x32>
 80058f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058fa:	f7fe ff10 	bl	800471e <__retarget_lock_acquire_recursive>
 80058fe:	4628      	mov	r0, r5
 8005900:	4621      	mov	r1, r4
 8005902:	f7ff ff5f 	bl	80057c4 <__sflush_r>
 8005906:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005908:	07da      	lsls	r2, r3, #31
 800590a:	4605      	mov	r5, r0
 800590c:	d4e4      	bmi.n	80058d8 <_fflush_r+0xc>
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	059b      	lsls	r3, r3, #22
 8005912:	d4e1      	bmi.n	80058d8 <_fflush_r+0xc>
 8005914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005916:	f7fe ff03 	bl	8004720 <__retarget_lock_release_recursive>
 800591a:	e7dd      	b.n	80058d8 <_fflush_r+0xc>

0800591c <__malloc_lock>:
 800591c:	4801      	ldr	r0, [pc, #4]	@ (8005924 <__malloc_lock+0x8>)
 800591e:	f7fe befe 	b.w	800471e <__retarget_lock_acquire_recursive>
 8005922:	bf00      	nop
 8005924:	200004c4 	.word	0x200004c4

08005928 <__malloc_unlock>:
 8005928:	4801      	ldr	r0, [pc, #4]	@ (8005930 <__malloc_unlock+0x8>)
 800592a:	f7fe bef9 	b.w	8004720 <__retarget_lock_release_recursive>
 800592e:	bf00      	nop
 8005930:	200004c4 	.word	0x200004c4

08005934 <_Balloc>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	69c6      	ldr	r6, [r0, #28]
 8005938:	4604      	mov	r4, r0
 800593a:	460d      	mov	r5, r1
 800593c:	b976      	cbnz	r6, 800595c <_Balloc+0x28>
 800593e:	2010      	movs	r0, #16
 8005940:	f7ff fe96 	bl	8005670 <malloc>
 8005944:	4602      	mov	r2, r0
 8005946:	61e0      	str	r0, [r4, #28]
 8005948:	b920      	cbnz	r0, 8005954 <_Balloc+0x20>
 800594a:	4b18      	ldr	r3, [pc, #96]	@ (80059ac <_Balloc+0x78>)
 800594c:	4818      	ldr	r0, [pc, #96]	@ (80059b0 <_Balloc+0x7c>)
 800594e:	216b      	movs	r1, #107	@ 0x6b
 8005950:	f000 fc62 	bl	8006218 <__assert_func>
 8005954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005958:	6006      	str	r6, [r0, #0]
 800595a:	60c6      	str	r6, [r0, #12]
 800595c:	69e6      	ldr	r6, [r4, #28]
 800595e:	68f3      	ldr	r3, [r6, #12]
 8005960:	b183      	cbz	r3, 8005984 <_Balloc+0x50>
 8005962:	69e3      	ldr	r3, [r4, #28]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800596a:	b9b8      	cbnz	r0, 800599c <_Balloc+0x68>
 800596c:	2101      	movs	r1, #1
 800596e:	fa01 f605 	lsl.w	r6, r1, r5
 8005972:	1d72      	adds	r2, r6, #5
 8005974:	0092      	lsls	r2, r2, #2
 8005976:	4620      	mov	r0, r4
 8005978:	f000 fc6c 	bl	8006254 <_calloc_r>
 800597c:	b160      	cbz	r0, 8005998 <_Balloc+0x64>
 800597e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005982:	e00e      	b.n	80059a2 <_Balloc+0x6e>
 8005984:	2221      	movs	r2, #33	@ 0x21
 8005986:	2104      	movs	r1, #4
 8005988:	4620      	mov	r0, r4
 800598a:	f000 fc63 	bl	8006254 <_calloc_r>
 800598e:	69e3      	ldr	r3, [r4, #28]
 8005990:	60f0      	str	r0, [r6, #12]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e4      	bne.n	8005962 <_Balloc+0x2e>
 8005998:	2000      	movs	r0, #0
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	6802      	ldr	r2, [r0, #0]
 800599e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059a2:	2300      	movs	r3, #0
 80059a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059a8:	e7f7      	b.n	800599a <_Balloc+0x66>
 80059aa:	bf00      	nop
 80059ac:	08006a01 	.word	0x08006a01
 80059b0:	08006a92 	.word	0x08006a92

080059b4 <_Bfree>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	69c6      	ldr	r6, [r0, #28]
 80059b8:	4605      	mov	r5, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	b976      	cbnz	r6, 80059dc <_Bfree+0x28>
 80059be:	2010      	movs	r0, #16
 80059c0:	f7ff fe56 	bl	8005670 <malloc>
 80059c4:	4602      	mov	r2, r0
 80059c6:	61e8      	str	r0, [r5, #28]
 80059c8:	b920      	cbnz	r0, 80059d4 <_Bfree+0x20>
 80059ca:	4b09      	ldr	r3, [pc, #36]	@ (80059f0 <_Bfree+0x3c>)
 80059cc:	4809      	ldr	r0, [pc, #36]	@ (80059f4 <_Bfree+0x40>)
 80059ce:	218f      	movs	r1, #143	@ 0x8f
 80059d0:	f000 fc22 	bl	8006218 <__assert_func>
 80059d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059d8:	6006      	str	r6, [r0, #0]
 80059da:	60c6      	str	r6, [r0, #12]
 80059dc:	b13c      	cbz	r4, 80059ee <_Bfree+0x3a>
 80059de:	69eb      	ldr	r3, [r5, #28]
 80059e0:	6862      	ldr	r2, [r4, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059e8:	6021      	str	r1, [r4, #0]
 80059ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	08006a01 	.word	0x08006a01
 80059f4:	08006a92 	.word	0x08006a92

080059f8 <__multadd>:
 80059f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fc:	690d      	ldr	r5, [r1, #16]
 80059fe:	4607      	mov	r7, r0
 8005a00:	460c      	mov	r4, r1
 8005a02:	461e      	mov	r6, r3
 8005a04:	f101 0c14 	add.w	ip, r1, #20
 8005a08:	2000      	movs	r0, #0
 8005a0a:	f8dc 3000 	ldr.w	r3, [ip]
 8005a0e:	b299      	uxth	r1, r3
 8005a10:	fb02 6101 	mla	r1, r2, r1, r6
 8005a14:	0c1e      	lsrs	r6, r3, #16
 8005a16:	0c0b      	lsrs	r3, r1, #16
 8005a18:	fb02 3306 	mla	r3, r2, r6, r3
 8005a1c:	b289      	uxth	r1, r1
 8005a1e:	3001      	adds	r0, #1
 8005a20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a24:	4285      	cmp	r5, r0
 8005a26:	f84c 1b04 	str.w	r1, [ip], #4
 8005a2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a2e:	dcec      	bgt.n	8005a0a <__multadd+0x12>
 8005a30:	b30e      	cbz	r6, 8005a76 <__multadd+0x7e>
 8005a32:	68a3      	ldr	r3, [r4, #8]
 8005a34:	42ab      	cmp	r3, r5
 8005a36:	dc19      	bgt.n	8005a6c <__multadd+0x74>
 8005a38:	6861      	ldr	r1, [r4, #4]
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	3101      	adds	r1, #1
 8005a3e:	f7ff ff79 	bl	8005934 <_Balloc>
 8005a42:	4680      	mov	r8, r0
 8005a44:	b928      	cbnz	r0, 8005a52 <__multadd+0x5a>
 8005a46:	4602      	mov	r2, r0
 8005a48:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <__multadd+0x84>)
 8005a4a:	480d      	ldr	r0, [pc, #52]	@ (8005a80 <__multadd+0x88>)
 8005a4c:	21ba      	movs	r1, #186	@ 0xba
 8005a4e:	f000 fbe3 	bl	8006218 <__assert_func>
 8005a52:	6922      	ldr	r2, [r4, #16]
 8005a54:	3202      	adds	r2, #2
 8005a56:	f104 010c 	add.w	r1, r4, #12
 8005a5a:	0092      	lsls	r2, r2, #2
 8005a5c:	300c      	adds	r0, #12
 8005a5e:	f000 fbcd 	bl	80061fc <memcpy>
 8005a62:	4621      	mov	r1, r4
 8005a64:	4638      	mov	r0, r7
 8005a66:	f7ff ffa5 	bl	80059b4 <_Bfree>
 8005a6a:	4644      	mov	r4, r8
 8005a6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a70:	3501      	adds	r5, #1
 8005a72:	615e      	str	r6, [r3, #20]
 8005a74:	6125      	str	r5, [r4, #16]
 8005a76:	4620      	mov	r0, r4
 8005a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a7c:	08006a70 	.word	0x08006a70
 8005a80:	08006a92 	.word	0x08006a92

08005a84 <__hi0bits>:
 8005a84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005a88:	4603      	mov	r3, r0
 8005a8a:	bf36      	itet	cc
 8005a8c:	0403      	lslcc	r3, r0, #16
 8005a8e:	2000      	movcs	r0, #0
 8005a90:	2010      	movcc	r0, #16
 8005a92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a96:	bf3c      	itt	cc
 8005a98:	021b      	lslcc	r3, r3, #8
 8005a9a:	3008      	addcc	r0, #8
 8005a9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005aa0:	bf3c      	itt	cc
 8005aa2:	011b      	lslcc	r3, r3, #4
 8005aa4:	3004      	addcc	r0, #4
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aaa:	bf3c      	itt	cc
 8005aac:	009b      	lslcc	r3, r3, #2
 8005aae:	3002      	addcc	r0, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	db05      	blt.n	8005ac0 <__hi0bits+0x3c>
 8005ab4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005ab8:	f100 0001 	add.w	r0, r0, #1
 8005abc:	bf08      	it	eq
 8005abe:	2020      	moveq	r0, #32
 8005ac0:	4770      	bx	lr

08005ac2 <__lo0bits>:
 8005ac2:	6803      	ldr	r3, [r0, #0]
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	f013 0007 	ands.w	r0, r3, #7
 8005aca:	d00b      	beq.n	8005ae4 <__lo0bits+0x22>
 8005acc:	07d9      	lsls	r1, r3, #31
 8005ace:	d421      	bmi.n	8005b14 <__lo0bits+0x52>
 8005ad0:	0798      	lsls	r0, r3, #30
 8005ad2:	bf49      	itett	mi
 8005ad4:	085b      	lsrmi	r3, r3, #1
 8005ad6:	089b      	lsrpl	r3, r3, #2
 8005ad8:	2001      	movmi	r0, #1
 8005ada:	6013      	strmi	r3, [r2, #0]
 8005adc:	bf5c      	itt	pl
 8005ade:	6013      	strpl	r3, [r2, #0]
 8005ae0:	2002      	movpl	r0, #2
 8005ae2:	4770      	bx	lr
 8005ae4:	b299      	uxth	r1, r3
 8005ae6:	b909      	cbnz	r1, 8005aec <__lo0bits+0x2a>
 8005ae8:	0c1b      	lsrs	r3, r3, #16
 8005aea:	2010      	movs	r0, #16
 8005aec:	b2d9      	uxtb	r1, r3
 8005aee:	b909      	cbnz	r1, 8005af4 <__lo0bits+0x32>
 8005af0:	3008      	adds	r0, #8
 8005af2:	0a1b      	lsrs	r3, r3, #8
 8005af4:	0719      	lsls	r1, r3, #28
 8005af6:	bf04      	itt	eq
 8005af8:	091b      	lsreq	r3, r3, #4
 8005afa:	3004      	addeq	r0, #4
 8005afc:	0799      	lsls	r1, r3, #30
 8005afe:	bf04      	itt	eq
 8005b00:	089b      	lsreq	r3, r3, #2
 8005b02:	3002      	addeq	r0, #2
 8005b04:	07d9      	lsls	r1, r3, #31
 8005b06:	d403      	bmi.n	8005b10 <__lo0bits+0x4e>
 8005b08:	085b      	lsrs	r3, r3, #1
 8005b0a:	f100 0001 	add.w	r0, r0, #1
 8005b0e:	d003      	beq.n	8005b18 <__lo0bits+0x56>
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	4770      	bx	lr
 8005b14:	2000      	movs	r0, #0
 8005b16:	4770      	bx	lr
 8005b18:	2020      	movs	r0, #32
 8005b1a:	4770      	bx	lr

08005b1c <__i2b>:
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	460c      	mov	r4, r1
 8005b20:	2101      	movs	r1, #1
 8005b22:	f7ff ff07 	bl	8005934 <_Balloc>
 8005b26:	4602      	mov	r2, r0
 8005b28:	b928      	cbnz	r0, 8005b36 <__i2b+0x1a>
 8005b2a:	4b05      	ldr	r3, [pc, #20]	@ (8005b40 <__i2b+0x24>)
 8005b2c:	4805      	ldr	r0, [pc, #20]	@ (8005b44 <__i2b+0x28>)
 8005b2e:	f240 1145 	movw	r1, #325	@ 0x145
 8005b32:	f000 fb71 	bl	8006218 <__assert_func>
 8005b36:	2301      	movs	r3, #1
 8005b38:	6144      	str	r4, [r0, #20]
 8005b3a:	6103      	str	r3, [r0, #16]
 8005b3c:	bd10      	pop	{r4, pc}
 8005b3e:	bf00      	nop
 8005b40:	08006a70 	.word	0x08006a70
 8005b44:	08006a92 	.word	0x08006a92

08005b48 <__multiply>:
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	4614      	mov	r4, r2
 8005b4e:	690a      	ldr	r2, [r1, #16]
 8005b50:	6923      	ldr	r3, [r4, #16]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	bfa8      	it	ge
 8005b56:	4623      	movge	r3, r4
 8005b58:	460f      	mov	r7, r1
 8005b5a:	bfa4      	itt	ge
 8005b5c:	460c      	movge	r4, r1
 8005b5e:	461f      	movge	r7, r3
 8005b60:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005b64:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005b68:	68a3      	ldr	r3, [r4, #8]
 8005b6a:	6861      	ldr	r1, [r4, #4]
 8005b6c:	eb0a 0609 	add.w	r6, sl, r9
 8005b70:	42b3      	cmp	r3, r6
 8005b72:	b085      	sub	sp, #20
 8005b74:	bfb8      	it	lt
 8005b76:	3101      	addlt	r1, #1
 8005b78:	f7ff fedc 	bl	8005934 <_Balloc>
 8005b7c:	b930      	cbnz	r0, 8005b8c <__multiply+0x44>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	4b44      	ldr	r3, [pc, #272]	@ (8005c94 <__multiply+0x14c>)
 8005b82:	4845      	ldr	r0, [pc, #276]	@ (8005c98 <__multiply+0x150>)
 8005b84:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005b88:	f000 fb46 	bl	8006218 <__assert_func>
 8005b8c:	f100 0514 	add.w	r5, r0, #20
 8005b90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b94:	462b      	mov	r3, r5
 8005b96:	2200      	movs	r2, #0
 8005b98:	4543      	cmp	r3, r8
 8005b9a:	d321      	bcc.n	8005be0 <__multiply+0x98>
 8005b9c:	f107 0114 	add.w	r1, r7, #20
 8005ba0:	f104 0214 	add.w	r2, r4, #20
 8005ba4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005ba8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005bac:	9302      	str	r3, [sp, #8]
 8005bae:	1b13      	subs	r3, r2, r4
 8005bb0:	3b15      	subs	r3, #21
 8005bb2:	f023 0303 	bic.w	r3, r3, #3
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	f104 0715 	add.w	r7, r4, #21
 8005bbc:	42ba      	cmp	r2, r7
 8005bbe:	bf38      	it	cc
 8005bc0:	2304      	movcc	r3, #4
 8005bc2:	9301      	str	r3, [sp, #4]
 8005bc4:	9b02      	ldr	r3, [sp, #8]
 8005bc6:	9103      	str	r1, [sp, #12]
 8005bc8:	428b      	cmp	r3, r1
 8005bca:	d80c      	bhi.n	8005be6 <__multiply+0x9e>
 8005bcc:	2e00      	cmp	r6, #0
 8005bce:	dd03      	ble.n	8005bd8 <__multiply+0x90>
 8005bd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d05b      	beq.n	8005c90 <__multiply+0x148>
 8005bd8:	6106      	str	r6, [r0, #16]
 8005bda:	b005      	add	sp, #20
 8005bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be0:	f843 2b04 	str.w	r2, [r3], #4
 8005be4:	e7d8      	b.n	8005b98 <__multiply+0x50>
 8005be6:	f8b1 a000 	ldrh.w	sl, [r1]
 8005bea:	f1ba 0f00 	cmp.w	sl, #0
 8005bee:	d024      	beq.n	8005c3a <__multiply+0xf2>
 8005bf0:	f104 0e14 	add.w	lr, r4, #20
 8005bf4:	46a9      	mov	r9, r5
 8005bf6:	f04f 0c00 	mov.w	ip, #0
 8005bfa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005bfe:	f8d9 3000 	ldr.w	r3, [r9]
 8005c02:	fa1f fb87 	uxth.w	fp, r7
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	fb0a 330b 	mla	r3, sl, fp, r3
 8005c0c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005c10:	f8d9 7000 	ldr.w	r7, [r9]
 8005c14:	4463      	add	r3, ip
 8005c16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005c1a:	fb0a c70b 	mla	r7, sl, fp, ip
 8005c1e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005c28:	4572      	cmp	r2, lr
 8005c2a:	f849 3b04 	str.w	r3, [r9], #4
 8005c2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005c32:	d8e2      	bhi.n	8005bfa <__multiply+0xb2>
 8005c34:	9b01      	ldr	r3, [sp, #4]
 8005c36:	f845 c003 	str.w	ip, [r5, r3]
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005c40:	3104      	adds	r1, #4
 8005c42:	f1b9 0f00 	cmp.w	r9, #0
 8005c46:	d021      	beq.n	8005c8c <__multiply+0x144>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	f104 0c14 	add.w	ip, r4, #20
 8005c4e:	46ae      	mov	lr, r5
 8005c50:	f04f 0a00 	mov.w	sl, #0
 8005c54:	f8bc b000 	ldrh.w	fp, [ip]
 8005c58:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005c5c:	fb09 770b 	mla	r7, r9, fp, r7
 8005c60:	4457      	add	r7, sl
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005c68:	f84e 3b04 	str.w	r3, [lr], #4
 8005c6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c74:	f8be 3000 	ldrh.w	r3, [lr]
 8005c78:	fb09 330a 	mla	r3, r9, sl, r3
 8005c7c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005c80:	4562      	cmp	r2, ip
 8005c82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c86:	d8e5      	bhi.n	8005c54 <__multiply+0x10c>
 8005c88:	9f01      	ldr	r7, [sp, #4]
 8005c8a:	51eb      	str	r3, [r5, r7]
 8005c8c:	3504      	adds	r5, #4
 8005c8e:	e799      	b.n	8005bc4 <__multiply+0x7c>
 8005c90:	3e01      	subs	r6, #1
 8005c92:	e79b      	b.n	8005bcc <__multiply+0x84>
 8005c94:	08006a70 	.word	0x08006a70
 8005c98:	08006a92 	.word	0x08006a92

08005c9c <__pow5mult>:
 8005c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca0:	4615      	mov	r5, r2
 8005ca2:	f012 0203 	ands.w	r2, r2, #3
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	460e      	mov	r6, r1
 8005caa:	d007      	beq.n	8005cbc <__pow5mult+0x20>
 8005cac:	4c25      	ldr	r4, [pc, #148]	@ (8005d44 <__pow5mult+0xa8>)
 8005cae:	3a01      	subs	r2, #1
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cb6:	f7ff fe9f 	bl	80059f8 <__multadd>
 8005cba:	4606      	mov	r6, r0
 8005cbc:	10ad      	asrs	r5, r5, #2
 8005cbe:	d03d      	beq.n	8005d3c <__pow5mult+0xa0>
 8005cc0:	69fc      	ldr	r4, [r7, #28]
 8005cc2:	b97c      	cbnz	r4, 8005ce4 <__pow5mult+0x48>
 8005cc4:	2010      	movs	r0, #16
 8005cc6:	f7ff fcd3 	bl	8005670 <malloc>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	61f8      	str	r0, [r7, #28]
 8005cce:	b928      	cbnz	r0, 8005cdc <__pow5mult+0x40>
 8005cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d48 <__pow5mult+0xac>)
 8005cd2:	481e      	ldr	r0, [pc, #120]	@ (8005d4c <__pow5mult+0xb0>)
 8005cd4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005cd8:	f000 fa9e 	bl	8006218 <__assert_func>
 8005cdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ce0:	6004      	str	r4, [r0, #0]
 8005ce2:	60c4      	str	r4, [r0, #12]
 8005ce4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005ce8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cec:	b94c      	cbnz	r4, 8005d02 <__pow5mult+0x66>
 8005cee:	f240 2171 	movw	r1, #625	@ 0x271
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f7ff ff12 	bl	8005b1c <__i2b>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f8c8 0008 	str.w	r0, [r8, #8]
 8005cfe:	4604      	mov	r4, r0
 8005d00:	6003      	str	r3, [r0, #0]
 8005d02:	f04f 0900 	mov.w	r9, #0
 8005d06:	07eb      	lsls	r3, r5, #31
 8005d08:	d50a      	bpl.n	8005d20 <__pow5mult+0x84>
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4622      	mov	r2, r4
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f7ff ff1a 	bl	8005b48 <__multiply>
 8005d14:	4631      	mov	r1, r6
 8005d16:	4680      	mov	r8, r0
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f7ff fe4b 	bl	80059b4 <_Bfree>
 8005d1e:	4646      	mov	r6, r8
 8005d20:	106d      	asrs	r5, r5, #1
 8005d22:	d00b      	beq.n	8005d3c <__pow5mult+0xa0>
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	b938      	cbnz	r0, 8005d38 <__pow5mult+0x9c>
 8005d28:	4622      	mov	r2, r4
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f7ff ff0b 	bl	8005b48 <__multiply>
 8005d32:	6020      	str	r0, [r4, #0]
 8005d34:	f8c0 9000 	str.w	r9, [r0]
 8005d38:	4604      	mov	r4, r0
 8005d3a:	e7e4      	b.n	8005d06 <__pow5mult+0x6a>
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d42:	bf00      	nop
 8005d44:	08006aec 	.word	0x08006aec
 8005d48:	08006a01 	.word	0x08006a01
 8005d4c:	08006a92 	.word	0x08006a92

08005d50 <__lshift>:
 8005d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d54:	460c      	mov	r4, r1
 8005d56:	6849      	ldr	r1, [r1, #4]
 8005d58:	6923      	ldr	r3, [r4, #16]
 8005d5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d5e:	68a3      	ldr	r3, [r4, #8]
 8005d60:	4607      	mov	r7, r0
 8005d62:	4691      	mov	r9, r2
 8005d64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d68:	f108 0601 	add.w	r6, r8, #1
 8005d6c:	42b3      	cmp	r3, r6
 8005d6e:	db0b      	blt.n	8005d88 <__lshift+0x38>
 8005d70:	4638      	mov	r0, r7
 8005d72:	f7ff fddf 	bl	8005934 <_Balloc>
 8005d76:	4605      	mov	r5, r0
 8005d78:	b948      	cbnz	r0, 8005d8e <__lshift+0x3e>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4b28      	ldr	r3, [pc, #160]	@ (8005e20 <__lshift+0xd0>)
 8005d7e:	4829      	ldr	r0, [pc, #164]	@ (8005e24 <__lshift+0xd4>)
 8005d80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005d84:	f000 fa48 	bl	8006218 <__assert_func>
 8005d88:	3101      	adds	r1, #1
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	e7ee      	b.n	8005d6c <__lshift+0x1c>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f100 0114 	add.w	r1, r0, #20
 8005d94:	f100 0210 	add.w	r2, r0, #16
 8005d98:	4618      	mov	r0, r3
 8005d9a:	4553      	cmp	r3, sl
 8005d9c:	db33      	blt.n	8005e06 <__lshift+0xb6>
 8005d9e:	6920      	ldr	r0, [r4, #16]
 8005da0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005da4:	f104 0314 	add.w	r3, r4, #20
 8005da8:	f019 091f 	ands.w	r9, r9, #31
 8005dac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005db0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005db4:	d02b      	beq.n	8005e0e <__lshift+0xbe>
 8005db6:	f1c9 0e20 	rsb	lr, r9, #32
 8005dba:	468a      	mov	sl, r1
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	fa00 f009 	lsl.w	r0, r0, r9
 8005dc4:	4310      	orrs	r0, r2
 8005dc6:	f84a 0b04 	str.w	r0, [sl], #4
 8005dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dce:	459c      	cmp	ip, r3
 8005dd0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005dd4:	d8f3      	bhi.n	8005dbe <__lshift+0x6e>
 8005dd6:	ebac 0304 	sub.w	r3, ip, r4
 8005dda:	3b15      	subs	r3, #21
 8005ddc:	f023 0303 	bic.w	r3, r3, #3
 8005de0:	3304      	adds	r3, #4
 8005de2:	f104 0015 	add.w	r0, r4, #21
 8005de6:	4584      	cmp	ip, r0
 8005de8:	bf38      	it	cc
 8005dea:	2304      	movcc	r3, #4
 8005dec:	50ca      	str	r2, [r1, r3]
 8005dee:	b10a      	cbz	r2, 8005df4 <__lshift+0xa4>
 8005df0:	f108 0602 	add.w	r6, r8, #2
 8005df4:	3e01      	subs	r6, #1
 8005df6:	4638      	mov	r0, r7
 8005df8:	612e      	str	r6, [r5, #16]
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	f7ff fdda 	bl	80059b4 <_Bfree>
 8005e00:	4628      	mov	r0, r5
 8005e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e06:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	e7c5      	b.n	8005d9a <__lshift+0x4a>
 8005e0e:	3904      	subs	r1, #4
 8005e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e14:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e18:	459c      	cmp	ip, r3
 8005e1a:	d8f9      	bhi.n	8005e10 <__lshift+0xc0>
 8005e1c:	e7ea      	b.n	8005df4 <__lshift+0xa4>
 8005e1e:	bf00      	nop
 8005e20:	08006a70 	.word	0x08006a70
 8005e24:	08006a92 	.word	0x08006a92

08005e28 <__mcmp>:
 8005e28:	690a      	ldr	r2, [r1, #16]
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	6900      	ldr	r0, [r0, #16]
 8005e2e:	1a80      	subs	r0, r0, r2
 8005e30:	b530      	push	{r4, r5, lr}
 8005e32:	d10e      	bne.n	8005e52 <__mcmp+0x2a>
 8005e34:	3314      	adds	r3, #20
 8005e36:	3114      	adds	r1, #20
 8005e38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e48:	4295      	cmp	r5, r2
 8005e4a:	d003      	beq.n	8005e54 <__mcmp+0x2c>
 8005e4c:	d205      	bcs.n	8005e5a <__mcmp+0x32>
 8005e4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e52:	bd30      	pop	{r4, r5, pc}
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d3f3      	bcc.n	8005e40 <__mcmp+0x18>
 8005e58:	e7fb      	b.n	8005e52 <__mcmp+0x2a>
 8005e5a:	2001      	movs	r0, #1
 8005e5c:	e7f9      	b.n	8005e52 <__mcmp+0x2a>
	...

08005e60 <__mdiff>:
 8005e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	4689      	mov	r9, r1
 8005e66:	4606      	mov	r6, r0
 8005e68:	4611      	mov	r1, r2
 8005e6a:	4648      	mov	r0, r9
 8005e6c:	4614      	mov	r4, r2
 8005e6e:	f7ff ffdb 	bl	8005e28 <__mcmp>
 8005e72:	1e05      	subs	r5, r0, #0
 8005e74:	d112      	bne.n	8005e9c <__mdiff+0x3c>
 8005e76:	4629      	mov	r1, r5
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff fd5b 	bl	8005934 <_Balloc>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	b928      	cbnz	r0, 8005e8e <__mdiff+0x2e>
 8005e82:	4b3f      	ldr	r3, [pc, #252]	@ (8005f80 <__mdiff+0x120>)
 8005e84:	f240 2137 	movw	r1, #567	@ 0x237
 8005e88:	483e      	ldr	r0, [pc, #248]	@ (8005f84 <__mdiff+0x124>)
 8005e8a:	f000 f9c5 	bl	8006218 <__assert_func>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e94:	4610      	mov	r0, r2
 8005e96:	b003      	add	sp, #12
 8005e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9c:	bfbc      	itt	lt
 8005e9e:	464b      	movlt	r3, r9
 8005ea0:	46a1      	movlt	r9, r4
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005ea8:	bfba      	itte	lt
 8005eaa:	461c      	movlt	r4, r3
 8005eac:	2501      	movlt	r5, #1
 8005eae:	2500      	movge	r5, #0
 8005eb0:	f7ff fd40 	bl	8005934 <_Balloc>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	b918      	cbnz	r0, 8005ec0 <__mdiff+0x60>
 8005eb8:	4b31      	ldr	r3, [pc, #196]	@ (8005f80 <__mdiff+0x120>)
 8005eba:	f240 2145 	movw	r1, #581	@ 0x245
 8005ebe:	e7e3      	b.n	8005e88 <__mdiff+0x28>
 8005ec0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005ec4:	6926      	ldr	r6, [r4, #16]
 8005ec6:	60c5      	str	r5, [r0, #12]
 8005ec8:	f109 0310 	add.w	r3, r9, #16
 8005ecc:	f109 0514 	add.w	r5, r9, #20
 8005ed0:	f104 0e14 	add.w	lr, r4, #20
 8005ed4:	f100 0b14 	add.w	fp, r0, #20
 8005ed8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005edc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	46d9      	mov	r9, fp
 8005ee4:	f04f 0c00 	mov.w	ip, #0
 8005ee8:	9b01      	ldr	r3, [sp, #4]
 8005eea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005eee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	fa1f f38a 	uxth.w	r3, sl
 8005ef8:	4619      	mov	r1, r3
 8005efa:	b283      	uxth	r3, r0
 8005efc:	1acb      	subs	r3, r1, r3
 8005efe:	0c00      	lsrs	r0, r0, #16
 8005f00:	4463      	add	r3, ip
 8005f02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005f06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005f10:	4576      	cmp	r6, lr
 8005f12:	f849 3b04 	str.w	r3, [r9], #4
 8005f16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f1a:	d8e5      	bhi.n	8005ee8 <__mdiff+0x88>
 8005f1c:	1b33      	subs	r3, r6, r4
 8005f1e:	3b15      	subs	r3, #21
 8005f20:	f023 0303 	bic.w	r3, r3, #3
 8005f24:	3415      	adds	r4, #21
 8005f26:	3304      	adds	r3, #4
 8005f28:	42a6      	cmp	r6, r4
 8005f2a:	bf38      	it	cc
 8005f2c:	2304      	movcc	r3, #4
 8005f2e:	441d      	add	r5, r3
 8005f30:	445b      	add	r3, fp
 8005f32:	461e      	mov	r6, r3
 8005f34:	462c      	mov	r4, r5
 8005f36:	4544      	cmp	r4, r8
 8005f38:	d30e      	bcc.n	8005f58 <__mdiff+0xf8>
 8005f3a:	f108 0103 	add.w	r1, r8, #3
 8005f3e:	1b49      	subs	r1, r1, r5
 8005f40:	f021 0103 	bic.w	r1, r1, #3
 8005f44:	3d03      	subs	r5, #3
 8005f46:	45a8      	cmp	r8, r5
 8005f48:	bf38      	it	cc
 8005f4a:	2100      	movcc	r1, #0
 8005f4c:	440b      	add	r3, r1
 8005f4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f52:	b191      	cbz	r1, 8005f7a <__mdiff+0x11a>
 8005f54:	6117      	str	r7, [r2, #16]
 8005f56:	e79d      	b.n	8005e94 <__mdiff+0x34>
 8005f58:	f854 1b04 	ldr.w	r1, [r4], #4
 8005f5c:	46e6      	mov	lr, ip
 8005f5e:	0c08      	lsrs	r0, r1, #16
 8005f60:	fa1c fc81 	uxtah	ip, ip, r1
 8005f64:	4471      	add	r1, lr
 8005f66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005f6a:	b289      	uxth	r1, r1
 8005f6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005f70:	f846 1b04 	str.w	r1, [r6], #4
 8005f74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f78:	e7dd      	b.n	8005f36 <__mdiff+0xd6>
 8005f7a:	3f01      	subs	r7, #1
 8005f7c:	e7e7      	b.n	8005f4e <__mdiff+0xee>
 8005f7e:	bf00      	nop
 8005f80:	08006a70 	.word	0x08006a70
 8005f84:	08006a92 	.word	0x08006a92

08005f88 <__d2b>:
 8005f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f8c:	460f      	mov	r7, r1
 8005f8e:	2101      	movs	r1, #1
 8005f90:	ec59 8b10 	vmov	r8, r9, d0
 8005f94:	4616      	mov	r6, r2
 8005f96:	f7ff fccd 	bl	8005934 <_Balloc>
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	b930      	cbnz	r0, 8005fac <__d2b+0x24>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	4b23      	ldr	r3, [pc, #140]	@ (8006030 <__d2b+0xa8>)
 8005fa2:	4824      	ldr	r0, [pc, #144]	@ (8006034 <__d2b+0xac>)
 8005fa4:	f240 310f 	movw	r1, #783	@ 0x30f
 8005fa8:	f000 f936 	bl	8006218 <__assert_func>
 8005fac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005fb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fb4:	b10d      	cbz	r5, 8005fba <__d2b+0x32>
 8005fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	f1b8 0300 	subs.w	r3, r8, #0
 8005fc0:	d023      	beq.n	800600a <__d2b+0x82>
 8005fc2:	4668      	mov	r0, sp
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	f7ff fd7c 	bl	8005ac2 <__lo0bits>
 8005fca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005fce:	b1d0      	cbz	r0, 8006006 <__d2b+0x7e>
 8005fd0:	f1c0 0320 	rsb	r3, r0, #32
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	40c2      	lsrs	r2, r0
 8005fdc:	6163      	str	r3, [r4, #20]
 8005fde:	9201      	str	r2, [sp, #4]
 8005fe0:	9b01      	ldr	r3, [sp, #4]
 8005fe2:	61a3      	str	r3, [r4, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	bf0c      	ite	eq
 8005fe8:	2201      	moveq	r2, #1
 8005fea:	2202      	movne	r2, #2
 8005fec:	6122      	str	r2, [r4, #16]
 8005fee:	b1a5      	cbz	r5, 800601a <__d2b+0x92>
 8005ff0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ff4:	4405      	add	r5, r0
 8005ff6:	603d      	str	r5, [r7, #0]
 8005ff8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005ffc:	6030      	str	r0, [r6, #0]
 8005ffe:	4620      	mov	r0, r4
 8006000:	b003      	add	sp, #12
 8006002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006006:	6161      	str	r1, [r4, #20]
 8006008:	e7ea      	b.n	8005fe0 <__d2b+0x58>
 800600a:	a801      	add	r0, sp, #4
 800600c:	f7ff fd59 	bl	8005ac2 <__lo0bits>
 8006010:	9b01      	ldr	r3, [sp, #4]
 8006012:	6163      	str	r3, [r4, #20]
 8006014:	3020      	adds	r0, #32
 8006016:	2201      	movs	r2, #1
 8006018:	e7e8      	b.n	8005fec <__d2b+0x64>
 800601a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800601e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006022:	6038      	str	r0, [r7, #0]
 8006024:	6918      	ldr	r0, [r3, #16]
 8006026:	f7ff fd2d 	bl	8005a84 <__hi0bits>
 800602a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800602e:	e7e5      	b.n	8005ffc <__d2b+0x74>
 8006030:	08006a70 	.word	0x08006a70
 8006034:	08006a92 	.word	0x08006a92

08006038 <__sread>:
 8006038:	b510      	push	{r4, lr}
 800603a:	460c      	mov	r4, r1
 800603c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006040:	f000 f8a8 	bl	8006194 <_read_r>
 8006044:	2800      	cmp	r0, #0
 8006046:	bfab      	itete	ge
 8006048:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800604a:	89a3      	ldrhlt	r3, [r4, #12]
 800604c:	181b      	addge	r3, r3, r0
 800604e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006052:	bfac      	ite	ge
 8006054:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006056:	81a3      	strhlt	r3, [r4, #12]
 8006058:	bd10      	pop	{r4, pc}

0800605a <__swrite>:
 800605a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800605e:	461f      	mov	r7, r3
 8006060:	898b      	ldrh	r3, [r1, #12]
 8006062:	05db      	lsls	r3, r3, #23
 8006064:	4605      	mov	r5, r0
 8006066:	460c      	mov	r4, r1
 8006068:	4616      	mov	r6, r2
 800606a:	d505      	bpl.n	8006078 <__swrite+0x1e>
 800606c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006070:	2302      	movs	r3, #2
 8006072:	2200      	movs	r2, #0
 8006074:	f000 f87c 	bl	8006170 <_lseek_r>
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800607e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006082:	81a3      	strh	r3, [r4, #12]
 8006084:	4632      	mov	r2, r6
 8006086:	463b      	mov	r3, r7
 8006088:	4628      	mov	r0, r5
 800608a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800608e:	f000 b8a3 	b.w	80061d8 <_write_r>

08006092 <__sseek>:
 8006092:	b510      	push	{r4, lr}
 8006094:	460c      	mov	r4, r1
 8006096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800609a:	f000 f869 	bl	8006170 <_lseek_r>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	bf15      	itete	ne
 80060a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060ae:	81a3      	strheq	r3, [r4, #12]
 80060b0:	bf18      	it	ne
 80060b2:	81a3      	strhne	r3, [r4, #12]
 80060b4:	bd10      	pop	{r4, pc}

080060b6 <__sclose>:
 80060b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ba:	f000 b849 	b.w	8006150 <_close_r>

080060be <_realloc_r>:
 80060be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c2:	4680      	mov	r8, r0
 80060c4:	4615      	mov	r5, r2
 80060c6:	460c      	mov	r4, r1
 80060c8:	b921      	cbnz	r1, 80060d4 <_realloc_r+0x16>
 80060ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ce:	4611      	mov	r1, r2
 80060d0:	f7ff baf8 	b.w	80056c4 <_malloc_r>
 80060d4:	b92a      	cbnz	r2, 80060e2 <_realloc_r+0x24>
 80060d6:	f000 f8d1 	bl	800627c <_free_r>
 80060da:	2400      	movs	r4, #0
 80060dc:	4620      	mov	r0, r4
 80060de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e2:	f000 f927 	bl	8006334 <_malloc_usable_size_r>
 80060e6:	4285      	cmp	r5, r0
 80060e8:	4606      	mov	r6, r0
 80060ea:	d802      	bhi.n	80060f2 <_realloc_r+0x34>
 80060ec:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060f0:	d8f4      	bhi.n	80060dc <_realloc_r+0x1e>
 80060f2:	4629      	mov	r1, r5
 80060f4:	4640      	mov	r0, r8
 80060f6:	f7ff fae5 	bl	80056c4 <_malloc_r>
 80060fa:	4607      	mov	r7, r0
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d0ec      	beq.n	80060da <_realloc_r+0x1c>
 8006100:	42b5      	cmp	r5, r6
 8006102:	462a      	mov	r2, r5
 8006104:	4621      	mov	r1, r4
 8006106:	bf28      	it	cs
 8006108:	4632      	movcs	r2, r6
 800610a:	f000 f877 	bl	80061fc <memcpy>
 800610e:	4621      	mov	r1, r4
 8006110:	4640      	mov	r0, r8
 8006112:	f000 f8b3 	bl	800627c <_free_r>
 8006116:	463c      	mov	r4, r7
 8006118:	e7e0      	b.n	80060dc <_realloc_r+0x1e>

0800611a <memmove>:
 800611a:	4288      	cmp	r0, r1
 800611c:	b510      	push	{r4, lr}
 800611e:	eb01 0402 	add.w	r4, r1, r2
 8006122:	d902      	bls.n	800612a <memmove+0x10>
 8006124:	4284      	cmp	r4, r0
 8006126:	4623      	mov	r3, r4
 8006128:	d807      	bhi.n	800613a <memmove+0x20>
 800612a:	1e43      	subs	r3, r0, #1
 800612c:	42a1      	cmp	r1, r4
 800612e:	d008      	beq.n	8006142 <memmove+0x28>
 8006130:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006134:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006138:	e7f8      	b.n	800612c <memmove+0x12>
 800613a:	4402      	add	r2, r0
 800613c:	4601      	mov	r1, r0
 800613e:	428a      	cmp	r2, r1
 8006140:	d100      	bne.n	8006144 <memmove+0x2a>
 8006142:	bd10      	pop	{r4, pc}
 8006144:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006148:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800614c:	e7f7      	b.n	800613e <memmove+0x24>
	...

08006150 <_close_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d06      	ldr	r5, [pc, #24]	@ (800616c <_close_r+0x1c>)
 8006154:	2300      	movs	r3, #0
 8006156:	4604      	mov	r4, r0
 8006158:	4608      	mov	r0, r1
 800615a:	602b      	str	r3, [r5, #0]
 800615c:	f7fb fd45 	bl	8001bea <_close>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_close_r+0x1a>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_close_r+0x1a>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	200004d0 	.word	0x200004d0

08006170 <_lseek_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4d07      	ldr	r5, [pc, #28]	@ (8006190 <_lseek_r+0x20>)
 8006174:	4604      	mov	r4, r0
 8006176:	4608      	mov	r0, r1
 8006178:	4611      	mov	r1, r2
 800617a:	2200      	movs	r2, #0
 800617c:	602a      	str	r2, [r5, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	f7fb fd5a 	bl	8001c38 <_lseek>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d102      	bne.n	800618e <_lseek_r+0x1e>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	b103      	cbz	r3, 800618e <_lseek_r+0x1e>
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	200004d0 	.word	0x200004d0

08006194 <_read_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4d07      	ldr	r5, [pc, #28]	@ (80061b4 <_read_r+0x20>)
 8006198:	4604      	mov	r4, r0
 800619a:	4608      	mov	r0, r1
 800619c:	4611      	mov	r1, r2
 800619e:	2200      	movs	r2, #0
 80061a0:	602a      	str	r2, [r5, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	f7fb fce8 	bl	8001b78 <_read>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d102      	bne.n	80061b2 <_read_r+0x1e>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	b103      	cbz	r3, 80061b2 <_read_r+0x1e>
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	200004d0 	.word	0x200004d0

080061b8 <_sbrk_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4d06      	ldr	r5, [pc, #24]	@ (80061d4 <_sbrk_r+0x1c>)
 80061bc:	2300      	movs	r3, #0
 80061be:	4604      	mov	r4, r0
 80061c0:	4608      	mov	r0, r1
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	f7fb fd46 	bl	8001c54 <_sbrk>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_sbrk_r+0x1a>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_sbrk_r+0x1a>
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	200004d0 	.word	0x200004d0

080061d8 <_write_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d07      	ldr	r5, [pc, #28]	@ (80061f8 <_write_r+0x20>)
 80061dc:	4604      	mov	r4, r0
 80061de:	4608      	mov	r0, r1
 80061e0:	4611      	mov	r1, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	602a      	str	r2, [r5, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f7fb fce3 	bl	8001bb2 <_write>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_write_r+0x1e>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_write_r+0x1e>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	200004d0 	.word	0x200004d0

080061fc <memcpy>:
 80061fc:	440a      	add	r2, r1
 80061fe:	4291      	cmp	r1, r2
 8006200:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006204:	d100      	bne.n	8006208 <memcpy+0xc>
 8006206:	4770      	bx	lr
 8006208:	b510      	push	{r4, lr}
 800620a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800620e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006212:	4291      	cmp	r1, r2
 8006214:	d1f9      	bne.n	800620a <memcpy+0xe>
 8006216:	bd10      	pop	{r4, pc}

08006218 <__assert_func>:
 8006218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800621a:	4614      	mov	r4, r2
 800621c:	461a      	mov	r2, r3
 800621e:	4b09      	ldr	r3, [pc, #36]	@ (8006244 <__assert_func+0x2c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4605      	mov	r5, r0
 8006224:	68d8      	ldr	r0, [r3, #12]
 8006226:	b954      	cbnz	r4, 800623e <__assert_func+0x26>
 8006228:	4b07      	ldr	r3, [pc, #28]	@ (8006248 <__assert_func+0x30>)
 800622a:	461c      	mov	r4, r3
 800622c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006230:	9100      	str	r1, [sp, #0]
 8006232:	462b      	mov	r3, r5
 8006234:	4905      	ldr	r1, [pc, #20]	@ (800624c <__assert_func+0x34>)
 8006236:	f000 f885 	bl	8006344 <fiprintf>
 800623a:	f000 f8a2 	bl	8006382 <abort>
 800623e:	4b04      	ldr	r3, [pc, #16]	@ (8006250 <__assert_func+0x38>)
 8006240:	e7f4      	b.n	800622c <__assert_func+0x14>
 8006242:	bf00      	nop
 8006244:	20000018 	.word	0x20000018
 8006248:	08006d2e 	.word	0x08006d2e
 800624c:	08006d00 	.word	0x08006d00
 8006250:	08006cf3 	.word	0x08006cf3

08006254 <_calloc_r>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	fba1 5402 	umull	r5, r4, r1, r2
 800625a:	b93c      	cbnz	r4, 800626c <_calloc_r+0x18>
 800625c:	4629      	mov	r1, r5
 800625e:	f7ff fa31 	bl	80056c4 <_malloc_r>
 8006262:	4606      	mov	r6, r0
 8006264:	b928      	cbnz	r0, 8006272 <_calloc_r+0x1e>
 8006266:	2600      	movs	r6, #0
 8006268:	4630      	mov	r0, r6
 800626a:	bd70      	pop	{r4, r5, r6, pc}
 800626c:	220c      	movs	r2, #12
 800626e:	6002      	str	r2, [r0, #0]
 8006270:	e7f9      	b.n	8006266 <_calloc_r+0x12>
 8006272:	462a      	mov	r2, r5
 8006274:	4621      	mov	r1, r4
 8006276:	f7fe fa1b 	bl	80046b0 <memset>
 800627a:	e7f5      	b.n	8006268 <_calloc_r+0x14>

0800627c <_free_r>:
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	4605      	mov	r5, r0
 8006280:	2900      	cmp	r1, #0
 8006282:	d041      	beq.n	8006308 <_free_r+0x8c>
 8006284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006288:	1f0c      	subs	r4, r1, #4
 800628a:	2b00      	cmp	r3, #0
 800628c:	bfb8      	it	lt
 800628e:	18e4      	addlt	r4, r4, r3
 8006290:	f7ff fb44 	bl	800591c <__malloc_lock>
 8006294:	4a1d      	ldr	r2, [pc, #116]	@ (800630c <_free_r+0x90>)
 8006296:	6813      	ldr	r3, [r2, #0]
 8006298:	b933      	cbnz	r3, 80062a8 <_free_r+0x2c>
 800629a:	6063      	str	r3, [r4, #4]
 800629c:	6014      	str	r4, [r2, #0]
 800629e:	4628      	mov	r0, r5
 80062a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062a4:	f7ff bb40 	b.w	8005928 <__malloc_unlock>
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	d908      	bls.n	80062be <_free_r+0x42>
 80062ac:	6820      	ldr	r0, [r4, #0]
 80062ae:	1821      	adds	r1, r4, r0
 80062b0:	428b      	cmp	r3, r1
 80062b2:	bf01      	itttt	eq
 80062b4:	6819      	ldreq	r1, [r3, #0]
 80062b6:	685b      	ldreq	r3, [r3, #4]
 80062b8:	1809      	addeq	r1, r1, r0
 80062ba:	6021      	streq	r1, [r4, #0]
 80062bc:	e7ed      	b.n	800629a <_free_r+0x1e>
 80062be:	461a      	mov	r2, r3
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	b10b      	cbz	r3, 80062c8 <_free_r+0x4c>
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	d9fa      	bls.n	80062be <_free_r+0x42>
 80062c8:	6811      	ldr	r1, [r2, #0]
 80062ca:	1850      	adds	r0, r2, r1
 80062cc:	42a0      	cmp	r0, r4
 80062ce:	d10b      	bne.n	80062e8 <_free_r+0x6c>
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	4401      	add	r1, r0
 80062d4:	1850      	adds	r0, r2, r1
 80062d6:	4283      	cmp	r3, r0
 80062d8:	6011      	str	r1, [r2, #0]
 80062da:	d1e0      	bne.n	800629e <_free_r+0x22>
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	6053      	str	r3, [r2, #4]
 80062e2:	4408      	add	r0, r1
 80062e4:	6010      	str	r0, [r2, #0]
 80062e6:	e7da      	b.n	800629e <_free_r+0x22>
 80062e8:	d902      	bls.n	80062f0 <_free_r+0x74>
 80062ea:	230c      	movs	r3, #12
 80062ec:	602b      	str	r3, [r5, #0]
 80062ee:	e7d6      	b.n	800629e <_free_r+0x22>
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	1821      	adds	r1, r4, r0
 80062f4:	428b      	cmp	r3, r1
 80062f6:	bf04      	itt	eq
 80062f8:	6819      	ldreq	r1, [r3, #0]
 80062fa:	685b      	ldreq	r3, [r3, #4]
 80062fc:	6063      	str	r3, [r4, #4]
 80062fe:	bf04      	itt	eq
 8006300:	1809      	addeq	r1, r1, r0
 8006302:	6021      	streq	r1, [r4, #0]
 8006304:	6054      	str	r4, [r2, #4]
 8006306:	e7ca      	b.n	800629e <_free_r+0x22>
 8006308:	bd38      	pop	{r3, r4, r5, pc}
 800630a:	bf00      	nop
 800630c:	200004cc 	.word	0x200004cc

08006310 <__ascii_mbtowc>:
 8006310:	b082      	sub	sp, #8
 8006312:	b901      	cbnz	r1, 8006316 <__ascii_mbtowc+0x6>
 8006314:	a901      	add	r1, sp, #4
 8006316:	b142      	cbz	r2, 800632a <__ascii_mbtowc+0x1a>
 8006318:	b14b      	cbz	r3, 800632e <__ascii_mbtowc+0x1e>
 800631a:	7813      	ldrb	r3, [r2, #0]
 800631c:	600b      	str	r3, [r1, #0]
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	1e10      	subs	r0, r2, #0
 8006322:	bf18      	it	ne
 8006324:	2001      	movne	r0, #1
 8006326:	b002      	add	sp, #8
 8006328:	4770      	bx	lr
 800632a:	4610      	mov	r0, r2
 800632c:	e7fb      	b.n	8006326 <__ascii_mbtowc+0x16>
 800632e:	f06f 0001 	mvn.w	r0, #1
 8006332:	e7f8      	b.n	8006326 <__ascii_mbtowc+0x16>

08006334 <_malloc_usable_size_r>:
 8006334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006338:	1f18      	subs	r0, r3, #4
 800633a:	2b00      	cmp	r3, #0
 800633c:	bfbc      	itt	lt
 800633e:	580b      	ldrlt	r3, [r1, r0]
 8006340:	18c0      	addlt	r0, r0, r3
 8006342:	4770      	bx	lr

08006344 <fiprintf>:
 8006344:	b40e      	push	{r1, r2, r3}
 8006346:	b503      	push	{r0, r1, lr}
 8006348:	4601      	mov	r1, r0
 800634a:	ab03      	add	r3, sp, #12
 800634c:	4805      	ldr	r0, [pc, #20]	@ (8006364 <fiprintf+0x20>)
 800634e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006352:	6800      	ldr	r0, [r0, #0]
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	f000 f845 	bl	80063e4 <_vfiprintf_r>
 800635a:	b002      	add	sp, #8
 800635c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006360:	b003      	add	sp, #12
 8006362:	4770      	bx	lr
 8006364:	20000018 	.word	0x20000018

08006368 <__ascii_wctomb>:
 8006368:	4603      	mov	r3, r0
 800636a:	4608      	mov	r0, r1
 800636c:	b141      	cbz	r1, 8006380 <__ascii_wctomb+0x18>
 800636e:	2aff      	cmp	r2, #255	@ 0xff
 8006370:	d904      	bls.n	800637c <__ascii_wctomb+0x14>
 8006372:	228a      	movs	r2, #138	@ 0x8a
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800637a:	4770      	bx	lr
 800637c:	700a      	strb	r2, [r1, #0]
 800637e:	2001      	movs	r0, #1
 8006380:	4770      	bx	lr

08006382 <abort>:
 8006382:	b508      	push	{r3, lr}
 8006384:	2006      	movs	r0, #6
 8006386:	f000 fa85 	bl	8006894 <raise>
 800638a:	2001      	movs	r0, #1
 800638c:	f7fb fbe9 	bl	8001b62 <_exit>

08006390 <__sfputc_r>:
 8006390:	6893      	ldr	r3, [r2, #8]
 8006392:	3b01      	subs	r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	b410      	push	{r4}
 8006398:	6093      	str	r3, [r2, #8]
 800639a:	da08      	bge.n	80063ae <__sfputc_r+0x1e>
 800639c:	6994      	ldr	r4, [r2, #24]
 800639e:	42a3      	cmp	r3, r4
 80063a0:	db01      	blt.n	80063a6 <__sfputc_r+0x16>
 80063a2:	290a      	cmp	r1, #10
 80063a4:	d103      	bne.n	80063ae <__sfputc_r+0x1e>
 80063a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063aa:	f000 b933 	b.w	8006614 <__swbuf_r>
 80063ae:	6813      	ldr	r3, [r2, #0]
 80063b0:	1c58      	adds	r0, r3, #1
 80063b2:	6010      	str	r0, [r2, #0]
 80063b4:	7019      	strb	r1, [r3, #0]
 80063b6:	4608      	mov	r0, r1
 80063b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063bc:	4770      	bx	lr

080063be <__sfputs_r>:
 80063be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c0:	4606      	mov	r6, r0
 80063c2:	460f      	mov	r7, r1
 80063c4:	4614      	mov	r4, r2
 80063c6:	18d5      	adds	r5, r2, r3
 80063c8:	42ac      	cmp	r4, r5
 80063ca:	d101      	bne.n	80063d0 <__sfputs_r+0x12>
 80063cc:	2000      	movs	r0, #0
 80063ce:	e007      	b.n	80063e0 <__sfputs_r+0x22>
 80063d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d4:	463a      	mov	r2, r7
 80063d6:	4630      	mov	r0, r6
 80063d8:	f7ff ffda 	bl	8006390 <__sfputc_r>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d1f3      	bne.n	80063c8 <__sfputs_r+0xa>
 80063e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063e4 <_vfiprintf_r>:
 80063e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e8:	460d      	mov	r5, r1
 80063ea:	b09d      	sub	sp, #116	@ 0x74
 80063ec:	4614      	mov	r4, r2
 80063ee:	4698      	mov	r8, r3
 80063f0:	4606      	mov	r6, r0
 80063f2:	b118      	cbz	r0, 80063fc <_vfiprintf_r+0x18>
 80063f4:	6a03      	ldr	r3, [r0, #32]
 80063f6:	b90b      	cbnz	r3, 80063fc <_vfiprintf_r+0x18>
 80063f8:	f7fe f924 	bl	8004644 <__sinit>
 80063fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063fe:	07d9      	lsls	r1, r3, #31
 8006400:	d405      	bmi.n	800640e <_vfiprintf_r+0x2a>
 8006402:	89ab      	ldrh	r3, [r5, #12]
 8006404:	059a      	lsls	r2, r3, #22
 8006406:	d402      	bmi.n	800640e <_vfiprintf_r+0x2a>
 8006408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800640a:	f7fe f988 	bl	800471e <__retarget_lock_acquire_recursive>
 800640e:	89ab      	ldrh	r3, [r5, #12]
 8006410:	071b      	lsls	r3, r3, #28
 8006412:	d501      	bpl.n	8006418 <_vfiprintf_r+0x34>
 8006414:	692b      	ldr	r3, [r5, #16]
 8006416:	b99b      	cbnz	r3, 8006440 <_vfiprintf_r+0x5c>
 8006418:	4629      	mov	r1, r5
 800641a:	4630      	mov	r0, r6
 800641c:	f000 f938 	bl	8006690 <__swsetup_r>
 8006420:	b170      	cbz	r0, 8006440 <_vfiprintf_r+0x5c>
 8006422:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006424:	07dc      	lsls	r4, r3, #31
 8006426:	d504      	bpl.n	8006432 <_vfiprintf_r+0x4e>
 8006428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800642c:	b01d      	add	sp, #116	@ 0x74
 800642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006432:	89ab      	ldrh	r3, [r5, #12]
 8006434:	0598      	lsls	r0, r3, #22
 8006436:	d4f7      	bmi.n	8006428 <_vfiprintf_r+0x44>
 8006438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800643a:	f7fe f971 	bl	8004720 <__retarget_lock_release_recursive>
 800643e:	e7f3      	b.n	8006428 <_vfiprintf_r+0x44>
 8006440:	2300      	movs	r3, #0
 8006442:	9309      	str	r3, [sp, #36]	@ 0x24
 8006444:	2320      	movs	r3, #32
 8006446:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800644a:	f8cd 800c 	str.w	r8, [sp, #12]
 800644e:	2330      	movs	r3, #48	@ 0x30
 8006450:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006600 <_vfiprintf_r+0x21c>
 8006454:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006458:	f04f 0901 	mov.w	r9, #1
 800645c:	4623      	mov	r3, r4
 800645e:	469a      	mov	sl, r3
 8006460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006464:	b10a      	cbz	r2, 800646a <_vfiprintf_r+0x86>
 8006466:	2a25      	cmp	r2, #37	@ 0x25
 8006468:	d1f9      	bne.n	800645e <_vfiprintf_r+0x7a>
 800646a:	ebba 0b04 	subs.w	fp, sl, r4
 800646e:	d00b      	beq.n	8006488 <_vfiprintf_r+0xa4>
 8006470:	465b      	mov	r3, fp
 8006472:	4622      	mov	r2, r4
 8006474:	4629      	mov	r1, r5
 8006476:	4630      	mov	r0, r6
 8006478:	f7ff ffa1 	bl	80063be <__sfputs_r>
 800647c:	3001      	adds	r0, #1
 800647e:	f000 80a7 	beq.w	80065d0 <_vfiprintf_r+0x1ec>
 8006482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006484:	445a      	add	r2, fp
 8006486:	9209      	str	r2, [sp, #36]	@ 0x24
 8006488:	f89a 3000 	ldrb.w	r3, [sl]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 809f 	beq.w	80065d0 <_vfiprintf_r+0x1ec>
 8006492:	2300      	movs	r3, #0
 8006494:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800649c:	f10a 0a01 	add.w	sl, sl, #1
 80064a0:	9304      	str	r3, [sp, #16]
 80064a2:	9307      	str	r3, [sp, #28]
 80064a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80064aa:	4654      	mov	r4, sl
 80064ac:	2205      	movs	r2, #5
 80064ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b2:	4853      	ldr	r0, [pc, #332]	@ (8006600 <_vfiprintf_r+0x21c>)
 80064b4:	f7f9 feac 	bl	8000210 <memchr>
 80064b8:	9a04      	ldr	r2, [sp, #16]
 80064ba:	b9d8      	cbnz	r0, 80064f4 <_vfiprintf_r+0x110>
 80064bc:	06d1      	lsls	r1, r2, #27
 80064be:	bf44      	itt	mi
 80064c0:	2320      	movmi	r3, #32
 80064c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064c6:	0713      	lsls	r3, r2, #28
 80064c8:	bf44      	itt	mi
 80064ca:	232b      	movmi	r3, #43	@ 0x2b
 80064cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064d0:	f89a 3000 	ldrb.w	r3, [sl]
 80064d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80064d6:	d015      	beq.n	8006504 <_vfiprintf_r+0x120>
 80064d8:	9a07      	ldr	r2, [sp, #28]
 80064da:	4654      	mov	r4, sl
 80064dc:	2000      	movs	r0, #0
 80064de:	f04f 0c0a 	mov.w	ip, #10
 80064e2:	4621      	mov	r1, r4
 80064e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064e8:	3b30      	subs	r3, #48	@ 0x30
 80064ea:	2b09      	cmp	r3, #9
 80064ec:	d94b      	bls.n	8006586 <_vfiprintf_r+0x1a2>
 80064ee:	b1b0      	cbz	r0, 800651e <_vfiprintf_r+0x13a>
 80064f0:	9207      	str	r2, [sp, #28]
 80064f2:	e014      	b.n	800651e <_vfiprintf_r+0x13a>
 80064f4:	eba0 0308 	sub.w	r3, r0, r8
 80064f8:	fa09 f303 	lsl.w	r3, r9, r3
 80064fc:	4313      	orrs	r3, r2
 80064fe:	9304      	str	r3, [sp, #16]
 8006500:	46a2      	mov	sl, r4
 8006502:	e7d2      	b.n	80064aa <_vfiprintf_r+0xc6>
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	1d19      	adds	r1, r3, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	9103      	str	r1, [sp, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	bfbb      	ittet	lt
 8006510:	425b      	neglt	r3, r3
 8006512:	f042 0202 	orrlt.w	r2, r2, #2
 8006516:	9307      	strge	r3, [sp, #28]
 8006518:	9307      	strlt	r3, [sp, #28]
 800651a:	bfb8      	it	lt
 800651c:	9204      	strlt	r2, [sp, #16]
 800651e:	7823      	ldrb	r3, [r4, #0]
 8006520:	2b2e      	cmp	r3, #46	@ 0x2e
 8006522:	d10a      	bne.n	800653a <_vfiprintf_r+0x156>
 8006524:	7863      	ldrb	r3, [r4, #1]
 8006526:	2b2a      	cmp	r3, #42	@ 0x2a
 8006528:	d132      	bne.n	8006590 <_vfiprintf_r+0x1ac>
 800652a:	9b03      	ldr	r3, [sp, #12]
 800652c:	1d1a      	adds	r2, r3, #4
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	9203      	str	r2, [sp, #12]
 8006532:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006536:	3402      	adds	r4, #2
 8006538:	9305      	str	r3, [sp, #20]
 800653a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006610 <_vfiprintf_r+0x22c>
 800653e:	7821      	ldrb	r1, [r4, #0]
 8006540:	2203      	movs	r2, #3
 8006542:	4650      	mov	r0, sl
 8006544:	f7f9 fe64 	bl	8000210 <memchr>
 8006548:	b138      	cbz	r0, 800655a <_vfiprintf_r+0x176>
 800654a:	9b04      	ldr	r3, [sp, #16]
 800654c:	eba0 000a 	sub.w	r0, r0, sl
 8006550:	2240      	movs	r2, #64	@ 0x40
 8006552:	4082      	lsls	r2, r0
 8006554:	4313      	orrs	r3, r2
 8006556:	3401      	adds	r4, #1
 8006558:	9304      	str	r3, [sp, #16]
 800655a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800655e:	4829      	ldr	r0, [pc, #164]	@ (8006604 <_vfiprintf_r+0x220>)
 8006560:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006564:	2206      	movs	r2, #6
 8006566:	f7f9 fe53 	bl	8000210 <memchr>
 800656a:	2800      	cmp	r0, #0
 800656c:	d03f      	beq.n	80065ee <_vfiprintf_r+0x20a>
 800656e:	4b26      	ldr	r3, [pc, #152]	@ (8006608 <_vfiprintf_r+0x224>)
 8006570:	bb1b      	cbnz	r3, 80065ba <_vfiprintf_r+0x1d6>
 8006572:	9b03      	ldr	r3, [sp, #12]
 8006574:	3307      	adds	r3, #7
 8006576:	f023 0307 	bic.w	r3, r3, #7
 800657a:	3308      	adds	r3, #8
 800657c:	9303      	str	r3, [sp, #12]
 800657e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006580:	443b      	add	r3, r7
 8006582:	9309      	str	r3, [sp, #36]	@ 0x24
 8006584:	e76a      	b.n	800645c <_vfiprintf_r+0x78>
 8006586:	fb0c 3202 	mla	r2, ip, r2, r3
 800658a:	460c      	mov	r4, r1
 800658c:	2001      	movs	r0, #1
 800658e:	e7a8      	b.n	80064e2 <_vfiprintf_r+0xfe>
 8006590:	2300      	movs	r3, #0
 8006592:	3401      	adds	r4, #1
 8006594:	9305      	str	r3, [sp, #20]
 8006596:	4619      	mov	r1, r3
 8006598:	f04f 0c0a 	mov.w	ip, #10
 800659c:	4620      	mov	r0, r4
 800659e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065a2:	3a30      	subs	r2, #48	@ 0x30
 80065a4:	2a09      	cmp	r2, #9
 80065a6:	d903      	bls.n	80065b0 <_vfiprintf_r+0x1cc>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0c6      	beq.n	800653a <_vfiprintf_r+0x156>
 80065ac:	9105      	str	r1, [sp, #20]
 80065ae:	e7c4      	b.n	800653a <_vfiprintf_r+0x156>
 80065b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80065b4:	4604      	mov	r4, r0
 80065b6:	2301      	movs	r3, #1
 80065b8:	e7f0      	b.n	800659c <_vfiprintf_r+0x1b8>
 80065ba:	ab03      	add	r3, sp, #12
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	462a      	mov	r2, r5
 80065c0:	4b12      	ldr	r3, [pc, #72]	@ (800660c <_vfiprintf_r+0x228>)
 80065c2:	a904      	add	r1, sp, #16
 80065c4:	4630      	mov	r0, r6
 80065c6:	f7fd fbd9 	bl	8003d7c <_printf_float>
 80065ca:	4607      	mov	r7, r0
 80065cc:	1c78      	adds	r0, r7, #1
 80065ce:	d1d6      	bne.n	800657e <_vfiprintf_r+0x19a>
 80065d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065d2:	07d9      	lsls	r1, r3, #31
 80065d4:	d405      	bmi.n	80065e2 <_vfiprintf_r+0x1fe>
 80065d6:	89ab      	ldrh	r3, [r5, #12]
 80065d8:	059a      	lsls	r2, r3, #22
 80065da:	d402      	bmi.n	80065e2 <_vfiprintf_r+0x1fe>
 80065dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065de:	f7fe f89f 	bl	8004720 <__retarget_lock_release_recursive>
 80065e2:	89ab      	ldrh	r3, [r5, #12]
 80065e4:	065b      	lsls	r3, r3, #25
 80065e6:	f53f af1f 	bmi.w	8006428 <_vfiprintf_r+0x44>
 80065ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065ec:	e71e      	b.n	800642c <_vfiprintf_r+0x48>
 80065ee:	ab03      	add	r3, sp, #12
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	462a      	mov	r2, r5
 80065f4:	4b05      	ldr	r3, [pc, #20]	@ (800660c <_vfiprintf_r+0x228>)
 80065f6:	a904      	add	r1, sp, #16
 80065f8:	4630      	mov	r0, r6
 80065fa:	f7fd fe57 	bl	80042ac <_printf_i>
 80065fe:	e7e4      	b.n	80065ca <_vfiprintf_r+0x1e6>
 8006600:	08006a81 	.word	0x08006a81
 8006604:	08006a8b 	.word	0x08006a8b
 8006608:	08003d7d 	.word	0x08003d7d
 800660c:	080063bf 	.word	0x080063bf
 8006610:	08006a87 	.word	0x08006a87

08006614 <__swbuf_r>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	460e      	mov	r6, r1
 8006618:	4614      	mov	r4, r2
 800661a:	4605      	mov	r5, r0
 800661c:	b118      	cbz	r0, 8006626 <__swbuf_r+0x12>
 800661e:	6a03      	ldr	r3, [r0, #32]
 8006620:	b90b      	cbnz	r3, 8006626 <__swbuf_r+0x12>
 8006622:	f7fe f80f 	bl	8004644 <__sinit>
 8006626:	69a3      	ldr	r3, [r4, #24]
 8006628:	60a3      	str	r3, [r4, #8]
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	071a      	lsls	r2, r3, #28
 800662e:	d501      	bpl.n	8006634 <__swbuf_r+0x20>
 8006630:	6923      	ldr	r3, [r4, #16]
 8006632:	b943      	cbnz	r3, 8006646 <__swbuf_r+0x32>
 8006634:	4621      	mov	r1, r4
 8006636:	4628      	mov	r0, r5
 8006638:	f000 f82a 	bl	8006690 <__swsetup_r>
 800663c:	b118      	cbz	r0, 8006646 <__swbuf_r+0x32>
 800663e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006642:	4638      	mov	r0, r7
 8006644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	6922      	ldr	r2, [r4, #16]
 800664a:	1a98      	subs	r0, r3, r2
 800664c:	6963      	ldr	r3, [r4, #20]
 800664e:	b2f6      	uxtb	r6, r6
 8006650:	4283      	cmp	r3, r0
 8006652:	4637      	mov	r7, r6
 8006654:	dc05      	bgt.n	8006662 <__swbuf_r+0x4e>
 8006656:	4621      	mov	r1, r4
 8006658:	4628      	mov	r0, r5
 800665a:	f7ff f937 	bl	80058cc <_fflush_r>
 800665e:	2800      	cmp	r0, #0
 8006660:	d1ed      	bne.n	800663e <__swbuf_r+0x2a>
 8006662:	68a3      	ldr	r3, [r4, #8]
 8006664:	3b01      	subs	r3, #1
 8006666:	60a3      	str	r3, [r4, #8]
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	6022      	str	r2, [r4, #0]
 800666e:	701e      	strb	r6, [r3, #0]
 8006670:	6962      	ldr	r2, [r4, #20]
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	429a      	cmp	r2, r3
 8006676:	d004      	beq.n	8006682 <__swbuf_r+0x6e>
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	07db      	lsls	r3, r3, #31
 800667c:	d5e1      	bpl.n	8006642 <__swbuf_r+0x2e>
 800667e:	2e0a      	cmp	r6, #10
 8006680:	d1df      	bne.n	8006642 <__swbuf_r+0x2e>
 8006682:	4621      	mov	r1, r4
 8006684:	4628      	mov	r0, r5
 8006686:	f7ff f921 	bl	80058cc <_fflush_r>
 800668a:	2800      	cmp	r0, #0
 800668c:	d0d9      	beq.n	8006642 <__swbuf_r+0x2e>
 800668e:	e7d6      	b.n	800663e <__swbuf_r+0x2a>

08006690 <__swsetup_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4b29      	ldr	r3, [pc, #164]	@ (8006738 <__swsetup_r+0xa8>)
 8006694:	4605      	mov	r5, r0
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	460c      	mov	r4, r1
 800669a:	b118      	cbz	r0, 80066a4 <__swsetup_r+0x14>
 800669c:	6a03      	ldr	r3, [r0, #32]
 800669e:	b90b      	cbnz	r3, 80066a4 <__swsetup_r+0x14>
 80066a0:	f7fd ffd0 	bl	8004644 <__sinit>
 80066a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a8:	0719      	lsls	r1, r3, #28
 80066aa:	d422      	bmi.n	80066f2 <__swsetup_r+0x62>
 80066ac:	06da      	lsls	r2, r3, #27
 80066ae:	d407      	bmi.n	80066c0 <__swsetup_r+0x30>
 80066b0:	2209      	movs	r2, #9
 80066b2:	602a      	str	r2, [r5, #0]
 80066b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066b8:	81a3      	strh	r3, [r4, #12]
 80066ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066be:	e033      	b.n	8006728 <__swsetup_r+0x98>
 80066c0:	0758      	lsls	r0, r3, #29
 80066c2:	d512      	bpl.n	80066ea <__swsetup_r+0x5a>
 80066c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066c6:	b141      	cbz	r1, 80066da <__swsetup_r+0x4a>
 80066c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066cc:	4299      	cmp	r1, r3
 80066ce:	d002      	beq.n	80066d6 <__swsetup_r+0x46>
 80066d0:	4628      	mov	r0, r5
 80066d2:	f7ff fdd3 	bl	800627c <_free_r>
 80066d6:	2300      	movs	r3, #0
 80066d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066e0:	81a3      	strh	r3, [r4, #12]
 80066e2:	2300      	movs	r3, #0
 80066e4:	6063      	str	r3, [r4, #4]
 80066e6:	6923      	ldr	r3, [r4, #16]
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f043 0308 	orr.w	r3, r3, #8
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	6923      	ldr	r3, [r4, #16]
 80066f4:	b94b      	cbnz	r3, 800670a <__swsetup_r+0x7a>
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80066fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006700:	d003      	beq.n	800670a <__swsetup_r+0x7a>
 8006702:	4621      	mov	r1, r4
 8006704:	4628      	mov	r0, r5
 8006706:	f000 f83f 	bl	8006788 <__smakebuf_r>
 800670a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800670e:	f013 0201 	ands.w	r2, r3, #1
 8006712:	d00a      	beq.n	800672a <__swsetup_r+0x9a>
 8006714:	2200      	movs	r2, #0
 8006716:	60a2      	str	r2, [r4, #8]
 8006718:	6962      	ldr	r2, [r4, #20]
 800671a:	4252      	negs	r2, r2
 800671c:	61a2      	str	r2, [r4, #24]
 800671e:	6922      	ldr	r2, [r4, #16]
 8006720:	b942      	cbnz	r2, 8006734 <__swsetup_r+0xa4>
 8006722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006726:	d1c5      	bne.n	80066b4 <__swsetup_r+0x24>
 8006728:	bd38      	pop	{r3, r4, r5, pc}
 800672a:	0799      	lsls	r1, r3, #30
 800672c:	bf58      	it	pl
 800672e:	6962      	ldrpl	r2, [r4, #20]
 8006730:	60a2      	str	r2, [r4, #8]
 8006732:	e7f4      	b.n	800671e <__swsetup_r+0x8e>
 8006734:	2000      	movs	r0, #0
 8006736:	e7f7      	b.n	8006728 <__swsetup_r+0x98>
 8006738:	20000018 	.word	0x20000018

0800673c <__swhatbuf_r>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	460c      	mov	r4, r1
 8006740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006744:	2900      	cmp	r1, #0
 8006746:	b096      	sub	sp, #88	@ 0x58
 8006748:	4615      	mov	r5, r2
 800674a:	461e      	mov	r6, r3
 800674c:	da0d      	bge.n	800676a <__swhatbuf_r+0x2e>
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006754:	f04f 0100 	mov.w	r1, #0
 8006758:	bf14      	ite	ne
 800675a:	2340      	movne	r3, #64	@ 0x40
 800675c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006760:	2000      	movs	r0, #0
 8006762:	6031      	str	r1, [r6, #0]
 8006764:	602b      	str	r3, [r5, #0]
 8006766:	b016      	add	sp, #88	@ 0x58
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	466a      	mov	r2, sp
 800676c:	f000 f848 	bl	8006800 <_fstat_r>
 8006770:	2800      	cmp	r0, #0
 8006772:	dbec      	blt.n	800674e <__swhatbuf_r+0x12>
 8006774:	9901      	ldr	r1, [sp, #4]
 8006776:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800677a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800677e:	4259      	negs	r1, r3
 8006780:	4159      	adcs	r1, r3
 8006782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006786:	e7eb      	b.n	8006760 <__swhatbuf_r+0x24>

08006788 <__smakebuf_r>:
 8006788:	898b      	ldrh	r3, [r1, #12]
 800678a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800678c:	079d      	lsls	r5, r3, #30
 800678e:	4606      	mov	r6, r0
 8006790:	460c      	mov	r4, r1
 8006792:	d507      	bpl.n	80067a4 <__smakebuf_r+0x1c>
 8006794:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	6123      	str	r3, [r4, #16]
 800679c:	2301      	movs	r3, #1
 800679e:	6163      	str	r3, [r4, #20]
 80067a0:	b003      	add	sp, #12
 80067a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a4:	ab01      	add	r3, sp, #4
 80067a6:	466a      	mov	r2, sp
 80067a8:	f7ff ffc8 	bl	800673c <__swhatbuf_r>
 80067ac:	9f00      	ldr	r7, [sp, #0]
 80067ae:	4605      	mov	r5, r0
 80067b0:	4639      	mov	r1, r7
 80067b2:	4630      	mov	r0, r6
 80067b4:	f7fe ff86 	bl	80056c4 <_malloc_r>
 80067b8:	b948      	cbnz	r0, 80067ce <__smakebuf_r+0x46>
 80067ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067be:	059a      	lsls	r2, r3, #22
 80067c0:	d4ee      	bmi.n	80067a0 <__smakebuf_r+0x18>
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	f043 0302 	orr.w	r3, r3, #2
 80067ca:	81a3      	strh	r3, [r4, #12]
 80067cc:	e7e2      	b.n	8006794 <__smakebuf_r+0xc>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	6020      	str	r0, [r4, #0]
 80067d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067d6:	81a3      	strh	r3, [r4, #12]
 80067d8:	9b01      	ldr	r3, [sp, #4]
 80067da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067de:	b15b      	cbz	r3, 80067f8 <__smakebuf_r+0x70>
 80067e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067e4:	4630      	mov	r0, r6
 80067e6:	f000 f81d 	bl	8006824 <_isatty_r>
 80067ea:	b128      	cbz	r0, 80067f8 <__smakebuf_r+0x70>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	f023 0303 	bic.w	r3, r3, #3
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	431d      	orrs	r5, r3
 80067fc:	81a5      	strh	r5, [r4, #12]
 80067fe:	e7cf      	b.n	80067a0 <__smakebuf_r+0x18>

08006800 <_fstat_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4d07      	ldr	r5, [pc, #28]	@ (8006820 <_fstat_r+0x20>)
 8006804:	2300      	movs	r3, #0
 8006806:	4604      	mov	r4, r0
 8006808:	4608      	mov	r0, r1
 800680a:	4611      	mov	r1, r2
 800680c:	602b      	str	r3, [r5, #0]
 800680e:	f7fb f9f8 	bl	8001c02 <_fstat>
 8006812:	1c43      	adds	r3, r0, #1
 8006814:	d102      	bne.n	800681c <_fstat_r+0x1c>
 8006816:	682b      	ldr	r3, [r5, #0]
 8006818:	b103      	cbz	r3, 800681c <_fstat_r+0x1c>
 800681a:	6023      	str	r3, [r4, #0]
 800681c:	bd38      	pop	{r3, r4, r5, pc}
 800681e:	bf00      	nop
 8006820:	200004d0 	.word	0x200004d0

08006824 <_isatty_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4d06      	ldr	r5, [pc, #24]	@ (8006840 <_isatty_r+0x1c>)
 8006828:	2300      	movs	r3, #0
 800682a:	4604      	mov	r4, r0
 800682c:	4608      	mov	r0, r1
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	f7fb f9f7 	bl	8001c22 <_isatty>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_isatty_r+0x1a>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_isatty_r+0x1a>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	200004d0 	.word	0x200004d0

08006844 <_raise_r>:
 8006844:	291f      	cmp	r1, #31
 8006846:	b538      	push	{r3, r4, r5, lr}
 8006848:	4605      	mov	r5, r0
 800684a:	460c      	mov	r4, r1
 800684c:	d904      	bls.n	8006858 <_raise_r+0x14>
 800684e:	2316      	movs	r3, #22
 8006850:	6003      	str	r3, [r0, #0]
 8006852:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006856:	bd38      	pop	{r3, r4, r5, pc}
 8006858:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800685a:	b112      	cbz	r2, 8006862 <_raise_r+0x1e>
 800685c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006860:	b94b      	cbnz	r3, 8006876 <_raise_r+0x32>
 8006862:	4628      	mov	r0, r5
 8006864:	f000 f830 	bl	80068c8 <_getpid_r>
 8006868:	4622      	mov	r2, r4
 800686a:	4601      	mov	r1, r0
 800686c:	4628      	mov	r0, r5
 800686e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006872:	f000 b817 	b.w	80068a4 <_kill_r>
 8006876:	2b01      	cmp	r3, #1
 8006878:	d00a      	beq.n	8006890 <_raise_r+0x4c>
 800687a:	1c59      	adds	r1, r3, #1
 800687c:	d103      	bne.n	8006886 <_raise_r+0x42>
 800687e:	2316      	movs	r3, #22
 8006880:	6003      	str	r3, [r0, #0]
 8006882:	2001      	movs	r0, #1
 8006884:	e7e7      	b.n	8006856 <_raise_r+0x12>
 8006886:	2100      	movs	r1, #0
 8006888:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800688c:	4620      	mov	r0, r4
 800688e:	4798      	blx	r3
 8006890:	2000      	movs	r0, #0
 8006892:	e7e0      	b.n	8006856 <_raise_r+0x12>

08006894 <raise>:
 8006894:	4b02      	ldr	r3, [pc, #8]	@ (80068a0 <raise+0xc>)
 8006896:	4601      	mov	r1, r0
 8006898:	6818      	ldr	r0, [r3, #0]
 800689a:	f7ff bfd3 	b.w	8006844 <_raise_r>
 800689e:	bf00      	nop
 80068a0:	20000018 	.word	0x20000018

080068a4 <_kill_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4d07      	ldr	r5, [pc, #28]	@ (80068c4 <_kill_r+0x20>)
 80068a8:	2300      	movs	r3, #0
 80068aa:	4604      	mov	r4, r0
 80068ac:	4608      	mov	r0, r1
 80068ae:	4611      	mov	r1, r2
 80068b0:	602b      	str	r3, [r5, #0]
 80068b2:	f7fb f946 	bl	8001b42 <_kill>
 80068b6:	1c43      	adds	r3, r0, #1
 80068b8:	d102      	bne.n	80068c0 <_kill_r+0x1c>
 80068ba:	682b      	ldr	r3, [r5, #0]
 80068bc:	b103      	cbz	r3, 80068c0 <_kill_r+0x1c>
 80068be:	6023      	str	r3, [r4, #0]
 80068c0:	bd38      	pop	{r3, r4, r5, pc}
 80068c2:	bf00      	nop
 80068c4:	200004d0 	.word	0x200004d0

080068c8 <_getpid_r>:
 80068c8:	f7fb b933 	b.w	8001b32 <_getpid>

080068cc <_init>:
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	bf00      	nop
 80068d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d2:	bc08      	pop	{r3}
 80068d4:	469e      	mov	lr, r3
 80068d6:	4770      	bx	lr

080068d8 <_fini>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr
