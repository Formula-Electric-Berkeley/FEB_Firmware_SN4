
DART_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080050a8  080050a8  000060a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e0  080050e0  00007048  2**0
                  CONTENTS
  4 .ARM          00000000  080050e0  080050e0  00007048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e0  080050e0  00007048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e0  080050e0  000060e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050e4  080050e4  000060e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080050e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000048  08005130  00007048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005130  000072b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001078a  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002724  00000000  00000000  000177fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00019f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b39  00000000  00000000  0001ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189fc  00000000  00000000  0001b8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120b6  00000000  00000000  000342ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095c5d  00000000  00000000  00046363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbfc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003318  00000000  00000000  000dc004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000df31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000048 	.word	0x20000048
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005090 	.word	0x08005090

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000004c 	.word	0x2000004c
 8000104:	08005090 	.word	0x08005090

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <FEB_CAN_Init>:

uint32_t FEB_CAN_Tx_Mailbox;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	FEB_CAN_Filter_Config();
 8000224:	f000 f812 	bl	800024c <FEB_CAN_Filter_Config>

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000228:	4b07      	ldr	r3, [pc, #28]	@ (8000248 <FEB_CAN_Init+0x28>)
 800022a:	0018      	movs	r0, r3
 800022c:	f001 fb32 	bl	8001894 <HAL_CAN_Start>
 8000230:	1e03      	subs	r3, r0, #0
 8000232:	d001      	beq.n	8000238 <FEB_CAN_Init+0x18>
		Error_Handler();
 8000234:	f000 fdd6 	bl	8000de4 <Error_Handler>
	}

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000238:	4b03      	ldr	r3, [pc, #12]	@ (8000248 <FEB_CAN_Init+0x28>)
 800023a:	2102      	movs	r1, #2
 800023c:	0018      	movs	r0, r3
 800023e:	f001 fc79 	bl	8001b34 <HAL_CAN_ActivateNotification>
}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200000e0 	.word	0x200000e0

0800024c <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8000252:	1dfb      	adds	r3, r7, #7
 8000254:	2200      	movs	r2, #0
 8000256:	701a      	strb	r2, [r3, #0]

	filter_bank = FEB_CAN_BMS_Filter(&hcan, CAN_RX_FIFO0, filter_bank);
 8000258:	1dfc      	adds	r4, r7, #7
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	781a      	ldrb	r2, [r3, #0]
 800025e:	4b05      	ldr	r3, [pc, #20]	@ (8000274 <FEB_CAN_Filter_Config+0x28>)
 8000260:	2100      	movs	r1, #0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f85a 	bl	800031c <FEB_CAN_BMS_Filter>
 8000268:	0003      	movs	r3, r0
 800026a:	7023      	strb	r3, [r4, #0]
}
 800026c:	46c0      	nop			@ (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	b003      	add	sp, #12
 8000272:	bd90      	pop	{r4, r7, pc}
 8000274:	200000e0 	.word	0x200000e0

08000278 <FEB_CAN_Transmit>:

		FEB_CAN_BMS_Process_Message(&FEB_CAN_Rx_Header, FEB_CAN_Rx_Data);
	}
}

void FEB_CAN_Transmit(CAN_HandleTypeDef *hcan, uint8_t *can_data) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]

	// Initialize Transmission Header
	FEB_CAN_Tx_Header.StdId = FEB_CAN_FEB_DART_TACH_MEASUREMENTS_1234_FRAME_ID;
 8000282:	4b23      	ldr	r3, [pc, #140]	@ (8000310 <FEB_CAN_Transmit+0x98>)
 8000284:	220f      	movs	r2, #15
 8000286:	601a      	str	r2, [r3, #0]
	FEB_CAN_Tx_Header.IDE = FEB_CAN_FEB_DART_TACH_MEASUREMENTS_1234_IS_EXTENDED;
 8000288:	4b21      	ldr	r3, [pc, #132]	@ (8000310 <FEB_CAN_Transmit+0x98>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 800028e:	4b20      	ldr	r3, [pc, #128]	@ (8000310 <FEB_CAN_Transmit+0x98>)
 8000290:	2200      	movs	r2, #0
 8000292:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.DLC = FEB_CAN_FEB_DART_TACH_MEASUREMENTS_1234_LENGTH;
 8000294:	4b1e      	ldr	r3, [pc, #120]	@ (8000310 <FEB_CAN_Transmit+0x98>)
 8000296:	2208      	movs	r2, #8
 8000298:	611a      	str	r2, [r3, #16]

	// Configure FEB_CAN_Tx_Data
    memcpy(FEB_CAN_Tx_Data, can_data, FEB_CAN_FEB_DART_TACH_MEASUREMENTS_1234_LENGTH);
 800029a:	4a1e      	ldr	r2, [pc, #120]	@ (8000314 <FEB_CAN_Transmit+0x9c>)
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	0010      	movs	r0, r2
 80002a0:	0019      	movs	r1, r3
 80002a2:	2308      	movs	r3, #8
 80002a4:	001a      	movs	r2, r3
 80002a6:	f004 fee9 	bl	800507c <memcpy>

    // Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 80002aa:	46c0      	nop			@ (mov r8, r8)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	0018      	movs	r0, r3
 80002b0:	f001 fc08 	bl	8001ac4 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002b4:	1e03      	subs	r3, r0, #0
 80002b6:	d0f9      	beq.n	80002ac <FEB_CAN_Transmit+0x34>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 80002b8:	4b17      	ldr	r3, [pc, #92]	@ (8000318 <FEB_CAN_Transmit+0xa0>)
 80002ba:	4a16      	ldr	r2, [pc, #88]	@ (8000314 <FEB_CAN_Transmit+0x9c>)
 80002bc:	4914      	ldr	r1, [pc, #80]	@ (8000310 <FEB_CAN_Transmit+0x98>)
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f001 fb2e 	bl	8001920 <HAL_CAN_AddTxMessage>
		// Code Error - Shutdown
	}

	// Initialize Transmission Header
	FEB_CAN_Tx_Header.StdId = FEB_CAN_FEB_DART_TACH_MEASUREMENTS_5_FRAME_ID;
 80002c4:	4b12      	ldr	r3, [pc, #72]	@ (8000310 <FEB_CAN_Transmit+0x98>)
 80002c6:	2210      	movs	r2, #16
 80002c8:	601a      	str	r2, [r3, #0]
	FEB_CAN_Tx_Header.IDE = FEB_CAN_FEB_DART_TACH_MEASUREMENTS_5_IS_EXTENDED;
 80002ca:	4b11      	ldr	r3, [pc, #68]	@ (8000310 <FEB_CAN_Transmit+0x98>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
	FEB_CAN_Tx_Header.RTR = CAN_RTR_DATA;
 80002d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000310 <FEB_CAN_Transmit+0x98>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	60da      	str	r2, [r3, #12]
	FEB_CAN_Tx_Header.DLC = FEB_CAN_FEB_DART_TACH_MEASUREMENTS_5_LENGTH;
 80002d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <FEB_CAN_Transmit+0x98>)
 80002d8:	2202      	movs	r2, #2
 80002da:	611a      	str	r2, [r3, #16]

	// Configure FEB_CAN_Tx_Data
    memcpy(FEB_CAN_Tx_Data, can_data + FEB_CAN_FEB_DART_TACH_MEASUREMENTS_1234_LENGTH, FEB_CAN_FEB_DART_TACH_MEASUREMENTS_5_LENGTH);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	3308      	adds	r3, #8
 80002e0:	0019      	movs	r1, r3
 80002e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <FEB_CAN_Transmit+0x9c>)
 80002e4:	2202      	movs	r2, #2
 80002e6:	0018      	movs	r0, r3
 80002e8:	f004 fec8 	bl	800507c <memcpy>

    // Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 80002ec:	46c0      	nop			@ (mov r8, r8)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 fbe7 	bl	8001ac4 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d0f9      	beq.n	80002ee <FEB_CAN_Transmit+0x76>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &FEB_CAN_Tx_Header, FEB_CAN_Tx_Data, &FEB_CAN_Tx_Mailbox) != HAL_OK) {
 80002fa:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <FEB_CAN_Transmit+0xa0>)
 80002fc:	4a05      	ldr	r2, [pc, #20]	@ (8000314 <FEB_CAN_Transmit+0x9c>)
 80002fe:	4904      	ldr	r1, [pc, #16]	@ (8000310 <FEB_CAN_Transmit+0x98>)
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f001 fb0d 	bl	8001920 <HAL_CAN_AddTxMessage>
		// Code Error - Shutdown
	}
}
 8000306:	46c0      	nop			@ (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	b002      	add	sp, #8
 800030c:	bd80      	pop	{r7, pc}
 800030e:	46c0      	nop			@ (mov r8, r8)
 8000310:	20000064 	.word	0x20000064
 8000314:	2000007c 	.word	0x2000007c
 8000318:	20000084 	.word	0x20000084

0800031c <FEB_CAN_BMS_Filter>:
extern uint8_t FEB_CAN_Tx_Data[8];
extern uint32_t FEB_CAN_Tx_Mailbox;
extern UART_HandleTypeDef huart2;


uint8_t FEB_CAN_BMS_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b08c      	sub	sp, #48	@ 0x30
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	0008      	movs	r0, r1
 8000326:	0011      	movs	r1, r2
 8000328:	1cfb      	adds	r3, r7, #3
 800032a:	1c02      	adds	r2, r0, #0
 800032c:	701a      	strb	r2, [r3, #0]
 800032e:	1cbb      	adds	r3, r7, #2
 8000330:	1c0a      	adds	r2, r1, #0
 8000332:	701a      	strb	r2, [r3, #0]
	CAN_FilterTypeDef filter_config;

	// Standard CAN - 2.0A - 11 bit
	filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000334:	2108      	movs	r1, #8
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2201      	movs	r2, #1
 800033a:	621a      	str	r2, [r3, #32]
	filter_config.FilterBank = filter_bank;
 800033c:	1cbb      	adds	r3, r7, #2
 800033e:	781a      	ldrb	r2, [r3, #0]
 8000340:	187b      	adds	r3, r7, r1
 8000342:	615a      	str	r2, [r3, #20]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 8000344:	1cfb      	adds	r3, r7, #3
 8000346:	781a      	ldrb	r2, [r3, #0]
 8000348:	187b      	adds	r3, r7, r1
 800034a:	611a      	str	r2, [r3, #16]
	filter_config.FilterIdHigh = FEB_CAN_ID_BMS_DART1_REQUESTED_FAN_SPEEDS << 5;
 800034c:	187b      	adds	r3, r7, r1
 800034e:	22a0      	movs	r2, #160	@ 0xa0
 8000350:	601a      	str	r2, [r3, #0]
	filter_config.FilterIdLow = 0;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2200      	movs	r2, #0
 8000356:	605a      	str	r2, [r3, #4]
	filter_config.FilterMaskIdHigh = 0xFFE0;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	4a0f      	ldr	r2, [pc, #60]	@ (8000398 <FEB_CAN_BMS_Filter+0x7c>)
 800035c:	609a      	str	r2, [r3, #8]
	filter_config.FilterMaskIdLow = 0;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	619a      	str	r2, [r3, #24]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2201      	movs	r2, #1
 800036e:	61da      	str	r2, [r3, #28]
	filter_config.SlaveStartFilterBank = 27;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	221b      	movs	r2, #27
 8000374:	625a      	str	r2, [r3, #36]	@ 0x24


	if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 8000376:	187a      	adds	r2, r7, r1
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	0011      	movs	r1, r2
 800037c:	0018      	movs	r0, r3
 800037e:	f001 f997 	bl	80016b0 <HAL_CAN_ConfigFilter>
		// Code Error - Shutdown
	}

	return ++filter_bank;
 8000382:	1cbb      	adds	r3, r7, #2
 8000384:	1cba      	adds	r2, r7, #2
 8000386:	7812      	ldrb	r2, [r2, #0]
 8000388:	3201      	adds	r2, #1
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	1cbb      	adds	r3, r7, #2
 800038e:	781b      	ldrb	r3, [r3, #0]
}
 8000390:	0018      	movs	r0, r3
 8000392:	46bd      	mov	sp, r7
 8000394:	b00c      	add	sp, #48	@ 0x30
 8000396:	bd80      	pop	{r7, pc}
 8000398:	0000ffe0 	.word	0x0000ffe0

0800039c <FEB_Fan_Init>:
static void FEB_TACH_IIR(uint16_t *data_in, uint16_t *data_out, uint32_t *filters, \
											uint8_t length, bool *filter_initialized);

// ********************************** Initialize **********************************

void FEB_Fan_Init(void) {
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	FEB_Fan_PWM_Init();
 80003a0:	f000 f808 	bl	80003b4 <FEB_Fan_PWM_Init>
	FEB_Fan_All_Speed_Set(40 * 1); // starts at 100% duty cycle
 80003a4:	2028      	movs	r0, #40	@ 0x28
 80003a6:	f000 f825 	bl	80003f4 <FEB_Fan_All_Speed_Set>
	FEB_Fan_TACH_Init();
 80003aa:	f000 f871 	bl	8000490 <FEB_Fan_TACH_Init>
}
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <FEB_Fan_PWM_Init>:
	__HAL_TIM_SET_COMPARE(timer[4], tim_channels[4], FEB_CAN_Rx_Data[4]);
}

// ********************************** PWM **********************************

void FEB_Fan_PWM_Init(void) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	e00d      	b.n	80003dc <FEB_Fan_PWM_Init+0x28>
		HAL_TIM_PWM_Start(timer[i], tim_channels[i]);
 80003c0:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <FEB_Fan_PWM_Init+0x38>)
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	0092      	lsls	r2, r2, #2
 80003c6:	58d0      	ldr	r0, [r2, r3]
 80003c8:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <FEB_Fan_PWM_Init+0x3c>)
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	0092      	lsls	r2, r2, #2
 80003ce:	58d3      	ldr	r3, [r2, r3]
 80003d0:	0019      	movs	r1, r3
 80003d2:	f002 fc77 	bl	8002cc4 <HAL_TIM_PWM_Start>
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3301      	adds	r3, #1
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b04      	cmp	r3, #4
 80003e0:	d9ee      	bls.n	80003c0 <FEB_Fan_PWM_Init+0xc>
	}
}
 80003e2:	46c0      	nop			@ (mov r8, r8)
 80003e4:	46c0      	nop			@ (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b002      	add	sp, #8
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000028 	.word	0x20000028

080003f4 <FEB_Fan_All_Speed_Set>:

void FEB_Fan_All_Speed_Set(uint8_t speed) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	e037      	b.n	8000476 <FEB_Fan_All_Speed_Set+0x82>
		__HAL_TIM_SET_COMPARE(timer[i], tim_channels[i], speed);
 8000406:	4b20      	ldr	r3, [pc, #128]	@ (8000488 <FEB_Fan_All_Speed_Set+0x94>)
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	58d3      	ldr	r3, [r2, r3]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d108      	bne.n	8000424 <FEB_Fan_All_Speed_Set+0x30>
 8000412:	4b1e      	ldr	r3, [pc, #120]	@ (800048c <FEB_Fan_All_Speed_Set+0x98>)
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	0092      	lsls	r2, r2, #2
 8000418:	58d3      	ldr	r3, [r2, r3]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	1dfa      	adds	r2, r7, #7
 800041e:	7812      	ldrb	r2, [r2, #0]
 8000420:	635a      	str	r2, [r3, #52]	@ 0x34
 8000422:	e025      	b.n	8000470 <FEB_Fan_All_Speed_Set+0x7c>
 8000424:	4b18      	ldr	r3, [pc, #96]	@ (8000488 <FEB_Fan_All_Speed_Set+0x94>)
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	0092      	lsls	r2, r2, #2
 800042a:	58d3      	ldr	r3, [r2, r3]
 800042c:	2b04      	cmp	r3, #4
 800042e:	d108      	bne.n	8000442 <FEB_Fan_All_Speed_Set+0x4e>
 8000430:	4b16      	ldr	r3, [pc, #88]	@ (800048c <FEB_Fan_All_Speed_Set+0x98>)
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	0092      	lsls	r2, r2, #2
 8000436:	58d3      	ldr	r3, [r2, r3]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	1dfb      	adds	r3, r7, #7
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000440:	e016      	b.n	8000470 <FEB_Fan_All_Speed_Set+0x7c>
 8000442:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <FEB_Fan_All_Speed_Set+0x94>)
 8000444:	68fa      	ldr	r2, [r7, #12]
 8000446:	0092      	lsls	r2, r2, #2
 8000448:	58d3      	ldr	r3, [r2, r3]
 800044a:	2b08      	cmp	r3, #8
 800044c:	d108      	bne.n	8000460 <FEB_Fan_All_Speed_Set+0x6c>
 800044e:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <FEB_Fan_All_Speed_Set+0x98>)
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	0092      	lsls	r2, r2, #2
 8000454:	58d3      	ldr	r3, [r2, r3]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	1dfb      	adds	r3, r7, #7
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800045e:	e007      	b.n	8000470 <FEB_Fan_All_Speed_Set+0x7c>
 8000460:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <FEB_Fan_All_Speed_Set+0x98>)
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	58d3      	ldr	r3, [r2, r3]
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	6413      	str	r3, [r2, #64]	@ 0x40
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3301      	adds	r3, #1
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2b04      	cmp	r3, #4
 800047a:	d9c4      	bls.n	8000406 <FEB_Fan_All_Speed_Set+0x12>
	}
}
 800047c:	46c0      	nop			@ (mov r8, r8)
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b004      	add	sp, #16
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	20000028 	.word	0x20000028
 800048c:	20000000 	.word	0x20000000

08000490 <FEB_Fan_TACH_Init>:

// ********************************** TACH **********************************

void FEB_Fan_TACH_Init(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 8000496:	2300      	movs	r3, #0
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	e00d      	b.n	80004b8 <FEB_Fan_TACH_Init+0x28>
		HAL_TIM_IC_Start_IT(timer[i], tim_channels[i]);
 800049c:	4b0a      	ldr	r3, [pc, #40]	@ (80004c8 <FEB_Fan_TACH_Init+0x38>)
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	0092      	lsls	r2, r2, #2
 80004a2:	58d0      	ldr	r0, [r2, r3]
 80004a4:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <FEB_Fan_TACH_Init+0x3c>)
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	58d3      	ldr	r3, [r2, r3]
 80004ac:	0019      	movs	r1, r3
 80004ae:	f002 fd0d 	bl	8002ecc <HAL_TIM_IC_Start_IT>
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	3301      	adds	r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d9ee      	bls.n	800049c <FEB_Fan_TACH_Init+0xc>
	}
}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	46c0      	nop			@ (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b002      	add	sp, #8
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000000 	.word	0x20000000
 80004cc:	20000028 	.word	0x20000028

080004d0 <FEB_Fan_TACH_Callback>:

void FEB_Fan_TACH_Callback(TIM_HandleTypeDef *htim) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	6078      	str	r0, [r7, #4]

	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	e083      	b.n	80005e6 <FEB_Fan_TACH_Callback+0x116>

		if ( timer[i] == htim ) {
 80004de:	4b45      	ldr	r3, [pc, #276]	@ (80005f4 <FEB_Fan_TACH_Callback+0x124>)
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	0092      	lsls	r2, r2, #2
 80004e4:	58d3      	ldr	r3, [r2, r3]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d000      	beq.n	80004ee <FEB_Fan_TACH_Callback+0x1e>
 80004ec:	e078      	b.n	80005e0 <FEB_Fan_TACH_Callback+0x110>

			if ( htim->Channel == tim_active_channels[i] ) {
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	7f1b      	ldrb	r3, [r3, #28]
 80004f2:	0019      	movs	r1, r3
 80004f4:	4b40      	ldr	r3, [pc, #256]	@ (80005f8 <FEB_Fan_TACH_Callback+0x128>)
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	0092      	lsls	r2, r2, #2
 80004fa:	58d3      	ldr	r3, [r2, r3]
 80004fc:	4299      	cmp	r1, r3
 80004fe:	d16f      	bne.n	80005e0 <FEB_Fan_TACH_Callback+0x110>

				if ( first_capture[i] == false ) {
 8000500:	4a3e      	ldr	r2, [pc, #248]	@ (80005fc <FEB_Fan_TACH_Callback+0x12c>)
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	18d3      	adds	r3, r2, r3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2201      	movs	r2, #1
 800050a:	4053      	eors	r3, r2
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b00      	cmp	r3, #0
 8000510:	d013      	beq.n	800053a <FEB_Fan_TACH_Callback+0x6a>

					IC_first_rising_edge[i] = HAL_TIM_ReadCapturedValue(htim, tim_channels[i]);
 8000512:	4b3b      	ldr	r3, [pc, #236]	@ (8000600 <FEB_Fan_TACH_Callback+0x130>)
 8000514:	68fa      	ldr	r2, [r7, #12]
 8000516:	0092      	lsls	r2, r2, #2
 8000518:	58d2      	ldr	r2, [r2, r3]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f003 f930 	bl	8003784 <HAL_TIM_ReadCapturedValue>
 8000524:	0001      	movs	r1, r0
 8000526:	4b37      	ldr	r3, [pc, #220]	@ (8000604 <FEB_Fan_TACH_Callback+0x134>)
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	0092      	lsls	r2, r2, #2
 800052c:	50d1      	str	r1, [r2, r3]
					first_capture[i] = true;
 800052e:	4a33      	ldr	r2, [pc, #204]	@ (80005fc <FEB_Fan_TACH_Callback+0x12c>)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	18d3      	adds	r3, r2, r3
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	e052      	b.n	80005e0 <FEB_Fan_TACH_Callback+0x110>
				}

				else {
					uint32_t diff = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]

					IC_second_rising_edge[i] = HAL_TIM_ReadCapturedValue(htim, tim_channels[i]);
 800053e:	4b30      	ldr	r3, [pc, #192]	@ (8000600 <FEB_Fan_TACH_Callback+0x130>)
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	0092      	lsls	r2, r2, #2
 8000544:	58d2      	ldr	r2, [r2, r3]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	0011      	movs	r1, r2
 800054a:	0018      	movs	r0, r3
 800054c:	f003 f91a 	bl	8003784 <HAL_TIM_ReadCapturedValue>
 8000550:	0001      	movs	r1, r0
 8000552:	4b2d      	ldr	r3, [pc, #180]	@ (8000608 <FEB_Fan_TACH_Callback+0x138>)
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	0092      	lsls	r2, r2, #2
 8000558:	50d1      	str	r1, [r2, r3]

					if (IC_second_rising_edge[i] > IC_first_rising_edge[i]) {
 800055a:	4b2b      	ldr	r3, [pc, #172]	@ (8000608 <FEB_Fan_TACH_Callback+0x138>)
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	0092      	lsls	r2, r2, #2
 8000560:	58d2      	ldr	r2, [r2, r3]
 8000562:	4b28      	ldr	r3, [pc, #160]	@ (8000604 <FEB_Fan_TACH_Callback+0x134>)
 8000564:	68f9      	ldr	r1, [r7, #12]
 8000566:	0089      	lsls	r1, r1, #2
 8000568:	58cb      	ldr	r3, [r1, r3]
 800056a:	429a      	cmp	r2, r3
 800056c:	d90a      	bls.n	8000584 <FEB_Fan_TACH_Callback+0xb4>

						diff = IC_second_rising_edge[i] - IC_first_rising_edge[i];
 800056e:	4b26      	ldr	r3, [pc, #152]	@ (8000608 <FEB_Fan_TACH_Callback+0x138>)
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	0092      	lsls	r2, r2, #2
 8000574:	58d2      	ldr	r2, [r2, r3]
 8000576:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <FEB_Fan_TACH_Callback+0x134>)
 8000578:	68f9      	ldr	r1, [r7, #12]
 800057a:	0089      	lsls	r1, r1, #2
 800057c:	58cb      	ldr	r3, [r1, r3]
 800057e:	1ad3      	subs	r3, r2, r3
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	e01b      	b.n	80005bc <FEB_Fan_TACH_Callback+0xec>
					}

					else if (IC_first_rising_edge[i] > IC_second_rising_edge[i]) {
 8000584:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <FEB_Fan_TACH_Callback+0x134>)
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	0092      	lsls	r2, r2, #2
 800058a:	58d2      	ldr	r2, [r2, r3]
 800058c:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <FEB_Fan_TACH_Callback+0x138>)
 800058e:	68f9      	ldr	r1, [r7, #12]
 8000590:	0089      	lsls	r1, r1, #2
 8000592:	58cb      	ldr	r3, [r1, r3]
 8000594:	429a      	cmp	r2, r3
 8000596:	d90b      	bls.n	80005b0 <FEB_Fan_TACH_Callback+0xe0>

						diff = (0xFFFFFFFF - IC_first_rising_edge[i]) + IC_second_rising_edge[i];
 8000598:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <FEB_Fan_TACH_Callback+0x138>)
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	58d2      	ldr	r2, [r2, r3]
 80005a0:	4b18      	ldr	r3, [pc, #96]	@ (8000604 <FEB_Fan_TACH_Callback+0x134>)
 80005a2:	68f9      	ldr	r1, [r7, #12]
 80005a4:	0089      	lsls	r1, r1, #2
 80005a6:	58cb      	ldr	r3, [r1, r3]
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	3b01      	subs	r3, #1
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	e005      	b.n	80005bc <FEB_Fan_TACH_Callback+0xec>
					}

					else {
						frequency[i] = 0;
 80005b0:	4b16      	ldr	r3, [pc, #88]	@ (800060c <FEB_Fan_TACH_Callback+0x13c>)
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	0052      	lsls	r2, r2, #1
 80005b6:	2100      	movs	r1, #0
 80005b8:	52d1      	strh	r1, [r2, r3]
						return;
 80005ba:	e018      	b.n	80005ee <FEB_Fan_TACH_Callback+0x11e>
					}

					frequency[i] = REF_CLOCK / diff;
 80005bc:	68b9      	ldr	r1, [r7, #8]
 80005be:	4814      	ldr	r0, [pc, #80]	@ (8000610 <FEB_Fan_TACH_Callback+0x140>)
 80005c0:	f7ff fda2 	bl	8000108 <__udivsi3>
 80005c4:	0003      	movs	r3, r0
 80005c6:	b299      	uxth	r1, r3
 80005c8:	4b10      	ldr	r3, [pc, #64]	@ (800060c <FEB_Fan_TACH_Callback+0x13c>)
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	0052      	lsls	r2, r2, #1
 80005ce:	52d1      	strh	r1, [r2, r3]

					FEB_TACH_IIR(frequency, frequency, filter, NUM_FANS, filter_init);
 80005d0:	4a10      	ldr	r2, [pc, #64]	@ (8000614 <FEB_Fan_TACH_Callback+0x144>)
 80005d2:	490e      	ldr	r1, [pc, #56]	@ (800060c <FEB_Fan_TACH_Callback+0x13c>)
 80005d4:	480d      	ldr	r0, [pc, #52]	@ (800060c <FEB_Fan_TACH_Callback+0x13c>)
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <FEB_Fan_TACH_Callback+0x148>)
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2305      	movs	r3, #5
 80005dc:	f000 f81e 	bl	800061c <FEB_TACH_IIR>
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3301      	adds	r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d800      	bhi.n	80005ee <FEB_Fan_TACH_Callback+0x11e>
 80005ec:	e777      	b.n	80004de <FEB_Fan_TACH_Callback+0xe>
					#endif
				}
			}
		}
	}
}
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b004      	add	sp, #16
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000014 	.word	0x20000014
 80005fc:	200000d8 	.word	0x200000d8
 8000600:	20000028 	.word	0x20000028
 8000604:	200000b0 	.word	0x200000b0
 8000608:	200000c4 	.word	0x200000c4
 800060c:	20000088 	.word	0x20000088
 8000610:	02dc6c00 	.word	0x02dc6c00
 8000614:	20000094 	.word	0x20000094
 8000618:	200000a8 	.word	0x200000a8

0800061c <FEB_TACH_IIR>:

static void FEB_TACH_IIR(uint16_t *data_in, uint16_t *data_out, uint32_t *filters, \
											uint8_t length, bool *filter_initialized) {
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	001a      	movs	r2, r3
 800062a:	1cfb      	adds	r3, r7, #3
 800062c:	701a      	strb	r2, [r3, #0]
	uint16_t *dest = data_out;
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	61bb      	str	r3, [r7, #24]
	uint32_t *dest_filters = filters;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	617b      	str	r3, [r7, #20]

	for ( uint8_t i = 0; i < length; i++ ) {
 8000636:	231f      	movs	r3, #31
 8000638:	18fb      	adds	r3, r7, r3
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
 800063e:	e05d      	b.n	80006fc <FEB_TACH_IIR+0xe0>

		if ( !filter_initialized[i] ) {
 8000640:	211f      	movs	r1, #31
 8000642:	187b      	adds	r3, r7, r1
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000648:	18d3      	adds	r3, r2, r3
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2201      	movs	r2, #1
 800064e:	4053      	eors	r3, r2
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d021      	beq.n	800069a <FEB_TACH_IIR+0x7e>
			dest_filters[i] = data_in[i] << ADC_FILTER_EXPONENT;
 8000656:	0008      	movs	r0, r1
 8000658:	187b      	adds	r3, r7, r1
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	18d3      	adds	r3, r2, r3
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	0019      	movs	r1, r3
 8000666:	183b      	adds	r3, r7, r0
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	18d3      	adds	r3, r2, r3
 8000670:	008a      	lsls	r2, r1, #2
 8000672:	601a      	str	r2, [r3, #0]
			dest[i] = data_in[i];
 8000674:	183b      	adds	r3, r7, r0
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	18d2      	adds	r2, r2, r3
 800067e:	183b      	adds	r3, r7, r0
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	69b9      	ldr	r1, [r7, #24]
 8000686:	18cb      	adds	r3, r1, r3
 8000688:	8812      	ldrh	r2, [r2, #0]
 800068a:	801a      	strh	r2, [r3, #0]
			filter_initialized[i] = true;
 800068c:	183b      	adds	r3, r7, r0
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000692:	18d3      	adds	r3, r2, r3
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	e02a      	b.n	80006f0 <FEB_TACH_IIR+0xd4>
		}

		else {
			dest_filters[i] += data_in[i] - (dest_filters[i] >>  ADC_FILTER_EXPONENT);
 800069a:	241f      	movs	r4, #31
 800069c:	193b      	adds	r3, r7, r4
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	18d3      	adds	r3, r2, r3
 80006a6:	6819      	ldr	r1, [r3, #0]
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	18d3      	adds	r3, r2, r3
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	0018      	movs	r0, r3
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	18d3      	adds	r3, r2, r3
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	089b      	lsrs	r3, r3, #2
 80006c4:	1ac2      	subs	r2, r0, r3
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	6978      	ldr	r0, [r7, #20]
 80006ce:	18c3      	adds	r3, r0, r3
 80006d0:	188a      	adds	r2, r1, r2
 80006d2:	601a      	str	r2, [r3, #0]
			dest[i] = dest_filters[i] >> ADC_FILTER_EXPONENT;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	18d3      	adds	r3, r2, r3
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	0899      	lsrs	r1, r3, #2
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	69ba      	ldr	r2, [r7, #24]
 80006ea:	18d3      	adds	r3, r2, r3
 80006ec:	b28a      	uxth	r2, r1
 80006ee:	801a      	strh	r2, [r3, #0]
	for ( uint8_t i = 0; i < length; i++ ) {
 80006f0:	211f      	movs	r1, #31
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	781a      	ldrb	r2, [r3, #0]
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	3201      	adds	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	231f      	movs	r3, #31
 80006fe:	18fa      	adds	r2, r7, r3
 8000700:	1cfb      	adds	r3, r7, #3
 8000702:	7812      	ldrb	r2, [r2, #0]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	429a      	cmp	r2, r3
 8000708:	d39a      	bcc.n	8000640 <FEB_TACH_IIR+0x24>
		}
	}
}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	46c0      	nop			@ (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b009      	add	sp, #36	@ 0x24
 8000712:	bd90      	pop	{r4, r7, pc}

08000714 <FEB_Init>:

extern UART_HandleTypeDef huart2;

extern uint16_t frequency[NUM_FANS];

void FEB_Init(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	FEB_CAN_Init();
 8000718:	f7ff fd82 	bl	8000220 <FEB_CAN_Init>
	FEB_Fan_Init();
 800071c:	f7ff fe3e 	bl	800039c <FEB_Fan_Init>
}
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <FEB_Main_Loop>:

void FEB_Main_Loop(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	// Fan speed set by CAN receive interrupt

	FEB_CAN_Transmit(&hcan, (uint8_t *)frequency);
 800072c:	4a05      	ldr	r2, [pc, #20]	@ (8000744 <FEB_Main_Loop+0x1c>)
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <FEB_Main_Loop+0x20>)
 8000730:	0011      	movs	r1, r2
 8000732:	0018      	movs	r0, r3
 8000734:	f7ff fda0 	bl	8000278 <FEB_CAN_Transmit>

	HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	@ 0x64
 800073a:	f000 fe97 	bl	800146c <HAL_Delay>
}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000088 	.word	0x20000088
 8000748:	200000e0 	.word	0x200000e0

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fe28 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f813 	bl	800077e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f000 fb12 	bl	8000d80 <MX_GPIO_Init>
  MX_TIM1_Init();
 800075c:	f000 f888 	bl	8000870 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000760:	f000 f950 	bl	8000a04 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000764:	f000 fadc 	bl	8000d20 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000768:	f000 f9d2 	bl	8000b10 <MX_TIM3_Init>
  MX_CAN_Init();
 800076c:	f000 f84a 	bl	8000804 <MX_CAN_Init>
  MX_TIM14_Init();
 8000770:	f000 fa8a 	bl	8000c88 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  FEB_Init();
 8000774:	f7ff ffce 	bl	8000714 <FEB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  FEB_Main_Loop();
 8000778:	f7ff ffd6 	bl	8000728 <FEB_Main_Loop>
 800077c:	e7fc      	b.n	8000778 <main+0x2c>

0800077e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077e:	b590      	push	{r4, r7, lr}
 8000780:	b093      	sub	sp, #76	@ 0x4c
 8000782:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000784:	2414      	movs	r4, #20
 8000786:	193b      	adds	r3, r7, r4
 8000788:	0018      	movs	r0, r3
 800078a:	2334      	movs	r3, #52	@ 0x34
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f004 fc48 	bl	8005024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	0018      	movs	r0, r3
 8000798:	2310      	movs	r3, #16
 800079a:	001a      	movs	r2, r3
 800079c:	2100      	movs	r1, #0
 800079e:	f004 fc41 	bl	8005024 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2220      	movs	r2, #32
 80007a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2201      	movs	r2, #1
 80007ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 fcaa 	bl	8002110 <HAL_RCC_OscConfig>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007c0:	f000 fb10 	bl	8000de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2207      	movs	r2, #7
 80007c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2203      	movs	r2, #3
 80007ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2101      	movs	r1, #1
 80007e0:	0018      	movs	r0, r3
 80007e2:	f002 f81b 	bl	800281c <HAL_RCC_ClockConfig>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x70>
  {
    Error_Handler();
 80007ea:	f000 fafb 	bl	8000de4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80007ee:	2380      	movs	r3, #128	@ 0x80
 80007f0:	04db      	lsls	r3, r3, #19
 80007f2:	2200      	movs	r2, #0
 80007f4:	0019      	movs	r1, r3
 80007f6:	2000      	movs	r0, #0
 80007f8:	f002 f8ea 	bl	80029d0 <HAL_RCC_MCOConfig>
}
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b013      	add	sp, #76	@ 0x4c
 8000802:	bd90      	pop	{r4, r7, pc}

08000804 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_CAN_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <MX_CAN_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_CAN_Init+0x64>)
 8000810:	2210      	movs	r2, #16
 8000812:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_CAN_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_CAN_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_CAN_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <MX_CAN_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_CAN_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000832:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <MX_CAN_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000838:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <MX_CAN_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800083e:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_CAN_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000844:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <MX_CAN_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800084a:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_CAN_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000850:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <MX_CAN_Init+0x64>)
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fe2e 	bl	80014b4 <HAL_CAN_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 fac2 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	200000e0 	.word	0x200000e0
 800086c:	40006400 	.word	0x40006400

08000870 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b096      	sub	sp, #88	@ 0x58
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	2348      	movs	r3, #72	@ 0x48
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	0018      	movs	r0, r3
 800087c:	2310      	movs	r3, #16
 800087e:	001a      	movs	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	f004 fbcf 	bl	8005024 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	2340      	movs	r3, #64	@ 0x40
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	0018      	movs	r0, r3
 800088c:	2308      	movs	r3, #8
 800088e:	001a      	movs	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	f004 fbc7 	bl	8005024 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000896:	2324      	movs	r3, #36	@ 0x24
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	0018      	movs	r0, r3
 800089c:	231c      	movs	r3, #28
 800089e:	001a      	movs	r2, r3
 80008a0:	2100      	movs	r1, #0
 80008a2:	f004 fbbf 	bl	8005024 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	0018      	movs	r0, r3
 80008aa:	2320      	movs	r3, #32
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f004 fbb8 	bl	8005024 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008b4:	4b51      	ldr	r3, [pc, #324]	@ (80009fc <MX_TIM1_Init+0x18c>)
 80008b6:	4a52      	ldr	r2, [pc, #328]	@ (8000a00 <MX_TIM1_Init+0x190>)
 80008b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008ba:	4b50      	ldr	r3, [pc, #320]	@ (80009fc <MX_TIM1_Init+0x18c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b4e      	ldr	r3, [pc, #312]	@ (80009fc <MX_TIM1_Init+0x18c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40*48;
 80008c6:	4b4d      	ldr	r3, [pc, #308]	@ (80009fc <MX_TIM1_Init+0x18c>)
 80008c8:	22f0      	movs	r2, #240	@ 0xf0
 80008ca:	00d2      	lsls	r2, r2, #3
 80008cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b4b      	ldr	r3, [pc, #300]	@ (80009fc <MX_TIM1_Init+0x18c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d4:	4b49      	ldr	r3, [pc, #292]	@ (80009fc <MX_TIM1_Init+0x18c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008da:	4b48      	ldr	r3, [pc, #288]	@ (80009fc <MX_TIM1_Init+0x18c>)
 80008dc:	2280      	movs	r2, #128	@ 0x80
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e0:	4b46      	ldr	r3, [pc, #280]	@ (80009fc <MX_TIM1_Init+0x18c>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 f946 	bl	8002b74 <HAL_TIM_Base_Init>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80008ec:	f000 fa7a 	bl	8000de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f0:	2148      	movs	r1, #72	@ 0x48
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	0152      	lsls	r2, r2, #5
 80008f8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008fa:	187a      	adds	r2, r7, r1
 80008fc:	4b3f      	ldr	r3, [pc, #252]	@ (80009fc <MX_TIM1_Init+0x18c>)
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f002 fe6b 	bl	80035dc <HAL_TIM_ConfigClockSource>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800090a:	f000 fa6b 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800090e:	4b3b      	ldr	r3, [pc, #236]	@ (80009fc <MX_TIM1_Init+0x18c>)
 8000910:	0018      	movs	r0, r3
 8000912:	f002 f97f 	bl	8002c14 <HAL_TIM_PWM_Init>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800091a:	f000 fa63 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091e:	2140      	movs	r1, #64	@ 0x40
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800092c:	187a      	adds	r2, r7, r1
 800092e:	4b33      	ldr	r3, [pc, #204]	@ (80009fc <MX_TIM1_Init+0x18c>)
 8000930:	0011      	movs	r1, r2
 8000932:	0018      	movs	r0, r3
 8000934:	f003 fbac 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800093c:	f000 fa52 	bl	8000de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000940:	2124      	movs	r1, #36	@ 0x24
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2260      	movs	r2, #96	@ 0x60
 8000946:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2219      	movs	r2, #25
 800094c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096c:	1879      	adds	r1, r7, r1
 800096e:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <MX_TIM1_Init+0x18c>)
 8000970:	2200      	movs	r2, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f002 fd6c 	bl	8003450 <HAL_TIM_PWM_ConfigChannel>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800097c:	f000 fa32 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000980:	2324      	movs	r3, #36	@ 0x24
 8000982:	18f9      	adds	r1, r7, r3
 8000984:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <MX_TIM1_Init+0x18c>)
 8000986:	2204      	movs	r2, #4
 8000988:	0018      	movs	r0, r3
 800098a:	f002 fd61 	bl	8003450 <HAL_TIM_PWM_ConfigChannel>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000992:	f000 fa27 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000996:	2324      	movs	r3, #36	@ 0x24
 8000998:	18f9      	adds	r1, r7, r3
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <MX_TIM1_Init+0x18c>)
 800099c:	2208      	movs	r2, #8
 800099e:	0018      	movs	r0, r3
 80009a0:	f002 fd56 	bl	8003450 <HAL_TIM_PWM_ConfigChannel>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80009a8:	f000 fa1c 	bl	8000de4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2280      	movs	r2, #128	@ 0x80
 80009ce:	0192      	lsls	r2, r2, #6
 80009d0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009d8:	1d3a      	adds	r2, r7, #4
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_TIM1_Init+0x18c>)
 80009dc:	0011      	movs	r1, r2
 80009de:	0018      	movs	r0, r3
 80009e0:	f003 fbae 	bl	8004140 <HAL_TIMEx_ConfigBreakDeadTime>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 80009e8:	f000 f9fc 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ec:	4b03      	ldr	r3, [pc, #12]	@ (80009fc <MX_TIM1_Init+0x18c>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 fb6c 	bl	80010cc <HAL_TIM_MspPostInit>

}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b016      	add	sp, #88	@ 0x58
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000108 	.word	0x20000108
 8000a00:	40012c00 	.word	0x40012c00

08000a04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	@ 0x28
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0a:	2318      	movs	r3, #24
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2310      	movs	r3, #16
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f004 fb05 	bl	8005024 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1a:	2310      	movs	r3, #16
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	0018      	movs	r0, r3
 8000a20:	2308      	movs	r3, #8
 8000a22:	001a      	movs	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	f004 fafd 	bl	8005024 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a2a:	003b      	movs	r3, r7
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	2310      	movs	r3, #16
 8000a30:	001a      	movs	r2, r3
 8000a32:	2100      	movs	r1, #0
 8000a34:	f004 faf6 	bl	8005024 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a38:	4b33      	ldr	r3, [pc, #204]	@ (8000b08 <MX_TIM2_Init+0x104>)
 8000a3a:	2280      	movs	r2, #128	@ 0x80
 8000a3c:	05d2      	lsls	r2, r2, #23
 8000a3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a40:	4b31      	ldr	r3, [pc, #196]	@ (8000b08 <MX_TIM2_Init+0x104>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b30      	ldr	r3, [pc, #192]	@ (8000b08 <MX_TIM2_Init+0x104>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 294967295;
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b08 <MX_TIM2_Init+0x104>)
 8000a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8000b0c <MX_TIM2_Init+0x108>)
 8000a50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a52:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <MX_TIM2_Init+0x104>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a58:	4b2b      	ldr	r3, [pc, #172]	@ (8000b08 <MX_TIM2_Init+0x104>)
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b08 <MX_TIM2_Init+0x104>)
 8000a60:	0018      	movs	r0, r3
 8000a62:	f002 f887 	bl	8002b74 <HAL_TIM_Base_Init>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 f9bb 	bl	8000de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6e:	2118      	movs	r1, #24
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2280      	movs	r2, #128	@ 0x80
 8000a74:	0152      	lsls	r2, r2, #5
 8000a76:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a78:	187a      	adds	r2, r7, r1
 8000a7a:	4b23      	ldr	r3, [pc, #140]	@ (8000b08 <MX_TIM2_Init+0x104>)
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f002 fdac 	bl	80035dc <HAL_TIM_ConfigClockSource>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000a88:	f000 f9ac 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b08 <MX_TIM2_Init+0x104>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f002 f9c4 	bl	8002e1c <HAL_TIM_IC_Init>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a98:	f000 f9a4 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9c:	2110      	movs	r1, #16
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aaa:	187a      	adds	r2, r7, r1
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <MX_TIM2_Init+0x104>)
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f003 faed 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000aba:	f000 f993 	bl	8000de4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000abe:	003b      	movs	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ac4:	003b      	movs	r3, r7
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000aca:	003b      	movs	r3, r7
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	0039      	movs	r1, r7
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <MX_TIM2_Init+0x104>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	0018      	movs	r0, r3
 8000ade:	f002 fc13 	bl	8003308 <HAL_TIM_IC_ConfigChannel>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000ae6:	f000 f97d 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000aea:	0039      	movs	r1, r7
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_TIM2_Init+0x104>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	0018      	movs	r0, r3
 8000af2:	f002 fc09 	bl	8003308 <HAL_TIM_IC_ConfigChannel>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000afa:	f000 f973 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b00a      	add	sp, #40	@ 0x28
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	20000150 	.word	0x20000150
 8000b0c:	1194d7ff 	.word	0x1194d7ff

08000b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b092      	sub	sp, #72	@ 0x48
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	2338      	movs	r3, #56	@ 0x38
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	001a      	movs	r2, r3
 8000b20:	2100      	movs	r1, #0
 8000b22:	f004 fa7f 	bl	8005024 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b26:	2330      	movs	r3, #48	@ 0x30
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	001a      	movs	r2, r3
 8000b30:	2100      	movs	r1, #0
 8000b32:	f004 fa77 	bl	8005024 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b36:	2314      	movs	r3, #20
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	231c      	movs	r3, #28
 8000b3e:	001a      	movs	r2, r3
 8000b40:	2100      	movs	r1, #0
 8000b42:	f004 fa6f 	bl	8005024 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	0018      	movs	r0, r3
 8000b4a:	2310      	movs	r3, #16
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2100      	movs	r1, #0
 8000b50:	f004 fa68 	bl	8005024 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b54:	4b4a      	ldr	r3, [pc, #296]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000b56:	4a4b      	ldr	r2, [pc, #300]	@ (8000c84 <MX_TIM3_Init+0x174>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b5a:	4b49      	ldr	r3, [pc, #292]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b47      	ldr	r3, [pc, #284]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40*48;
 8000b66:	4b46      	ldr	r3, [pc, #280]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000b68:	22f0      	movs	r2, #240	@ 0xf0
 8000b6a:	00d2      	lsls	r2, r2, #3
 8000b6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6e:	4b44      	ldr	r3, [pc, #272]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b74:	4b42      	ldr	r3, [pc, #264]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000b76:	2280      	movs	r2, #128	@ 0x80
 8000b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b7a:	4b41      	ldr	r3, [pc, #260]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f001 fff9 	bl	8002b74 <HAL_TIM_Base_Init>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000b86:	f000 f92d 	bl	8000de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8a:	2138      	movs	r1, #56	@ 0x38
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	0152      	lsls	r2, r2, #5
 8000b92:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b94:	187a      	adds	r2, r7, r1
 8000b96:	4b3a      	ldr	r3, [pc, #232]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000b98:	0011      	movs	r1, r2
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f002 fd1e 	bl	80035dc <HAL_TIM_ConfigClockSource>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000ba4:	f000 f91e 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ba8:	4b35      	ldr	r3, [pc, #212]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f002 f832 	bl	8002c14 <HAL_TIM_PWM_Init>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8000bb4:	f000 f916 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000bb8:	4b31      	ldr	r3, [pc, #196]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f002 f92e 	bl	8002e1c <HAL_TIM_IC_Init>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000bc4:	f000 f90e 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2130      	movs	r1, #48	@ 0x30
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bd6:	187a      	adds	r2, r7, r1
 8000bd8:	4b29      	ldr	r3, [pc, #164]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f003 fa57 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000be6:	f000 f8fd 	bl	8000de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bea:	2114      	movs	r1, #20
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2260      	movs	r2, #96	@ 0x60
 8000bf0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2219      	movs	r2, #25
 8000bf6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c04:	1879      	adds	r1, r7, r1
 8000c06:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f002 fc20 	bl	8003450 <HAL_TIM_PWM_ConfigChannel>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8000c14:	f000 f8e6 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c18:	2314      	movs	r3, #20
 8000c1a:	18f9      	adds	r1, r7, r3
 8000c1c:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	0018      	movs	r0, r3
 8000c22:	f002 fc15 	bl	8003450 <HAL_TIM_PWM_ConfigChannel>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 8000c2a:	f000 f8db 	bl	8000de4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2201      	movs	r2, #1
 8000c38:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000c46:	1d39      	adds	r1, r7, #4
 8000c48:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f002 fb5b 	bl	8003308 <HAL_TIM_IC_ConfigChannel>
 8000c52:	1e03      	subs	r3, r0, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0x14a>
  {
    Error_Handler();
 8000c56:	f000 f8c5 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000c5a:	1d39      	adds	r1, r7, #4
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	0018      	movs	r0, r3
 8000c62:	f002 fb51 	bl	8003308 <HAL_TIM_IC_ConfigChannel>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM3_Init+0x15e>
  {
    Error_Handler();
 8000c6a:	f000 f8bb 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c6e:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <MX_TIM3_Init+0x170>)
 8000c70:	0018      	movs	r0, r3
 8000c72:	f000 fa2b 	bl	80010cc <HAL_TIM_MspPostInit>

}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b012      	add	sp, #72	@ 0x48
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	20000198 	.word	0x20000198
 8000c84:	40000400 	.word	0x40000400

08000c88 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c8e:	003b      	movs	r3, r7
 8000c90:	0018      	movs	r0, r3
 8000c92:	2310      	movs	r3, #16
 8000c94:	001a      	movs	r2, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	f004 f9c4 	bl	8005024 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <MX_TIM14_Init+0x8c>)
 8000c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d18 <MX_TIM14_Init+0x90>)
 8000ca0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <MX_TIM14_Init+0x8c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <MX_TIM14_Init+0x8c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_TIM14_Init+0x8c>)
 8000cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d1c <MX_TIM14_Init+0x94>)
 8000cb2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_TIM14_Init+0x8c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_TIM14_Init+0x8c>)
 8000cbc:	2280      	movs	r2, #128	@ 0x80
 8000cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_TIM14_Init+0x8c>)
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f001 ff56 	bl	8002b74 <HAL_TIM_Base_Init>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000ccc:	f000 f88a 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8000cd0:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <MX_TIM14_Init+0x8c>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f002 f8a2 	bl	8002e1c <HAL_TIM_IC_Init>
 8000cd8:	1e03      	subs	r3, r0, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000cdc:	f000 f882 	bl	8000de4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ce0:	003b      	movs	r3, r7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ce6:	003b      	movs	r3, r7
 8000ce8:	2201      	movs	r2, #1
 8000cea:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cec:	003b      	movs	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000cf2:	003b      	movs	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cf8:	0039      	movs	r1, r7
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <MX_TIM14_Init+0x8c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f002 fb02 	bl	8003308 <HAL_TIM_IC_ConfigChannel>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000d08:	f000 f86c 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b004      	add	sp, #16
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200001e0 	.word	0x200001e0
 8000d18:	40002000 	.word	0x40002000
 8000d1c:	0000ffff 	.word	0x0000ffff

08000d20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d26:	4a15      	ldr	r2, [pc, #84]	@ (8000d7c <MX_USART2_UART_Init+0x5c>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d2c:	22e1      	movs	r2, #225	@ 0xe1
 8000d2e:	0252      	lsls	r2, r2, #9
 8000d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d62:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d64:	0018      	movs	r0, r3
 8000d66:	f003 fa59 	bl	800421c <HAL_UART_Init>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d6e:	f000 f839 	bl	8000de4 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000228 	.word	0x20000228
 8000d7c:	40004400 	.word	0x40004400

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <MX_GPIO_Init+0x48>)
 8000d88:	695a      	ldr	r2, [r3, #20]
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <MX_GPIO_Init+0x48>)
 8000d8c:	2180      	movs	r1, #128	@ 0x80
 8000d8e:	0289      	lsls	r1, r1, #10
 8000d90:	430a      	orrs	r2, r1
 8000d92:	615a      	str	r2, [r3, #20]
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <MX_GPIO_Init+0x48>)
 8000d96:	695a      	ldr	r2, [r3, #20]
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	029b      	lsls	r3, r3, #10
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <MX_GPIO_Init+0x48>)
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <MX_GPIO_Init+0x48>)
 8000da8:	2180      	movs	r1, #128	@ 0x80
 8000daa:	02c9      	lsls	r1, r1, #11
 8000dac:	430a      	orrs	r2, r1
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <MX_GPIO_Init+0x48>)
 8000db2:	695a      	ldr	r2, [r3, #20]
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	02db      	lsls	r3, r3, #11
 8000db8:	4013      	ands	r3, r2
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	FEB_Fan_TACH_Callback(htim);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff fb7a 	bl	80004d0 <FEB_Fan_TACH_Callback>
}
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
}
 8000dea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 8000dec:	46c0      	nop			@ (mov r8, r8)
 8000dee:	e7fd      	b.n	8000dec <Error_Handler+0x8>

08000df0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <HAL_MspInit+0x44>)
 8000df8:	699a      	ldr	r2, [r3, #24]
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <HAL_MspInit+0x44>)
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	619a      	str	r2, [r3, #24]
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <HAL_MspInit+0x44>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	2201      	movs	r2, #1
 8000e08:	4013      	ands	r3, r2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <HAL_MspInit+0x44>)
 8000e10:	69da      	ldr	r2, [r3, #28]
 8000e12:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <HAL_MspInit+0x44>)
 8000e14:	2180      	movs	r1, #128	@ 0x80
 8000e16:	0549      	lsls	r1, r1, #21
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	61da      	str	r2, [r3, #28]
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <HAL_MspInit+0x44>)
 8000e1e:	69da      	ldr	r2, [r3, #28]
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	055b      	lsls	r3, r3, #21
 8000e24:	4013      	ands	r3, r2
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b08b      	sub	sp, #44	@ 0x2c
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	2414      	movs	r4, #20
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	0018      	movs	r0, r3
 8000e46:	2314      	movs	r3, #20
 8000e48:	001a      	movs	r2, r3
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f004 f8ea 	bl	8005024 <memset>
  if(hcan->Instance==CAN)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1d      	ldr	r2, [pc, #116]	@ (8000ecc <HAL_CAN_MspInit+0x94>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d133      	bne.n	8000ec2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <HAL_CAN_MspInit+0x98>)
 8000e5c:	69da      	ldr	r2, [r3, #28]
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <HAL_CAN_MspInit+0x98>)
 8000e60:	2180      	movs	r1, #128	@ 0x80
 8000e62:	0489      	lsls	r1, r1, #18
 8000e64:	430a      	orrs	r2, r1
 8000e66:	61da      	str	r2, [r3, #28]
 8000e68:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <HAL_CAN_MspInit+0x98>)
 8000e6a:	69da      	ldr	r2, [r3, #28]
 8000e6c:	2380      	movs	r3, #128	@ 0x80
 8000e6e:	049b      	lsls	r3, r3, #18
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <HAL_CAN_MspInit+0x98>)
 8000e78:	695a      	ldr	r2, [r3, #20]
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_CAN_MspInit+0x98>)
 8000e7c:	2180      	movs	r1, #128	@ 0x80
 8000e7e:	0289      	lsls	r1, r1, #10
 8000e80:	430a      	orrs	r2, r1
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_CAN_MspInit+0x98>)
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	2380      	movs	r3, #128	@ 0x80
 8000e8a:	029b      	lsls	r3, r3, #10
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	22c0      	movs	r2, #192	@ 0xc0
 8000e96:	0152      	lsls	r2, r2, #5
 8000e98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	0021      	movs	r1, r4
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	187a      	adds	r2, r7, r1
 8000eb6:	2390      	movs	r3, #144	@ 0x90
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	0011      	movs	r1, r2
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f000 ffbf 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b00b      	add	sp, #44	@ 0x2c
 8000ec8:	bd90      	pop	{r4, r7, pc}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	40006400 	.word	0x40006400
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	@ 0x38
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	2324      	movs	r3, #36	@ 0x24
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	2314      	movs	r3, #20
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	f004 f89c 	bl	8005024 <memset>
  if(htim_base->Instance==TIM1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a71      	ldr	r2, [pc, #452]	@ (80010b8 <HAL_TIM_Base_MspInit+0x1e4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d11e      	bne.n	8000f34 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef6:	4b71      	ldr	r3, [pc, #452]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000ef8:	699a      	ldr	r2, [r3, #24]
 8000efa:	4b70      	ldr	r3, [pc, #448]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000efc:	2180      	movs	r1, #128	@ 0x80
 8000efe:	0109      	lsls	r1, r1, #4
 8000f00:	430a      	orrs	r2, r1
 8000f02:	619a      	str	r2, [r3, #24]
 8000f04:	4b6d      	ldr	r3, [pc, #436]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f06:	699a      	ldr	r2, [r3, #24]
 8000f08:	2380      	movs	r3, #128	@ 0x80
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	623b      	str	r3, [r7, #32]
 8000f10:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	200d      	movs	r0, #13
 8000f18:	f000 fee2 	bl	8001ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000f1c:	200d      	movs	r0, #13
 8000f1e:	f000 fef4 	bl	8001d0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	200e      	movs	r0, #14
 8000f28:	f000 feda 	bl	8001ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f2c:	200e      	movs	r0, #14
 8000f2e:	f000 feec 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f32:	e0bd      	b.n	80010b0 <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	2380      	movs	r3, #128	@ 0x80
 8000f3a:	05db      	lsls	r3, r3, #23
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d139      	bne.n	8000fb4 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f40:	4b5e      	ldr	r3, [pc, #376]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f42:	69da      	ldr	r2, [r3, #28]
 8000f44:	4b5d      	ldr	r3, [pc, #372]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	61da      	str	r2, [r3, #28]
 8000f4c:	4b5b      	ldr	r3, [pc, #364]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	2201      	movs	r2, #1
 8000f52:	4013      	ands	r3, r2
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f58:	4b58      	ldr	r3, [pc, #352]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f5a:	695a      	ldr	r2, [r3, #20]
 8000f5c:	4b57      	ldr	r3, [pc, #348]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f5e:	2180      	movs	r1, #128	@ 0x80
 8000f60:	0289      	lsls	r1, r1, #10
 8000f62:	430a      	orrs	r2, r1
 8000f64:	615a      	str	r2, [r3, #20]
 8000f66:	4b55      	ldr	r3, [pc, #340]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000f68:	695a      	ldr	r2, [r3, #20]
 8000f6a:	2380      	movs	r3, #128	@ 0x80
 8000f6c:	029b      	lsls	r3, r3, #10
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TACH4_Pin|TACH5_Pin;
 8000f74:	2124      	movs	r1, #36	@ 0x24
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2202      	movs	r2, #2
 8000f80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2202      	movs	r2, #2
 8000f92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	187a      	adds	r2, r7, r1
 8000f96:	2390      	movs	r3, #144	@ 0x90
 8000f98:	05db      	lsls	r3, r3, #23
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 ff4f 	bl	8001e40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	200f      	movs	r0, #15
 8000fa8:	f000 fe9a 	bl	8001ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fac:	200f      	movs	r0, #15
 8000fae:	f000 feac 	bl	8001d0a <HAL_NVIC_EnableIRQ>
}
 8000fb2:	e07d      	b.n	80010b0 <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM3)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a41      	ldr	r2, [pc, #260]	@ (80010c0 <HAL_TIM_Base_MspInit+0x1ec>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d138      	bne.n	8001030 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000fc0:	69da      	ldr	r2, [r3, #28]
 8000fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	61da      	str	r2, [r3, #28]
 8000fca:	4b3c      	ldr	r3, [pc, #240]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b39      	ldr	r3, [pc, #228]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	02c9      	lsls	r1, r1, #11
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	615a      	str	r2, [r3, #20]
 8000fe4:	4b35      	ldr	r3, [pc, #212]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8000fe6:	695a      	ldr	r2, [r3, #20]
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	02db      	lsls	r3, r3, #11
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TACH2_Pin|TACH3_Pin;
 8000ff2:	2124      	movs	r1, #36	@ 0x24
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2201      	movs	r2, #1
 8001010:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	187b      	adds	r3, r7, r1
 8001014:	4a2b      	ldr	r2, [pc, #172]	@ (80010c4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001016:	0019      	movs	r1, r3
 8001018:	0010      	movs	r0, r2
 800101a:	f000 ff11 	bl	8001e40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2010      	movs	r0, #16
 8001024:	f000 fe5c 	bl	8001ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001028:	2010      	movs	r0, #16
 800102a:	f000 fe6e 	bl	8001d0a <HAL_NVIC_EnableIRQ>
}
 800102e:	e03f      	b.n	80010b0 <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM14)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a24      	ldr	r2, [pc, #144]	@ (80010c8 <HAL_TIM_Base_MspInit+0x1f4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d13a      	bne.n	80010b0 <HAL_TIM_Base_MspInit+0x1dc>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800103a:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 800103c:	69da      	ldr	r2, [r3, #28]
 800103e:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8001040:	2180      	movs	r1, #128	@ 0x80
 8001042:	0049      	lsls	r1, r1, #1
 8001044:	430a      	orrs	r2, r1
 8001046:	61da      	str	r2, [r3, #28]
 8001048:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 800104a:	69da      	ldr	r2, [r3, #28]
 800104c:	2380      	movs	r3, #128	@ 0x80
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4013      	ands	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	0289      	lsls	r1, r1, #10
 8001060:	430a      	orrs	r2, r1
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <HAL_TIM_Base_MspInit+0x1e8>)
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	029b      	lsls	r3, r3, #10
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TACH1_Pin;
 8001072:	2124      	movs	r1, #36	@ 0x24
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2210      	movs	r2, #16
 8001078:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2202      	movs	r2, #2
 800107e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2204      	movs	r2, #4
 8001090:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TACH1_GPIO_Port, &GPIO_InitStruct);
 8001092:	187a      	adds	r2, r7, r1
 8001094:	2390      	movs	r3, #144	@ 0x90
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f000 fed0 	bl	8001e40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	2013      	movs	r0, #19
 80010a6:	f000 fe1b 	bl	8001ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80010aa:	2013      	movs	r0, #19
 80010ac:	f000 fe2d 	bl	8001d0a <HAL_NVIC_EnableIRQ>
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b00e      	add	sp, #56	@ 0x38
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40012c00 	.word	0x40012c00
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40000400 	.word	0x40000400
 80010c4:	48000400 	.word	0x48000400
 80010c8:	40002000 	.word	0x40002000

080010cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b08b      	sub	sp, #44	@ 0x2c
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	2414      	movs	r4, #20
 80010d6:	193b      	adds	r3, r7, r4
 80010d8:	0018      	movs	r0, r3
 80010da:	2314      	movs	r3, #20
 80010dc:	001a      	movs	r2, r3
 80010de:	2100      	movs	r1, #0
 80010e0:	f003 ffa0 	bl	8005024 <memset>
  if(htim->Instance==TIM1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001198 <HAL_TIM_MspPostInit+0xcc>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d126      	bne.n	800113c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b2b      	ldr	r3, [pc, #172]	@ (800119c <HAL_TIM_MspPostInit+0xd0>)
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	4b2a      	ldr	r3, [pc, #168]	@ (800119c <HAL_TIM_MspPostInit+0xd0>)
 80010f4:	2180      	movs	r1, #128	@ 0x80
 80010f6:	0289      	lsls	r1, r1, #10
 80010f8:	430a      	orrs	r2, r1
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	4b27      	ldr	r3, [pc, #156]	@ (800119c <HAL_TIM_MspPostInit+0xd0>)
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	029b      	lsls	r3, r3, #10
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	22e0      	movs	r2, #224	@ 0xe0
 800110e:	00d2      	lsls	r2, r2, #3
 8001110:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	0021      	movs	r1, r4
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2202      	movs	r2, #2
 8001118:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	187b      	adds	r3, r7, r1
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001126:	187b      	adds	r3, r7, r1
 8001128:	2202      	movs	r2, #2
 800112a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	187a      	adds	r2, r7, r1
 800112e:	2390      	movs	r3, #144	@ 0x90
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fe83 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800113a:	e028      	b.n	800118e <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM3)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	@ (80011a0 <HAL_TIM_MspPostInit+0xd4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d123      	bne.n	800118e <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <HAL_TIM_MspPostInit+0xd0>)
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	4b14      	ldr	r3, [pc, #80]	@ (800119c <HAL_TIM_MspPostInit+0xd0>)
 800114c:	2180      	movs	r1, #128	@ 0x80
 800114e:	02c9      	lsls	r1, r1, #11
 8001150:	430a      	orrs	r2, r1
 8001152:	615a      	str	r2, [r3, #20]
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_TIM_MspPostInit+0xd0>)
 8001156:	695a      	ldr	r2, [r3, #20]
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	02db      	lsls	r3, r3, #11
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001162:	2114      	movs	r1, #20
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2230      	movs	r2, #48	@ 0x30
 8001168:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	187b      	adds	r3, r7, r1
 800116c:	2202      	movs	r2, #2
 800116e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800117c:	187b      	adds	r3, r7, r1
 800117e:	2201      	movs	r2, #1
 8001180:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	187b      	adds	r3, r7, r1
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <HAL_TIM_MspPostInit+0xd8>)
 8001186:	0019      	movs	r1, r3
 8001188:	0010      	movs	r0, r2
 800118a:	f000 fe59 	bl	8001e40 <HAL_GPIO_Init>
}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b00b      	add	sp, #44	@ 0x2c
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	40012c00 	.word	0x40012c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40000400 	.word	0x40000400
 80011a4:	48000400 	.word	0x48000400

080011a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b08b      	sub	sp, #44	@ 0x2c
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	2414      	movs	r4, #20
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	0018      	movs	r0, r3
 80011b6:	2314      	movs	r3, #20
 80011b8:	001a      	movs	r2, r3
 80011ba:	2100      	movs	r1, #0
 80011bc:	f003 ff32 	bl	8005024 <memset>
  if(huart->Instance==USART2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a20      	ldr	r2, [pc, #128]	@ (8001248 <HAL_UART_MspInit+0xa0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d13a      	bne.n	8001240 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ca:	4b20      	ldr	r3, [pc, #128]	@ (800124c <HAL_UART_MspInit+0xa4>)
 80011cc:	69da      	ldr	r2, [r3, #28]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <HAL_UART_MspInit+0xa4>)
 80011d0:	2180      	movs	r1, #128	@ 0x80
 80011d2:	0289      	lsls	r1, r1, #10
 80011d4:	430a      	orrs	r2, r1
 80011d6:	61da      	str	r2, [r3, #28]
 80011d8:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <HAL_UART_MspInit+0xa4>)
 80011da:	69da      	ldr	r2, [r3, #28]
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	029b      	lsls	r3, r3, #10
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b19      	ldr	r3, [pc, #100]	@ (800124c <HAL_UART_MspInit+0xa4>)
 80011e8:	695a      	ldr	r2, [r3, #20]
 80011ea:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_UART_MspInit+0xa4>)
 80011ec:	2180      	movs	r1, #128	@ 0x80
 80011ee:	0289      	lsls	r1, r1, #10
 80011f0:	430a      	orrs	r2, r1
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_UART_MspInit+0xa4>)
 80011f6:	695a      	ldr	r2, [r3, #20]
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	029b      	lsls	r3, r3, #10
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001202:	0021      	movs	r1, r4
 8001204:	187b      	adds	r3, r7, r1
 8001206:	220c      	movs	r2, #12
 8001208:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	187b      	adds	r3, r7, r1
 800120c:	2202      	movs	r2, #2
 800120e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2203      	movs	r2, #3
 800121a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2201      	movs	r2, #1
 8001220:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	187a      	adds	r2, r7, r1
 8001224:	2390      	movs	r3, #144	@ 0x90
 8001226:	05db      	lsls	r3, r3, #23
 8001228:	0011      	movs	r1, r2
 800122a:	0018      	movs	r0, r3
 800122c:	f000 fe08 	bl	8001e40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	201c      	movs	r0, #28
 8001236:	f000 fd53 	bl	8001ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800123a:	201c      	movs	r0, #28
 800123c:	f000 fd65 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001240:	46c0      	nop			@ (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b00b      	add	sp, #44	@ 0x2c
 8001246:	bd90      	pop	{r4, r7, pc}
 8001248:	40004400 	.word	0x40004400
 800124c:	40021000 	.word	0x40021000

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	46c0      	nop			@ (mov r8, r8)
 8001256:	e7fd      	b.n	8001254 <NMI_Handler+0x4>

08001258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	e7fd      	b.n	800125c <HardFault_Handler+0x4>

08001260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001264:	46c0      	nop			@ (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f000 f8dc 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800128a:	0018      	movs	r0, r3
 800128c:	f001 ff26 	bl	80030dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001290:	46c0      	nop			@ (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	20000108 	.word	0x20000108

0800129c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <TIM1_CC_IRQHandler+0x14>)
 80012a2:	0018      	movs	r0, r3
 80012a4:	f001 ff1a 	bl	80030dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	20000108 	.word	0x20000108

080012b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <TIM2_IRQHandler+0x14>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f001 ff0e 	bl	80030dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	20000150 	.word	0x20000150

080012cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//FEB_Test_PWM();

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <TIM3_IRQHandler+0x14>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f001 ff02 	bl	80030dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012d8:	46c0      	nop			@ (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	20000198 	.word	0x20000198

080012e4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80012e8:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <TIM14_IRQHandler+0x14>)
 80012ea:	0018      	movs	r0, r3
 80012ec:	f001 fef6 	bl	80030dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	200001e0 	.word	0x200001e0

080012fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <USART2_IRQHandler+0x14>)
 8001302:	0018      	movs	r0, r3
 8001304:	f002 ffde 	bl	80042c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	20000228 	.word	0x20000228

08001314 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001318:	46c0      	nop			@ (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001320:	4813      	ldr	r0, [pc, #76]	@ (8001370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001322:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001324:	f7ff fff6 	bl	8001314 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001328:	4812      	ldr	r0, [pc, #72]	@ (8001374 <LoopForever+0x6>)
    LDR R1, [R0]
 800132a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800132c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <LoopForever+0xa>)
    CMP R1, R2
 8001330:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001332:	d105      	bne.n	8001340 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001334:	4811      	ldr	r0, [pc, #68]	@ (800137c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001336:	4912      	ldr	r1, [pc, #72]	@ (8001380 <LoopForever+0x12>)
    STR R1, [R0]
 8001338:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800133a:	4812      	ldr	r0, [pc, #72]	@ (8001384 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800133c:	4912      	ldr	r1, [pc, #72]	@ (8001388 <LoopForever+0x1a>)
    STR R1, [R0]
 800133e:	6001      	str	r1, [r0, #0]

08001340 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001340:	4812      	ldr	r0, [pc, #72]	@ (800138c <LoopForever+0x1e>)
  ldr r1, =_edata
 8001342:	4913      	ldr	r1, [pc, #76]	@ (8001390 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001344:	4a13      	ldr	r2, [pc, #76]	@ (8001394 <LoopForever+0x26>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a10      	ldr	r2, [pc, #64]	@ (8001398 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001358:	4c10      	ldr	r4, [pc, #64]	@ (800139c <LoopForever+0x2e>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001366:	f003 fe65 	bl	8005034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800136a:	f7ff f9ef 	bl	800074c <main>

0800136e <LoopForever>:

LoopForever:
    b LoopForever
 800136e:	e7fe      	b.n	800136e <LoopForever>
  ldr   r0, =_estack
 8001370:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001374:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001378:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800137c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001380:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001384:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001388:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001394:	080050e8 	.word	0x080050e8
  ldr r2, =_sbss
 8001398:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 800139c:	200002b4 	.word	0x200002b4

080013a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_IRQHandler>
	...

080013a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <HAL_Init+0x24>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_Init+0x24>)
 80013ae:	2110      	movs	r1, #16
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f809 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ba:	f7ff fd19 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	40022000 	.word	0x40022000

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <HAL_InitTick+0x5c>)
 80013d6:	681c      	ldr	r4, [r3, #0]
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <HAL_InitTick+0x60>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	0019      	movs	r1, r3
 80013de:	23fa      	movs	r3, #250	@ 0xfa
 80013e0:	0098      	lsls	r0, r3, #2
 80013e2:	f7fe fe91 	bl	8000108 <__udivsi3>
 80013e6:	0003      	movs	r3, r0
 80013e8:	0019      	movs	r1, r3
 80013ea:	0020      	movs	r0, r4
 80013ec:	f7fe fe8c 	bl	8000108 <__udivsi3>
 80013f0:	0003      	movs	r3, r0
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 fc99 	bl	8001d2a <HAL_SYSTICK_Config>
 80013f8:	1e03      	subs	r3, r0, #0
 80013fa:	d001      	beq.n	8001400 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e00f      	b.n	8001420 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d80b      	bhi.n	800141e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	2301      	movs	r3, #1
 800140a:	425b      	negs	r3, r3
 800140c:	2200      	movs	r2, #0
 800140e:	0018      	movs	r0, r3
 8001410:	f000 fc66 	bl	8001ce0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_InitTick+0x64>)
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b003      	add	sp, #12
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	2000003c 	.word	0x2000003c
 800142c:	20000044 	.word	0x20000044
 8001430:	20000040 	.word	0x20000040

08001434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <HAL_IncTick+0x1c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	001a      	movs	r2, r3
 800143e:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_IncTick+0x20>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	18d2      	adds	r2, r2, r3
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_IncTick+0x20>)
 8001446:	601a      	str	r2, [r3, #0]
}
 8001448:	46c0      	nop			@ (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	20000044 	.word	0x20000044
 8001454:	200002b0 	.word	0x200002b0

08001458 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b02      	ldr	r3, [pc, #8]	@ (8001468 <HAL_GetTick+0x10>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	200002b0 	.word	0x200002b0

0800146c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff fff0 	bl	8001458 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3301      	adds	r3, #1
 8001484:	d005      	beq.n	8001492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_Delay+0x44>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	001a      	movs	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	189b      	adds	r3, r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	f7ff ffe0 	bl	8001458 <HAL_GetTick>
 8001498:	0002      	movs	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8f7      	bhi.n	8001494 <HAL_Delay+0x28>
  {
  }
}
 80014a4:	46c0      	nop			@ (mov r8, r8)
 80014a6:	46c0      	nop			@ (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b004      	add	sp, #16
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			@ (mov r8, r8)
 80014b0:	20000044 	.word	0x20000044

080014b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0f0      	b.n	80016a8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2220      	movs	r2, #32
 80014ca:	5c9b      	ldrb	r3, [r3, r2]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d103      	bne.n	80014da <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff fcaf 	bl	8000e38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	430a      	orrs	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ea:	f7ff ffb5 	bl	8001458 <HAL_GetTick>
 80014ee:	0003      	movs	r3, r0
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014f2:	e013      	b.n	800151c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014f4:	f7ff ffb0 	bl	8001458 <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b0a      	cmp	r3, #10
 8001500:	d90c      	bls.n	800151c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	2280      	movs	r2, #128	@ 0x80
 8001508:	0292      	lsls	r2, r2, #10
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2220      	movs	r2, #32
 8001514:	2105      	movs	r1, #5
 8001516:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0c5      	b.n	80016a8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	d0e5      	beq.n	80014f4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2102      	movs	r1, #2
 8001534:	438a      	bics	r2, r1
 8001536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001538:	f7ff ff8e 	bl	8001458 <HAL_GetTick>
 800153c:	0003      	movs	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001540:	e013      	b.n	800156a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001542:	f7ff ff89 	bl	8001458 <HAL_GetTick>
 8001546:	0002      	movs	r2, r0
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b0a      	cmp	r3, #10
 800154e:	d90c      	bls.n	800156a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	2280      	movs	r2, #128	@ 0x80
 8001556:	0292      	lsls	r2, r2, #10
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2220      	movs	r2, #32
 8001562:	2105      	movs	r1, #5
 8001564:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e09e      	b.n	80016a8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2202      	movs	r2, #2
 8001572:	4013      	ands	r3, r2
 8001574:	d1e5      	bne.n	8001542 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7e1b      	ldrb	r3, [r3, #24]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d108      	bne.n	8001590 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2180      	movs	r1, #128	@ 0x80
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e007      	b.n	80015a0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2180      	movs	r1, #128	@ 0x80
 800159c:	438a      	bics	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e5b      	ldrb	r3, [r3, #25]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d108      	bne.n	80015ba <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2140      	movs	r1, #64	@ 0x40
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e007      	b.n	80015ca <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2140      	movs	r1, #64	@ 0x40
 80015c6:	438a      	bics	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7e9b      	ldrb	r3, [r3, #26]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d108      	bne.n	80015e4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2120      	movs	r1, #32
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e007      	b.n	80015f4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2120      	movs	r1, #32
 80015f0:	438a      	bics	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7edb      	ldrb	r3, [r3, #27]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d108      	bne.n	800160e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2110      	movs	r1, #16
 8001608:	438a      	bics	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e007      	b.n	800161e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2110      	movs	r1, #16
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7f1b      	ldrb	r3, [r3, #28]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2108      	movs	r1, #8
 8001632:	430a      	orrs	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e007      	b.n	8001648 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2108      	movs	r1, #8
 8001644:	438a      	bics	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7f5b      	ldrb	r3, [r3, #29]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d108      	bne.n	8001662 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2104      	movs	r1, #4
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e007      	b.n	8001672 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2104      	movs	r1, #4
 800166e:	438a      	bics	r2, r1
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	431a      	orrs	r2, r3
 8001688:	0011      	movs	r1, r2
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	1e5a      	subs	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2220      	movs	r2, #32
 80016a2:	2101      	movs	r1, #1
 80016a4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b004      	add	sp, #16
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016c0:	2013      	movs	r0, #19
 80016c2:	183b      	adds	r3, r7, r0
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	2120      	movs	r1, #32
 80016c8:	5c52      	ldrb	r2, [r2, r1]
 80016ca:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80016cc:	0002      	movs	r2, r0
 80016ce:	18bb      	adds	r3, r7, r2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d004      	beq.n	80016e0 <HAL_CAN_ConfigFilter+0x30>
 80016d6:	18bb      	adds	r3, r7, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d000      	beq.n	80016e0 <HAL_CAN_ConfigFilter+0x30>
 80016de:	e0cd      	b.n	800187c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	58d3      	ldr	r3, [r2, r3]
 80016e8:	2201      	movs	r2, #1
 80016ea:	431a      	orrs	r2, r3
 80016ec:	0011      	movs	r1, r2
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	221f      	movs	r2, #31
 80016fc:	4013      	ands	r3, r2
 80016fe:	2201      	movs	r2, #1
 8001700:	409a      	lsls	r2, r3
 8001702:	0013      	movs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	2387      	movs	r3, #135	@ 0x87
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	58d3      	ldr	r3, [r2, r3]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	43d2      	mvns	r2, r2
 8001712:	401a      	ands	r2, r3
 8001714:	0011      	movs	r1, r2
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	2387      	movs	r3, #135	@ 0x87
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d129      	bne.n	800177a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	2383      	movs	r3, #131	@ 0x83
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	58d3      	ldr	r3, [r2, r3]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	43d2      	mvns	r2, r2
 8001732:	401a      	ands	r2, r3
 8001734:	0011      	movs	r1, r2
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	2383      	movs	r3, #131	@ 0x83
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001750:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3248      	adds	r2, #72	@ 0x48
 8001756:	00d2      	lsls	r2, r2, #3
 8001758:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	041b      	lsls	r3, r3, #16
 8001766:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800176c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800176e:	6979      	ldr	r1, [r7, #20]
 8001770:	3348      	adds	r3, #72	@ 0x48
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	18cb      	adds	r3, r1, r3
 8001776:	3304      	adds	r3, #4
 8001778:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d128      	bne.n	80017d4 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	2383      	movs	r3, #131	@ 0x83
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	58d2      	ldr	r2, [r2, r3]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	431a      	orrs	r2, r3
 800178e:	0011      	movs	r1, r2
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	2383      	movs	r3, #131	@ 0x83
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017aa:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3248      	adds	r2, #72	@ 0x48
 80017b0:	00d2      	lsls	r2, r2, #3
 80017b2:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017c8:	6979      	ldr	r1, [r7, #20]
 80017ca:	3348      	adds	r3, #72	@ 0x48
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	18cb      	adds	r3, r1, r3
 80017d0:	3304      	adds	r3, #4
 80017d2:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10c      	bne.n	80017f6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	2381      	movs	r3, #129	@ 0x81
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	58d3      	ldr	r3, [r2, r3]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	43d2      	mvns	r2, r2
 80017e8:	401a      	ands	r2, r3
 80017ea:	0011      	movs	r1, r2
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	2381      	movs	r3, #129	@ 0x81
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	50d1      	str	r1, [r2, r3]
 80017f4:	e00a      	b.n	800180c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	2381      	movs	r3, #129	@ 0x81
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	58d2      	ldr	r2, [r2, r3]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	431a      	orrs	r2, r3
 8001802:	0011      	movs	r1, r2
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	2381      	movs	r3, #129	@ 0x81
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10c      	bne.n	800182e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	2385      	movs	r3, #133	@ 0x85
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	58d3      	ldr	r3, [r2, r3]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	43d2      	mvns	r2, r2
 8001820:	401a      	ands	r2, r3
 8001822:	0011      	movs	r1, r2
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	2385      	movs	r3, #133	@ 0x85
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	50d1      	str	r1, [r2, r3]
 800182c:	e00a      	b.n	8001844 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	2385      	movs	r3, #133	@ 0x85
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	58d2      	ldr	r2, [r2, r3]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	431a      	orrs	r2, r3
 800183a:	0011      	movs	r1, r2
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	2385      	movs	r3, #133	@ 0x85
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d10a      	bne.n	8001862 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	2387      	movs	r3, #135	@ 0x87
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	58d2      	ldr	r2, [r2, r3]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	431a      	orrs	r2, r3
 8001858:	0011      	movs	r1, r2
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	2387      	movs	r3, #135	@ 0x87
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	58d3      	ldr	r3, [r2, r3]
 800186a:	2201      	movs	r2, #1
 800186c:	4393      	bics	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	2380      	movs	r3, #128	@ 0x80
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	e007      	b.n	800188c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001880:	2280      	movs	r2, #128	@ 0x80
 8001882:	02d2      	lsls	r2, r2, #11
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
  }
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b006      	add	sp, #24
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	5c9b      	ldrb	r3, [r3, r2]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d12f      	bne.n	8001908 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2220      	movs	r2, #32
 80018ac:	2102      	movs	r1, #2
 80018ae:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2101      	movs	r1, #1
 80018bc:	438a      	bics	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018c0:	f7ff fdca 	bl	8001458 <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018c8:	e013      	b.n	80018f2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018ca:	f7ff fdc5 	bl	8001458 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b0a      	cmp	r3, #10
 80018d6:	d90c      	bls.n	80018f2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	2280      	movs	r2, #128	@ 0x80
 80018de:	0292      	lsls	r2, r2, #10
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2220      	movs	r2, #32
 80018ea:	2105      	movs	r1, #5
 80018ec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e012      	b.n	8001918 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	d1e5      	bne.n	80018ca <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	e007      	b.n	8001918 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	2280      	movs	r2, #128	@ 0x80
 800190e:	0312      	lsls	r2, r2, #12
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
  }
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800192e:	201f      	movs	r0, #31
 8001930:	183b      	adds	r3, r7, r0
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	2120      	movs	r1, #32
 8001936:	5c52      	ldrb	r2, [r2, r1]
 8001938:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001942:	183b      	adds	r3, r7, r0
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d004      	beq.n	8001954 <HAL_CAN_AddTxMessage+0x34>
 800194a:	183b      	adds	r3, r7, r0
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d000      	beq.n	8001954 <HAL_CAN_AddTxMessage+0x34>
 8001952:	e0ab      	b.n	8001aac <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	2380      	movs	r3, #128	@ 0x80
 8001958:	04db      	lsls	r3, r3, #19
 800195a:	4013      	ands	r3, r2
 800195c:	d10a      	bne.n	8001974 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	051b      	lsls	r3, r3, #20
 8001964:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001966:	d105      	bne.n	8001974 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	2380      	movs	r3, #128	@ 0x80
 800196c:	055b      	lsls	r3, r3, #21
 800196e:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001970:	d100      	bne.n	8001974 <HAL_CAN_AddTxMessage+0x54>
 8001972:	e092      	b.n	8001a9a <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	0e1b      	lsrs	r3, r3, #24
 8001978:	2203      	movs	r2, #3
 800197a:	4013      	ands	r3, r2
 800197c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800197e:	2201      	movs	r2, #1
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10c      	bne.n	80019aa <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4311      	orrs	r1, r2
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	3218      	adds	r2, #24
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	50d1      	str	r1, [r2, r3]
 80019a8:	e00f      	b.n	80019ca <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019b4:	431a      	orrs	r2, r3
 80019b6:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80019c0:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	3218      	adds	r2, #24
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6819      	ldr	r1, [r3, #0]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3318      	adds	r3, #24
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	18cb      	adds	r3, r1, r3
 80019da:	3304      	adds	r3, #4
 80019dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	7d1b      	ldrb	r3, [r3, #20]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d112      	bne.n	8001a0c <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3318      	adds	r3, #24
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	3304      	adds	r3, #4
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6819      	ldr	r1, [r3, #0]
 80019fa:	2380      	movs	r3, #128	@ 0x80
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3318      	adds	r3, #24
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	18cb      	adds	r3, r1, r3
 8001a08:	3304      	adds	r3, #4
 8001a0a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3307      	adds	r3, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	061a      	lsls	r2, r3, #24
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3306      	adds	r3, #6
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	041b      	lsls	r3, r3, #16
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3305      	adds	r3, #5
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	0019      	movs	r1, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	6979      	ldr	r1, [r7, #20]
 8001a38:	23c6      	movs	r3, #198	@ 0xc6
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	0109      	lsls	r1, r1, #4
 8001a3e:	1841      	adds	r1, r0, r1
 8001a40:	18cb      	adds	r3, r1, r3
 8001a42:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3303      	adds	r3, #3
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	061a      	lsls	r2, r3, #24
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3302      	adds	r3, #2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	0019      	movs	r1, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	6979      	ldr	r1, [r7, #20]
 8001a6e:	23c4      	movs	r3, #196	@ 0xc4
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	0109      	lsls	r1, r1, #4
 8001a74:	1841      	adds	r1, r0, r1
 8001a76:	18cb      	adds	r3, r1, r3
 8001a78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	3218      	adds	r2, #24
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	58d2      	ldr	r2, [r2, r3]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4311      	orrs	r1, r2
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	3218      	adds	r2, #24
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e010      	b.n	8001abc <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	2280      	movs	r2, #128	@ 0x80
 8001aa0:	0392      	lsls	r2, r2, #14
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e007      	b.n	8001abc <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab0:	2280      	movs	r2, #128	@ 0x80
 8001ab2:	02d2      	lsls	r2, r2, #11
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
  }
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b008      	add	sp, #32
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ad0:	200b      	movs	r0, #11
 8001ad2:	183b      	adds	r3, r7, r0
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	2120      	movs	r1, #32
 8001ad8:	5c52      	ldrb	r2, [r2, r1]
 8001ada:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001adc:	0002      	movs	r2, r0
 8001ade:	18bb      	adds	r3, r7, r2
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d003      	beq.n	8001aee <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8001ae6:	18bb      	adds	r3, r7, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d11d      	bne.n	8001b2a <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	04db      	lsls	r3, r3, #19
 8001af8:	4013      	ands	r3, r2
 8001afa:	d002      	beq.n	8001b02 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	051b      	lsls	r3, r3, #20
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d002      	beq.n	8001b16 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3301      	adds	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	2380      	movs	r3, #128	@ 0x80
 8001b1e:	055b      	lsls	r3, r3, #21
 8001b20:	4013      	ands	r3, r2
 8001b22:	d002      	beq.n	8001b2a <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3301      	adds	r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b004      	add	sp, #16
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b3e:	200f      	movs	r0, #15
 8001b40:	183b      	adds	r3, r7, r0
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	2120      	movs	r1, #32
 8001b46:	5c52      	ldrb	r2, [r2, r1]
 8001b48:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	18bb      	adds	r3, r7, r2
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d003      	beq.n	8001b5c <HAL_CAN_ActivateNotification+0x28>
 8001b54:	18bb      	adds	r3, r7, r2
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d109      	bne.n	8001b70 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6959      	ldr	r1, [r3, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e007      	b.n	8001b80 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b74:	2280      	movs	r2, #128	@ 0x80
 8001b76:	02d2      	lsls	r2, r2, #11
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
  }
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b004      	add	sp, #16
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	0002      	movs	r2, r0
 8001b90:	1dfb      	adds	r3, r7, #7
 8001b92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b9a:	d809      	bhi.n	8001bb0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9c:	1dfb      	adds	r3, r7, #7
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	001a      	movs	r2, r3
 8001ba2:	231f      	movs	r3, #31
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <__NVIC_EnableIRQ+0x30>)
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4091      	lsls	r1, r2
 8001bac:	000a      	movs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
  }
}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bd0:	d828      	bhi.n	8001c24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8001c90 <__NVIC_SetPriority+0xd4>)
 8001bd4:	1dfb      	adds	r3, r7, #7
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	33c0      	adds	r3, #192	@ 0xc0
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	589b      	ldr	r3, [r3, r2]
 8001be2:	1dfa      	adds	r2, r7, #7
 8001be4:	7812      	ldrb	r2, [r2, #0]
 8001be6:	0011      	movs	r1, r2
 8001be8:	2203      	movs	r2, #3
 8001bea:	400a      	ands	r2, r1
 8001bec:	00d2      	lsls	r2, r2, #3
 8001bee:	21ff      	movs	r1, #255	@ 0xff
 8001bf0:	4091      	lsls	r1, r2
 8001bf2:	000a      	movs	r2, r1
 8001bf4:	43d2      	mvns	r2, r2
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	019b      	lsls	r3, r3, #6
 8001bfe:	22ff      	movs	r2, #255	@ 0xff
 8001c00:	401a      	ands	r2, r3
 8001c02:	1dfb      	adds	r3, r7, #7
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	0018      	movs	r0, r3
 8001c08:	2303      	movs	r3, #3
 8001c0a:	4003      	ands	r3, r0
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c10:	481f      	ldr	r0, [pc, #124]	@ (8001c90 <__NVIC_SetPriority+0xd4>)
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	33c0      	adds	r3, #192	@ 0xc0
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c22:	e031      	b.n	8001c88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c24:	4a1b      	ldr	r2, [pc, #108]	@ (8001c94 <__NVIC_SetPriority+0xd8>)
 8001c26:	1dfb      	adds	r3, r7, #7
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	400b      	ands	r3, r1
 8001c30:	3b08      	subs	r3, #8
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3306      	adds	r3, #6
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	18d3      	adds	r3, r2, r3
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	1dfa      	adds	r2, r7, #7
 8001c40:	7812      	ldrb	r2, [r2, #0]
 8001c42:	0011      	movs	r1, r2
 8001c44:	2203      	movs	r2, #3
 8001c46:	400a      	ands	r2, r1
 8001c48:	00d2      	lsls	r2, r2, #3
 8001c4a:	21ff      	movs	r1, #255	@ 0xff
 8001c4c:	4091      	lsls	r1, r2
 8001c4e:	000a      	movs	r2, r1
 8001c50:	43d2      	mvns	r2, r2
 8001c52:	401a      	ands	r2, r3
 8001c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	22ff      	movs	r2, #255	@ 0xff
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	1dfb      	adds	r3, r7, #7
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	0018      	movs	r0, r3
 8001c64:	2303      	movs	r3, #3
 8001c66:	4003      	ands	r3, r0
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c6c:	4809      	ldr	r0, [pc, #36]	@ (8001c94 <__NVIC_SetPriority+0xd8>)
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	001c      	movs	r4, r3
 8001c74:	230f      	movs	r3, #15
 8001c76:	4023      	ands	r3, r4
 8001c78:	3b08      	subs	r3, #8
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	3306      	adds	r3, #6
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	18c3      	adds	r3, r0, r3
 8001c84:	3304      	adds	r3, #4
 8001c86:	601a      	str	r2, [r3, #0]
}
 8001c88:	46c0      	nop			@ (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b003      	add	sp, #12
 8001c8e:	bd90      	pop	{r4, r7, pc}
 8001c90:	e000e100 	.word	0xe000e100
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	1e5a      	subs	r2, r3, #1
 8001ca4:	2380      	movs	r3, #128	@ 0x80
 8001ca6:	045b      	lsls	r3, r3, #17
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d301      	bcc.n	8001cb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cac:	2301      	movs	r3, #1
 8001cae:	e010      	b.n	8001cd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <SysTick_Config+0x44>)
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	3a01      	subs	r2, #1
 8001cb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb8:	2301      	movs	r3, #1
 8001cba:	425b      	negs	r3, r3
 8001cbc:	2103      	movs	r1, #3
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7ff ff7c 	bl	8001bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <SysTick_Config+0x44>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <SysTick_Config+0x44>)
 8001ccc:	2207      	movs	r2, #7
 8001cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b002      	add	sp, #8
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	e000e010 	.word	0xe000e010

08001ce0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	210f      	movs	r1, #15
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	1c02      	adds	r2, r0, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff ff5d 	bl	8001bbc <__NVIC_SetPriority>
}
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b004      	add	sp, #16
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	0002      	movs	r2, r0
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d16:	1dfb      	adds	r3, r7, #7
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b25b      	sxtb	r3, r3
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff ff33 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b002      	add	sp, #8
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	0018      	movs	r0, r3
 8001d36:	f7ff ffaf 	bl	8001c98 <SysTick_Config>
 8001d3a:	0003      	movs	r3, r0
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b002      	add	sp, #8
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2221      	movs	r2, #33	@ 0x21
 8001d50:	5c9b      	ldrb	r3, [r3, r2]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d008      	beq.n	8001d6a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	2100      	movs	r1, #0
 8001d64:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e020      	b.n	8001dac <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	210e      	movs	r1, #14
 8001d76:	438a      	bics	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2101      	movs	r1, #1
 8001d86:	438a      	bics	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d92:	2101      	movs	r1, #1
 8001d94:	4091      	lsls	r1, r2
 8001d96:	000a      	movs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2221      	movs	r2, #33	@ 0x21
 8001d9e:	2101      	movs	r1, #1
 8001da0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2220      	movs	r2, #32
 8001da6:	2100      	movs	r1, #0
 8001da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbc:	210f      	movs	r1, #15
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2221      	movs	r2, #33	@ 0x21
 8001dc8:	5c9b      	ldrb	r3, [r3, r2]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d006      	beq.n	8001dde <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e028      	b.n	8001e30 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	210e      	movs	r1, #14
 8001dea:	438a      	bics	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	438a      	bics	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e06:	2101      	movs	r1, #1
 8001e08:	4091      	lsls	r1, r2
 8001e0a:	000a      	movs	r2, r1
 8001e0c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2221      	movs	r2, #33	@ 0x21
 8001e12:	2101      	movs	r1, #1
 8001e14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	0010      	movs	r0, r2
 8001e2e:	4798      	blx	r3
    }
  }
  return status;
 8001e30:	230f      	movs	r3, #15
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	781b      	ldrb	r3, [r3, #0]
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b004      	add	sp, #16
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	e149      	b.n	80020e4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2101      	movs	r1, #1
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4091      	lsls	r1, r2
 8001e5a:	000a      	movs	r2, r1
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d100      	bne.n	8001e68 <HAL_GPIO_Init+0x28>
 8001e66:	e13a      	b.n	80020de <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d005      	beq.n	8001e80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d130      	bne.n	8001ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	0013      	movs	r3, r2
 8001e90:	43da      	mvns	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	2201      	movs	r2, #1
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d017      	beq.n	8001f1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	409a      	lsls	r2, r3
 8001efc:	0013      	movs	r3, r2
 8001efe:	43da      	mvns	r2, r3
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	0013      	movs	r3, r2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2203      	movs	r2, #3
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d123      	bne.n	8001f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	58d3      	ldr	r3, [r2, r3]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	409a      	lsls	r2, r3
 8001f44:	0013      	movs	r3, r2
 8001f46:	43da      	mvns	r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2107      	movs	r1, #7
 8001f56:	400b      	ands	r3, r1
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	0092      	lsls	r2, r2, #2
 8001f6e:	6939      	ldr	r1, [r7, #16]
 8001f70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	0013      	movs	r3, r2
 8001f82:	43da      	mvns	r2, r3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2203      	movs	r2, #3
 8001f90:	401a      	ands	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	409a      	lsls	r2, r3
 8001f98:	0013      	movs	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	23c0      	movs	r3, #192	@ 0xc0
 8001fac:	029b      	lsls	r3, r3, #10
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d100      	bne.n	8001fb4 <HAL_GPIO_Init+0x174>
 8001fb2:	e094      	b.n	80020de <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb4:	4b51      	ldr	r3, [pc, #324]	@ (80020fc <HAL_GPIO_Init+0x2bc>)
 8001fb6:	699a      	ldr	r2, [r3, #24]
 8001fb8:	4b50      	ldr	r3, [pc, #320]	@ (80020fc <HAL_GPIO_Init+0x2bc>)
 8001fba:	2101      	movs	r1, #1
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	619a      	str	r2, [r3, #24]
 8001fc0:	4b4e      	ldr	r3, [pc, #312]	@ (80020fc <HAL_GPIO_Init+0x2bc>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fcc:	4a4c      	ldr	r2, [pc, #304]	@ (8002100 <HAL_GPIO_Init+0x2c0>)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	589b      	ldr	r3, [r3, r2]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2203      	movs	r2, #3
 8001fde:	4013      	ands	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	0013      	movs	r3, r2
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	2390      	movs	r3, #144	@ 0x90
 8001ff4:	05db      	lsls	r3, r3, #23
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d00d      	beq.n	8002016 <HAL_GPIO_Init+0x1d6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a41      	ldr	r2, [pc, #260]	@ (8002104 <HAL_GPIO_Init+0x2c4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d007      	beq.n	8002012 <HAL_GPIO_Init+0x1d2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a40      	ldr	r2, [pc, #256]	@ (8002108 <HAL_GPIO_Init+0x2c8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_GPIO_Init+0x1ce>
 800200a:	2302      	movs	r3, #2
 800200c:	e004      	b.n	8002018 <HAL_GPIO_Init+0x1d8>
 800200e:	2305      	movs	r3, #5
 8002010:	e002      	b.n	8002018 <HAL_GPIO_Init+0x1d8>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x1d8>
 8002016:	2300      	movs	r3, #0
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	2103      	movs	r1, #3
 800201c:	400a      	ands	r2, r1
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	4093      	lsls	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002028:	4935      	ldr	r1, [pc, #212]	@ (8002100 <HAL_GPIO_Init+0x2c0>)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002036:	4b35      	ldr	r3, [pc, #212]	@ (800210c <HAL_GPIO_Init+0x2cc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43da      	mvns	r2, r3
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	2380      	movs	r3, #128	@ 0x80
 800204c:	035b      	lsls	r3, r3, #13
 800204e:	4013      	ands	r3, r2
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800205a:	4b2c      	ldr	r3, [pc, #176]	@ (800210c <HAL_GPIO_Init+0x2cc>)
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002060:	4b2a      	ldr	r3, [pc, #168]	@ (800210c <HAL_GPIO_Init+0x2cc>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43da      	mvns	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	2380      	movs	r3, #128	@ 0x80
 8002076:	039b      	lsls	r3, r3, #14
 8002078:	4013      	ands	r3, r2
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002084:	4b21      	ldr	r3, [pc, #132]	@ (800210c <HAL_GPIO_Init+0x2cc>)
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800208a:	4b20      	ldr	r3, [pc, #128]	@ (800210c <HAL_GPIO_Init+0x2cc>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43da      	mvns	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	029b      	lsls	r3, r3, #10
 80020a2:	4013      	ands	r3, r2
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020ae:	4b17      	ldr	r3, [pc, #92]	@ (800210c <HAL_GPIO_Init+0x2cc>)
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80020b4:	4b15      	ldr	r3, [pc, #84]	@ (800210c <HAL_GPIO_Init+0x2cc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43da      	mvns	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	025b      	lsls	r3, r3, #9
 80020cc:	4013      	ands	r3, r2
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <HAL_GPIO_Init+0x2cc>)
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	40da      	lsrs	r2, r3
 80020ec:	1e13      	subs	r3, r2, #0
 80020ee:	d000      	beq.n	80020f2 <HAL_GPIO_Init+0x2b2>
 80020f0:	e6ae      	b.n	8001e50 <HAL_GPIO_Init+0x10>
  } 
}
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	46c0      	nop			@ (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b006      	add	sp, #24
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010000 	.word	0x40010000
 8002104:	48000400 	.word	0x48000400
 8002108:	48000800 	.word	0x48000800
 800210c:	40010400 	.word	0x40010400

08002110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	f000 fb76 	bl	8002810 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2201      	movs	r2, #1
 800212a:	4013      	ands	r3, r2
 800212c:	d100      	bne.n	8002130 <HAL_RCC_OscConfig+0x20>
 800212e:	e08e      	b.n	800224e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002130:	4bc5      	ldr	r3, [pc, #788]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	220c      	movs	r2, #12
 8002136:	4013      	ands	r3, r2
 8002138:	2b04      	cmp	r3, #4
 800213a:	d00e      	beq.n	800215a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800213c:	4bc2      	ldr	r3, [pc, #776]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	220c      	movs	r2, #12
 8002142:	4013      	ands	r3, r2
 8002144:	2b08      	cmp	r3, #8
 8002146:	d117      	bne.n	8002178 <HAL_RCC_OscConfig+0x68>
 8002148:	4bbf      	ldr	r3, [pc, #764]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	23c0      	movs	r3, #192	@ 0xc0
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	401a      	ands	r2, r3
 8002152:	2380      	movs	r3, #128	@ 0x80
 8002154:	025b      	lsls	r3, r3, #9
 8002156:	429a      	cmp	r2, r3
 8002158:	d10e      	bne.n	8002178 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215a:	4bbb      	ldr	r3, [pc, #748]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	@ 0x80
 8002160:	029b      	lsls	r3, r3, #10
 8002162:	4013      	ands	r3, r2
 8002164:	d100      	bne.n	8002168 <HAL_RCC_OscConfig+0x58>
 8002166:	e071      	b.n	800224c <HAL_RCC_OscConfig+0x13c>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d000      	beq.n	8002172 <HAL_RCC_OscConfig+0x62>
 8002170:	e06c      	b.n	800224c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	f000 fb4c 	bl	8002810 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d107      	bne.n	8002190 <HAL_RCC_OscConfig+0x80>
 8002180:	4bb1      	ldr	r3, [pc, #708]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4bb0      	ldr	r3, [pc, #704]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002186:	2180      	movs	r1, #128	@ 0x80
 8002188:	0249      	lsls	r1, r1, #9
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e02f      	b.n	80021f0 <HAL_RCC_OscConfig+0xe0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10c      	bne.n	80021b2 <HAL_RCC_OscConfig+0xa2>
 8002198:	4bab      	ldr	r3, [pc, #684]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4baa      	ldr	r3, [pc, #680]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 800219e:	49ab      	ldr	r1, [pc, #684]	@ (800244c <HAL_RCC_OscConfig+0x33c>)
 80021a0:	400a      	ands	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	4ba8      	ldr	r3, [pc, #672]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4ba7      	ldr	r3, [pc, #668]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80021aa:	49a9      	ldr	r1, [pc, #676]	@ (8002450 <HAL_RCC_OscConfig+0x340>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e01e      	b.n	80021f0 <HAL_RCC_OscConfig+0xe0>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d10e      	bne.n	80021d8 <HAL_RCC_OscConfig+0xc8>
 80021ba:	4ba3      	ldr	r3, [pc, #652]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4ba2      	ldr	r3, [pc, #648]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80021c0:	2180      	movs	r1, #128	@ 0x80
 80021c2:	02c9      	lsls	r1, r1, #11
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	4b9f      	ldr	r3, [pc, #636]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b9e      	ldr	r3, [pc, #632]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80021ce:	2180      	movs	r1, #128	@ 0x80
 80021d0:	0249      	lsls	r1, r1, #9
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xe0>
 80021d8:	4b9b      	ldr	r3, [pc, #620]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b9a      	ldr	r3, [pc, #616]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80021de:	499b      	ldr	r1, [pc, #620]	@ (800244c <HAL_RCC_OscConfig+0x33c>)
 80021e0:	400a      	ands	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	4b98      	ldr	r3, [pc, #608]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b97      	ldr	r3, [pc, #604]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80021ea:	4999      	ldr	r1, [pc, #612]	@ (8002450 <HAL_RCC_OscConfig+0x340>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d014      	beq.n	8002222 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff f92e 	bl	8001458 <HAL_GetTick>
 80021fc:	0003      	movs	r3, r0
 80021fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002202:	f7ff f929 	bl	8001458 <HAL_GetTick>
 8002206:	0002      	movs	r2, r0
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b64      	cmp	r3, #100	@ 0x64
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e2fd      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002214:	4b8c      	ldr	r3, [pc, #560]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	029b      	lsls	r3, r3, #10
 800221c:	4013      	ands	r3, r2
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0xf2>
 8002220:	e015      	b.n	800224e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7ff f919 	bl	8001458 <HAL_GetTick>
 8002226:	0003      	movs	r3, r0
 8002228:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222c:	f7ff f914 	bl	8001458 <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	@ 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e2e8      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	4b82      	ldr	r3, [pc, #520]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	2380      	movs	r3, #128	@ 0x80
 8002244:	029b      	lsls	r3, r3, #10
 8002246:	4013      	ands	r3, r2
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x11c>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	d100      	bne.n	800225a <HAL_RCC_OscConfig+0x14a>
 8002258:	e06c      	b.n	8002334 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800225a:	4b7b      	ldr	r3, [pc, #492]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	220c      	movs	r2, #12
 8002260:	4013      	ands	r3, r2
 8002262:	d00e      	beq.n	8002282 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002264:	4b78      	ldr	r3, [pc, #480]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	220c      	movs	r2, #12
 800226a:	4013      	ands	r3, r2
 800226c:	2b08      	cmp	r3, #8
 800226e:	d11f      	bne.n	80022b0 <HAL_RCC_OscConfig+0x1a0>
 8002270:	4b75      	ldr	r3, [pc, #468]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	23c0      	movs	r3, #192	@ 0xc0
 8002276:	025b      	lsls	r3, r3, #9
 8002278:	401a      	ands	r2, r3
 800227a:	2380      	movs	r3, #128	@ 0x80
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	429a      	cmp	r2, r3
 8002280:	d116      	bne.n	80022b0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002282:	4b71      	ldr	r3, [pc, #452]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2202      	movs	r2, #2
 8002288:	4013      	ands	r3, r2
 800228a:	d005      	beq.n	8002298 <HAL_RCC_OscConfig+0x188>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e2bb      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b6b      	ldr	r3, [pc, #428]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	22f8      	movs	r2, #248	@ 0xf8
 800229e:	4393      	bics	r3, r2
 80022a0:	0019      	movs	r1, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00da      	lsls	r2, r3, #3
 80022a8:	4b67      	ldr	r3, [pc, #412]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ae:	e041      	b.n	8002334 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d024      	beq.n	8002302 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b8:	4b63      	ldr	r3, [pc, #396]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b62      	ldr	r3, [pc, #392]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80022be:	2101      	movs	r1, #1
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff f8c8 	bl	8001458 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff f8c3 	bl	8001458 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e297      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b59      	ldr	r3, [pc, #356]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	d0f1      	beq.n	80022ce <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ea:	4b57      	ldr	r3, [pc, #348]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	22f8      	movs	r2, #248	@ 0xf8
 80022f0:	4393      	bics	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	00da      	lsls	r2, r3, #3
 80022fa:	4b53      	ldr	r3, [pc, #332]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e018      	b.n	8002334 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b51      	ldr	r3, [pc, #324]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b50      	ldr	r3, [pc, #320]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002308:	2101      	movs	r1, #1
 800230a:	438a      	bics	r2, r1
 800230c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7ff f8a3 	bl	8001458 <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002318:	f7ff f89e 	bl	8001458 <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e272      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	4b47      	ldr	r3, [pc, #284]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2202      	movs	r2, #2
 8002330:	4013      	ands	r3, r2
 8002332:	d1f1      	bne.n	8002318 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2208      	movs	r2, #8
 800233a:	4013      	ands	r3, r2
 800233c:	d036      	beq.n	80023ac <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d019      	beq.n	800237a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002346:	4b40      	ldr	r3, [pc, #256]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800234a:	4b3f      	ldr	r3, [pc, #252]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 800234c:	2101      	movs	r1, #1
 800234e:	430a      	orrs	r2, r1
 8002350:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7ff f881 	bl	8001458 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235c:	f7ff f87c 	bl	8001458 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e250      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	4b36      	ldr	r3, [pc, #216]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d0f1      	beq.n	800235c <HAL_RCC_OscConfig+0x24c>
 8002378:	e018      	b.n	80023ac <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237a:	4b33      	ldr	r3, [pc, #204]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 800237c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800237e:	4b32      	ldr	r3, [pc, #200]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 8002380:	2101      	movs	r1, #1
 8002382:	438a      	bics	r2, r1
 8002384:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7ff f867 	bl	8001458 <HAL_GetTick>
 800238a:	0003      	movs	r3, r0
 800238c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002390:	f7ff f862 	bl	8001458 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e236      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a2:	4b29      	ldr	r3, [pc, #164]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	2202      	movs	r2, #2
 80023a8:	4013      	ands	r3, r2
 80023aa:	d1f1      	bne.n	8002390 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2204      	movs	r2, #4
 80023b2:	4013      	ands	r3, r2
 80023b4:	d100      	bne.n	80023b8 <HAL_RCC_OscConfig+0x2a8>
 80023b6:	e0b5      	b.n	8002524 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b8:	201f      	movs	r0, #31
 80023ba:	183b      	adds	r3, r7, r0
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c0:	4b21      	ldr	r3, [pc, #132]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	4013      	ands	r3, r2
 80023ca:	d110      	bne.n	80023ee <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80023d2:	2180      	movs	r1, #128	@ 0x80
 80023d4:	0549      	lsls	r1, r1, #21
 80023d6:	430a      	orrs	r2, r1
 80023d8:	61da      	str	r2, [r3, #28]
 80023da:	4b1b      	ldr	r3, [pc, #108]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 80023dc:	69da      	ldr	r2, [r3, #28]
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	055b      	lsls	r3, r3, #21
 80023e2:	4013      	ands	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023e8:	183b      	adds	r3, r7, r0
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ee:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <HAL_RCC_OscConfig+0x344>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4013      	ands	r3, r2
 80023f8:	d11a      	bne.n	8002430 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fa:	4b16      	ldr	r3, [pc, #88]	@ (8002454 <HAL_RCC_OscConfig+0x344>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_RCC_OscConfig+0x344>)
 8002400:	2180      	movs	r1, #128	@ 0x80
 8002402:	0049      	lsls	r1, r1, #1
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002408:	f7ff f826 	bl	8001458 <HAL_GetTick>
 800240c:	0003      	movs	r3, r0
 800240e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7ff f821 	bl	8001458 <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b64      	cmp	r3, #100	@ 0x64
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e1f5      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <HAL_RCC_OscConfig+0x344>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4013      	ands	r3, r2
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10f      	bne.n	8002458 <HAL_RCC_OscConfig+0x348>
 8002438:	4b03      	ldr	r3, [pc, #12]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 800243a:	6a1a      	ldr	r2, [r3, #32]
 800243c:	4b02      	ldr	r3, [pc, #8]	@ (8002448 <HAL_RCC_OscConfig+0x338>)
 800243e:	2101      	movs	r1, #1
 8002440:	430a      	orrs	r2, r1
 8002442:	621a      	str	r2, [r3, #32]
 8002444:	e036      	b.n	80024b4 <HAL_RCC_OscConfig+0x3a4>
 8002446:	46c0      	nop			@ (mov r8, r8)
 8002448:	40021000 	.word	0x40021000
 800244c:	fffeffff 	.word	0xfffeffff
 8002450:	fffbffff 	.word	0xfffbffff
 8002454:	40007000 	.word	0x40007000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10c      	bne.n	800247a <HAL_RCC_OscConfig+0x36a>
 8002460:	4bca      	ldr	r3, [pc, #808]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	4bc9      	ldr	r3, [pc, #804]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002466:	2101      	movs	r1, #1
 8002468:	438a      	bics	r2, r1
 800246a:	621a      	str	r2, [r3, #32]
 800246c:	4bc7      	ldr	r3, [pc, #796]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800246e:	6a1a      	ldr	r2, [r3, #32]
 8002470:	4bc6      	ldr	r3, [pc, #792]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002472:	2104      	movs	r1, #4
 8002474:	438a      	bics	r2, r1
 8002476:	621a      	str	r2, [r3, #32]
 8002478:	e01c      	b.n	80024b4 <HAL_RCC_OscConfig+0x3a4>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0x38c>
 8002482:	4bc2      	ldr	r3, [pc, #776]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002484:	6a1a      	ldr	r2, [r3, #32]
 8002486:	4bc1      	ldr	r3, [pc, #772]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002488:	2104      	movs	r1, #4
 800248a:	430a      	orrs	r2, r1
 800248c:	621a      	str	r2, [r3, #32]
 800248e:	4bbf      	ldr	r3, [pc, #764]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002490:	6a1a      	ldr	r2, [r3, #32]
 8002492:	4bbe      	ldr	r3, [pc, #760]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002494:	2101      	movs	r1, #1
 8002496:	430a      	orrs	r2, r1
 8002498:	621a      	str	r2, [r3, #32]
 800249a:	e00b      	b.n	80024b4 <HAL_RCC_OscConfig+0x3a4>
 800249c:	4bbb      	ldr	r3, [pc, #748]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800249e:	6a1a      	ldr	r2, [r3, #32]
 80024a0:	4bba      	ldr	r3, [pc, #744]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80024a2:	2101      	movs	r1, #1
 80024a4:	438a      	bics	r2, r1
 80024a6:	621a      	str	r2, [r3, #32]
 80024a8:	4bb8      	ldr	r3, [pc, #736]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80024aa:	6a1a      	ldr	r2, [r3, #32]
 80024ac:	4bb7      	ldr	r3, [pc, #732]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80024ae:	2104      	movs	r1, #4
 80024b0:	438a      	bics	r2, r1
 80024b2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d014      	beq.n	80024e6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024bc:	f7fe ffcc 	bl	8001458 <HAL_GetTick>
 80024c0:	0003      	movs	r3, r0
 80024c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e009      	b.n	80024da <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe ffc7 	bl	8001458 <HAL_GetTick>
 80024ca:	0002      	movs	r2, r0
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	4aaf      	ldr	r2, [pc, #700]	@ (8002790 <HAL_RCC_OscConfig+0x680>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e19a      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024da:	4bac      	ldr	r3, [pc, #688]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	2202      	movs	r2, #2
 80024e0:	4013      	ands	r3, r2
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x3b6>
 80024e4:	e013      	b.n	800250e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7fe ffb7 	bl	8001458 <HAL_GetTick>
 80024ea:	0003      	movs	r3, r0
 80024ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ee:	e009      	b.n	8002504 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7fe ffb2 	bl	8001458 <HAL_GetTick>
 80024f4:	0002      	movs	r2, r0
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	4aa5      	ldr	r2, [pc, #660]	@ (8002790 <HAL_RCC_OscConfig+0x680>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e185      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002504:	4ba1      	ldr	r3, [pc, #644]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	2202      	movs	r2, #2
 800250a:	4013      	ands	r3, r2
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800250e:	231f      	movs	r3, #31
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002518:	4b9c      	ldr	r3, [pc, #624]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800251a:	69da      	ldr	r2, [r3, #28]
 800251c:	4b9b      	ldr	r3, [pc, #620]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800251e:	499d      	ldr	r1, [pc, #628]	@ (8002794 <HAL_RCC_OscConfig+0x684>)
 8002520:	400a      	ands	r2, r1
 8002522:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2210      	movs	r2, #16
 800252a:	4013      	ands	r3, r2
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d12a      	bne.n	800258c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002536:	4b95      	ldr	r3, [pc, #596]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800253a:	4b94      	ldr	r3, [pc, #592]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800253c:	2104      	movs	r1, #4
 800253e:	430a      	orrs	r2, r1
 8002540:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002542:	4b92      	ldr	r3, [pc, #584]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002546:	4b91      	ldr	r3, [pc, #580]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002548:	2101      	movs	r1, #1
 800254a:	430a      	orrs	r2, r1
 800254c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7fe ff83 	bl	8001458 <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002558:	f7fe ff7e 	bl	8001458 <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e152      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800256a:	4b88      	ldr	r3, [pc, #544]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800256c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256e:	2202      	movs	r2, #2
 8002570:	4013      	ands	r3, r2
 8002572:	d0f1      	beq.n	8002558 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002574:	4b85      	ldr	r3, [pc, #532]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002578:	22f8      	movs	r2, #248	@ 0xf8
 800257a:	4393      	bics	r3, r2
 800257c:	0019      	movs	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	00da      	lsls	r2, r3, #3
 8002584:	4b81      	ldr	r3, [pc, #516]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002586:	430a      	orrs	r2, r1
 8002588:	635a      	str	r2, [r3, #52]	@ 0x34
 800258a:	e034      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	3305      	adds	r3, #5
 8002592:	d111      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002594:	4b7d      	ldr	r3, [pc, #500]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002598:	4b7c      	ldr	r3, [pc, #496]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800259a:	2104      	movs	r1, #4
 800259c:	438a      	bics	r2, r1
 800259e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025a0:	4b7a      	ldr	r3, [pc, #488]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80025a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a4:	22f8      	movs	r2, #248	@ 0xf8
 80025a6:	4393      	bics	r3, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	00da      	lsls	r2, r3, #3
 80025b0:	4b76      	ldr	r3, [pc, #472]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80025b2:	430a      	orrs	r2, r1
 80025b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80025b6:	e01e      	b.n	80025f6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025b8:	4b74      	ldr	r3, [pc, #464]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80025ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025bc:	4b73      	ldr	r3, [pc, #460]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80025be:	2104      	movs	r1, #4
 80025c0:	430a      	orrs	r2, r1
 80025c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80025c4:	4b71      	ldr	r3, [pc, #452]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80025c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025c8:	4b70      	ldr	r3, [pc, #448]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80025ca:	2101      	movs	r1, #1
 80025cc:	438a      	bics	r2, r1
 80025ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d0:	f7fe ff42 	bl	8001458 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025da:	f7fe ff3d 	bl	8001458 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e111      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025ec:	4b67      	ldr	r3, [pc, #412]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80025ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f0:	2202      	movs	r2, #2
 80025f2:	4013      	ands	r3, r2
 80025f4:	d1f1      	bne.n	80025da <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2220      	movs	r2, #32
 80025fc:	4013      	ands	r3, r2
 80025fe:	d05c      	beq.n	80026ba <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002600:	4b62      	ldr	r3, [pc, #392]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	220c      	movs	r2, #12
 8002606:	4013      	ands	r3, r2
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d00e      	beq.n	800262a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800260c:	4b5f      	ldr	r3, [pc, #380]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	220c      	movs	r2, #12
 8002612:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002614:	2b08      	cmp	r3, #8
 8002616:	d114      	bne.n	8002642 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002618:	4b5c      	ldr	r3, [pc, #368]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	23c0      	movs	r3, #192	@ 0xc0
 800261e:	025b      	lsls	r3, r3, #9
 8002620:	401a      	ands	r2, r3
 8002622:	23c0      	movs	r3, #192	@ 0xc0
 8002624:	025b      	lsls	r3, r3, #9
 8002626:	429a      	cmp	r2, r3
 8002628:	d10b      	bne.n	8002642 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800262a:	4b58      	ldr	r3, [pc, #352]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800262c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	029b      	lsls	r3, r3, #10
 8002632:	4013      	ands	r3, r2
 8002634:	d040      	beq.n	80026b8 <HAL_RCC_OscConfig+0x5a8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d03c      	beq.n	80026b8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0e6      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01b      	beq.n	8002682 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800264a:	4b50      	ldr	r3, [pc, #320]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800264c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800264e:	4b4f      	ldr	r3, [pc, #316]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002650:	2180      	movs	r1, #128	@ 0x80
 8002652:	0249      	lsls	r1, r1, #9
 8002654:	430a      	orrs	r2, r1
 8002656:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fefe 	bl	8001458 <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002662:	f7fe fef9 	bl	8001458 <HAL_GetTick>
 8002666:	0002      	movs	r2, r0
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0cd      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002674:	4b45      	ldr	r3, [pc, #276]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	4013      	ands	r3, r2
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x552>
 8002680:	e01b      	b.n	80026ba <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002682:	4b42      	ldr	r3, [pc, #264]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002686:	4b41      	ldr	r3, [pc, #260]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002688:	4943      	ldr	r1, [pc, #268]	@ (8002798 <HAL_RCC_OscConfig+0x688>)
 800268a:	400a      	ands	r2, r1
 800268c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe fee3 	bl	8001458 <HAL_GetTick>
 8002692:	0003      	movs	r3, r0
 8002694:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002698:	f7fe fede 	bl	8001458 <HAL_GetTick>
 800269c:	0002      	movs	r2, r0
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e0b2      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80026aa:	4b38      	ldr	r3, [pc, #224]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80026ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ae:	2380      	movs	r3, #128	@ 0x80
 80026b0:	029b      	lsls	r3, r3, #10
 80026b2:	4013      	ands	r3, r2
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x588>
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80026b8:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d100      	bne.n	80026c4 <HAL_RCC_OscConfig+0x5b4>
 80026c2:	e0a4      	b.n	800280e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c4:	4b31      	ldr	r3, [pc, #196]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	220c      	movs	r2, #12
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d100      	bne.n	80026d2 <HAL_RCC_OscConfig+0x5c2>
 80026d0:	e078      	b.n	80027c4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d14c      	bne.n	8002774 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b2c      	ldr	r3, [pc, #176]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 80026e0:	492e      	ldr	r1, [pc, #184]	@ (800279c <HAL_RCC_OscConfig+0x68c>)
 80026e2:	400a      	ands	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe feb7 	bl	8001458 <HAL_GetTick>
 80026ea:	0003      	movs	r3, r0
 80026ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe feb2 	bl	8001458 <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e086      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002702:	4b22      	ldr	r3, [pc, #136]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	049b      	lsls	r3, r3, #18
 800270a:	4013      	ands	r3, r2
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270e:	4b1f      	ldr	r3, [pc, #124]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	220f      	movs	r2, #15
 8002714:	4393      	bics	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800271c:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800271e:	430a      	orrs	r2, r1
 8002720:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002722:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a1e      	ldr	r2, [pc, #120]	@ (80027a0 <HAL_RCC_OscConfig+0x690>)
 8002728:	4013      	ands	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	431a      	orrs	r2, r3
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b12      	ldr	r3, [pc, #72]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002742:	2180      	movs	r1, #128	@ 0x80
 8002744:	0449      	lsls	r1, r1, #17
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fe85 	bl	8001458 <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe fe80 	bl	8001458 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e054      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	2380      	movs	r3, #128	@ 0x80
 800276c:	049b      	lsls	r3, r3, #18
 800276e:	4013      	ands	r3, r2
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x644>
 8002772:	e04c      	b.n	800280e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002774:	4b05      	ldr	r3, [pc, #20]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b04      	ldr	r3, [pc, #16]	@ (800278c <HAL_RCC_OscConfig+0x67c>)
 800277a:	4908      	ldr	r1, [pc, #32]	@ (800279c <HAL_RCC_OscConfig+0x68c>)
 800277c:	400a      	ands	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe fe6a 	bl	8001458 <HAL_GetTick>
 8002784:	0003      	movs	r3, r0
 8002786:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x6a6>
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	40021000 	.word	0x40021000
 8002790:	00001388 	.word	0x00001388
 8002794:	efffffff 	.word	0xefffffff
 8002798:	fffeffff 	.word	0xfffeffff
 800279c:	feffffff 	.word	0xfeffffff
 80027a0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe fe58 	bl	8001458 <HAL_GetTick>
 80027a8:	0002      	movs	r2, r0
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e02c      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b6:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <HAL_RCC_OscConfig+0x708>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	049b      	lsls	r3, r3, #18
 80027be:	4013      	ands	r3, r2
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x694>
 80027c2:	e024      	b.n	800280e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e01f      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80027d0:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <HAL_RCC_OscConfig+0x708>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80027d6:	4b10      	ldr	r3, [pc, #64]	@ (8002818 <HAL_RCC_OscConfig+0x708>)
 80027d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027da:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	23c0      	movs	r3, #192	@ 0xc0
 80027e0:	025b      	lsls	r3, r3, #9
 80027e2:	401a      	ands	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d10e      	bne.n	800280a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	220f      	movs	r2, #15
 80027f0:	401a      	ands	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d107      	bne.n	800280a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	23f0      	movs	r3, #240	@ 0xf0
 80027fe:	039b      	lsls	r3, r3, #14
 8002800:	401a      	ands	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d001      	beq.n	800280e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b008      	add	sp, #32
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000

0800281c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0bf      	b.n	80029b0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b61      	ldr	r3, [pc, #388]	@ (80029b8 <HAL_RCC_ClockConfig+0x19c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2201      	movs	r2, #1
 8002836:	4013      	ands	r3, r2
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d911      	bls.n	8002862 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b5e      	ldr	r3, [pc, #376]	@ (80029b8 <HAL_RCC_ClockConfig+0x19c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	4393      	bics	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	4b5b      	ldr	r3, [pc, #364]	@ (80029b8 <HAL_RCC_ClockConfig+0x19c>)
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002850:	4b59      	ldr	r3, [pc, #356]	@ (80029b8 <HAL_RCC_ClockConfig+0x19c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2201      	movs	r2, #1
 8002856:	4013      	ands	r3, r2
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d001      	beq.n	8002862 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e0a6      	b.n	80029b0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2202      	movs	r2, #2
 8002868:	4013      	ands	r3, r2
 800286a:	d015      	beq.n	8002898 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2204      	movs	r2, #4
 8002872:	4013      	ands	r3, r2
 8002874:	d006      	beq.n	8002884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002876:	4b51      	ldr	r3, [pc, #324]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	4b50      	ldr	r3, [pc, #320]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 800287c:	21e0      	movs	r1, #224	@ 0xe0
 800287e:	00c9      	lsls	r1, r1, #3
 8002880:	430a      	orrs	r2, r1
 8002882:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002884:	4b4d      	ldr	r3, [pc, #308]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	22f0      	movs	r2, #240	@ 0xf0
 800288a:	4393      	bics	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	4b4a      	ldr	r3, [pc, #296]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2201      	movs	r2, #1
 800289e:	4013      	ands	r3, r2
 80028a0:	d04c      	beq.n	800293c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b44      	ldr	r3, [pc, #272]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	2380      	movs	r3, #128	@ 0x80
 80028b0:	029b      	lsls	r3, r3, #10
 80028b2:	4013      	ands	r3, r2
 80028b4:	d120      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e07a      	b.n	80029b0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	4b3e      	ldr	r3, [pc, #248]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	@ 0x80
 80028c8:	049b      	lsls	r3, r3, #18
 80028ca:	4013      	ands	r3, r2
 80028cc:	d114      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e06e      	b.n	80029b0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028da:	4b38      	ldr	r3, [pc, #224]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 80028dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028de:	2380      	movs	r3, #128	@ 0x80
 80028e0:	029b      	lsls	r3, r3, #10
 80028e2:	4013      	ands	r3, r2
 80028e4:	d108      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e062      	b.n	80029b0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2202      	movs	r2, #2
 80028f0:	4013      	ands	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e05b      	b.n	80029b0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f8:	4b30      	ldr	r3, [pc, #192]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2203      	movs	r2, #3
 80028fe:	4393      	bics	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4b2d      	ldr	r3, [pc, #180]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 8002908:	430a      	orrs	r2, r1
 800290a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800290c:	f7fe fda4 	bl	8001458 <HAL_GetTick>
 8002910:	0003      	movs	r3, r0
 8002912:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002914:	e009      	b.n	800292a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002916:	f7fe fd9f 	bl	8001458 <HAL_GetTick>
 800291a:	0002      	movs	r2, r0
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	4a27      	ldr	r2, [pc, #156]	@ (80029c0 <HAL_RCC_ClockConfig+0x1a4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e042      	b.n	80029b0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b24      	ldr	r3, [pc, #144]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	220c      	movs	r2, #12
 8002930:	401a      	ands	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1ec      	bne.n	8002916 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800293c:	4b1e      	ldr	r3, [pc, #120]	@ (80029b8 <HAL_RCC_ClockConfig+0x19c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2201      	movs	r2, #1
 8002942:	4013      	ands	r3, r2
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d211      	bcs.n	800296e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b1b      	ldr	r3, [pc, #108]	@ (80029b8 <HAL_RCC_ClockConfig+0x19c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2201      	movs	r2, #1
 8002950:	4393      	bics	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	4b18      	ldr	r3, [pc, #96]	@ (80029b8 <HAL_RCC_ClockConfig+0x19c>)
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295c:	4b16      	ldr	r3, [pc, #88]	@ (80029b8 <HAL_RCC_ClockConfig+0x19c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	4013      	ands	r3, r2
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d001      	beq.n	800296e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e020      	b.n	80029b0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2204      	movs	r2, #4
 8002974:	4013      	ands	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002978:	4b10      	ldr	r3, [pc, #64]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a11      	ldr	r2, [pc, #68]	@ (80029c4 <HAL_RCC_ClockConfig+0x1a8>)
 800297e:	4013      	ands	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800298c:	f000 f860 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8002990:	0001      	movs	r1, r0
 8002992:	4b0a      	ldr	r3, [pc, #40]	@ (80029bc <HAL_RCC_ClockConfig+0x1a0>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	220f      	movs	r2, #15
 800299a:	4013      	ands	r3, r2
 800299c:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <HAL_RCC_ClockConfig+0x1ac>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	000a      	movs	r2, r1
 80029a2:	40da      	lsrs	r2, r3
 80029a4:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <HAL_RCC_ClockConfig+0x1b0>)
 80029a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80029a8:	2003      	movs	r0, #3
 80029aa:	f7fe fd0f 	bl	80013cc <HAL_InitTick>
  
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b004      	add	sp, #16
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40022000 	.word	0x40022000
 80029bc:	40021000 	.word	0x40021000
 80029c0:	00001388 	.word	0x00001388
 80029c4:	fffff8ff 	.word	0xfffff8ff
 80029c8:	080050a8 	.word	0x080050a8
 80029cc:	2000003c 	.word	0x2000003c

080029d0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	@ 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80029dc:	2014      	movs	r0, #20
 80029de:	183b      	adds	r3, r7, r0
 80029e0:	2202      	movs	r2, #2
 80029e2:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80029e4:	183b      	adds	r3, r7, r0
 80029e6:	2203      	movs	r2, #3
 80029e8:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 80029ea:	183b      	adds	r3, r7, r0
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  gpio.Pin       = MCO1_PIN;
 80029f0:	183b      	adds	r3, r7, r0
 80029f2:	2280      	movs	r2, #128	@ 0x80
 80029f4:	0052      	lsls	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
  gpio.Alternate = GPIO_AF0_MCO;
 80029f8:	183b      	adds	r3, r7, r0
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80029fe:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <HAL_RCC_MCOConfig+0x78>)
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <HAL_RCC_MCOConfig+0x78>)
 8002a04:	2180      	movs	r1, #128	@ 0x80
 8002a06:	0289      	lsls	r1, r1, #10
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	615a      	str	r2, [r3, #20]
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <HAL_RCC_MCOConfig+0x78>)
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	029b      	lsls	r3, r3, #10
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002a1a:	183a      	adds	r2, r7, r0
 8002a1c:	2390      	movs	r3, #144	@ 0x90
 8002a1e:	05db      	lsls	r3, r3, #23
 8002a20:	0011      	movs	r1, r2
 8002a22:	0018      	movs	r0, r3
 8002a24:	f7ff fa0c 	bl	8001e40 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002a28:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <HAL_RCC_MCOConfig+0x78>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4a07      	ldr	r2, [pc, #28]	@ (8002a4c <HAL_RCC_MCOConfig+0x7c>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	4b03      	ldr	r3, [pc, #12]	@ (8002a48 <HAL_RCC_MCOConfig+0x78>)
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b00a      	add	sp, #40	@ 0x28
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	80ffffff 	.word	0x80ffffff

08002a50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	220c      	movs	r2, #12
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d046      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0xb8>
 8002a7a:	d848      	bhi.n	8002b0e <HAL_RCC_GetSysClockFreq+0xbe>
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d002      	beq.n	8002a86 <HAL_RCC_GetSysClockFreq+0x36>
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d003      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0x3c>
 8002a84:	e043      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a86:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002a88:	613b      	str	r3, [r7, #16]
      break;
 8002a8a:	e043      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	0c9b      	lsrs	r3, r3, #18
 8002a90:	220f      	movs	r2, #15
 8002a92:	4013      	ands	r3, r2
 8002a94:	4a24      	ldr	r2, [pc, #144]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002a96:	5cd3      	ldrb	r3, [r2, r3]
 8002a98:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002a9a:	4b21      	ldr	r3, [pc, #132]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	4a22      	ldr	r2, [pc, #136]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0xdc>)
 8002aa4:	5cd3      	ldrb	r3, [r2, r3]
 8002aa6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	23c0      	movs	r3, #192	@ 0xc0
 8002aac:	025b      	lsls	r3, r3, #9
 8002aae:	401a      	ands	r2, r3
 8002ab0:	2380      	movs	r3, #128	@ 0x80
 8002ab2:	025b      	lsls	r3, r3, #9
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d109      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	481a      	ldr	r0, [pc, #104]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002abc:	f7fd fb24 	bl	8000108 <__udivsi3>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	001a      	movs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4353      	muls	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e01a      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	23c0      	movs	r3, #192	@ 0xc0
 8002ad0:	025b      	lsls	r3, r3, #9
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	23c0      	movs	r3, #192	@ 0xc0
 8002ad6:	025b      	lsls	r3, r3, #9
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d109      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	4814      	ldr	r0, [pc, #80]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002ae0:	f7fd fb12 	bl	8000108 <__udivsi3>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4353      	muls	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	480c      	ldr	r0, [pc, #48]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002af4:	f7fd fb08 	bl	8000108 <__udivsi3>
 8002af8:	0003      	movs	r3, r0
 8002afa:	001a      	movs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4353      	muls	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	613b      	str	r3, [r7, #16]
      break;
 8002b06:	e005      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002b08:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002b0a:	613b      	str	r3, [r7, #16]
      break;
 8002b0c:	e002      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b0e:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b10:	613b      	str	r3, [r7, #16]
      break;
 8002b12:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b14:	693b      	ldr	r3, [r7, #16]
}
 8002b16:	0018      	movs	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b006      	add	sp, #24
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	40021000 	.word	0x40021000
 8002b24:	007a1200 	.word	0x007a1200
 8002b28:	080050c0 	.word	0x080050c0
 8002b2c:	080050d0 	.word	0x080050d0
 8002b30:	02dc6c00 	.word	0x02dc6c00

08002b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b38:	4b02      	ldr	r3, [pc, #8]	@ (8002b44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	2000003c 	.word	0x2000003c

08002b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002b4c:	f7ff fff2 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b50:	0001      	movs	r1, r0
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	2207      	movs	r2, #7
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	4a04      	ldr	r2, [pc, #16]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b5e:	5cd3      	ldrb	r3, [r2, r3]
 8002b60:	40d9      	lsrs	r1, r3
 8002b62:	000b      	movs	r3, r1
}    
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	080050b8 	.word	0x080050b8

08002b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e042      	b.n	8002c0c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	223d      	movs	r2, #61	@ 0x3d
 8002b8a:	5c9b      	ldrb	r3, [r3, r2]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d107      	bne.n	8002ba2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	223c      	movs	r2, #60	@ 0x3c
 8002b96:	2100      	movs	r1, #0
 8002b98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7fe f999 	bl	8000ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	223d      	movs	r2, #61	@ 0x3d
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	0010      	movs	r0, r2
 8002bb6:	f000 fe39 	bl	800382c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2246      	movs	r2, #70	@ 0x46
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	223e      	movs	r2, #62	@ 0x3e
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	223f      	movs	r2, #63	@ 0x3f
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2240      	movs	r2, #64	@ 0x40
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2241      	movs	r2, #65	@ 0x41
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2242      	movs	r2, #66	@ 0x42
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2243      	movs	r2, #67	@ 0x43
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2244      	movs	r2, #68	@ 0x44
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2245      	movs	r2, #69	@ 0x45
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	223d      	movs	r2, #61	@ 0x3d
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e042      	b.n	8002cac <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	223d      	movs	r2, #61	@ 0x3d
 8002c2a:	5c9b      	ldrb	r3, [r3, r2]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d107      	bne.n	8002c42 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	223c      	movs	r2, #60	@ 0x3c
 8002c36:	2100      	movs	r1, #0
 8002c38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 f839 	bl	8002cb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223d      	movs	r2, #61	@ 0x3d
 8002c46:	2102      	movs	r1, #2
 8002c48:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3304      	adds	r3, #4
 8002c52:	0019      	movs	r1, r3
 8002c54:	0010      	movs	r0, r2
 8002c56:	f000 fde9 	bl	800382c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2246      	movs	r2, #70	@ 0x46
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	223e      	movs	r2, #62	@ 0x3e
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	223f      	movs	r2, #63	@ 0x3f
 8002c6e:	2101      	movs	r1, #1
 8002c70:	5499      	strb	r1, [r3, r2]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2240      	movs	r2, #64	@ 0x40
 8002c76:	2101      	movs	r1, #1
 8002c78:	5499      	strb	r1, [r3, r2]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2241      	movs	r2, #65	@ 0x41
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2242      	movs	r2, #66	@ 0x42
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2243      	movs	r2, #67	@ 0x43
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5499      	strb	r1, [r3, r2]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2244      	movs	r2, #68	@ 0x44
 8002c96:	2101      	movs	r1, #1
 8002c98:	5499      	strb	r1, [r3, r2]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2245      	movs	r2, #69	@ 0x45
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	223d      	movs	r2, #61	@ 0x3d
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cbc:	46c0      	nop			@ (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d108      	bne.n	8002ce6 <HAL_TIM_PWM_Start+0x22>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	223e      	movs	r2, #62	@ 0x3e
 8002cd8:	5c9b      	ldrb	r3, [r3, r2]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	1e5a      	subs	r2, r3, #1
 8002ce0:	4193      	sbcs	r3, r2
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e01f      	b.n	8002d26 <HAL_TIM_PWM_Start+0x62>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d108      	bne.n	8002cfe <HAL_TIM_PWM_Start+0x3a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	223f      	movs	r2, #63	@ 0x3f
 8002cf0:	5c9b      	ldrb	r3, [r3, r2]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	1e5a      	subs	r2, r3, #1
 8002cf8:	4193      	sbcs	r3, r2
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	e013      	b.n	8002d26 <HAL_TIM_PWM_Start+0x62>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d108      	bne.n	8002d16 <HAL_TIM_PWM_Start+0x52>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2240      	movs	r2, #64	@ 0x40
 8002d08:	5c9b      	ldrb	r3, [r3, r2]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	1e5a      	subs	r2, r3, #1
 8002d10:	4193      	sbcs	r3, r2
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	e007      	b.n	8002d26 <HAL_TIM_PWM_Start+0x62>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2241      	movs	r2, #65	@ 0x41
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	1e5a      	subs	r2, r3, #1
 8002d22:	4193      	sbcs	r3, r2
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e06a      	b.n	8002e04 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d104      	bne.n	8002d3e <HAL_TIM_PWM_Start+0x7a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	223e      	movs	r2, #62	@ 0x3e
 8002d38:	2102      	movs	r1, #2
 8002d3a:	5499      	strb	r1, [r3, r2]
 8002d3c:	e013      	b.n	8002d66 <HAL_TIM_PWM_Start+0xa2>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d104      	bne.n	8002d4e <HAL_TIM_PWM_Start+0x8a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	223f      	movs	r2, #63	@ 0x3f
 8002d48:	2102      	movs	r1, #2
 8002d4a:	5499      	strb	r1, [r3, r2]
 8002d4c:	e00b      	b.n	8002d66 <HAL_TIM_PWM_Start+0xa2>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d104      	bne.n	8002d5e <HAL_TIM_PWM_Start+0x9a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2240      	movs	r2, #64	@ 0x40
 8002d58:	2102      	movs	r1, #2
 8002d5a:	5499      	strb	r1, [r3, r2]
 8002d5c:	e003      	b.n	8002d66 <HAL_TIM_PWM_Start+0xa2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2241      	movs	r2, #65	@ 0x41
 8002d62:	2102      	movs	r1, #2
 8002d64:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6839      	ldr	r1, [r7, #0]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f001 f96a 	bl	8004048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a24      	ldr	r2, [pc, #144]	@ (8002e0c <HAL_TIM_PWM_Start+0x148>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d009      	beq.n	8002d92 <HAL_TIM_PWM_Start+0xce>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a23      	ldr	r2, [pc, #140]	@ (8002e10 <HAL_TIM_PWM_Start+0x14c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d004      	beq.n	8002d92 <HAL_TIM_PWM_Start+0xce>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a21      	ldr	r2, [pc, #132]	@ (8002e14 <HAL_TIM_PWM_Start+0x150>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_PWM_Start+0xd2>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_TIM_PWM_Start+0xd4>
 8002d96:	2300      	movs	r3, #0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2180      	movs	r1, #128	@ 0x80
 8002da8:	0209      	lsls	r1, r1, #8
 8002daa:	430a      	orrs	r2, r1
 8002dac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a16      	ldr	r2, [pc, #88]	@ (8002e0c <HAL_TIM_PWM_Start+0x148>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00a      	beq.n	8002dce <HAL_TIM_PWM_Start+0x10a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	05db      	lsls	r3, r3, #23
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d004      	beq.n	8002dce <HAL_TIM_PWM_Start+0x10a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a13      	ldr	r2, [pc, #76]	@ (8002e18 <HAL_TIM_PWM_Start+0x154>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d111      	bne.n	8002df2 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2207      	movs	r2, #7
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	d010      	beq.n	8002e02 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2101      	movs	r1, #1
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df0:	e007      	b.n	8002e02 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b004      	add	sp, #16
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40012c00 	.word	0x40012c00
 8002e10:	40014400 	.word	0x40014400
 8002e14:	40014800 	.word	0x40014800
 8002e18:	40000400 	.word	0x40000400

08002e1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e042      	b.n	8002eb4 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	223d      	movs	r2, #61	@ 0x3d
 8002e32:	5c9b      	ldrb	r3, [r3, r2]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d107      	bne.n	8002e4a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	223c      	movs	r2, #60	@ 0x3c
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 f839 	bl	8002ebc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	223d      	movs	r2, #61	@ 0x3d
 8002e4e:	2102      	movs	r1, #2
 8002e50:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	0010      	movs	r0, r2
 8002e5e:	f000 fce5 	bl	800382c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2246      	movs	r2, #70	@ 0x46
 8002e66:	2101      	movs	r1, #1
 8002e68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	223e      	movs	r2, #62	@ 0x3e
 8002e6e:	2101      	movs	r1, #1
 8002e70:	5499      	strb	r1, [r3, r2]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	223f      	movs	r2, #63	@ 0x3f
 8002e76:	2101      	movs	r1, #1
 8002e78:	5499      	strb	r1, [r3, r2]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2240      	movs	r2, #64	@ 0x40
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2241      	movs	r2, #65	@ 0x41
 8002e86:	2101      	movs	r1, #1
 8002e88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2242      	movs	r2, #66	@ 0x42
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2243      	movs	r2, #67	@ 0x43
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2244      	movs	r2, #68	@ 0x44
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	5499      	strb	r1, [r3, r2]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2245      	movs	r2, #69	@ 0x45
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	223d      	movs	r2, #61	@ 0x3d
 8002eae:	2101      	movs	r1, #1
 8002eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b002      	add	sp, #8
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002ec4:	46c0      	nop			@ (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b002      	add	sp, #8
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	230f      	movs	r3, #15
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <HAL_TIM_IC_Start_IT+0x22>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	223e      	movs	r2, #62	@ 0x3e
 8002ee8:	5c9b      	ldrb	r3, [r3, r2]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	e013      	b.n	8002f16 <HAL_TIM_IC_Start_IT+0x4a>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d104      	bne.n	8002efe <HAL_TIM_IC_Start_IT+0x32>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	223f      	movs	r2, #63	@ 0x3f
 8002ef8:	5c9b      	ldrb	r3, [r3, r2]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	e00b      	b.n	8002f16 <HAL_TIM_IC_Start_IT+0x4a>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_IC_Start_IT+0x42>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2240      	movs	r2, #64	@ 0x40
 8002f08:	5c9b      	ldrb	r3, [r3, r2]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	e003      	b.n	8002f16 <HAL_TIM_IC_Start_IT+0x4a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2241      	movs	r2, #65	@ 0x41
 8002f12:	5c9b      	ldrb	r3, [r3, r2]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	220e      	movs	r2, #14
 8002f18:	18ba      	adds	r2, r7, r2
 8002f1a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d104      	bne.n	8002f2c <HAL_TIM_IC_Start_IT+0x60>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2242      	movs	r2, #66	@ 0x42
 8002f26:	5c9b      	ldrb	r3, [r3, r2]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	e013      	b.n	8002f54 <HAL_TIM_IC_Start_IT+0x88>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d104      	bne.n	8002f3c <HAL_TIM_IC_Start_IT+0x70>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2243      	movs	r2, #67	@ 0x43
 8002f36:	5c9b      	ldrb	r3, [r3, r2]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e00b      	b.n	8002f54 <HAL_TIM_IC_Start_IT+0x88>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d104      	bne.n	8002f4c <HAL_TIM_IC_Start_IT+0x80>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2244      	movs	r2, #68	@ 0x44
 8002f46:	5c9b      	ldrb	r3, [r3, r2]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e003      	b.n	8002f54 <HAL_TIM_IC_Start_IT+0x88>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2245      	movs	r2, #69	@ 0x45
 8002f50:	5c9b      	ldrb	r3, [r3, r2]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	210d      	movs	r1, #13
 8002f56:	187a      	adds	r2, r7, r1
 8002f58:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f5a:	230e      	movs	r3, #14
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d103      	bne.n	8002f6c <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f64:	187b      	adds	r3, r7, r1
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d001      	beq.n	8002f70 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0ac      	b.n	80030ca <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d104      	bne.n	8002f80 <HAL_TIM_IC_Start_IT+0xb4>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	223e      	movs	r2, #62	@ 0x3e
 8002f7a:	2102      	movs	r1, #2
 8002f7c:	5499      	strb	r1, [r3, r2]
 8002f7e:	e013      	b.n	8002fa8 <HAL_TIM_IC_Start_IT+0xdc>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d104      	bne.n	8002f90 <HAL_TIM_IC_Start_IT+0xc4>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	223f      	movs	r2, #63	@ 0x3f
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	5499      	strb	r1, [r3, r2]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_TIM_IC_Start_IT+0xdc>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d104      	bne.n	8002fa0 <HAL_TIM_IC_Start_IT+0xd4>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2240      	movs	r2, #64	@ 0x40
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	5499      	strb	r1, [r3, r2]
 8002f9e:	e003      	b.n	8002fa8 <HAL_TIM_IC_Start_IT+0xdc>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2241      	movs	r2, #65	@ 0x41
 8002fa4:	2102      	movs	r1, #2
 8002fa6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <HAL_TIM_IC_Start_IT+0xec>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2242      	movs	r2, #66	@ 0x42
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	5499      	strb	r1, [r3, r2]
 8002fb6:	e013      	b.n	8002fe0 <HAL_TIM_IC_Start_IT+0x114>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d104      	bne.n	8002fc8 <HAL_TIM_IC_Start_IT+0xfc>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2243      	movs	r2, #67	@ 0x43
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	5499      	strb	r1, [r3, r2]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_TIM_IC_Start_IT+0x114>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d104      	bne.n	8002fd8 <HAL_TIM_IC_Start_IT+0x10c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2244      	movs	r2, #68	@ 0x44
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	5499      	strb	r1, [r3, r2]
 8002fd6:	e003      	b.n	8002fe0 <HAL_TIM_IC_Start_IT+0x114>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2245      	movs	r2, #69	@ 0x45
 8002fdc:	2102      	movs	r1, #2
 8002fde:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d02a      	beq.n	800303c <HAL_TIM_IC_Start_IT+0x170>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	d830      	bhi.n	800304e <HAL_TIM_IC_Start_IT+0x182>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d01b      	beq.n	800302a <HAL_TIM_IC_Start_IT+0x15e>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d82a      	bhi.n	800304e <HAL_TIM_IC_Start_IT+0x182>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IC_Start_IT+0x13a>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d009      	beq.n	8003018 <HAL_TIM_IC_Start_IT+0x14c>
 8003004:	e023      	b.n	800304e <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2102      	movs	r1, #2
 8003012:	430a      	orrs	r2, r1
 8003014:	60da      	str	r2, [r3, #12]
      break;
 8003016:	e01f      	b.n	8003058 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2104      	movs	r1, #4
 8003024:	430a      	orrs	r2, r1
 8003026:	60da      	str	r2, [r3, #12]
      break;
 8003028:	e016      	b.n	8003058 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2108      	movs	r1, #8
 8003036:	430a      	orrs	r2, r1
 8003038:	60da      	str	r2, [r3, #12]
      break;
 800303a:	e00d      	b.n	8003058 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2110      	movs	r1, #16
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]
      break;
 800304c:	e004      	b.n	8003058 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 800304e:	230f      	movs	r3, #15
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
      break;
 8003056:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003058:	230f      	movs	r3, #15
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d130      	bne.n	80030c4 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6839      	ldr	r1, [r7, #0]
 8003068:	2201      	movs	r2, #1
 800306a:	0018      	movs	r0, r3
 800306c:	f000 ffec 	bl	8004048 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a17      	ldr	r2, [pc, #92]	@ (80030d4 <HAL_TIM_IC_Start_IT+0x208>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00a      	beq.n	8003090 <HAL_TIM_IC_Start_IT+0x1c4>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	2380      	movs	r3, #128	@ 0x80
 8003080:	05db      	lsls	r3, r3, #23
 8003082:	429a      	cmp	r2, r3
 8003084:	d004      	beq.n	8003090 <HAL_TIM_IC_Start_IT+0x1c4>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a13      	ldr	r2, [pc, #76]	@ (80030d8 <HAL_TIM_IC_Start_IT+0x20c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d111      	bne.n	80030b4 <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2207      	movs	r2, #7
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d010      	beq.n	80030c4 <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2101      	movs	r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b2:	e007      	b.n	80030c4 <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2101      	movs	r1, #1
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80030c4:	230f      	movs	r3, #15
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	781b      	ldrb	r3, [r3, #0]
}
 80030ca:	0018      	movs	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b004      	add	sp, #16
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	40000400 	.word	0x40000400

080030dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2202      	movs	r2, #2
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d124      	bne.n	800313c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2202      	movs	r2, #2
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d11d      	bne.n	800313c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2203      	movs	r2, #3
 8003106:	4252      	negs	r2, r2
 8003108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2203      	movs	r2, #3
 8003118:	4013      	ands	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0018      	movs	r0, r3
 8003120:	f7fd fe54 	bl	8000dcc <HAL_TIM_IC_CaptureCallback>
 8003124:	e007      	b.n	8003136 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	f000 fb67 	bl	80037fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	0018      	movs	r0, r3
 8003132:	f000 fb6b 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2204      	movs	r2, #4
 8003144:	4013      	ands	r3, r2
 8003146:	2b04      	cmp	r3, #4
 8003148:	d125      	bne.n	8003196 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2204      	movs	r2, #4
 8003152:	4013      	ands	r3, r2
 8003154:	2b04      	cmp	r3, #4
 8003156:	d11e      	bne.n	8003196 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2205      	movs	r2, #5
 800315e:	4252      	negs	r2, r2
 8003160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	23c0      	movs	r3, #192	@ 0xc0
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4013      	ands	r3, r2
 8003174:	d004      	beq.n	8003180 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	0018      	movs	r0, r3
 800317a:	f7fd fe27 	bl	8000dcc <HAL_TIM_IC_CaptureCallback>
 800317e:	e007      	b.n	8003190 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0018      	movs	r0, r3
 8003184:	f000 fb3a 	bl	80037fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	0018      	movs	r0, r3
 800318c:	f000 fb3e 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	2208      	movs	r2, #8
 800319e:	4013      	ands	r3, r2
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d124      	bne.n	80031ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2208      	movs	r2, #8
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d11d      	bne.n	80031ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2209      	movs	r2, #9
 80031b8:	4252      	negs	r2, r2
 80031ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2204      	movs	r2, #4
 80031c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	2203      	movs	r2, #3
 80031ca:	4013      	ands	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7fd fdfb 	bl	8000dcc <HAL_TIM_IC_CaptureCallback>
 80031d6:	e007      	b.n	80031e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 fb0e 	bl	80037fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	0018      	movs	r0, r3
 80031e4:	f000 fb12 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	2210      	movs	r2, #16
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d125      	bne.n	8003248 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2210      	movs	r2, #16
 8003204:	4013      	ands	r3, r2
 8003206:	2b10      	cmp	r3, #16
 8003208:	d11e      	bne.n	8003248 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2211      	movs	r2, #17
 8003210:	4252      	negs	r2, r2
 8003212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2208      	movs	r2, #8
 8003218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	23c0      	movs	r3, #192	@ 0xc0
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4013      	ands	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	0018      	movs	r0, r3
 800322c:	f7fd fdce 	bl	8000dcc <HAL_TIM_IC_CaptureCallback>
 8003230:	e007      	b.n	8003242 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0018      	movs	r0, r3
 8003236:	f000 fae1 	bl	80037fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f000 fae5 	bl	800380c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2201      	movs	r2, #1
 8003250:	4013      	ands	r3, r2
 8003252:	2b01      	cmp	r3, #1
 8003254:	d10f      	bne.n	8003276 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	4013      	ands	r3, r2
 8003260:	2b01      	cmp	r3, #1
 8003262:	d108      	bne.n	8003276 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2202      	movs	r2, #2
 800326a:	4252      	negs	r2, r2
 800326c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 fabb 	bl	80037ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2280      	movs	r2, #128	@ 0x80
 800327e:	4013      	ands	r3, r2
 8003280:	2b80      	cmp	r3, #128	@ 0x80
 8003282:	d10f      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2280      	movs	r2, #128	@ 0x80
 800328c:	4013      	ands	r3, r2
 800328e:	2b80      	cmp	r3, #128	@ 0x80
 8003290:	d108      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2281      	movs	r2, #129	@ 0x81
 8003298:	4252      	negs	r2, r2
 800329a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 ffb4 	bl	800420c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2240      	movs	r2, #64	@ 0x40
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b40      	cmp	r3, #64	@ 0x40
 80032b0:	d10f      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2240      	movs	r2, #64	@ 0x40
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b40      	cmp	r3, #64	@ 0x40
 80032be:	d108      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2241      	movs	r2, #65	@ 0x41
 80032c6:	4252      	negs	r2, r2
 80032c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 faa5 	bl	800381c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2220      	movs	r2, #32
 80032da:	4013      	ands	r3, r2
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d10f      	bne.n	8003300 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d108      	bne.n	8003300 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2221      	movs	r2, #33	@ 0x21
 80032f4:	4252      	negs	r2, r2
 80032f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 ff7e 	bl	80041fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003300:	46c0      	nop			@ (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	2317      	movs	r3, #23
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	223c      	movs	r2, #60	@ 0x3c
 8003320:	5c9b      	ldrb	r3, [r3, r2]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_TIM_IC_ConfigChannel+0x22>
 8003326:	2302      	movs	r3, #2
 8003328:	e08c      	b.n	8003444 <HAL_TIM_IC_ConfigChannel+0x13c>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	223c      	movs	r2, #60	@ 0x3c
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d11b      	bne.n	8003370 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003348:	f000 fcc6 	bl	8003cd8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	210c      	movs	r1, #12
 8003358:	438a      	bics	r2, r1
 800335a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6999      	ldr	r1, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	619a      	str	r2, [r3, #24]
 800336e:	e062      	b.n	8003436 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b04      	cmp	r3, #4
 8003374:	d11c      	bne.n	80033b0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003386:	f000 fd2b 	bl	8003de0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699a      	ldr	r2, [r3, #24]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	492d      	ldr	r1, [pc, #180]	@ (800344c <HAL_TIM_IC_ConfigChannel+0x144>)
 8003396:	400a      	ands	r2, r1
 8003398:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6999      	ldr	r1, [r3, #24]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	021a      	lsls	r2, r3, #8
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	619a      	str	r2, [r3, #24]
 80033ae:	e042      	b.n	8003436 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d11b      	bne.n	80033ee <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80033c6:	f000 fd7f 	bl	8003ec8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	210c      	movs	r1, #12
 80033d6:	438a      	bics	r2, r1
 80033d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69d9      	ldr	r1, [r3, #28]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	61da      	str	r2, [r3, #28]
 80033ec:	e023      	b.n	8003436 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	d11c      	bne.n	800342e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003404:	f000 fda0 	bl	8003f48 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	490e      	ldr	r1, [pc, #56]	@ (800344c <HAL_TIM_IC_ConfigChannel+0x144>)
 8003414:	400a      	ands	r2, r1
 8003416:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69d9      	ldr	r1, [r3, #28]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	021a      	lsls	r2, r3, #8
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	61da      	str	r2, [r3, #28]
 800342c:	e003      	b.n	8003436 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800342e:	2317      	movs	r3, #23
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	223c      	movs	r2, #60	@ 0x3c
 800343a:	2100      	movs	r1, #0
 800343c:	5499      	strb	r1, [r3, r2]

  return status;
 800343e:	2317      	movs	r3, #23
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	781b      	ldrb	r3, [r3, #0]
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b006      	add	sp, #24
 800344a:	bd80      	pop	{r7, pc}
 800344c:	fffff3ff 	.word	0xfffff3ff

08003450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800345c:	2317      	movs	r3, #23
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	223c      	movs	r2, #60	@ 0x3c
 8003468:	5c9b      	ldrb	r3, [r3, r2]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_TIM_PWM_ConfigChannel+0x22>
 800346e:	2302      	movs	r3, #2
 8003470:	e0ad      	b.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	223c      	movs	r2, #60	@ 0x3c
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b0c      	cmp	r3, #12
 800347e:	d100      	bne.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003480:	e076      	b.n	8003570 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d900      	bls.n	800348a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003488:	e095      	b.n	80035b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d04e      	beq.n	800352e <HAL_TIM_PWM_ConfigChannel+0xde>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b08      	cmp	r3, #8
 8003494:	d900      	bls.n	8003498 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003496:	e08e      	b.n	80035b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_PWM_ConfigChannel+0x56>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d021      	beq.n	80034e8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80034a4:	e087      	b.n	80035b6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	0011      	movs	r1, r2
 80034ae:	0018      	movs	r0, r3
 80034b0:	f000 fa32 	bl	8003918 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2108      	movs	r1, #8
 80034c0:	430a      	orrs	r2, r1
 80034c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2104      	movs	r1, #4
 80034d0:	438a      	bics	r2, r1
 80034d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6999      	ldr	r1, [r3, #24]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	619a      	str	r2, [r3, #24]
      break;
 80034e6:	e06b      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	0011      	movs	r1, r2
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 fa8f 	bl	8003a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699a      	ldr	r2, [r3, #24]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2180      	movs	r1, #128	@ 0x80
 8003502:	0109      	lsls	r1, r1, #4
 8003504:	430a      	orrs	r2, r1
 8003506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4931      	ldr	r1, [pc, #196]	@ (80035d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003514:	400a      	ands	r2, r1
 8003516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6999      	ldr	r1, [r3, #24]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	021a      	lsls	r2, r3, #8
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	619a      	str	r2, [r3, #24]
      break;
 800352c:	e048      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	0011      	movs	r1, r2
 8003536:	0018      	movs	r0, r3
 8003538:	f000 faea 	bl	8003b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2108      	movs	r1, #8
 8003548:	430a      	orrs	r2, r1
 800354a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2104      	movs	r1, #4
 8003558:	438a      	bics	r2, r1
 800355a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69d9      	ldr	r1, [r3, #28]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	61da      	str	r2, [r3, #28]
      break;
 800356e:	e027      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	0011      	movs	r1, r2
 8003578:	0018      	movs	r0, r3
 800357a:	f000 fb49 	bl	8003c10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2180      	movs	r1, #128	@ 0x80
 800358a:	0109      	lsls	r1, r1, #4
 800358c:	430a      	orrs	r2, r1
 800358e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	490f      	ldr	r1, [pc, #60]	@ (80035d8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800359c:	400a      	ands	r2, r1
 800359e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69d9      	ldr	r1, [r3, #28]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	021a      	lsls	r2, r3, #8
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	61da      	str	r2, [r3, #28]
      break;
 80035b4:	e004      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80035b6:	2317      	movs	r3, #23
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
      break;
 80035be:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	223c      	movs	r2, #60	@ 0x3c
 80035c4:	2100      	movs	r1, #0
 80035c6:	5499      	strb	r1, [r3, r2]

  return status;
 80035c8:	2317      	movs	r3, #23
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	781b      	ldrb	r3, [r3, #0]
}
 80035ce:	0018      	movs	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b006      	add	sp, #24
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	fffffbff 	.word	0xfffffbff

080035dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035e6:	230f      	movs	r3, #15
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	223c      	movs	r2, #60	@ 0x3c
 80035f2:	5c9b      	ldrb	r3, [r3, r2]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_TIM_ConfigClockSource+0x20>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e0bc      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x19a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	223c      	movs	r2, #60	@ 0x3c
 8003600:	2101      	movs	r1, #1
 8003602:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	223d      	movs	r2, #61	@ 0x3d
 8003608:	2102      	movs	r1, #2
 800360a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2277      	movs	r2, #119	@ 0x77
 8003618:	4393      	bics	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4a58      	ldr	r2, [pc, #352]	@ (8003780 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003620:	4013      	ands	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2280      	movs	r2, #128	@ 0x80
 8003632:	0192      	lsls	r2, r2, #6
 8003634:	4293      	cmp	r3, r2
 8003636:	d040      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0xde>
 8003638:	2280      	movs	r2, #128	@ 0x80
 800363a:	0192      	lsls	r2, r2, #6
 800363c:	4293      	cmp	r3, r2
 800363e:	d900      	bls.n	8003642 <HAL_TIM_ConfigClockSource+0x66>
 8003640:	e088      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x178>
 8003642:	2280      	movs	r2, #128	@ 0x80
 8003644:	0152      	lsls	r2, r2, #5
 8003646:	4293      	cmp	r3, r2
 8003648:	d100      	bne.n	800364c <HAL_TIM_ConfigClockSource+0x70>
 800364a:	e088      	b.n	800375e <HAL_TIM_ConfigClockSource+0x182>
 800364c:	2280      	movs	r2, #128	@ 0x80
 800364e:	0152      	lsls	r2, r2, #5
 8003650:	4293      	cmp	r3, r2
 8003652:	d900      	bls.n	8003656 <HAL_TIM_ConfigClockSource+0x7a>
 8003654:	e07e      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x178>
 8003656:	2b70      	cmp	r3, #112	@ 0x70
 8003658:	d018      	beq.n	800368c <HAL_TIM_ConfigClockSource+0xb0>
 800365a:	d900      	bls.n	800365e <HAL_TIM_ConfigClockSource+0x82>
 800365c:	e07a      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x178>
 800365e:	2b60      	cmp	r3, #96	@ 0x60
 8003660:	d04f      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x126>
 8003662:	d900      	bls.n	8003666 <HAL_TIM_ConfigClockSource+0x8a>
 8003664:	e076      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x178>
 8003666:	2b50      	cmp	r3, #80	@ 0x50
 8003668:	d03b      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x106>
 800366a:	d900      	bls.n	800366e <HAL_TIM_ConfigClockSource+0x92>
 800366c:	e072      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x178>
 800366e:	2b40      	cmp	r3, #64	@ 0x40
 8003670:	d057      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0x146>
 8003672:	d900      	bls.n	8003676 <HAL_TIM_ConfigClockSource+0x9a>
 8003674:	e06e      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x178>
 8003676:	2b30      	cmp	r3, #48	@ 0x30
 8003678:	d063      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x166>
 800367a:	d86b      	bhi.n	8003754 <HAL_TIM_ConfigClockSource+0x178>
 800367c:	2b20      	cmp	r3, #32
 800367e:	d060      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x166>
 8003680:	d868      	bhi.n	8003754 <HAL_TIM_ConfigClockSource+0x178>
 8003682:	2b00      	cmp	r3, #0
 8003684:	d05d      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x166>
 8003686:	2b10      	cmp	r3, #16
 8003688:	d05b      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x166>
 800368a:	e063      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800369c:	f000 fcb4 	bl	8004008 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2277      	movs	r2, #119	@ 0x77
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	609a      	str	r2, [r3, #8]
      break;
 80036b8:	e052      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036ca:	f000 fc9d 	bl	8004008 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2180      	movs	r1, #128	@ 0x80
 80036da:	01c9      	lsls	r1, r1, #7
 80036dc:	430a      	orrs	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
      break;
 80036e0:	e03e      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ee:	001a      	movs	r2, r3
 80036f0:	f000 fb48 	bl	8003d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2150      	movs	r1, #80	@ 0x50
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 fc6a 	bl	8003fd4 <TIM_ITRx_SetConfig>
      break;
 8003700:	e02e      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800370e:	001a      	movs	r2, r3
 8003710:	f000 fba8 	bl	8003e64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2160      	movs	r1, #96	@ 0x60
 800371a:	0018      	movs	r0, r3
 800371c:	f000 fc5a 	bl	8003fd4 <TIM_ITRx_SetConfig>
      break;
 8003720:	e01e      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800372e:	001a      	movs	r2, r3
 8003730:	f000 fb28 	bl	8003d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2140      	movs	r1, #64	@ 0x40
 800373a:	0018      	movs	r0, r3
 800373c:	f000 fc4a 	bl	8003fd4 <TIM_ITRx_SetConfig>
      break;
 8003740:	e00e      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0019      	movs	r1, r3
 800374c:	0010      	movs	r0, r2
 800374e:	f000 fc41 	bl	8003fd4 <TIM_ITRx_SetConfig>
      break;
 8003752:	e005      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003754:	230f      	movs	r3, #15
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
      break;
 800375c:	e000      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800375e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	223d      	movs	r2, #61	@ 0x3d
 8003764:	2101      	movs	r1, #1
 8003766:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	223c      	movs	r2, #60	@ 0x3c
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]

  return status;
 8003770:	230f      	movs	r3, #15
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	781b      	ldrb	r3, [r3, #0]
}
 8003776:	0018      	movs	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	b004      	add	sp, #16
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	ffff00ff 	.word	0xffff00ff

08003784 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b0c      	cmp	r3, #12
 8003796:	d01e      	beq.n	80037d6 <HAL_TIM_ReadCapturedValue+0x52>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d820      	bhi.n	80037e0 <HAL_TIM_ReadCapturedValue+0x5c>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d013      	beq.n	80037cc <HAL_TIM_ReadCapturedValue+0x48>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d81a      	bhi.n	80037e0 <HAL_TIM_ReadCapturedValue+0x5c>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_TIM_ReadCapturedValue+0x34>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d005      	beq.n	80037c2 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80037b6:	e013      	b.n	80037e0 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037be:	60fb      	str	r3, [r7, #12]
      break;
 80037c0:	e00f      	b.n	80037e2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c8:	60fb      	str	r3, [r7, #12]
      break;
 80037ca:	e00a      	b.n	80037e2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d2:	60fb      	str	r3, [r7, #12]
      break;
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	60fb      	str	r3, [r7, #12]
      break;
 80037de:	e000      	b.n	80037e2 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80037e0:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 80037e2:	68fb      	ldr	r3, [r7, #12]
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003814:	46c0      	nop			@ (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003824:	46c0      	nop			@ (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b002      	add	sp, #8
 800382a:	bd80      	pop	{r7, pc}

0800382c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a30      	ldr	r2, [pc, #192]	@ (8003900 <TIM_Base_SetConfig+0xd4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d008      	beq.n	8003856 <TIM_Base_SetConfig+0x2a>
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	2380      	movs	r3, #128	@ 0x80
 8003848:	05db      	lsls	r3, r3, #23
 800384a:	429a      	cmp	r2, r3
 800384c:	d003      	beq.n	8003856 <TIM_Base_SetConfig+0x2a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2c      	ldr	r2, [pc, #176]	@ (8003904 <TIM_Base_SetConfig+0xd8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d108      	bne.n	8003868 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2270      	movs	r2, #112	@ 0x70
 800385a:	4393      	bics	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a25      	ldr	r2, [pc, #148]	@ (8003900 <TIM_Base_SetConfig+0xd4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d014      	beq.n	800389a <TIM_Base_SetConfig+0x6e>
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	2380      	movs	r3, #128	@ 0x80
 8003874:	05db      	lsls	r3, r3, #23
 8003876:	429a      	cmp	r2, r3
 8003878:	d00f      	beq.n	800389a <TIM_Base_SetConfig+0x6e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a21      	ldr	r2, [pc, #132]	@ (8003904 <TIM_Base_SetConfig+0xd8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00b      	beq.n	800389a <TIM_Base_SetConfig+0x6e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a20      	ldr	r2, [pc, #128]	@ (8003908 <TIM_Base_SetConfig+0xdc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <TIM_Base_SetConfig+0x6e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1f      	ldr	r2, [pc, #124]	@ (800390c <TIM_Base_SetConfig+0xe0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <TIM_Base_SetConfig+0x6e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1e      	ldr	r2, [pc, #120]	@ (8003910 <TIM_Base_SetConfig+0xe4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d108      	bne.n	80038ac <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a1d      	ldr	r2, [pc, #116]	@ (8003914 <TIM_Base_SetConfig+0xe8>)
 800389e:	4013      	ands	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2280      	movs	r2, #128	@ 0x80
 80038b0:	4393      	bics	r3, r2
 80038b2:	001a      	movs	r2, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003900 <TIM_Base_SetConfig+0xd4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d007      	beq.n	80038ea <TIM_Base_SetConfig+0xbe>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a0b      	ldr	r2, [pc, #44]	@ (800390c <TIM_Base_SetConfig+0xe0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d003      	beq.n	80038ea <TIM_Base_SetConfig+0xbe>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003910 <TIM_Base_SetConfig+0xe4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d103      	bne.n	80038f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	615a      	str	r2, [r3, #20]
}
 80038f8:	46c0      	nop			@ (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b004      	add	sp, #16
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40000400 	.word	0x40000400
 8003908:	40002000 	.word	0x40002000
 800390c:	40014400 	.word	0x40014400
 8003910:	40014800 	.word	0x40014800
 8003914:	fffffcff 	.word	0xfffffcff

08003918 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	2201      	movs	r2, #1
 8003928:	4393      	bics	r3, r2
 800392a:	001a      	movs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2270      	movs	r2, #112	@ 0x70
 8003946:	4393      	bics	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2203      	movs	r2, #3
 800394e:	4393      	bics	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2202      	movs	r2, #2
 8003960:	4393      	bics	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a23      	ldr	r2, [pc, #140]	@ (8003a00 <TIM_OC1_SetConfig+0xe8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <TIM_OC1_SetConfig+0x6e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a22      	ldr	r2, [pc, #136]	@ (8003a04 <TIM_OC1_SetConfig+0xec>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_OC1_SetConfig+0x6e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a21      	ldr	r2, [pc, #132]	@ (8003a08 <TIM_OC1_SetConfig+0xf0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10c      	bne.n	80039a0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2208      	movs	r2, #8
 800398a:	4393      	bics	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2204      	movs	r2, #4
 800399c:	4393      	bics	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a17      	ldr	r2, [pc, #92]	@ (8003a00 <TIM_OC1_SetConfig+0xe8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d007      	beq.n	80039b8 <TIM_OC1_SetConfig+0xa0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a16      	ldr	r2, [pc, #88]	@ (8003a04 <TIM_OC1_SetConfig+0xec>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_OC1_SetConfig+0xa0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a15      	ldr	r2, [pc, #84]	@ (8003a08 <TIM_OC1_SetConfig+0xf0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d111      	bne.n	80039dc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4a14      	ldr	r2, [pc, #80]	@ (8003a0c <TIM_OC1_SetConfig+0xf4>)
 80039bc:	4013      	ands	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4a13      	ldr	r2, [pc, #76]	@ (8003a10 <TIM_OC1_SetConfig+0xf8>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b006      	add	sp, #24
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	40012c00 	.word	0x40012c00
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800
 8003a0c:	fffffeff 	.word	0xfffffeff
 8003a10:	fffffdff 	.word	0xfffffdff

08003a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	2210      	movs	r2, #16
 8003a24:	4393      	bics	r3, r2
 8003a26:	001a      	movs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a2c      	ldr	r2, [pc, #176]	@ (8003af4 <TIM_OC2_SetConfig+0xe0>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a2b      	ldr	r2, [pc, #172]	@ (8003af8 <TIM_OC2_SetConfig+0xe4>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	4393      	bics	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a22      	ldr	r2, [pc, #136]	@ (8003afc <TIM_OC2_SetConfig+0xe8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10d      	bne.n	8003a92 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2280      	movs	r2, #128	@ 0x80
 8003a7a:	4393      	bics	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2240      	movs	r2, #64	@ 0x40
 8003a8e:	4393      	bics	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a19      	ldr	r2, [pc, #100]	@ (8003afc <TIM_OC2_SetConfig+0xe8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d007      	beq.n	8003aaa <TIM_OC2_SetConfig+0x96>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a18      	ldr	r2, [pc, #96]	@ (8003b00 <TIM_OC2_SetConfig+0xec>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d003      	beq.n	8003aaa <TIM_OC2_SetConfig+0x96>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a17      	ldr	r2, [pc, #92]	@ (8003b04 <TIM_OC2_SetConfig+0xf0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d113      	bne.n	8003ad2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4a16      	ldr	r2, [pc, #88]	@ (8003b08 <TIM_OC2_SetConfig+0xf4>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	@ (8003b0c <TIM_OC2_SetConfig+0xf8>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	621a      	str	r2, [r3, #32]
}
 8003aec:	46c0      	nop			@ (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b006      	add	sp, #24
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	ffff8fff 	.word	0xffff8fff
 8003af8:	fffffcff 	.word	0xfffffcff
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40014400 	.word	0x40014400
 8003b04:	40014800 	.word	0x40014800
 8003b08:	fffffbff 	.word	0xfffffbff
 8003b0c:	fffff7ff 	.word	0xfffff7ff

08003b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	4a33      	ldr	r2, [pc, #204]	@ (8003bec <TIM_OC3_SetConfig+0xdc>)
 8003b20:	401a      	ands	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2270      	movs	r2, #112	@ 0x70
 8003b3c:	4393      	bics	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2203      	movs	r2, #3
 8003b44:	4393      	bics	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	4a26      	ldr	r2, [pc, #152]	@ (8003bf0 <TIM_OC3_SetConfig+0xe0>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a22      	ldr	r2, [pc, #136]	@ (8003bf4 <TIM_OC3_SetConfig+0xe4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10d      	bne.n	8003b8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	4a21      	ldr	r2, [pc, #132]	@ (8003bf8 <TIM_OC3_SetConfig+0xe8>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	4a1d      	ldr	r2, [pc, #116]	@ (8003bfc <TIM_OC3_SetConfig+0xec>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a19      	ldr	r2, [pc, #100]	@ (8003bf4 <TIM_OC3_SetConfig+0xe4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <TIM_OC3_SetConfig+0x92>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1a      	ldr	r2, [pc, #104]	@ (8003c00 <TIM_OC3_SetConfig+0xf0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d003      	beq.n	8003ba2 <TIM_OC3_SetConfig+0x92>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a19      	ldr	r2, [pc, #100]	@ (8003c04 <TIM_OC3_SetConfig+0xf4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d113      	bne.n	8003bca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4a18      	ldr	r2, [pc, #96]	@ (8003c08 <TIM_OC3_SetConfig+0xf8>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4a17      	ldr	r2, [pc, #92]	@ (8003c0c <TIM_OC3_SetConfig+0xfc>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	621a      	str	r2, [r3, #32]
}
 8003be4:	46c0      	nop			@ (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b006      	add	sp, #24
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	fffffeff 	.word	0xfffffeff
 8003bf0:	fffffdff 	.word	0xfffffdff
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	fffff7ff 	.word	0xfffff7ff
 8003bfc:	fffffbff 	.word	0xfffffbff
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800
 8003c08:	ffffefff 	.word	0xffffefff
 8003c0c:	ffffdfff 	.word	0xffffdfff

08003c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4a26      	ldr	r2, [pc, #152]	@ (8003cb8 <TIM_OC4_SetConfig+0xa8>)
 8003c20:	401a      	ands	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a20      	ldr	r2, [pc, #128]	@ (8003cbc <TIM_OC4_SetConfig+0xac>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc0 <TIM_OC4_SetConfig+0xb0>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc4 <TIM_OC4_SetConfig+0xb4>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	031b      	lsls	r3, r3, #12
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a17      	ldr	r2, [pc, #92]	@ (8003cc8 <TIM_OC4_SetConfig+0xb8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d007      	beq.n	8003c80 <TIM_OC4_SetConfig+0x70>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a16      	ldr	r2, [pc, #88]	@ (8003ccc <TIM_OC4_SetConfig+0xbc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d003      	beq.n	8003c80 <TIM_OC4_SetConfig+0x70>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a15      	ldr	r2, [pc, #84]	@ (8003cd0 <TIM_OC4_SetConfig+0xc0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d109      	bne.n	8003c94 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4a14      	ldr	r2, [pc, #80]	@ (8003cd4 <TIM_OC4_SetConfig+0xc4>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	019b      	lsls	r3, r3, #6
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	621a      	str	r2, [r3, #32]
}
 8003cae:	46c0      	nop			@ (mov r8, r8)
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b006      	add	sp, #24
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	ffffefff 	.word	0xffffefff
 8003cbc:	ffff8fff 	.word	0xffff8fff
 8003cc0:	fffffcff 	.word	0xfffffcff
 8003cc4:	ffffdfff 	.word	0xffffdfff
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800
 8003cd4:	ffffbfff 	.word	0xffffbfff

08003cd8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	2201      	movs	r2, #1
 8003cec:	4393      	bics	r3, r2
 8003cee:	001a      	movs	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a1e      	ldr	r2, [pc, #120]	@ (8003d7c <TIM_TI1_SetConfig+0xa4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d008      	beq.n	8003d1a <TIM_TI1_SetConfig+0x42>
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	05db      	lsls	r3, r3, #23
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d003      	beq.n	8003d1a <TIM_TI1_SetConfig+0x42>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a1a      	ldr	r2, [pc, #104]	@ (8003d80 <TIM_TI1_SetConfig+0xa8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <TIM_TI1_SetConfig+0x46>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <TIM_TI1_SetConfig+0x48>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2203      	movs	r2, #3
 8003d28:	4393      	bics	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e003      	b.n	8003d3e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	22f0      	movs	r2, #240	@ 0xf0
 8003d42:	4393      	bics	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	22ff      	movs	r2, #255	@ 0xff
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	220a      	movs	r2, #10
 8003d58:	4393      	bics	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	220a      	movs	r2, #10
 8003d60:	4013      	ands	r3, r2
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	621a      	str	r2, [r3, #32]
}
 8003d74:	46c0      	nop			@ (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b006      	add	sp, #24
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40000400 	.word	0x40000400

08003d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	4393      	bics	r3, r2
 8003d9e:	001a      	movs	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	22f0      	movs	r2, #240	@ 0xf0
 8003dae:	4393      	bics	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	220a      	movs	r2, #10
 8003dc0:	4393      	bics	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	621a      	str	r2, [r3, #32]
}
 8003dd8:	46c0      	nop			@ (mov r8, r8)
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b006      	add	sp, #24
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	2210      	movs	r2, #16
 8003df4:	4393      	bics	r3, r2
 8003df6:	001a      	movs	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	4a14      	ldr	r2, [pc, #80]	@ (8003e5c <TIM_TI2_SetConfig+0x7c>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	4a10      	ldr	r2, [pc, #64]	@ (8003e60 <TIM_TI2_SetConfig+0x80>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	031b      	lsls	r3, r3, #12
 8003e26:	041b      	lsls	r3, r3, #16
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	22a0      	movs	r2, #160	@ 0xa0
 8003e34:	4393      	bics	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	22a0      	movs	r2, #160	@ 0xa0
 8003e3e:	4013      	ands	r3, r2
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b006      	add	sp, #24
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	fffffcff 	.word	0xfffffcff
 8003e60:	ffff0fff 	.word	0xffff0fff

08003e64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	2210      	movs	r2, #16
 8003e76:	4393      	bics	r3, r2
 8003e78:	001a      	movs	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec4 <TIM_TI2_ConfigInputStage+0x60>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	031b      	lsls	r3, r3, #12
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	22a0      	movs	r2, #160	@ 0xa0
 8003ea0:	4393      	bics	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b006      	add	sp, #24
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	ffff0fff 	.word	0xffff0fff

08003ec8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	4a19      	ldr	r2, [pc, #100]	@ (8003f40 <TIM_TI3_SetConfig+0x78>)
 8003edc:	401a      	ands	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	4393      	bics	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	22f0      	movs	r2, #240	@ 0xf0
 8003f02:	4393      	bics	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	22ff      	movs	r2, #255	@ 0xff
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4a0b      	ldr	r2, [pc, #44]	@ (8003f44 <TIM_TI3_SetConfig+0x7c>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	021a      	lsls	r2, r3, #8
 8003f20:	23a0      	movs	r3, #160	@ 0xa0
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	4013      	ands	r3, r2
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	621a      	str	r2, [r3, #32]
}
 8003f38:	46c0      	nop			@ (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b006      	add	sp, #24
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	fffffeff 	.word	0xfffffeff
 8003f44:	fffff5ff 	.word	0xfffff5ff

08003f48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc4 <TIM_TI4_SetConfig+0x7c>)
 8003f5c:	401a      	ands	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	4a15      	ldr	r2, [pc, #84]	@ (8003fc8 <TIM_TI4_SetConfig+0x80>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	4a12      	ldr	r2, [pc, #72]	@ (8003fcc <TIM_TI4_SetConfig+0x84>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	031b      	lsls	r3, r3, #12
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd0 <TIM_TI4_SetConfig+0x88>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	031a      	lsls	r2, r3, #12
 8003fa2:	23a0      	movs	r3, #160	@ 0xa0
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b006      	add	sp, #24
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	ffffefff 	.word	0xffffefff
 8003fc8:	fffffcff 	.word	0xfffffcff
 8003fcc:	ffff0fff 	.word	0xffff0fff
 8003fd0:	ffff5fff 	.word	0xffff5fff

08003fd4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2270      	movs	r2, #112	@ 0x70
 8003fe8:	4393      	bics	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	2207      	movs	r2, #7
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	609a      	str	r2, [r3, #8]
}
 8003ffe:	46c0      	nop			@ (mov r8, r8)
 8004000:	46bd      	mov	sp, r7
 8004002:	b004      	add	sp, #16
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4a09      	ldr	r2, [pc, #36]	@ (8004044 <TIM_ETR_SetConfig+0x3c>)
 8004020:	4013      	ands	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	021a      	lsls	r2, r3, #8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	431a      	orrs	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4313      	orrs	r3, r2
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	609a      	str	r2, [r3, #8]
}
 800403c:	46c0      	nop			@ (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	b006      	add	sp, #24
 8004042:	bd80      	pop	{r7, pc}
 8004044:	ffff00ff 	.word	0xffff00ff

08004048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	221f      	movs	r2, #31
 8004058:	4013      	ands	r3, r2
 800405a:	2201      	movs	r2, #1
 800405c:	409a      	lsls	r2, r3
 800405e:	0013      	movs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	43d2      	mvns	r2, r2
 800406a:	401a      	ands	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	211f      	movs	r1, #31
 8004078:	400b      	ands	r3, r1
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4099      	lsls	r1, r3
 800407e:	000b      	movs	r3, r1
 8004080:	431a      	orrs	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	46c0      	nop			@ (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b006      	add	sp, #24
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	223c      	movs	r2, #60	@ 0x3c
 800409e:	5c9b      	ldrb	r3, [r3, r2]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e042      	b.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	223c      	movs	r2, #60	@ 0x3c
 80040ac:	2101      	movs	r1, #1
 80040ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	223d      	movs	r2, #61	@ 0x3d
 80040b4:	2102      	movs	r1, #2
 80040b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2270      	movs	r2, #112	@ 0x70
 80040cc:	4393      	bics	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a14      	ldr	r2, [pc, #80]	@ (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00a      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	2380      	movs	r3, #128	@ 0x80
 80040f2:	05db      	lsls	r3, r3, #23
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d004      	beq.n	8004102 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a0f      	ldr	r2, [pc, #60]	@ (800413c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d10c      	bne.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2280      	movs	r2, #128	@ 0x80
 8004106:	4393      	bics	r3, r2
 8004108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	4313      	orrs	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	223d      	movs	r2, #61	@ 0x3d
 8004120:	2101      	movs	r1, #1
 8004122:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	223c      	movs	r2, #60	@ 0x3c
 8004128:	2100      	movs	r1, #0
 800412a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	0018      	movs	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	b004      	add	sp, #16
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40000400 	.word	0x40000400

08004140 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	223c      	movs	r2, #60	@ 0x3c
 8004152:	5c9b      	ldrb	r3, [r3, r2]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004158:	2302      	movs	r3, #2
 800415a:	e03e      	b.n	80041da <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	223c      	movs	r2, #60	@ 0x3c
 8004160:	2101      	movs	r1, #1
 8004162:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	22ff      	movs	r2, #255	@ 0xff
 8004168:	4393      	bics	r3, r2
 800416a:	001a      	movs	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a1b      	ldr	r2, [pc, #108]	@ (80041e4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004178:	401a      	ands	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a18      	ldr	r2, [pc, #96]	@ (80041e8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004186:	401a      	ands	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a16      	ldr	r2, [pc, #88]	@ (80041ec <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004194:	401a      	ands	r2, r3
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a13      	ldr	r2, [pc, #76]	@ (80041f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80041a2:	401a      	ands	r2, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a11      	ldr	r2, [pc, #68]	@ (80041f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80041b0:	401a      	ands	r2, r3
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4a0e      	ldr	r2, [pc, #56]	@ (80041f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80041be:	401a      	ands	r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	223c      	movs	r2, #60	@ 0x3c
 80041d4:	2100      	movs	r1, #0
 80041d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b004      	add	sp, #16
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	fffffcff 	.word	0xfffffcff
 80041e8:	fffffbff 	.word	0xfffffbff
 80041ec:	fffff7ff 	.word	0xfffff7ff
 80041f0:	ffffefff 	.word	0xffffefff
 80041f4:	ffffdfff 	.word	0xffffdfff
 80041f8:	ffffbfff 	.word	0xffffbfff

080041fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004204:	46c0      	nop			@ (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004214:	46c0      	nop			@ (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e044      	b.n	80042b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d107      	bne.n	8004246 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2278      	movs	r2, #120	@ 0x78
 800423a:	2100      	movs	r1, #0
 800423c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0018      	movs	r0, r3
 8004242:	f7fc ffb1 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2224      	movs	r2, #36	@ 0x24
 800424a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2101      	movs	r1, #1
 8004258:	438a      	bics	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	0018      	movs	r0, r3
 8004260:	f000 fb2c 	bl	80048bc <UART_SetConfig>
 8004264:	0003      	movs	r3, r0
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e024      	b.n	80042b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	0018      	movs	r0, r3
 800427a:	f000 fc5f 	bl	8004b3c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	490d      	ldr	r1, [pc, #52]	@ (80042c0 <HAL_UART_Init+0xa4>)
 800428a:	400a      	ands	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	212a      	movs	r1, #42	@ 0x2a
 800429a:	438a      	bics	r2, r1
 800429c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2101      	movs	r1, #1
 80042aa:	430a      	orrs	r2, r1
 80042ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f000 fcf7 	bl	8004ca4 <UART_CheckIdleState>
 80042b6:	0003      	movs	r3, r0
}
 80042b8:	0018      	movs	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	ffffb7ff 	.word	0xffffb7ff

080042c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b0ab      	sub	sp, #172	@ 0xac
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	22a4      	movs	r2, #164	@ 0xa4
 80042d4:	18b9      	adds	r1, r7, r2
 80042d6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	20a0      	movs	r0, #160	@ 0xa0
 80042e0:	1839      	adds	r1, r7, r0
 80042e2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	219c      	movs	r1, #156	@ 0x9c
 80042ec:	1879      	adds	r1, r7, r1
 80042ee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042f0:	0011      	movs	r1, r2
 80042f2:	18bb      	adds	r3, r7, r2
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a99      	ldr	r2, [pc, #612]	@ (800455c <HAL_UART_IRQHandler+0x298>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	2298      	movs	r2, #152	@ 0x98
 80042fc:	18bc      	adds	r4, r7, r2
 80042fe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004300:	18bb      	adds	r3, r7, r2
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d114      	bne.n	8004332 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004308:	187b      	adds	r3, r7, r1
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2220      	movs	r2, #32
 800430e:	4013      	ands	r3, r2
 8004310:	d00f      	beq.n	8004332 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004312:	183b      	adds	r3, r7, r0
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2220      	movs	r2, #32
 8004318:	4013      	ands	r3, r2
 800431a:	d00a      	beq.n	8004332 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004320:	2b00      	cmp	r3, #0
 8004322:	d100      	bne.n	8004326 <HAL_UART_IRQHandler+0x62>
 8004324:	e29e      	b.n	8004864 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	0010      	movs	r0, r2
 800432e:	4798      	blx	r3
      }
      return;
 8004330:	e298      	b.n	8004864 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004332:	2398      	movs	r3, #152	@ 0x98
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d100      	bne.n	800433e <HAL_UART_IRQHandler+0x7a>
 800433c:	e114      	b.n	8004568 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800433e:	239c      	movs	r3, #156	@ 0x9c
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2201      	movs	r2, #1
 8004346:	4013      	ands	r3, r2
 8004348:	d106      	bne.n	8004358 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800434a:	23a0      	movs	r3, #160	@ 0xa0
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a83      	ldr	r2, [pc, #524]	@ (8004560 <HAL_UART_IRQHandler+0x29c>)
 8004352:	4013      	ands	r3, r2
 8004354:	d100      	bne.n	8004358 <HAL_UART_IRQHandler+0x94>
 8004356:	e107      	b.n	8004568 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004358:	23a4      	movs	r3, #164	@ 0xa4
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2201      	movs	r2, #1
 8004360:	4013      	ands	r3, r2
 8004362:	d012      	beq.n	800438a <HAL_UART_IRQHandler+0xc6>
 8004364:	23a0      	movs	r3, #160	@ 0xa0
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	2380      	movs	r3, #128	@ 0x80
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4013      	ands	r3, r2
 8004370:	d00b      	beq.n	800438a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2201      	movs	r2, #1
 8004378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2284      	movs	r2, #132	@ 0x84
 800437e:	589b      	ldr	r3, [r3, r2]
 8004380:	2201      	movs	r2, #1
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2184      	movs	r1, #132	@ 0x84
 8004388:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800438a:	23a4      	movs	r3, #164	@ 0xa4
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2202      	movs	r2, #2
 8004392:	4013      	ands	r3, r2
 8004394:	d011      	beq.n	80043ba <HAL_UART_IRQHandler+0xf6>
 8004396:	239c      	movs	r3, #156	@ 0x9c
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2201      	movs	r2, #1
 800439e:	4013      	ands	r3, r2
 80043a0:	d00b      	beq.n	80043ba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2202      	movs	r2, #2
 80043a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2284      	movs	r2, #132	@ 0x84
 80043ae:	589b      	ldr	r3, [r3, r2]
 80043b0:	2204      	movs	r2, #4
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2184      	movs	r1, #132	@ 0x84
 80043b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ba:	23a4      	movs	r3, #164	@ 0xa4
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2204      	movs	r2, #4
 80043c2:	4013      	ands	r3, r2
 80043c4:	d011      	beq.n	80043ea <HAL_UART_IRQHandler+0x126>
 80043c6:	239c      	movs	r3, #156	@ 0x9c
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2201      	movs	r2, #1
 80043ce:	4013      	ands	r3, r2
 80043d0:	d00b      	beq.n	80043ea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2204      	movs	r2, #4
 80043d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2284      	movs	r2, #132	@ 0x84
 80043de:	589b      	ldr	r3, [r3, r2]
 80043e0:	2202      	movs	r2, #2
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2184      	movs	r1, #132	@ 0x84
 80043e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043ea:	23a4      	movs	r3, #164	@ 0xa4
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2208      	movs	r2, #8
 80043f2:	4013      	ands	r3, r2
 80043f4:	d017      	beq.n	8004426 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043f6:	23a0      	movs	r3, #160	@ 0xa0
 80043f8:	18fb      	adds	r3, r7, r3
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2220      	movs	r2, #32
 80043fe:	4013      	ands	r3, r2
 8004400:	d105      	bne.n	800440e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004402:	239c      	movs	r3, #156	@ 0x9c
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2201      	movs	r2, #1
 800440a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800440c:	d00b      	beq.n	8004426 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2208      	movs	r2, #8
 8004414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2284      	movs	r2, #132	@ 0x84
 800441a:	589b      	ldr	r3, [r3, r2]
 800441c:	2208      	movs	r2, #8
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2184      	movs	r1, #132	@ 0x84
 8004424:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004426:	23a4      	movs	r3, #164	@ 0xa4
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	2380      	movs	r3, #128	@ 0x80
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	4013      	ands	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_UART_IRQHandler+0x198>
 8004434:	23a0      	movs	r3, #160	@ 0xa0
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	2380      	movs	r3, #128	@ 0x80
 800443c:	04db      	lsls	r3, r3, #19
 800443e:	4013      	ands	r3, r2
 8004440:	d00c      	beq.n	800445c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2280      	movs	r2, #128	@ 0x80
 8004448:	0112      	lsls	r2, r2, #4
 800444a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2284      	movs	r2, #132	@ 0x84
 8004450:	589b      	ldr	r3, [r3, r2]
 8004452:	2220      	movs	r2, #32
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2184      	movs	r1, #132	@ 0x84
 800445a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2284      	movs	r2, #132	@ 0x84
 8004460:	589b      	ldr	r3, [r3, r2]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d100      	bne.n	8004468 <HAL_UART_IRQHandler+0x1a4>
 8004466:	e1ff      	b.n	8004868 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004468:	23a4      	movs	r3, #164	@ 0xa4
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2220      	movs	r2, #32
 8004470:	4013      	ands	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004474:	23a0      	movs	r3, #160	@ 0xa0
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2220      	movs	r2, #32
 800447c:	4013      	ands	r3, r2
 800447e:	d008      	beq.n	8004492 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004484:	2b00      	cmp	r3, #0
 8004486:	d004      	beq.n	8004492 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	0010      	movs	r0, r2
 8004490:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2284      	movs	r2, #132	@ 0x84
 8004496:	589b      	ldr	r3, [r3, r2]
 8004498:	2194      	movs	r1, #148	@ 0x94
 800449a:	187a      	adds	r2, r7, r1
 800449c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2240      	movs	r2, #64	@ 0x40
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b40      	cmp	r3, #64	@ 0x40
 80044aa:	d004      	beq.n	80044b6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044ac:	187b      	adds	r3, r7, r1
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2228      	movs	r2, #40	@ 0x28
 80044b2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044b4:	d047      	beq.n	8004546 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 fd05 	bl	8004ec8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2240      	movs	r2, #64	@ 0x40
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b40      	cmp	r3, #64	@ 0x40
 80044ca:	d137      	bne.n	800453c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044cc:	f3ef 8310 	mrs	r3, PRIMASK
 80044d0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80044d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d4:	2090      	movs	r0, #144	@ 0x90
 80044d6:	183a      	adds	r2, r7, r0
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	2301      	movs	r3, #1
 80044dc:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044e0:	f383 8810 	msr	PRIMASK, r3
}
 80044e4:	46c0      	nop			@ (mov r8, r8)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2140      	movs	r1, #64	@ 0x40
 80044f2:	438a      	bics	r2, r1
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	183b      	adds	r3, r7, r0
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044fe:	f383 8810 	msr	PRIMASK, r3
}
 8004502:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004508:	2b00      	cmp	r3, #0
 800450a:	d012      	beq.n	8004532 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004510:	4a14      	ldr	r2, [pc, #80]	@ (8004564 <HAL_UART_IRQHandler+0x2a0>)
 8004512:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004518:	0018      	movs	r0, r3
 800451a:	f7fd fc4b 	bl	8001db4 <HAL_DMA_Abort_IT>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d01a      	beq.n	8004558 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452c:	0018      	movs	r0, r3
 800452e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004530:	e012      	b.n	8004558 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	0018      	movs	r0, r3
 8004536:	f000 f9ad 	bl	8004894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453a:	e00d      	b.n	8004558 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	0018      	movs	r0, r3
 8004540:	f000 f9a8 	bl	8004894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	e008      	b.n	8004558 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f000 f9a3 	bl	8004894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2284      	movs	r2, #132	@ 0x84
 8004552:	2100      	movs	r1, #0
 8004554:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004556:	e187      	b.n	8004868 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	46c0      	nop			@ (mov r8, r8)
    return;
 800455a:	e185      	b.n	8004868 <HAL_UART_IRQHandler+0x5a4>
 800455c:	0000080f 	.word	0x0000080f
 8004560:	04000120 	.word	0x04000120
 8004564:	08004f91 	.word	0x08004f91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456c:	2b01      	cmp	r3, #1
 800456e:	d000      	beq.n	8004572 <HAL_UART_IRQHandler+0x2ae>
 8004570:	e139      	b.n	80047e6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004572:	23a4      	movs	r3, #164	@ 0xa4
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2210      	movs	r2, #16
 800457a:	4013      	ands	r3, r2
 800457c:	d100      	bne.n	8004580 <HAL_UART_IRQHandler+0x2bc>
 800457e:	e132      	b.n	80047e6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004580:	23a0      	movs	r3, #160	@ 0xa0
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2210      	movs	r2, #16
 8004588:	4013      	ands	r3, r2
 800458a:	d100      	bne.n	800458e <HAL_UART_IRQHandler+0x2ca>
 800458c:	e12b      	b.n	80047e6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2210      	movs	r2, #16
 8004594:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2240      	movs	r2, #64	@ 0x40
 800459e:	4013      	ands	r3, r2
 80045a0:	2b40      	cmp	r3, #64	@ 0x40
 80045a2:	d000      	beq.n	80045a6 <HAL_UART_IRQHandler+0x2e2>
 80045a4:	e09f      	b.n	80046e6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	217e      	movs	r1, #126	@ 0x7e
 80045b0:	187b      	adds	r3, r7, r1
 80045b2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80045b4:	187b      	adds	r3, r7, r1
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d100      	bne.n	80045be <HAL_UART_IRQHandler+0x2fa>
 80045bc:	e156      	b.n	800486c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2258      	movs	r2, #88	@ 0x58
 80045c2:	5a9b      	ldrh	r3, [r3, r2]
 80045c4:	187a      	adds	r2, r7, r1
 80045c6:	8812      	ldrh	r2, [r2, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d300      	bcc.n	80045ce <HAL_UART_IRQHandler+0x30a>
 80045cc:	e14e      	b.n	800486c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	187a      	adds	r2, r7, r1
 80045d2:	215a      	movs	r1, #90	@ 0x5a
 80045d4:	8812      	ldrh	r2, [r2, #0]
 80045d6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d06f      	beq.n	80046c2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e2:	f3ef 8310 	mrs	r3, PRIMASK
 80045e6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80045e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045ec:	2301      	movs	r3, #1
 80045ee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f2:	f383 8810 	msr	PRIMASK, r3
}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	499e      	ldr	r1, [pc, #632]	@ (800487c <HAL_UART_IRQHandler+0x5b8>)
 8004604:	400a      	ands	r2, r1
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800460a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460e:	f383 8810 	msr	PRIMASK, r3
}
 8004612:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004614:	f3ef 8310 	mrs	r3, PRIMASK
 8004618:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800461a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461c:	677b      	str	r3, [r7, #116]	@ 0x74
 800461e:	2301      	movs	r3, #1
 8004620:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004624:	f383 8810 	msr	PRIMASK, r3
}
 8004628:	46c0      	nop			@ (mov r8, r8)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2101      	movs	r1, #1
 8004636:	438a      	bics	r2, r1
 8004638:	609a      	str	r2, [r3, #8]
 800463a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800463c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004640:	f383 8810 	msr	PRIMASK, r3
}
 8004644:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004646:	f3ef 8310 	mrs	r3, PRIMASK
 800464a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800464c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800464e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004650:	2301      	movs	r3, #1
 8004652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004656:	f383 8810 	msr	PRIMASK, r3
}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2140      	movs	r1, #64	@ 0x40
 8004668:	438a      	bics	r2, r1
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800466e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004672:	f383 8810 	msr	PRIMASK, r3
}
 8004676:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2280      	movs	r2, #128	@ 0x80
 800467c:	2120      	movs	r1, #32
 800467e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004686:	f3ef 8310 	mrs	r3, PRIMASK
 800468a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800468c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800468e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004690:	2301      	movs	r3, #1
 8004692:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004694:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004696:	f383 8810 	msr	PRIMASK, r3
}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2110      	movs	r1, #16
 80046a8:	438a      	bics	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046bc:	0018      	movs	r0, r3
 80046be:	f7fd fb41 	bl	8001d44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2258      	movs	r2, #88	@ 0x58
 80046cc:	5a9a      	ldrh	r2, [r3, r2]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	215a      	movs	r1, #90	@ 0x5a
 80046d2:	5a5b      	ldrh	r3, [r3, r1]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	b29a      	uxth	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0011      	movs	r1, r2
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 f8e0 	bl	80048a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046e4:	e0c2      	b.n	800486c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2258      	movs	r2, #88	@ 0x58
 80046ea:	5a99      	ldrh	r1, [r3, r2]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	225a      	movs	r2, #90	@ 0x5a
 80046f0:	5a9b      	ldrh	r3, [r3, r2]
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	208e      	movs	r0, #142	@ 0x8e
 80046f6:	183b      	adds	r3, r7, r0
 80046f8:	1a8a      	subs	r2, r1, r2
 80046fa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	225a      	movs	r2, #90	@ 0x5a
 8004700:	5a9b      	ldrh	r3, [r3, r2]
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d100      	bne.n	800470a <HAL_UART_IRQHandler+0x446>
 8004708:	e0b2      	b.n	8004870 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800470a:	183b      	adds	r3, r7, r0
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d100      	bne.n	8004714 <HAL_UART_IRQHandler+0x450>
 8004712:	e0ad      	b.n	8004870 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004714:	f3ef 8310 	mrs	r3, PRIMASK
 8004718:	60fb      	str	r3, [r7, #12]
  return(result);
 800471a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800471c:	2488      	movs	r4, #136	@ 0x88
 800471e:	193a      	adds	r2, r7, r4
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	2301      	movs	r3, #1
 8004724:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f383 8810 	msr	PRIMASK, r3
}
 800472c:	46c0      	nop			@ (mov r8, r8)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4951      	ldr	r1, [pc, #324]	@ (8004880 <HAL_UART_IRQHandler+0x5bc>)
 800473a:	400a      	ands	r2, r1
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	193b      	adds	r3, r7, r4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f383 8810 	msr	PRIMASK, r3
}
 800474a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800474c:	f3ef 8310 	mrs	r3, PRIMASK
 8004750:	61bb      	str	r3, [r7, #24]
  return(result);
 8004752:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004754:	2484      	movs	r4, #132	@ 0x84
 8004756:	193a      	adds	r2, r7, r4
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	2301      	movs	r3, #1
 800475c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f383 8810 	msr	PRIMASK, r3
}
 8004764:	46c0      	nop			@ (mov r8, r8)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2101      	movs	r1, #1
 8004772:	438a      	bics	r2, r1
 8004774:	609a      	str	r2, [r3, #8]
 8004776:	193b      	adds	r3, r7, r4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	f383 8810 	msr	PRIMASK, r3
}
 8004782:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2280      	movs	r2, #128	@ 0x80
 8004788:	2120      	movs	r1, #32
 800478a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004798:	f3ef 8310 	mrs	r3, PRIMASK
 800479c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a0:	2480      	movs	r4, #128	@ 0x80
 80047a2:	193a      	adds	r2, r7, r4
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	2301      	movs	r3, #1
 80047a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ac:	f383 8810 	msr	PRIMASK, r3
}
 80047b0:	46c0      	nop			@ (mov r8, r8)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2110      	movs	r1, #16
 80047be:	438a      	bics	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	193b      	adds	r3, r7, r4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ca:	f383 8810 	msr	PRIMASK, r3
}
 80047ce:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047d6:	183b      	adds	r3, r7, r0
 80047d8:	881a      	ldrh	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0011      	movs	r1, r2
 80047de:	0018      	movs	r0, r3
 80047e0:	f000 f860 	bl	80048a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047e4:	e044      	b.n	8004870 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047e6:	23a4      	movs	r3, #164	@ 0xa4
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	2380      	movs	r3, #128	@ 0x80
 80047ee:	035b      	lsls	r3, r3, #13
 80047f0:	4013      	ands	r3, r2
 80047f2:	d010      	beq.n	8004816 <HAL_UART_IRQHandler+0x552>
 80047f4:	239c      	movs	r3, #156	@ 0x9c
 80047f6:	18fb      	adds	r3, r7, r3
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	2380      	movs	r3, #128	@ 0x80
 80047fc:	03db      	lsls	r3, r3, #15
 80047fe:	4013      	ands	r3, r2
 8004800:	d009      	beq.n	8004816 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2280      	movs	r2, #128	@ 0x80
 8004808:	0352      	lsls	r2, r2, #13
 800480a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	0018      	movs	r0, r3
 8004810:	f000 fc00 	bl	8005014 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004814:	e02f      	b.n	8004876 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004816:	23a4      	movs	r3, #164	@ 0xa4
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2280      	movs	r2, #128	@ 0x80
 800481e:	4013      	ands	r3, r2
 8004820:	d00f      	beq.n	8004842 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004822:	23a0      	movs	r3, #160	@ 0xa0
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2280      	movs	r2, #128	@ 0x80
 800482a:	4013      	ands	r3, r2
 800482c:	d009      	beq.n	8004842 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01e      	beq.n	8004874 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	0010      	movs	r0, r2
 800483e:	4798      	blx	r3
    }
    return;
 8004840:	e018      	b.n	8004874 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004842:	23a4      	movs	r3, #164	@ 0xa4
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2240      	movs	r2, #64	@ 0x40
 800484a:	4013      	ands	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_UART_IRQHandler+0x5b2>
 800484e:	23a0      	movs	r3, #160	@ 0xa0
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2240      	movs	r2, #64	@ 0x40
 8004856:	4013      	ands	r3, r2
 8004858:	d00d      	beq.n	8004876 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	0018      	movs	r0, r3
 800485e:	f000 fbae 	bl	8004fbe <UART_EndTransmit_IT>
    return;
 8004862:	e008      	b.n	8004876 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004864:	46c0      	nop			@ (mov r8, r8)
 8004866:	e006      	b.n	8004876 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004868:	46c0      	nop			@ (mov r8, r8)
 800486a:	e004      	b.n	8004876 <HAL_UART_IRQHandler+0x5b2>
      return;
 800486c:	46c0      	nop			@ (mov r8, r8)
 800486e:	e002      	b.n	8004876 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004870:	46c0      	nop			@ (mov r8, r8)
 8004872:	e000      	b.n	8004876 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004874:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004876:	46bd      	mov	sp, r7
 8004878:	b02b      	add	sp, #172	@ 0xac
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	fffffeff 	.word	0xfffffeff
 8004880:	fffffedf 	.word	0xfffffedf

08004884 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800488c:	46c0      	nop			@ (mov r8, r8)
 800488e:	46bd      	mov	sp, r7
 8004890:	b002      	add	sp, #8
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800489c:	46c0      	nop			@ (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b002      	add	sp, #8
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	000a      	movs	r2, r1
 80048ae:	1cbb      	adds	r3, r7, #2
 80048b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048b2:	46c0      	nop			@ (mov r8, r8)
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b002      	add	sp, #8
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048c4:	231e      	movs	r3, #30
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a8d      	ldr	r2, [pc, #564]	@ (8004b20 <UART_SetConfig+0x264>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	0019      	movs	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4a88      	ldr	r2, [pc, #544]	@ (8004b24 <UART_SetConfig+0x268>)
 8004902:	4013      	ands	r3, r2
 8004904:	0019      	movs	r1, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4a7f      	ldr	r2, [pc, #508]	@ (8004b28 <UART_SetConfig+0x26c>)
 800492a:	4013      	ands	r3, r2
 800492c:	0019      	movs	r1, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a7b      	ldr	r2, [pc, #492]	@ (8004b2c <UART_SetConfig+0x270>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d127      	bne.n	8004992 <UART_SetConfig+0xd6>
 8004942:	4b7b      	ldr	r3, [pc, #492]	@ (8004b30 <UART_SetConfig+0x274>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004946:	2203      	movs	r2, #3
 8004948:	4013      	ands	r3, r2
 800494a:	2b03      	cmp	r3, #3
 800494c:	d00d      	beq.n	800496a <UART_SetConfig+0xae>
 800494e:	d81b      	bhi.n	8004988 <UART_SetConfig+0xcc>
 8004950:	2b02      	cmp	r3, #2
 8004952:	d014      	beq.n	800497e <UART_SetConfig+0xc2>
 8004954:	d818      	bhi.n	8004988 <UART_SetConfig+0xcc>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <UART_SetConfig+0xa4>
 800495a:	2b01      	cmp	r3, #1
 800495c:	d00a      	beq.n	8004974 <UART_SetConfig+0xb8>
 800495e:	e013      	b.n	8004988 <UART_SetConfig+0xcc>
 8004960:	231f      	movs	r3, #31
 8004962:	18fb      	adds	r3, r7, r3
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e021      	b.n	80049ae <UART_SetConfig+0xf2>
 800496a:	231f      	movs	r3, #31
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	2202      	movs	r2, #2
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	e01c      	b.n	80049ae <UART_SetConfig+0xf2>
 8004974:	231f      	movs	r3, #31
 8004976:	18fb      	adds	r3, r7, r3
 8004978:	2204      	movs	r2, #4
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e017      	b.n	80049ae <UART_SetConfig+0xf2>
 800497e:	231f      	movs	r3, #31
 8004980:	18fb      	adds	r3, r7, r3
 8004982:	2208      	movs	r2, #8
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	e012      	b.n	80049ae <UART_SetConfig+0xf2>
 8004988:	231f      	movs	r3, #31
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	2210      	movs	r2, #16
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	e00d      	b.n	80049ae <UART_SetConfig+0xf2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a67      	ldr	r2, [pc, #412]	@ (8004b34 <UART_SetConfig+0x278>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d104      	bne.n	80049a6 <UART_SetConfig+0xea>
 800499c:	231f      	movs	r3, #31
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e003      	b.n	80049ae <UART_SetConfig+0xf2>
 80049a6:	231f      	movs	r3, #31
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	2210      	movs	r2, #16
 80049ac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69da      	ldr	r2, [r3, #28]
 80049b2:	2380      	movs	r3, #128	@ 0x80
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d15c      	bne.n	8004a74 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80049ba:	231f      	movs	r3, #31
 80049bc:	18fb      	adds	r3, r7, r3
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d015      	beq.n	80049f0 <UART_SetConfig+0x134>
 80049c4:	dc18      	bgt.n	80049f8 <UART_SetConfig+0x13c>
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d00d      	beq.n	80049e6 <UART_SetConfig+0x12a>
 80049ca:	dc15      	bgt.n	80049f8 <UART_SetConfig+0x13c>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <UART_SetConfig+0x11a>
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d005      	beq.n	80049e0 <UART_SetConfig+0x124>
 80049d4:	e010      	b.n	80049f8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d6:	f7fe f8b7 	bl	8002b48 <HAL_RCC_GetPCLK1Freq>
 80049da:	0003      	movs	r3, r0
 80049dc:	61bb      	str	r3, [r7, #24]
        break;
 80049de:	e012      	b.n	8004a06 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e0:	4b55      	ldr	r3, [pc, #340]	@ (8004b38 <UART_SetConfig+0x27c>)
 80049e2:	61bb      	str	r3, [r7, #24]
        break;
 80049e4:	e00f      	b.n	8004a06 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e6:	f7fe f833 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 80049ea:	0003      	movs	r3, r0
 80049ec:	61bb      	str	r3, [r7, #24]
        break;
 80049ee:	e00a      	b.n	8004a06 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f0:	2380      	movs	r3, #128	@ 0x80
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	61bb      	str	r3, [r7, #24]
        break;
 80049f6:	e006      	b.n	8004a06 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049fc:	231e      	movs	r3, #30
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]
        break;
 8004a04:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d100      	bne.n	8004a0e <UART_SetConfig+0x152>
 8004a0c:	e07a      	b.n	8004b04 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	005a      	lsls	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	18d2      	adds	r2, r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	0019      	movs	r1, r3
 8004a20:	0010      	movs	r0, r2
 8004a22:	f7fb fb71 	bl	8000108 <__udivsi3>
 8004a26:	0003      	movs	r3, r0
 8004a28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b0f      	cmp	r3, #15
 8004a2e:	d91c      	bls.n	8004a6a <UART_SetConfig+0x1ae>
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	025b      	lsls	r3, r3, #9
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d217      	bcs.n	8004a6a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	200e      	movs	r0, #14
 8004a40:	183b      	adds	r3, r7, r0
 8004a42:	210f      	movs	r1, #15
 8004a44:	438a      	bics	r2, r1
 8004a46:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2207      	movs	r2, #7
 8004a50:	4013      	ands	r3, r2
 8004a52:	b299      	uxth	r1, r3
 8004a54:	183b      	adds	r3, r7, r0
 8004a56:	183a      	adds	r2, r7, r0
 8004a58:	8812      	ldrh	r2, [r2, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	183a      	adds	r2, r7, r0
 8004a64:	8812      	ldrh	r2, [r2, #0]
 8004a66:	60da      	str	r2, [r3, #12]
 8004a68:	e04c      	b.n	8004b04 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004a6a:	231e      	movs	r3, #30
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	2201      	movs	r2, #1
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e047      	b.n	8004b04 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a74:	231f      	movs	r3, #31
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d015      	beq.n	8004aaa <UART_SetConfig+0x1ee>
 8004a7e:	dc18      	bgt.n	8004ab2 <UART_SetConfig+0x1f6>
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d00d      	beq.n	8004aa0 <UART_SetConfig+0x1e4>
 8004a84:	dc15      	bgt.n	8004ab2 <UART_SetConfig+0x1f6>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <UART_SetConfig+0x1d4>
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d005      	beq.n	8004a9a <UART_SetConfig+0x1de>
 8004a8e:	e010      	b.n	8004ab2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a90:	f7fe f85a 	bl	8002b48 <HAL_RCC_GetPCLK1Freq>
 8004a94:	0003      	movs	r3, r0
 8004a96:	61bb      	str	r3, [r7, #24]
        break;
 8004a98:	e012      	b.n	8004ac0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a9a:	4b27      	ldr	r3, [pc, #156]	@ (8004b38 <UART_SetConfig+0x27c>)
 8004a9c:	61bb      	str	r3, [r7, #24]
        break;
 8004a9e:	e00f      	b.n	8004ac0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa0:	f7fd ffd6 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	61bb      	str	r3, [r7, #24]
        break;
 8004aa8:	e00a      	b.n	8004ac0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aaa:	2380      	movs	r3, #128	@ 0x80
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	61bb      	str	r3, [r7, #24]
        break;
 8004ab0:	e006      	b.n	8004ac0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ab6:	231e      	movs	r3, #30
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
        break;
 8004abe:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01e      	beq.n	8004b04 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	085a      	lsrs	r2, r3, #1
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	18d2      	adds	r2, r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	0019      	movs	r1, r3
 8004ad6:	0010      	movs	r0, r2
 8004ad8:	f7fb fb16 	bl	8000108 <__udivsi3>
 8004adc:	0003      	movs	r3, r0
 8004ade:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	2b0f      	cmp	r3, #15
 8004ae4:	d90a      	bls.n	8004afc <UART_SetConfig+0x240>
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	2380      	movs	r3, #128	@ 0x80
 8004aea:	025b      	lsls	r3, r3, #9
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d205      	bcs.n	8004afc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	e003      	b.n	8004b04 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004afc:	231e      	movs	r3, #30
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b10:	231e      	movs	r3, #30
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	781b      	ldrb	r3, [r3, #0]
}
 8004b16:	0018      	movs	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b008      	add	sp, #32
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	efff69f3 	.word	0xefff69f3
 8004b24:	ffffcfff 	.word	0xffffcfff
 8004b28:	fffff4ff 	.word	0xfffff4ff
 8004b2c:	40013800 	.word	0x40013800
 8004b30:	40021000 	.word	0x40021000
 8004b34:	40004400 	.word	0x40004400
 8004b38:	007a1200 	.word	0x007a1200

08004b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b48:	2201      	movs	r2, #1
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d00b      	beq.n	8004b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a4a      	ldr	r2, [pc, #296]	@ (8004c80 <UART_AdvFeatureConfig+0x144>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	0019      	movs	r1, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d00b      	beq.n	8004b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	4a43      	ldr	r2, [pc, #268]	@ (8004c84 <UART_AdvFeatureConfig+0x148>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	0019      	movs	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d00b      	beq.n	8004baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	4a3b      	ldr	r2, [pc, #236]	@ (8004c88 <UART_AdvFeatureConfig+0x14c>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bae:	2208      	movs	r2, #8
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d00b      	beq.n	8004bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4a34      	ldr	r2, [pc, #208]	@ (8004c8c <UART_AdvFeatureConfig+0x150>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	0019      	movs	r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8004c90 <UART_AdvFeatureConfig+0x154>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	0019      	movs	r1, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d00b      	beq.n	8004c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	4a25      	ldr	r2, [pc, #148]	@ (8004c94 <UART_AdvFeatureConfig+0x158>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	0019      	movs	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	2240      	movs	r2, #64	@ 0x40
 8004c16:	4013      	ands	r3, r2
 8004c18:	d01d      	beq.n	8004c56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a1d      	ldr	r2, [pc, #116]	@ (8004c98 <UART_AdvFeatureConfig+0x15c>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	0019      	movs	r1, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c36:	2380      	movs	r3, #128	@ 0x80
 8004c38:	035b      	lsls	r3, r3, #13
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d10b      	bne.n	8004c56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4a15      	ldr	r2, [pc, #84]	@ (8004c9c <UART_AdvFeatureConfig+0x160>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	0019      	movs	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	2280      	movs	r2, #128	@ 0x80
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d00b      	beq.n	8004c78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4a0e      	ldr	r2, [pc, #56]	@ (8004ca0 <UART_AdvFeatureConfig+0x164>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }
}
 8004c78:	46c0      	nop			@ (mov r8, r8)
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b002      	add	sp, #8
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	fffdffff 	.word	0xfffdffff
 8004c84:	fffeffff 	.word	0xfffeffff
 8004c88:	fffbffff 	.word	0xfffbffff
 8004c8c:	ffff7fff 	.word	0xffff7fff
 8004c90:	ffffefff 	.word	0xffffefff
 8004c94:	ffffdfff 	.word	0xffffdfff
 8004c98:	ffefffff 	.word	0xffefffff
 8004c9c:	ff9fffff 	.word	0xff9fffff
 8004ca0:	fff7ffff 	.word	0xfff7ffff

08004ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b092      	sub	sp, #72	@ 0x48
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2284      	movs	r2, #132	@ 0x84
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cb4:	f7fc fbd0 	bl	8001458 <HAL_GetTick>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d12c      	bne.n	8004d24 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ccc:	2280      	movs	r2, #128	@ 0x80
 8004cce:	0391      	lsls	r1, r2, #14
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4a46      	ldr	r2, [pc, #280]	@ (8004dec <UART_CheckIdleState+0x148>)
 8004cd4:	9200      	str	r2, [sp, #0]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f000 f88c 	bl	8004df4 <UART_WaitOnFlagUntilTimeout>
 8004cdc:	1e03      	subs	r3, r0, #0
 8004cde:	d021      	beq.n	8004d24 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cea:	2301      	movs	r3, #1
 8004cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf0:	f383 8810 	msr	PRIMASK, r3
}
 8004cf4:	46c0      	nop			@ (mov r8, r8)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2180      	movs	r1, #128	@ 0x80
 8004d02:	438a      	bics	r2, r1
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0c:	f383 8810 	msr	PRIMASK, r3
}
 8004d10:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2278      	movs	r2, #120	@ 0x78
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e05f      	b.n	8004de4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d146      	bne.n	8004dc0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d34:	2280      	movs	r2, #128	@ 0x80
 8004d36:	03d1      	lsls	r1, r2, #15
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dec <UART_CheckIdleState+0x148>)
 8004d3c:	9200      	str	r2, [sp, #0]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f000 f858 	bl	8004df4 <UART_WaitOnFlagUntilTimeout>
 8004d44:	1e03      	subs	r3, r0, #0
 8004d46:	d03b      	beq.n	8004dc0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d48:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d52:	2301      	movs	r3, #1
 8004d54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f383 8810 	msr	PRIMASK, r3
}
 8004d5c:	46c0      	nop			@ (mov r8, r8)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4921      	ldr	r1, [pc, #132]	@ (8004df0 <UART_CheckIdleState+0x14c>)
 8004d6a:	400a      	ands	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f383 8810 	msr	PRIMASK, r3
}
 8004d78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d80:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d82:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d84:	2301      	movs	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f383 8810 	msr	PRIMASK, r3
}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	438a      	bics	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	f383 8810 	msr	PRIMASK, r3
}
 8004daa:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2280      	movs	r2, #128	@ 0x80
 8004db0:	2120      	movs	r1, #32
 8004db2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2278      	movs	r2, #120	@ 0x78
 8004db8:	2100      	movs	r1, #0
 8004dba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e011      	b.n	8004de4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2280      	movs	r2, #128	@ 0x80
 8004dca:	2120      	movs	r1, #32
 8004dcc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2278      	movs	r2, #120	@ 0x78
 8004dde:	2100      	movs	r1, #0
 8004de0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	0018      	movs	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b010      	add	sp, #64	@ 0x40
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	01ffffff 	.word	0x01ffffff
 8004df0:	fffffedf 	.word	0xfffffedf

08004df4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	1dfb      	adds	r3, r7, #7
 8004e02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e04:	e04b      	b.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	d048      	beq.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0c:	f7fc fb24 	bl	8001458 <HAL_GetTick>
 8004e10:	0002      	movs	r2, r0
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e04b      	b.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2204      	movs	r2, #4
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d035      	beq.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	2208      	movs	r2, #8
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d111      	bne.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2208      	movs	r2, #8
 8004e46:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f000 f83c 	bl	8004ec8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2284      	movs	r2, #132	@ 0x84
 8004e54:	2108      	movs	r1, #8
 8004e56:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2278      	movs	r2, #120	@ 0x78
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e02c      	b.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69da      	ldr	r2, [r3, #28]
 8004e6a:	2380      	movs	r3, #128	@ 0x80
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	401a      	ands	r2, r3
 8004e70:	2380      	movs	r3, #128	@ 0x80
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d112      	bne.n	8004e9e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2280      	movs	r2, #128	@ 0x80
 8004e7e:	0112      	lsls	r2, r2, #4
 8004e80:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	0018      	movs	r0, r3
 8004e86:	f000 f81f 	bl	8004ec8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2284      	movs	r2, #132	@ 0x84
 8004e8e:	2120      	movs	r1, #32
 8004e90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2278      	movs	r2, #120	@ 0x78
 8004e96:	2100      	movs	r1, #0
 8004e98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e00f      	b.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	425a      	negs	r2, r3
 8004eae:	4153      	adcs	r3, r2
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	001a      	movs	r2, r3
 8004eb4:	1dfb      	adds	r3, r7, #7
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d0a4      	beq.n	8004e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b004      	add	sp, #16
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08e      	sub	sp, #56	@ 0x38
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed4:	617b      	str	r3, [r7, #20]
  return(result);
 8004ed6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eda:	2301      	movs	r3, #1
 8004edc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	f383 8810 	msr	PRIMASK, r3
}
 8004ee4:	46c0      	nop			@ (mov r8, r8)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4926      	ldr	r1, [pc, #152]	@ (8004f8c <UART_EndRxTransfer+0xc4>)
 8004ef2:	400a      	ands	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f383 8810 	msr	PRIMASK, r3
}
 8004f00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f02:	f3ef 8310 	mrs	r3, PRIMASK
 8004f06:	623b      	str	r3, [r7, #32]
  return(result);
 8004f08:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	f383 8810 	msr	PRIMASK, r3
}
 8004f16:	46c0      	nop			@ (mov r8, r8)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2101      	movs	r1, #1
 8004f24:	438a      	bics	r2, r1
 8004f26:	609a      	str	r2, [r3, #8]
 8004f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2e:	f383 8810 	msr	PRIMASK, r3
}
 8004f32:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d118      	bne.n	8004f6e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f40:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f42:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f46:	2301      	movs	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f383 8810 	msr	PRIMASK, r3
}
 8004f50:	46c0      	nop			@ (mov r8, r8)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2110      	movs	r1, #16
 8004f5e:	438a      	bics	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f383 8810 	msr	PRIMASK, r3
}
 8004f6c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2280      	movs	r2, #128	@ 0x80
 8004f72:	2120      	movs	r1, #32
 8004f74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f82:	46c0      	nop			@ (mov r8, r8)
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b00e      	add	sp, #56	@ 0x38
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	46c0      	nop			@ (mov r8, r8)
 8004f8c:	fffffedf 	.word	0xfffffedf

08004f90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	225a      	movs	r2, #90	@ 0x5a
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2252      	movs	r2, #82	@ 0x52
 8004faa:	2100      	movs	r1, #0
 8004fac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7ff fc6f 	bl	8004894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b004      	add	sp, #16
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fca:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f383 8810 	msr	PRIMASK, r3
}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2140      	movs	r1, #64	@ 0x40
 8004fe8:	438a      	bics	r2, r1
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f383 8810 	msr	PRIMASK, r3
}
 8004ff6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	0018      	movs	r0, r3
 8005008:	f7ff fc3c 	bl	8004884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	b006      	add	sp, #24
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800501c:	46c0      	nop			@ (mov r8, r8)
 800501e:	46bd      	mov	sp, r7
 8005020:	b002      	add	sp, #8
 8005022:	bd80      	pop	{r7, pc}

08005024 <memset>:
 8005024:	0003      	movs	r3, r0
 8005026:	1882      	adds	r2, r0, r2
 8005028:	4293      	cmp	r3, r2
 800502a:	d100      	bne.n	800502e <memset+0xa>
 800502c:	4770      	bx	lr
 800502e:	7019      	strb	r1, [r3, #0]
 8005030:	3301      	adds	r3, #1
 8005032:	e7f9      	b.n	8005028 <memset+0x4>

08005034 <__libc_init_array>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	2600      	movs	r6, #0
 8005038:	4c0c      	ldr	r4, [pc, #48]	@ (800506c <__libc_init_array+0x38>)
 800503a:	4d0d      	ldr	r5, [pc, #52]	@ (8005070 <__libc_init_array+0x3c>)
 800503c:	1b64      	subs	r4, r4, r5
 800503e:	10a4      	asrs	r4, r4, #2
 8005040:	42a6      	cmp	r6, r4
 8005042:	d109      	bne.n	8005058 <__libc_init_array+0x24>
 8005044:	2600      	movs	r6, #0
 8005046:	f000 f823 	bl	8005090 <_init>
 800504a:	4c0a      	ldr	r4, [pc, #40]	@ (8005074 <__libc_init_array+0x40>)
 800504c:	4d0a      	ldr	r5, [pc, #40]	@ (8005078 <__libc_init_array+0x44>)
 800504e:	1b64      	subs	r4, r4, r5
 8005050:	10a4      	asrs	r4, r4, #2
 8005052:	42a6      	cmp	r6, r4
 8005054:	d105      	bne.n	8005062 <__libc_init_array+0x2e>
 8005056:	bd70      	pop	{r4, r5, r6, pc}
 8005058:	00b3      	lsls	r3, r6, #2
 800505a:	58eb      	ldr	r3, [r5, r3]
 800505c:	4798      	blx	r3
 800505e:	3601      	adds	r6, #1
 8005060:	e7ee      	b.n	8005040 <__libc_init_array+0xc>
 8005062:	00b3      	lsls	r3, r6, #2
 8005064:	58eb      	ldr	r3, [r5, r3]
 8005066:	4798      	blx	r3
 8005068:	3601      	adds	r6, #1
 800506a:	e7f2      	b.n	8005052 <__libc_init_array+0x1e>
 800506c:	080050e0 	.word	0x080050e0
 8005070:	080050e0 	.word	0x080050e0
 8005074:	080050e4 	.word	0x080050e4
 8005078:	080050e0 	.word	0x080050e0

0800507c <memcpy>:
 800507c:	2300      	movs	r3, #0
 800507e:	b510      	push	{r4, lr}
 8005080:	429a      	cmp	r2, r3
 8005082:	d100      	bne.n	8005086 <memcpy+0xa>
 8005084:	bd10      	pop	{r4, pc}
 8005086:	5ccc      	ldrb	r4, [r1, r3]
 8005088:	54c4      	strb	r4, [r0, r3]
 800508a:	3301      	adds	r3, #1
 800508c:	e7f8      	b.n	8005080 <memcpy+0x4>
	...

08005090 <_init>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005096:	bc08      	pop	{r3}
 8005098:	469e      	mov	lr, r3
 800509a:	4770      	bx	lr

0800509c <_fini>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a2:	bc08      	pop	{r3}
 80050a4:	469e      	mov	lr, r3
 80050a6:	4770      	bx	lr
