
DART_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005974  08005974  00006974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a28  08005a28  00007048  2**0
                  CONTENTS
  4 .ARM          00000000  08005a28  08005a28  00007048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a28  08005a28  00007048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a28  08005a28  00006a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a2c  08005a2c  00006a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08005a30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000048  08005a78  00007048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005a78  00007320  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010441  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000261d  00000000  00000000  000174b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00019ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b47  00000000  00000000  0001a938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cad  00000000  00000000  0001b47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012385  00000000  00000000  0003412c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b8ca  00000000  00000000  000464b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1d7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003494  00000000  00000000  000e1dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e5254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000048 	.word	0x20000048
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800595c 	.word	0x0800595c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000004c 	.word	0x2000004c
 8000104:	0800595c 	.word	0x0800595c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f9d1 	bl	80005d0 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f959 	bl	80004f0 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f9c3 	bl	80005d0 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f9b9 	bl	80005d0 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f967 	bl	8000540 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f95d 	bl	8000540 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	@ 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fc3f 	bl	8000b28 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	@ 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 f9d5 	bl	8000660 <__aeabi_fsub>
 80002b6:	f000 fc37 	bl	8000b28 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	@ 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fdiv>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4646      	mov	r6, r8
 80002c8:	464f      	mov	r7, r9
 80002ca:	46d6      	mov	lr, sl
 80002cc:	0245      	lsls	r5, r0, #9
 80002ce:	b5c0      	push	{r6, r7, lr}
 80002d0:	0fc3      	lsrs	r3, r0, #31
 80002d2:	0047      	lsls	r7, r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	1c0e      	adds	r6, r1, #0
 80002d8:	0a6d      	lsrs	r5, r5, #9
 80002da:	0e3f      	lsrs	r7, r7, #24
 80002dc:	d05b      	beq.n	8000396 <__aeabi_fdiv+0xd2>
 80002de:	2fff      	cmp	r7, #255	@ 0xff
 80002e0:	d021      	beq.n	8000326 <__aeabi_fdiv+0x62>
 80002e2:	2380      	movs	r3, #128	@ 0x80
 80002e4:	00ed      	lsls	r5, r5, #3
 80002e6:	04db      	lsls	r3, r3, #19
 80002e8:	431d      	orrs	r5, r3
 80002ea:	2300      	movs	r3, #0
 80002ec:	4699      	mov	r9, r3
 80002ee:	469a      	mov	sl, r3
 80002f0:	3f7f      	subs	r7, #127	@ 0x7f
 80002f2:	0274      	lsls	r4, r6, #9
 80002f4:	0073      	lsls	r3, r6, #1
 80002f6:	0a64      	lsrs	r4, r4, #9
 80002f8:	0e1b      	lsrs	r3, r3, #24
 80002fa:	0ff6      	lsrs	r6, r6, #31
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d020      	beq.n	8000342 <__aeabi_fdiv+0x7e>
 8000300:	2bff      	cmp	r3, #255	@ 0xff
 8000302:	d043      	beq.n	800038c <__aeabi_fdiv+0xc8>
 8000304:	2280      	movs	r2, #128	@ 0x80
 8000306:	2000      	movs	r0, #0
 8000308:	00e4      	lsls	r4, r4, #3
 800030a:	04d2      	lsls	r2, r2, #19
 800030c:	4314      	orrs	r4, r2
 800030e:	3b7f      	subs	r3, #127	@ 0x7f
 8000310:	4642      	mov	r2, r8
 8000312:	1aff      	subs	r7, r7, r3
 8000314:	464b      	mov	r3, r9
 8000316:	4072      	eors	r2, r6
 8000318:	2b0f      	cmp	r3, #15
 800031a:	d900      	bls.n	800031e <__aeabi_fdiv+0x5a>
 800031c:	e09d      	b.n	800045a <__aeabi_fdiv+0x196>
 800031e:	4971      	ldr	r1, [pc, #452]	@ (80004e4 <__aeabi_fdiv+0x220>)
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	58cb      	ldr	r3, [r1, r3]
 8000324:	469f      	mov	pc, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d15a      	bne.n	80003e0 <__aeabi_fdiv+0x11c>
 800032a:	2308      	movs	r3, #8
 800032c:	4699      	mov	r9, r3
 800032e:	3b06      	subs	r3, #6
 8000330:	0274      	lsls	r4, r6, #9
 8000332:	469a      	mov	sl, r3
 8000334:	0073      	lsls	r3, r6, #1
 8000336:	27ff      	movs	r7, #255	@ 0xff
 8000338:	0a64      	lsrs	r4, r4, #9
 800033a:	0e1b      	lsrs	r3, r3, #24
 800033c:	0ff6      	lsrs	r6, r6, #31
 800033e:	2b00      	cmp	r3, #0
 8000340:	d1de      	bne.n	8000300 <__aeabi_fdiv+0x3c>
 8000342:	2c00      	cmp	r4, #0
 8000344:	d13b      	bne.n	80003be <__aeabi_fdiv+0xfa>
 8000346:	2301      	movs	r3, #1
 8000348:	4642      	mov	r2, r8
 800034a:	4649      	mov	r1, r9
 800034c:	4072      	eors	r2, r6
 800034e:	4319      	orrs	r1, r3
 8000350:	290e      	cmp	r1, #14
 8000352:	d818      	bhi.n	8000386 <__aeabi_fdiv+0xc2>
 8000354:	4864      	ldr	r0, [pc, #400]	@ (80004e8 <__aeabi_fdiv+0x224>)
 8000356:	0089      	lsls	r1, r1, #2
 8000358:	5841      	ldr	r1, [r0, r1]
 800035a:	468f      	mov	pc, r1
 800035c:	4653      	mov	r3, sl
 800035e:	2b02      	cmp	r3, #2
 8000360:	d100      	bne.n	8000364 <__aeabi_fdiv+0xa0>
 8000362:	e0b8      	b.n	80004d6 <__aeabi_fdiv+0x212>
 8000364:	2b03      	cmp	r3, #3
 8000366:	d06e      	beq.n	8000446 <__aeabi_fdiv+0x182>
 8000368:	4642      	mov	r2, r8
 800036a:	002c      	movs	r4, r5
 800036c:	2b01      	cmp	r3, #1
 800036e:	d140      	bne.n	80003f2 <__aeabi_fdiv+0x12e>
 8000370:	2000      	movs	r0, #0
 8000372:	2400      	movs	r4, #0
 8000374:	05c0      	lsls	r0, r0, #23
 8000376:	4320      	orrs	r0, r4
 8000378:	07d2      	lsls	r2, r2, #31
 800037a:	4310      	orrs	r0, r2
 800037c:	bce0      	pop	{r5, r6, r7}
 800037e:	46ba      	mov	sl, r7
 8000380:	46b1      	mov	r9, r6
 8000382:	46a8      	mov	r8, r5
 8000384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000386:	20ff      	movs	r0, #255	@ 0xff
 8000388:	2400      	movs	r4, #0
 800038a:	e7f3      	b.n	8000374 <__aeabi_fdiv+0xb0>
 800038c:	2c00      	cmp	r4, #0
 800038e:	d120      	bne.n	80003d2 <__aeabi_fdiv+0x10e>
 8000390:	2302      	movs	r3, #2
 8000392:	3fff      	subs	r7, #255	@ 0xff
 8000394:	e7d8      	b.n	8000348 <__aeabi_fdiv+0x84>
 8000396:	2d00      	cmp	r5, #0
 8000398:	d105      	bne.n	80003a6 <__aeabi_fdiv+0xe2>
 800039a:	2304      	movs	r3, #4
 800039c:	4699      	mov	r9, r3
 800039e:	3b03      	subs	r3, #3
 80003a0:	2700      	movs	r7, #0
 80003a2:	469a      	mov	sl, r3
 80003a4:	e7a5      	b.n	80002f2 <__aeabi_fdiv+0x2e>
 80003a6:	0028      	movs	r0, r5
 80003a8:	f000 fc24 	bl	8000bf4 <__clzsi2>
 80003ac:	2776      	movs	r7, #118	@ 0x76
 80003ae:	1f43      	subs	r3, r0, #5
 80003b0:	409d      	lsls	r5, r3
 80003b2:	2300      	movs	r3, #0
 80003b4:	427f      	negs	r7, r7
 80003b6:	4699      	mov	r9, r3
 80003b8:	469a      	mov	sl, r3
 80003ba:	1a3f      	subs	r7, r7, r0
 80003bc:	e799      	b.n	80002f2 <__aeabi_fdiv+0x2e>
 80003be:	0020      	movs	r0, r4
 80003c0:	f000 fc18 	bl	8000bf4 <__clzsi2>
 80003c4:	1f43      	subs	r3, r0, #5
 80003c6:	409c      	lsls	r4, r3
 80003c8:	2376      	movs	r3, #118	@ 0x76
 80003ca:	425b      	negs	r3, r3
 80003cc:	1a1b      	subs	r3, r3, r0
 80003ce:	2000      	movs	r0, #0
 80003d0:	e79e      	b.n	8000310 <__aeabi_fdiv+0x4c>
 80003d2:	2303      	movs	r3, #3
 80003d4:	464a      	mov	r2, r9
 80003d6:	431a      	orrs	r2, r3
 80003d8:	4691      	mov	r9, r2
 80003da:	2003      	movs	r0, #3
 80003dc:	33fc      	adds	r3, #252	@ 0xfc
 80003de:	e797      	b.n	8000310 <__aeabi_fdiv+0x4c>
 80003e0:	230c      	movs	r3, #12
 80003e2:	4699      	mov	r9, r3
 80003e4:	3b09      	subs	r3, #9
 80003e6:	27ff      	movs	r7, #255	@ 0xff
 80003e8:	469a      	mov	sl, r3
 80003ea:	e782      	b.n	80002f2 <__aeabi_fdiv+0x2e>
 80003ec:	2803      	cmp	r0, #3
 80003ee:	d02c      	beq.n	800044a <__aeabi_fdiv+0x186>
 80003f0:	0032      	movs	r2, r6
 80003f2:	0038      	movs	r0, r7
 80003f4:	307f      	adds	r0, #127	@ 0x7f
 80003f6:	2800      	cmp	r0, #0
 80003f8:	dd47      	ble.n	800048a <__aeabi_fdiv+0x1c6>
 80003fa:	0763      	lsls	r3, r4, #29
 80003fc:	d004      	beq.n	8000408 <__aeabi_fdiv+0x144>
 80003fe:	230f      	movs	r3, #15
 8000400:	4023      	ands	r3, r4
 8000402:	2b04      	cmp	r3, #4
 8000404:	d000      	beq.n	8000408 <__aeabi_fdiv+0x144>
 8000406:	3404      	adds	r4, #4
 8000408:	0123      	lsls	r3, r4, #4
 800040a:	d503      	bpl.n	8000414 <__aeabi_fdiv+0x150>
 800040c:	0038      	movs	r0, r7
 800040e:	4b37      	ldr	r3, [pc, #220]	@ (80004ec <__aeabi_fdiv+0x228>)
 8000410:	3080      	adds	r0, #128	@ 0x80
 8000412:	401c      	ands	r4, r3
 8000414:	28fe      	cmp	r0, #254	@ 0xfe
 8000416:	dcb6      	bgt.n	8000386 <__aeabi_fdiv+0xc2>
 8000418:	01a4      	lsls	r4, r4, #6
 800041a:	0a64      	lsrs	r4, r4, #9
 800041c:	b2c0      	uxtb	r0, r0
 800041e:	e7a9      	b.n	8000374 <__aeabi_fdiv+0xb0>
 8000420:	2480      	movs	r4, #128	@ 0x80
 8000422:	2200      	movs	r2, #0
 8000424:	20ff      	movs	r0, #255	@ 0xff
 8000426:	03e4      	lsls	r4, r4, #15
 8000428:	e7a4      	b.n	8000374 <__aeabi_fdiv+0xb0>
 800042a:	2380      	movs	r3, #128	@ 0x80
 800042c:	03db      	lsls	r3, r3, #15
 800042e:	421d      	tst	r5, r3
 8000430:	d001      	beq.n	8000436 <__aeabi_fdiv+0x172>
 8000432:	421c      	tst	r4, r3
 8000434:	d00b      	beq.n	800044e <__aeabi_fdiv+0x18a>
 8000436:	2480      	movs	r4, #128	@ 0x80
 8000438:	03e4      	lsls	r4, r4, #15
 800043a:	432c      	orrs	r4, r5
 800043c:	0264      	lsls	r4, r4, #9
 800043e:	4642      	mov	r2, r8
 8000440:	20ff      	movs	r0, #255	@ 0xff
 8000442:	0a64      	lsrs	r4, r4, #9
 8000444:	e796      	b.n	8000374 <__aeabi_fdiv+0xb0>
 8000446:	4646      	mov	r6, r8
 8000448:	002c      	movs	r4, r5
 800044a:	2380      	movs	r3, #128	@ 0x80
 800044c:	03db      	lsls	r3, r3, #15
 800044e:	431c      	orrs	r4, r3
 8000450:	0264      	lsls	r4, r4, #9
 8000452:	0032      	movs	r2, r6
 8000454:	20ff      	movs	r0, #255	@ 0xff
 8000456:	0a64      	lsrs	r4, r4, #9
 8000458:	e78c      	b.n	8000374 <__aeabi_fdiv+0xb0>
 800045a:	016d      	lsls	r5, r5, #5
 800045c:	0160      	lsls	r0, r4, #5
 800045e:	4285      	cmp	r5, r0
 8000460:	d22d      	bcs.n	80004be <__aeabi_fdiv+0x1fa>
 8000462:	231b      	movs	r3, #27
 8000464:	2400      	movs	r4, #0
 8000466:	3f01      	subs	r7, #1
 8000468:	2601      	movs	r6, #1
 800046a:	0029      	movs	r1, r5
 800046c:	0064      	lsls	r4, r4, #1
 800046e:	006d      	lsls	r5, r5, #1
 8000470:	2900      	cmp	r1, #0
 8000472:	db01      	blt.n	8000478 <__aeabi_fdiv+0x1b4>
 8000474:	4285      	cmp	r5, r0
 8000476:	d301      	bcc.n	800047c <__aeabi_fdiv+0x1b8>
 8000478:	1a2d      	subs	r5, r5, r0
 800047a:	4334      	orrs	r4, r6
 800047c:	3b01      	subs	r3, #1
 800047e:	2b00      	cmp	r3, #0
 8000480:	d1f3      	bne.n	800046a <__aeabi_fdiv+0x1a6>
 8000482:	1e6b      	subs	r3, r5, #1
 8000484:	419d      	sbcs	r5, r3
 8000486:	432c      	orrs	r4, r5
 8000488:	e7b3      	b.n	80003f2 <__aeabi_fdiv+0x12e>
 800048a:	2301      	movs	r3, #1
 800048c:	1a1b      	subs	r3, r3, r0
 800048e:	2b1b      	cmp	r3, #27
 8000490:	dd00      	ble.n	8000494 <__aeabi_fdiv+0x1d0>
 8000492:	e76d      	b.n	8000370 <__aeabi_fdiv+0xac>
 8000494:	0021      	movs	r1, r4
 8000496:	379e      	adds	r7, #158	@ 0x9e
 8000498:	40d9      	lsrs	r1, r3
 800049a:	40bc      	lsls	r4, r7
 800049c:	000b      	movs	r3, r1
 800049e:	1e61      	subs	r1, r4, #1
 80004a0:	418c      	sbcs	r4, r1
 80004a2:	4323      	orrs	r3, r4
 80004a4:	0759      	lsls	r1, r3, #29
 80004a6:	d004      	beq.n	80004b2 <__aeabi_fdiv+0x1ee>
 80004a8:	210f      	movs	r1, #15
 80004aa:	4019      	ands	r1, r3
 80004ac:	2904      	cmp	r1, #4
 80004ae:	d000      	beq.n	80004b2 <__aeabi_fdiv+0x1ee>
 80004b0:	3304      	adds	r3, #4
 80004b2:	0159      	lsls	r1, r3, #5
 80004b4:	d413      	bmi.n	80004de <__aeabi_fdiv+0x21a>
 80004b6:	019b      	lsls	r3, r3, #6
 80004b8:	2000      	movs	r0, #0
 80004ba:	0a5c      	lsrs	r4, r3, #9
 80004bc:	e75a      	b.n	8000374 <__aeabi_fdiv+0xb0>
 80004be:	231a      	movs	r3, #26
 80004c0:	2401      	movs	r4, #1
 80004c2:	1a2d      	subs	r5, r5, r0
 80004c4:	e7d0      	b.n	8000468 <__aeabi_fdiv+0x1a4>
 80004c6:	1e98      	subs	r0, r3, #2
 80004c8:	4243      	negs	r3, r0
 80004ca:	4158      	adcs	r0, r3
 80004cc:	4240      	negs	r0, r0
 80004ce:	0032      	movs	r2, r6
 80004d0:	2400      	movs	r4, #0
 80004d2:	b2c0      	uxtb	r0, r0
 80004d4:	e74e      	b.n	8000374 <__aeabi_fdiv+0xb0>
 80004d6:	4642      	mov	r2, r8
 80004d8:	20ff      	movs	r0, #255	@ 0xff
 80004da:	2400      	movs	r4, #0
 80004dc:	e74a      	b.n	8000374 <__aeabi_fdiv+0xb0>
 80004de:	2001      	movs	r0, #1
 80004e0:	2400      	movs	r4, #0
 80004e2:	e747      	b.n	8000374 <__aeabi_fdiv+0xb0>
 80004e4:	08005974 	.word	0x08005974
 80004e8:	080059b4 	.word	0x080059b4
 80004ec:	f7ffffff 	.word	0xf7ffffff

080004f0 <__eqsf2>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	0042      	lsls	r2, r0, #1
 80004f4:	024e      	lsls	r6, r1, #9
 80004f6:	004c      	lsls	r4, r1, #1
 80004f8:	0245      	lsls	r5, r0, #9
 80004fa:	0a6d      	lsrs	r5, r5, #9
 80004fc:	0e12      	lsrs	r2, r2, #24
 80004fe:	0fc3      	lsrs	r3, r0, #31
 8000500:	0a76      	lsrs	r6, r6, #9
 8000502:	0e24      	lsrs	r4, r4, #24
 8000504:	0fc9      	lsrs	r1, r1, #31
 8000506:	2aff      	cmp	r2, #255	@ 0xff
 8000508:	d010      	beq.n	800052c <__eqsf2+0x3c>
 800050a:	2cff      	cmp	r4, #255	@ 0xff
 800050c:	d00c      	beq.n	8000528 <__eqsf2+0x38>
 800050e:	2001      	movs	r0, #1
 8000510:	42a2      	cmp	r2, r4
 8000512:	d10a      	bne.n	800052a <__eqsf2+0x3a>
 8000514:	42b5      	cmp	r5, r6
 8000516:	d108      	bne.n	800052a <__eqsf2+0x3a>
 8000518:	428b      	cmp	r3, r1
 800051a:	d00f      	beq.n	800053c <__eqsf2+0x4c>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d104      	bne.n	800052a <__eqsf2+0x3a>
 8000520:	0028      	movs	r0, r5
 8000522:	1e43      	subs	r3, r0, #1
 8000524:	4198      	sbcs	r0, r3
 8000526:	e000      	b.n	800052a <__eqsf2+0x3a>
 8000528:	2001      	movs	r0, #1
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	2001      	movs	r0, #1
 800052e:	2cff      	cmp	r4, #255	@ 0xff
 8000530:	d1fb      	bne.n	800052a <__eqsf2+0x3a>
 8000532:	4335      	orrs	r5, r6
 8000534:	d1f9      	bne.n	800052a <__eqsf2+0x3a>
 8000536:	404b      	eors	r3, r1
 8000538:	0018      	movs	r0, r3
 800053a:	e7f6      	b.n	800052a <__eqsf2+0x3a>
 800053c:	2000      	movs	r0, #0
 800053e:	e7f4      	b.n	800052a <__eqsf2+0x3a>

08000540 <__gesf2>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	0042      	lsls	r2, r0, #1
 8000544:	0244      	lsls	r4, r0, #9
 8000546:	024d      	lsls	r5, r1, #9
 8000548:	0fc3      	lsrs	r3, r0, #31
 800054a:	0048      	lsls	r0, r1, #1
 800054c:	0a64      	lsrs	r4, r4, #9
 800054e:	0e12      	lsrs	r2, r2, #24
 8000550:	0a6d      	lsrs	r5, r5, #9
 8000552:	0e00      	lsrs	r0, r0, #24
 8000554:	0fc9      	lsrs	r1, r1, #31
 8000556:	2aff      	cmp	r2, #255	@ 0xff
 8000558:	d018      	beq.n	800058c <__gesf2+0x4c>
 800055a:	28ff      	cmp	r0, #255	@ 0xff
 800055c:	d00a      	beq.n	8000574 <__gesf2+0x34>
 800055e:	2a00      	cmp	r2, #0
 8000560:	d11e      	bne.n	80005a0 <__gesf2+0x60>
 8000562:	2800      	cmp	r0, #0
 8000564:	d10a      	bne.n	800057c <__gesf2+0x3c>
 8000566:	2d00      	cmp	r5, #0
 8000568:	d029      	beq.n	80005be <__gesf2+0x7e>
 800056a:	2c00      	cmp	r4, #0
 800056c:	d12d      	bne.n	80005ca <__gesf2+0x8a>
 800056e:	0048      	lsls	r0, r1, #1
 8000570:	3801      	subs	r0, #1
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	2d00      	cmp	r5, #0
 8000576:	d125      	bne.n	80005c4 <__gesf2+0x84>
 8000578:	2a00      	cmp	r2, #0
 800057a:	d101      	bne.n	8000580 <__gesf2+0x40>
 800057c:	2c00      	cmp	r4, #0
 800057e:	d0f6      	beq.n	800056e <__gesf2+0x2e>
 8000580:	428b      	cmp	r3, r1
 8000582:	d019      	beq.n	80005b8 <__gesf2+0x78>
 8000584:	2001      	movs	r0, #1
 8000586:	425b      	negs	r3, r3
 8000588:	4318      	orrs	r0, r3
 800058a:	e7f2      	b.n	8000572 <__gesf2+0x32>
 800058c:	2c00      	cmp	r4, #0
 800058e:	d119      	bne.n	80005c4 <__gesf2+0x84>
 8000590:	28ff      	cmp	r0, #255	@ 0xff
 8000592:	d1f7      	bne.n	8000584 <__gesf2+0x44>
 8000594:	2d00      	cmp	r5, #0
 8000596:	d115      	bne.n	80005c4 <__gesf2+0x84>
 8000598:	2000      	movs	r0, #0
 800059a:	428b      	cmp	r3, r1
 800059c:	d1f2      	bne.n	8000584 <__gesf2+0x44>
 800059e:	e7e8      	b.n	8000572 <__gesf2+0x32>
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d0ef      	beq.n	8000584 <__gesf2+0x44>
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d1ed      	bne.n	8000584 <__gesf2+0x44>
 80005a8:	4282      	cmp	r2, r0
 80005aa:	dceb      	bgt.n	8000584 <__gesf2+0x44>
 80005ac:	db04      	blt.n	80005b8 <__gesf2+0x78>
 80005ae:	42ac      	cmp	r4, r5
 80005b0:	d8e8      	bhi.n	8000584 <__gesf2+0x44>
 80005b2:	2000      	movs	r0, #0
 80005b4:	42ac      	cmp	r4, r5
 80005b6:	d2dc      	bcs.n	8000572 <__gesf2+0x32>
 80005b8:	0058      	lsls	r0, r3, #1
 80005ba:	3801      	subs	r0, #1
 80005bc:	e7d9      	b.n	8000572 <__gesf2+0x32>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d0d7      	beq.n	8000572 <__gesf2+0x32>
 80005c2:	e7df      	b.n	8000584 <__gesf2+0x44>
 80005c4:	2002      	movs	r0, #2
 80005c6:	4240      	negs	r0, r0
 80005c8:	e7d3      	b.n	8000572 <__gesf2+0x32>
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d1da      	bne.n	8000584 <__gesf2+0x44>
 80005ce:	e7ee      	b.n	80005ae <__gesf2+0x6e>

080005d0 <__lesf2>:
 80005d0:	b530      	push	{r4, r5, lr}
 80005d2:	0042      	lsls	r2, r0, #1
 80005d4:	0244      	lsls	r4, r0, #9
 80005d6:	024d      	lsls	r5, r1, #9
 80005d8:	0fc3      	lsrs	r3, r0, #31
 80005da:	0048      	lsls	r0, r1, #1
 80005dc:	0a64      	lsrs	r4, r4, #9
 80005de:	0e12      	lsrs	r2, r2, #24
 80005e0:	0a6d      	lsrs	r5, r5, #9
 80005e2:	0e00      	lsrs	r0, r0, #24
 80005e4:	0fc9      	lsrs	r1, r1, #31
 80005e6:	2aff      	cmp	r2, #255	@ 0xff
 80005e8:	d017      	beq.n	800061a <__lesf2+0x4a>
 80005ea:	28ff      	cmp	r0, #255	@ 0xff
 80005ec:	d00a      	beq.n	8000604 <__lesf2+0x34>
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d11b      	bne.n	800062a <__lesf2+0x5a>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d10a      	bne.n	800060c <__lesf2+0x3c>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d01d      	beq.n	8000636 <__lesf2+0x66>
 80005fa:	2c00      	cmp	r4, #0
 80005fc:	d12d      	bne.n	800065a <__lesf2+0x8a>
 80005fe:	0048      	lsls	r0, r1, #1
 8000600:	3801      	subs	r0, #1
 8000602:	e011      	b.n	8000628 <__lesf2+0x58>
 8000604:	2d00      	cmp	r5, #0
 8000606:	d10e      	bne.n	8000626 <__lesf2+0x56>
 8000608:	2a00      	cmp	r2, #0
 800060a:	d101      	bne.n	8000610 <__lesf2+0x40>
 800060c:	2c00      	cmp	r4, #0
 800060e:	d0f6      	beq.n	80005fe <__lesf2+0x2e>
 8000610:	428b      	cmp	r3, r1
 8000612:	d10c      	bne.n	800062e <__lesf2+0x5e>
 8000614:	0058      	lsls	r0, r3, #1
 8000616:	3801      	subs	r0, #1
 8000618:	e006      	b.n	8000628 <__lesf2+0x58>
 800061a:	2c00      	cmp	r4, #0
 800061c:	d103      	bne.n	8000626 <__lesf2+0x56>
 800061e:	28ff      	cmp	r0, #255	@ 0xff
 8000620:	d105      	bne.n	800062e <__lesf2+0x5e>
 8000622:	2d00      	cmp	r5, #0
 8000624:	d015      	beq.n	8000652 <__lesf2+0x82>
 8000626:	2002      	movs	r0, #2
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	2800      	cmp	r0, #0
 800062c:	d106      	bne.n	800063c <__lesf2+0x6c>
 800062e:	2001      	movs	r0, #1
 8000630:	425b      	negs	r3, r3
 8000632:	4318      	orrs	r0, r3
 8000634:	e7f8      	b.n	8000628 <__lesf2+0x58>
 8000636:	2c00      	cmp	r4, #0
 8000638:	d0f6      	beq.n	8000628 <__lesf2+0x58>
 800063a:	e7f8      	b.n	800062e <__lesf2+0x5e>
 800063c:	428b      	cmp	r3, r1
 800063e:	d1f6      	bne.n	800062e <__lesf2+0x5e>
 8000640:	4282      	cmp	r2, r0
 8000642:	dcf4      	bgt.n	800062e <__lesf2+0x5e>
 8000644:	dbe6      	blt.n	8000614 <__lesf2+0x44>
 8000646:	42ac      	cmp	r4, r5
 8000648:	d8f1      	bhi.n	800062e <__lesf2+0x5e>
 800064a:	2000      	movs	r0, #0
 800064c:	42ac      	cmp	r4, r5
 800064e:	d2eb      	bcs.n	8000628 <__lesf2+0x58>
 8000650:	e7e0      	b.n	8000614 <__lesf2+0x44>
 8000652:	2000      	movs	r0, #0
 8000654:	428b      	cmp	r3, r1
 8000656:	d1ea      	bne.n	800062e <__lesf2+0x5e>
 8000658:	e7e6      	b.n	8000628 <__lesf2+0x58>
 800065a:	428b      	cmp	r3, r1
 800065c:	d1e7      	bne.n	800062e <__lesf2+0x5e>
 800065e:	e7f2      	b.n	8000646 <__lesf2+0x76>

08000660 <__aeabi_fsub>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	4647      	mov	r7, r8
 8000664:	46ce      	mov	lr, r9
 8000666:	0243      	lsls	r3, r0, #9
 8000668:	b580      	push	{r7, lr}
 800066a:	0a5f      	lsrs	r7, r3, #9
 800066c:	099b      	lsrs	r3, r3, #6
 800066e:	0045      	lsls	r5, r0, #1
 8000670:	004a      	lsls	r2, r1, #1
 8000672:	469c      	mov	ip, r3
 8000674:	024b      	lsls	r3, r1, #9
 8000676:	0fc4      	lsrs	r4, r0, #31
 8000678:	0fce      	lsrs	r6, r1, #31
 800067a:	0e2d      	lsrs	r5, r5, #24
 800067c:	0a58      	lsrs	r0, r3, #9
 800067e:	0e12      	lsrs	r2, r2, #24
 8000680:	0999      	lsrs	r1, r3, #6
 8000682:	2aff      	cmp	r2, #255	@ 0xff
 8000684:	d06b      	beq.n	800075e <__aeabi_fsub+0xfe>
 8000686:	2301      	movs	r3, #1
 8000688:	405e      	eors	r6, r3
 800068a:	1aab      	subs	r3, r5, r2
 800068c:	42b4      	cmp	r4, r6
 800068e:	d04b      	beq.n	8000728 <__aeabi_fsub+0xc8>
 8000690:	2b00      	cmp	r3, #0
 8000692:	dc00      	bgt.n	8000696 <__aeabi_fsub+0x36>
 8000694:	e0ff      	b.n	8000896 <__aeabi_fsub+0x236>
 8000696:	2a00      	cmp	r2, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fsub+0x3c>
 800069a:	e088      	b.n	80007ae <__aeabi_fsub+0x14e>
 800069c:	2dff      	cmp	r5, #255	@ 0xff
 800069e:	d100      	bne.n	80006a2 <__aeabi_fsub+0x42>
 80006a0:	e0ef      	b.n	8000882 <__aeabi_fsub+0x222>
 80006a2:	2280      	movs	r2, #128	@ 0x80
 80006a4:	04d2      	lsls	r2, r2, #19
 80006a6:	4311      	orrs	r1, r2
 80006a8:	2001      	movs	r0, #1
 80006aa:	2b1b      	cmp	r3, #27
 80006ac:	dc08      	bgt.n	80006c0 <__aeabi_fsub+0x60>
 80006ae:	0008      	movs	r0, r1
 80006b0:	2220      	movs	r2, #32
 80006b2:	40d8      	lsrs	r0, r3
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	4099      	lsls	r1, r3
 80006b8:	000b      	movs	r3, r1
 80006ba:	1e5a      	subs	r2, r3, #1
 80006bc:	4193      	sbcs	r3, r2
 80006be:	4318      	orrs	r0, r3
 80006c0:	4663      	mov	r3, ip
 80006c2:	1a1b      	subs	r3, r3, r0
 80006c4:	469c      	mov	ip, r3
 80006c6:	4663      	mov	r3, ip
 80006c8:	015b      	lsls	r3, r3, #5
 80006ca:	d400      	bmi.n	80006ce <__aeabi_fsub+0x6e>
 80006cc:	e0cd      	b.n	800086a <__aeabi_fsub+0x20a>
 80006ce:	4663      	mov	r3, ip
 80006d0:	019f      	lsls	r7, r3, #6
 80006d2:	09bf      	lsrs	r7, r7, #6
 80006d4:	0038      	movs	r0, r7
 80006d6:	f000 fa8d 	bl	8000bf4 <__clzsi2>
 80006da:	003b      	movs	r3, r7
 80006dc:	3805      	subs	r0, #5
 80006de:	4083      	lsls	r3, r0
 80006e0:	4285      	cmp	r5, r0
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_fsub+0x86>
 80006e4:	e0a2      	b.n	800082c <__aeabi_fsub+0x1cc>
 80006e6:	4ab7      	ldr	r2, [pc, #732]	@ (80009c4 <__aeabi_fsub+0x364>)
 80006e8:	1a2d      	subs	r5, r5, r0
 80006ea:	401a      	ands	r2, r3
 80006ec:	4694      	mov	ip, r2
 80006ee:	075a      	lsls	r2, r3, #29
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fsub+0x94>
 80006f2:	e0c3      	b.n	800087c <__aeabi_fsub+0x21c>
 80006f4:	220f      	movs	r2, #15
 80006f6:	4013      	ands	r3, r2
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d100      	bne.n	80006fe <__aeabi_fsub+0x9e>
 80006fc:	e0be      	b.n	800087c <__aeabi_fsub+0x21c>
 80006fe:	2304      	movs	r3, #4
 8000700:	4698      	mov	r8, r3
 8000702:	44c4      	add	ip, r8
 8000704:	4663      	mov	r3, ip
 8000706:	015b      	lsls	r3, r3, #5
 8000708:	d400      	bmi.n	800070c <__aeabi_fsub+0xac>
 800070a:	e0b7      	b.n	800087c <__aeabi_fsub+0x21c>
 800070c:	1c68      	adds	r0, r5, #1
 800070e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000710:	d000      	beq.n	8000714 <__aeabi_fsub+0xb4>
 8000712:	e0a5      	b.n	8000860 <__aeabi_fsub+0x200>
 8000714:	20ff      	movs	r0, #255	@ 0xff
 8000716:	2200      	movs	r2, #0
 8000718:	05c0      	lsls	r0, r0, #23
 800071a:	4310      	orrs	r0, r2
 800071c:	07e4      	lsls	r4, r4, #31
 800071e:	4320      	orrs	r0, r4
 8000720:	bcc0      	pop	{r6, r7}
 8000722:	46b9      	mov	r9, r7
 8000724:	46b0      	mov	r8, r6
 8000726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000728:	2b00      	cmp	r3, #0
 800072a:	dc00      	bgt.n	800072e <__aeabi_fsub+0xce>
 800072c:	e1eb      	b.n	8000b06 <__aeabi_fsub+0x4a6>
 800072e:	2a00      	cmp	r2, #0
 8000730:	d046      	beq.n	80007c0 <__aeabi_fsub+0x160>
 8000732:	2dff      	cmp	r5, #255	@ 0xff
 8000734:	d100      	bne.n	8000738 <__aeabi_fsub+0xd8>
 8000736:	e0a4      	b.n	8000882 <__aeabi_fsub+0x222>
 8000738:	2280      	movs	r2, #128	@ 0x80
 800073a:	04d2      	lsls	r2, r2, #19
 800073c:	4311      	orrs	r1, r2
 800073e:	2b1b      	cmp	r3, #27
 8000740:	dc00      	bgt.n	8000744 <__aeabi_fsub+0xe4>
 8000742:	e0fb      	b.n	800093c <__aeabi_fsub+0x2dc>
 8000744:	2305      	movs	r3, #5
 8000746:	4698      	mov	r8, r3
 8000748:	002b      	movs	r3, r5
 800074a:	44c4      	add	ip, r8
 800074c:	4662      	mov	r2, ip
 800074e:	08d7      	lsrs	r7, r2, #3
 8000750:	2bff      	cmp	r3, #255	@ 0xff
 8000752:	d100      	bne.n	8000756 <__aeabi_fsub+0xf6>
 8000754:	e095      	b.n	8000882 <__aeabi_fsub+0x222>
 8000756:	027a      	lsls	r2, r7, #9
 8000758:	0a52      	lsrs	r2, r2, #9
 800075a:	b2d8      	uxtb	r0, r3
 800075c:	e7dc      	b.n	8000718 <__aeabi_fsub+0xb8>
 800075e:	002b      	movs	r3, r5
 8000760:	3bff      	subs	r3, #255	@ 0xff
 8000762:	4699      	mov	r9, r3
 8000764:	2900      	cmp	r1, #0
 8000766:	d118      	bne.n	800079a <__aeabi_fsub+0x13a>
 8000768:	2301      	movs	r3, #1
 800076a:	405e      	eors	r6, r3
 800076c:	42b4      	cmp	r4, r6
 800076e:	d100      	bne.n	8000772 <__aeabi_fsub+0x112>
 8000770:	e0ca      	b.n	8000908 <__aeabi_fsub+0x2a8>
 8000772:	464b      	mov	r3, r9
 8000774:	2b00      	cmp	r3, #0
 8000776:	d02d      	beq.n	80007d4 <__aeabi_fsub+0x174>
 8000778:	2d00      	cmp	r5, #0
 800077a:	d000      	beq.n	800077e <__aeabi_fsub+0x11e>
 800077c:	e13c      	b.n	80009f8 <__aeabi_fsub+0x398>
 800077e:	23ff      	movs	r3, #255	@ 0xff
 8000780:	4664      	mov	r4, ip
 8000782:	2c00      	cmp	r4, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_fsub+0x128>
 8000786:	e15f      	b.n	8000a48 <__aeabi_fsub+0x3e8>
 8000788:	1e5d      	subs	r5, r3, #1
 800078a:	2b01      	cmp	r3, #1
 800078c:	d100      	bne.n	8000790 <__aeabi_fsub+0x130>
 800078e:	e174      	b.n	8000a7a <__aeabi_fsub+0x41a>
 8000790:	0034      	movs	r4, r6
 8000792:	2bff      	cmp	r3, #255	@ 0xff
 8000794:	d074      	beq.n	8000880 <__aeabi_fsub+0x220>
 8000796:	002b      	movs	r3, r5
 8000798:	e103      	b.n	80009a2 <__aeabi_fsub+0x342>
 800079a:	42b4      	cmp	r4, r6
 800079c:	d100      	bne.n	80007a0 <__aeabi_fsub+0x140>
 800079e:	e09c      	b.n	80008da <__aeabi_fsub+0x27a>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d017      	beq.n	80007d4 <__aeabi_fsub+0x174>
 80007a4:	2d00      	cmp	r5, #0
 80007a6:	d0ea      	beq.n	800077e <__aeabi_fsub+0x11e>
 80007a8:	0007      	movs	r7, r0
 80007aa:	0034      	movs	r4, r6
 80007ac:	e06c      	b.n	8000888 <__aeabi_fsub+0x228>
 80007ae:	2900      	cmp	r1, #0
 80007b0:	d0cc      	beq.n	800074c <__aeabi_fsub+0xec>
 80007b2:	1e5a      	subs	r2, r3, #1
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d02b      	beq.n	8000810 <__aeabi_fsub+0x1b0>
 80007b8:	2bff      	cmp	r3, #255	@ 0xff
 80007ba:	d062      	beq.n	8000882 <__aeabi_fsub+0x222>
 80007bc:	0013      	movs	r3, r2
 80007be:	e773      	b.n	80006a8 <__aeabi_fsub+0x48>
 80007c0:	2900      	cmp	r1, #0
 80007c2:	d0c3      	beq.n	800074c <__aeabi_fsub+0xec>
 80007c4:	1e5a      	subs	r2, r3, #1
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d100      	bne.n	80007cc <__aeabi_fsub+0x16c>
 80007ca:	e11e      	b.n	8000a0a <__aeabi_fsub+0x3aa>
 80007cc:	2bff      	cmp	r3, #255	@ 0xff
 80007ce:	d058      	beq.n	8000882 <__aeabi_fsub+0x222>
 80007d0:	0013      	movs	r3, r2
 80007d2:	e7b4      	b.n	800073e <__aeabi_fsub+0xde>
 80007d4:	22fe      	movs	r2, #254	@ 0xfe
 80007d6:	1c6b      	adds	r3, r5, #1
 80007d8:	421a      	tst	r2, r3
 80007da:	d10d      	bne.n	80007f8 <__aeabi_fsub+0x198>
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d060      	beq.n	80008a2 <__aeabi_fsub+0x242>
 80007e0:	4663      	mov	r3, ip
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d000      	beq.n	80007e8 <__aeabi_fsub+0x188>
 80007e6:	e120      	b.n	8000a2a <__aeabi_fsub+0x3ca>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d000      	beq.n	80007ee <__aeabi_fsub+0x18e>
 80007ec:	e128      	b.n	8000a40 <__aeabi_fsub+0x3e0>
 80007ee:	2280      	movs	r2, #128	@ 0x80
 80007f0:	2400      	movs	r4, #0
 80007f2:	20ff      	movs	r0, #255	@ 0xff
 80007f4:	03d2      	lsls	r2, r2, #15
 80007f6:	e78f      	b.n	8000718 <__aeabi_fsub+0xb8>
 80007f8:	4663      	mov	r3, ip
 80007fa:	1a5f      	subs	r7, r3, r1
 80007fc:	017b      	lsls	r3, r7, #5
 80007fe:	d500      	bpl.n	8000802 <__aeabi_fsub+0x1a2>
 8000800:	e0fe      	b.n	8000a00 <__aeabi_fsub+0x3a0>
 8000802:	2f00      	cmp	r7, #0
 8000804:	d000      	beq.n	8000808 <__aeabi_fsub+0x1a8>
 8000806:	e765      	b.n	80006d4 <__aeabi_fsub+0x74>
 8000808:	2400      	movs	r4, #0
 800080a:	2000      	movs	r0, #0
 800080c:	2200      	movs	r2, #0
 800080e:	e783      	b.n	8000718 <__aeabi_fsub+0xb8>
 8000810:	4663      	mov	r3, ip
 8000812:	1a59      	subs	r1, r3, r1
 8000814:	014b      	lsls	r3, r1, #5
 8000816:	d400      	bmi.n	800081a <__aeabi_fsub+0x1ba>
 8000818:	e119      	b.n	8000a4e <__aeabi_fsub+0x3ee>
 800081a:	018f      	lsls	r7, r1, #6
 800081c:	09bf      	lsrs	r7, r7, #6
 800081e:	0038      	movs	r0, r7
 8000820:	f000 f9e8 	bl	8000bf4 <__clzsi2>
 8000824:	003b      	movs	r3, r7
 8000826:	3805      	subs	r0, #5
 8000828:	4083      	lsls	r3, r0
 800082a:	2501      	movs	r5, #1
 800082c:	2220      	movs	r2, #32
 800082e:	1b40      	subs	r0, r0, r5
 8000830:	3001      	adds	r0, #1
 8000832:	1a12      	subs	r2, r2, r0
 8000834:	0019      	movs	r1, r3
 8000836:	4093      	lsls	r3, r2
 8000838:	40c1      	lsrs	r1, r0
 800083a:	1e5a      	subs	r2, r3, #1
 800083c:	4193      	sbcs	r3, r2
 800083e:	4319      	orrs	r1, r3
 8000840:	468c      	mov	ip, r1
 8000842:	1e0b      	subs	r3, r1, #0
 8000844:	d0e1      	beq.n	800080a <__aeabi_fsub+0x1aa>
 8000846:	075b      	lsls	r3, r3, #29
 8000848:	d100      	bne.n	800084c <__aeabi_fsub+0x1ec>
 800084a:	e152      	b.n	8000af2 <__aeabi_fsub+0x492>
 800084c:	230f      	movs	r3, #15
 800084e:	2500      	movs	r5, #0
 8000850:	400b      	ands	r3, r1
 8000852:	2b04      	cmp	r3, #4
 8000854:	d000      	beq.n	8000858 <__aeabi_fsub+0x1f8>
 8000856:	e752      	b.n	80006fe <__aeabi_fsub+0x9e>
 8000858:	2001      	movs	r0, #1
 800085a:	014a      	lsls	r2, r1, #5
 800085c:	d400      	bmi.n	8000860 <__aeabi_fsub+0x200>
 800085e:	e092      	b.n	8000986 <__aeabi_fsub+0x326>
 8000860:	b2c0      	uxtb	r0, r0
 8000862:	4663      	mov	r3, ip
 8000864:	019a      	lsls	r2, r3, #6
 8000866:	0a52      	lsrs	r2, r2, #9
 8000868:	e756      	b.n	8000718 <__aeabi_fsub+0xb8>
 800086a:	4663      	mov	r3, ip
 800086c:	075b      	lsls	r3, r3, #29
 800086e:	d005      	beq.n	800087c <__aeabi_fsub+0x21c>
 8000870:	230f      	movs	r3, #15
 8000872:	4662      	mov	r2, ip
 8000874:	4013      	ands	r3, r2
 8000876:	2b04      	cmp	r3, #4
 8000878:	d000      	beq.n	800087c <__aeabi_fsub+0x21c>
 800087a:	e740      	b.n	80006fe <__aeabi_fsub+0x9e>
 800087c:	002b      	movs	r3, r5
 800087e:	e765      	b.n	800074c <__aeabi_fsub+0xec>
 8000880:	0007      	movs	r7, r0
 8000882:	2f00      	cmp	r7, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fsub+0x228>
 8000886:	e745      	b.n	8000714 <__aeabi_fsub+0xb4>
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	03d2      	lsls	r2, r2, #15
 800088c:	433a      	orrs	r2, r7
 800088e:	0252      	lsls	r2, r2, #9
 8000890:	20ff      	movs	r0, #255	@ 0xff
 8000892:	0a52      	lsrs	r2, r2, #9
 8000894:	e740      	b.n	8000718 <__aeabi_fsub+0xb8>
 8000896:	2b00      	cmp	r3, #0
 8000898:	d179      	bne.n	800098e <__aeabi_fsub+0x32e>
 800089a:	22fe      	movs	r2, #254	@ 0xfe
 800089c:	1c6b      	adds	r3, r5, #1
 800089e:	421a      	tst	r2, r3
 80008a0:	d1aa      	bne.n	80007f8 <__aeabi_fsub+0x198>
 80008a2:	4663      	mov	r3, ip
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d100      	bne.n	80008aa <__aeabi_fsub+0x24a>
 80008a8:	e0f5      	b.n	8000a96 <__aeabi_fsub+0x436>
 80008aa:	2900      	cmp	r1, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_fsub+0x250>
 80008ae:	e0d1      	b.n	8000a54 <__aeabi_fsub+0x3f4>
 80008b0:	1a5f      	subs	r7, r3, r1
 80008b2:	2380      	movs	r3, #128	@ 0x80
 80008b4:	04db      	lsls	r3, r3, #19
 80008b6:	421f      	tst	r7, r3
 80008b8:	d100      	bne.n	80008bc <__aeabi_fsub+0x25c>
 80008ba:	e10e      	b.n	8000ada <__aeabi_fsub+0x47a>
 80008bc:	4662      	mov	r2, ip
 80008be:	2401      	movs	r4, #1
 80008c0:	1a8a      	subs	r2, r1, r2
 80008c2:	4694      	mov	ip, r2
 80008c4:	2000      	movs	r0, #0
 80008c6:	4034      	ands	r4, r6
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_fsub+0x26e>
 80008cc:	e724      	b.n	8000718 <__aeabi_fsub+0xb8>
 80008ce:	2001      	movs	r0, #1
 80008d0:	421a      	tst	r2, r3
 80008d2:	d1c6      	bne.n	8000862 <__aeabi_fsub+0x202>
 80008d4:	2300      	movs	r3, #0
 80008d6:	08d7      	lsrs	r7, r2, #3
 80008d8:	e73d      	b.n	8000756 <__aeabi_fsub+0xf6>
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d017      	beq.n	800090e <__aeabi_fsub+0x2ae>
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d000      	beq.n	80008e4 <__aeabi_fsub+0x284>
 80008e2:	e0af      	b.n	8000a44 <__aeabi_fsub+0x3e4>
 80008e4:	23ff      	movs	r3, #255	@ 0xff
 80008e6:	4665      	mov	r5, ip
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_fsub+0x28e>
 80008ec:	e0ad      	b.n	8000a4a <__aeabi_fsub+0x3ea>
 80008ee:	1e5e      	subs	r6, r3, #1
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fsub+0x296>
 80008f4:	e089      	b.n	8000a0a <__aeabi_fsub+0x3aa>
 80008f6:	2bff      	cmp	r3, #255	@ 0xff
 80008f8:	d0c2      	beq.n	8000880 <__aeabi_fsub+0x220>
 80008fa:	2e1b      	cmp	r6, #27
 80008fc:	dc00      	bgt.n	8000900 <__aeabi_fsub+0x2a0>
 80008fe:	e0ab      	b.n	8000a58 <__aeabi_fsub+0x3f8>
 8000900:	1d4b      	adds	r3, r1, #5
 8000902:	469c      	mov	ip, r3
 8000904:	0013      	movs	r3, r2
 8000906:	e721      	b.n	800074c <__aeabi_fsub+0xec>
 8000908:	464b      	mov	r3, r9
 800090a:	2b00      	cmp	r3, #0
 800090c:	d170      	bne.n	80009f0 <__aeabi_fsub+0x390>
 800090e:	22fe      	movs	r2, #254	@ 0xfe
 8000910:	1c6b      	adds	r3, r5, #1
 8000912:	421a      	tst	r2, r3
 8000914:	d15e      	bne.n	80009d4 <__aeabi_fsub+0x374>
 8000916:	2d00      	cmp	r5, #0
 8000918:	d000      	beq.n	800091c <__aeabi_fsub+0x2bc>
 800091a:	e0c3      	b.n	8000aa4 <__aeabi_fsub+0x444>
 800091c:	4663      	mov	r3, ip
 800091e:	2b00      	cmp	r3, #0
 8000920:	d100      	bne.n	8000924 <__aeabi_fsub+0x2c4>
 8000922:	e0d0      	b.n	8000ac6 <__aeabi_fsub+0x466>
 8000924:	2900      	cmp	r1, #0
 8000926:	d100      	bne.n	800092a <__aeabi_fsub+0x2ca>
 8000928:	e094      	b.n	8000a54 <__aeabi_fsub+0x3f4>
 800092a:	000a      	movs	r2, r1
 800092c:	4462      	add	r2, ip
 800092e:	0153      	lsls	r3, r2, #5
 8000930:	d400      	bmi.n	8000934 <__aeabi_fsub+0x2d4>
 8000932:	e0d8      	b.n	8000ae6 <__aeabi_fsub+0x486>
 8000934:	0192      	lsls	r2, r2, #6
 8000936:	2001      	movs	r0, #1
 8000938:	0a52      	lsrs	r2, r2, #9
 800093a:	e6ed      	b.n	8000718 <__aeabi_fsub+0xb8>
 800093c:	0008      	movs	r0, r1
 800093e:	2220      	movs	r2, #32
 8000940:	40d8      	lsrs	r0, r3
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	4099      	lsls	r1, r3
 8000946:	000b      	movs	r3, r1
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	4193      	sbcs	r3, r2
 800094c:	4303      	orrs	r3, r0
 800094e:	449c      	add	ip, r3
 8000950:	4663      	mov	r3, ip
 8000952:	015b      	lsls	r3, r3, #5
 8000954:	d589      	bpl.n	800086a <__aeabi_fsub+0x20a>
 8000956:	3501      	adds	r5, #1
 8000958:	2dff      	cmp	r5, #255	@ 0xff
 800095a:	d100      	bne.n	800095e <__aeabi_fsub+0x2fe>
 800095c:	e6da      	b.n	8000714 <__aeabi_fsub+0xb4>
 800095e:	4662      	mov	r2, ip
 8000960:	2301      	movs	r3, #1
 8000962:	4919      	ldr	r1, [pc, #100]	@ (80009c8 <__aeabi_fsub+0x368>)
 8000964:	4013      	ands	r3, r2
 8000966:	0852      	lsrs	r2, r2, #1
 8000968:	400a      	ands	r2, r1
 800096a:	431a      	orrs	r2, r3
 800096c:	0013      	movs	r3, r2
 800096e:	4694      	mov	ip, r2
 8000970:	075b      	lsls	r3, r3, #29
 8000972:	d004      	beq.n	800097e <__aeabi_fsub+0x31e>
 8000974:	230f      	movs	r3, #15
 8000976:	4013      	ands	r3, r2
 8000978:	2b04      	cmp	r3, #4
 800097a:	d000      	beq.n	800097e <__aeabi_fsub+0x31e>
 800097c:	e6bf      	b.n	80006fe <__aeabi_fsub+0x9e>
 800097e:	4663      	mov	r3, ip
 8000980:	015b      	lsls	r3, r3, #5
 8000982:	d500      	bpl.n	8000986 <__aeabi_fsub+0x326>
 8000984:	e6c2      	b.n	800070c <__aeabi_fsub+0xac>
 8000986:	4663      	mov	r3, ip
 8000988:	08df      	lsrs	r7, r3, #3
 800098a:	002b      	movs	r3, r5
 800098c:	e6e3      	b.n	8000756 <__aeabi_fsub+0xf6>
 800098e:	1b53      	subs	r3, r2, r5
 8000990:	2d00      	cmp	r5, #0
 8000992:	d100      	bne.n	8000996 <__aeabi_fsub+0x336>
 8000994:	e6f4      	b.n	8000780 <__aeabi_fsub+0x120>
 8000996:	2080      	movs	r0, #128	@ 0x80
 8000998:	4664      	mov	r4, ip
 800099a:	04c0      	lsls	r0, r0, #19
 800099c:	4304      	orrs	r4, r0
 800099e:	46a4      	mov	ip, r4
 80009a0:	0034      	movs	r4, r6
 80009a2:	2001      	movs	r0, #1
 80009a4:	2b1b      	cmp	r3, #27
 80009a6:	dc09      	bgt.n	80009bc <__aeabi_fsub+0x35c>
 80009a8:	2520      	movs	r5, #32
 80009aa:	4660      	mov	r0, ip
 80009ac:	40d8      	lsrs	r0, r3
 80009ae:	1aeb      	subs	r3, r5, r3
 80009b0:	4665      	mov	r5, ip
 80009b2:	409d      	lsls	r5, r3
 80009b4:	002b      	movs	r3, r5
 80009b6:	1e5d      	subs	r5, r3, #1
 80009b8:	41ab      	sbcs	r3, r5
 80009ba:	4318      	orrs	r0, r3
 80009bc:	1a0b      	subs	r3, r1, r0
 80009be:	469c      	mov	ip, r3
 80009c0:	0015      	movs	r5, r2
 80009c2:	e680      	b.n	80006c6 <__aeabi_fsub+0x66>
 80009c4:	fbffffff 	.word	0xfbffffff
 80009c8:	7dffffff 	.word	0x7dffffff
 80009cc:	22fe      	movs	r2, #254	@ 0xfe
 80009ce:	1c6b      	adds	r3, r5, #1
 80009d0:	4213      	tst	r3, r2
 80009d2:	d0a3      	beq.n	800091c <__aeabi_fsub+0x2bc>
 80009d4:	2bff      	cmp	r3, #255	@ 0xff
 80009d6:	d100      	bne.n	80009da <__aeabi_fsub+0x37a>
 80009d8:	e69c      	b.n	8000714 <__aeabi_fsub+0xb4>
 80009da:	4461      	add	r1, ip
 80009dc:	0849      	lsrs	r1, r1, #1
 80009de:	074a      	lsls	r2, r1, #29
 80009e0:	d049      	beq.n	8000a76 <__aeabi_fsub+0x416>
 80009e2:	220f      	movs	r2, #15
 80009e4:	400a      	ands	r2, r1
 80009e6:	2a04      	cmp	r2, #4
 80009e8:	d045      	beq.n	8000a76 <__aeabi_fsub+0x416>
 80009ea:	1d0a      	adds	r2, r1, #4
 80009ec:	4694      	mov	ip, r2
 80009ee:	e6ad      	b.n	800074c <__aeabi_fsub+0xec>
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fsub+0x396>
 80009f4:	e776      	b.n	80008e4 <__aeabi_fsub+0x284>
 80009f6:	e68d      	b.n	8000714 <__aeabi_fsub+0xb4>
 80009f8:	0034      	movs	r4, r6
 80009fa:	20ff      	movs	r0, #255	@ 0xff
 80009fc:	2200      	movs	r2, #0
 80009fe:	e68b      	b.n	8000718 <__aeabi_fsub+0xb8>
 8000a00:	4663      	mov	r3, ip
 8000a02:	2401      	movs	r4, #1
 8000a04:	1acf      	subs	r7, r1, r3
 8000a06:	4034      	ands	r4, r6
 8000a08:	e664      	b.n	80006d4 <__aeabi_fsub+0x74>
 8000a0a:	4461      	add	r1, ip
 8000a0c:	014b      	lsls	r3, r1, #5
 8000a0e:	d56d      	bpl.n	8000aec <__aeabi_fsub+0x48c>
 8000a10:	0848      	lsrs	r0, r1, #1
 8000a12:	4944      	ldr	r1, [pc, #272]	@ (8000b24 <__aeabi_fsub+0x4c4>)
 8000a14:	4001      	ands	r1, r0
 8000a16:	0743      	lsls	r3, r0, #29
 8000a18:	d02c      	beq.n	8000a74 <__aeabi_fsub+0x414>
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	4003      	ands	r3, r0
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	d028      	beq.n	8000a74 <__aeabi_fsub+0x414>
 8000a22:	1d0b      	adds	r3, r1, #4
 8000a24:	469c      	mov	ip, r3
 8000a26:	2302      	movs	r3, #2
 8000a28:	e690      	b.n	800074c <__aeabi_fsub+0xec>
 8000a2a:	2900      	cmp	r1, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0x3d0>
 8000a2e:	e72b      	b.n	8000888 <__aeabi_fsub+0x228>
 8000a30:	2380      	movs	r3, #128	@ 0x80
 8000a32:	03db      	lsls	r3, r3, #15
 8000a34:	429f      	cmp	r7, r3
 8000a36:	d200      	bcs.n	8000a3a <__aeabi_fsub+0x3da>
 8000a38:	e726      	b.n	8000888 <__aeabi_fsub+0x228>
 8000a3a:	4298      	cmp	r0, r3
 8000a3c:	d300      	bcc.n	8000a40 <__aeabi_fsub+0x3e0>
 8000a3e:	e723      	b.n	8000888 <__aeabi_fsub+0x228>
 8000a40:	2401      	movs	r4, #1
 8000a42:	4034      	ands	r4, r6
 8000a44:	0007      	movs	r7, r0
 8000a46:	e71f      	b.n	8000888 <__aeabi_fsub+0x228>
 8000a48:	0034      	movs	r4, r6
 8000a4a:	468c      	mov	ip, r1
 8000a4c:	e67e      	b.n	800074c <__aeabi_fsub+0xec>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	08cf      	lsrs	r7, r1, #3
 8000a52:	e680      	b.n	8000756 <__aeabi_fsub+0xf6>
 8000a54:	2300      	movs	r3, #0
 8000a56:	e67e      	b.n	8000756 <__aeabi_fsub+0xf6>
 8000a58:	2020      	movs	r0, #32
 8000a5a:	4665      	mov	r5, ip
 8000a5c:	1b80      	subs	r0, r0, r6
 8000a5e:	4085      	lsls	r5, r0
 8000a60:	4663      	mov	r3, ip
 8000a62:	0028      	movs	r0, r5
 8000a64:	40f3      	lsrs	r3, r6
 8000a66:	1e45      	subs	r5, r0, #1
 8000a68:	41a8      	sbcs	r0, r5
 8000a6a:	4303      	orrs	r3, r0
 8000a6c:	469c      	mov	ip, r3
 8000a6e:	0015      	movs	r5, r2
 8000a70:	448c      	add	ip, r1
 8000a72:	e76d      	b.n	8000950 <__aeabi_fsub+0x2f0>
 8000a74:	2302      	movs	r3, #2
 8000a76:	08cf      	lsrs	r7, r1, #3
 8000a78:	e66d      	b.n	8000756 <__aeabi_fsub+0xf6>
 8000a7a:	1b0f      	subs	r7, r1, r4
 8000a7c:	017b      	lsls	r3, r7, #5
 8000a7e:	d528      	bpl.n	8000ad2 <__aeabi_fsub+0x472>
 8000a80:	01bf      	lsls	r7, r7, #6
 8000a82:	09bf      	lsrs	r7, r7, #6
 8000a84:	0038      	movs	r0, r7
 8000a86:	f000 f8b5 	bl	8000bf4 <__clzsi2>
 8000a8a:	003b      	movs	r3, r7
 8000a8c:	3805      	subs	r0, #5
 8000a8e:	4083      	lsls	r3, r0
 8000a90:	0034      	movs	r4, r6
 8000a92:	2501      	movs	r5, #1
 8000a94:	e6ca      	b.n	800082c <__aeabi_fsub+0x1cc>
 8000a96:	2900      	cmp	r1, #0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fsub+0x43c>
 8000a9a:	e6b5      	b.n	8000808 <__aeabi_fsub+0x1a8>
 8000a9c:	2401      	movs	r4, #1
 8000a9e:	0007      	movs	r7, r0
 8000aa0:	4034      	ands	r4, r6
 8000aa2:	e658      	b.n	8000756 <__aeabi_fsub+0xf6>
 8000aa4:	4663      	mov	r3, ip
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fsub+0x44c>
 8000aaa:	e6e9      	b.n	8000880 <__aeabi_fsub+0x220>
 8000aac:	2900      	cmp	r1, #0
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_fsub+0x452>
 8000ab0:	e6ea      	b.n	8000888 <__aeabi_fsub+0x228>
 8000ab2:	2380      	movs	r3, #128	@ 0x80
 8000ab4:	03db      	lsls	r3, r3, #15
 8000ab6:	429f      	cmp	r7, r3
 8000ab8:	d200      	bcs.n	8000abc <__aeabi_fsub+0x45c>
 8000aba:	e6e5      	b.n	8000888 <__aeabi_fsub+0x228>
 8000abc:	4298      	cmp	r0, r3
 8000abe:	d300      	bcc.n	8000ac2 <__aeabi_fsub+0x462>
 8000ac0:	e6e2      	b.n	8000888 <__aeabi_fsub+0x228>
 8000ac2:	0007      	movs	r7, r0
 8000ac4:	e6e0      	b.n	8000888 <__aeabi_fsub+0x228>
 8000ac6:	2900      	cmp	r1, #0
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fsub+0x46c>
 8000aca:	e69e      	b.n	800080a <__aeabi_fsub+0x1aa>
 8000acc:	2300      	movs	r3, #0
 8000ace:	08cf      	lsrs	r7, r1, #3
 8000ad0:	e641      	b.n	8000756 <__aeabi_fsub+0xf6>
 8000ad2:	0034      	movs	r4, r6
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	08ff      	lsrs	r7, r7, #3
 8000ad8:	e63d      	b.n	8000756 <__aeabi_fsub+0xf6>
 8000ada:	2f00      	cmp	r7, #0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_fsub+0x480>
 8000ade:	e693      	b.n	8000808 <__aeabi_fsub+0x1a8>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	08ff      	lsrs	r7, r7, #3
 8000ae4:	e637      	b.n	8000756 <__aeabi_fsub+0xf6>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	08d7      	lsrs	r7, r2, #3
 8000aea:	e634      	b.n	8000756 <__aeabi_fsub+0xf6>
 8000aec:	2301      	movs	r3, #1
 8000aee:	08cf      	lsrs	r7, r1, #3
 8000af0:	e631      	b.n	8000756 <__aeabi_fsub+0xf6>
 8000af2:	2280      	movs	r2, #128	@ 0x80
 8000af4:	000b      	movs	r3, r1
 8000af6:	04d2      	lsls	r2, r2, #19
 8000af8:	2001      	movs	r0, #1
 8000afa:	4013      	ands	r3, r2
 8000afc:	4211      	tst	r1, r2
 8000afe:	d000      	beq.n	8000b02 <__aeabi_fsub+0x4a2>
 8000b00:	e6ae      	b.n	8000860 <__aeabi_fsub+0x200>
 8000b02:	08cf      	lsrs	r7, r1, #3
 8000b04:	e627      	b.n	8000756 <__aeabi_fsub+0xf6>
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_fsub+0x4ac>
 8000b0a:	e75f      	b.n	80009cc <__aeabi_fsub+0x36c>
 8000b0c:	1b56      	subs	r6, r2, r5
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fsub+0x4b6>
 8000b12:	0033      	movs	r3, r6
 8000b14:	e6e7      	b.n	80008e6 <__aeabi_fsub+0x286>
 8000b16:	2380      	movs	r3, #128	@ 0x80
 8000b18:	4660      	mov	r0, ip
 8000b1a:	04db      	lsls	r3, r3, #19
 8000b1c:	4318      	orrs	r0, r3
 8000b1e:	4684      	mov	ip, r0
 8000b20:	e6eb      	b.n	80008fa <__aeabi_fsub+0x29a>
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	7dffffff 	.word	0x7dffffff

08000b28 <__aeabi_f2iz>:
 8000b28:	0241      	lsls	r1, r0, #9
 8000b2a:	0042      	lsls	r2, r0, #1
 8000b2c:	0fc3      	lsrs	r3, r0, #31
 8000b2e:	0a49      	lsrs	r1, r1, #9
 8000b30:	2000      	movs	r0, #0
 8000b32:	0e12      	lsrs	r2, r2, #24
 8000b34:	2a7e      	cmp	r2, #126	@ 0x7e
 8000b36:	dd03      	ble.n	8000b40 <__aeabi_f2iz+0x18>
 8000b38:	2a9d      	cmp	r2, #157	@ 0x9d
 8000b3a:	dd02      	ble.n	8000b42 <__aeabi_f2iz+0x1a>
 8000b3c:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <__aeabi_f2iz+0x3c>)
 8000b3e:	1898      	adds	r0, r3, r2
 8000b40:	4770      	bx	lr
 8000b42:	2080      	movs	r0, #128	@ 0x80
 8000b44:	0400      	lsls	r0, r0, #16
 8000b46:	4301      	orrs	r1, r0
 8000b48:	2a95      	cmp	r2, #149	@ 0x95
 8000b4a:	dc07      	bgt.n	8000b5c <__aeabi_f2iz+0x34>
 8000b4c:	2096      	movs	r0, #150	@ 0x96
 8000b4e:	1a82      	subs	r2, r0, r2
 8000b50:	40d1      	lsrs	r1, r2
 8000b52:	4248      	negs	r0, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f3      	bne.n	8000b40 <__aeabi_f2iz+0x18>
 8000b58:	0008      	movs	r0, r1
 8000b5a:	e7f1      	b.n	8000b40 <__aeabi_f2iz+0x18>
 8000b5c:	3a96      	subs	r2, #150	@ 0x96
 8000b5e:	4091      	lsls	r1, r2
 8000b60:	e7f7      	b.n	8000b52 <__aeabi_f2iz+0x2a>
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	7fffffff 	.word	0x7fffffff

08000b68 <__aeabi_ui2f>:
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	1e04      	subs	r4, r0, #0
 8000b6c:	d00d      	beq.n	8000b8a <__aeabi_ui2f+0x22>
 8000b6e:	f000 f841 	bl	8000bf4 <__clzsi2>
 8000b72:	239e      	movs	r3, #158	@ 0x9e
 8000b74:	1a1b      	subs	r3, r3, r0
 8000b76:	2b96      	cmp	r3, #150	@ 0x96
 8000b78:	dc0c      	bgt.n	8000b94 <__aeabi_ui2f+0x2c>
 8000b7a:	2808      	cmp	r0, #8
 8000b7c:	d034      	beq.n	8000be8 <__aeabi_ui2f+0x80>
 8000b7e:	3808      	subs	r0, #8
 8000b80:	4084      	lsls	r4, r0
 8000b82:	0264      	lsls	r4, r4, #9
 8000b84:	0a64      	lsrs	r4, r4, #9
 8000b86:	b2d8      	uxtb	r0, r3
 8000b88:	e001      	b.n	8000b8e <__aeabi_ui2f+0x26>
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	2400      	movs	r4, #0
 8000b8e:	05c0      	lsls	r0, r0, #23
 8000b90:	4320      	orrs	r0, r4
 8000b92:	bd10      	pop	{r4, pc}
 8000b94:	2b99      	cmp	r3, #153	@ 0x99
 8000b96:	dc13      	bgt.n	8000bc0 <__aeabi_ui2f+0x58>
 8000b98:	1f42      	subs	r2, r0, #5
 8000b9a:	4094      	lsls	r4, r2
 8000b9c:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <__aeabi_ui2f+0x88>)
 8000b9e:	4022      	ands	r2, r4
 8000ba0:	0761      	lsls	r1, r4, #29
 8000ba2:	d01c      	beq.n	8000bde <__aeabi_ui2f+0x76>
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	4021      	ands	r1, r4
 8000ba8:	2904      	cmp	r1, #4
 8000baa:	d018      	beq.n	8000bde <__aeabi_ui2f+0x76>
 8000bac:	3204      	adds	r2, #4
 8000bae:	08d4      	lsrs	r4, r2, #3
 8000bb0:	0152      	lsls	r2, r2, #5
 8000bb2:	d515      	bpl.n	8000be0 <__aeabi_ui2f+0x78>
 8000bb4:	239f      	movs	r3, #159	@ 0x9f
 8000bb6:	0264      	lsls	r4, r4, #9
 8000bb8:	1a18      	subs	r0, r3, r0
 8000bba:	0a64      	lsrs	r4, r4, #9
 8000bbc:	b2c0      	uxtb	r0, r0
 8000bbe:	e7e6      	b.n	8000b8e <__aeabi_ui2f+0x26>
 8000bc0:	0002      	movs	r2, r0
 8000bc2:	0021      	movs	r1, r4
 8000bc4:	321b      	adds	r2, #27
 8000bc6:	4091      	lsls	r1, r2
 8000bc8:	000a      	movs	r2, r1
 8000bca:	1e51      	subs	r1, r2, #1
 8000bcc:	418a      	sbcs	r2, r1
 8000bce:	2105      	movs	r1, #5
 8000bd0:	1a09      	subs	r1, r1, r0
 8000bd2:	40cc      	lsrs	r4, r1
 8000bd4:	4314      	orrs	r4, r2
 8000bd6:	4a06      	ldr	r2, [pc, #24]	@ (8000bf0 <__aeabi_ui2f+0x88>)
 8000bd8:	4022      	ands	r2, r4
 8000bda:	0761      	lsls	r1, r4, #29
 8000bdc:	d1e2      	bne.n	8000ba4 <__aeabi_ui2f+0x3c>
 8000bde:	08d4      	lsrs	r4, r2, #3
 8000be0:	0264      	lsls	r4, r4, #9
 8000be2:	0a64      	lsrs	r4, r4, #9
 8000be4:	b2d8      	uxtb	r0, r3
 8000be6:	e7d2      	b.n	8000b8e <__aeabi_ui2f+0x26>
 8000be8:	0264      	lsls	r4, r4, #9
 8000bea:	0a64      	lsrs	r4, r4, #9
 8000bec:	308e      	adds	r0, #142	@ 0x8e
 8000bee:	e7ce      	b.n	8000b8e <__aeabi_ui2f+0x26>
 8000bf0:	fbffffff 	.word	0xfbffffff

08000bf4 <__clzsi2>:
 8000bf4:	211c      	movs	r1, #28
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	041b      	lsls	r3, r3, #16
 8000bfa:	4298      	cmp	r0, r3
 8000bfc:	d301      	bcc.n	8000c02 <__clzsi2+0xe>
 8000bfe:	0c00      	lsrs	r0, r0, #16
 8000c00:	3910      	subs	r1, #16
 8000c02:	0a1b      	lsrs	r3, r3, #8
 8000c04:	4298      	cmp	r0, r3
 8000c06:	d301      	bcc.n	8000c0c <__clzsi2+0x18>
 8000c08:	0a00      	lsrs	r0, r0, #8
 8000c0a:	3908      	subs	r1, #8
 8000c0c:	091b      	lsrs	r3, r3, #4
 8000c0e:	4298      	cmp	r0, r3
 8000c10:	d301      	bcc.n	8000c16 <__clzsi2+0x22>
 8000c12:	0900      	lsrs	r0, r0, #4
 8000c14:	3904      	subs	r1, #4
 8000c16:	a202      	add	r2, pc, #8	@ (adr r2, 8000c20 <__clzsi2+0x2c>)
 8000c18:	5c10      	ldrb	r0, [r2, r0]
 8000c1a:	1840      	adds	r0, r0, r1
 8000c1c:	4770      	bx	lr
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	02020304 	.word	0x02020304
 8000c24:	01010101 	.word	0x01010101
	...

08000c30 <FEB_CAN_Init>:

uint32_t FEB_CAN_Tx_Mailbox;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

	FEB_CAN_Filter_Config();
 8000c34:	f000 f812 	bl	8000c5c <FEB_CAN_Filter_Config>

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000c38:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <FEB_CAN_Init+0x28>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f001 fba4 	bl	8002388 <HAL_CAN_Start>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d001      	beq.n	8000c48 <FEB_CAN_Init+0x18>
		Error_Handler();
 8000c44:	f000 fdf8 	bl	8001838 <Error_Handler>
	}

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <FEB_CAN_Init+0x28>)
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f001 fbe1 	bl	8002414 <HAL_CAN_ActivateNotification>
}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200000bc 	.word	0x200000bc

08000c5c <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]

	filter_bank = FEB_CAN_BMS_Filter(&hcan, CAN_RX_FIFO0, filter_bank);
 8000c68:	1dfc      	adds	r4, r7, #7
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <FEB_CAN_Filter_Config+0x28>)
 8000c70:	2100      	movs	r1, #0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 f808 	bl	8000c88 <FEB_CAN_BMS_Filter>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	7023      	strb	r3, [r4, #0]
}
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b003      	add	sp, #12
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	200000bc 	.word	0x200000bc

08000c88 <FEB_CAN_BMS_Filter>:
extern uint8_t FEB_CAN_Tx_Data[8];
extern uint32_t FEB_CAN_Tx_Mailbox;
extern UART_HandleTypeDef huart2;


uint8_t FEB_CAN_BMS_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	@ 0x30
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	0008      	movs	r0, r1
 8000c92:	0011      	movs	r1, r2
 8000c94:	1cfb      	adds	r3, r7, #3
 8000c96:	1c02      	adds	r2, r0, #0
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	1cbb      	adds	r3, r7, #2
 8000c9c:	1c0a      	adds	r2, r1, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
	CAN_FilterTypeDef filter_config;

	// Standard CAN - 2.0A - 11 bit
	filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	621a      	str	r2, [r3, #32]
	filter_config.FilterBank = filter_bank;
 8000ca8:	1cbb      	adds	r3, r7, #2
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	615a      	str	r2, [r3, #20]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 8000cb0:	1cfb      	adds	r3, r7, #3
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	611a      	str	r2, [r3, #16]
	filter_config.FilterIdHigh = FEB_CAN_BMS_ACCUMULATOR_TEMPERATURE_FRAME_ID << 5;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2260      	movs	r2, #96	@ 0x60
 8000cbc:	601a      	str	r2, [r3, #0]
	filter_config.FilterIdLow = 0;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
	filter_config.FilterMaskIdHigh = 0xFFE0;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d04 <FEB_CAN_BMS_Filter+0x7c>)
 8000cc8:	609a      	str	r2, [r3, #8]
	filter_config.FilterMaskIdLow = 0;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2201      	movs	r2, #1
 8000cda:	61da      	str	r2, [r3, #28]
	filter_config.SlaveStartFilterBank = 27;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	221b      	movs	r2, #27
 8000ce0:	625a      	str	r2, [r3, #36]	@ 0x24


	if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 8000ce2:	187a      	adds	r2, r7, r1
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f001 fa5b 	bl	80021a4 <HAL_CAN_ConfigFilter>
		// Code Error - Shutdown
	}

	return ++filter_bank;
 8000cee:	1cbb      	adds	r3, r7, #2
 8000cf0:	1cba      	adds	r2, r7, #2
 8000cf2:	7812      	ldrb	r2, [r2, #0]
 8000cf4:	3201      	adds	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	1cbb      	adds	r3, r7, #2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b00c      	add	sp, #48	@ 0x30
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	0000ffe0 	.word	0x0000ffe0

08000d08 <FEB_Fan_Init>:
static void FEB_TACH_IIR(uint16_t *data_in, uint16_t *data_out, uint32_t *filters, \
											uint8_t length, bool *filter_initialized);

// ********************************** Initialize **********************************

void FEB_Fan_Init(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	FEB_Fan_PWM_Init();
 8000d0c:	f000 f808 	bl	8000d20 <FEB_Fan_PWM_Init>
	FEB_Fan_All_Speed_Set((uint8_t)(PWM_COUNTER * PWM_START_PERCENT)); // starts at 100% duty cycle
 8000d10:	20ff      	movs	r0, #255	@ 0xff
 8000d12:	f000 f825 	bl	8000d60 <FEB_Fan_All_Speed_Set>
	FEB_Fan_TACH_Init();
 8000d16:	f000 f871 	bl	8000dfc <FEB_Fan_TACH_Init>
}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <FEB_Fan_PWM_Init>:
//	__HAL_TIM_SET_COMPARE(timer[4], tim_channels[4], FEB_CAN_Rx_Data[4]);
}

// ********************************** PWM **********************************

void FEB_Fan_PWM_Init(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	e00d      	b.n	8000d48 <FEB_Fan_PWM_Init+0x28>
		HAL_TIM_PWM_Start(timer[i], tim_channels[i]);
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <FEB_Fan_PWM_Init+0x38>)
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	58d0      	ldr	r0, [r2, r3]
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <FEB_Fan_PWM_Init+0x3c>)
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	0092      	lsls	r2, r2, #2
 8000d3a:	58d3      	ldr	r3, [r2, r3]
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	f002 fc31 	bl	80035a4 <HAL_TIM_PWM_Start>
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3301      	adds	r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	d9ee      	bls.n	8000d2c <FEB_Fan_PWM_Init+0xc>
	}
}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000028 	.word	0x20000028

08000d60 <FEB_Fan_All_Speed_Set>:

void FEB_Fan_All_Speed_Set(uint8_t speed) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	0002      	movs	r2, r0
 8000d68:	1dfb      	adds	r3, r7, #7
 8000d6a:	701a      	strb	r2, [r3, #0]
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	e037      	b.n	8000de2 <FEB_Fan_All_Speed_Set+0x82>
		__HAL_TIM_SET_COMPARE(timer[i], tim_channels[i], speed);
 8000d72:	4b20      	ldr	r3, [pc, #128]	@ (8000df4 <FEB_Fan_All_Speed_Set+0x94>)
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	0092      	lsls	r2, r2, #2
 8000d78:	58d3      	ldr	r3, [r2, r3]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d108      	bne.n	8000d90 <FEB_Fan_All_Speed_Set+0x30>
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <FEB_Fan_All_Speed_Set+0x98>)
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	0092      	lsls	r2, r2, #2
 8000d84:	58d3      	ldr	r3, [r2, r3]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	1dfa      	adds	r2, r7, #7
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d8e:	e025      	b.n	8000ddc <FEB_Fan_All_Speed_Set+0x7c>
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <FEB_Fan_All_Speed_Set+0x94>)
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	0092      	lsls	r2, r2, #2
 8000d96:	58d3      	ldr	r3, [r2, r3]
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d108      	bne.n	8000dae <FEB_Fan_All_Speed_Set+0x4e>
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <FEB_Fan_All_Speed_Set+0x98>)
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	0092      	lsls	r2, r2, #2
 8000da2:	58d3      	ldr	r3, [r2, r3]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	6393      	str	r3, [r2, #56]	@ 0x38
 8000dac:	e016      	b.n	8000ddc <FEB_Fan_All_Speed_Set+0x7c>
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <FEB_Fan_All_Speed_Set+0x94>)
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	58d3      	ldr	r3, [r2, r3]
 8000db6:	2b08      	cmp	r3, #8
 8000db8:	d108      	bne.n	8000dcc <FEB_Fan_All_Speed_Set+0x6c>
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <FEB_Fan_All_Speed_Set+0x98>)
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	58d3      	ldr	r3, [r2, r3]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000dca:	e007      	b.n	8000ddc <FEB_Fan_All_Speed_Set+0x7c>
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <FEB_Fan_All_Speed_Set+0x98>)
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	0092      	lsls	r2, r2, #2
 8000dd2:	58d3      	ldr	r3, [r2, r3]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	6413      	str	r3, [r2, #64]	@ 0x40
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	3301      	adds	r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d9c4      	bls.n	8000d72 <FEB_Fan_All_Speed_Set+0x12>
	}
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b004      	add	sp, #16
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	20000028 	.word	0x20000028
 8000df8:	20000000 	.word	0x20000000

08000dfc <FEB_Fan_TACH_Init>:

// ********************************** TACH **********************************

void FEB_Fan_TACH_Init(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	e00d      	b.n	8000e24 <FEB_Fan_TACH_Init+0x28>
		HAL_TIM_IC_Start_IT(timer[i], tim_channels[i]);
 8000e08:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <FEB_Fan_TACH_Init+0x38>)
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	58d0      	ldr	r0, [r2, r3]
 8000e10:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <FEB_Fan_TACH_Init+0x3c>)
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	58d3      	ldr	r3, [r2, r3]
 8000e18:	0019      	movs	r1, r3
 8000e1a:	f002 fcc7 	bl	80037ac <HAL_TIM_IC_Start_IT>
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3301      	adds	r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d9ee      	bls.n	8000e08 <FEB_Fan_TACH_Init+0xc>
	}
}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b002      	add	sp, #8
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000028 	.word	0x20000028

08000e3c <FEB_Fan_TACH_Callback>:

void FEB_Fan_TACH_Callback(TIM_HandleTypeDef *htim) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	6078      	str	r0, [r7, #4]

	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	e08c      	b.n	8000f64 <FEB_Fan_TACH_Callback+0x128>

		if ( timer[i] == htim ) {
 8000e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f74 <FEB_Fan_TACH_Callback+0x138>)
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	58d3      	ldr	r3, [r2, r3]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d000      	beq.n	8000e5a <FEB_Fan_TACH_Callback+0x1e>
 8000e58:	e081      	b.n	8000f5e <FEB_Fan_TACH_Callback+0x122>

			if ( htim->Channel == tim_active_channels[i] ) {
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7f1b      	ldrb	r3, [r3, #28]
 8000e5e:	0019      	movs	r1, r3
 8000e60:	4b45      	ldr	r3, [pc, #276]	@ (8000f78 <FEB_Fan_TACH_Callback+0x13c>)
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	58d3      	ldr	r3, [r2, r3]
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d000      	beq.n	8000e6e <FEB_Fan_TACH_Callback+0x32>
 8000e6c:	e077      	b.n	8000f5e <FEB_Fan_TACH_Callback+0x122>

				if ( first_capture[i] == false ) {
 8000e6e:	4a43      	ldr	r2, [pc, #268]	@ (8000f7c <FEB_Fan_TACH_Callback+0x140>)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	18d3      	adds	r3, r2, r3
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2201      	movs	r2, #1
 8000e78:	4053      	eors	r3, r2
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d013      	beq.n	8000ea8 <FEB_Fan_TACH_Callback+0x6c>

					IC_first_rising_edge[i] = HAL_TIM_ReadCapturedValue(htim, tim_channels[i]);
 8000e80:	4b3f      	ldr	r3, [pc, #252]	@ (8000f80 <FEB_Fan_TACH_Callback+0x144>)
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	0092      	lsls	r2, r2, #2
 8000e86:	58d2      	ldr	r2, [r2, r3]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f003 f8e9 	bl	8004064 <HAL_TIM_ReadCapturedValue>
 8000e92:	0001      	movs	r1, r0
 8000e94:	4b3b      	ldr	r3, [pc, #236]	@ (8000f84 <FEB_Fan_TACH_Callback+0x148>)
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	0092      	lsls	r2, r2, #2
 8000e9a:	50d1      	str	r1, [r2, r3]
					first_capture[i] = true;
 8000e9c:	4a37      	ldr	r2, [pc, #220]	@ (8000f7c <FEB_Fan_TACH_Callback+0x140>)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	18d3      	adds	r3, r2, r3
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e05a      	b.n	8000f5e <FEB_Fan_TACH_Callback+0x122>
				}

				else {
					uint32_t diff = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]

					IC_second_rising_edge[i] = HAL_TIM_ReadCapturedValue(htim, tim_channels[i]);
 8000eac:	4b34      	ldr	r3, [pc, #208]	@ (8000f80 <FEB_Fan_TACH_Callback+0x144>)
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	58d2      	ldr	r2, [r2, r3]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f003 f8d3 	bl	8004064 <HAL_TIM_ReadCapturedValue>
 8000ebe:	0001      	movs	r1, r0
 8000ec0:	4b31      	ldr	r3, [pc, #196]	@ (8000f88 <FEB_Fan_TACH_Callback+0x14c>)
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	50d1      	str	r1, [r2, r3]

					if (IC_second_rising_edge[i] > IC_first_rising_edge[i]) {
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f88 <FEB_Fan_TACH_Callback+0x14c>)
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	0092      	lsls	r2, r2, #2
 8000ece:	58d2      	ldr	r2, [r2, r3]
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f84 <FEB_Fan_TACH_Callback+0x148>)
 8000ed2:	68f9      	ldr	r1, [r7, #12]
 8000ed4:	0089      	lsls	r1, r1, #2
 8000ed6:	58cb      	ldr	r3, [r1, r3]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d90a      	bls.n	8000ef2 <FEB_Fan_TACH_Callback+0xb6>

						diff = IC_second_rising_edge[i] - IC_first_rising_edge[i];
 8000edc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <FEB_Fan_TACH_Callback+0x14c>)
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	58d2      	ldr	r2, [r2, r3]
 8000ee4:	4b27      	ldr	r3, [pc, #156]	@ (8000f84 <FEB_Fan_TACH_Callback+0x148>)
 8000ee6:	68f9      	ldr	r1, [r7, #12]
 8000ee8:	0089      	lsls	r1, r1, #2
 8000eea:	58cb      	ldr	r3, [r1, r3]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	e01b      	b.n	8000f2a <FEB_Fan_TACH_Callback+0xee>
					}

					else if (IC_first_rising_edge[i] > IC_second_rising_edge[i]) {
 8000ef2:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <FEB_Fan_TACH_Callback+0x148>)
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	58d2      	ldr	r2, [r2, r3]
 8000efa:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <FEB_Fan_TACH_Callback+0x14c>)
 8000efc:	68f9      	ldr	r1, [r7, #12]
 8000efe:	0089      	lsls	r1, r1, #2
 8000f00:	58cb      	ldr	r3, [r1, r3]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d90b      	bls.n	8000f1e <FEB_Fan_TACH_Callback+0xe2>

						diff = (0xFFFFFFFF - IC_first_rising_edge[i]) + IC_second_rising_edge[i];
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <FEB_Fan_TACH_Callback+0x14c>)
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	58d2      	ldr	r2, [r2, r3]
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <FEB_Fan_TACH_Callback+0x148>)
 8000f10:	68f9      	ldr	r1, [r7, #12]
 8000f12:	0089      	lsls	r1, r1, #2
 8000f14:	58cb      	ldr	r3, [r1, r3]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	e005      	b.n	8000f2a <FEB_Fan_TACH_Callback+0xee>
					}

					else {
						frequency[i] = 0;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <FEB_Fan_TACH_Callback+0x150>)
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	0052      	lsls	r2, r2, #1
 8000f24:	2100      	movs	r1, #0
 8000f26:	52d1      	strh	r1, [r2, r3]
						return;
 8000f28:	e020      	b.n	8000f6c <FEB_Fan_TACH_Callback+0x130>
					}

					frequency[i] = REF_CLOCK / diff;
 8000f2a:	68b8      	ldr	r0, [r7, #8]
 8000f2c:	f7ff fe1c 	bl	8000b68 <__aeabi_ui2f>
 8000f30:	1c03      	adds	r3, r0, #0
 8000f32:	1c19      	adds	r1, r3, #0
 8000f34:	4816      	ldr	r0, [pc, #88]	@ (8000f90 <FEB_Fan_TACH_Callback+0x154>)
 8000f36:	f7ff f9c5 	bl	80002c4 <__aeabi_fdiv>
 8000f3a:	1c03      	adds	r3, r0, #0
 8000f3c:	1c18      	adds	r0, r3, #0
 8000f3e:	f7ff f9a9 	bl	8000294 <__aeabi_f2uiz>
 8000f42:	0003      	movs	r3, r0
 8000f44:	b299      	uxth	r1, r3
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <FEB_Fan_TACH_Callback+0x150>)
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	0052      	lsls	r2, r2, #1
 8000f4c:	52d1      	strh	r1, [r2, r3]

					FEB_TACH_IIR(frequency, frequency, filter, NUM_FANS, filter_init);
 8000f4e:	4a11      	ldr	r2, [pc, #68]	@ (8000f94 <FEB_Fan_TACH_Callback+0x158>)
 8000f50:	490e      	ldr	r1, [pc, #56]	@ (8000f8c <FEB_Fan_TACH_Callback+0x150>)
 8000f52:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <FEB_Fan_TACH_Callback+0x150>)
 8000f54:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <FEB_Fan_TACH_Callback+0x15c>)
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2305      	movs	r3, #5
 8000f5a:	f000 f81f 	bl	8000f9c <FEB_TACH_IIR>
	for ( size_t i = 0; i < NUM_FANS; ++i ) {
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d800      	bhi.n	8000f6c <FEB_Fan_TACH_Callback+0x130>
 8000f6a:	e76e      	b.n	8000e4a <FEB_Fan_TACH_Callback+0xe>
					#endif
				}
			}
		}
	}
}
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b004      	add	sp, #16
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000014 	.word	0x20000014
 8000f7c:	200000b4 	.word	0x200000b4
 8000f80:	20000028 	.word	0x20000028
 8000f84:	2000008c 	.word	0x2000008c
 8000f88:	200000a0 	.word	0x200000a0
 8000f8c:	20000064 	.word	0x20000064
 8000f90:	4c371b00 	.word	0x4c371b00
 8000f94:	20000070 	.word	0x20000070
 8000f98:	20000084 	.word	0x20000084

08000f9c <FEB_TACH_IIR>:

static void FEB_TACH_IIR(uint16_t *data_in, uint16_t *data_out, uint32_t *filters, \
											uint8_t length, bool *filter_initialized) {
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	001a      	movs	r2, r3
 8000faa:	1cfb      	adds	r3, r7, #3
 8000fac:	701a      	strb	r2, [r3, #0]
	uint16_t *dest = data_out;
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	61bb      	str	r3, [r7, #24]
	uint32_t *dest_filters = filters;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	617b      	str	r3, [r7, #20]

	for ( uint8_t i = 0; i < length; i++ ) {
 8000fb6:	231f      	movs	r3, #31
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e05d      	b.n	800107c <FEB_TACH_IIR+0xe0>

		if ( !filter_initialized[i] ) {
 8000fc0:	211f      	movs	r1, #31
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fc8:	18d3      	adds	r3, r2, r3
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4053      	eors	r3, r2
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d021      	beq.n	800101a <FEB_TACH_IIR+0x7e>
			dest_filters[i] = data_in[i] << ADC_FILTER_EXPONENT;
 8000fd6:	0008      	movs	r0, r1
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	18d3      	adds	r3, r2, r3
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	183b      	adds	r3, r7, r0
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	18d3      	adds	r3, r2, r3
 8000ff0:	008a      	lsls	r2, r1, #2
 8000ff2:	601a      	str	r2, [r3, #0]
			dest[i] = data_in[i];
 8000ff4:	183b      	adds	r3, r7, r0
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	18d2      	adds	r2, r2, r3
 8000ffe:	183b      	adds	r3, r7, r0
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	69b9      	ldr	r1, [r7, #24]
 8001006:	18cb      	adds	r3, r1, r3
 8001008:	8812      	ldrh	r2, [r2, #0]
 800100a:	801a      	strh	r2, [r3, #0]
			filter_initialized[i] = true;
 800100c:	183b      	adds	r3, r7, r0
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001012:	18d3      	adds	r3, r2, r3
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	e02a      	b.n	8001070 <FEB_TACH_IIR+0xd4>
		}

		else {
			dest_filters[i] += data_in[i] - (dest_filters[i] >>  ADC_FILTER_EXPONENT);
 800101a:	241f      	movs	r4, #31
 800101c:	193b      	adds	r3, r7, r4
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	18d3      	adds	r3, r2, r3
 8001026:	6819      	ldr	r1, [r3, #0]
 8001028:	193b      	adds	r3, r7, r4
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	18d3      	adds	r3, r2, r3
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	0018      	movs	r0, r3
 8001036:	193b      	adds	r3, r7, r4
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	18d3      	adds	r3, r2, r3
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	1ac2      	subs	r2, r0, r3
 8001046:	193b      	adds	r3, r7, r4
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	6978      	ldr	r0, [r7, #20]
 800104e:	18c3      	adds	r3, r0, r3
 8001050:	188a      	adds	r2, r1, r2
 8001052:	601a      	str	r2, [r3, #0]
			dest[i] = dest_filters[i] >> ADC_FILTER_EXPONENT;
 8001054:	193b      	adds	r3, r7, r4
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	18d3      	adds	r3, r2, r3
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0899      	lsrs	r1, r3, #2
 8001062:	193b      	adds	r3, r7, r4
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	18d3      	adds	r3, r2, r3
 800106c:	b28a      	uxth	r2, r1
 800106e:	801a      	strh	r2, [r3, #0]
	for ( uint8_t i = 0; i < length; i++ ) {
 8001070:	211f      	movs	r1, #31
 8001072:	187b      	adds	r3, r7, r1
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	187b      	adds	r3, r7, r1
 8001078:	3201      	adds	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	231f      	movs	r3, #31
 800107e:	18fa      	adds	r2, r7, r3
 8001080:	1cfb      	adds	r3, r7, #3
 8001082:	7812      	ldrb	r2, [r2, #0]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d39a      	bcc.n	8000fc0 <FEB_TACH_IIR+0x24>
		}
	}
}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b009      	add	sp, #36	@ 0x24
 8001092:	bd90      	pop	{r4, r7, pc}

08001094 <FEB_Init>:

extern UART_HandleTypeDef huart2;

extern uint16_t frequency[NUM_FANS];

void FEB_Init(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	FEB_CAN_Init();
 8001098:	f7ff fdca 	bl	8000c30 <FEB_CAN_Init>
	FEB_Fan_Init();
 800109c:	f7ff fe34 	bl	8000d08 <FEB_Fan_Init>
}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <FEB_Main_Loop>:

void FEB_Main_Loop(void) {
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
	// Fan speed set by CAN receive interrupt

//	FEB_CAN_Transmit(&hcan, (uint8_t *)frequency);

	HAL_Delay(1000);
 80010aa:	23fa      	movs	r3, #250	@ 0xfa
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	0018      	movs	r0, r3
 80010b0:	f000 ff56 	bl	8001f60 <HAL_Delay>
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010be:	f000 feeb 	bl	8001e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c2:	f000 f817 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	f000 fb85 	bl	80017d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010ca:	f000 f88d 	bl	80011e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010ce:	f000 f955 	bl	800137c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80010d2:	f000 fb4f 	bl	8001774 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80010d6:	f000 f9d7 	bl	8001488 <MX_TIM3_Init>
  MX_CAN_Init();
 80010da:	f000 f84f 	bl	800117c <MX_CAN_Init>
  MX_TIM14_Init();
 80010de:	f000 fa5d 	bl	800159c <MX_TIM14_Init>
  MX_TIM16_Init();
 80010e2:	f000 faa7 	bl	8001634 <MX_TIM16_Init>
  MX_TIM17_Init();
 80010e6:	f000 faf5 	bl	80016d4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  FEB_Init();
 80010ea:	f7ff ffd3 	bl	8001094 <FEB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  FEB_Main_Loop();
 80010ee:	f7ff ffda 	bl	80010a6 <FEB_Main_Loop>
 80010f2:	e7fc      	b.n	80010ee <main+0x34>

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b093      	sub	sp, #76	@ 0x4c
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	2414      	movs	r4, #20
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	0018      	movs	r0, r3
 8001100:	2334      	movs	r3, #52	@ 0x34
 8001102:	001a      	movs	r2, r3
 8001104:	2100      	movs	r1, #0
 8001106:	f004 fbfd 	bl	8005904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	0018      	movs	r0, r3
 800110e:	2310      	movs	r3, #16
 8001110:	001a      	movs	r2, r3
 8001112:	2100      	movs	r1, #0
 8001114:	f004 fbf6 	bl	8005904 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001118:	193b      	adds	r3, r7, r4
 800111a:	2220      	movs	r2, #32
 800111c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800111e:	193b      	adds	r3, r7, r4
 8001120:	2201      	movs	r2, #1
 8001122:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001124:	193b      	adds	r3, r7, r4
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112a:	193b      	adds	r3, r7, r4
 800112c:	0018      	movs	r0, r3
 800112e:	f001 fc5f 	bl	80029f0 <HAL_RCC_OscConfig>
 8001132:	1e03      	subs	r3, r0, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001136:	f000 fb7f 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2203      	movs	r2, #3
 8001144:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2101      	movs	r1, #1
 8001156:	0018      	movs	r0, r3
 8001158:	f001 ffd0 	bl	80030fc <HAL_RCC_ClockConfig>
 800115c:	1e03      	subs	r3, r0, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001160:	f000 fb6a 	bl	8001838 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	04db      	lsls	r3, r3, #19
 8001168:	2200      	movs	r2, #0
 800116a:	0019      	movs	r1, r3
 800116c:	2000      	movs	r0, #0
 800116e:	f002 f89f 	bl	80032b0 <HAL_RCC_MCOConfig>
}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b013      	add	sp, #76	@ 0x4c
 8001178:	bd90      	pop	{r4, r7, pc}
	...

0800117c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <MX_CAN_Init+0x64>)
 8001182:	4a18      	ldr	r2, [pc, #96]	@ (80011e4 <MX_CAN_Init+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_CAN_Init+0x64>)
 8001188:	2210      	movs	r2, #16
 800118a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_CAN_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001192:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <MX_CAN_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_CAN_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <MX_CAN_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_CAN_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <MX_CAN_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <MX_CAN_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <MX_CAN_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <MX_CAN_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80011c2:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <MX_CAN_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <MX_CAN_Init+0x64>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f000 feec 	bl	8001fa8 <HAL_CAN_Init>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d001      	beq.n	80011d8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80011d4:	f000 fb30 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	200000bc 	.word	0x200000bc
 80011e4:	40006400 	.word	0x40006400

080011e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b096      	sub	sp, #88	@ 0x58
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	2348      	movs	r3, #72	@ 0x48
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	0018      	movs	r0, r3
 80011f4:	2310      	movs	r3, #16
 80011f6:	001a      	movs	r2, r3
 80011f8:	2100      	movs	r1, #0
 80011fa:	f004 fb83 	bl	8005904 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	2340      	movs	r3, #64	@ 0x40
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	0018      	movs	r0, r3
 8001204:	2308      	movs	r3, #8
 8001206:	001a      	movs	r2, r3
 8001208:	2100      	movs	r1, #0
 800120a:	f004 fb7b 	bl	8005904 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120e:	2324      	movs	r3, #36	@ 0x24
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	0018      	movs	r0, r3
 8001214:	231c      	movs	r3, #28
 8001216:	001a      	movs	r2, r3
 8001218:	2100      	movs	r1, #0
 800121a:	f004 fb73 	bl	8005904 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	0018      	movs	r0, r3
 8001222:	2320      	movs	r3, #32
 8001224:	001a      	movs	r2, r3
 8001226:	2100      	movs	r1, #0
 8001228:	f004 fb6c 	bl	8005904 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800122c:	4b51      	ldr	r3, [pc, #324]	@ (8001374 <MX_TIM1_Init+0x18c>)
 800122e:	4a52      	ldr	r2, [pc, #328]	@ (8001378 <MX_TIM1_Init+0x190>)
 8001230:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001232:	4b50      	ldr	r3, [pc, #320]	@ (8001374 <MX_TIM1_Init+0x18c>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b4e      	ldr	r3, [pc, #312]	@ (8001374 <MX_TIM1_Init+0x18c>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40*48;
 800123e:	4b4d      	ldr	r3, [pc, #308]	@ (8001374 <MX_TIM1_Init+0x18c>)
 8001240:	22f0      	movs	r2, #240	@ 0xf0
 8001242:	00d2      	lsls	r2, r2, #3
 8001244:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b4b      	ldr	r3, [pc, #300]	@ (8001374 <MX_TIM1_Init+0x18c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800124c:	4b49      	ldr	r3, [pc, #292]	@ (8001374 <MX_TIM1_Init+0x18c>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001252:	4b48      	ldr	r3, [pc, #288]	@ (8001374 <MX_TIM1_Init+0x18c>)
 8001254:	2280      	movs	r2, #128	@ 0x80
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001258:	4b46      	ldr	r3, [pc, #280]	@ (8001374 <MX_TIM1_Init+0x18c>)
 800125a:	0018      	movs	r0, r3
 800125c:	f002 f8fa 	bl	8003454 <HAL_TIM_Base_Init>
 8001260:	1e03      	subs	r3, r0, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001264:	f000 fae8 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001268:	2148      	movs	r1, #72	@ 0x48
 800126a:	187b      	adds	r3, r7, r1
 800126c:	2280      	movs	r2, #128	@ 0x80
 800126e:	0152      	lsls	r2, r2, #5
 8001270:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001272:	187a      	adds	r2, r7, r1
 8001274:	4b3f      	ldr	r3, [pc, #252]	@ (8001374 <MX_TIM1_Init+0x18c>)
 8001276:	0011      	movs	r1, r2
 8001278:	0018      	movs	r0, r3
 800127a:	f002 fe1f 	bl	8003ebc <HAL_TIM_ConfigClockSource>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001282:	f000 fad9 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001286:	4b3b      	ldr	r3, [pc, #236]	@ (8001374 <MX_TIM1_Init+0x18c>)
 8001288:	0018      	movs	r0, r3
 800128a:	f002 f933 	bl	80034f4 <HAL_TIM_PWM_Init>
 800128e:	1e03      	subs	r3, r0, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001292:	f000 fad1 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2140      	movs	r1, #64	@ 0x40
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a4:	187a      	adds	r2, r7, r1
 80012a6:	4b33      	ldr	r3, [pc, #204]	@ (8001374 <MX_TIM1_Init+0x18c>)
 80012a8:	0011      	movs	r1, r2
 80012aa:	0018      	movs	r0, r3
 80012ac:	f003 fb60 	bl	8004970 <HAL_TIMEx_MasterConfigSynchronization>
 80012b0:	1e03      	subs	r3, r0, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80012b4:	f000 fac0 	bl	8001838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b8:	2124      	movs	r1, #36	@ 0x24
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2260      	movs	r2, #96	@ 0x60
 80012be:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2219      	movs	r2, #25
 80012c4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e4:	1879      	adds	r1, r7, r1
 80012e6:	4b23      	ldr	r3, [pc, #140]	@ (8001374 <MX_TIM1_Init+0x18c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	0018      	movs	r0, r3
 80012ec:	f002 fd20 	bl	8003d30 <HAL_TIM_PWM_ConfigChannel>
 80012f0:	1e03      	subs	r3, r0, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80012f4:	f000 faa0 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f8:	2324      	movs	r3, #36	@ 0x24
 80012fa:	18f9      	adds	r1, r7, r3
 80012fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <MX_TIM1_Init+0x18c>)
 80012fe:	2204      	movs	r2, #4
 8001300:	0018      	movs	r0, r3
 8001302:	f002 fd15 	bl	8003d30 <HAL_TIM_PWM_ConfigChannel>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d001      	beq.n	800130e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800130a:	f000 fa95 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800130e:	2324      	movs	r3, #36	@ 0x24
 8001310:	18f9      	adds	r1, r7, r3
 8001312:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <MX_TIM1_Init+0x18c>)
 8001314:	2208      	movs	r2, #8
 8001316:	0018      	movs	r0, r3
 8001318:	f002 fd0a 	bl	8003d30 <HAL_TIM_PWM_ConfigChannel>
 800131c:	1e03      	subs	r3, r0, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001320:	f000 fa8a 	bl	8001838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2280      	movs	r2, #128	@ 0x80
 8001346:	0192      	lsls	r2, r2, #6
 8001348:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001350:	1d3a      	adds	r2, r7, #4
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <MX_TIM1_Init+0x18c>)
 8001354:	0011      	movs	r1, r2
 8001356:	0018      	movs	r0, r3
 8001358:	f003 fb62 	bl	8004a20 <HAL_TIMEx_ConfigBreakDeadTime>
 800135c:	1e03      	subs	r3, r0, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8001360:	f000 fa6a 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001364:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <MX_TIM1_Init+0x18c>)
 8001366:	0018      	movs	r0, r3
 8001368:	f000 fc2a 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b016      	add	sp, #88	@ 0x58
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200000e4 	.word	0x200000e4
 8001378:	40012c00 	.word	0x40012c00

0800137c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	2318      	movs	r3, #24
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	0018      	movs	r0, r3
 8001388:	2310      	movs	r3, #16
 800138a:	001a      	movs	r2, r3
 800138c:	2100      	movs	r1, #0
 800138e:	f004 fab9 	bl	8005904 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001392:	2310      	movs	r3, #16
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	0018      	movs	r0, r3
 8001398:	2308      	movs	r3, #8
 800139a:	001a      	movs	r2, r3
 800139c:	2100      	movs	r1, #0
 800139e:	f004 fab1 	bl	8005904 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013a2:	003b      	movs	r3, r7
 80013a4:	0018      	movs	r0, r3
 80013a6:	2310      	movs	r3, #16
 80013a8:	001a      	movs	r2, r3
 80013aa:	2100      	movs	r1, #0
 80013ac:	f004 faaa 	bl	8005904 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b0:	4b33      	ldr	r3, [pc, #204]	@ (8001480 <MX_TIM2_Init+0x104>)
 80013b2:	2280      	movs	r2, #128	@ 0x80
 80013b4:	05d2      	lsls	r2, r2, #23
 80013b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013b8:	4b31      	ldr	r3, [pc, #196]	@ (8001480 <MX_TIM2_Init+0x104>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b30      	ldr	r3, [pc, #192]	@ (8001480 <MX_TIM2_Init+0x104>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 294967295;
 80013c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001480 <MX_TIM2_Init+0x104>)
 80013c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001484 <MX_TIM2_Init+0x108>)
 80013c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <MX_TIM2_Init+0x104>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001480 <MX_TIM2_Init+0x104>)
 80013d2:	2280      	movs	r2, #128	@ 0x80
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <MX_TIM2_Init+0x104>)
 80013d8:	0018      	movs	r0, r3
 80013da:	f002 f83b 	bl	8003454 <HAL_TIM_Base_Init>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80013e2:	f000 fa29 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e6:	2118      	movs	r1, #24
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	2280      	movs	r2, #128	@ 0x80
 80013ec:	0152      	lsls	r2, r2, #5
 80013ee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013f0:	187a      	adds	r2, r7, r1
 80013f2:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <MX_TIM2_Init+0x104>)
 80013f4:	0011      	movs	r1, r2
 80013f6:	0018      	movs	r0, r3
 80013f8:	f002 fd60 	bl	8003ebc <HAL_TIM_ConfigClockSource>
 80013fc:	1e03      	subs	r3, r0, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001400:	f000 fa1a 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001404:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <MX_TIM2_Init+0x104>)
 8001406:	0018      	movs	r0, r3
 8001408:	f002 f978 	bl	80036fc <HAL_TIM_IC_Init>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001410:	f000 fa12 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2110      	movs	r1, #16
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	187b      	adds	r3, r7, r1
 800141e:	2200      	movs	r2, #0
 8001420:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001422:	187a      	adds	r2, r7, r1
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_TIM2_Init+0x104>)
 8001426:	0011      	movs	r1, r2
 8001428:	0018      	movs	r0, r3
 800142a:	f003 faa1 	bl	8004970 <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	1e03      	subs	r3, r0, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001432:	f000 fa01 	bl	8001838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001436:	003b      	movs	r3, r7
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800143c:	003b      	movs	r3, r7
 800143e:	2201      	movs	r2, #1
 8001440:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001442:	003b      	movs	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001448:	003b      	movs	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800144e:	0039      	movs	r1, r7
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <MX_TIM2_Init+0x104>)
 8001452:	2200      	movs	r2, #0
 8001454:	0018      	movs	r0, r3
 8001456:	f002 fbc7 	bl	8003be8 <HAL_TIM_IC_ConfigChannel>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800145e:	f000 f9eb 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001462:	0039      	movs	r1, r7
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MX_TIM2_Init+0x104>)
 8001466:	2204      	movs	r2, #4
 8001468:	0018      	movs	r0, r3
 800146a:	f002 fbbd 	bl	8003be8 <HAL_TIM_IC_ConfigChannel>
 800146e:	1e03      	subs	r3, r0, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8001472:	f000 f9e1 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b00a      	add	sp, #40	@ 0x28
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	2000012c 	.word	0x2000012c
 8001484:	1194d7ff 	.word	0x1194d7ff

08001488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	@ 0x38
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	2328      	movs	r3, #40	@ 0x28
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	0018      	movs	r0, r3
 8001494:	2310      	movs	r3, #16
 8001496:	001a      	movs	r2, r3
 8001498:	2100      	movs	r1, #0
 800149a:	f004 fa33 	bl	8005904 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149e:	2320      	movs	r3, #32
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	0018      	movs	r0, r3
 80014a4:	2308      	movs	r3, #8
 80014a6:	001a      	movs	r2, r3
 80014a8:	2100      	movs	r1, #0
 80014aa:	f004 fa2b 	bl	8005904 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	0018      	movs	r0, r3
 80014b2:	231c      	movs	r3, #28
 80014b4:	001a      	movs	r2, r3
 80014b6:	2100      	movs	r1, #0
 80014b8:	f004 fa24 	bl	8005904 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014bc:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <MX_TIM3_Init+0x10c>)
 80014be:	4a36      	ldr	r2, [pc, #216]	@ (8001598 <MX_TIM3_Init+0x110>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014c2:	4b34      	ldr	r3, [pc, #208]	@ (8001594 <MX_TIM3_Init+0x10c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b32      	ldr	r3, [pc, #200]	@ (8001594 <MX_TIM3_Init+0x10c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40*48;
 80014ce:	4b31      	ldr	r3, [pc, #196]	@ (8001594 <MX_TIM3_Init+0x10c>)
 80014d0:	22f0      	movs	r2, #240	@ 0xf0
 80014d2:	00d2      	lsls	r2, r2, #3
 80014d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001594 <MX_TIM3_Init+0x10c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001594 <MX_TIM3_Init+0x10c>)
 80014de:	2280      	movs	r2, #128	@ 0x80
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <MX_TIM3_Init+0x10c>)
 80014e4:	0018      	movs	r0, r3
 80014e6:	f001 ffb5 	bl	8003454 <HAL_TIM_Base_Init>
 80014ea:	1e03      	subs	r3, r0, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80014ee:	f000 f9a3 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f2:	2128      	movs	r1, #40	@ 0x28
 80014f4:	187b      	adds	r3, r7, r1
 80014f6:	2280      	movs	r2, #128	@ 0x80
 80014f8:	0152      	lsls	r2, r2, #5
 80014fa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014fc:	187a      	adds	r2, r7, r1
 80014fe:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <MX_TIM3_Init+0x10c>)
 8001500:	0011      	movs	r1, r2
 8001502:	0018      	movs	r0, r3
 8001504:	f002 fcda 	bl	8003ebc <HAL_TIM_ConfigClockSource>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800150c:	f000 f994 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001510:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <MX_TIM3_Init+0x10c>)
 8001512:	0018      	movs	r0, r3
 8001514:	f001 ffee 	bl	80034f4 <HAL_TIM_PWM_Init>
 8001518:	1e03      	subs	r3, r0, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800151c:	f000 f98c 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2120      	movs	r1, #32
 8001522:	187b      	adds	r3, r7, r1
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800152e:	187a      	adds	r2, r7, r1
 8001530:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <MX_TIM3_Init+0x10c>)
 8001532:	0011      	movs	r1, r2
 8001534:	0018      	movs	r0, r3
 8001536:	f003 fa1b 	bl	8004970 <HAL_TIMEx_MasterConfigSynchronization>
 800153a:	1e03      	subs	r3, r0, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800153e:	f000 f97b 	bl	8001838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2260      	movs	r2, #96	@ 0x60
 8001546:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2219      	movs	r2, #25
 800154c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155a:	1d39      	adds	r1, r7, #4
 800155c:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <MX_TIM3_Init+0x10c>)
 800155e:	2200      	movs	r2, #0
 8001560:	0018      	movs	r0, r3
 8001562:	f002 fbe5 	bl	8003d30 <HAL_TIM_PWM_ConfigChannel>
 8001566:	1e03      	subs	r3, r0, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800156a:	f000 f965 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800156e:	1d39      	adds	r1, r7, #4
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <MX_TIM3_Init+0x10c>)
 8001572:	2204      	movs	r2, #4
 8001574:	0018      	movs	r0, r3
 8001576:	f002 fbdb 	bl	8003d30 <HAL_TIM_PWM_ConfigChannel>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 800157e:	f000 f95b 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001582:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <MX_TIM3_Init+0x10c>)
 8001584:	0018      	movs	r0, r3
 8001586:	f000 fb1b 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b00e      	add	sp, #56	@ 0x38
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	20000174 	.word	0x20000174
 8001598:	40000400 	.word	0x40000400

0800159c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80015a2:	003b      	movs	r3, r7
 80015a4:	0018      	movs	r0, r3
 80015a6:	2310      	movs	r3, #16
 80015a8:	001a      	movs	r2, r3
 80015aa:	2100      	movs	r1, #0
 80015ac:	f004 f9aa 	bl	8005904 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <MX_TIM14_Init+0x8c>)
 80015b2:	4a1e      	ldr	r2, [pc, #120]	@ (800162c <MX_TIM14_Init+0x90>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_TIM14_Init+0x8c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MX_TIM14_Init+0x8c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <MX_TIM14_Init+0x8c>)
 80015c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001630 <MX_TIM14_Init+0x94>)
 80015c6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_TIM14_Init+0x8c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_TIM14_Init+0x8c>)
 80015d0:	2280      	movs	r2, #128	@ 0x80
 80015d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_TIM14_Init+0x8c>)
 80015d6:	0018      	movs	r0, r3
 80015d8:	f001 ff3c 	bl	8003454 <HAL_TIM_Base_Init>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80015e0:	f000 f92a 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_TIM14_Init+0x8c>)
 80015e6:	0018      	movs	r0, r3
 80015e8:	f002 f888 	bl	80036fc <HAL_TIM_IC_Init>
 80015ec:	1e03      	subs	r3, r0, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80015f0:	f000 f922 	bl	8001838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015f4:	003b      	movs	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015fa:	003b      	movs	r3, r7
 80015fc:	2201      	movs	r2, #1
 80015fe:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001600:	003b      	movs	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001606:	003b      	movs	r3, r7
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800160c:	0039      	movs	r1, r7
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_TIM14_Init+0x8c>)
 8001610:	2200      	movs	r2, #0
 8001612:	0018      	movs	r0, r3
 8001614:	f002 fae8 	bl	8003be8 <HAL_TIM_IC_ConfigChannel>
 8001618:	1e03      	subs	r3, r0, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800161c:	f000 f90c 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001620:	46c0      	nop			@ (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b004      	add	sp, #16
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200001bc 	.word	0x200001bc
 800162c:	40002000 	.word	0x40002000
 8001630:	0000ffff 	.word	0x0000ffff

08001634 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800163a:	003b      	movs	r3, r7
 800163c:	0018      	movs	r0, r3
 800163e:	2310      	movs	r3, #16
 8001640:	001a      	movs	r2, r3
 8001642:	2100      	movs	r1, #0
 8001644:	f004 f95e 	bl	8005904 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001648:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <MX_TIM16_Init+0x94>)
 800164a:	4a20      	ldr	r2, [pc, #128]	@ (80016cc <MX_TIM16_Init+0x98>)
 800164c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <MX_TIM16_Init+0x94>)
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <MX_TIM16_Init+0x94>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800165a:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <MX_TIM16_Init+0x94>)
 800165c:	4a1c      	ldr	r2, [pc, #112]	@ (80016d0 <MX_TIM16_Init+0x9c>)
 800165e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <MX_TIM16_Init+0x94>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <MX_TIM16_Init+0x94>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166c:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <MX_TIM16_Init+0x94>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <MX_TIM16_Init+0x94>)
 8001674:	0018      	movs	r0, r3
 8001676:	f001 feed 	bl	8003454 <HAL_TIM_Base_Init>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 800167e:	f000 f8db 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_TIM16_Init+0x94>)
 8001684:	0018      	movs	r0, r3
 8001686:	f002 f839 	bl	80036fc <HAL_TIM_IC_Init>
 800168a:	1e03      	subs	r3, r0, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800168e:	f000 f8d3 	bl	8001838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001692:	003b      	movs	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001698:	003b      	movs	r3, r7
 800169a:	2201      	movs	r2, #1
 800169c:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800169e:	003b      	movs	r3, r7
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80016a4:	003b      	movs	r3, r7
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016aa:	0039      	movs	r1, r7
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_TIM16_Init+0x94>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	0018      	movs	r0, r3
 80016b2:	f002 fa99 	bl	8003be8 <HAL_TIM_IC_ConfigChannel>
 80016b6:	1e03      	subs	r3, r0, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM16_Init+0x8a>
  {
    Error_Handler();
 80016ba:	f000 f8bd 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b004      	add	sp, #16
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	20000204 	.word	0x20000204
 80016cc:	40014400 	.word	0x40014400
 80016d0:	0000ffff 	.word	0x0000ffff

080016d4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80016da:	003b      	movs	r3, r7
 80016dc:	0018      	movs	r0, r3
 80016de:	2310      	movs	r3, #16
 80016e0:	001a      	movs	r2, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	f004 f90e 	bl	8005904 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <MX_TIM17_Init+0x94>)
 80016ea:	4a20      	ldr	r2, [pc, #128]	@ (800176c <MX_TIM17_Init+0x98>)
 80016ec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <MX_TIM17_Init+0x94>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <MX_TIM17_Init+0x94>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <MX_TIM17_Init+0x94>)
 80016fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001770 <MX_TIM17_Init+0x9c>)
 80016fe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001700:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <MX_TIM17_Init+0x94>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001706:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <MX_TIM17_Init+0x94>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <MX_TIM17_Init+0x94>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <MX_TIM17_Init+0x94>)
 8001714:	0018      	movs	r0, r3
 8001716:	f001 fe9d 	bl	8003454 <HAL_TIM_Base_Init>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 800171e:	f000 f88b 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <MX_TIM17_Init+0x94>)
 8001724:	0018      	movs	r0, r3
 8001726:	f001 ffe9 	bl	80036fc <HAL_TIM_IC_Init>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800172e:	f000 f883 	bl	8001838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001732:	003b      	movs	r3, r7
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001738:	003b      	movs	r3, r7
 800173a:	2201      	movs	r2, #1
 800173c:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800173e:	003b      	movs	r3, r7
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001744:	003b      	movs	r3, r7
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800174a:	0039      	movs	r1, r7
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <MX_TIM17_Init+0x94>)
 800174e:	2200      	movs	r2, #0
 8001750:	0018      	movs	r0, r3
 8001752:	f002 fa49 	bl	8003be8 <HAL_TIM_IC_ConfigChannel>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d001      	beq.n	800175e <MX_TIM17_Init+0x8a>
  {
    Error_Handler();
 800175a:	f000 f86d 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	2000024c 	.word	0x2000024c
 800176c:	40014800 	.word	0x40014800
 8001770:	0000ffff 	.word	0x0000ffff

08001774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <MX_USART2_UART_Init+0x58>)
 800177a:	4a15      	ldr	r2, [pc, #84]	@ (80017d0 <MX_USART2_UART_Init+0x5c>)
 800177c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MX_USART2_UART_Init+0x58>)
 8001780:	22e1      	movs	r2, #225	@ 0xe1
 8001782:	0252      	lsls	r2, r2, #9
 8001784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_USART2_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <MX_USART2_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_USART2_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_USART2_UART_Init+0x58>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <MX_USART2_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_USART2_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <MX_USART2_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_USART2_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <MX_USART2_UART_Init+0x58>)
 80017b8:	0018      	movs	r0, r3
 80017ba:	f003 f99f 	bl	8004afc <HAL_UART_Init>
 80017be:	1e03      	subs	r3, r0, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017c2:	f000 f839 	bl	8001838 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000294 	.word	0x20000294
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <MX_GPIO_Init+0x48>)
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <MX_GPIO_Init+0x48>)
 80017e0:	2180      	movs	r1, #128	@ 0x80
 80017e2:	0289      	lsls	r1, r1, #10
 80017e4:	430a      	orrs	r2, r1
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <MX_GPIO_Init+0x48>)
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	029b      	lsls	r3, r3, #10
 80017f0:	4013      	ands	r3, r2
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <MX_GPIO_Init+0x48>)
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <MX_GPIO_Init+0x48>)
 80017fc:	2180      	movs	r1, #128	@ 0x80
 80017fe:	02c9      	lsls	r1, r1, #11
 8001800:	430a      	orrs	r2, r1
 8001802:	615a      	str	r2, [r3, #20]
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <MX_GPIO_Init+0x48>)
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	02db      	lsls	r3, r3, #11
 800180c:	4013      	ands	r3, r2
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b002      	add	sp, #8
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	40021000 	.word	0x40021000

08001820 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	FEB_Fan_TACH_Callback(htim);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff fb06 	bl	8000e3c <FEB_Fan_TACH_Callback>
}
 8001830:	46c0      	nop			@ (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	b002      	add	sp, #8
 8001836:	bd80      	pop	{r7, pc}

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	e7fd      	b.n	8001840 <Error_Handler+0x8>

08001844 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <HAL_MspInit+0x44>)
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <HAL_MspInit+0x44>)
 8001850:	2101      	movs	r1, #1
 8001852:	430a      	orrs	r2, r1
 8001854:	619a      	str	r2, [r3, #24]
 8001856:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <HAL_MspInit+0x44>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2201      	movs	r2, #1
 800185c:	4013      	ands	r3, r2
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <HAL_MspInit+0x44>)
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <HAL_MspInit+0x44>)
 8001868:	2180      	movs	r1, #128	@ 0x80
 800186a:	0549      	lsls	r1, r1, #21
 800186c:	430a      	orrs	r2, r1
 800186e:	61da      	str	r2, [r3, #28]
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <HAL_MspInit+0x44>)
 8001872:	69da      	ldr	r2, [r3, #28]
 8001874:	2380      	movs	r3, #128	@ 0x80
 8001876:	055b      	lsls	r3, r3, #21
 8001878:	4013      	ands	r3, r2
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b002      	add	sp, #8
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	40021000 	.word	0x40021000

0800188c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b08b      	sub	sp, #44	@ 0x2c
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	2414      	movs	r4, #20
 8001896:	193b      	adds	r3, r7, r4
 8001898:	0018      	movs	r0, r3
 800189a:	2314      	movs	r3, #20
 800189c:	001a      	movs	r2, r3
 800189e:	2100      	movs	r1, #0
 80018a0:	f004 f830 	bl	8005904 <memset>
  if(hcan->Instance==CAN)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001920 <HAL_CAN_MspInit+0x94>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d133      	bne.n	8001916 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <HAL_CAN_MspInit+0x98>)
 80018b0:	69da      	ldr	r2, [r3, #28]
 80018b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <HAL_CAN_MspInit+0x98>)
 80018b4:	2180      	movs	r1, #128	@ 0x80
 80018b6:	0489      	lsls	r1, r1, #18
 80018b8:	430a      	orrs	r2, r1
 80018ba:	61da      	str	r2, [r3, #28]
 80018bc:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <HAL_CAN_MspInit+0x98>)
 80018be:	69da      	ldr	r2, [r3, #28]
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	049b      	lsls	r3, r3, #18
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <HAL_CAN_MspInit+0x98>)
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_CAN_MspInit+0x98>)
 80018d0:	2180      	movs	r1, #128	@ 0x80
 80018d2:	0289      	lsls	r1, r1, #10
 80018d4:	430a      	orrs	r2, r1
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_CAN_MspInit+0x98>)
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	22c0      	movs	r2, #192	@ 0xc0
 80018ea:	0152      	lsls	r2, r2, #5
 80018ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	0021      	movs	r1, r4
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2202      	movs	r2, #2
 80018f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2203      	movs	r2, #3
 8001900:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001902:	187b      	adds	r3, r7, r1
 8001904:	2204      	movs	r2, #4
 8001906:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	187a      	adds	r2, r7, r1
 800190a:	2390      	movs	r3, #144	@ 0x90
 800190c:	05db      	lsls	r3, r3, #23
 800190e:	0011      	movs	r1, r2
 8001910:	0018      	movs	r0, r3
 8001912:	f000 ff05 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b00b      	add	sp, #44	@ 0x2c
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	40006400 	.word	0x40006400
 8001924:	40021000 	.word	0x40021000

08001928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b092      	sub	sp, #72	@ 0x48
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	2334      	movs	r3, #52	@ 0x34
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	0018      	movs	r0, r3
 8001936:	2314      	movs	r3, #20
 8001938:	001a      	movs	r2, r3
 800193a:	2100      	movs	r1, #0
 800193c:	f003 ffe2 	bl	8005904 <memset>
  if(htim_base->Instance==TIM1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a98      	ldr	r2, [pc, #608]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x280>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d11e      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194a:	4b98      	ldr	r3, [pc, #608]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 800194c:	699a      	ldr	r2, [r3, #24]
 800194e:	4b97      	ldr	r3, [pc, #604]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001950:	2180      	movs	r1, #128	@ 0x80
 8001952:	0109      	lsls	r1, r1, #4
 8001954:	430a      	orrs	r2, r1
 8001956:	619a      	str	r2, [r3, #24]
 8001958:	4b94      	ldr	r3, [pc, #592]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	4013      	ands	r3, r2
 8001962:	633b      	str	r3, [r7, #48]	@ 0x30
 8001964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	200d      	movs	r0, #13
 800196c:	f000 fe28 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001970:	200d      	movs	r0, #13
 8001972:	f000 fe3a 	bl	80025ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	200e      	movs	r0, #14
 800197c:	f000 fe20 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001980:	200e      	movs	r0, #14
 8001982:	f000 fe32 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001986:	e10b      	b.n	8001ba0 <HAL_TIM_Base_MspInit+0x278>
  else if(htim_base->Instance==TIM2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	2380      	movs	r3, #128	@ 0x80
 800198e:	05db      	lsls	r3, r3, #23
 8001990:	429a      	cmp	r2, r3
 8001992:	d139      	bne.n	8001a08 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001994:	4b85      	ldr	r3, [pc, #532]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001996:	69da      	ldr	r2, [r3, #28]
 8001998:	4b84      	ldr	r3, [pc, #528]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 800199a:	2101      	movs	r1, #1
 800199c:	430a      	orrs	r2, r1
 800199e:	61da      	str	r2, [r3, #28]
 80019a0:	4b82      	ldr	r3, [pc, #520]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4013      	ands	r3, r2
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b7f      	ldr	r3, [pc, #508]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	4b7e      	ldr	r3, [pc, #504]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 80019b2:	2180      	movs	r1, #128	@ 0x80
 80019b4:	0289      	lsls	r1, r1, #10
 80019b6:	430a      	orrs	r2, r1
 80019b8:	615a      	str	r2, [r3, #20]
 80019ba:	4b7c      	ldr	r3, [pc, #496]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	2380      	movs	r3, #128	@ 0x80
 80019c0:	029b      	lsls	r3, r3, #10
 80019c2:	4013      	ands	r3, r2
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = TACH4_Pin|TACH5_Pin;
 80019c8:	2134      	movs	r1, #52	@ 0x34
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2203      	movs	r2, #3
 80019ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	2202      	movs	r2, #2
 80019d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2202      	movs	r2, #2
 80019e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	187a      	adds	r2, r7, r1
 80019ea:	2390      	movs	r3, #144	@ 0x90
 80019ec:	05db      	lsls	r3, r3, #23
 80019ee:	0011      	movs	r1, r2
 80019f0:	0018      	movs	r0, r3
 80019f2:	f000 fe95 	bl	8002720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	200f      	movs	r0, #15
 80019fc:	f000 fde0 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a00:	200f      	movs	r0, #15
 8001a02:	f000 fdf2 	bl	80025ea <HAL_NVIC_EnableIRQ>
}
 8001a06:	e0cb      	b.n	8001ba0 <HAL_TIM_Base_MspInit+0x278>
  else if(htim_base->Instance==TIM3)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a68      	ldr	r2, [pc, #416]	@ (8001bb0 <HAL_TIM_Base_MspInit+0x288>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d114      	bne.n	8001a3c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a12:	4b66      	ldr	r3, [pc, #408]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001a14:	69da      	ldr	r2, [r3, #28]
 8001a16:	4b65      	ldr	r3, [pc, #404]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001a18:	2102      	movs	r1, #2
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	61da      	str	r2, [r3, #28]
 8001a1e:	4b63      	ldr	r3, [pc, #396]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	2202      	movs	r2, #2
 8001a24:	4013      	ands	r3, r2
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2010      	movs	r0, #16
 8001a30:	f000 fdc6 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a34:	2010      	movs	r0, #16
 8001a36:	f000 fdd8 	bl	80025ea <HAL_NVIC_EnableIRQ>
}
 8001a3a:	e0b1      	b.n	8001ba0 <HAL_TIM_Base_MspInit+0x278>
  else if(htim_base->Instance==TIM14)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a5c      	ldr	r2, [pc, #368]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x28c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d13b      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x196>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a46:	4b59      	ldr	r3, [pc, #356]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	4b58      	ldr	r3, [pc, #352]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001a4c:	2180      	movs	r1, #128	@ 0x80
 8001a4e:	0049      	lsls	r1, r1, #1
 8001a50:	430a      	orrs	r2, r1
 8001a52:	61da      	str	r2, [r3, #28]
 8001a54:	4b55      	ldr	r3, [pc, #340]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001a56:	69da      	ldr	r2, [r3, #28]
 8001a58:	2380      	movs	r3, #128	@ 0x80
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	623b      	str	r3, [r7, #32]
 8001a60:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b52      	ldr	r3, [pc, #328]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	4b51      	ldr	r3, [pc, #324]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001a68:	2180      	movs	r1, #128	@ 0x80
 8001a6a:	0289      	lsls	r1, r1, #10
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	4b4e      	ldr	r3, [pc, #312]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	2380      	movs	r3, #128	@ 0x80
 8001a76:	029b      	lsls	r3, r3, #10
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = TACH1_Pin;
 8001a7e:	2134      	movs	r1, #52	@ 0x34
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	2210      	movs	r2, #16
 8001a84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	2202      	movs	r2, #2
 8001a8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TACH1_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	187a      	adds	r2, r7, r1
 8001aa0:	2390      	movs	r3, #144	@ 0x90
 8001aa2:	05db      	lsls	r3, r3, #23
 8001aa4:	0011      	movs	r1, r2
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 fe3a 	bl	8002720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2013      	movs	r0, #19
 8001ab2:	f000 fd85 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001ab6:	2013      	movs	r0, #19
 8001ab8:	f000 fd97 	bl	80025ea <HAL_NVIC_EnableIRQ>
}
 8001abc:	e070      	b.n	8001ba0 <HAL_TIM_Base_MspInit+0x278>
  else if(htim_base->Instance==TIM16)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x290>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d133      	bne.n	8001b30 <HAL_TIM_Base_MspInit+0x208>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ac8:	4b38      	ldr	r3, [pc, #224]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001aca:	699a      	ldr	r2, [r3, #24]
 8001acc:	4b37      	ldr	r3, [pc, #220]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001ace:	2180      	movs	r1, #128	@ 0x80
 8001ad0:	0289      	lsls	r1, r1, #10
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	619a      	str	r2, [r3, #24]
 8001ad6:	4b35      	ldr	r3, [pc, #212]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001ad8:	699a      	ldr	r2, [r3, #24]
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	029b      	lsls	r3, r3, #10
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae4:	4b31      	ldr	r3, [pc, #196]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	4b30      	ldr	r3, [pc, #192]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001aea:	2180      	movs	r1, #128	@ 0x80
 8001aec:	0289      	lsls	r1, r1, #10
 8001aee:	430a      	orrs	r2, r1
 8001af0:	615a      	str	r2, [r3, #20]
 8001af2:	4b2e      	ldr	r3, [pc, #184]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	2380      	movs	r3, #128	@ 0x80
 8001af8:	029b      	lsls	r3, r3, #10
 8001afa:	4013      	ands	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TACH2_Pin;
 8001b00:	2134      	movs	r1, #52	@ 0x34
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2240      	movs	r2, #64	@ 0x40
 8001b06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	2205      	movs	r2, #5
 8001b1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TACH2_GPIO_Port, &GPIO_InitStruct);
 8001b20:	187a      	adds	r2, r7, r1
 8001b22:	2390      	movs	r3, #144	@ 0x90
 8001b24:	05db      	lsls	r3, r3, #23
 8001b26:	0011      	movs	r1, r2
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f000 fdf9 	bl	8002720 <HAL_GPIO_Init>
}
 8001b2e:	e037      	b.n	8001ba0 <HAL_TIM_Base_MspInit+0x278>
  else if(htim_base->Instance==TIM17)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a21      	ldr	r2, [pc, #132]	@ (8001bbc <HAL_TIM_Base_MspInit+0x294>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d132      	bne.n	8001ba0 <HAL_TIM_Base_MspInit+0x278>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001b3c:	699a      	ldr	r2, [r3, #24]
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001b40:	2180      	movs	r1, #128	@ 0x80
 8001b42:	02c9      	lsls	r1, r1, #11
 8001b44:	430a      	orrs	r2, r1
 8001b46:	619a      	str	r2, [r3, #24]
 8001b48:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	02db      	lsls	r3, r3, #11
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001b5c:	2180      	movs	r1, #128	@ 0x80
 8001b5e:	0289      	lsls	r1, r1, #10
 8001b60:	430a      	orrs	r2, r1
 8001b62:	615a      	str	r2, [r3, #20]
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_TIM_Base_MspInit+0x284>)
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	029b      	lsls	r3, r3, #10
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TACH3_Pin;
 8001b72:	2134      	movs	r1, #52	@ 0x34
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	2280      	movs	r2, #128	@ 0x80
 8001b78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	2205      	movs	r2, #5
 8001b90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TACH3_GPIO_Port, &GPIO_InitStruct);
 8001b92:	187a      	adds	r2, r7, r1
 8001b94:	2390      	movs	r3, #144	@ 0x90
 8001b96:	05db      	lsls	r3, r3, #23
 8001b98:	0011      	movs	r1, r2
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f000 fdc0 	bl	8002720 <HAL_GPIO_Init>
}
 8001ba0:	46c0      	nop			@ (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b012      	add	sp, #72	@ 0x48
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40012c00 	.word	0x40012c00
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40000400 	.word	0x40000400
 8001bb4:	40002000 	.word	0x40002000
 8001bb8:	40014400 	.word	0x40014400
 8001bbc:	40014800 	.word	0x40014800

08001bc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b08b      	sub	sp, #44	@ 0x2c
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	2414      	movs	r4, #20
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	0018      	movs	r0, r3
 8001bce:	2314      	movs	r3, #20
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	f003 fe96 	bl	8005904 <memset>
  if(htim->Instance==TIM1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8001c8c <HAL_TIM_MspPostInit+0xcc>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d126      	bne.n	8001c30 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c90 <HAL_TIM_MspPostInit+0xd0>)
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c90 <HAL_TIM_MspPostInit+0xd0>)
 8001be8:	2180      	movs	r1, #128	@ 0x80
 8001bea:	0289      	lsls	r1, r1, #10
 8001bec:	430a      	orrs	r2, r1
 8001bee:	615a      	str	r2, [r3, #20]
 8001bf0:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <HAL_TIM_MspPostInit+0xd0>)
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	029b      	lsls	r3, r3, #10
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001bfe:	193b      	adds	r3, r7, r4
 8001c00:	22e0      	movs	r2, #224	@ 0xe0
 8001c02:	00d2      	lsls	r2, r2, #3
 8001c04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	0021      	movs	r1, r4
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	187a      	adds	r2, r7, r1
 8001c22:	2390      	movs	r3, #144	@ 0x90
 8001c24:	05db      	lsls	r3, r3, #23
 8001c26:	0011      	movs	r1, r2
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f000 fd79 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c2e:	e028      	b.n	8001c82 <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM3)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a17      	ldr	r2, [pc, #92]	@ (8001c94 <HAL_TIM_MspPostInit+0xd4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d123      	bne.n	8001c82 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <HAL_TIM_MspPostInit+0xd0>)
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <HAL_TIM_MspPostInit+0xd0>)
 8001c40:	2180      	movs	r1, #128	@ 0x80
 8001c42:	02c9      	lsls	r1, r1, #11
 8001c44:	430a      	orrs	r2, r1
 8001c46:	615a      	str	r2, [r3, #20]
 8001c48:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <HAL_TIM_MspPostInit+0xd0>)
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	02db      	lsls	r3, r3, #11
 8001c50:	4013      	ands	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c56:	2114      	movs	r1, #20
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2230      	movs	r2, #48	@ 0x30
 8001c5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	2202      	movs	r2, #2
 8001c62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	187b      	adds	r3, r7, r1
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	2201      	movs	r2, #1
 8001c74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	4a07      	ldr	r2, [pc, #28]	@ (8001c98 <HAL_TIM_MspPostInit+0xd8>)
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	f000 fd4f 	bl	8002720 <HAL_GPIO_Init>
}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b00b      	add	sp, #44	@ 0x2c
 8001c88:	bd90      	pop	{r4, r7, pc}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	40012c00 	.word	0x40012c00
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40000400 	.word	0x40000400
 8001c98:	48000400 	.word	0x48000400

08001c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b08b      	sub	sp, #44	@ 0x2c
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	2414      	movs	r4, #20
 8001ca6:	193b      	adds	r3, r7, r4
 8001ca8:	0018      	movs	r0, r3
 8001caa:	2314      	movs	r3, #20
 8001cac:	001a      	movs	r2, r3
 8001cae:	2100      	movs	r1, #0
 8001cb0:	f003 fe28 	bl	8005904 <memset>
  if(huart->Instance==USART2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a20      	ldr	r2, [pc, #128]	@ (8001d3c <HAL_UART_MspInit+0xa0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d13a      	bne.n	8001d34 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cbe:	4b20      	ldr	r3, [pc, #128]	@ (8001d40 <HAL_UART_MspInit+0xa4>)
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <HAL_UART_MspInit+0xa4>)
 8001cc4:	2180      	movs	r1, #128	@ 0x80
 8001cc6:	0289      	lsls	r1, r1, #10
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	61da      	str	r2, [r3, #28]
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <HAL_UART_MspInit+0xa4>)
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	029b      	lsls	r3, r3, #10
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <HAL_UART_MspInit+0xa4>)
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <HAL_UART_MspInit+0xa4>)
 8001ce0:	2180      	movs	r1, #128	@ 0x80
 8001ce2:	0289      	lsls	r1, r1, #10
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	615a      	str	r2, [r3, #20]
 8001ce8:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <HAL_UART_MspInit+0xa4>)
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cf6:	0021      	movs	r1, r4
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2202      	movs	r2, #2
 8001d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	2201      	movs	r2, #1
 8001d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	187a      	adds	r2, r7, r1
 8001d18:	2390      	movs	r3, #144	@ 0x90
 8001d1a:	05db      	lsls	r3, r3, #23
 8001d1c:	0011      	movs	r1, r2
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 fcfe 	bl	8002720 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	201c      	movs	r0, #28
 8001d2a:	f000 fc49 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d2e:	201c      	movs	r0, #28
 8001d30:	f000 fc5b 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d34:	46c0      	nop			@ (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b00b      	add	sp, #44	@ 0x2c
 8001d3a:	bd90      	pop	{r4, r7, pc}
 8001d3c:	40004400 	.word	0x40004400
 8001d40:	40021000 	.word	0x40021000

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d48:	46c0      	nop			@ (mov r8, r8)
 8001d4a:	e7fd      	b.n	8001d48 <NMI_Handler+0x4>

08001d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d50:	46c0      	nop			@ (mov r8, r8)
 8001d52:	e7fd      	b.n	8001d50 <HardFault_Handler+0x4>

08001d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d58:	46c0      	nop			@ (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6c:	f000 f8dc 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d70:	46c0      	nop			@ (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f001 fe1c 	bl	80039bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001d84:	46c0      	nop			@ (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	200000e4 	.word	0x200000e4

08001d90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d94:	4b03      	ldr	r3, [pc, #12]	@ (8001da4 <TIM1_CC_IRQHandler+0x14>)
 8001d96:	0018      	movs	r0, r3
 8001d98:	f001 fe10 	bl	80039bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d9c:	46c0      	nop			@ (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	200000e4 	.word	0x200000e4

08001da8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dac:	4b03      	ldr	r3, [pc, #12]	@ (8001dbc <TIM2_IRQHandler+0x14>)
 8001dae:	0018      	movs	r0, r3
 8001db0:	f001 fe04 	bl	80039bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	2000012c 	.word	0x2000012c

08001dc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//FEB_Test_PWM();

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <TIM3_IRQHandler+0x14>)
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f001 fdf8 	bl	80039bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dcc:	46c0      	nop			@ (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	20000174 	.word	0x20000174

08001dd8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <TIM14_IRQHandler+0x14>)
 8001dde:	0018      	movs	r0, r3
 8001de0:	f001 fdec 	bl	80039bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001de4:	46c0      	nop			@ (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	200001bc 	.word	0x200001bc

08001df0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <USART2_IRQHandler+0x14>)
 8001df6:	0018      	movs	r0, r3
 8001df8:	f002 fed4 	bl	8004ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dfc:	46c0      	nop			@ (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	20000294 	.word	0x20000294

08001e08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001e0c:	46c0      	nop			@ (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e14:	4813      	ldr	r0, [pc, #76]	@ (8001e64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e16:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e18:	f7ff fff6 	bl	8001e08 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001e1c:	4812      	ldr	r0, [pc, #72]	@ (8001e68 <LoopForever+0x6>)
    LDR R1, [R0]
 8001e1e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001e20:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001e22:	4a12      	ldr	r2, [pc, #72]	@ (8001e6c <LoopForever+0xa>)
    CMP R1, R2
 8001e24:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001e26:	d105      	bne.n	8001e34 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001e28:	4811      	ldr	r0, [pc, #68]	@ (8001e70 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001e2a:	4912      	ldr	r1, [pc, #72]	@ (8001e74 <LoopForever+0x12>)
    STR R1, [R0]
 8001e2c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001e2e:	4812      	ldr	r0, [pc, #72]	@ (8001e78 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001e30:	4912      	ldr	r1, [pc, #72]	@ (8001e7c <LoopForever+0x1a>)
    STR R1, [R0]
 8001e32:	6001      	str	r1, [r0, #0]

08001e34 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e34:	4812      	ldr	r0, [pc, #72]	@ (8001e80 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001e36:	4913      	ldr	r1, [pc, #76]	@ (8001e84 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001e38:	4a13      	ldr	r2, [pc, #76]	@ (8001e88 <LoopForever+0x26>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a10      	ldr	r2, [pc, #64]	@ (8001e8c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001e4c:	4c10      	ldr	r4, [pc, #64]	@ (8001e90 <LoopForever+0x2e>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e5a:	f003 fd5b 	bl	8005914 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e5e:	f7ff f92c 	bl	80010ba <main>

08001e62 <LoopForever>:

LoopForever:
    b LoopForever
 8001e62:	e7fe      	b.n	8001e62 <LoopForever>
  ldr   r0, =_estack
 8001e64:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001e68:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001e6c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001e70:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001e74:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001e78:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001e7c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e84:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001e88:	08005a30 	.word	0x08005a30
  ldr r2, =_sbss
 8001e8c:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001e90:	20000320 	.word	0x20000320

08001e94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e94:	e7fe      	b.n	8001e94 <ADC1_IRQHandler>
	...

08001e98 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e9c:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <HAL_Init+0x24>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <HAL_Init+0x24>)
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	f000 f809 	bl	8001ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eae:	f7ff fcc9 	bl	8001844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	40022000 	.word	0x40022000

08001ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_InitTick+0x5c>)
 8001eca:	681c      	ldr	r4, [r3, #0]
 8001ecc:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <HAL_InitTick+0x60>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	23fa      	movs	r3, #250	@ 0xfa
 8001ed4:	0098      	lsls	r0, r3, #2
 8001ed6:	f7fe f917 	bl	8000108 <__udivsi3>
 8001eda:	0003      	movs	r3, r0
 8001edc:	0019      	movs	r1, r3
 8001ede:	0020      	movs	r0, r4
 8001ee0:	f7fe f912 	bl	8000108 <__udivsi3>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f000 fb8f 	bl	800260a <HAL_SYSTICK_Config>
 8001eec:	1e03      	subs	r3, r0, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e00f      	b.n	8001f14 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d80b      	bhi.n	8001f12 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	2301      	movs	r3, #1
 8001efe:	425b      	negs	r3, r3
 8001f00:	2200      	movs	r2, #0
 8001f02:	0018      	movs	r0, r3
 8001f04:	f000 fb5c 	bl	80025c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_InitTick+0x64>)
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b003      	add	sp, #12
 8001f1a:	bd90      	pop	{r4, r7, pc}
 8001f1c:	2000003c 	.word	0x2000003c
 8001f20:	20000044 	.word	0x20000044
 8001f24:	20000040 	.word	0x20000040

08001f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_IncTick+0x1c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	001a      	movs	r2, r3
 8001f32:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	18d2      	adds	r2, r2, r3
 8001f38:	4b03      	ldr	r3, [pc, #12]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f3a:	601a      	str	r2, [r3, #0]
}
 8001f3c:	46c0      	nop			@ (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			@ (mov r8, r8)
 8001f44:	20000044 	.word	0x20000044
 8001f48:	2000031c 	.word	0x2000031c

08001f4c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b02      	ldr	r3, [pc, #8]	@ (8001f5c <HAL_GetTick+0x10>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	2000031c 	.word	0x2000031c

08001f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fff0 	bl	8001f4c <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3301      	adds	r3, #1
 8001f78:	d005      	beq.n	8001f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <HAL_Delay+0x44>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	001a      	movs	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	189b      	adds	r3, r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	f7ff ffe0 	bl	8001f4c <HAL_GetTick>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d8f7      	bhi.n	8001f88 <HAL_Delay+0x28>
  {
  }
}
 8001f98:	46c0      	nop			@ (mov r8, r8)
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b004      	add	sp, #16
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	20000044 	.word	0x20000044

08001fa8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0f0      	b.n	800219c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	5c9b      	ldrb	r3, [r3, r2]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d103      	bne.n	8001fce <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7ff fc5f 	bl	800188c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fde:	f7ff ffb5 	bl	8001f4c <HAL_GetTick>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fe6:	e013      	b.n	8002010 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fe8:	f7ff ffb0 	bl	8001f4c <HAL_GetTick>
 8001fec:	0002      	movs	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b0a      	cmp	r3, #10
 8001ff4:	d90c      	bls.n	8002010 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffa:	2280      	movs	r2, #128	@ 0x80
 8001ffc:	0292      	lsls	r2, r2, #10
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	2105      	movs	r1, #5
 800200a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0c5      	b.n	800219c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	4013      	ands	r3, r2
 800201a:	d0e5      	beq.n	8001fe8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2102      	movs	r1, #2
 8002028:	438a      	bics	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800202c:	f7ff ff8e 	bl	8001f4c <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002034:	e013      	b.n	800205e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002036:	f7ff ff89 	bl	8001f4c <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b0a      	cmp	r3, #10
 8002042:	d90c      	bls.n	800205e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	2280      	movs	r2, #128	@ 0x80
 800204a:	0292      	lsls	r2, r2, #10
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2220      	movs	r2, #32
 8002056:	2105      	movs	r1, #5
 8002058:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e09e      	b.n	800219c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d1e5      	bne.n	8002036 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7e1b      	ldrb	r3, [r3, #24]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d108      	bne.n	8002084 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2180      	movs	r1, #128	@ 0x80
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e007      	b.n	8002094 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2180      	movs	r1, #128	@ 0x80
 8002090:	438a      	bics	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7e5b      	ldrb	r3, [r3, #25]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d108      	bne.n	80020ae <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2140      	movs	r1, #64	@ 0x40
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e007      	b.n	80020be <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2140      	movs	r1, #64	@ 0x40
 80020ba:	438a      	bics	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7e9b      	ldrb	r3, [r3, #26]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d108      	bne.n	80020d8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2120      	movs	r1, #32
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e007      	b.n	80020e8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2120      	movs	r1, #32
 80020e4:	438a      	bics	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7edb      	ldrb	r3, [r3, #27]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d108      	bne.n	8002102 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2110      	movs	r1, #16
 80020fc:	438a      	bics	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e007      	b.n	8002112 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2110      	movs	r1, #16
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7f1b      	ldrb	r3, [r3, #28]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2108      	movs	r1, #8
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e007      	b.n	800213c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2108      	movs	r1, #8
 8002138:	438a      	bics	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7f5b      	ldrb	r3, [r3, #29]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d108      	bne.n	8002156 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2104      	movs	r1, #4
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e007      	b.n	8002166 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2104      	movs	r1, #4
 8002162:	438a      	bics	r2, r1
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	431a      	orrs	r2, r3
 800217c:	0011      	movs	r1, r2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	1e5a      	subs	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	2101      	movs	r1, #1
 8002198:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b004      	add	sp, #16
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021b4:	2013      	movs	r0, #19
 80021b6:	183b      	adds	r3, r7, r0
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	2120      	movs	r1, #32
 80021bc:	5c52      	ldrb	r2, [r2, r1]
 80021be:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80021c0:	0002      	movs	r2, r0
 80021c2:	18bb      	adds	r3, r7, r2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d004      	beq.n	80021d4 <HAL_CAN_ConfigFilter+0x30>
 80021ca:	18bb      	adds	r3, r7, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d000      	beq.n	80021d4 <HAL_CAN_ConfigFilter+0x30>
 80021d2:	e0cd      	b.n	8002370 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	2380      	movs	r3, #128	@ 0x80
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	58d3      	ldr	r3, [r2, r3]
 80021dc:	2201      	movs	r2, #1
 80021de:	431a      	orrs	r2, r3
 80021e0:	0011      	movs	r1, r2
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	221f      	movs	r2, #31
 80021f0:	4013      	ands	r3, r2
 80021f2:	2201      	movs	r2, #1
 80021f4:	409a      	lsls	r2, r3
 80021f6:	0013      	movs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	2387      	movs	r3, #135	@ 0x87
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	58d3      	ldr	r3, [r2, r3]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	43d2      	mvns	r2, r2
 8002206:	401a      	ands	r2, r3
 8002208:	0011      	movs	r1, r2
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	2387      	movs	r3, #135	@ 0x87
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d129      	bne.n	800226e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	2383      	movs	r3, #131	@ 0x83
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	58d3      	ldr	r3, [r2, r3]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	43d2      	mvns	r2, r2
 8002226:	401a      	ands	r2, r3
 8002228:	0011      	movs	r1, r2
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	2383      	movs	r3, #131	@ 0x83
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002244:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3248      	adds	r2, #72	@ 0x48
 800224a:	00d2      	lsls	r2, r2, #3
 800224c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002260:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002262:	6979      	ldr	r1, [r7, #20]
 8002264:	3348      	adds	r3, #72	@ 0x48
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	18cb      	adds	r3, r1, r3
 800226a:	3304      	adds	r3, #4
 800226c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d128      	bne.n	80022c8 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	2383      	movs	r3, #131	@ 0x83
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	58d2      	ldr	r2, [r2, r3]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	431a      	orrs	r2, r3
 8002282:	0011      	movs	r1, r2
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	2383      	movs	r3, #131	@ 0x83
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	041b      	lsls	r3, r3, #16
 8002298:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800229e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3248      	adds	r2, #72	@ 0x48
 80022a4:	00d2      	lsls	r2, r2, #3
 80022a6:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	041b      	lsls	r3, r3, #16
 80022b4:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022bc:	6979      	ldr	r1, [r7, #20]
 80022be:	3348      	adds	r3, #72	@ 0x48
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	18cb      	adds	r3, r1, r3
 80022c4:	3304      	adds	r3, #4
 80022c6:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10c      	bne.n	80022ea <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	2381      	movs	r3, #129	@ 0x81
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	58d3      	ldr	r3, [r2, r3]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	43d2      	mvns	r2, r2
 80022dc:	401a      	ands	r2, r3
 80022de:	0011      	movs	r1, r2
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	2381      	movs	r3, #129	@ 0x81
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	50d1      	str	r1, [r2, r3]
 80022e8:	e00a      	b.n	8002300 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	2381      	movs	r3, #129	@ 0x81
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	58d2      	ldr	r2, [r2, r3]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	0011      	movs	r1, r2
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	2381      	movs	r3, #129	@ 0x81
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10c      	bne.n	8002322 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	2385      	movs	r3, #133	@ 0x85
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	58d3      	ldr	r3, [r2, r3]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	43d2      	mvns	r2, r2
 8002314:	401a      	ands	r2, r3
 8002316:	0011      	movs	r1, r2
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	2385      	movs	r3, #133	@ 0x85
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	50d1      	str	r1, [r2, r3]
 8002320:	e00a      	b.n	8002338 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	2385      	movs	r3, #133	@ 0x85
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	58d2      	ldr	r2, [r2, r3]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	431a      	orrs	r2, r3
 800232e:	0011      	movs	r1, r2
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	2385      	movs	r3, #133	@ 0x85
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10a      	bne.n	8002356 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	2387      	movs	r3, #135	@ 0x87
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	58d2      	ldr	r2, [r2, r3]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	431a      	orrs	r2, r3
 800234c:	0011      	movs	r1, r2
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	2387      	movs	r3, #135	@ 0x87
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	2380      	movs	r3, #128	@ 0x80
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	58d3      	ldr	r3, [r2, r3]
 800235e:	2201      	movs	r2, #1
 8002360:	4393      	bics	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e007      	b.n	8002380 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	2280      	movs	r2, #128	@ 0x80
 8002376:	02d2      	lsls	r2, r2, #11
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
  }
}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b006      	add	sp, #24
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2220      	movs	r2, #32
 8002394:	5c9b      	ldrb	r3, [r3, r2]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d12f      	bne.n	80023fc <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	2102      	movs	r1, #2
 80023a2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2101      	movs	r1, #1
 80023b0:	438a      	bics	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023b4:	f7ff fdca 	bl	8001f4c <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023bc:	e013      	b.n	80023e6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023be:	f7ff fdc5 	bl	8001f4c <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b0a      	cmp	r3, #10
 80023ca:	d90c      	bls.n	80023e6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	2280      	movs	r2, #128	@ 0x80
 80023d2:	0292      	lsls	r2, r2, #10
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	2105      	movs	r1, #5
 80023e0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e012      	b.n	800240c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	4013      	ands	r3, r2
 80023f0:	d1e5      	bne.n	80023be <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e007      	b.n	800240c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	2280      	movs	r2, #128	@ 0x80
 8002402:	0312      	lsls	r2, r2, #12
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
  }
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800241e:	200f      	movs	r0, #15
 8002420:	183b      	adds	r3, r7, r0
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	2120      	movs	r1, #32
 8002426:	5c52      	ldrb	r2, [r2, r1]
 8002428:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800242a:	0002      	movs	r2, r0
 800242c:	18bb      	adds	r3, r7, r2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d003      	beq.n	800243c <HAL_CAN_ActivateNotification+0x28>
 8002434:	18bb      	adds	r3, r7, r2
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d109      	bne.n	8002450 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6959      	ldr	r1, [r3, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e007      	b.n	8002460 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	2280      	movs	r2, #128	@ 0x80
 8002456:	02d2      	lsls	r2, r2, #11
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
  }
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b004      	add	sp, #16
 8002466:	bd80      	pop	{r7, pc}

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	0002      	movs	r2, r0
 8002470:	1dfb      	adds	r3, r7, #7
 8002472:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002474:	1dfb      	adds	r3, r7, #7
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b7f      	cmp	r3, #127	@ 0x7f
 800247a:	d809      	bhi.n	8002490 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	001a      	movs	r2, r3
 8002482:	231f      	movs	r3, #31
 8002484:	401a      	ands	r2, r3
 8002486:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <__NVIC_EnableIRQ+0x30>)
 8002488:	2101      	movs	r1, #1
 800248a:	4091      	lsls	r1, r2
 800248c:	000a      	movs	r2, r1
 800248e:	601a      	str	r2, [r3, #0]
  }
}
 8002490:	46c0      	nop			@ (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b002      	add	sp, #8
 8002496:	bd80      	pop	{r7, pc}
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	0002      	movs	r2, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	1dfb      	adds	r3, r7, #7
 80024a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80024b0:	d828      	bhi.n	8002504 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002570 <__NVIC_SetPriority+0xd4>)
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b25b      	sxtb	r3, r3
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	33c0      	adds	r3, #192	@ 0xc0
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	589b      	ldr	r3, [r3, r2]
 80024c2:	1dfa      	adds	r2, r7, #7
 80024c4:	7812      	ldrb	r2, [r2, #0]
 80024c6:	0011      	movs	r1, r2
 80024c8:	2203      	movs	r2, #3
 80024ca:	400a      	ands	r2, r1
 80024cc:	00d2      	lsls	r2, r2, #3
 80024ce:	21ff      	movs	r1, #255	@ 0xff
 80024d0:	4091      	lsls	r1, r2
 80024d2:	000a      	movs	r2, r1
 80024d4:	43d2      	mvns	r2, r2
 80024d6:	401a      	ands	r2, r3
 80024d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	019b      	lsls	r3, r3, #6
 80024de:	22ff      	movs	r2, #255	@ 0xff
 80024e0:	401a      	ands	r2, r3
 80024e2:	1dfb      	adds	r3, r7, #7
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	0018      	movs	r0, r3
 80024e8:	2303      	movs	r3, #3
 80024ea:	4003      	ands	r3, r0
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024f0:	481f      	ldr	r0, [pc, #124]	@ (8002570 <__NVIC_SetPriority+0xd4>)
 80024f2:	1dfb      	adds	r3, r7, #7
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	430a      	orrs	r2, r1
 80024fc:	33c0      	adds	r3, #192	@ 0xc0
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002502:	e031      	b.n	8002568 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002504:	4a1b      	ldr	r2, [pc, #108]	@ (8002574 <__NVIC_SetPriority+0xd8>)
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	0019      	movs	r1, r3
 800250c:	230f      	movs	r3, #15
 800250e:	400b      	ands	r3, r1
 8002510:	3b08      	subs	r3, #8
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3306      	adds	r3, #6
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	18d3      	adds	r3, r2, r3
 800251a:	3304      	adds	r3, #4
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1dfa      	adds	r2, r7, #7
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	0011      	movs	r1, r2
 8002524:	2203      	movs	r2, #3
 8002526:	400a      	ands	r2, r1
 8002528:	00d2      	lsls	r2, r2, #3
 800252a:	21ff      	movs	r1, #255	@ 0xff
 800252c:	4091      	lsls	r1, r2
 800252e:	000a      	movs	r2, r1
 8002530:	43d2      	mvns	r2, r2
 8002532:	401a      	ands	r2, r3
 8002534:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	019b      	lsls	r3, r3, #6
 800253a:	22ff      	movs	r2, #255	@ 0xff
 800253c:	401a      	ands	r2, r3
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	0018      	movs	r0, r3
 8002544:	2303      	movs	r3, #3
 8002546:	4003      	ands	r3, r0
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800254c:	4809      	ldr	r0, [pc, #36]	@ (8002574 <__NVIC_SetPriority+0xd8>)
 800254e:	1dfb      	adds	r3, r7, #7
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	001c      	movs	r4, r3
 8002554:	230f      	movs	r3, #15
 8002556:	4023      	ands	r3, r4
 8002558:	3b08      	subs	r3, #8
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	430a      	orrs	r2, r1
 800255e:	3306      	adds	r3, #6
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	18c3      	adds	r3, r0, r3
 8002564:	3304      	adds	r3, #4
 8002566:	601a      	str	r2, [r3, #0]
}
 8002568:	46c0      	nop			@ (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b003      	add	sp, #12
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	1e5a      	subs	r2, r3, #1
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	045b      	lsls	r3, r3, #17
 8002588:	429a      	cmp	r2, r3
 800258a:	d301      	bcc.n	8002590 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258c:	2301      	movs	r3, #1
 800258e:	e010      	b.n	80025b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002590:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <SysTick_Config+0x44>)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	3a01      	subs	r2, #1
 8002596:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002598:	2301      	movs	r3, #1
 800259a:	425b      	negs	r3, r3
 800259c:	2103      	movs	r1, #3
 800259e:	0018      	movs	r0, r3
 80025a0:	f7ff ff7c 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <SysTick_Config+0x44>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025aa:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <SysTick_Config+0x44>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b002      	add	sp, #8
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	e000e010 	.word	0xe000e010

080025c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	210f      	movs	r1, #15
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	1c02      	adds	r2, r0, #0
 80025d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	0011      	movs	r1, r2
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ff5d 	bl	800249c <__NVIC_SetPriority>
}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	0002      	movs	r2, r0
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7ff ff33 	bl	8002468 <__NVIC_EnableIRQ>
}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	b002      	add	sp, #8
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	0018      	movs	r0, r3
 8002616:	f7ff ffaf 	bl	8002578 <SysTick_Config>
 800261a:	0003      	movs	r3, r0
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2221      	movs	r2, #33	@ 0x21
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d008      	beq.n	800264a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2204      	movs	r2, #4
 800263c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e020      	b.n	800268c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	210e      	movs	r1, #14
 8002656:	438a      	bics	r2, r1
 8002658:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	438a      	bics	r2, r1
 8002668:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002672:	2101      	movs	r1, #1
 8002674:	4091      	lsls	r1, r2
 8002676:	000a      	movs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2221      	movs	r2, #33	@ 0x21
 800267e:	2101      	movs	r1, #1
 8002680:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	2100      	movs	r1, #0
 8002688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b002      	add	sp, #8
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800269c:	210f      	movs	r1, #15
 800269e:	187b      	adds	r3, r7, r1
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2221      	movs	r2, #33	@ 0x21
 80026a8:	5c9b      	ldrb	r3, [r3, r2]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d006      	beq.n	80026be <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2204      	movs	r2, #4
 80026b4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	e028      	b.n	8002710 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	210e      	movs	r1, #14
 80026ca:	438a      	bics	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2101      	movs	r1, #1
 80026da:	438a      	bics	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e6:	2101      	movs	r1, #1
 80026e8:	4091      	lsls	r1, r2
 80026ea:	000a      	movs	r2, r1
 80026ec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2221      	movs	r2, #33	@ 0x21
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	2100      	movs	r1, #0
 80026fc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	0010      	movs	r0, r2
 800270e:	4798      	blx	r3
    }
  }
  return status;
 8002710:	230f      	movs	r3, #15
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	781b      	ldrb	r3, [r3, #0]
}
 8002716:	0018      	movs	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	b004      	add	sp, #16
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272e:	e149      	b.n	80029c4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4091      	lsls	r1, r2
 800273a:	000a      	movs	r2, r1
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d100      	bne.n	8002748 <HAL_GPIO_Init+0x28>
 8002746:	e13a      	b.n	80029be <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2203      	movs	r2, #3
 800274e:	4013      	ands	r3, r2
 8002750:	2b01      	cmp	r3, #1
 8002752:	d005      	beq.n	8002760 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2203      	movs	r2, #3
 800275a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800275c:	2b02      	cmp	r3, #2
 800275e:	d130      	bne.n	80027c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	409a      	lsls	r2, r3
 800276e:	0013      	movs	r3, r2
 8002770:	43da      	mvns	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	409a      	lsls	r2, r3
 8002782:	0013      	movs	r3, r2
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002796:	2201      	movs	r2, #1
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
 800279c:	0013      	movs	r3, r2
 800279e:	43da      	mvns	r2, r3
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	2201      	movs	r2, #1
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
 80027b4:	0013      	movs	r3, r2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2203      	movs	r2, #3
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d017      	beq.n	80027fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	409a      	lsls	r2, r3
 80027dc:	0013      	movs	r3, r2
 80027de:	43da      	mvns	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	0013      	movs	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2203      	movs	r2, #3
 8002804:	4013      	ands	r3, r2
 8002806:	2b02      	cmp	r3, #2
 8002808:	d123      	bne.n	8002852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	08da      	lsrs	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	0092      	lsls	r2, r2, #2
 8002814:	58d3      	ldr	r3, [r2, r3]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2207      	movs	r2, #7
 800281c:	4013      	ands	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	409a      	lsls	r2, r3
 8002824:	0013      	movs	r3, r2
 8002826:	43da      	mvns	r2, r3
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2107      	movs	r1, #7
 8002836:	400b      	ands	r3, r1
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	409a      	lsls	r2, r3
 800283c:	0013      	movs	r3, r2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	0092      	lsls	r2, r2, #2
 800284e:	6939      	ldr	r1, [r7, #16]
 8002850:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	2203      	movs	r2, #3
 800285e:	409a      	lsls	r2, r3
 8002860:	0013      	movs	r3, r2
 8002862:	43da      	mvns	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2203      	movs	r2, #3
 8002870:	401a      	ands	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	409a      	lsls	r2, r3
 8002878:	0013      	movs	r3, r2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	23c0      	movs	r3, #192	@ 0xc0
 800288c:	029b      	lsls	r3, r3, #10
 800288e:	4013      	ands	r3, r2
 8002890:	d100      	bne.n	8002894 <HAL_GPIO_Init+0x174>
 8002892:	e094      	b.n	80029be <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002894:	4b51      	ldr	r3, [pc, #324]	@ (80029dc <HAL_GPIO_Init+0x2bc>)
 8002896:	699a      	ldr	r2, [r3, #24]
 8002898:	4b50      	ldr	r3, [pc, #320]	@ (80029dc <HAL_GPIO_Init+0x2bc>)
 800289a:	2101      	movs	r1, #1
 800289c:	430a      	orrs	r2, r1
 800289e:	619a      	str	r2, [r3, #24]
 80028a0:	4b4e      	ldr	r3, [pc, #312]	@ (80029dc <HAL_GPIO_Init+0x2bc>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2201      	movs	r2, #1
 80028a6:	4013      	ands	r3, r2
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028ac:	4a4c      	ldr	r2, [pc, #304]	@ (80029e0 <HAL_GPIO_Init+0x2c0>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	589b      	ldr	r3, [r3, r2]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2203      	movs	r2, #3
 80028be:	4013      	ands	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	220f      	movs	r2, #15
 80028c4:	409a      	lsls	r2, r3
 80028c6:	0013      	movs	r3, r2
 80028c8:	43da      	mvns	r2, r3
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	2390      	movs	r3, #144	@ 0x90
 80028d4:	05db      	lsls	r3, r3, #23
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x1d6>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a41      	ldr	r2, [pc, #260]	@ (80029e4 <HAL_GPIO_Init+0x2c4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x1d2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a40      	ldr	r2, [pc, #256]	@ (80029e8 <HAL_GPIO_Init+0x2c8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x1ce>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e004      	b.n	80028f8 <HAL_GPIO_Init+0x1d8>
 80028ee:	2305      	movs	r3, #5
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_Init+0x1d8>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_GPIO_Init+0x1d8>
 80028f6:	2300      	movs	r3, #0
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	2103      	movs	r1, #3
 80028fc:	400a      	ands	r2, r1
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	4093      	lsls	r3, r2
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002908:	4935      	ldr	r1, [pc, #212]	@ (80029e0 <HAL_GPIO_Init+0x2c0>)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	3302      	adds	r3, #2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002916:	4b35      	ldr	r3, [pc, #212]	@ (80029ec <HAL_GPIO_Init+0x2cc>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	43da      	mvns	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	035b      	lsls	r3, r3, #13
 800292e:	4013      	ands	r3, r2
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800293a:	4b2c      	ldr	r3, [pc, #176]	@ (80029ec <HAL_GPIO_Init+0x2cc>)
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002940:	4b2a      	ldr	r3, [pc, #168]	@ (80029ec <HAL_GPIO_Init+0x2cc>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	43da      	mvns	r2, r3
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	2380      	movs	r3, #128	@ 0x80
 8002956:	039b      	lsls	r3, r3, #14
 8002958:	4013      	ands	r3, r2
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002964:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <HAL_GPIO_Init+0x2cc>)
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800296a:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_GPIO_Init+0x2cc>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	43da      	mvns	r2, r3
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	029b      	lsls	r3, r3, #10
 8002982:	4013      	ands	r3, r2
 8002984:	d003      	beq.n	800298e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800298e:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <HAL_GPIO_Init+0x2cc>)
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002994:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <HAL_GPIO_Init+0x2cc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	43da      	mvns	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	025b      	lsls	r3, r3, #9
 80029ac:	4013      	ands	r3, r2
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <HAL_GPIO_Init+0x2cc>)
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	40da      	lsrs	r2, r3
 80029cc:	1e13      	subs	r3, r2, #0
 80029ce:	d000      	beq.n	80029d2 <HAL_GPIO_Init+0x2b2>
 80029d0:	e6ae      	b.n	8002730 <HAL_GPIO_Init+0x10>
  } 
}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	46c0      	nop			@ (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b006      	add	sp, #24
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40010000 	.word	0x40010000
 80029e4:	48000400 	.word	0x48000400
 80029e8:	48000800 	.word	0x48000800
 80029ec:	40010400 	.word	0x40010400

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f000 fb76 	bl	80030f0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d100      	bne.n	8002a10 <HAL_RCC_OscConfig+0x20>
 8002a0e:	e08e      	b.n	8002b2e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a10:	4bc5      	ldr	r3, [pc, #788]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	220c      	movs	r2, #12
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d00e      	beq.n	8002a3a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a1c:	4bc2      	ldr	r3, [pc, #776]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	220c      	movs	r2, #12
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d117      	bne.n	8002a58 <HAL_RCC_OscConfig+0x68>
 8002a28:	4bbf      	ldr	r3, [pc, #764]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	23c0      	movs	r3, #192	@ 0xc0
 8002a2e:	025b      	lsls	r3, r3, #9
 8002a30:	401a      	ands	r2, r3
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	025b      	lsls	r3, r3, #9
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d10e      	bne.n	8002a58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3a:	4bbb      	ldr	r3, [pc, #748]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	@ 0x80
 8002a40:	029b      	lsls	r3, r3, #10
 8002a42:	4013      	ands	r3, r2
 8002a44:	d100      	bne.n	8002a48 <HAL_RCC_OscConfig+0x58>
 8002a46:	e071      	b.n	8002b2c <HAL_RCC_OscConfig+0x13c>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d000      	beq.n	8002a52 <HAL_RCC_OscConfig+0x62>
 8002a50:	e06c      	b.n	8002b2c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f000 fb4c 	bl	80030f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_OscConfig+0x80>
 8002a60:	4bb1      	ldr	r3, [pc, #708]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4bb0      	ldr	r3, [pc, #704]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002a66:	2180      	movs	r1, #128	@ 0x80
 8002a68:	0249      	lsls	r1, r1, #9
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e02f      	b.n	8002ad0 <HAL_RCC_OscConfig+0xe0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCC_OscConfig+0xa2>
 8002a78:	4bab      	ldr	r3, [pc, #684]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4baa      	ldr	r3, [pc, #680]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002a7e:	49ab      	ldr	r1, [pc, #684]	@ (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002a80:	400a      	ands	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	4ba8      	ldr	r3, [pc, #672]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4ba7      	ldr	r3, [pc, #668]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002a8a:	49a9      	ldr	r1, [pc, #676]	@ (8002d30 <HAL_RCC_OscConfig+0x340>)
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e01e      	b.n	8002ad0 <HAL_RCC_OscConfig+0xe0>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d10e      	bne.n	8002ab8 <HAL_RCC_OscConfig+0xc8>
 8002a9a:	4ba3      	ldr	r3, [pc, #652]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4ba2      	ldr	r3, [pc, #648]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002aa0:	2180      	movs	r1, #128	@ 0x80
 8002aa2:	02c9      	lsls	r1, r1, #11
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	4b9f      	ldr	r3, [pc, #636]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b9e      	ldr	r3, [pc, #632]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002aae:	2180      	movs	r1, #128	@ 0x80
 8002ab0:	0249      	lsls	r1, r1, #9
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e00b      	b.n	8002ad0 <HAL_RCC_OscConfig+0xe0>
 8002ab8:	4b9b      	ldr	r3, [pc, #620]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b9a      	ldr	r3, [pc, #616]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002abe:	499b      	ldr	r1, [pc, #620]	@ (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	4b98      	ldr	r3, [pc, #608]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b97      	ldr	r3, [pc, #604]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002aca:	4999      	ldr	r1, [pc, #612]	@ (8002d30 <HAL_RCC_OscConfig+0x340>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d014      	beq.n	8002b02 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7ff fa38 	bl	8001f4c <HAL_GetTick>
 8002adc:	0003      	movs	r3, r0
 8002ade:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae2:	f7ff fa33 	bl	8001f4c <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b64      	cmp	r3, #100	@ 0x64
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e2fd      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af4:	4b8c      	ldr	r3, [pc, #560]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	029b      	lsls	r3, r3, #10
 8002afc:	4013      	ands	r3, r2
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0xf2>
 8002b00:	e015      	b.n	8002b2e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7ff fa23 	bl	8001f4c <HAL_GetTick>
 8002b06:	0003      	movs	r3, r0
 8002b08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7ff fa1e 	bl	8001f4c <HAL_GetTick>
 8002b10:	0002      	movs	r2, r0
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	@ 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e2e8      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	4b82      	ldr	r3, [pc, #520]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	2380      	movs	r3, #128	@ 0x80
 8002b24:	029b      	lsls	r3, r3, #10
 8002b26:	4013      	ands	r3, r2
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x11c>
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2202      	movs	r2, #2
 8002b34:	4013      	ands	r3, r2
 8002b36:	d100      	bne.n	8002b3a <HAL_RCC_OscConfig+0x14a>
 8002b38:	e06c      	b.n	8002c14 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	220c      	movs	r2, #12
 8002b40:	4013      	ands	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b44:	4b78      	ldr	r3, [pc, #480]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	220c      	movs	r2, #12
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d11f      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1a0>
 8002b50:	4b75      	ldr	r3, [pc, #468]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	23c0      	movs	r3, #192	@ 0xc0
 8002b56:	025b      	lsls	r3, r3, #9
 8002b58:	401a      	ands	r2, r3
 8002b5a:	2380      	movs	r3, #128	@ 0x80
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d116      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	4b71      	ldr	r3, [pc, #452]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2202      	movs	r2, #2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_OscConfig+0x188>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e2bb      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b6b      	ldr	r3, [pc, #428]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	22f8      	movs	r2, #248	@ 0xf8
 8002b7e:	4393      	bics	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00da      	lsls	r2, r3, #3
 8002b88:	4b67      	ldr	r3, [pc, #412]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	e041      	b.n	8002c14 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d024      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b98:	4b63      	ldr	r3, [pc, #396]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b62      	ldr	r3, [pc, #392]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7ff f9d2 	bl	8001f4c <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bae:	f7ff f9cd 	bl	8001f4c <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e297      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	4b59      	ldr	r3, [pc, #356]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d0f1      	beq.n	8002bae <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bca:	4b57      	ldr	r3, [pc, #348]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	22f8      	movs	r2, #248	@ 0xf8
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	00da      	lsls	r2, r3, #3
 8002bda:	4b53      	ldr	r3, [pc, #332]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	e018      	b.n	8002c14 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be2:	4b51      	ldr	r3, [pc, #324]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b50      	ldr	r3, [pc, #320]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002be8:	2101      	movs	r1, #1
 8002bea:	438a      	bics	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7ff f9ad 	bl	8001f4c <HAL_GetTick>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7ff f9a8 	bl	8001f4c <HAL_GetTick>
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e272      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	4013      	ands	r3, r2
 8002c12:	d1f1      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2208      	movs	r2, #8
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d036      	beq.n	8002c8c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d019      	beq.n	8002c5a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c26:	4b40      	ldr	r3, [pc, #256]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002c28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c32:	f7ff f98b 	bl	8001f4c <HAL_GetTick>
 8002c36:	0003      	movs	r3, r0
 8002c38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3c:	f7ff f986 	bl	8001f4c <HAL_GetTick>
 8002c40:	0002      	movs	r2, r0
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e250      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	4b36      	ldr	r3, [pc, #216]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c52:	2202      	movs	r2, #2
 8002c54:	4013      	ands	r3, r2
 8002c56:	d0f1      	beq.n	8002c3c <HAL_RCC_OscConfig+0x24c>
 8002c58:	e018      	b.n	8002c8c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5a:	4b33      	ldr	r3, [pc, #204]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002c5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c5e:	4b32      	ldr	r3, [pc, #200]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002c60:	2101      	movs	r1, #1
 8002c62:	438a      	bics	r2, r1
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7ff f971 	bl	8001f4c <HAL_GetTick>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c70:	f7ff f96c 	bl	8001f4c <HAL_GetTick>
 8002c74:	0002      	movs	r2, r0
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e236      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c82:	4b29      	ldr	r3, [pc, #164]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	2202      	movs	r2, #2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d1f1      	bne.n	8002c70 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2204      	movs	r2, #4
 8002c92:	4013      	ands	r3, r2
 8002c94:	d100      	bne.n	8002c98 <HAL_RCC_OscConfig+0x2a8>
 8002c96:	e0b5      	b.n	8002e04 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c98:	201f      	movs	r0, #31
 8002c9a:	183b      	adds	r3, r7, r0
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca0:	4b21      	ldr	r3, [pc, #132]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	2380      	movs	r3, #128	@ 0x80
 8002ca6:	055b      	lsls	r3, r3, #21
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d110      	bne.n	8002cce <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cac:	4b1e      	ldr	r3, [pc, #120]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002cb2:	2180      	movs	r1, #128	@ 0x80
 8002cb4:	0549      	lsls	r1, r1, #21
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	61da      	str	r2, [r3, #28]
 8002cba:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	2380      	movs	r3, #128	@ 0x80
 8002cc0:	055b      	lsls	r3, r3, #21
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cc8:	183b      	adds	r3, r7, r0
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <HAL_RCC_OscConfig+0x344>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	2380      	movs	r3, #128	@ 0x80
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d11a      	bne.n	8002d10 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cda:	4b16      	ldr	r3, [pc, #88]	@ (8002d34 <HAL_RCC_OscConfig+0x344>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4b15      	ldr	r3, [pc, #84]	@ (8002d34 <HAL_RCC_OscConfig+0x344>)
 8002ce0:	2180      	movs	r1, #128	@ 0x80
 8002ce2:	0049      	lsls	r1, r1, #1
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce8:	f7ff f930 	bl	8001f4c <HAL_GetTick>
 8002cec:	0003      	movs	r3, r0
 8002cee:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf2:	f7ff f92b 	bl	8001f4c <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b64      	cmp	r3, #100	@ 0x64
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e1f5      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <HAL_RCC_OscConfig+0x344>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	@ 0x80
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d10f      	bne.n	8002d38 <HAL_RCC_OscConfig+0x348>
 8002d18:	4b03      	ldr	r3, [pc, #12]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	4b02      	ldr	r3, [pc, #8]	@ (8002d28 <HAL_RCC_OscConfig+0x338>)
 8002d1e:	2101      	movs	r1, #1
 8002d20:	430a      	orrs	r2, r1
 8002d22:	621a      	str	r2, [r3, #32]
 8002d24:	e036      	b.n	8002d94 <HAL_RCC_OscConfig+0x3a4>
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	fffeffff 	.word	0xfffeffff
 8002d30:	fffbffff 	.word	0xfffbffff
 8002d34:	40007000 	.word	0x40007000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10c      	bne.n	8002d5a <HAL_RCC_OscConfig+0x36a>
 8002d40:	4bca      	ldr	r3, [pc, #808]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	4bc9      	ldr	r3, [pc, #804]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002d46:	2101      	movs	r1, #1
 8002d48:	438a      	bics	r2, r1
 8002d4a:	621a      	str	r2, [r3, #32]
 8002d4c:	4bc7      	ldr	r3, [pc, #796]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	4bc6      	ldr	r3, [pc, #792]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002d52:	2104      	movs	r1, #4
 8002d54:	438a      	bics	r2, r1
 8002d56:	621a      	str	r2, [r3, #32]
 8002d58:	e01c      	b.n	8002d94 <HAL_RCC_OscConfig+0x3a4>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x38c>
 8002d62:	4bc2      	ldr	r3, [pc, #776]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002d64:	6a1a      	ldr	r2, [r3, #32]
 8002d66:	4bc1      	ldr	r3, [pc, #772]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002d68:	2104      	movs	r1, #4
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	621a      	str	r2, [r3, #32]
 8002d6e:	4bbf      	ldr	r3, [pc, #764]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	4bbe      	ldr	r3, [pc, #760]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002d74:	2101      	movs	r1, #1
 8002d76:	430a      	orrs	r2, r1
 8002d78:	621a      	str	r2, [r3, #32]
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCC_OscConfig+0x3a4>
 8002d7c:	4bbb      	ldr	r3, [pc, #748]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002d7e:	6a1a      	ldr	r2, [r3, #32]
 8002d80:	4bba      	ldr	r3, [pc, #744]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002d82:	2101      	movs	r1, #1
 8002d84:	438a      	bics	r2, r1
 8002d86:	621a      	str	r2, [r3, #32]
 8002d88:	4bb8      	ldr	r3, [pc, #736]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002d8a:	6a1a      	ldr	r2, [r3, #32]
 8002d8c:	4bb7      	ldr	r3, [pc, #732]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002d8e:	2104      	movs	r1, #4
 8002d90:	438a      	bics	r2, r1
 8002d92:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d014      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9c:	f7ff f8d6 	bl	8001f4c <HAL_GetTick>
 8002da0:	0003      	movs	r3, r0
 8002da2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da4:	e009      	b.n	8002dba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7ff f8d1 	bl	8001f4c <HAL_GetTick>
 8002daa:	0002      	movs	r2, r0
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	4aaf      	ldr	r2, [pc, #700]	@ (8003070 <HAL_RCC_OscConfig+0x680>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e19a      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dba:	4bac      	ldr	r3, [pc, #688]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x3b6>
 8002dc4:	e013      	b.n	8002dee <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7ff f8c1 	bl	8001f4c <HAL_GetTick>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dce:	e009      	b.n	8002de4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7ff f8bc 	bl	8001f4c <HAL_GetTick>
 8002dd4:	0002      	movs	r2, r0
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	4aa5      	ldr	r2, [pc, #660]	@ (8003070 <HAL_RCC_OscConfig+0x680>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e185      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	4ba1      	ldr	r3, [pc, #644]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	2202      	movs	r2, #2
 8002dea:	4013      	ands	r3, r2
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dee:	231f      	movs	r3, #31
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d105      	bne.n	8002e04 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df8:	4b9c      	ldr	r3, [pc, #624]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	4b9b      	ldr	r3, [pc, #620]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002dfe:	499d      	ldr	r1, [pc, #628]	@ (8003074 <HAL_RCC_OscConfig+0x684>)
 8002e00:	400a      	ands	r2, r1
 8002e02:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2210      	movs	r2, #16
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d063      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d12a      	bne.n	8002e6c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e16:	4b95      	ldr	r3, [pc, #596]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e1a:	4b94      	ldr	r3, [pc, #592]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e22:	4b92      	ldr	r3, [pc, #584]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e26:	4b91      	ldr	r3, [pc, #580]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e28:	2101      	movs	r1, #1
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2e:	f7ff f88d 	bl	8001f4c <HAL_GetTick>
 8002e32:	0003      	movs	r3, r0
 8002e34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e38:	f7ff f888 	bl	8001f4c <HAL_GetTick>
 8002e3c:	0002      	movs	r2, r0
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e152      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e4a:	4b88      	ldr	r3, [pc, #544]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4e:	2202      	movs	r2, #2
 8002e50:	4013      	ands	r3, r2
 8002e52:	d0f1      	beq.n	8002e38 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e54:	4b85      	ldr	r3, [pc, #532]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e58:	22f8      	movs	r2, #248	@ 0xf8
 8002e5a:	4393      	bics	r3, r2
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	00da      	lsls	r2, r3, #3
 8002e64:	4b81      	ldr	r3, [pc, #516]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e66:	430a      	orrs	r2, r1
 8002e68:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e6a:	e034      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	3305      	adds	r3, #5
 8002e72:	d111      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002e74:	4b7d      	ldr	r3, [pc, #500]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e78:	4b7c      	ldr	r3, [pc, #496]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e7a:	2104      	movs	r1, #4
 8002e7c:	438a      	bics	r2, r1
 8002e7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e80:	4b7a      	ldr	r3, [pc, #488]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e84:	22f8      	movs	r2, #248	@ 0xf8
 8002e86:	4393      	bics	r3, r2
 8002e88:	0019      	movs	r1, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	00da      	lsls	r2, r3, #3
 8002e90:	4b76      	ldr	r3, [pc, #472]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e92:	430a      	orrs	r2, r1
 8002e94:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e96:	e01e      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e98:	4b74      	ldr	r3, [pc, #464]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e9c:	4b73      	ldr	r3, [pc, #460]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002e9e:	2104      	movs	r1, #4
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ea4:	4b71      	ldr	r3, [pc, #452]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002ea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ea8:	4b70      	ldr	r3, [pc, #448]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002eaa:	2101      	movs	r1, #1
 8002eac:	438a      	bics	r2, r1
 8002eae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb0:	f7ff f84c 	bl	8001f4c <HAL_GetTick>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002eba:	f7ff f847 	bl	8001f4c <HAL_GetTick>
 8002ebe:	0002      	movs	r2, r0
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e111      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ecc:	4b67      	ldr	r3, [pc, #412]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d1f1      	bne.n	8002eba <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2220      	movs	r2, #32
 8002edc:	4013      	ands	r3, r2
 8002ede:	d05c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ee0:	4b62      	ldr	r3, [pc, #392]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	220c      	movs	r2, #12
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b0c      	cmp	r3, #12
 8002eea:	d00e      	beq.n	8002f0a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002eec:	4b5f      	ldr	r3, [pc, #380]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	220c      	movs	r2, #12
 8002ef2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d114      	bne.n	8002f22 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002ef8:	4b5c      	ldr	r3, [pc, #368]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	23c0      	movs	r3, #192	@ 0xc0
 8002efe:	025b      	lsls	r3, r3, #9
 8002f00:	401a      	ands	r2, r3
 8002f02:	23c0      	movs	r3, #192	@ 0xc0
 8002f04:	025b      	lsls	r3, r3, #9
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d10b      	bne.n	8002f22 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f0a:	4b58      	ldr	r3, [pc, #352]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f0e:	2380      	movs	r3, #128	@ 0x80
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	4013      	ands	r3, r2
 8002f14:	d040      	beq.n	8002f98 <HAL_RCC_OscConfig+0x5a8>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d03c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0e6      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01b      	beq.n	8002f62 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f2a:	4b50      	ldr	r3, [pc, #320]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002f2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002f30:	2180      	movs	r1, #128	@ 0x80
 8002f32:	0249      	lsls	r1, r1, #9
 8002f34:	430a      	orrs	r2, r1
 8002f36:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7ff f808 	bl	8001f4c <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f42:	f7ff f803 	bl	8001f4c <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0cd      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f54:	4b45      	ldr	r3, [pc, #276]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f58:	2380      	movs	r3, #128	@ 0x80
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x552>
 8002f60:	e01b      	b.n	8002f9a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002f62:	4b42      	ldr	r3, [pc, #264]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f66:	4b41      	ldr	r3, [pc, #260]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002f68:	4943      	ldr	r1, [pc, #268]	@ (8003078 <HAL_RCC_OscConfig+0x688>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6e:	f7fe ffed 	bl	8001f4c <HAL_GetTick>
 8002f72:	0003      	movs	r3, r0
 8002f74:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f78:	f7fe ffe8 	bl	8001f4c <HAL_GetTick>
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0b2      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002f8a:	4b38      	ldr	r3, [pc, #224]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f8e:	2380      	movs	r3, #128	@ 0x80
 8002f90:	029b      	lsls	r3, r3, #10
 8002f92:	4013      	ands	r3, r2
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x588>
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f98:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d100      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x5b4>
 8002fa2:	e0a4      	b.n	80030ee <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa4:	4b31      	ldr	r3, [pc, #196]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	220c      	movs	r2, #12
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d100      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x5c2>
 8002fb0:	e078      	b.n	80030a4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d14c      	bne.n	8003054 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b2c      	ldr	r3, [pc, #176]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002fc0:	492e      	ldr	r1, [pc, #184]	@ (800307c <HAL_RCC_OscConfig+0x68c>)
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe ffc1 	bl	8001f4c <HAL_GetTick>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe ffbc 	bl	8001f4c <HAL_GetTick>
 8002fd4:	0002      	movs	r2, r0
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e086      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe2:	4b22      	ldr	r3, [pc, #136]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	049b      	lsls	r3, r3, #18
 8002fea:	4013      	ands	r3, r2
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fee:	4b1f      	ldr	r3, [pc, #124]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff2:	220f      	movs	r2, #15
 8002ff4:	4393      	bics	r3, r2
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8002ffe:	430a      	orrs	r2, r1
 8003000:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003002:	4b1a      	ldr	r3, [pc, #104]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a1e      	ldr	r2, [pc, #120]	@ (8003080 <HAL_RCC_OscConfig+0x690>)
 8003008:	4013      	ands	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	431a      	orrs	r2, r3
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301c:	4b13      	ldr	r3, [pc, #76]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b12      	ldr	r3, [pc, #72]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8003022:	2180      	movs	r1, #128	@ 0x80
 8003024:	0449      	lsls	r1, r1, #17
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302a:	f7fe ff8f 	bl	8001f4c <HAL_GetTick>
 800302e:	0003      	movs	r3, r0
 8003030:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe ff8a 	bl	8001f4c <HAL_GetTick>
 8003038:	0002      	movs	r2, r0
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e054      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003046:	4b09      	ldr	r3, [pc, #36]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	2380      	movs	r3, #128	@ 0x80
 800304c:	049b      	lsls	r3, r3, #18
 800304e:	4013      	ands	r3, r2
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x644>
 8003052:	e04c      	b.n	80030ee <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003054:	4b05      	ldr	r3, [pc, #20]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b04      	ldr	r3, [pc, #16]	@ (800306c <HAL_RCC_OscConfig+0x67c>)
 800305a:	4908      	ldr	r1, [pc, #32]	@ (800307c <HAL_RCC_OscConfig+0x68c>)
 800305c:	400a      	ands	r2, r1
 800305e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe ff74 	bl	8001f4c <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003068:	e015      	b.n	8003096 <HAL_RCC_OscConfig+0x6a6>
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	40021000 	.word	0x40021000
 8003070:	00001388 	.word	0x00001388
 8003074:	efffffff 	.word	0xefffffff
 8003078:	fffeffff 	.word	0xfffeffff
 800307c:	feffffff 	.word	0xfeffffff
 8003080:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe ff62 	bl	8001f4c <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e02c      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003096:	4b18      	ldr	r3, [pc, #96]	@ (80030f8 <HAL_RCC_OscConfig+0x708>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	2380      	movs	r3, #128	@ 0x80
 800309c:	049b      	lsls	r3, r3, #18
 800309e:	4013      	ands	r3, r2
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x694>
 80030a2:	e024      	b.n	80030ee <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e01f      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80030b0:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <HAL_RCC_OscConfig+0x708>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80030b6:	4b10      	ldr	r3, [pc, #64]	@ (80030f8 <HAL_RCC_OscConfig+0x708>)
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	23c0      	movs	r3, #192	@ 0xc0
 80030c0:	025b      	lsls	r3, r3, #9
 80030c2:	401a      	ands	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d10e      	bne.n	80030ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	220f      	movs	r2, #15
 80030d0:	401a      	ands	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	23f0      	movs	r3, #240	@ 0xf0
 80030de:	039b      	lsls	r3, r3, #14
 80030e0:	401a      	ands	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b008      	add	sp, #32
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0bf      	b.n	8003290 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003110:	4b61      	ldr	r3, [pc, #388]	@ (8003298 <HAL_RCC_ClockConfig+0x19c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2201      	movs	r2, #1
 8003116:	4013      	ands	r3, r2
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d911      	bls.n	8003142 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b5e      	ldr	r3, [pc, #376]	@ (8003298 <HAL_RCC_ClockConfig+0x19c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	4393      	bics	r3, r2
 8003126:	0019      	movs	r1, r3
 8003128:	4b5b      	ldr	r3, [pc, #364]	@ (8003298 <HAL_RCC_ClockConfig+0x19c>)
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003130:	4b59      	ldr	r3, [pc, #356]	@ (8003298 <HAL_RCC_ClockConfig+0x19c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d001      	beq.n	8003142 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0a6      	b.n	8003290 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2202      	movs	r2, #2
 8003148:	4013      	ands	r3, r2
 800314a:	d015      	beq.n	8003178 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2204      	movs	r2, #4
 8003152:	4013      	ands	r3, r2
 8003154:	d006      	beq.n	8003164 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003156:	4b51      	ldr	r3, [pc, #324]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	4b50      	ldr	r3, [pc, #320]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 800315c:	21e0      	movs	r1, #224	@ 0xe0
 800315e:	00c9      	lsls	r1, r1, #3
 8003160:	430a      	orrs	r2, r1
 8003162:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b4d      	ldr	r3, [pc, #308]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	22f0      	movs	r2, #240	@ 0xf0
 800316a:	4393      	bics	r3, r2
 800316c:	0019      	movs	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	4b4a      	ldr	r3, [pc, #296]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 8003174:	430a      	orrs	r2, r1
 8003176:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2201      	movs	r2, #1
 800317e:	4013      	ands	r3, r2
 8003180:	d04c      	beq.n	800321c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b44      	ldr	r3, [pc, #272]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	029b      	lsls	r3, r3, #10
 8003192:	4013      	ands	r3, r2
 8003194:	d120      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e07a      	b.n	8003290 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a2:	4b3e      	ldr	r3, [pc, #248]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	2380      	movs	r3, #128	@ 0x80
 80031a8:	049b      	lsls	r3, r3, #18
 80031aa:	4013      	ands	r3, r2
 80031ac:	d114      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e06e      	b.n	8003290 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80031ba:	4b38      	ldr	r3, [pc, #224]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 80031bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	029b      	lsls	r3, r3, #10
 80031c2:	4013      	ands	r3, r2
 80031c4:	d108      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e062      	b.n	8003290 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ca:	4b34      	ldr	r3, [pc, #208]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2202      	movs	r2, #2
 80031d0:	4013      	ands	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e05b      	b.n	8003290 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d8:	4b30      	ldr	r3, [pc, #192]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2203      	movs	r2, #3
 80031de:	4393      	bics	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	4b2d      	ldr	r3, [pc, #180]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ec:	f7fe feae 	bl	8001f4c <HAL_GetTick>
 80031f0:	0003      	movs	r3, r0
 80031f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f4:	e009      	b.n	800320a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f6:	f7fe fea9 	bl	8001f4c <HAL_GetTick>
 80031fa:	0002      	movs	r2, r0
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	4a27      	ldr	r2, [pc, #156]	@ (80032a0 <HAL_RCC_ClockConfig+0x1a4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e042      	b.n	8003290 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	4b24      	ldr	r3, [pc, #144]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	220c      	movs	r2, #12
 8003210:	401a      	ands	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	429a      	cmp	r2, r3
 800321a:	d1ec      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800321c:	4b1e      	ldr	r3, [pc, #120]	@ (8003298 <HAL_RCC_ClockConfig+0x19c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2201      	movs	r2, #1
 8003222:	4013      	ands	r3, r2
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d211      	bcs.n	800324e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <HAL_RCC_ClockConfig+0x19c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2201      	movs	r2, #1
 8003230:	4393      	bics	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <HAL_RCC_ClockConfig+0x19c>)
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323c:	4b16      	ldr	r3, [pc, #88]	@ (8003298 <HAL_RCC_ClockConfig+0x19c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2201      	movs	r2, #1
 8003242:	4013      	ands	r3, r2
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d001      	beq.n	800324e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e020      	b.n	8003290 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2204      	movs	r2, #4
 8003254:	4013      	ands	r3, r2
 8003256:	d009      	beq.n	800326c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b10      	ldr	r3, [pc, #64]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a11      	ldr	r2, [pc, #68]	@ (80032a4 <HAL_RCC_ClockConfig+0x1a8>)
 800325e:	4013      	ands	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 8003268:	430a      	orrs	r2, r1
 800326a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800326c:	f000 f860 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 8003270:	0001      	movs	r1, r0
 8003272:	4b0a      	ldr	r3, [pc, #40]	@ (800329c <HAL_RCC_ClockConfig+0x1a0>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	220f      	movs	r2, #15
 800327a:	4013      	ands	r3, r2
 800327c:	4a0a      	ldr	r2, [pc, #40]	@ (80032a8 <HAL_RCC_ClockConfig+0x1ac>)
 800327e:	5cd3      	ldrb	r3, [r2, r3]
 8003280:	000a      	movs	r2, r1
 8003282:	40da      	lsrs	r2, r3
 8003284:	4b09      	ldr	r3, [pc, #36]	@ (80032ac <HAL_RCC_ClockConfig+0x1b0>)
 8003286:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003288:	2003      	movs	r0, #3
 800328a:	f7fe fe19 	bl	8001ec0 <HAL_InitTick>
  
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	b004      	add	sp, #16
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40022000 	.word	0x40022000
 800329c:	40021000 	.word	0x40021000
 80032a0:	00001388 	.word	0x00001388
 80032a4:	fffff8ff 	.word	0xfffff8ff
 80032a8:	080059f0 	.word	0x080059f0
 80032ac:	2000003c 	.word	0x2000003c

080032b0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	@ 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80032bc:	2014      	movs	r0, #20
 80032be:	183b      	adds	r3, r7, r0
 80032c0:	2202      	movs	r2, #2
 80032c2:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80032c4:	183b      	adds	r3, r7, r0
 80032c6:	2203      	movs	r2, #3
 80032c8:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 80032ca:	183b      	adds	r3, r7, r0
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
  gpio.Pin       = MCO1_PIN;
 80032d0:	183b      	adds	r3, r7, r0
 80032d2:	2280      	movs	r2, #128	@ 0x80
 80032d4:	0052      	lsls	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
  gpio.Alternate = GPIO_AF0_MCO;
 80032d8:	183b      	adds	r3, r7, r0
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80032de:	4b12      	ldr	r3, [pc, #72]	@ (8003328 <HAL_RCC_MCOConfig+0x78>)
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <HAL_RCC_MCOConfig+0x78>)
 80032e4:	2180      	movs	r1, #128	@ 0x80
 80032e6:	0289      	lsls	r1, r1, #10
 80032e8:	430a      	orrs	r2, r1
 80032ea:	615a      	str	r2, [r3, #20]
 80032ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003328 <HAL_RCC_MCOConfig+0x78>)
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	2380      	movs	r3, #128	@ 0x80
 80032f2:	029b      	lsls	r3, r3, #10
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80032fa:	183a      	adds	r2, r7, r0
 80032fc:	2390      	movs	r3, #144	@ 0x90
 80032fe:	05db      	lsls	r3, r3, #23
 8003300:	0011      	movs	r1, r2
 8003302:	0018      	movs	r0, r3
 8003304:	f7ff fa0c 	bl	8002720 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003308:	4b07      	ldr	r3, [pc, #28]	@ (8003328 <HAL_RCC_MCOConfig+0x78>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4a07      	ldr	r2, [pc, #28]	@ (800332c <HAL_RCC_MCOConfig+0x7c>)
 800330e:	4013      	ands	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	431a      	orrs	r2, r3
 8003318:	4b03      	ldr	r3, [pc, #12]	@ (8003328 <HAL_RCC_MCOConfig+0x78>)
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b00a      	add	sp, #40	@ 0x28
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	40021000 	.word	0x40021000
 800332c:	80ffffff 	.word	0x80ffffff

08003330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800334a:	4b2d      	ldr	r3, [pc, #180]	@ (8003400 <HAL_RCC_GetSysClockFreq+0xd0>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	220c      	movs	r2, #12
 8003354:	4013      	ands	r3, r2
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d046      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0xb8>
 800335a:	d848      	bhi.n	80033ee <HAL_RCC_GetSysClockFreq+0xbe>
 800335c:	2b04      	cmp	r3, #4
 800335e:	d002      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x36>
 8003360:	2b08      	cmp	r3, #8
 8003362:	d003      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x3c>
 8003364:	e043      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003366:	4b27      	ldr	r3, [pc, #156]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003368:	613b      	str	r3, [r7, #16]
      break;
 800336a:	e043      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	0c9b      	lsrs	r3, r3, #18
 8003370:	220f      	movs	r2, #15
 8003372:	4013      	ands	r3, r2
 8003374:	4a24      	ldr	r2, [pc, #144]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003376:	5cd3      	ldrb	r3, [r2, r3]
 8003378:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800337a:	4b21      	ldr	r3, [pc, #132]	@ (8003400 <HAL_RCC_GetSysClockFreq+0xd0>)
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	220f      	movs	r2, #15
 8003380:	4013      	ands	r3, r2
 8003382:	4a22      	ldr	r2, [pc, #136]	@ (800340c <HAL_RCC_GetSysClockFreq+0xdc>)
 8003384:	5cd3      	ldrb	r3, [r2, r3]
 8003386:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	23c0      	movs	r3, #192	@ 0xc0
 800338c:	025b      	lsls	r3, r3, #9
 800338e:	401a      	ands	r2, r3
 8003390:	2380      	movs	r3, #128	@ 0x80
 8003392:	025b      	lsls	r3, r3, #9
 8003394:	429a      	cmp	r2, r3
 8003396:	d109      	bne.n	80033ac <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	481a      	ldr	r0, [pc, #104]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xd4>)
 800339c:	f7fc feb4 	bl	8000108 <__udivsi3>
 80033a0:	0003      	movs	r3, r0
 80033a2:	001a      	movs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4353      	muls	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	e01a      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	23c0      	movs	r3, #192	@ 0xc0
 80033b0:	025b      	lsls	r3, r3, #9
 80033b2:	401a      	ands	r2, r3
 80033b4:	23c0      	movs	r3, #192	@ 0xc0
 80033b6:	025b      	lsls	r3, r3, #9
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d109      	bne.n	80033d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4814      	ldr	r0, [pc, #80]	@ (8003410 <HAL_RCC_GetSysClockFreq+0xe0>)
 80033c0:	f7fc fea2 	bl	8000108 <__udivsi3>
 80033c4:	0003      	movs	r3, r0
 80033c6:	001a      	movs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4353      	muls	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	480c      	ldr	r0, [pc, #48]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033d4:	f7fc fe98 	bl	8000108 <__udivsi3>
 80033d8:	0003      	movs	r3, r0
 80033da:	001a      	movs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4353      	muls	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	613b      	str	r3, [r7, #16]
      break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80033e8:	4b09      	ldr	r3, [pc, #36]	@ (8003410 <HAL_RCC_GetSysClockFreq+0xe0>)
 80033ea:	613b      	str	r3, [r7, #16]
      break;
 80033ec:	e002      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033ee:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033f0:	613b      	str	r3, [r7, #16]
      break;
 80033f2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80033f4:	693b      	ldr	r3, [r7, #16]
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b006      	add	sp, #24
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			@ (mov r8, r8)
 8003400:	40021000 	.word	0x40021000
 8003404:	007a1200 	.word	0x007a1200
 8003408:	08005a08 	.word	0x08005a08
 800340c:	08005a18 	.word	0x08005a18
 8003410:	02dc6c00 	.word	0x02dc6c00

08003414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003418:	4b02      	ldr	r3, [pc, #8]	@ (8003424 <HAL_RCC_GetHCLKFreq+0x10>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	2000003c 	.word	0x2000003c

08003428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800342c:	f7ff fff2 	bl	8003414 <HAL_RCC_GetHCLKFreq>
 8003430:	0001      	movs	r1, r0
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	2207      	movs	r2, #7
 800343a:	4013      	ands	r3, r2
 800343c:	4a04      	ldr	r2, [pc, #16]	@ (8003450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800343e:	5cd3      	ldrb	r3, [r2, r3]
 8003440:	40d9      	lsrs	r1, r3
 8003442:	000b      	movs	r3, r1
}    
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	40021000 	.word	0x40021000
 8003450:	08005a00 	.word	0x08005a00

08003454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e042      	b.n	80034ec <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	223d      	movs	r2, #61	@ 0x3d
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223c      	movs	r2, #60	@ 0x3c
 8003476:	2100      	movs	r1, #0
 8003478:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	0018      	movs	r0, r3
 800347e:	f7fe fa53 	bl	8001928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	223d      	movs	r2, #61	@ 0x3d
 8003486:	2102      	movs	r1, #2
 8003488:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	0019      	movs	r1, r3
 8003494:	0010      	movs	r0, r2
 8003496:	f000 fe39 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2246      	movs	r2, #70	@ 0x46
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	223e      	movs	r2, #62	@ 0x3e
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	223f      	movs	r2, #63	@ 0x3f
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2240      	movs	r2, #64	@ 0x40
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2241      	movs	r2, #65	@ 0x41
 80034be:	2101      	movs	r1, #1
 80034c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2242      	movs	r2, #66	@ 0x42
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2243      	movs	r2, #67	@ 0x43
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2244      	movs	r2, #68	@ 0x44
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2245      	movs	r2, #69	@ 0x45
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	223d      	movs	r2, #61	@ 0x3d
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e042      	b.n	800358c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	223d      	movs	r2, #61	@ 0x3d
 800350a:	5c9b      	ldrb	r3, [r3, r2]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d107      	bne.n	8003522 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	223c      	movs	r2, #60	@ 0x3c
 8003516:	2100      	movs	r1, #0
 8003518:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	0018      	movs	r0, r3
 800351e:	f000 f839 	bl	8003594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	223d      	movs	r2, #61	@ 0x3d
 8003526:	2102      	movs	r1, #2
 8003528:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3304      	adds	r3, #4
 8003532:	0019      	movs	r1, r3
 8003534:	0010      	movs	r0, r2
 8003536:	f000 fde9 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2246      	movs	r2, #70	@ 0x46
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	223e      	movs	r2, #62	@ 0x3e
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	223f      	movs	r2, #63	@ 0x3f
 800354e:	2101      	movs	r1, #1
 8003550:	5499      	strb	r1, [r3, r2]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2240      	movs	r2, #64	@ 0x40
 8003556:	2101      	movs	r1, #1
 8003558:	5499      	strb	r1, [r3, r2]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2241      	movs	r2, #65	@ 0x41
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2242      	movs	r2, #66	@ 0x42
 8003566:	2101      	movs	r1, #1
 8003568:	5499      	strb	r1, [r3, r2]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2243      	movs	r2, #67	@ 0x43
 800356e:	2101      	movs	r1, #1
 8003570:	5499      	strb	r1, [r3, r2]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2244      	movs	r2, #68	@ 0x44
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2245      	movs	r2, #69	@ 0x45
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	223d      	movs	r2, #61	@ 0x3d
 8003586:	2101      	movs	r1, #1
 8003588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800359c:	46c0      	nop			@ (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d108      	bne.n	80035c6 <HAL_TIM_PWM_Start+0x22>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	223e      	movs	r2, #62	@ 0x3e
 80035b8:	5c9b      	ldrb	r3, [r3, r2]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	1e5a      	subs	r2, r3, #1
 80035c0:	4193      	sbcs	r3, r2
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	e01f      	b.n	8003606 <HAL_TIM_PWM_Start+0x62>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d108      	bne.n	80035de <HAL_TIM_PWM_Start+0x3a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	223f      	movs	r2, #63	@ 0x3f
 80035d0:	5c9b      	ldrb	r3, [r3, r2]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	1e5a      	subs	r2, r3, #1
 80035d8:	4193      	sbcs	r3, r2
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	e013      	b.n	8003606 <HAL_TIM_PWM_Start+0x62>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d108      	bne.n	80035f6 <HAL_TIM_PWM_Start+0x52>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2240      	movs	r2, #64	@ 0x40
 80035e8:	5c9b      	ldrb	r3, [r3, r2]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	1e5a      	subs	r2, r3, #1
 80035f0:	4193      	sbcs	r3, r2
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e007      	b.n	8003606 <HAL_TIM_PWM_Start+0x62>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2241      	movs	r2, #65	@ 0x41
 80035fa:	5c9b      	ldrb	r3, [r3, r2]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	1e5a      	subs	r2, r3, #1
 8003602:	4193      	sbcs	r3, r2
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06a      	b.n	80036e4 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Start+0x7a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	223e      	movs	r2, #62	@ 0x3e
 8003618:	2102      	movs	r1, #2
 800361a:	5499      	strb	r1, [r3, r2]
 800361c:	e013      	b.n	8003646 <HAL_TIM_PWM_Start+0xa2>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Start+0x8a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	223f      	movs	r2, #63	@ 0x3f
 8003628:	2102      	movs	r1, #2
 800362a:	5499      	strb	r1, [r3, r2]
 800362c:	e00b      	b.n	8003646 <HAL_TIM_PWM_Start+0xa2>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d104      	bne.n	800363e <HAL_TIM_PWM_Start+0x9a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2240      	movs	r2, #64	@ 0x40
 8003638:	2102      	movs	r1, #2
 800363a:	5499      	strb	r1, [r3, r2]
 800363c:	e003      	b.n	8003646 <HAL_TIM_PWM_Start+0xa2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2241      	movs	r2, #65	@ 0x41
 8003642:	2102      	movs	r1, #2
 8003644:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6839      	ldr	r1, [r7, #0]
 800364c:	2201      	movs	r2, #1
 800364e:	0018      	movs	r0, r3
 8003650:	f001 f96a 	bl	8004928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a24      	ldr	r2, [pc, #144]	@ (80036ec <HAL_TIM_PWM_Start+0x148>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d009      	beq.n	8003672 <HAL_TIM_PWM_Start+0xce>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a23      	ldr	r2, [pc, #140]	@ (80036f0 <HAL_TIM_PWM_Start+0x14c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_TIM_PWM_Start+0xce>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a21      	ldr	r2, [pc, #132]	@ (80036f4 <HAL_TIM_PWM_Start+0x150>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d101      	bne.n	8003676 <HAL_TIM_PWM_Start+0xd2>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_TIM_PWM_Start+0xd4>
 8003676:	2300      	movs	r3, #0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2180      	movs	r1, #128	@ 0x80
 8003688:	0209      	lsls	r1, r1, #8
 800368a:	430a      	orrs	r2, r1
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a16      	ldr	r2, [pc, #88]	@ (80036ec <HAL_TIM_PWM_Start+0x148>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00a      	beq.n	80036ae <HAL_TIM_PWM_Start+0x10a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	2380      	movs	r3, #128	@ 0x80
 800369e:	05db      	lsls	r3, r3, #23
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d004      	beq.n	80036ae <HAL_TIM_PWM_Start+0x10a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a13      	ldr	r2, [pc, #76]	@ (80036f8 <HAL_TIM_PWM_Start+0x154>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d111      	bne.n	80036d2 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2207      	movs	r2, #7
 80036b6:	4013      	ands	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d010      	beq.n	80036e2 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2101      	movs	r1, #1
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d0:	e007      	b.n	80036e2 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2101      	movs	r1, #1
 80036de:	430a      	orrs	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b004      	add	sp, #16
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40014400 	.word	0x40014400
 80036f4:	40014800 	.word	0x40014800
 80036f8:	40000400 	.word	0x40000400

080036fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e042      	b.n	8003794 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	223d      	movs	r2, #61	@ 0x3d
 8003712:	5c9b      	ldrb	r3, [r3, r2]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d107      	bne.n	800372a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	223c      	movs	r2, #60	@ 0x3c
 800371e:	2100      	movs	r1, #0
 8003720:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	0018      	movs	r0, r3
 8003726:	f000 f839 	bl	800379c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	223d      	movs	r2, #61	@ 0x3d
 800372e:	2102      	movs	r1, #2
 8003730:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	0019      	movs	r1, r3
 800373c:	0010      	movs	r0, r2
 800373e:	f000 fce5 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2246      	movs	r2, #70	@ 0x46
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	223e      	movs	r2, #62	@ 0x3e
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	223f      	movs	r2, #63	@ 0x3f
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2240      	movs	r2, #64	@ 0x40
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2241      	movs	r2, #65	@ 0x41
 8003766:	2101      	movs	r1, #1
 8003768:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2242      	movs	r2, #66	@ 0x42
 800376e:	2101      	movs	r1, #1
 8003770:	5499      	strb	r1, [r3, r2]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2243      	movs	r2, #67	@ 0x43
 8003776:	2101      	movs	r1, #1
 8003778:	5499      	strb	r1, [r3, r2]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2244      	movs	r2, #68	@ 0x44
 800377e:	2101      	movs	r1, #1
 8003780:	5499      	strb	r1, [r3, r2]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2245      	movs	r2, #69	@ 0x45
 8003786:	2101      	movs	r1, #1
 8003788:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	223d      	movs	r2, #61	@ 0x3d
 800378e:	2101      	movs	r1, #1
 8003790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	0018      	movs	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037a4:	46c0      	nop			@ (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b002      	add	sp, #8
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037b6:	230f      	movs	r3, #15
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_IC_Start_IT+0x22>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	223e      	movs	r2, #62	@ 0x3e
 80037c8:	5c9b      	ldrb	r3, [r3, r2]
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	e013      	b.n	80037f6 <HAL_TIM_IC_Start_IT+0x4a>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d104      	bne.n	80037de <HAL_TIM_IC_Start_IT+0x32>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	223f      	movs	r2, #63	@ 0x3f
 80037d8:	5c9b      	ldrb	r3, [r3, r2]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	e00b      	b.n	80037f6 <HAL_TIM_IC_Start_IT+0x4a>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d104      	bne.n	80037ee <HAL_TIM_IC_Start_IT+0x42>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2240      	movs	r2, #64	@ 0x40
 80037e8:	5c9b      	ldrb	r3, [r3, r2]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e003      	b.n	80037f6 <HAL_TIM_IC_Start_IT+0x4a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2241      	movs	r2, #65	@ 0x41
 80037f2:	5c9b      	ldrb	r3, [r3, r2]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	220e      	movs	r2, #14
 80037f8:	18ba      	adds	r2, r7, r2
 80037fa:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d104      	bne.n	800380c <HAL_TIM_IC_Start_IT+0x60>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2242      	movs	r2, #66	@ 0x42
 8003806:	5c9b      	ldrb	r3, [r3, r2]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	e013      	b.n	8003834 <HAL_TIM_IC_Start_IT+0x88>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b04      	cmp	r3, #4
 8003810:	d104      	bne.n	800381c <HAL_TIM_IC_Start_IT+0x70>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2243      	movs	r2, #67	@ 0x43
 8003816:	5c9b      	ldrb	r3, [r3, r2]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e00b      	b.n	8003834 <HAL_TIM_IC_Start_IT+0x88>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b08      	cmp	r3, #8
 8003820:	d104      	bne.n	800382c <HAL_TIM_IC_Start_IT+0x80>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2244      	movs	r2, #68	@ 0x44
 8003826:	5c9b      	ldrb	r3, [r3, r2]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e003      	b.n	8003834 <HAL_TIM_IC_Start_IT+0x88>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2245      	movs	r2, #69	@ 0x45
 8003830:	5c9b      	ldrb	r3, [r3, r2]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	210d      	movs	r1, #13
 8003836:	187a      	adds	r2, r7, r1
 8003838:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800383a:	230e      	movs	r3, #14
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d103      	bne.n	800384c <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003844:	187b      	adds	r3, r7, r1
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d001      	beq.n	8003850 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0ac      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d104      	bne.n	8003860 <HAL_TIM_IC_Start_IT+0xb4>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	223e      	movs	r2, #62	@ 0x3e
 800385a:	2102      	movs	r1, #2
 800385c:	5499      	strb	r1, [r3, r2]
 800385e:	e013      	b.n	8003888 <HAL_TIM_IC_Start_IT+0xdc>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b04      	cmp	r3, #4
 8003864:	d104      	bne.n	8003870 <HAL_TIM_IC_Start_IT+0xc4>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	223f      	movs	r2, #63	@ 0x3f
 800386a:	2102      	movs	r1, #2
 800386c:	5499      	strb	r1, [r3, r2]
 800386e:	e00b      	b.n	8003888 <HAL_TIM_IC_Start_IT+0xdc>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b08      	cmp	r3, #8
 8003874:	d104      	bne.n	8003880 <HAL_TIM_IC_Start_IT+0xd4>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2240      	movs	r2, #64	@ 0x40
 800387a:	2102      	movs	r1, #2
 800387c:	5499      	strb	r1, [r3, r2]
 800387e:	e003      	b.n	8003888 <HAL_TIM_IC_Start_IT+0xdc>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2241      	movs	r2, #65	@ 0x41
 8003884:	2102      	movs	r1, #2
 8003886:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d104      	bne.n	8003898 <HAL_TIM_IC_Start_IT+0xec>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2242      	movs	r2, #66	@ 0x42
 8003892:	2102      	movs	r1, #2
 8003894:	5499      	strb	r1, [r3, r2]
 8003896:	e013      	b.n	80038c0 <HAL_TIM_IC_Start_IT+0x114>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d104      	bne.n	80038a8 <HAL_TIM_IC_Start_IT+0xfc>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2243      	movs	r2, #67	@ 0x43
 80038a2:	2102      	movs	r1, #2
 80038a4:	5499      	strb	r1, [r3, r2]
 80038a6:	e00b      	b.n	80038c0 <HAL_TIM_IC_Start_IT+0x114>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d104      	bne.n	80038b8 <HAL_TIM_IC_Start_IT+0x10c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2244      	movs	r2, #68	@ 0x44
 80038b2:	2102      	movs	r1, #2
 80038b4:	5499      	strb	r1, [r3, r2]
 80038b6:	e003      	b.n	80038c0 <HAL_TIM_IC_Start_IT+0x114>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2245      	movs	r2, #69	@ 0x45
 80038bc:	2102      	movs	r1, #2
 80038be:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b0c      	cmp	r3, #12
 80038c4:	d02a      	beq.n	800391c <HAL_TIM_IC_Start_IT+0x170>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b0c      	cmp	r3, #12
 80038ca:	d830      	bhi.n	800392e <HAL_TIM_IC_Start_IT+0x182>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d01b      	beq.n	800390a <HAL_TIM_IC_Start_IT+0x15e>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d82a      	bhi.n	800392e <HAL_TIM_IC_Start_IT+0x182>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IC_Start_IT+0x13a>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d009      	beq.n	80038f8 <HAL_TIM_IC_Start_IT+0x14c>
 80038e4:	e023      	b.n	800392e <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2102      	movs	r1, #2
 80038f2:	430a      	orrs	r2, r1
 80038f4:	60da      	str	r2, [r3, #12]
      break;
 80038f6:	e01f      	b.n	8003938 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2104      	movs	r1, #4
 8003904:	430a      	orrs	r2, r1
 8003906:	60da      	str	r2, [r3, #12]
      break;
 8003908:	e016      	b.n	8003938 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2108      	movs	r1, #8
 8003916:	430a      	orrs	r2, r1
 8003918:	60da      	str	r2, [r3, #12]
      break;
 800391a:	e00d      	b.n	8003938 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2110      	movs	r1, #16
 8003928:	430a      	orrs	r2, r1
 800392a:	60da      	str	r2, [r3, #12]
      break;
 800392c:	e004      	b.n	8003938 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 800392e:	230f      	movs	r3, #15
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
      break;
 8003936:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003938:	230f      	movs	r3, #15
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d130      	bne.n	80039a4 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6839      	ldr	r1, [r7, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	0018      	movs	r0, r3
 800394c:	f000 ffec 	bl	8004928 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a17      	ldr	r2, [pc, #92]	@ (80039b4 <HAL_TIM_IC_Start_IT+0x208>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00a      	beq.n	8003970 <HAL_TIM_IC_Start_IT+0x1c4>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	2380      	movs	r3, #128	@ 0x80
 8003960:	05db      	lsls	r3, r3, #23
 8003962:	429a      	cmp	r2, r3
 8003964:	d004      	beq.n	8003970 <HAL_TIM_IC_Start_IT+0x1c4>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a13      	ldr	r2, [pc, #76]	@ (80039b8 <HAL_TIM_IC_Start_IT+0x20c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d111      	bne.n	8003994 <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2207      	movs	r2, #7
 8003978:	4013      	ands	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b06      	cmp	r3, #6
 8003980:	d010      	beq.n	80039a4 <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2101      	movs	r1, #1
 800398e:	430a      	orrs	r2, r1
 8003990:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003992:	e007      	b.n	80039a4 <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2101      	movs	r1, #1
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80039a4:	230f      	movs	r3, #15
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	781b      	ldrb	r3, [r3, #0]
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b004      	add	sp, #16
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40000400 	.word	0x40000400

080039bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2202      	movs	r2, #2
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d124      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2202      	movs	r2, #2
 80039da:	4013      	ands	r3, r2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d11d      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2203      	movs	r2, #3
 80039e6:	4252      	negs	r2, r2
 80039e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2203      	movs	r2, #3
 80039f8:	4013      	ands	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	0018      	movs	r0, r3
 8003a00:	f7fd ff0e 	bl	8001820 <HAL_TIM_IC_CaptureCallback>
 8003a04:	e007      	b.n	8003a16 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 fb67 	bl	80040dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 fb6b 	bl	80040ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2204      	movs	r2, #4
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d125      	bne.n	8003a76 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2204      	movs	r2, #4
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d11e      	bne.n	8003a76 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2205      	movs	r2, #5
 8003a3e:	4252      	negs	r2, r2
 8003a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	23c0      	movs	r3, #192	@ 0xc0
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4013      	ands	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f7fd fee1 	bl	8001820 <HAL_TIM_IC_CaptureCallback>
 8003a5e:	e007      	b.n	8003a70 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	0018      	movs	r0, r3
 8003a64:	f000 fb3a 	bl	80040dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f000 fb3e 	bl	80040ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d124      	bne.n	8003ace <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2208      	movs	r2, #8
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d11d      	bne.n	8003ace <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2209      	movs	r2, #9
 8003a98:	4252      	negs	r2, r2
 8003a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d004      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f7fd feb5 	bl	8001820 <HAL_TIM_IC_CaptureCallback>
 8003ab6:	e007      	b.n	8003ac8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 fb0e 	bl	80040dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f000 fb12 	bl	80040ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b10      	cmp	r3, #16
 8003ada:	d125      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d11e      	bne.n	8003b28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2211      	movs	r2, #17
 8003af0:	4252      	negs	r2, r2
 8003af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2208      	movs	r2, #8
 8003af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	23c0      	movs	r3, #192	@ 0xc0
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4013      	ands	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f7fd fe88 	bl	8001820 <HAL_TIM_IC_CaptureCallback>
 8003b10:	e007      	b.n	8003b22 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 fae1 	bl	80040dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 fae5 	bl	80040ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10f      	bne.n	8003b56 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d108      	bne.n	8003b56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	4252      	negs	r2, r2
 8003b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f000 fabb 	bl	80040cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2280      	movs	r2, #128	@ 0x80
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b80      	cmp	r3, #128	@ 0x80
 8003b62:	d10f      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2280      	movs	r2, #128	@ 0x80
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b80      	cmp	r3, #128	@ 0x80
 8003b70:	d108      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2281      	movs	r2, #129	@ 0x81
 8003b78:	4252      	negs	r2, r2
 8003b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f000 ffb4 	bl	8004aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2240      	movs	r2, #64	@ 0x40
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b40      	cmp	r3, #64	@ 0x40
 8003b90:	d10f      	bne.n	8003bb2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2240      	movs	r2, #64	@ 0x40
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b40      	cmp	r3, #64	@ 0x40
 8003b9e:	d108      	bne.n	8003bb2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2241      	movs	r2, #65	@ 0x41
 8003ba6:	4252      	negs	r2, r2
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 faa5 	bl	80040fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d10f      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d108      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2221      	movs	r2, #33	@ 0x21
 8003bd4:	4252      	negs	r2, r2
 8003bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 ff7e 	bl	8004adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003be0:	46c0      	nop			@ (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf4:	2317      	movs	r3, #23
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	223c      	movs	r2, #60	@ 0x3c
 8003c00:	5c9b      	ldrb	r3, [r3, r2]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_IC_ConfigChannel+0x22>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e08c      	b.n	8003d24 <HAL_TIM_IC_ConfigChannel+0x13c>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	223c      	movs	r2, #60	@ 0x3c
 8003c0e:	2101      	movs	r1, #1
 8003c10:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d11b      	bne.n	8003c50 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003c28:	f000 fcc6 	bl	80045b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	210c      	movs	r1, #12
 8003c38:	438a      	bics	r2, r1
 8003c3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6999      	ldr	r1, [r3, #24]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	619a      	str	r2, [r3, #24]
 8003c4e:	e062      	b.n	8003d16 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d11c      	bne.n	8003c90 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003c66:	f000 fd2b 	bl	80046c0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	492d      	ldr	r1, [pc, #180]	@ (8003d2c <HAL_TIM_IC_ConfigChannel+0x144>)
 8003c76:	400a      	ands	r2, r1
 8003c78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6999      	ldr	r1, [r3, #24]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	021a      	lsls	r2, r3, #8
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	619a      	str	r2, [r3, #24]
 8003c8e:	e042      	b.n	8003d16 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d11b      	bne.n	8003cce <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003ca6:	f000 fd7f 	bl	80047a8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	210c      	movs	r1, #12
 8003cb6:	438a      	bics	r2, r1
 8003cb8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69d9      	ldr	r1, [r3, #28]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	61da      	str	r2, [r3, #28]
 8003ccc:	e023      	b.n	8003d16 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	d11c      	bne.n	8003d0e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003ce4:	f000 fda0 	bl	8004828 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	490e      	ldr	r1, [pc, #56]	@ (8003d2c <HAL_TIM_IC_ConfigChannel+0x144>)
 8003cf4:	400a      	ands	r2, r1
 8003cf6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69d9      	ldr	r1, [r3, #28]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	021a      	lsls	r2, r3, #8
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	61da      	str	r2, [r3, #28]
 8003d0c:	e003      	b.n	8003d16 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003d0e:	2317      	movs	r3, #23
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	2201      	movs	r2, #1
 8003d14:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	223c      	movs	r2, #60	@ 0x3c
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	5499      	strb	r1, [r3, r2]

  return status;
 8003d1e:	2317      	movs	r3, #23
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	781b      	ldrb	r3, [r3, #0]
}
 8003d24:	0018      	movs	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b006      	add	sp, #24
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	fffff3ff 	.word	0xfffff3ff

08003d30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3c:	2317      	movs	r3, #23
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	223c      	movs	r2, #60	@ 0x3c
 8003d48:	5c9b      	ldrb	r3, [r3, r2]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e0ad      	b.n	8003eae <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	223c      	movs	r2, #60	@ 0x3c
 8003d56:	2101      	movs	r1, #1
 8003d58:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b0c      	cmp	r3, #12
 8003d5e:	d100      	bne.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003d60:	e076      	b.n	8003e50 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	d900      	bls.n	8003d6a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003d68:	e095      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d04e      	beq.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0xde>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d900      	bls.n	8003d78 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003d76:	e08e      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d021      	beq.n	8003dc8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003d84:	e087      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	0011      	movs	r1, r2
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f000 fa32 	bl	80041f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2108      	movs	r1, #8
 8003da0:	430a      	orrs	r2, r1
 8003da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2104      	movs	r1, #4
 8003db0:	438a      	bics	r2, r1
 8003db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6999      	ldr	r1, [r3, #24]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	619a      	str	r2, [r3, #24]
      break;
 8003dc6:	e06b      	b.n	8003ea0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	0011      	movs	r1, r2
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f000 fa8f 	bl	80042f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2180      	movs	r1, #128	@ 0x80
 8003de2:	0109      	lsls	r1, r1, #4
 8003de4:	430a      	orrs	r2, r1
 8003de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4931      	ldr	r1, [pc, #196]	@ (8003eb8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003df4:	400a      	ands	r2, r1
 8003df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6999      	ldr	r1, [r3, #24]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	021a      	lsls	r2, r3, #8
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	619a      	str	r2, [r3, #24]
      break;
 8003e0c:	e048      	b.n	8003ea0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	0011      	movs	r1, r2
 8003e16:	0018      	movs	r0, r3
 8003e18:	f000 faea 	bl	80043f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2108      	movs	r1, #8
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2104      	movs	r1, #4
 8003e38:	438a      	bics	r2, r1
 8003e3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69d9      	ldr	r1, [r3, #28]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	61da      	str	r2, [r3, #28]
      break;
 8003e4e:	e027      	b.n	8003ea0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	0011      	movs	r1, r2
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f000 fb49 	bl	80044f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2180      	movs	r1, #128	@ 0x80
 8003e6a:	0109      	lsls	r1, r1, #4
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	490f      	ldr	r1, [pc, #60]	@ (8003eb8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69d9      	ldr	r1, [r3, #28]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	021a      	lsls	r2, r3, #8
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	61da      	str	r2, [r3, #28]
      break;
 8003e94:	e004      	b.n	8003ea0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003e96:	2317      	movs	r3, #23
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
      break;
 8003e9e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	223c      	movs	r2, #60	@ 0x3c
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5499      	strb	r1, [r3, r2]

  return status;
 8003ea8:	2317      	movs	r3, #23
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	781b      	ldrb	r3, [r3, #0]
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b006      	add	sp, #24
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	fffffbff 	.word	0xfffffbff

08003ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	230f      	movs	r3, #15
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	223c      	movs	r2, #60	@ 0x3c
 8003ed2:	5c9b      	ldrb	r3, [r3, r2]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_TIM_ConfigClockSource+0x20>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e0bc      	b.n	8004056 <HAL_TIM_ConfigClockSource+0x19a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	223c      	movs	r2, #60	@ 0x3c
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	223d      	movs	r2, #61	@ 0x3d
 8003ee8:	2102      	movs	r1, #2
 8003eea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2277      	movs	r2, #119	@ 0x77
 8003ef8:	4393      	bics	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4a58      	ldr	r2, [pc, #352]	@ (8004060 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2280      	movs	r2, #128	@ 0x80
 8003f12:	0192      	lsls	r2, r2, #6
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d040      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0xde>
 8003f18:	2280      	movs	r2, #128	@ 0x80
 8003f1a:	0192      	lsls	r2, r2, #6
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d900      	bls.n	8003f22 <HAL_TIM_ConfigClockSource+0x66>
 8003f20:	e088      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x178>
 8003f22:	2280      	movs	r2, #128	@ 0x80
 8003f24:	0152      	lsls	r2, r2, #5
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d100      	bne.n	8003f2c <HAL_TIM_ConfigClockSource+0x70>
 8003f2a:	e088      	b.n	800403e <HAL_TIM_ConfigClockSource+0x182>
 8003f2c:	2280      	movs	r2, #128	@ 0x80
 8003f2e:	0152      	lsls	r2, r2, #5
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d900      	bls.n	8003f36 <HAL_TIM_ConfigClockSource+0x7a>
 8003f34:	e07e      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x178>
 8003f36:	2b70      	cmp	r3, #112	@ 0x70
 8003f38:	d018      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0xb0>
 8003f3a:	d900      	bls.n	8003f3e <HAL_TIM_ConfigClockSource+0x82>
 8003f3c:	e07a      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x178>
 8003f3e:	2b60      	cmp	r3, #96	@ 0x60
 8003f40:	d04f      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x126>
 8003f42:	d900      	bls.n	8003f46 <HAL_TIM_ConfigClockSource+0x8a>
 8003f44:	e076      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x178>
 8003f46:	2b50      	cmp	r3, #80	@ 0x50
 8003f48:	d03b      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x106>
 8003f4a:	d900      	bls.n	8003f4e <HAL_TIM_ConfigClockSource+0x92>
 8003f4c:	e072      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x178>
 8003f4e:	2b40      	cmp	r3, #64	@ 0x40
 8003f50:	d057      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0x146>
 8003f52:	d900      	bls.n	8003f56 <HAL_TIM_ConfigClockSource+0x9a>
 8003f54:	e06e      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x178>
 8003f56:	2b30      	cmp	r3, #48	@ 0x30
 8003f58:	d063      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x166>
 8003f5a:	d86b      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x178>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d060      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x166>
 8003f60:	d868      	bhi.n	8004034 <HAL_TIM_ConfigClockSource+0x178>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d05d      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x166>
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d05b      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x166>
 8003f6a:	e063      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f7c:	f000 fcb4 	bl	80048e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2277      	movs	r2, #119	@ 0x77
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	609a      	str	r2, [r3, #8]
      break;
 8003f98:	e052      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003faa:	f000 fc9d 	bl	80048e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2180      	movs	r1, #128	@ 0x80
 8003fba:	01c9      	lsls	r1, r1, #7
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]
      break;
 8003fc0:	e03e      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fce:	001a      	movs	r2, r3
 8003fd0:	f000 fb48 	bl	8004664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2150      	movs	r1, #80	@ 0x50
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f000 fc6a 	bl	80048b4 <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e02e      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fee:	001a      	movs	r2, r3
 8003ff0:	f000 fba8 	bl	8004744 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2160      	movs	r1, #96	@ 0x60
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 fc5a 	bl	80048b4 <TIM_ITRx_SetConfig>
      break;
 8004000:	e01e      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800400e:	001a      	movs	r2, r3
 8004010:	f000 fb28 	bl	8004664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2140      	movs	r1, #64	@ 0x40
 800401a:	0018      	movs	r0, r3
 800401c:	f000 fc4a 	bl	80048b4 <TIM_ITRx_SetConfig>
      break;
 8004020:	e00e      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	0019      	movs	r1, r3
 800402c:	0010      	movs	r0, r2
 800402e:	f000 fc41 	bl	80048b4 <TIM_ITRx_SetConfig>
      break;
 8004032:	e005      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004034:	230f      	movs	r3, #15
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]
      break;
 800403c:	e000      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800403e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	223d      	movs	r2, #61	@ 0x3d
 8004044:	2101      	movs	r1, #1
 8004046:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	223c      	movs	r2, #60	@ 0x3c
 800404c:	2100      	movs	r1, #0
 800404e:	5499      	strb	r1, [r3, r2]

  return status;
 8004050:	230f      	movs	r3, #15
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	781b      	ldrb	r3, [r3, #0]
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	b004      	add	sp, #16
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	ffff00ff 	.word	0xffff00ff

08004064 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b0c      	cmp	r3, #12
 8004076:	d01e      	beq.n	80040b6 <HAL_TIM_ReadCapturedValue+0x52>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d820      	bhi.n	80040c0 <HAL_TIM_ReadCapturedValue+0x5c>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d013      	beq.n	80040ac <HAL_TIM_ReadCapturedValue+0x48>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b08      	cmp	r3, #8
 8004088:	d81a      	bhi.n	80040c0 <HAL_TIM_ReadCapturedValue+0x5c>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_TIM_ReadCapturedValue+0x34>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b04      	cmp	r3, #4
 8004094:	d005      	beq.n	80040a2 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8004096:	e013      	b.n	80040c0 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409e:	60fb      	str	r3, [r7, #12]
      break;
 80040a0:	e00f      	b.n	80040c2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a8:	60fb      	str	r3, [r7, #12]
      break;
 80040aa:	e00a      	b.n	80040c2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b2:	60fb      	str	r3, [r7, #12]
      break;
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	60fb      	str	r3, [r7, #12]
      break;
 80040be:	e000      	b.n	80040c2 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80040c0:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 80040c2:	68fb      	ldr	r3, [r7, #12]
}
 80040c4:	0018      	movs	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b004      	add	sp, #16
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b002      	add	sp, #8
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040e4:	46c0      	nop			@ (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b002      	add	sp, #8
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040f4:	46c0      	nop			@ (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b002      	add	sp, #8
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004104:	46c0      	nop			@ (mov r8, r8)
 8004106:	46bd      	mov	sp, r7
 8004108:	b002      	add	sp, #8
 800410a:	bd80      	pop	{r7, pc}

0800410c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a30      	ldr	r2, [pc, #192]	@ (80041e0 <TIM_Base_SetConfig+0xd4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d008      	beq.n	8004136 <TIM_Base_SetConfig+0x2a>
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	2380      	movs	r3, #128	@ 0x80
 8004128:	05db      	lsls	r3, r3, #23
 800412a:	429a      	cmp	r2, r3
 800412c:	d003      	beq.n	8004136 <TIM_Base_SetConfig+0x2a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2c      	ldr	r2, [pc, #176]	@ (80041e4 <TIM_Base_SetConfig+0xd8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d108      	bne.n	8004148 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2270      	movs	r2, #112	@ 0x70
 800413a:	4393      	bics	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a25      	ldr	r2, [pc, #148]	@ (80041e0 <TIM_Base_SetConfig+0xd4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d014      	beq.n	800417a <TIM_Base_SetConfig+0x6e>
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	2380      	movs	r3, #128	@ 0x80
 8004154:	05db      	lsls	r3, r3, #23
 8004156:	429a      	cmp	r2, r3
 8004158:	d00f      	beq.n	800417a <TIM_Base_SetConfig+0x6e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a21      	ldr	r2, [pc, #132]	@ (80041e4 <TIM_Base_SetConfig+0xd8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00b      	beq.n	800417a <TIM_Base_SetConfig+0x6e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a20      	ldr	r2, [pc, #128]	@ (80041e8 <TIM_Base_SetConfig+0xdc>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d007      	beq.n	800417a <TIM_Base_SetConfig+0x6e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a1f      	ldr	r2, [pc, #124]	@ (80041ec <TIM_Base_SetConfig+0xe0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_Base_SetConfig+0x6e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a1e      	ldr	r2, [pc, #120]	@ (80041f0 <TIM_Base_SetConfig+0xe4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d108      	bne.n	800418c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a1d      	ldr	r2, [pc, #116]	@ (80041f4 <TIM_Base_SetConfig+0xe8>)
 800417e:	4013      	ands	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2280      	movs	r2, #128	@ 0x80
 8004190:	4393      	bics	r3, r2
 8004192:	001a      	movs	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a0a      	ldr	r2, [pc, #40]	@ (80041e0 <TIM_Base_SetConfig+0xd4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d007      	beq.n	80041ca <TIM_Base_SetConfig+0xbe>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a0b      	ldr	r2, [pc, #44]	@ (80041ec <TIM_Base_SetConfig+0xe0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <TIM_Base_SetConfig+0xbe>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a0a      	ldr	r2, [pc, #40]	@ (80041f0 <TIM_Base_SetConfig+0xe4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d103      	bne.n	80041d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	615a      	str	r2, [r3, #20]
}
 80041d8:	46c0      	nop			@ (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b004      	add	sp, #16
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40002000 	.word	0x40002000
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800
 80041f4:	fffffcff 	.word	0xfffffcff

080041f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	2201      	movs	r2, #1
 8004208:	4393      	bics	r3, r2
 800420a:	001a      	movs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2270      	movs	r2, #112	@ 0x70
 8004226:	4393      	bics	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2203      	movs	r2, #3
 800422e:	4393      	bics	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2202      	movs	r2, #2
 8004240:	4393      	bics	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a23      	ldr	r2, [pc, #140]	@ (80042e0 <TIM_OC1_SetConfig+0xe8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <TIM_OC1_SetConfig+0x6e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a22      	ldr	r2, [pc, #136]	@ (80042e4 <TIM_OC1_SetConfig+0xec>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_OC1_SetConfig+0x6e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a21      	ldr	r2, [pc, #132]	@ (80042e8 <TIM_OC1_SetConfig+0xf0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d10c      	bne.n	8004280 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2208      	movs	r2, #8
 800426a:	4393      	bics	r3, r2
 800426c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2204      	movs	r2, #4
 800427c:	4393      	bics	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a17      	ldr	r2, [pc, #92]	@ (80042e0 <TIM_OC1_SetConfig+0xe8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d007      	beq.n	8004298 <TIM_OC1_SetConfig+0xa0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a16      	ldr	r2, [pc, #88]	@ (80042e4 <TIM_OC1_SetConfig+0xec>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d003      	beq.n	8004298 <TIM_OC1_SetConfig+0xa0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a15      	ldr	r2, [pc, #84]	@ (80042e8 <TIM_OC1_SetConfig+0xf0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d111      	bne.n	80042bc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4a14      	ldr	r2, [pc, #80]	@ (80042ec <TIM_OC1_SetConfig+0xf4>)
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4a13      	ldr	r2, [pc, #76]	@ (80042f0 <TIM_OC1_SetConfig+0xf8>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	46bd      	mov	sp, r7
 80042da:	b006      	add	sp, #24
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40014400 	.word	0x40014400
 80042e8:	40014800 	.word	0x40014800
 80042ec:	fffffeff 	.word	0xfffffeff
 80042f0:	fffffdff 	.word	0xfffffdff

080042f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	2210      	movs	r2, #16
 8004304:	4393      	bics	r3, r2
 8004306:	001a      	movs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a2c      	ldr	r2, [pc, #176]	@ (80043d4 <TIM_OC2_SetConfig+0xe0>)
 8004322:	4013      	ands	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4a2b      	ldr	r2, [pc, #172]	@ (80043d8 <TIM_OC2_SetConfig+0xe4>)
 800432a:	4013      	ands	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2220      	movs	r2, #32
 800433e:	4393      	bics	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a22      	ldr	r2, [pc, #136]	@ (80043dc <TIM_OC2_SetConfig+0xe8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d10d      	bne.n	8004372 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2280      	movs	r2, #128	@ 0x80
 800435a:	4393      	bics	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2240      	movs	r2, #64	@ 0x40
 800436e:	4393      	bics	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a19      	ldr	r2, [pc, #100]	@ (80043dc <TIM_OC2_SetConfig+0xe8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d007      	beq.n	800438a <TIM_OC2_SetConfig+0x96>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a18      	ldr	r2, [pc, #96]	@ (80043e0 <TIM_OC2_SetConfig+0xec>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d003      	beq.n	800438a <TIM_OC2_SetConfig+0x96>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a17      	ldr	r2, [pc, #92]	@ (80043e4 <TIM_OC2_SetConfig+0xf0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d113      	bne.n	80043b2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4a16      	ldr	r2, [pc, #88]	@ (80043e8 <TIM_OC2_SetConfig+0xf4>)
 800438e:	4013      	ands	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4a15      	ldr	r2, [pc, #84]	@ (80043ec <TIM_OC2_SetConfig+0xf8>)
 8004396:	4013      	ands	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	621a      	str	r2, [r3, #32]
}
 80043cc:	46c0      	nop			@ (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b006      	add	sp, #24
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	ffff8fff 	.word	0xffff8fff
 80043d8:	fffffcff 	.word	0xfffffcff
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40014400 	.word	0x40014400
 80043e4:	40014800 	.word	0x40014800
 80043e8:	fffffbff 	.word	0xfffffbff
 80043ec:	fffff7ff 	.word	0xfffff7ff

080043f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4a33      	ldr	r2, [pc, #204]	@ (80044cc <TIM_OC3_SetConfig+0xdc>)
 8004400:	401a      	ands	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2270      	movs	r2, #112	@ 0x70
 800441c:	4393      	bics	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2203      	movs	r2, #3
 8004424:	4393      	bics	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	4a26      	ldr	r2, [pc, #152]	@ (80044d0 <TIM_OC3_SetConfig+0xe0>)
 8004436:	4013      	ands	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a22      	ldr	r2, [pc, #136]	@ (80044d4 <TIM_OC3_SetConfig+0xe4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10d      	bne.n	800446a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4a21      	ldr	r2, [pc, #132]	@ (80044d8 <TIM_OC3_SetConfig+0xe8>)
 8004452:	4013      	ands	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	4a1d      	ldr	r2, [pc, #116]	@ (80044dc <TIM_OC3_SetConfig+0xec>)
 8004466:	4013      	ands	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a19      	ldr	r2, [pc, #100]	@ (80044d4 <TIM_OC3_SetConfig+0xe4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d007      	beq.n	8004482 <TIM_OC3_SetConfig+0x92>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a1a      	ldr	r2, [pc, #104]	@ (80044e0 <TIM_OC3_SetConfig+0xf0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d003      	beq.n	8004482 <TIM_OC3_SetConfig+0x92>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a19      	ldr	r2, [pc, #100]	@ (80044e4 <TIM_OC3_SetConfig+0xf4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d113      	bne.n	80044aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4a18      	ldr	r2, [pc, #96]	@ (80044e8 <TIM_OC3_SetConfig+0xf8>)
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4a17      	ldr	r2, [pc, #92]	@ (80044ec <TIM_OC3_SetConfig+0xfc>)
 800448e:	4013      	ands	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	621a      	str	r2, [r3, #32]
}
 80044c4:	46c0      	nop			@ (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b006      	add	sp, #24
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	fffffeff 	.word	0xfffffeff
 80044d0:	fffffdff 	.word	0xfffffdff
 80044d4:	40012c00 	.word	0x40012c00
 80044d8:	fffff7ff 	.word	0xfffff7ff
 80044dc:	fffffbff 	.word	0xfffffbff
 80044e0:	40014400 	.word	0x40014400
 80044e4:	40014800 	.word	0x40014800
 80044e8:	ffffefff 	.word	0xffffefff
 80044ec:	ffffdfff 	.word	0xffffdfff

080044f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4a26      	ldr	r2, [pc, #152]	@ (8004598 <TIM_OC4_SetConfig+0xa8>)
 8004500:	401a      	ands	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a20      	ldr	r2, [pc, #128]	@ (800459c <TIM_OC4_SetConfig+0xac>)
 800451c:	4013      	ands	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a1f      	ldr	r2, [pc, #124]	@ (80045a0 <TIM_OC4_SetConfig+0xb0>)
 8004524:	4013      	ands	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4a1b      	ldr	r2, [pc, #108]	@ (80045a4 <TIM_OC4_SetConfig+0xb4>)
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	031b      	lsls	r3, r3, #12
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a17      	ldr	r2, [pc, #92]	@ (80045a8 <TIM_OC4_SetConfig+0xb8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <TIM_OC4_SetConfig+0x70>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a16      	ldr	r2, [pc, #88]	@ (80045ac <TIM_OC4_SetConfig+0xbc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_OC4_SetConfig+0x70>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <TIM_OC4_SetConfig+0xc0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d109      	bne.n	8004574 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	4a14      	ldr	r2, [pc, #80]	@ (80045b4 <TIM_OC4_SetConfig+0xc4>)
 8004564:	4013      	ands	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	019b      	lsls	r3, r3, #6
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	621a      	str	r2, [r3, #32]
}
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	46bd      	mov	sp, r7
 8004592:	b006      	add	sp, #24
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	ffffefff 	.word	0xffffefff
 800459c:	ffff8fff 	.word	0xffff8fff
 80045a0:	fffffcff 	.word	0xfffffcff
 80045a4:	ffffdfff 	.word	0xffffdfff
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	40014400 	.word	0x40014400
 80045b0:	40014800 	.word	0x40014800
 80045b4:	ffffbfff 	.word	0xffffbfff

080045b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	2201      	movs	r2, #1
 80045cc:	4393      	bics	r3, r2
 80045ce:	001a      	movs	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4a1e      	ldr	r2, [pc, #120]	@ (800465c <TIM_TI1_SetConfig+0xa4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d008      	beq.n	80045fa <TIM_TI1_SetConfig+0x42>
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	2380      	movs	r3, #128	@ 0x80
 80045ec:	05db      	lsls	r3, r3, #23
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d003      	beq.n	80045fa <TIM_TI1_SetConfig+0x42>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004660 <TIM_TI1_SetConfig+0xa8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d101      	bne.n	80045fe <TIM_TI1_SetConfig+0x46>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <TIM_TI1_SetConfig+0x48>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2203      	movs	r2, #3
 8004608:	4393      	bics	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	e003      	b.n	800461e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2201      	movs	r2, #1
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	22f0      	movs	r2, #240	@ 0xf0
 8004622:	4393      	bics	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	22ff      	movs	r2, #255	@ 0xff
 800462c:	4013      	ands	r3, r2
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	220a      	movs	r2, #10
 8004638:	4393      	bics	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	220a      	movs	r2, #10
 8004640:	4013      	ands	r3, r2
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	621a      	str	r2, [r3, #32]
}
 8004654:	46c0      	nop			@ (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	b006      	add	sp, #24
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40012c00 	.word	0x40012c00
 8004660:	40000400 	.word	0x40000400

08004664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	2201      	movs	r2, #1
 800467c:	4393      	bics	r3, r2
 800467e:	001a      	movs	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	22f0      	movs	r2, #240	@ 0xf0
 800468e:	4393      	bics	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	220a      	movs	r2, #10
 80046a0:	4393      	bics	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	621a      	str	r2, [r3, #32]
}
 80046b8:	46c0      	nop			@ (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b006      	add	sp, #24
 80046be:	bd80      	pop	{r7, pc}

080046c0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	2210      	movs	r2, #16
 80046d4:	4393      	bics	r3, r2
 80046d6:	001a      	movs	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	4a14      	ldr	r2, [pc, #80]	@ (800473c <TIM_TI2_SetConfig+0x7c>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	4a10      	ldr	r2, [pc, #64]	@ (8004740 <TIM_TI2_SetConfig+0x80>)
 80046fe:	4013      	ands	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	031b      	lsls	r3, r3, #12
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	22a0      	movs	r2, #160	@ 0xa0
 8004714:	4393      	bics	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	22a0      	movs	r2, #160	@ 0xa0
 800471e:	4013      	ands	r3, r2
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	46c0      	nop			@ (mov r8, r8)
 8004734:	46bd      	mov	sp, r7
 8004736:	b006      	add	sp, #24
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	fffffcff 	.word	0xfffffcff
 8004740:	ffff0fff 	.word	0xffff0fff

08004744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	2210      	movs	r2, #16
 8004756:	4393      	bics	r3, r2
 8004758:	001a      	movs	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	4a0d      	ldr	r2, [pc, #52]	@ (80047a4 <TIM_TI2_ConfigInputStage+0x60>)
 800476e:	4013      	ands	r3, r2
 8004770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	031b      	lsls	r3, r3, #12
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	22a0      	movs	r2, #160	@ 0xa0
 8004780:	4393      	bics	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	b006      	add	sp, #24
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	ffff0fff 	.word	0xffff0fff

080047a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	4a19      	ldr	r2, [pc, #100]	@ (8004820 <TIM_TI3_SetConfig+0x78>)
 80047bc:	401a      	ands	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2203      	movs	r2, #3
 80047d2:	4393      	bics	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	22f0      	movs	r2, #240	@ 0xf0
 80047e2:	4393      	bics	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	22ff      	movs	r2, #255	@ 0xff
 80047ec:	4013      	ands	r3, r2
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	4a0b      	ldr	r2, [pc, #44]	@ (8004824 <TIM_TI3_SetConfig+0x7c>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	021a      	lsls	r2, r3, #8
 8004800:	23a0      	movs	r3, #160	@ 0xa0
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	4013      	ands	r3, r2
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	46c0      	nop			@ (mov r8, r8)
 800481a:	46bd      	mov	sp, r7
 800481c:	b006      	add	sp, #24
 800481e:	bd80      	pop	{r7, pc}
 8004820:	fffffeff 	.word	0xfffffeff
 8004824:	fffff5ff 	.word	0xfffff5ff

08004828 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4a1a      	ldr	r2, [pc, #104]	@ (80048a4 <TIM_TI4_SetConfig+0x7c>)
 800483c:	401a      	ands	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	4a15      	ldr	r2, [pc, #84]	@ (80048a8 <TIM_TI4_SetConfig+0x80>)
 8004852:	4013      	ands	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	4a12      	ldr	r2, [pc, #72]	@ (80048ac <TIM_TI4_SetConfig+0x84>)
 8004864:	4013      	ands	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	031b      	lsls	r3, r3, #12
 800486c:	041b      	lsls	r3, r3, #16
 800486e:	0c1b      	lsrs	r3, r3, #16
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4a0d      	ldr	r2, [pc, #52]	@ (80048b0 <TIM_TI4_SetConfig+0x88>)
 800487a:	4013      	ands	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	031a      	lsls	r2, r3, #12
 8004882:	23a0      	movs	r3, #160	@ 0xa0
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	4013      	ands	r3, r2
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	b006      	add	sp, #24
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	ffffefff 	.word	0xffffefff
 80048a8:	fffffcff 	.word	0xfffffcff
 80048ac:	ffff0fff 	.word	0xffff0fff
 80048b0:	ffff5fff 	.word	0xffff5fff

080048b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2270      	movs	r2, #112	@ 0x70
 80048c8:	4393      	bics	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	2207      	movs	r2, #7
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	609a      	str	r2, [r3, #8]
}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b004      	add	sp, #16
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4a09      	ldr	r2, [pc, #36]	@ (8004924 <TIM_ETR_SetConfig+0x3c>)
 8004900:	4013      	ands	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	021a      	lsls	r2, r3, #8
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	431a      	orrs	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4313      	orrs	r3, r2
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	609a      	str	r2, [r3, #8]
}
 800491c:	46c0      	nop			@ (mov r8, r8)
 800491e:	46bd      	mov	sp, r7
 8004920:	b006      	add	sp, #24
 8004922:	bd80      	pop	{r7, pc}
 8004924:	ffff00ff 	.word	0xffff00ff

08004928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	221f      	movs	r2, #31
 8004938:	4013      	ands	r3, r2
 800493a:	2201      	movs	r2, #1
 800493c:	409a      	lsls	r2, r3
 800493e:	0013      	movs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	43d2      	mvns	r2, r2
 800494a:	401a      	ands	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1a      	ldr	r2, [r3, #32]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	211f      	movs	r1, #31
 8004958:	400b      	ands	r3, r1
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4099      	lsls	r1, r3
 800495e:	000b      	movs	r3, r1
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	46bd      	mov	sp, r7
 800496a:	b006      	add	sp, #24
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	223c      	movs	r2, #60	@ 0x3c
 800497e:	5c9b      	ldrb	r3, [r3, r2]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004984:	2302      	movs	r3, #2
 8004986:	e042      	b.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	223c      	movs	r2, #60	@ 0x3c
 800498c:	2101      	movs	r1, #1
 800498e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	223d      	movs	r2, #61	@ 0x3d
 8004994:	2102      	movs	r1, #2
 8004996:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2270      	movs	r2, #112	@ 0x70
 80049ac:	4393      	bics	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a14      	ldr	r2, [pc, #80]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00a      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2380      	movs	r3, #128	@ 0x80
 80049d2:	05db      	lsls	r3, r3, #23
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d004      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0f      	ldr	r2, [pc, #60]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10c      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2280      	movs	r2, #128	@ 0x80
 80049e6:	4393      	bics	r3, r2
 80049e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	223d      	movs	r2, #61	@ 0x3d
 8004a00:	2101      	movs	r1, #1
 8004a02:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	223c      	movs	r2, #60	@ 0x3c
 8004a08:	2100      	movs	r1, #0
 8004a0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	0018      	movs	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b004      	add	sp, #16
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	40012c00 	.word	0x40012c00
 8004a1c:	40000400 	.word	0x40000400

08004a20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	223c      	movs	r2, #60	@ 0x3c
 8004a32:	5c9b      	ldrb	r3, [r3, r2]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e03e      	b.n	8004aba <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	223c      	movs	r2, #60	@ 0x3c
 8004a40:	2101      	movs	r1, #1
 8004a42:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	22ff      	movs	r2, #255	@ 0xff
 8004a48:	4393      	bics	r3, r2
 8004a4a:	001a      	movs	r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004a58:	401a      	ands	r2, r3
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4a18      	ldr	r2, [pc, #96]	@ (8004ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004a66:	401a      	ands	r2, r3
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a16      	ldr	r2, [pc, #88]	@ (8004acc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004a74:	401a      	ands	r2, r3
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4a13      	ldr	r2, [pc, #76]	@ (8004ad0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004a82:	401a      	ands	r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4a11      	ldr	r2, [pc, #68]	@ (8004ad4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004a90:	401a      	ands	r2, r3
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ad8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	223c      	movs	r2, #60	@ 0x3c
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	0018      	movs	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b004      	add	sp, #16
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	fffffcff 	.word	0xfffffcff
 8004ac8:	fffffbff 	.word	0xfffffbff
 8004acc:	fffff7ff 	.word	0xfffff7ff
 8004ad0:	ffffefff 	.word	0xffffefff
 8004ad4:	ffffdfff 	.word	0xffffdfff
 8004ad8:	ffffbfff 	.word	0xffffbfff

08004adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae4:	46c0      	nop			@ (mov r8, r8)
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b002      	add	sp, #8
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004af4:	46c0      	nop			@ (mov r8, r8)
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b002      	add	sp, #8
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e044      	b.n	8004b98 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d107      	bne.n	8004b26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2278      	movs	r2, #120	@ 0x78
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0018      	movs	r0, r3
 8004b22:	f7fd f8bb 	bl	8001c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2224      	movs	r2, #36	@ 0x24
 8004b2a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2101      	movs	r1, #1
 8004b38:	438a      	bics	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f000 fb2c 	bl	800519c <UART_SetConfig>
 8004b44:	0003      	movs	r3, r0
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e024      	b.n	8004b98 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f000 fc5f 	bl	800541c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	490d      	ldr	r1, [pc, #52]	@ (8004ba0 <HAL_UART_Init+0xa4>)
 8004b6a:	400a      	ands	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	212a      	movs	r1, #42	@ 0x2a
 8004b7a:	438a      	bics	r2, r1
 8004b7c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2101      	movs	r1, #1
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f000 fcf7 	bl	8005584 <UART_CheckIdleState>
 8004b96:	0003      	movs	r3, r0
}
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	ffffb7ff 	.word	0xffffb7ff

08004ba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b0ab      	sub	sp, #172	@ 0xac
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	22a4      	movs	r2, #164	@ 0xa4
 8004bb4:	18b9      	adds	r1, r7, r2
 8004bb6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	20a0      	movs	r0, #160	@ 0xa0
 8004bc0:	1839      	adds	r1, r7, r0
 8004bc2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	219c      	movs	r1, #156	@ 0x9c
 8004bcc:	1879      	adds	r1, r7, r1
 8004bce:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bd0:	0011      	movs	r1, r2
 8004bd2:	18bb      	adds	r3, r7, r2
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a99      	ldr	r2, [pc, #612]	@ (8004e3c <HAL_UART_IRQHandler+0x298>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2298      	movs	r2, #152	@ 0x98
 8004bdc:	18bc      	adds	r4, r7, r2
 8004bde:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004be0:	18bb      	adds	r3, r7, r2
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d114      	bne.n	8004c12 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004be8:	187b      	adds	r3, r7, r1
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2220      	movs	r2, #32
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d00f      	beq.n	8004c12 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bf2:	183b      	adds	r3, r7, r0
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d00a      	beq.n	8004c12 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d100      	bne.n	8004c06 <HAL_UART_IRQHandler+0x62>
 8004c04:	e29e      	b.n	8005144 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	0010      	movs	r0, r2
 8004c0e:	4798      	blx	r3
      }
      return;
 8004c10:	e298      	b.n	8005144 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c12:	2398      	movs	r3, #152	@ 0x98
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d100      	bne.n	8004c1e <HAL_UART_IRQHandler+0x7a>
 8004c1c:	e114      	b.n	8004e48 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c1e:	239c      	movs	r3, #156	@ 0x9c
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2201      	movs	r2, #1
 8004c26:	4013      	ands	r3, r2
 8004c28:	d106      	bne.n	8004c38 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c2a:	23a0      	movs	r3, #160	@ 0xa0
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a83      	ldr	r2, [pc, #524]	@ (8004e40 <HAL_UART_IRQHandler+0x29c>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	d100      	bne.n	8004c38 <HAL_UART_IRQHandler+0x94>
 8004c36:	e107      	b.n	8004e48 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c38:	23a4      	movs	r3, #164	@ 0xa4
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	4013      	ands	r3, r2
 8004c42:	d012      	beq.n	8004c6a <HAL_UART_IRQHandler+0xc6>
 8004c44:	23a0      	movs	r3, #160	@ 0xa0
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	2380      	movs	r3, #128	@ 0x80
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d00b      	beq.n	8004c6a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2201      	movs	r2, #1
 8004c58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2284      	movs	r2, #132	@ 0x84
 8004c5e:	589b      	ldr	r3, [r3, r2]
 8004c60:	2201      	movs	r2, #1
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2184      	movs	r1, #132	@ 0x84
 8004c68:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c6a:	23a4      	movs	r3, #164	@ 0xa4
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2202      	movs	r2, #2
 8004c72:	4013      	ands	r3, r2
 8004c74:	d011      	beq.n	8004c9a <HAL_UART_IRQHandler+0xf6>
 8004c76:	239c      	movs	r3, #156	@ 0x9c
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2202      	movs	r2, #2
 8004c88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2284      	movs	r2, #132	@ 0x84
 8004c8e:	589b      	ldr	r3, [r3, r2]
 8004c90:	2204      	movs	r2, #4
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2184      	movs	r1, #132	@ 0x84
 8004c98:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c9a:	23a4      	movs	r3, #164	@ 0xa4
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d011      	beq.n	8004cca <HAL_UART_IRQHandler+0x126>
 8004ca6:	239c      	movs	r3, #156	@ 0x9c
 8004ca8:	18fb      	adds	r3, r7, r3
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2201      	movs	r2, #1
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d00b      	beq.n	8004cca <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2284      	movs	r2, #132	@ 0x84
 8004cbe:	589b      	ldr	r3, [r3, r2]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2184      	movs	r1, #132	@ 0x84
 8004cc8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cca:	23a4      	movs	r3, #164	@ 0xa4
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d017      	beq.n	8004d06 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cd6:	23a0      	movs	r3, #160	@ 0xa0
 8004cd8:	18fb      	adds	r3, r7, r3
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d105      	bne.n	8004cee <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ce2:	239c      	movs	r3, #156	@ 0x9c
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cec:	d00b      	beq.n	8004d06 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2208      	movs	r2, #8
 8004cf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2284      	movs	r2, #132	@ 0x84
 8004cfa:	589b      	ldr	r3, [r3, r2]
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2184      	movs	r1, #132	@ 0x84
 8004d04:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d06:	23a4      	movs	r3, #164	@ 0xa4
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	2380      	movs	r3, #128	@ 0x80
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	4013      	ands	r3, r2
 8004d12:	d013      	beq.n	8004d3c <HAL_UART_IRQHandler+0x198>
 8004d14:	23a0      	movs	r3, #160	@ 0xa0
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	2380      	movs	r3, #128	@ 0x80
 8004d1c:	04db      	lsls	r3, r3, #19
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d00c      	beq.n	8004d3c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2280      	movs	r2, #128	@ 0x80
 8004d28:	0112      	lsls	r2, r2, #4
 8004d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2284      	movs	r2, #132	@ 0x84
 8004d30:	589b      	ldr	r3, [r3, r2]
 8004d32:	2220      	movs	r2, #32
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2184      	movs	r1, #132	@ 0x84
 8004d3a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2284      	movs	r2, #132	@ 0x84
 8004d40:	589b      	ldr	r3, [r3, r2]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d100      	bne.n	8004d48 <HAL_UART_IRQHandler+0x1a4>
 8004d46:	e1ff      	b.n	8005148 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d48:	23a4      	movs	r3, #164	@ 0xa4
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	4013      	ands	r3, r2
 8004d52:	d00e      	beq.n	8004d72 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d54:	23a0      	movs	r3, #160	@ 0xa0
 8004d56:	18fb      	adds	r3, r7, r3
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d008      	beq.n	8004d72 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d004      	beq.n	8004d72 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	0010      	movs	r0, r2
 8004d70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2284      	movs	r2, #132	@ 0x84
 8004d76:	589b      	ldr	r3, [r3, r2]
 8004d78:	2194      	movs	r1, #148	@ 0x94
 8004d7a:	187a      	adds	r2, r7, r1
 8004d7c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2240      	movs	r2, #64	@ 0x40
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b40      	cmp	r3, #64	@ 0x40
 8004d8a:	d004      	beq.n	8004d96 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d8c:	187b      	adds	r3, r7, r1
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2228      	movs	r2, #40	@ 0x28
 8004d92:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d94:	d047      	beq.n	8004e26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 fd05 	bl	80057a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2240      	movs	r2, #64	@ 0x40
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b40      	cmp	r3, #64	@ 0x40
 8004daa:	d137      	bne.n	8004e1c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dac:	f3ef 8310 	mrs	r3, PRIMASK
 8004db0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004db2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004db4:	2090      	movs	r0, #144	@ 0x90
 8004db6:	183a      	adds	r2, r7, r0
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	2301      	movs	r3, #1
 8004dbc:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dc0:	f383 8810 	msr	PRIMASK, r3
}
 8004dc4:	46c0      	nop			@ (mov r8, r8)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2140      	movs	r1, #64	@ 0x40
 8004dd2:	438a      	bics	r2, r1
 8004dd4:	609a      	str	r2, [r3, #8]
 8004dd6:	183b      	adds	r3, r7, r0
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ddc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dde:	f383 8810 	msr	PRIMASK, r3
}
 8004de2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d012      	beq.n	8004e12 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df0:	4a14      	ldr	r2, [pc, #80]	@ (8004e44 <HAL_UART_IRQHandler+0x2a0>)
 8004df2:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7fd fc4b 	bl	8002694 <HAL_DMA_Abort_IT>
 8004dfe:	1e03      	subs	r3, r0, #0
 8004e00:	d01a      	beq.n	8004e38 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e10:	e012      	b.n	8004e38 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f000 f9ad 	bl	8005174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1a:	e00d      	b.n	8004e38 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f000 f9a8 	bl	8005174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e24:	e008      	b.n	8004e38 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f000 f9a3 	bl	8005174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2284      	movs	r2, #132	@ 0x84
 8004e32:	2100      	movs	r1, #0
 8004e34:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004e36:	e187      	b.n	8005148 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e38:	46c0      	nop			@ (mov r8, r8)
    return;
 8004e3a:	e185      	b.n	8005148 <HAL_UART_IRQHandler+0x5a4>
 8004e3c:	0000080f 	.word	0x0000080f
 8004e40:	04000120 	.word	0x04000120
 8004e44:	08005871 	.word	0x08005871

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d000      	beq.n	8004e52 <HAL_UART_IRQHandler+0x2ae>
 8004e50:	e139      	b.n	80050c6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e52:	23a4      	movs	r3, #164	@ 0xa4
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2210      	movs	r2, #16
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d100      	bne.n	8004e60 <HAL_UART_IRQHandler+0x2bc>
 8004e5e:	e132      	b.n	80050c6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e60:	23a0      	movs	r3, #160	@ 0xa0
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2210      	movs	r2, #16
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d100      	bne.n	8004e6e <HAL_UART_IRQHandler+0x2ca>
 8004e6c:	e12b      	b.n	80050c6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2210      	movs	r2, #16
 8004e74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2240      	movs	r2, #64	@ 0x40
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b40      	cmp	r3, #64	@ 0x40
 8004e82:	d000      	beq.n	8004e86 <HAL_UART_IRQHandler+0x2e2>
 8004e84:	e09f      	b.n	8004fc6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	217e      	movs	r1, #126	@ 0x7e
 8004e90:	187b      	adds	r3, r7, r1
 8004e92:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004e94:	187b      	adds	r3, r7, r1
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d100      	bne.n	8004e9e <HAL_UART_IRQHandler+0x2fa>
 8004e9c:	e156      	b.n	800514c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2258      	movs	r2, #88	@ 0x58
 8004ea2:	5a9b      	ldrh	r3, [r3, r2]
 8004ea4:	187a      	adds	r2, r7, r1
 8004ea6:	8812      	ldrh	r2, [r2, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d300      	bcc.n	8004eae <HAL_UART_IRQHandler+0x30a>
 8004eac:	e14e      	b.n	800514c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	187a      	adds	r2, r7, r1
 8004eb2:	215a      	movs	r1, #90	@ 0x5a
 8004eb4:	8812      	ldrh	r2, [r2, #0]
 8004eb6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d06f      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eca:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ecc:	2301      	movs	r3, #1
 8004ece:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed2:	f383 8810 	msr	PRIMASK, r3
}
 8004ed6:	46c0      	nop			@ (mov r8, r8)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	499e      	ldr	r1, [pc, #632]	@ (800515c <HAL_UART_IRQHandler+0x5b8>)
 8004ee4:	400a      	ands	r2, r1
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004eea:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eee:	f383 8810 	msr	PRIMASK, r3
}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efc:	677b      	str	r3, [r7, #116]	@ 0x74
 8004efe:	2301      	movs	r3, #1
 8004f00:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f04:	f383 8810 	msr	PRIMASK, r3
}
 8004f08:	46c0      	nop			@ (mov r8, r8)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2101      	movs	r1, #1
 8004f16:	438a      	bics	r2, r1
 8004f18:	609a      	str	r2, [r3, #8]
 8004f1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f1c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f20:	f383 8810 	msr	PRIMASK, r3
}
 8004f24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f26:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f30:	2301      	movs	r3, #1
 8004f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f36:	f383 8810 	msr	PRIMASK, r3
}
 8004f3a:	46c0      	nop			@ (mov r8, r8)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2140      	movs	r1, #64	@ 0x40
 8004f48:	438a      	bics	r2, r1
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f4e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f52:	f383 8810 	msr	PRIMASK, r3
}
 8004f56:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2280      	movs	r2, #128	@ 0x80
 8004f5c:	2120      	movs	r1, #32
 8004f5e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f66:	f3ef 8310 	mrs	r3, PRIMASK
 8004f6a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f70:	2301      	movs	r3, #1
 8004f72:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f76:	f383 8810 	msr	PRIMASK, r3
}
 8004f7a:	46c0      	nop			@ (mov r8, r8)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2110      	movs	r1, #16
 8004f88:	438a      	bics	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f92:	f383 8810 	msr	PRIMASK, r3
}
 8004f96:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7fd fb41 	bl	8002624 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2258      	movs	r2, #88	@ 0x58
 8004fac:	5a9a      	ldrh	r2, [r3, r2]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	215a      	movs	r1, #90	@ 0x5a
 8004fb2:	5a5b      	ldrh	r3, [r3, r1]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	0011      	movs	r1, r2
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f000 f8e0 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fc4:	e0c2      	b.n	800514c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2258      	movs	r2, #88	@ 0x58
 8004fca:	5a99      	ldrh	r1, [r3, r2]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	225a      	movs	r2, #90	@ 0x5a
 8004fd0:	5a9b      	ldrh	r3, [r3, r2]
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	208e      	movs	r0, #142	@ 0x8e
 8004fd6:	183b      	adds	r3, r7, r0
 8004fd8:	1a8a      	subs	r2, r1, r2
 8004fda:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	225a      	movs	r2, #90	@ 0x5a
 8004fe0:	5a9b      	ldrh	r3, [r3, r2]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d100      	bne.n	8004fea <HAL_UART_IRQHandler+0x446>
 8004fe8:	e0b2      	b.n	8005150 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004fea:	183b      	adds	r3, r7, r0
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d100      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x450>
 8004ff2:	e0ad      	b.n	8005150 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ffc:	2488      	movs	r4, #136	@ 0x88
 8004ffe:	193a      	adds	r2, r7, r4
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	2301      	movs	r3, #1
 8005004:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f383 8810 	msr	PRIMASK, r3
}
 800500c:	46c0      	nop			@ (mov r8, r8)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4951      	ldr	r1, [pc, #324]	@ (8005160 <HAL_UART_IRQHandler+0x5bc>)
 800501a:	400a      	ands	r2, r1
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	193b      	adds	r3, r7, r4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f383 8810 	msr	PRIMASK, r3
}
 800502a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502c:	f3ef 8310 	mrs	r3, PRIMASK
 8005030:	61bb      	str	r3, [r7, #24]
  return(result);
 8005032:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005034:	2484      	movs	r4, #132	@ 0x84
 8005036:	193a      	adds	r2, r7, r4
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	2301      	movs	r3, #1
 800503c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f383 8810 	msr	PRIMASK, r3
}
 8005044:	46c0      	nop			@ (mov r8, r8)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2101      	movs	r1, #1
 8005052:	438a      	bics	r2, r1
 8005054:	609a      	str	r2, [r3, #8]
 8005056:	193b      	adds	r3, r7, r4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	f383 8810 	msr	PRIMASK, r3
}
 8005062:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2280      	movs	r2, #128	@ 0x80
 8005068:	2120      	movs	r1, #32
 800506a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005078:	f3ef 8310 	mrs	r3, PRIMASK
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005080:	2480      	movs	r4, #128	@ 0x80
 8005082:	193a      	adds	r2, r7, r4
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	2301      	movs	r3, #1
 8005088:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508c:	f383 8810 	msr	PRIMASK, r3
}
 8005090:	46c0      	nop			@ (mov r8, r8)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2110      	movs	r1, #16
 800509e:	438a      	bics	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	193b      	adds	r3, r7, r4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050aa:	f383 8810 	msr	PRIMASK, r3
}
 80050ae:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050b6:	183b      	adds	r3, r7, r0
 80050b8:	881a      	ldrh	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	0011      	movs	r1, r2
 80050be:	0018      	movs	r0, r3
 80050c0:	f000 f860 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050c4:	e044      	b.n	8005150 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050c6:	23a4      	movs	r3, #164	@ 0xa4
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	2380      	movs	r3, #128	@ 0x80
 80050ce:	035b      	lsls	r3, r3, #13
 80050d0:	4013      	ands	r3, r2
 80050d2:	d010      	beq.n	80050f6 <HAL_UART_IRQHandler+0x552>
 80050d4:	239c      	movs	r3, #156	@ 0x9c
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	2380      	movs	r3, #128	@ 0x80
 80050dc:	03db      	lsls	r3, r3, #15
 80050de:	4013      	ands	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2280      	movs	r2, #128	@ 0x80
 80050e8:	0352      	lsls	r2, r2, #13
 80050ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	0018      	movs	r0, r3
 80050f0:	f000 fc00 	bl	80058f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050f4:	e02f      	b.n	8005156 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050f6:	23a4      	movs	r3, #164	@ 0xa4
 80050f8:	18fb      	adds	r3, r7, r3
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2280      	movs	r2, #128	@ 0x80
 80050fe:	4013      	ands	r3, r2
 8005100:	d00f      	beq.n	8005122 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005102:	23a0      	movs	r3, #160	@ 0xa0
 8005104:	18fb      	adds	r3, r7, r3
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2280      	movs	r2, #128	@ 0x80
 800510a:	4013      	ands	r3, r2
 800510c:	d009      	beq.n	8005122 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01e      	beq.n	8005154 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	0010      	movs	r0, r2
 800511e:	4798      	blx	r3
    }
    return;
 8005120:	e018      	b.n	8005154 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005122:	23a4      	movs	r3, #164	@ 0xa4
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2240      	movs	r2, #64	@ 0x40
 800512a:	4013      	ands	r3, r2
 800512c:	d013      	beq.n	8005156 <HAL_UART_IRQHandler+0x5b2>
 800512e:	23a0      	movs	r3, #160	@ 0xa0
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2240      	movs	r2, #64	@ 0x40
 8005136:	4013      	ands	r3, r2
 8005138:	d00d      	beq.n	8005156 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	0018      	movs	r0, r3
 800513e:	f000 fbae 	bl	800589e <UART_EndTransmit_IT>
    return;
 8005142:	e008      	b.n	8005156 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005144:	46c0      	nop			@ (mov r8, r8)
 8005146:	e006      	b.n	8005156 <HAL_UART_IRQHandler+0x5b2>
    return;
 8005148:	46c0      	nop			@ (mov r8, r8)
 800514a:	e004      	b.n	8005156 <HAL_UART_IRQHandler+0x5b2>
      return;
 800514c:	46c0      	nop			@ (mov r8, r8)
 800514e:	e002      	b.n	8005156 <HAL_UART_IRQHandler+0x5b2>
      return;
 8005150:	46c0      	nop			@ (mov r8, r8)
 8005152:	e000      	b.n	8005156 <HAL_UART_IRQHandler+0x5b2>
    return;
 8005154:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005156:	46bd      	mov	sp, r7
 8005158:	b02b      	add	sp, #172	@ 0xac
 800515a:	bd90      	pop	{r4, r7, pc}
 800515c:	fffffeff 	.word	0xfffffeff
 8005160:	fffffedf 	.word	0xfffffedf

08005164 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800516c:	46c0      	nop			@ (mov r8, r8)
 800516e:	46bd      	mov	sp, r7
 8005170:	b002      	add	sp, #8
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800517c:	46c0      	nop			@ (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b002      	add	sp, #8
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	000a      	movs	r2, r1
 800518e:	1cbb      	adds	r3, r7, #2
 8005190:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	46bd      	mov	sp, r7
 8005196:	b002      	add	sp, #8
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051a4:	231e      	movs	r3, #30
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a8d      	ldr	r2, [pc, #564]	@ (8005400 <UART_SetConfig+0x264>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	0019      	movs	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a88      	ldr	r2, [pc, #544]	@ (8005404 <UART_SetConfig+0x268>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	0019      	movs	r1, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4a7f      	ldr	r2, [pc, #508]	@ (8005408 <UART_SetConfig+0x26c>)
 800520a:	4013      	ands	r3, r2
 800520c:	0019      	movs	r1, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	430a      	orrs	r2, r1
 8005216:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a7b      	ldr	r2, [pc, #492]	@ (800540c <UART_SetConfig+0x270>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d127      	bne.n	8005272 <UART_SetConfig+0xd6>
 8005222:	4b7b      	ldr	r3, [pc, #492]	@ (8005410 <UART_SetConfig+0x274>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	2203      	movs	r2, #3
 8005228:	4013      	ands	r3, r2
 800522a:	2b03      	cmp	r3, #3
 800522c:	d00d      	beq.n	800524a <UART_SetConfig+0xae>
 800522e:	d81b      	bhi.n	8005268 <UART_SetConfig+0xcc>
 8005230:	2b02      	cmp	r3, #2
 8005232:	d014      	beq.n	800525e <UART_SetConfig+0xc2>
 8005234:	d818      	bhi.n	8005268 <UART_SetConfig+0xcc>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <UART_SetConfig+0xa4>
 800523a:	2b01      	cmp	r3, #1
 800523c:	d00a      	beq.n	8005254 <UART_SetConfig+0xb8>
 800523e:	e013      	b.n	8005268 <UART_SetConfig+0xcc>
 8005240:	231f      	movs	r3, #31
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e021      	b.n	800528e <UART_SetConfig+0xf2>
 800524a:	231f      	movs	r3, #31
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	2202      	movs	r2, #2
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	e01c      	b.n	800528e <UART_SetConfig+0xf2>
 8005254:	231f      	movs	r3, #31
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	2204      	movs	r2, #4
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e017      	b.n	800528e <UART_SetConfig+0xf2>
 800525e:	231f      	movs	r3, #31
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	2208      	movs	r2, #8
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	e012      	b.n	800528e <UART_SetConfig+0xf2>
 8005268:	231f      	movs	r3, #31
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	2210      	movs	r2, #16
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e00d      	b.n	800528e <UART_SetConfig+0xf2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a67      	ldr	r2, [pc, #412]	@ (8005414 <UART_SetConfig+0x278>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d104      	bne.n	8005286 <UART_SetConfig+0xea>
 800527c:	231f      	movs	r3, #31
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	e003      	b.n	800528e <UART_SetConfig+0xf2>
 8005286:	231f      	movs	r3, #31
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	2210      	movs	r2, #16
 800528c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69da      	ldr	r2, [r3, #28]
 8005292:	2380      	movs	r3, #128	@ 0x80
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	429a      	cmp	r2, r3
 8005298:	d15c      	bne.n	8005354 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800529a:	231f      	movs	r3, #31
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d015      	beq.n	80052d0 <UART_SetConfig+0x134>
 80052a4:	dc18      	bgt.n	80052d8 <UART_SetConfig+0x13c>
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d00d      	beq.n	80052c6 <UART_SetConfig+0x12a>
 80052aa:	dc15      	bgt.n	80052d8 <UART_SetConfig+0x13c>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <UART_SetConfig+0x11a>
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d005      	beq.n	80052c0 <UART_SetConfig+0x124>
 80052b4:	e010      	b.n	80052d8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b6:	f7fe f8b7 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 80052ba:	0003      	movs	r3, r0
 80052bc:	61bb      	str	r3, [r7, #24]
        break;
 80052be:	e012      	b.n	80052e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c0:	4b55      	ldr	r3, [pc, #340]	@ (8005418 <UART_SetConfig+0x27c>)
 80052c2:	61bb      	str	r3, [r7, #24]
        break;
 80052c4:	e00f      	b.n	80052e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c6:	f7fe f833 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 80052ca:	0003      	movs	r3, r0
 80052cc:	61bb      	str	r3, [r7, #24]
        break;
 80052ce:	e00a      	b.n	80052e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d0:	2380      	movs	r3, #128	@ 0x80
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	61bb      	str	r3, [r7, #24]
        break;
 80052d6:	e006      	b.n	80052e6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052dc:	231e      	movs	r3, #30
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
        break;
 80052e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d100      	bne.n	80052ee <UART_SetConfig+0x152>
 80052ec:	e07a      	b.n	80053e4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	005a      	lsls	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	18d2      	adds	r2, r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	0019      	movs	r1, r3
 8005300:	0010      	movs	r0, r2
 8005302:	f7fa ff01 	bl	8000108 <__udivsi3>
 8005306:	0003      	movs	r3, r0
 8005308:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b0f      	cmp	r3, #15
 800530e:	d91c      	bls.n	800534a <UART_SetConfig+0x1ae>
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	2380      	movs	r3, #128	@ 0x80
 8005314:	025b      	lsls	r3, r3, #9
 8005316:	429a      	cmp	r2, r3
 8005318:	d217      	bcs.n	800534a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	b29a      	uxth	r2, r3
 800531e:	200e      	movs	r0, #14
 8005320:	183b      	adds	r3, r7, r0
 8005322:	210f      	movs	r1, #15
 8005324:	438a      	bics	r2, r1
 8005326:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	b29b      	uxth	r3, r3
 800532e:	2207      	movs	r2, #7
 8005330:	4013      	ands	r3, r2
 8005332:	b299      	uxth	r1, r3
 8005334:	183b      	adds	r3, r7, r0
 8005336:	183a      	adds	r2, r7, r0
 8005338:	8812      	ldrh	r2, [r2, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	183a      	adds	r2, r7, r0
 8005344:	8812      	ldrh	r2, [r2, #0]
 8005346:	60da      	str	r2, [r3, #12]
 8005348:	e04c      	b.n	80053e4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800534a:	231e      	movs	r3, #30
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	2201      	movs	r2, #1
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e047      	b.n	80053e4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005354:	231f      	movs	r3, #31
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b08      	cmp	r3, #8
 800535c:	d015      	beq.n	800538a <UART_SetConfig+0x1ee>
 800535e:	dc18      	bgt.n	8005392 <UART_SetConfig+0x1f6>
 8005360:	2b04      	cmp	r3, #4
 8005362:	d00d      	beq.n	8005380 <UART_SetConfig+0x1e4>
 8005364:	dc15      	bgt.n	8005392 <UART_SetConfig+0x1f6>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <UART_SetConfig+0x1d4>
 800536a:	2b02      	cmp	r3, #2
 800536c:	d005      	beq.n	800537a <UART_SetConfig+0x1de>
 800536e:	e010      	b.n	8005392 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005370:	f7fe f85a 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8005374:	0003      	movs	r3, r0
 8005376:	61bb      	str	r3, [r7, #24]
        break;
 8005378:	e012      	b.n	80053a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800537a:	4b27      	ldr	r3, [pc, #156]	@ (8005418 <UART_SetConfig+0x27c>)
 800537c:	61bb      	str	r3, [r7, #24]
        break;
 800537e:	e00f      	b.n	80053a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005380:	f7fd ffd6 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 8005384:	0003      	movs	r3, r0
 8005386:	61bb      	str	r3, [r7, #24]
        break;
 8005388:	e00a      	b.n	80053a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800538a:	2380      	movs	r3, #128	@ 0x80
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	61bb      	str	r3, [r7, #24]
        break;
 8005390:	e006      	b.n	80053a0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005396:	231e      	movs	r3, #30
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	2201      	movs	r2, #1
 800539c:	701a      	strb	r2, [r3, #0]
        break;
 800539e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01e      	beq.n	80053e4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	085a      	lsrs	r2, r3, #1
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	18d2      	adds	r2, r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	0019      	movs	r1, r3
 80053b6:	0010      	movs	r0, r2
 80053b8:	f7fa fea6 	bl	8000108 <__udivsi3>
 80053bc:	0003      	movs	r3, r0
 80053be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b0f      	cmp	r3, #15
 80053c4:	d90a      	bls.n	80053dc <UART_SetConfig+0x240>
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	2380      	movs	r3, #128	@ 0x80
 80053ca:	025b      	lsls	r3, r3, #9
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d205      	bcs.n	80053dc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60da      	str	r2, [r3, #12]
 80053da:	e003      	b.n	80053e4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80053dc:	231e      	movs	r3, #30
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	2201      	movs	r2, #1
 80053e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053f0:	231e      	movs	r3, #30
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	781b      	ldrb	r3, [r3, #0]
}
 80053f6:	0018      	movs	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b008      	add	sp, #32
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	46c0      	nop			@ (mov r8, r8)
 8005400:	efff69f3 	.word	0xefff69f3
 8005404:	ffffcfff 	.word	0xffffcfff
 8005408:	fffff4ff 	.word	0xfffff4ff
 800540c:	40013800 	.word	0x40013800
 8005410:	40021000 	.word	0x40021000
 8005414:	40004400 	.word	0x40004400
 8005418:	007a1200 	.word	0x007a1200

0800541c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	2201      	movs	r2, #1
 800542a:	4013      	ands	r3, r2
 800542c:	d00b      	beq.n	8005446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	4a4a      	ldr	r2, [pc, #296]	@ (8005560 <UART_AdvFeatureConfig+0x144>)
 8005436:	4013      	ands	r3, r2
 8005438:	0019      	movs	r1, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544a:	2202      	movs	r2, #2
 800544c:	4013      	ands	r3, r2
 800544e:	d00b      	beq.n	8005468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4a43      	ldr	r2, [pc, #268]	@ (8005564 <UART_AdvFeatureConfig+0x148>)
 8005458:	4013      	ands	r3, r2
 800545a:	0019      	movs	r1, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	2204      	movs	r2, #4
 800546e:	4013      	ands	r3, r2
 8005470:	d00b      	beq.n	800548a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a3b      	ldr	r2, [pc, #236]	@ (8005568 <UART_AdvFeatureConfig+0x14c>)
 800547a:	4013      	ands	r3, r2
 800547c:	0019      	movs	r1, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	2208      	movs	r2, #8
 8005490:	4013      	ands	r3, r2
 8005492:	d00b      	beq.n	80054ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4a34      	ldr	r2, [pc, #208]	@ (800556c <UART_AdvFeatureConfig+0x150>)
 800549c:	4013      	ands	r3, r2
 800549e:	0019      	movs	r1, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	2210      	movs	r2, #16
 80054b2:	4013      	ands	r3, r2
 80054b4:	d00b      	beq.n	80054ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005570 <UART_AdvFeatureConfig+0x154>)
 80054be:	4013      	ands	r3, r2
 80054c0:	0019      	movs	r1, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	2220      	movs	r2, #32
 80054d4:	4013      	ands	r3, r2
 80054d6:	d00b      	beq.n	80054f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	4a25      	ldr	r2, [pc, #148]	@ (8005574 <UART_AdvFeatureConfig+0x158>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	0019      	movs	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	2240      	movs	r2, #64	@ 0x40
 80054f6:	4013      	ands	r3, r2
 80054f8:	d01d      	beq.n	8005536 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	4a1d      	ldr	r2, [pc, #116]	@ (8005578 <UART_AdvFeatureConfig+0x15c>)
 8005502:	4013      	ands	r3, r2
 8005504:	0019      	movs	r1, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005516:	2380      	movs	r3, #128	@ 0x80
 8005518:	035b      	lsls	r3, r3, #13
 800551a:	429a      	cmp	r2, r3
 800551c:	d10b      	bne.n	8005536 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	4a15      	ldr	r2, [pc, #84]	@ (800557c <UART_AdvFeatureConfig+0x160>)
 8005526:	4013      	ands	r3, r2
 8005528:	0019      	movs	r1, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553a:	2280      	movs	r2, #128	@ 0x80
 800553c:	4013      	ands	r3, r2
 800553e:	d00b      	beq.n	8005558 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4a0e      	ldr	r2, [pc, #56]	@ (8005580 <UART_AdvFeatureConfig+0x164>)
 8005548:	4013      	ands	r3, r2
 800554a:	0019      	movs	r1, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }
}
 8005558:	46c0      	nop			@ (mov r8, r8)
 800555a:	46bd      	mov	sp, r7
 800555c:	b002      	add	sp, #8
 800555e:	bd80      	pop	{r7, pc}
 8005560:	fffdffff 	.word	0xfffdffff
 8005564:	fffeffff 	.word	0xfffeffff
 8005568:	fffbffff 	.word	0xfffbffff
 800556c:	ffff7fff 	.word	0xffff7fff
 8005570:	ffffefff 	.word	0xffffefff
 8005574:	ffffdfff 	.word	0xffffdfff
 8005578:	ffefffff 	.word	0xffefffff
 800557c:	ff9fffff 	.word	0xff9fffff
 8005580:	fff7ffff 	.word	0xfff7ffff

08005584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b092      	sub	sp, #72	@ 0x48
 8005588:	af02      	add	r7, sp, #8
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2284      	movs	r2, #132	@ 0x84
 8005590:	2100      	movs	r1, #0
 8005592:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005594:	f7fc fcda 	bl	8001f4c <HAL_GetTick>
 8005598:	0003      	movs	r3, r0
 800559a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2208      	movs	r2, #8
 80055a4:	4013      	ands	r3, r2
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d12c      	bne.n	8005604 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ac:	2280      	movs	r2, #128	@ 0x80
 80055ae:	0391      	lsls	r1, r2, #14
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	4a46      	ldr	r2, [pc, #280]	@ (80056cc <UART_CheckIdleState+0x148>)
 80055b4:	9200      	str	r2, [sp, #0]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f000 f88c 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 80055bc:	1e03      	subs	r3, r0, #0
 80055be:	d021      	beq.n	8005604 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c0:	f3ef 8310 	mrs	r3, PRIMASK
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055ca:	2301      	movs	r3, #1
 80055cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d0:	f383 8810 	msr	PRIMASK, r3
}
 80055d4:	46c0      	nop			@ (mov r8, r8)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2180      	movs	r1, #128	@ 0x80
 80055e2:	438a      	bics	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ec:	f383 8810 	msr	PRIMASK, r3
}
 80055f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2220      	movs	r2, #32
 80055f6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2278      	movs	r2, #120	@ 0x78
 80055fc:	2100      	movs	r1, #0
 80055fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e05f      	b.n	80056c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2204      	movs	r2, #4
 800560c:	4013      	ands	r3, r2
 800560e:	2b04      	cmp	r3, #4
 8005610:	d146      	bne.n	80056a0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005614:	2280      	movs	r2, #128	@ 0x80
 8005616:	03d1      	lsls	r1, r2, #15
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	4a2c      	ldr	r2, [pc, #176]	@ (80056cc <UART_CheckIdleState+0x148>)
 800561c:	9200      	str	r2, [sp, #0]
 800561e:	2200      	movs	r2, #0
 8005620:	f000 f858 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 8005624:	1e03      	subs	r3, r0, #0
 8005626:	d03b      	beq.n	80056a0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005628:	f3ef 8310 	mrs	r3, PRIMASK
 800562c:	60fb      	str	r3, [r7, #12]
  return(result);
 800562e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005630:	637b      	str	r3, [r7, #52]	@ 0x34
 8005632:	2301      	movs	r3, #1
 8005634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f383 8810 	msr	PRIMASK, r3
}
 800563c:	46c0      	nop			@ (mov r8, r8)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4921      	ldr	r1, [pc, #132]	@ (80056d0 <UART_CheckIdleState+0x14c>)
 800564a:	400a      	ands	r2, r1
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005650:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f383 8810 	msr	PRIMASK, r3
}
 8005658:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800565a:	f3ef 8310 	mrs	r3, PRIMASK
 800565e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005660:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005662:	633b      	str	r3, [r7, #48]	@ 0x30
 8005664:	2301      	movs	r3, #1
 8005666:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	f383 8810 	msr	PRIMASK, r3
}
 800566e:	46c0      	nop			@ (mov r8, r8)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2101      	movs	r1, #1
 800567c:	438a      	bics	r2, r1
 800567e:	609a      	str	r2, [r3, #8]
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	f383 8810 	msr	PRIMASK, r3
}
 800568a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2280      	movs	r2, #128	@ 0x80
 8005690:	2120      	movs	r1, #32
 8005692:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2278      	movs	r2, #120	@ 0x78
 8005698:	2100      	movs	r1, #0
 800569a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e011      	b.n	80056c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2280      	movs	r2, #128	@ 0x80
 80056aa:	2120      	movs	r1, #32
 80056ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2278      	movs	r2, #120	@ 0x78
 80056be:	2100      	movs	r1, #0
 80056c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	0018      	movs	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b010      	add	sp, #64	@ 0x40
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	01ffffff 	.word	0x01ffffff
 80056d0:	fffffedf 	.word	0xfffffedf

080056d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	1dfb      	adds	r3, r7, #7
 80056e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e4:	e04b      	b.n	800577e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	3301      	adds	r3, #1
 80056ea:	d048      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ec:	f7fc fc2e 	bl	8001f4c <HAL_GetTick>
 80056f0:	0002      	movs	r2, r0
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <UART_WaitOnFlagUntilTimeout+0x2e>
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e04b      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2204      	movs	r2, #4
 800570e:	4013      	ands	r3, r2
 8005710:	d035      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	2208      	movs	r2, #8
 800571a:	4013      	ands	r3, r2
 800571c:	2b08      	cmp	r3, #8
 800571e:	d111      	bne.n	8005744 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2208      	movs	r2, #8
 8005726:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	0018      	movs	r0, r3
 800572c:	f000 f83c 	bl	80057a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2284      	movs	r2, #132	@ 0x84
 8005734:	2108      	movs	r1, #8
 8005736:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2278      	movs	r2, #120	@ 0x78
 800573c:	2100      	movs	r1, #0
 800573e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e02c      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69da      	ldr	r2, [r3, #28]
 800574a:	2380      	movs	r3, #128	@ 0x80
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	401a      	ands	r2, r3
 8005750:	2380      	movs	r3, #128	@ 0x80
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	429a      	cmp	r2, r3
 8005756:	d112      	bne.n	800577e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2280      	movs	r2, #128	@ 0x80
 800575e:	0112      	lsls	r2, r2, #4
 8005760:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	0018      	movs	r0, r3
 8005766:	f000 f81f 	bl	80057a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2284      	movs	r2, #132	@ 0x84
 800576e:	2120      	movs	r1, #32
 8005770:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2278      	movs	r2, #120	@ 0x78
 8005776:	2100      	movs	r1, #0
 8005778:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e00f      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	4013      	ands	r3, r2
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	425a      	negs	r2, r3
 800578e:	4153      	adcs	r3, r2
 8005790:	b2db      	uxtb	r3, r3
 8005792:	001a      	movs	r2, r3
 8005794:	1dfb      	adds	r3, r7, #7
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d0a4      	beq.n	80056e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	0018      	movs	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b004      	add	sp, #16
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08e      	sub	sp, #56	@ 0x38
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b0:	f3ef 8310 	mrs	r3, PRIMASK
 80057b4:	617b      	str	r3, [r7, #20]
  return(result);
 80057b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ba:	2301      	movs	r3, #1
 80057bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f383 8810 	msr	PRIMASK, r3
}
 80057c4:	46c0      	nop			@ (mov r8, r8)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4926      	ldr	r1, [pc, #152]	@ (800586c <UART_EndRxTransfer+0xc4>)
 80057d2:	400a      	ands	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	f383 8810 	msr	PRIMASK, r3
}
 80057e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e2:	f3ef 8310 	mrs	r3, PRIMASK
 80057e6:	623b      	str	r3, [r7, #32]
  return(result);
 80057e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80057ec:	2301      	movs	r3, #1
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	f383 8810 	msr	PRIMASK, r3
}
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2101      	movs	r1, #1
 8005804:	438a      	bics	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
 8005808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580e:	f383 8810 	msr	PRIMASK, r3
}
 8005812:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005818:	2b01      	cmp	r3, #1
 800581a:	d118      	bne.n	800584e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800581c:	f3ef 8310 	mrs	r3, PRIMASK
 8005820:	60bb      	str	r3, [r7, #8]
  return(result);
 8005822:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005826:	2301      	movs	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f383 8810 	msr	PRIMASK, r3
}
 8005830:	46c0      	nop			@ (mov r8, r8)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2110      	movs	r1, #16
 800583e:	438a      	bics	r2, r1
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005844:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f383 8810 	msr	PRIMASK, r3
}
 800584c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2280      	movs	r2, #128	@ 0x80
 8005852:	2120      	movs	r1, #32
 8005854:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	46bd      	mov	sp, r7
 8005866:	b00e      	add	sp, #56	@ 0x38
 8005868:	bd80      	pop	{r7, pc}
 800586a:	46c0      	nop			@ (mov r8, r8)
 800586c:	fffffedf 	.word	0xfffffedf

08005870 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	225a      	movs	r2, #90	@ 0x5a
 8005882:	2100      	movs	r1, #0
 8005884:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2252      	movs	r2, #82	@ 0x52
 800588a:	2100      	movs	r1, #0
 800588c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	0018      	movs	r0, r3
 8005892:	f7ff fc6f 	bl	8005174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	46bd      	mov	sp, r7
 800589a:	b004      	add	sp, #16
 800589c:	bd80      	pop	{r7, pc}

0800589e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a6:	f3ef 8310 	mrs	r3, PRIMASK
 80058aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80058ac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	2301      	movs	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f383 8810 	msr	PRIMASK, r3
}
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2140      	movs	r1, #64	@ 0x40
 80058c8:	438a      	bics	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f383 8810 	msr	PRIMASK, r3
}
 80058d6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	0018      	movs	r0, r3
 80058e8:	f7ff fc3c 	bl	8005164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ec:	46c0      	nop			@ (mov r8, r8)
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b006      	add	sp, #24
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058fc:	46c0      	nop			@ (mov r8, r8)
 80058fe:	46bd      	mov	sp, r7
 8005900:	b002      	add	sp, #8
 8005902:	bd80      	pop	{r7, pc}

08005904 <memset>:
 8005904:	0003      	movs	r3, r0
 8005906:	1882      	adds	r2, r0, r2
 8005908:	4293      	cmp	r3, r2
 800590a:	d100      	bne.n	800590e <memset+0xa>
 800590c:	4770      	bx	lr
 800590e:	7019      	strb	r1, [r3, #0]
 8005910:	3301      	adds	r3, #1
 8005912:	e7f9      	b.n	8005908 <memset+0x4>

08005914 <__libc_init_array>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	2600      	movs	r6, #0
 8005918:	4c0c      	ldr	r4, [pc, #48]	@ (800594c <__libc_init_array+0x38>)
 800591a:	4d0d      	ldr	r5, [pc, #52]	@ (8005950 <__libc_init_array+0x3c>)
 800591c:	1b64      	subs	r4, r4, r5
 800591e:	10a4      	asrs	r4, r4, #2
 8005920:	42a6      	cmp	r6, r4
 8005922:	d109      	bne.n	8005938 <__libc_init_array+0x24>
 8005924:	2600      	movs	r6, #0
 8005926:	f000 f819 	bl	800595c <_init>
 800592a:	4c0a      	ldr	r4, [pc, #40]	@ (8005954 <__libc_init_array+0x40>)
 800592c:	4d0a      	ldr	r5, [pc, #40]	@ (8005958 <__libc_init_array+0x44>)
 800592e:	1b64      	subs	r4, r4, r5
 8005930:	10a4      	asrs	r4, r4, #2
 8005932:	42a6      	cmp	r6, r4
 8005934:	d105      	bne.n	8005942 <__libc_init_array+0x2e>
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	00b3      	lsls	r3, r6, #2
 800593a:	58eb      	ldr	r3, [r5, r3]
 800593c:	4798      	blx	r3
 800593e:	3601      	adds	r6, #1
 8005940:	e7ee      	b.n	8005920 <__libc_init_array+0xc>
 8005942:	00b3      	lsls	r3, r6, #2
 8005944:	58eb      	ldr	r3, [r5, r3]
 8005946:	4798      	blx	r3
 8005948:	3601      	adds	r6, #1
 800594a:	e7f2      	b.n	8005932 <__libc_init_array+0x1e>
 800594c:	08005a28 	.word	0x08005a28
 8005950:	08005a28 	.word	0x08005a28
 8005954:	08005a2c 	.word	0x08005a2c
 8005958:	08005a28 	.word	0x08005a28

0800595c <_init>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	46c0      	nop			@ (mov r8, r8)
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr

08005968 <_fini>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	46c0      	nop			@ (mov r8, r8)
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr
