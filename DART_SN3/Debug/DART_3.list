
DART_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005690  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005750  08005750  00006750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057cc  080057cc  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  080057cc  080057cc  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057cc  080057cc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057cc  080057cc  000067cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057d0  080057d0  000067d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080057d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000005c  08005830  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08005830  000073a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001042f  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002679  00000000  00000000  000174b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00019b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b61  00000000  00000000  0001a9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f07  00000000  00000000  0001b529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128c2  00000000  00000000  00034430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095ec9  00000000  00000000  00046cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcbbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003888  00000000  00000000  000dcc00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e0488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005738 	.word	0x08005738

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005738 	.word	0x08005738

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <FEB_CAN_Init>:

uint32_t FEB_CAN_Tx_Mailbox;

// **************************************** Functions ****************************************

void FEB_CAN_Init(void) {
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	FEB_CAN_Filter_Config();
 8000248:	f000 f812 	bl	8000270 <FEB_CAN_Filter_Config>
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800024c:	4b07      	ldr	r3, [pc, #28]	@ (800026c <FEB_CAN_Init+0x28>)
 800024e:	0018      	movs	r0, r3
 8000250:	f001 fa80 	bl	8001754 <HAL_CAN_Start>
 8000254:	1e03      	subs	r3, r0, #0
 8000256:	d001      	beq.n	800025c <FEB_CAN_Init+0x18>
		Error_Handler();
 8000258:	f000 fd12 	bl	8000c80 <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800025c:	4b03      	ldr	r3, [pc, #12]	@ (800026c <FEB_CAN_Init+0x28>)
 800025e:	2102      	movs	r1, #2
 8000260:	0018      	movs	r0, r3
 8000262:	f001 fabd 	bl	80017e0 <HAL_CAN_ActivateNotification>
}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000078 	.word	0x20000078

08000270 <FEB_CAN_Filter_Config>:

void FEB_CAN_Filter_Config(void) {
 8000270:	b590      	push	{r4, r7, lr}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
	uint8_t filter_bank = 0;
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]
	filter_bank = FEB_CAN_BMS_Filter(&hcan, CAN_RX_FIFO0, filter_bank);
 800027c:	1dfc      	adds	r4, r7, #7
 800027e:	1dfb      	adds	r3, r7, #7
 8000280:	781a      	ldrb	r2, [r3, #0]
 8000282:	4b05      	ldr	r3, [pc, #20]	@ (8000298 <FEB_CAN_Filter_Config+0x28>)
 8000284:	2100      	movs	r1, #0
 8000286:	0018      	movs	r0, r3
 8000288:	f000 f808 	bl	800029c <FEB_CAN_BMS_Filter>
 800028c:	0003      	movs	r3, r0
 800028e:	7023      	strb	r3, [r4, #0]
}
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	b003      	add	sp, #12
 8000296:	bd90      	pop	{r4, r7, pc}
 8000298:	20000078 	.word	0x20000078

0800029c <FEB_CAN_BMS_Filter>:
extern uint8_t FEB_CAN_Tx_Data[8];
extern uint32_t FEB_CAN_Tx_Mailbox;
extern UART_HandleTypeDef huart2;


uint8_t FEB_CAN_BMS_Filter(CAN_HandleTypeDef* hcan, uint8_t FIFO_assignment, uint8_t filter_bank) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b08c      	sub	sp, #48	@ 0x30
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	0008      	movs	r0, r1
 80002a6:	0011      	movs	r1, r2
 80002a8:	1cfb      	adds	r3, r7, #3
 80002aa:	1c02      	adds	r2, r0, #0
 80002ac:	701a      	strb	r2, [r3, #0]
 80002ae:	1cbb      	adds	r3, r7, #2
 80002b0:	1c0a      	adds	r2, r1, #0
 80002b2:	701a      	strb	r2, [r3, #0]
	CAN_FilterTypeDef filter_config;

	// Standard CAN - 2.0A - 11 bit
	filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80002b4:	2108      	movs	r1, #8
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2201      	movs	r2, #1
 80002ba:	621a      	str	r2, [r3, #32]
	filter_config.FilterBank = filter_bank;
 80002bc:	1cbb      	adds	r3, r7, #2
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	615a      	str	r2, [r3, #20]
	filter_config.FilterFIFOAssignment = FIFO_assignment;
 80002c4:	1cfb      	adds	r3, r7, #3
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	611a      	str	r2, [r3, #16]
	filter_config.FilterIdHigh = FEB_CAN_ID_BMS_DART1_REQUESTED_FAN_SPEEDS << 5;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	22a0      	movs	r2, #160	@ 0xa0
 80002d0:	601a      	str	r2, [r3, #0]
	filter_config.FilterIdLow = 0;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2200      	movs	r2, #0
 80002d6:	605a      	str	r2, [r3, #4]
	filter_config.FilterMaskIdHigh = 0xFFE0;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	4a0f      	ldr	r2, [pc, #60]	@ (8000318 <FEB_CAN_BMS_Filter+0x7c>)
 80002dc:	609a      	str	r2, [r3, #8]
	filter_config.FilterMaskIdLow = 0;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2200      	movs	r2, #0
 80002e8:	619a      	str	r2, [r3, #24]
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2201      	movs	r2, #1
 80002ee:	61da      	str	r2, [r3, #28]
	filter_config.SlaveStartFilterBank = 27;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	221b      	movs	r2, #27
 80002f4:	625a      	str	r2, [r3, #36]	@ 0x24


	if (HAL_CAN_ConfigFilter(hcan, &filter_config) != HAL_OK) {
 80002f6:	187a      	adds	r2, r7, r1
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	0011      	movs	r1, r2
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 f937 	bl	8001570 <HAL_CAN_ConfigFilter>
		// Code Error - Shutdown
	}

	return ++filter_bank;
 8000302:	1cbb      	adds	r3, r7, #2
 8000304:	1cba      	adds	r2, r7, #2
 8000306:	7812      	ldrb	r2, [r2, #0]
 8000308:	3201      	adds	r2, #1
 800030a:	701a      	strb	r2, [r3, #0]
 800030c:	1cbb      	adds	r3, r7, #2
 800030e:	781b      	ldrb	r3, [r3, #0]
}
 8000310:	0018      	movs	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	b00c      	add	sp, #48	@ 0x30
 8000316:	bd80      	pop	{r7, pc}
 8000318:	0000ffe0 	.word	0x0000ffe0

0800031c <FEB_Fan_Init>:

extern UART_HandleTypeDef huart2;

// ********************************** Initialize **********************************

void FEB_Fan_Init(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	FEB_Fan_PWM_Init();
 8000320:	f000 f808 	bl	8000334 <FEB_Fan_PWM_Init>
	FEB_Fan_All_Speed_Set(40 * .1); // starts at 10% duty cycle
 8000324:	2004      	movs	r0, #4
 8000326:	f000 f84b 	bl	80003c0 <FEB_Fan_All_Speed_Set>
	FEB_Fan_TACH_Init();
 800032a:	f000 f825 	bl	8000378 <FEB_Fan_TACH_Init>
}
 800032e:	46c0      	nop			@ (mov r8, r8)
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <FEB_Fan_PWM_Init>:
	FEB_Fan_4_Speed_Set(FEB_CAN_Rx_Data[3]);
	FEB_Fan_5_Speed_Set(FEB_CAN_Rx_Data[4]);
}

// ********************************** PWM **********************************
void FEB_Fan_PWM_Init(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //fan 1
 8000338:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <FEB_Fan_PWM_Init+0x3c>)
 800033a:	2108      	movs	r1, #8
 800033c:	0018      	movs	r0, r3
 800033e:	f002 fb17 	bl	8002970 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //fan 2
 8000342:	4b0b      	ldr	r3, [pc, #44]	@ (8000370 <FEB_Fan_PWM_Init+0x3c>)
 8000344:	2104      	movs	r1, #4
 8000346:	0018      	movs	r0, r3
 8000348:	f002 fb12 	bl	8002970 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //fan 3
 800034c:	4b08      	ldr	r3, [pc, #32]	@ (8000370 <FEB_Fan_PWM_Init+0x3c>)
 800034e:	2100      	movs	r1, #0
 8000350:	0018      	movs	r0, r3
 8000352:	f002 fb0d 	bl	8002970 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //fan 4
 8000356:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <FEB_Fan_PWM_Init+0x40>)
 8000358:	2104      	movs	r1, #4
 800035a:	0018      	movs	r0, r3
 800035c:	f002 fb08 	bl	8002970 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fan 5
 8000360:	4b04      	ldr	r3, [pc, #16]	@ (8000374 <FEB_Fan_PWM_Init+0x40>)
 8000362:	2100      	movs	r1, #0
 8000364:	0018      	movs	r0, r3
 8000366:	f002 fb03 	bl	8002970 <HAL_TIM_PWM_Start>
}
 800036a:	46c0      	nop			@ (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	200000a0 	.word	0x200000a0
 8000374:	20000130 	.word	0x20000130

08000378 <FEB_Fan_TACH_Init>:

void FEB_Fan_TACH_Init(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim14, TIM_CHANNEL_1); // fan 1
 800037c:	4b0d      	ldr	r3, [pc, #52]	@ (80003b4 <FEB_Fan_TACH_Init+0x3c>)
 800037e:	2100      	movs	r1, #0
 8000380:	0018      	movs	r0, r3
 8000382:	f002 fbf9 	bl	8002b78 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3); // fan 2
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <FEB_Fan_TACH_Init+0x40>)
 8000388:	2108      	movs	r1, #8
 800038a:	0018      	movs	r0, r3
 800038c:	f002 fbf4 	bl	8002b78 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4); // fan 3
 8000390:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <FEB_Fan_TACH_Init+0x40>)
 8000392:	210c      	movs	r1, #12
 8000394:	0018      	movs	r0, r3
 8000396:	f002 fbef 	bl	8002b78 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // fan 4
 800039a:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <FEB_Fan_TACH_Init+0x44>)
 800039c:	2100      	movs	r1, #0
 800039e:	0018      	movs	r0, r3
 80003a0:	f002 fbea 	bl	8002b78 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2); // fan 5
 80003a4:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <FEB_Fan_TACH_Init+0x44>)
 80003a6:	2104      	movs	r1, #4
 80003a8:	0018      	movs	r0, r3
 80003aa:	f002 fbe5 	bl	8002b78 <HAL_TIM_IC_Start_IT>
}
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000178 	.word	0x20000178
 80003b8:	20000130 	.word	0x20000130
 80003bc:	200000e8 	.word	0x200000e8

080003c0 <FEB_Fan_All_Speed_Set>:

void FEB_Fan_All_Speed_Set(uint8_t speed) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	0002      	movs	r2, r0
 80003c8:	1dfb      	adds	r3, r7, #7
 80003ca:	701a      	strb	r2, [r3, #0]
	FEB_Fan_1_Speed_Set(speed);
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 f819 	bl	8000408 <FEB_Fan_1_Speed_Set>
	FEB_Fan_2_Speed_Set(speed);
 80003d6:	1dfb      	adds	r3, r7, #7
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 f826 	bl	800042c <FEB_Fan_2_Speed_Set>
	FEB_Fan_3_Speed_Set(speed);
 80003e0:	1dfb      	adds	r3, r7, #7
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 f833 	bl	8000450 <FEB_Fan_3_Speed_Set>
	FEB_Fan_4_Speed_Set(speed);
 80003ea:	1dfb      	adds	r3, r7, #7
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	0018      	movs	r0, r3
 80003f0:	f000 f840 	bl	8000474 <FEB_Fan_4_Speed_Set>
	FEB_Fan_5_Speed_Set(speed);
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 f84d 	bl	8000498 <FEB_Fan_5_Speed_Set>
}
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b002      	add	sp, #8
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <FEB_Fan_1_Speed_Set>:

void FEB_Fan_1_Speed_Set(uint8_t speed) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	0002      	movs	r2, r0
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 8000414:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <FEB_Fan_1_Speed_Set+0x20>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	1dfa      	adds	r2, r7, #7
 800041a:	7812      	ldrb	r2, [r2, #0]
 800041c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	200000a0 	.word	0x200000a0

0800042c <FEB_Fan_2_Speed_Set>:

void FEB_Fan_2_Speed_Set(uint8_t speed) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	0002      	movs	r2, r0
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
 8000438:	4b04      	ldr	r3, [pc, #16]	@ (800044c <FEB_Fan_2_Speed_Set+0x20>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	1dfa      	adds	r2, r7, #7
 800043e:	7812      	ldrb	r2, [r2, #0]
 8000440:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	200000a0 	.word	0x200000a0

08000450 <FEB_Fan_3_Speed_Set>:

void FEB_Fan_3_Speed_Set(uint8_t speed) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	0002      	movs	r2, r0
 8000458:	1dfb      	adds	r3, r7, #7
 800045a:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 800045c:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <FEB_Fan_3_Speed_Set+0x20>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	1dfa      	adds	r2, r7, #7
 8000462:	7812      	ldrb	r2, [r2, #0]
 8000464:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	200000a0 	.word	0x200000a0

08000474 <FEB_Fan_4_Speed_Set>:

void FEB_Fan_4_Speed_Set(uint8_t speed) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	0002      	movs	r2, r0
 800047c:	1dfb      	adds	r3, r7, #7
 800047e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8000480:	4b04      	ldr	r3, [pc, #16]	@ (8000494 <FEB_Fan_4_Speed_Set+0x20>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	1dfa      	adds	r2, r7, #7
 8000486:	7812      	ldrb	r2, [r2, #0]
 8000488:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	20000130 	.word	0x20000130

08000498 <FEB_Fan_5_Speed_Set>:

void FEB_Fan_5_Speed_Set(uint8_t speed) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	0002      	movs	r2, r0
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 80004a4:	4b04      	ldr	r3, [pc, #16]	@ (80004b8 <FEB_Fan_5_Speed_Set+0x20>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	1dfa      	adds	r2, r7, #7
 80004aa:	7812      	ldrb	r2, [r2, #0]
 80004ac:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	20000130 	.word	0x20000130

080004bc <FEB_Init>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

extern UART_HandleTypeDef huart2;

void FEB_Init(void){
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	FEB_CAN_Init();
 80004c0:	f7ff fec0 	bl	8000244 <FEB_CAN_Init>
	FEB_Fan_Init();
 80004c4:	f7ff ff2a 	bl	800031c <FEB_Fan_Init>
}
 80004c8:	46c0      	nop			@ (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <FEB_Main_Loop>:

void FEB_Main_Loop(void){
 80004ce:	b580      	push	{r7, lr}
 80004d0:	af00      	add	r7, sp, #0
	//Fan speed set by CAN receive interrupt

//	HAL_Delay(100);
}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fee6 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f813 	bl	800050a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fb10 	bl	8000b08 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004e8:	f000 f88c 	bl	8000604 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004ec:	f000 f954 	bl	8000798 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 fada 	bl	8000aa8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004f4:	f000 f9d4 	bl	80008a0 <MX_TIM3_Init>
  MX_CAN_Init();
 80004f8:	f000 f84e 	bl	8000598 <MX_CAN_Init>
  MX_TIM14_Init();
 80004fc:	f000 fa8a 	bl	8000a14 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  FEB_Init();
 8000500:	f7ff ffdc 	bl	80004bc <FEB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  FEB_Main_Loop();
 8000504:	f7ff ffe3 	bl	80004ce <FEB_Main_Loop>
 8000508:	e7fc      	b.n	8000504 <main+0x2c>

0800050a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050a:	b590      	push	{r4, r7, lr}
 800050c:	b093      	sub	sp, #76	@ 0x4c
 800050e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000510:	2414      	movs	r4, #20
 8000512:	193b      	adds	r3, r7, r4
 8000514:	0018      	movs	r0, r3
 8000516:	2334      	movs	r3, #52	@ 0x34
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f004 fc90 	bl	8004e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	0018      	movs	r0, r3
 8000524:	2310      	movs	r3, #16
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f004 fc89 	bl	8004e40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052e:	0021      	movs	r1, r4
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2202      	movs	r2, #2
 8000534:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2201      	movs	r2, #1
 800053a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2210      	movs	r2, #16
 8000540:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	187b      	adds	r3, r7, r1
 800054a:	0018      	movs	r0, r3
 800054c:	f001 fc36 	bl	8001dbc <HAL_RCC_OscConfig>
 8000550:	1e03      	subs	r3, r0, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000554:	f000 fb94 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2207      	movs	r2, #7
 800055c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2100      	movs	r1, #0
 8000574:	0018      	movs	r0, r3
 8000576:	f001 ffa7 	bl	80024c8 <HAL_RCC_ClockConfig>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800057e:	f000 fb7f 	bl	8000c80 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000582:	2380      	movs	r3, #128	@ 0x80
 8000584:	04db      	lsls	r3, r3, #19
 8000586:	2200      	movs	r2, #0
 8000588:	0019      	movs	r1, r3
 800058a:	2000      	movs	r0, #0
 800058c:	f002 f876 	bl	800267c <HAL_RCC_MCOConfig>
}
 8000590:	46c0      	nop			@ (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b013      	add	sp, #76	@ 0x4c
 8000596:	bd90      	pop	{r4, r7, pc}

08000598 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <MX_CAN_Init+0x64>)
 800059e:	4a18      	ldr	r2, [pc, #96]	@ (8000600 <MX_CAN_Init+0x68>)
 80005a0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80005a2:	4b16      	ldr	r3, [pc, #88]	@ (80005fc <MX_CAN_Init+0x64>)
 80005a4:	2210      	movs	r2, #16
 80005a6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005a8:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <MX_CAN_Init+0x64>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ae:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <MX_CAN_Init+0x64>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005b4:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <MX_CAN_Init+0x64>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005ba:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <MX_CAN_Init+0x64>)
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <MX_CAN_Init+0x64>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005c6:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <MX_CAN_Init+0x64>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005cc:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <MX_CAN_Init+0x64>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <MX_CAN_Init+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <MX_CAN_Init+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005de:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <MX_CAN_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005e4:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <MX_CAN_Init+0x64>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 fec4 	bl	8001374 <HAL_CAN_Init>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80005f0:	f000 fb46 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80005f4:	46c0      	nop			@ (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	20000078 	.word	0x20000078
 8000600:	40006400 	.word	0x40006400

08000604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	@ 0x58
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060a:	2348      	movs	r3, #72	@ 0x48
 800060c:	18fb      	adds	r3, r7, r3
 800060e:	0018      	movs	r0, r3
 8000610:	2310      	movs	r3, #16
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f004 fc13 	bl	8004e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061a:	2340      	movs	r3, #64	@ 0x40
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	0018      	movs	r0, r3
 8000620:	2308      	movs	r3, #8
 8000622:	001a      	movs	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f004 fc0b 	bl	8004e40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800062a:	2324      	movs	r3, #36	@ 0x24
 800062c:	18fb      	adds	r3, r7, r3
 800062e:	0018      	movs	r0, r3
 8000630:	231c      	movs	r3, #28
 8000632:	001a      	movs	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f004 fc03 	bl	8004e40 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	0018      	movs	r0, r3
 800063e:	2320      	movs	r3, #32
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f004 fbfc 	bl	8004e40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000648:	4b51      	ldr	r3, [pc, #324]	@ (8000790 <MX_TIM1_Init+0x18c>)
 800064a:	4a52      	ldr	r2, [pc, #328]	@ (8000794 <MX_TIM1_Init+0x190>)
 800064c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 800064e:	4b50      	ldr	r3, [pc, #320]	@ (8000790 <MX_TIM1_Init+0x18c>)
 8000650:	2207      	movs	r2, #7
 8000652:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b4e      	ldr	r3, [pc, #312]	@ (8000790 <MX_TIM1_Init+0x18c>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40;
 800065a:	4b4d      	ldr	r3, [pc, #308]	@ (8000790 <MX_TIM1_Init+0x18c>)
 800065c:	2228      	movs	r2, #40	@ 0x28
 800065e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000660:	4b4b      	ldr	r3, [pc, #300]	@ (8000790 <MX_TIM1_Init+0x18c>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000666:	4b4a      	ldr	r3, [pc, #296]	@ (8000790 <MX_TIM1_Init+0x18c>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800066c:	4b48      	ldr	r3, [pc, #288]	@ (8000790 <MX_TIM1_Init+0x18c>)
 800066e:	2280      	movs	r2, #128	@ 0x80
 8000670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000672:	4b47      	ldr	r3, [pc, #284]	@ (8000790 <MX_TIM1_Init+0x18c>)
 8000674:	0018      	movs	r0, r3
 8000676:	f002 f8d3 	bl	8002820 <HAL_TIM_Base_Init>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800067e:	f000 faff 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000682:	2148      	movs	r1, #72	@ 0x48
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	0152      	lsls	r2, r2, #5
 800068a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800068c:	187a      	adds	r2, r7, r1
 800068e:	4b40      	ldr	r3, [pc, #256]	@ (8000790 <MX_TIM1_Init+0x18c>)
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f002 fdf8 	bl	8003288 <HAL_TIM_ConfigClockSource>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800069c:	f000 faf0 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006a0:	4b3b      	ldr	r3, [pc, #236]	@ (8000790 <MX_TIM1_Init+0x18c>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 f90c 	bl	80028c0 <HAL_TIM_PWM_Init>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80006ac:	f000 fae8 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b0:	2140      	movs	r1, #64	@ 0x40
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006be:	187a      	adds	r2, r7, r1
 80006c0:	4b33      	ldr	r3, [pc, #204]	@ (8000790 <MX_TIM1_Init+0x18c>)
 80006c2:	0011      	movs	r1, r2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f003 fb31 	bl	8003d2c <HAL_TIMEx_MasterConfigSynchronization>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80006ce:	f000 fad7 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d2:	2124      	movs	r1, #36	@ 0x24
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2260      	movs	r2, #96	@ 0x60
 80006d8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2219      	movs	r2, #25
 80006de:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006fe:	1879      	adds	r1, r7, r1
 8000700:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_TIM1_Init+0x18c>)
 8000702:	2200      	movs	r2, #0
 8000704:	0018      	movs	r0, r3
 8000706:	f002 fcf9 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800070e:	f000 fab7 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000712:	2324      	movs	r3, #36	@ 0x24
 8000714:	18f9      	adds	r1, r7, r3
 8000716:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_TIM1_Init+0x18c>)
 8000718:	2204      	movs	r2, #4
 800071a:	0018      	movs	r0, r3
 800071c:	f002 fcee 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000724:	f000 faac 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000728:	2324      	movs	r3, #36	@ 0x24
 800072a:	18f9      	adds	r1, r7, r3
 800072c:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_TIM1_Init+0x18c>)
 800072e:	2208      	movs	r2, #8
 8000730:	0018      	movs	r0, r3
 8000732:	f002 fce3 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800073a:	f000 faa1 	bl	8000c80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2280      	movs	r2, #128	@ 0x80
 8000760:	0192      	lsls	r2, r2, #6
 8000762:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800076a:	1d3a      	adds	r2, r7, #4
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_TIM1_Init+0x18c>)
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f003 fb33 	bl	8003ddc <HAL_TIMEx_ConfigBreakDeadTime>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800077a:	f000 fa81 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800077e:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <MX_TIM1_Init+0x18c>)
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fbf1 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b016      	add	sp, #88	@ 0x58
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	200000a0 	.word	0x200000a0
 8000794:	40012c00 	.word	0x40012c00

08000798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	2318      	movs	r3, #24
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	0018      	movs	r0, r3
 80007a4:	2310      	movs	r3, #16
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f004 fb49 	bl	8004e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	2310      	movs	r3, #16
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	0018      	movs	r0, r3
 80007b4:	2308      	movs	r3, #8
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f004 fb41 	bl	8004e40 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007be:	003b      	movs	r3, r7
 80007c0:	0018      	movs	r0, r3
 80007c2:	2310      	movs	r3, #16
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f004 fb3a 	bl	8004e40 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007cc:	4b33      	ldr	r3, [pc, #204]	@ (800089c <MX_TIM2_Init+0x104>)
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	05d2      	lsls	r2, r2, #23
 80007d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007d4:	4b31      	ldr	r3, [pc, #196]	@ (800089c <MX_TIM2_Init+0x104>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007da:	4b30      	ldr	r3, [pc, #192]	@ (800089c <MX_TIM2_Init+0x104>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007e0:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <MX_TIM2_Init+0x104>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	4252      	negs	r2, r2
 80007e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b2c      	ldr	r3, [pc, #176]	@ (800089c <MX_TIM2_Init+0x104>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ee:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <MX_TIM2_Init+0x104>)
 80007f0:	2280      	movs	r2, #128	@ 0x80
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f4:	4b29      	ldr	r3, [pc, #164]	@ (800089c <MX_TIM2_Init+0x104>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 f812 	bl	8002820 <HAL_TIM_Base_Init>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000800:	f000 fa3e 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	2118      	movs	r1, #24
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	0152      	lsls	r2, r2, #5
 800080c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800080e:	187a      	adds	r2, r7, r1
 8000810:	4b22      	ldr	r3, [pc, #136]	@ (800089c <MX_TIM2_Init+0x104>)
 8000812:	0011      	movs	r1, r2
 8000814:	0018      	movs	r0, r3
 8000816:	f002 fd37 	bl	8003288 <HAL_TIM_ConfigClockSource>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800081e:	f000 fa2f 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000822:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_TIM2_Init+0x104>)
 8000824:	0018      	movs	r0, r3
 8000826:	f002 f94f 	bl	8002ac8 <HAL_TIM_IC_Init>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800082e:	f000 fa27 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2110      	movs	r1, #16
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000840:	187a      	adds	r2, r7, r1
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_TIM2_Init+0x104>)
 8000844:	0011      	movs	r1, r2
 8000846:	0018      	movs	r0, r3
 8000848:	f003 fa70 	bl	8003d2c <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000850:	f000 fa16 	bl	8000c80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000854:	003b      	movs	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800085a:	003b      	movs	r3, r7
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000860:	003b      	movs	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000866:	003b      	movs	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800086c:	0039      	movs	r1, r7
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_TIM2_Init+0x104>)
 8000870:	2200      	movs	r2, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f002 fb9e 	bl	8002fb4 <HAL_TIM_IC_ConfigChannel>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800087c:	f000 fa00 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000880:	0039      	movs	r1, r7
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_TIM2_Init+0x104>)
 8000884:	2204      	movs	r2, #4
 8000886:	0018      	movs	r0, r3
 8000888:	f002 fb94 	bl	8002fb4 <HAL_TIM_IC_ConfigChannel>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000890:	f000 f9f6 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000894:	46c0      	nop			@ (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b00a      	add	sp, #40	@ 0x28
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000e8 	.word	0x200000e8

080008a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b092      	sub	sp, #72	@ 0x48
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	2338      	movs	r3, #56	@ 0x38
 80008a8:	18fb      	adds	r3, r7, r3
 80008aa:	0018      	movs	r0, r3
 80008ac:	2310      	movs	r3, #16
 80008ae:	001a      	movs	r2, r3
 80008b0:	2100      	movs	r1, #0
 80008b2:	f004 fac5 	bl	8004e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b6:	2330      	movs	r3, #48	@ 0x30
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	0018      	movs	r0, r3
 80008bc:	2308      	movs	r3, #8
 80008be:	001a      	movs	r2, r3
 80008c0:	2100      	movs	r1, #0
 80008c2:	f004 fabd 	bl	8004e40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c6:	2314      	movs	r3, #20
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	0018      	movs	r0, r3
 80008cc:	231c      	movs	r3, #28
 80008ce:	001a      	movs	r2, r3
 80008d0:	2100      	movs	r1, #0
 80008d2:	f004 fab5 	bl	8004e40 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	0018      	movs	r0, r3
 80008da:	2310      	movs	r3, #16
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f004 faae 	bl	8004e40 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e4:	4b49      	ldr	r3, [pc, #292]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 80008e6:	4a4a      	ldr	r2, [pc, #296]	@ (8000a10 <MX_TIM3_Init+0x170>)
 80008e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80008ea:	4b48      	ldr	r3, [pc, #288]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 80008ec:	2207      	movs	r2, #7
 80008ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b46      	ldr	r3, [pc, #280]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40;
 80008f6:	4b45      	ldr	r3, [pc, #276]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 80008f8:	2228      	movs	r2, #40	@ 0x28
 80008fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fc:	4b43      	ldr	r3, [pc, #268]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000902:	4b42      	ldr	r3, [pc, #264]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 8000904:	2280      	movs	r2, #128	@ 0x80
 8000906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000908:	4b40      	ldr	r3, [pc, #256]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 800090a:	0018      	movs	r0, r3
 800090c:	f001 ff88 	bl	8002820 <HAL_TIM_Base_Init>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000914:	f000 f9b4 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000918:	2138      	movs	r1, #56	@ 0x38
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	0152      	lsls	r2, r2, #5
 8000920:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000922:	187a      	adds	r2, r7, r1
 8000924:	4b39      	ldr	r3, [pc, #228]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 8000926:	0011      	movs	r1, r2
 8000928:	0018      	movs	r0, r3
 800092a:	f002 fcad 	bl	8003288 <HAL_TIM_ConfigClockSource>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000932:	f000 f9a5 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000936:	4b35      	ldr	r3, [pc, #212]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 8000938:	0018      	movs	r0, r3
 800093a:	f001 ffc1 	bl	80028c0 <HAL_TIM_PWM_Init>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000942:	f000 f99d 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000946:	4b31      	ldr	r3, [pc, #196]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 8000948:	0018      	movs	r0, r3
 800094a:	f002 f8bd 	bl	8002ac8 <HAL_TIM_IC_Init>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000952:	f000 f995 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000956:	2130      	movs	r1, #48	@ 0x30
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000964:	187a      	adds	r2, r7, r1
 8000966:	4b29      	ldr	r3, [pc, #164]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f003 f9de 	bl	8003d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000974:	f000 f984 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000978:	2114      	movs	r1, #20
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2260      	movs	r2, #96	@ 0x60
 800097e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2219      	movs	r2, #25
 8000984:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000992:	1879      	adds	r1, r7, r1
 8000994:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 8000996:	2200      	movs	r2, #0
 8000998:	0018      	movs	r0, r3
 800099a:	f002 fbaf 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 80009a2:	f000 f96d 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009a6:	2314      	movs	r3, #20
 80009a8:	18f9      	adds	r1, r7, r3
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 80009ac:	2204      	movs	r2, #4
 80009ae:	0018      	movs	r0, r3
 80009b0:	f002 fba4 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 80009b8:	f000 f962 	bl	8000c80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2201      	movs	r2, #1
 80009c6:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80009d4:	1d39      	adds	r1, r7, #4
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 80009d8:	2208      	movs	r2, #8
 80009da:	0018      	movs	r0, r3
 80009dc:	f002 faea 	bl	8002fb4 <HAL_TIM_IC_ConfigChannel>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM3_Init+0x148>
  {
    Error_Handler();
 80009e4:	f000 f94c 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80009e8:	1d39      	adds	r1, r7, #4
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 80009ec:	220c      	movs	r2, #12
 80009ee:	0018      	movs	r0, r3
 80009f0:	f002 fae0 	bl	8002fb4 <HAL_TIM_IC_ConfigChannel>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM3_Init+0x15c>
  {
    Error_Handler();
 80009f8:	f000 f942 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009fc:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <MX_TIM3_Init+0x16c>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fab2 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b012      	add	sp, #72	@ 0x48
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000130 	.word	0x20000130
 8000a10:	40000400 	.word	0x40000400

08000a14 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2310      	movs	r3, #16
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f004 fa0c 	bl	8004e40 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa4 <MX_TIM14_Init+0x90>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 40;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a3c:	2228      	movs	r2, #40	@ 0x28
 8000a3e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a48:	2280      	movs	r2, #128	@ 0x80
 8000a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f001 fee6 	bl	8002820 <HAL_TIM_Base_Init>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000a58:	f000 f912 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8000a5c:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 f832 	bl	8002ac8 <HAL_TIM_IC_Init>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 f90a 	bl	8000c80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a6c:	003b      	movs	r3, r7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2201      	movs	r2, #1
 8000a76:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000a7e:	003b      	movs	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a84:	0039      	movs	r1, r7
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 fa92 	bl	8002fb4 <HAL_TIM_IC_ConfigChannel>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000a94:	f000 f8f4 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b004      	add	sp, #16
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000178 	.word	0x20000178
 8000aa4:	40002000 	.word	0x40002000

08000aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000aae:	4a15      	ldr	r2, [pc, #84]	@ (8000b04 <MX_USART2_UART_Init+0x5c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ab4:	22e1      	movs	r2, #225	@ 0xe1
 8000ab6:	0252      	lsls	r2, r2, #9
 8000ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aea:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <MX_USART2_UART_Init+0x58>)
 8000aec:	0018      	movs	r0, r3
 8000aee:	f003 f9e3 	bl	8003eb8 <HAL_UART_Init>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000af6:	f000 f8c3 	bl	8000c80 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200001c0 	.word	0x200001c0
 8000b04:	40004400 	.word	0x40004400

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_GPIO_Init+0x48>)
 8000b10:	695a      	ldr	r2, [r3, #20]
 8000b12:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_GPIO_Init+0x48>)
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	0289      	lsls	r1, r1, #10
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	615a      	str	r2, [r3, #20]
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_GPIO_Init+0x48>)
 8000b1e:	695a      	ldr	r2, [r3, #20]
 8000b20:	2380      	movs	r3, #128	@ 0x80
 8000b22:	029b      	lsls	r3, r3, #10
 8000b24:	4013      	ands	r3, r2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_GPIO_Init+0x48>)
 8000b2c:	695a      	ldr	r2, [r3, #20]
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_GPIO_Init+0x48>)
 8000b30:	2180      	movs	r1, #128	@ 0x80
 8000b32:	02c9      	lsls	r1, r1, #11
 8000b34:	430a      	orrs	r2, r1
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <MX_GPIO_Init+0x48>)
 8000b3a:	695a      	ldr	r2, [r3, #20]
 8000b3c:	2380      	movs	r3, #128	@ 0x80
 8000b3e:	02db      	lsls	r3, r3, #11
 8000b40:	4013      	ands	r3, r2
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_TIM_IC_CaptureCallback>:
static bool first_capture = false;

/* Measure Frequency */
static uint16_t frequency[1] = {0};

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	4c3d      	ldr	r4, [pc, #244]	@ (8000c4c <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000b58:	44a5      	add	sp, r4
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	if ( &htim2 == htim ) {
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4b3b      	ldr	r3, [pc, #236]	@ (8000c50 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d16c      	bne.n	8000c40 <HAL_TIM_IC_CaptureCallback+0xec>

		if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 ) {
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7f1b      	ldrb	r3, [r3, #28]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d168      	bne.n	8000c40 <HAL_TIM_IC_CaptureCallback+0xec>

			if ( first_capture == false ) {
 8000b6e:	4b39      	ldr	r3, [pc, #228]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2201      	movs	r2, #1
 8000b74:	4053      	eors	r3, r2
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00b      	beq.n	8000b94 <HAL_TIM_IC_CaptureCallback+0x40>

				IC_first_rising_edge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2104      	movs	r1, #4
 8000b80:	0018      	movs	r0, r3
 8000b82:	f002 fc55 	bl	8003430 <HAL_TIM_ReadCapturedValue>
 8000b86:	0002      	movs	r2, r0
 8000b88:	4b33      	ldr	r3, [pc, #204]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000b8a:	601a      	str	r2, [r3, #0]
				first_capture = true;
 8000b8c:	4b31      	ldr	r3, [pc, #196]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	e055      	b.n	8000c40 <HAL_TIM_IC_CaptureCallback+0xec>
			}

			else {
				uint32_t diff = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	2483      	movs	r4, #131	@ 0x83
 8000b98:	00a4      	lsls	r4, r4, #2
 8000b9a:	193a      	adds	r2, r7, r4
 8000b9c:	6013      	str	r3, [r2, #0]

				IC_second_rising_edge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f002 fc44 	bl	8003430 <HAL_TIM_ReadCapturedValue>
 8000ba8:	0002      	movs	r2, r0
 8000baa:	4b2c      	ldr	r3, [pc, #176]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8000bac:	601a      	str	r2, [r3, #0]

				if (IC_second_rising_edge > IC_first_rising_edge) {
 8000bae:	4b2b      	ldr	r3, [pc, #172]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	4b29      	ldr	r3, [pc, #164]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <HAL_TIM_IC_CaptureCallback+0x76>

					diff = IC_second_rising_edge - IC_first_rising_edge;
 8000bba:	4b28      	ldr	r3, [pc, #160]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b26      	ldr	r3, [pc, #152]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	193a      	adds	r2, r7, r4
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e014      	b.n	8000bf4 <HAL_TIM_IC_CaptureCallback+0xa0>
				}

				else if (IC_first_rising_edge > IC_second_rising_edge) {
 8000bca:	4b23      	ldr	r3, [pc, #140]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d90a      	bls.n	8000bec <HAL_TIM_IC_CaptureCallback+0x98>

					diff = (0xFFFFFFFF - IC_first_rising_edge) + IC_second_rising_edge;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	3b01      	subs	r3, #1
 8000be2:	2283      	movs	r2, #131	@ 0x83
 8000be4:	0092      	lsls	r2, r2, #2
 8000be6:	18ba      	adds	r2, r7, r2
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e003      	b.n	8000bf4 <HAL_TIM_IC_CaptureCallback+0xa0>
				}

				else {
					frequency[0] = 0;
 8000bec:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	801a      	strh	r2, [r3, #0]
 8000bf2:	e025      	b.n	8000c40 <HAL_TIM_IC_CaptureCallback+0xec>
					return;
				}

				frequency[0] = REF_CLOCK / diff;
 8000bf4:	2383      	movs	r3, #131	@ 0x83
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	4819      	ldr	r0, [pc, #100]	@ (8000c64 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000bfe:	f7ff fa95 	bl	800012c <__udivsi3>
 8000c02:	0003      	movs	r3, r0
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000c08:	801a      	strh	r2, [r3, #0]

//				FEB_Current_IIR(frequency, frequency, filter, 1, filter_init);

				char str[512];

				sprintf(str, "Frequency: %u\n\r", frequency[0]);
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	001a      	movs	r2, r3
 8000c10:	4915      	ldr	r1, [pc, #84]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c12:	240c      	movs	r4, #12
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	0018      	movs	r0, r3
 8000c18:	f004 f8f2 	bl	8004e00 <siprintf>

				HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), 100);
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff fa72 	bl	8000108 <strlen>
 8000c24:	0003      	movs	r3, r0
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	1939      	adds	r1, r7, r4
 8000c2a:	4810      	ldr	r0, [pc, #64]	@ (8000c6c <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c2c:	2364      	movs	r3, #100	@ 0x64
 8000c2e:	f003 f997 	bl	8003f60 <HAL_UART_Transmit>
//				sprintf(str, "Second Edge: %lu\n\r\n\r", IC_second_rising_edge);
//
//				HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), 100);

//				IC_first_rising_edge = IC_second_rising_edge;
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	@ 0x24
				first_capture = false; // set it back to false
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]

			}
		}
	}
}
 8000c40:	46bd      	mov	sp, r7
 8000c42:	2385      	movs	r3, #133	@ 0x85
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	449d      	add	sp, r3
 8000c48:	bd90      	pop	{r4, r7, pc}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	fffffdec 	.word	0xfffffdec
 8000c50:	200000e8 	.word	0x200000e8
 8000c54:	20000250 	.word	0x20000250
 8000c58:	20000248 	.word	0x20000248
 8000c5c:	2000024c 	.word	0x2000024c
 8000c60:	20000254 	.word	0x20000254
 8000c64:	007a1200 	.word	0x007a1200
 8000c68:	08005750 	.word	0x08005750
 8000c6c:	200001c0 	.word	0x200001c0

08000c70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

}
 8000c78:	46c0      	nop			@ (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000c94:	699a      	ldr	r2, [r3, #24]
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000c98:	2101      	movs	r1, #1
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	619a      	str	r2, [r3, #24]
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000cac:	69da      	ldr	r2, [r3, #28]
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000cb0:	2180      	movs	r1, #128	@ 0x80
 8000cb2:	0549      	lsls	r1, r1, #21
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	61da      	str	r2, [r3, #28]
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000cba:	69da      	ldr	r2, [r3, #28]
 8000cbc:	2380      	movs	r3, #128	@ 0x80
 8000cbe:	055b      	lsls	r3, r3, #21
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	46c0      	nop			@ (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b08b      	sub	sp, #44	@ 0x2c
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	2414      	movs	r4, #20
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	2314      	movs	r3, #20
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	f004 f8aa 	bl	8004e40 <memset>
  if(hcan->Instance==CAN)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d68 <HAL_CAN_MspInit+0x94>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d133      	bne.n	8000d5e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <HAL_CAN_MspInit+0x98>)
 8000cf8:	69da      	ldr	r2, [r3, #28]
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <HAL_CAN_MspInit+0x98>)
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	0489      	lsls	r1, r1, #18
 8000d00:	430a      	orrs	r2, r1
 8000d02:	61da      	str	r2, [r3, #28]
 8000d04:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <HAL_CAN_MspInit+0x98>)
 8000d06:	69da      	ldr	r2, [r3, #28]
 8000d08:	2380      	movs	r3, #128	@ 0x80
 8000d0a:	049b      	lsls	r3, r3, #18
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <HAL_CAN_MspInit+0x98>)
 8000d14:	695a      	ldr	r2, [r3, #20]
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_CAN_MspInit+0x98>)
 8000d18:	2180      	movs	r1, #128	@ 0x80
 8000d1a:	0289      	lsls	r1, r1, #10
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_CAN_MspInit+0x98>)
 8000d22:	695a      	ldr	r2, [r3, #20]
 8000d24:	2380      	movs	r3, #128	@ 0x80
 8000d26:	029b      	lsls	r3, r3, #10
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	22c0      	movs	r2, #192	@ 0xc0
 8000d32:	0152      	lsls	r2, r2, #5
 8000d34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	0021      	movs	r1, r4
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2203      	movs	r2, #3
 8000d48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	187a      	adds	r2, r7, r1
 8000d52:	2390      	movs	r3, #144	@ 0x90
 8000d54:	05db      	lsls	r3, r3, #23
 8000d56:	0011      	movs	r1, r2
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f000 fec7 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b00b      	add	sp, #44	@ 0x2c
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	40006400 	.word	0x40006400
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	@ 0x38
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	2324      	movs	r3, #36	@ 0x24
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	2314      	movs	r3, #20
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f004 f85c 	bl	8004e40 <memset>
  if(htim_base->Instance==TIM1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a71      	ldr	r2, [pc, #452]	@ (8000f54 <HAL_TIM_Base_MspInit+0x1e4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d11e      	bne.n	8000dd0 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d92:	4b71      	ldr	r3, [pc, #452]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000d94:	699a      	ldr	r2, [r3, #24]
 8000d96:	4b70      	ldr	r3, [pc, #448]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000d98:	2180      	movs	r1, #128	@ 0x80
 8000d9a:	0109      	lsls	r1, r1, #4
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	619a      	str	r2, [r3, #24]
 8000da0:	4b6d      	ldr	r3, [pc, #436]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000da2:	699a      	ldr	r2, [r3, #24]
 8000da4:	2380      	movs	r3, #128	@ 0x80
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	4013      	ands	r3, r2
 8000daa:	623b      	str	r3, [r7, #32]
 8000dac:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	200d      	movs	r0, #13
 8000db4:	f000 fdea 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000db8:	200d      	movs	r0, #13
 8000dba:	f000 fdfc 	bl	80019b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	200e      	movs	r0, #14
 8000dc4:	f000 fde2 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000dc8:	200e      	movs	r0, #14
 8000dca:	f000 fdf4 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000dce:	e0bd      	b.n	8000f4c <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2380      	movs	r3, #128	@ 0x80
 8000dd6:	05db      	lsls	r3, r3, #23
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d139      	bne.n	8000e50 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000dde:	69da      	ldr	r2, [r3, #28]
 8000de0:	4b5d      	ldr	r3, [pc, #372]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000de2:	2101      	movs	r1, #1
 8000de4:	430a      	orrs	r2, r1
 8000de6:	61da      	str	r2, [r3, #28]
 8000de8:	4b5b      	ldr	r3, [pc, #364]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	2201      	movs	r2, #1
 8000dee:	4013      	ands	r3, r2
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b58      	ldr	r3, [pc, #352]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000df6:	695a      	ldr	r2, [r3, #20]
 8000df8:	4b57      	ldr	r3, [pc, #348]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000dfa:	2180      	movs	r1, #128	@ 0x80
 8000dfc:	0289      	lsls	r1, r1, #10
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	4b55      	ldr	r3, [pc, #340]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000e04:	695a      	ldr	r2, [r3, #20]
 8000e06:	2380      	movs	r3, #128	@ 0x80
 8000e08:	029b      	lsls	r3, r3, #10
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e10:	2124      	movs	r1, #36	@ 0x24
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2203      	movs	r2, #3
 8000e16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	187a      	adds	r2, r7, r1
 8000e32:	2390      	movs	r3, #144	@ 0x90
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f000 fe57 	bl	8001aec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	200f      	movs	r0, #15
 8000e44:	f000 fda2 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e48:	200f      	movs	r0, #15
 8000e4a:	f000 fdb4 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 8000e4e:	e07d      	b.n	8000f4c <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a41      	ldr	r2, [pc, #260]	@ (8000f5c <HAL_TIM_Base_MspInit+0x1ec>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d138      	bne.n	8000ecc <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000e5c:	69da      	ldr	r2, [r3, #28]
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000e60:	2102      	movs	r1, #2
 8000e62:	430a      	orrs	r2, r1
 8000e64:	61da      	str	r2, [r3, #28]
 8000e66:	4b3c      	ldr	r3, [pc, #240]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b39      	ldr	r3, [pc, #228]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	4b38      	ldr	r3, [pc, #224]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	02c9      	lsls	r1, r1, #11
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	4b35      	ldr	r3, [pc, #212]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000e82:	695a      	ldr	r2, [r3, #20]
 8000e84:	2380      	movs	r3, #128	@ 0x80
 8000e86:	02db      	lsls	r3, r3, #11
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e8e:	2124      	movs	r1, #36	@ 0x24
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2203      	movs	r2, #3
 8000e94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2202      	movs	r2, #2
 8000e9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2201      	movs	r2, #1
 8000eac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f60 <HAL_TIM_Base_MspInit+0x1f0>)
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	0010      	movs	r0, r2
 8000eb6:	f000 fe19 	bl	8001aec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2010      	movs	r0, #16
 8000ec0:	f000 fd64 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f000 fd76 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 8000eca:	e03f      	b.n	8000f4c <HAL_TIM_Base_MspInit+0x1dc>
  else if(htim_base->Instance==TIM14)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a24      	ldr	r2, [pc, #144]	@ (8000f64 <HAL_TIM_Base_MspInit+0x1f4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d13a      	bne.n	8000f4c <HAL_TIM_Base_MspInit+0x1dc>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ed6:	4b20      	ldr	r3, [pc, #128]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000ed8:	69da      	ldr	r2, [r3, #28]
 8000eda:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000edc:	2180      	movs	r1, #128	@ 0x80
 8000ede:	0049      	lsls	r1, r1, #1
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	61da      	str	r2, [r3, #28]
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000ee6:	69da      	ldr	r2, [r3, #28]
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000ef8:	2180      	movs	r1, #128	@ 0x80
 8000efa:	0289      	lsls	r1, r1, #10
 8000efc:	430a      	orrs	r2, r1
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_TIM_Base_MspInit+0x1e8>)
 8000f02:	695a      	ldr	r2, [r3, #20]
 8000f04:	2380      	movs	r3, #128	@ 0x80
 8000f06:	029b      	lsls	r3, r3, #10
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f0e:	2124      	movs	r1, #36	@ 0x24
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2210      	movs	r2, #16
 8000f14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2202      	movs	r2, #2
 8000f1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	187a      	adds	r2, r7, r1
 8000f30:	2390      	movs	r3, #144	@ 0x90
 8000f32:	05db      	lsls	r3, r3, #23
 8000f34:	0011      	movs	r1, r2
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 fdd8 	bl	8001aec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2013      	movs	r0, #19
 8000f42:	f000 fd23 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000f46:	2013      	movs	r0, #19
 8000f48:	f000 fd35 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b00e      	add	sp, #56	@ 0x38
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40012c00 	.word	0x40012c00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40000400 	.word	0x40000400
 8000f60:	48000400 	.word	0x48000400
 8000f64:	40002000 	.word	0x40002000

08000f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b08b      	sub	sp, #44	@ 0x2c
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	2414      	movs	r4, #20
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	0018      	movs	r0, r3
 8000f76:	2314      	movs	r3, #20
 8000f78:	001a      	movs	r2, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f003 ff60 	bl	8004e40 <memset>
  if(htim->Instance==TIM1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a2b      	ldr	r2, [pc, #172]	@ (8001034 <HAL_TIM_MspPostInit+0xcc>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d126      	bne.n	8000fd8 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001038 <HAL_TIM_MspPostInit+0xd0>)
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <HAL_TIM_MspPostInit+0xd0>)
 8000f90:	2180      	movs	r1, #128	@ 0x80
 8000f92:	0289      	lsls	r1, r1, #10
 8000f94:	430a      	orrs	r2, r1
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <HAL_TIM_MspPostInit+0xd0>)
 8000f9a:	695a      	ldr	r2, [r3, #20]
 8000f9c:	2380      	movs	r3, #128	@ 0x80
 8000f9e:	029b      	lsls	r3, r3, #10
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	22e0      	movs	r2, #224	@ 0xe0
 8000faa:	00d2      	lsls	r2, r2, #3
 8000fac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	0021      	movs	r1, r4
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	187a      	adds	r2, r7, r1
 8000fca:	2390      	movs	r3, #144	@ 0x90
 8000fcc:	05db      	lsls	r3, r3, #23
 8000fce:	0011      	movs	r1, r2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f000 fd8b 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fd6:	e028      	b.n	800102a <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM3)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a17      	ldr	r2, [pc, #92]	@ (800103c <HAL_TIM_MspPostInit+0xd4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d123      	bne.n	800102a <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <HAL_TIM_MspPostInit+0xd0>)
 8000fe4:	695a      	ldr	r2, [r3, #20]
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <HAL_TIM_MspPostInit+0xd0>)
 8000fe8:	2180      	movs	r1, #128	@ 0x80
 8000fea:	02c9      	lsls	r1, r1, #11
 8000fec:	430a      	orrs	r2, r1
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <HAL_TIM_MspPostInit+0xd0>)
 8000ff2:	695a      	ldr	r2, [r3, #20]
 8000ff4:	2380      	movs	r3, #128	@ 0x80
 8000ff6:	02db      	lsls	r3, r3, #11
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ffe:	2114      	movs	r1, #20
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2230      	movs	r2, #48	@ 0x30
 8001004:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2202      	movs	r2, #2
 800100a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2201      	movs	r2, #1
 800101c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	187b      	adds	r3, r7, r1
 8001020:	4a07      	ldr	r2, [pc, #28]	@ (8001040 <HAL_TIM_MspPostInit+0xd8>)
 8001022:	0019      	movs	r1, r3
 8001024:	0010      	movs	r0, r2
 8001026:	f000 fd61 	bl	8001aec <HAL_GPIO_Init>
}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b00b      	add	sp, #44	@ 0x2c
 8001030:	bd90      	pop	{r4, r7, pc}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	40012c00 	.word	0x40012c00
 8001038:	40021000 	.word	0x40021000
 800103c:	40000400 	.word	0x40000400
 8001040:	48000400 	.word	0x48000400

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08b      	sub	sp, #44	@ 0x2c
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	2414      	movs	r4, #20
 800104e:	193b      	adds	r3, r7, r4
 8001050:	0018      	movs	r0, r3
 8001052:	2314      	movs	r3, #20
 8001054:	001a      	movs	r2, r3
 8001056:	2100      	movs	r1, #0
 8001058:	f003 fef2 	bl	8004e40 <memset>
  if(huart->Instance==USART2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a20      	ldr	r2, [pc, #128]	@ (80010e4 <HAL_UART_MspInit+0xa0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d13a      	bne.n	80010dc <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001066:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <HAL_UART_MspInit+0xa4>)
 8001068:	69da      	ldr	r2, [r3, #28]
 800106a:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <HAL_UART_MspInit+0xa4>)
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	0289      	lsls	r1, r1, #10
 8001070:	430a      	orrs	r2, r1
 8001072:	61da      	str	r2, [r3, #28]
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_UART_MspInit+0xa4>)
 8001076:	69da      	ldr	r2, [r3, #28]
 8001078:	2380      	movs	r3, #128	@ 0x80
 800107a:	029b      	lsls	r3, r3, #10
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_UART_MspInit+0xa4>)
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_UART_MspInit+0xa4>)
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	0289      	lsls	r1, r1, #10
 800108c:	430a      	orrs	r2, r1
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_UART_MspInit+0xa4>)
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	2380      	movs	r3, #128	@ 0x80
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800109e:	0021      	movs	r1, r4
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	220c      	movs	r2, #12
 80010a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2202      	movs	r2, #2
 80010aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2203      	movs	r2, #3
 80010b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2201      	movs	r2, #1
 80010bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	187a      	adds	r2, r7, r1
 80010c0:	2390      	movs	r3, #144	@ 0x90
 80010c2:	05db      	lsls	r3, r3, #23
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f000 fd10 	bl	8001aec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	201c      	movs	r0, #28
 80010d2:	f000 fc5b 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010d6:	201c      	movs	r0, #28
 80010d8:	f000 fc6d 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010dc:	46c0      	nop			@ (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b00b      	add	sp, #44	@ 0x2c
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	40004400 	.word	0x40004400
 80010e8:	40021000 	.word	0x40021000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	e7fd      	b.n	80010f0 <NMI_Handler+0x4>

080010f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f8:	46c0      	nop			@ (mov r8, r8)
 80010fa:	e7fd      	b.n	80010f8 <HardFault_Handler+0x4>

080010fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001100:	46c0      	nop			@ (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f912 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	46c0      	nop			@ (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001124:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001126:	0018      	movs	r0, r3
 8001128:	f001 fe2e 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800112c:	46c0      	nop			@ (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	200000a0 	.word	0x200000a0

08001138 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <TIM1_CC_IRQHandler+0x14>)
 800113e:	0018      	movs	r0, r3
 8001140:	f001 fe22 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	200000a0 	.word	0x200000a0

08001150 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001154:	4b03      	ldr	r3, [pc, #12]	@ (8001164 <TIM2_IRQHandler+0x14>)
 8001156:	0018      	movs	r0, r3
 8001158:	f001 fe16 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800115c:	46c0      	nop			@ (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	200000e8 	.word	0x200000e8

08001168 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//FEB_Test_PWM();

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <TIM3_IRQHandler+0x14>)
 800116e:	0018      	movs	r0, r3
 8001170:	f001 fe0a 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	20000130 	.word	0x20000130

08001180 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <TIM14_IRQHandler+0x14>)
 8001186:	0018      	movs	r0, r3
 8001188:	f001 fdfe 	bl	8002d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800118c:	46c0      	nop			@ (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	20000178 	.word	0x20000178

08001198 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800119c:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <USART2_IRQHandler+0x14>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f002 ff7e 	bl	80040a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	200001c0 	.word	0x200001c0

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b8:	4a14      	ldr	r2, [pc, #80]	@ (800120c <_sbrk+0x5c>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <_sbrk+0x60>)
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <_sbrk+0x64>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <_sbrk+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	18d3      	adds	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e0:	f003 fe36 	bl	8004e50 <__errno>
 80011e4:	0003      	movs	r3, r0
 80011e6:	220c      	movs	r2, #12
 80011e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	425b      	negs	r3, r3
 80011ee:	e009      	b.n	8001204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	18d2      	adds	r2, r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <_sbrk+0x64>)
 8001200:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	b006      	add	sp, #24
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20001800 	.word	0x20001800
 8001210:	00000400 	.word	0x00000400
 8001214:	20000258 	.word	0x20000258
 8001218:	200003a8 	.word	0x200003a8

0800121c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001220:	46c0      	nop			@ (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001228:	4813      	ldr	r0, [pc, #76]	@ (8001278 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800122a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800122c:	f7ff fff6 	bl	800121c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001230:	4812      	ldr	r0, [pc, #72]	@ (800127c <LoopForever+0x6>)
    LDR R1, [R0]
 8001232:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001234:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001236:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <LoopForever+0xa>)
    CMP R1, R2
 8001238:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800123a:	d105      	bne.n	8001248 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800123c:	4811      	ldr	r0, [pc, #68]	@ (8001284 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800123e:	4912      	ldr	r1, [pc, #72]	@ (8001288 <LoopForever+0x12>)
    STR R1, [R0]
 8001240:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001242:	4812      	ldr	r0, [pc, #72]	@ (800128c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001244:	4912      	ldr	r1, [pc, #72]	@ (8001290 <LoopForever+0x1a>)
    STR R1, [R0]
 8001246:	6001      	str	r1, [r0, #0]

08001248 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001248:	4812      	ldr	r0, [pc, #72]	@ (8001294 <LoopForever+0x1e>)
  ldr r1, =_edata
 800124a:	4913      	ldr	r1, [pc, #76]	@ (8001298 <LoopForever+0x22>)
  ldr r2, =_sidata
 800124c:	4a13      	ldr	r2, [pc, #76]	@ (800129c <LoopForever+0x26>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a10      	ldr	r2, [pc, #64]	@ (80012a0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001260:	4c10      	ldr	r4, [pc, #64]	@ (80012a4 <LoopForever+0x2e>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800126e:	f003 fdf5 	bl	8004e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001272:	f7ff f931 	bl	80004d8 <main>

08001276 <LoopForever>:

LoopForever:
    b LoopForever
 8001276:	e7fe      	b.n	8001276 <LoopForever>
  ldr   r0, =_estack
 8001278:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800127c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001280:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001284:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001288:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800128c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001290:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800129c:	080057d4 	.word	0x080057d4
  ldr r2, =_sbss
 80012a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80012a4:	200003a8 	.word	0x200003a8

080012a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC1_IRQHandler>
	...

080012ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <HAL_Init+0x24>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_Init+0x24>)
 80012b6:	2110      	movs	r1, #16
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f809 	bl	80012d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c2:	f7ff fce3 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	40022000 	.word	0x40022000

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <HAL_InitTick+0x5c>)
 80012de:	681c      	ldr	r4, [r3, #0]
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_InitTick+0x60>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	0019      	movs	r1, r3
 80012e6:	23fa      	movs	r3, #250	@ 0xfa
 80012e8:	0098      	lsls	r0, r3, #2
 80012ea:	f7fe ff1f 	bl	800012c <__udivsi3>
 80012ee:	0003      	movs	r3, r0
 80012f0:	0019      	movs	r1, r3
 80012f2:	0020      	movs	r0, r4
 80012f4:	f7fe ff1a 	bl	800012c <__udivsi3>
 80012f8:	0003      	movs	r3, r0
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 fb6b 	bl	80019d6 <HAL_SYSTICK_Config>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d001      	beq.n	8001308 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e00f      	b.n	8001328 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d80b      	bhi.n	8001326 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	2301      	movs	r3, #1
 8001312:	425b      	negs	r3, r3
 8001314:	2200      	movs	r2, #0
 8001316:	0018      	movs	r0, r3
 8001318:	f000 fb38 	bl	800198c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_InitTick+0x64>)
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b003      	add	sp, #12
 800132e:	bd90      	pop	{r4, r7, pc}
 8001330:	20000000 	.word	0x20000000
 8001334:	20000008 	.word	0x20000008
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <HAL_IncTick+0x1c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	001a      	movs	r2, r3
 8001346:	4b05      	ldr	r3, [pc, #20]	@ (800135c <HAL_IncTick+0x20>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	18d2      	adds	r2, r2, r3
 800134c:	4b03      	ldr	r3, [pc, #12]	@ (800135c <HAL_IncTick+0x20>)
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	46c0      	nop			@ (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	20000008 	.word	0x20000008
 800135c:	2000025c 	.word	0x2000025c

08001360 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b02      	ldr	r3, [pc, #8]	@ (8001370 <HAL_GetTick+0x10>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	2000025c 	.word	0x2000025c

08001374 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e0f0      	b.n	8001568 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2220      	movs	r2, #32
 800138a:	5c9b      	ldrb	r3, [r3, r2]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d103      	bne.n	800139a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff fc9d 	bl	8000cd4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2101      	movs	r1, #1
 80013a6:	430a      	orrs	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013aa:	f7ff ffd9 	bl	8001360 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013b2:	e013      	b.n	80013dc <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013b4:	f7ff ffd4 	bl	8001360 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b0a      	cmp	r3, #10
 80013c0:	d90c      	bls.n	80013dc <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	2280      	movs	r2, #128	@ 0x80
 80013c8:	0292      	lsls	r2, r2, #10
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2220      	movs	r2, #32
 80013d4:	2105      	movs	r1, #5
 80013d6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0c5      	b.n	8001568 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0e5      	beq.n	80013b4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2102      	movs	r1, #2
 80013f4:	438a      	bics	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f8:	f7ff ffb2 	bl	8001360 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001400:	e013      	b.n	800142a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001402:	f7ff ffad 	bl	8001360 <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b0a      	cmp	r3, #10
 800140e:	d90c      	bls.n	800142a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001414:	2280      	movs	r2, #128	@ 0x80
 8001416:	0292      	lsls	r2, r2, #10
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2220      	movs	r2, #32
 8001422:	2105      	movs	r1, #5
 8001424:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e09e      	b.n	8001568 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2202      	movs	r2, #2
 8001432:	4013      	ands	r3, r2
 8001434:	d1e5      	bne.n	8001402 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7e1b      	ldrb	r3, [r3, #24]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d108      	bne.n	8001450 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2180      	movs	r1, #128	@ 0x80
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e007      	b.n	8001460 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2180      	movs	r1, #128	@ 0x80
 800145c:	438a      	bics	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7e5b      	ldrb	r3, [r3, #25]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d108      	bne.n	800147a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2140      	movs	r1, #64	@ 0x40
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e007      	b.n	800148a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2140      	movs	r1, #64	@ 0x40
 8001486:	438a      	bics	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7e9b      	ldrb	r3, [r3, #26]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d108      	bne.n	80014a4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2120      	movs	r1, #32
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e007      	b.n	80014b4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2120      	movs	r1, #32
 80014b0:	438a      	bics	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7edb      	ldrb	r3, [r3, #27]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d108      	bne.n	80014ce <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2110      	movs	r1, #16
 80014c8:	438a      	bics	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e007      	b.n	80014de <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2110      	movs	r1, #16
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7f1b      	ldrb	r3, [r3, #28]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d108      	bne.n	80014f8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2108      	movs	r1, #8
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e007      	b.n	8001508 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2108      	movs	r1, #8
 8001504:	438a      	bics	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7f5b      	ldrb	r3, [r3, #29]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2104      	movs	r1, #4
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e007      	b.n	8001532 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2104      	movs	r1, #4
 800152e:	438a      	bics	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	431a      	orrs	r2, r3
 8001548:	0011      	movs	r1, r2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	1e5a      	subs	r2, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2220      	movs	r2, #32
 8001562:	2101      	movs	r1, #1
 8001564:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b004      	add	sp, #16
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001580:	2013      	movs	r0, #19
 8001582:	183b      	adds	r3, r7, r0
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	2120      	movs	r1, #32
 8001588:	5c52      	ldrb	r2, [r2, r1]
 800158a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800158c:	0002      	movs	r2, r0
 800158e:	18bb      	adds	r3, r7, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d004      	beq.n	80015a0 <HAL_CAN_ConfigFilter+0x30>
 8001596:	18bb      	adds	r3, r7, r2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d000      	beq.n	80015a0 <HAL_CAN_ConfigFilter+0x30>
 800159e:	e0cd      	b.n	800173c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	2380      	movs	r3, #128	@ 0x80
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	58d3      	ldr	r3, [r2, r3]
 80015a8:	2201      	movs	r2, #1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	0011      	movs	r1, r2
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	221f      	movs	r2, #31
 80015bc:	4013      	ands	r3, r2
 80015be:	2201      	movs	r2, #1
 80015c0:	409a      	lsls	r2, r3
 80015c2:	0013      	movs	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	2387      	movs	r3, #135	@ 0x87
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	58d3      	ldr	r3, [r2, r3]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	43d2      	mvns	r2, r2
 80015d2:	401a      	ands	r2, r3
 80015d4:	0011      	movs	r1, r2
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	2387      	movs	r3, #135	@ 0x87
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d129      	bne.n	800163a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	2383      	movs	r3, #131	@ 0x83
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	58d3      	ldr	r3, [r2, r3]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	43d2      	mvns	r2, r2
 80015f2:	401a      	ands	r2, r3
 80015f4:	0011      	movs	r1, r2
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	2383      	movs	r3, #131	@ 0x83
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001610:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3248      	adds	r2, #72	@ 0x48
 8001616:	00d2      	lsls	r2, r2, #3
 8001618:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	041b      	lsls	r3, r3, #16
 8001626:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800162c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800162e:	6979      	ldr	r1, [r7, #20]
 8001630:	3348      	adds	r3, #72	@ 0x48
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	18cb      	adds	r3, r1, r3
 8001636:	3304      	adds	r3, #4
 8001638:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d128      	bne.n	8001694 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	2383      	movs	r3, #131	@ 0x83
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	58d2      	ldr	r2, [r2, r3]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	431a      	orrs	r2, r3
 800164e:	0011      	movs	r1, r2
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	2383      	movs	r3, #131	@ 0x83
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800166a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3248      	adds	r2, #72	@ 0x48
 8001670:	00d2      	lsls	r2, r2, #3
 8001672:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	041b      	lsls	r3, r3, #16
 8001680:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001686:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001688:	6979      	ldr	r1, [r7, #20]
 800168a:	3348      	adds	r3, #72	@ 0x48
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	18cb      	adds	r3, r1, r3
 8001690:	3304      	adds	r3, #4
 8001692:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10c      	bne.n	80016b6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	2381      	movs	r3, #129	@ 0x81
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	58d3      	ldr	r3, [r2, r3]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	43d2      	mvns	r2, r2
 80016a8:	401a      	ands	r2, r3
 80016aa:	0011      	movs	r1, r2
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	2381      	movs	r3, #129	@ 0x81
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	50d1      	str	r1, [r2, r3]
 80016b4:	e00a      	b.n	80016cc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	2381      	movs	r3, #129	@ 0x81
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	58d2      	ldr	r2, [r2, r3]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	431a      	orrs	r2, r3
 80016c2:	0011      	movs	r1, r2
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	2381      	movs	r3, #129	@ 0x81
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10c      	bne.n	80016ee <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	2385      	movs	r3, #133	@ 0x85
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	58d3      	ldr	r3, [r2, r3]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	43d2      	mvns	r2, r2
 80016e0:	401a      	ands	r2, r3
 80016e2:	0011      	movs	r1, r2
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	2385      	movs	r3, #133	@ 0x85
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	50d1      	str	r1, [r2, r3]
 80016ec:	e00a      	b.n	8001704 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	2385      	movs	r3, #133	@ 0x85
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	58d2      	ldr	r2, [r2, r3]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	0011      	movs	r1, r2
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	2385      	movs	r3, #133	@ 0x85
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d10a      	bne.n	8001722 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	2387      	movs	r3, #135	@ 0x87
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	58d2      	ldr	r2, [r2, r3]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	431a      	orrs	r2, r3
 8001718:	0011      	movs	r1, r2
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	2387      	movs	r3, #135	@ 0x87
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	58d3      	ldr	r3, [r2, r3]
 800172a:	2201      	movs	r2, #1
 800172c:	4393      	bics	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	2380      	movs	r3, #128	@ 0x80
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	e007      	b.n	800174c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	2280      	movs	r2, #128	@ 0x80
 8001742:	02d2      	lsls	r2, r2, #11
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
  }
}
 800174c:	0018      	movs	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	b006      	add	sp, #24
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2220      	movs	r2, #32
 8001760:	5c9b      	ldrb	r3, [r3, r2]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d12f      	bne.n	80017c8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2220      	movs	r2, #32
 800176c:	2102      	movs	r1, #2
 800176e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2101      	movs	r1, #1
 800177c:	438a      	bics	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001780:	f7ff fdee 	bl	8001360 <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001788:	e013      	b.n	80017b2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800178a:	f7ff fde9 	bl	8001360 <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b0a      	cmp	r3, #10
 8001796:	d90c      	bls.n	80017b2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	2280      	movs	r2, #128	@ 0x80
 800179e:	0292      	lsls	r2, r2, #10
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2220      	movs	r2, #32
 80017aa:	2105      	movs	r1, #5
 80017ac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e012      	b.n	80017d8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	4013      	ands	r3, r2
 80017bc:	d1e5      	bne.n	800178a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e007      	b.n	80017d8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	2280      	movs	r2, #128	@ 0x80
 80017ce:	0312      	lsls	r2, r2, #12
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
  }
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b004      	add	sp, #16
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017ea:	200f      	movs	r0, #15
 80017ec:	183b      	adds	r3, r7, r0
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	2120      	movs	r1, #32
 80017f2:	5c52      	ldrb	r2, [r2, r1]
 80017f4:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017f6:	0002      	movs	r2, r0
 80017f8:	18bb      	adds	r3, r7, r2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d003      	beq.n	8001808 <HAL_CAN_ActivateNotification+0x28>
 8001800:	18bb      	adds	r3, r7, r2
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d109      	bne.n	800181c <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6959      	ldr	r1, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e007      	b.n	800182c <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	2280      	movs	r2, #128	@ 0x80
 8001822:	02d2      	lsls	r2, r2, #11
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
  }
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b004      	add	sp, #16
 8001832:	bd80      	pop	{r7, pc}

08001834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	0002      	movs	r2, r0
 800183c:	1dfb      	adds	r3, r7, #7
 800183e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001840:	1dfb      	adds	r3, r7, #7
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b7f      	cmp	r3, #127	@ 0x7f
 8001846:	d809      	bhi.n	800185c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001848:	1dfb      	adds	r3, r7, #7
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	001a      	movs	r2, r3
 800184e:	231f      	movs	r3, #31
 8001850:	401a      	ands	r2, r3
 8001852:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <__NVIC_EnableIRQ+0x30>)
 8001854:	2101      	movs	r1, #1
 8001856:	4091      	lsls	r1, r2
 8001858:	000a      	movs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
  }
}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	0002      	movs	r2, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001876:	1dfb      	adds	r3, r7, #7
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b7f      	cmp	r3, #127	@ 0x7f
 800187c:	d828      	bhi.n	80018d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800187e:	4a2f      	ldr	r2, [pc, #188]	@ (800193c <__NVIC_SetPriority+0xd4>)
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b25b      	sxtb	r3, r3
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	33c0      	adds	r3, #192	@ 0xc0
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	589b      	ldr	r3, [r3, r2]
 800188e:	1dfa      	adds	r2, r7, #7
 8001890:	7812      	ldrb	r2, [r2, #0]
 8001892:	0011      	movs	r1, r2
 8001894:	2203      	movs	r2, #3
 8001896:	400a      	ands	r2, r1
 8001898:	00d2      	lsls	r2, r2, #3
 800189a:	21ff      	movs	r1, #255	@ 0xff
 800189c:	4091      	lsls	r1, r2
 800189e:	000a      	movs	r2, r1
 80018a0:	43d2      	mvns	r2, r2
 80018a2:	401a      	ands	r2, r3
 80018a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	019b      	lsls	r3, r3, #6
 80018aa:	22ff      	movs	r2, #255	@ 0xff
 80018ac:	401a      	ands	r2, r3
 80018ae:	1dfb      	adds	r3, r7, #7
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	0018      	movs	r0, r3
 80018b4:	2303      	movs	r3, #3
 80018b6:	4003      	ands	r3, r0
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018bc:	481f      	ldr	r0, [pc, #124]	@ (800193c <__NVIC_SetPriority+0xd4>)
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b25b      	sxtb	r3, r3
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	430a      	orrs	r2, r1
 80018c8:	33c0      	adds	r3, #192	@ 0xc0
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018ce:	e031      	b.n	8001934 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001940 <__NVIC_SetPriority+0xd8>)
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	0019      	movs	r1, r3
 80018d8:	230f      	movs	r3, #15
 80018da:	400b      	ands	r3, r1
 80018dc:	3b08      	subs	r3, #8
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3306      	adds	r3, #6
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	18d3      	adds	r3, r2, r3
 80018e6:	3304      	adds	r3, #4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	1dfa      	adds	r2, r7, #7
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	0011      	movs	r1, r2
 80018f0:	2203      	movs	r2, #3
 80018f2:	400a      	ands	r2, r1
 80018f4:	00d2      	lsls	r2, r2, #3
 80018f6:	21ff      	movs	r1, #255	@ 0xff
 80018f8:	4091      	lsls	r1, r2
 80018fa:	000a      	movs	r2, r1
 80018fc:	43d2      	mvns	r2, r2
 80018fe:	401a      	ands	r2, r3
 8001900:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	019b      	lsls	r3, r3, #6
 8001906:	22ff      	movs	r2, #255	@ 0xff
 8001908:	401a      	ands	r2, r3
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	0018      	movs	r0, r3
 8001910:	2303      	movs	r3, #3
 8001912:	4003      	ands	r3, r0
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001918:	4809      	ldr	r0, [pc, #36]	@ (8001940 <__NVIC_SetPriority+0xd8>)
 800191a:	1dfb      	adds	r3, r7, #7
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	001c      	movs	r4, r3
 8001920:	230f      	movs	r3, #15
 8001922:	4023      	ands	r3, r4
 8001924:	3b08      	subs	r3, #8
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	430a      	orrs	r2, r1
 800192a:	3306      	adds	r3, #6
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	18c3      	adds	r3, r0, r3
 8001930:	3304      	adds	r3, #4
 8001932:	601a      	str	r2, [r3, #0]
}
 8001934:	46c0      	nop			@ (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b003      	add	sp, #12
 800193a:	bd90      	pop	{r4, r7, pc}
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	1e5a      	subs	r2, r3, #1
 8001950:	2380      	movs	r3, #128	@ 0x80
 8001952:	045b      	lsls	r3, r3, #17
 8001954:	429a      	cmp	r2, r3
 8001956:	d301      	bcc.n	800195c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001958:	2301      	movs	r3, #1
 800195a:	e010      	b.n	800197e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195c:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <SysTick_Config+0x44>)
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	3a01      	subs	r2, #1
 8001962:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001964:	2301      	movs	r3, #1
 8001966:	425b      	negs	r3, r3
 8001968:	2103      	movs	r1, #3
 800196a:	0018      	movs	r0, r3
 800196c:	f7ff ff7c 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <SysTick_Config+0x44>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <SysTick_Config+0x44>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b002      	add	sp, #8
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	210f      	movs	r1, #15
 8001998:	187b      	adds	r3, r7, r1
 800199a:	1c02      	adds	r2, r0, #0
 800199c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	0011      	movs	r1, r2
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff ff5d 	bl	8001868 <__NVIC_SetPriority>
}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b004      	add	sp, #16
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	0002      	movs	r2, r0
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff ff33 	bl	8001834 <__NVIC_EnableIRQ>
}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b002      	add	sp, #8
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7ff ffaf 	bl	8001944 <SysTick_Config>
 80019e6:	0003      	movs	r3, r0
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2221      	movs	r2, #33	@ 0x21
 80019fc:	5c9b      	ldrb	r3, [r3, r2]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d008      	beq.n	8001a16 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2204      	movs	r2, #4
 8001a08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	2100      	movs	r1, #0
 8001a10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e020      	b.n	8001a58 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	210e      	movs	r1, #14
 8001a22:	438a      	bics	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	438a      	bics	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3e:	2101      	movs	r1, #1
 8001a40:	4091      	lsls	r1, r2
 8001a42:	000a      	movs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2221      	movs	r2, #33	@ 0x21
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2220      	movs	r2, #32
 8001a52:	2100      	movs	r1, #0
 8001a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a68:	210f      	movs	r1, #15
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2221      	movs	r2, #33	@ 0x21
 8001a74:	5c9b      	ldrb	r3, [r3, r2]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d006      	beq.n	8001a8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2204      	movs	r2, #4
 8001a80:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e028      	b.n	8001adc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	210e      	movs	r1, #14
 8001a96:	438a      	bics	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	438a      	bics	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	4091      	lsls	r1, r2
 8001ab6:	000a      	movs	r2, r1
 8001ab8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2221      	movs	r2, #33	@ 0x21
 8001abe:	2101      	movs	r1, #1
 8001ac0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	0010      	movs	r0, r2
 8001ada:	4798      	blx	r3
    }
  }
  return status;
 8001adc:	230f      	movs	r3, #15
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	781b      	ldrb	r3, [r3, #0]
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b004      	add	sp, #16
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	e149      	b.n	8001d90 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4091      	lsls	r1, r2
 8001b06:	000a      	movs	r2, r1
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d100      	bne.n	8001b14 <HAL_GPIO_Init+0x28>
 8001b12:	e13a      	b.n	8001d8a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d005      	beq.n	8001b2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2203      	movs	r2, #3
 8001b26:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d130      	bne.n	8001b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	0013      	movs	r3, r2
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b62:	2201      	movs	r2, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	2201      	movs	r2, #1
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2203      	movs	r2, #3
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d017      	beq.n	8001bca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	0013      	movs	r3, r2
 8001baa:	43da      	mvns	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2203      	movs	r2, #3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d123      	bne.n	8001c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	58d3      	ldr	r3, [r2, r3]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2207      	movs	r2, #7
 8001be8:	4013      	ands	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2107      	movs	r1, #7
 8001c02:	400b      	ands	r3, r1
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	409a      	lsls	r2, r3
 8001c08:	0013      	movs	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	0092      	lsls	r2, r2, #2
 8001c1a:	6939      	ldr	r1, [r7, #16]
 8001c1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	0013      	movs	r3, r2
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	0013      	movs	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	23c0      	movs	r3, #192	@ 0xc0
 8001c58:	029b      	lsls	r3, r3, #10
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d100      	bne.n	8001c60 <HAL_GPIO_Init+0x174>
 8001c5e:	e094      	b.n	8001d8a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c60:	4b51      	ldr	r3, [pc, #324]	@ (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	4b50      	ldr	r3, [pc, #320]	@ (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	619a      	str	r2, [r3, #24]
 8001c6c:	4b4e      	ldr	r3, [pc, #312]	@ (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4013      	ands	r3, r2
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c78:	4a4c      	ldr	r2, [pc, #304]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	589b      	ldr	r3, [r3, r2]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2203      	movs	r2, #3
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	409a      	lsls	r2, r3
 8001c92:	0013      	movs	r3, r2
 8001c94:	43da      	mvns	r2, r3
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	2390      	movs	r3, #144	@ 0x90
 8001ca0:	05db      	lsls	r3, r3, #23
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d00d      	beq.n	8001cc2 <HAL_GPIO_Init+0x1d6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a41      	ldr	r2, [pc, #260]	@ (8001db0 <HAL_GPIO_Init+0x2c4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d007      	beq.n	8001cbe <HAL_GPIO_Init+0x1d2>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a40      	ldr	r2, [pc, #256]	@ (8001db4 <HAL_GPIO_Init+0x2c8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_GPIO_Init+0x1ce>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e004      	b.n	8001cc4 <HAL_GPIO_Init+0x1d8>
 8001cba:	2305      	movs	r3, #5
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_Init+0x1d8>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x1d8>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	2103      	movs	r1, #3
 8001cc8:	400a      	ands	r2, r1
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	4093      	lsls	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cd4:	4935      	ldr	r1, [pc, #212]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce2:	4b35      	ldr	r3, [pc, #212]	@ (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43da      	mvns	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	2380      	movs	r3, #128	@ 0x80
 8001cf8:	035b      	lsls	r3, r3, #13
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d06:	4b2c      	ldr	r3, [pc, #176]	@ (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43da      	mvns	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	039b      	lsls	r3, r3, #14
 8001d24:	4013      	ands	r3, r2
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d30:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d5a:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001d60:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	40da      	lsrs	r2, r3
 8001d98:	1e13      	subs	r3, r2, #0
 8001d9a:	d000      	beq.n	8001d9e <HAL_GPIO_Init+0x2b2>
 8001d9c:	e6ae      	b.n	8001afc <HAL_GPIO_Init+0x10>
  } 
}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	46c0      	nop			@ (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b006      	add	sp, #24
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010000 	.word	0x40010000
 8001db0:	48000400 	.word	0x48000400
 8001db4:	48000800 	.word	0x48000800
 8001db8:	40010400 	.word	0x40010400

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f000 fb76 	bl	80024bc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d100      	bne.n	8001ddc <HAL_RCC_OscConfig+0x20>
 8001dda:	e08e      	b.n	8001efa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ddc:	4bc5      	ldr	r3, [pc, #788]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	220c      	movs	r2, #12
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d00e      	beq.n	8001e06 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de8:	4bc2      	ldr	r3, [pc, #776]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	220c      	movs	r2, #12
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d117      	bne.n	8001e24 <HAL_RCC_OscConfig+0x68>
 8001df4:	4bbf      	ldr	r3, [pc, #764]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	23c0      	movs	r3, #192	@ 0xc0
 8001dfa:	025b      	lsls	r3, r3, #9
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	025b      	lsls	r3, r3, #9
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d10e      	bne.n	8001e24 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e06:	4bbb      	ldr	r3, [pc, #748]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	2380      	movs	r3, #128	@ 0x80
 8001e0c:	029b      	lsls	r3, r3, #10
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d100      	bne.n	8001e14 <HAL_RCC_OscConfig+0x58>
 8001e12:	e071      	b.n	8001ef8 <HAL_RCC_OscConfig+0x13c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d000      	beq.n	8001e1e <HAL_RCC_OscConfig+0x62>
 8001e1c:	e06c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f000 fb4c 	bl	80024bc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_OscConfig+0x80>
 8001e2c:	4bb1      	ldr	r3, [pc, #708]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4bb0      	ldr	r3, [pc, #704]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e32:	2180      	movs	r1, #128	@ 0x80
 8001e34:	0249      	lsls	r1, r1, #9
 8001e36:	430a      	orrs	r2, r1
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e02f      	b.n	8001e9c <HAL_RCC_OscConfig+0xe0>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0xa2>
 8001e44:	4bab      	ldr	r3, [pc, #684]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4baa      	ldr	r3, [pc, #680]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e4a:	49ab      	ldr	r1, [pc, #684]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	4ba8      	ldr	r3, [pc, #672]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4ba7      	ldr	r3, [pc, #668]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e56:	49a9      	ldr	r1, [pc, #676]	@ (80020fc <HAL_RCC_OscConfig+0x340>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e01e      	b.n	8001e9c <HAL_RCC_OscConfig+0xe0>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d10e      	bne.n	8001e84 <HAL_RCC_OscConfig+0xc8>
 8001e66:	4ba3      	ldr	r3, [pc, #652]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4ba2      	ldr	r3, [pc, #648]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e6c:	2180      	movs	r1, #128	@ 0x80
 8001e6e:	02c9      	lsls	r1, r1, #11
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	4b9f      	ldr	r3, [pc, #636]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b9e      	ldr	r3, [pc, #632]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e7a:	2180      	movs	r1, #128	@ 0x80
 8001e7c:	0249      	lsls	r1, r1, #9
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e00b      	b.n	8001e9c <HAL_RCC_OscConfig+0xe0>
 8001e84:	4b9b      	ldr	r3, [pc, #620]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b9a      	ldr	r3, [pc, #616]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e8a:	499b      	ldr	r1, [pc, #620]	@ (80020f8 <HAL_RCC_OscConfig+0x33c>)
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	4b98      	ldr	r3, [pc, #608]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b97      	ldr	r3, [pc, #604]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001e96:	4999      	ldr	r1, [pc, #612]	@ (80020fc <HAL_RCC_OscConfig+0x340>)
 8001e98:	400a      	ands	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d014      	beq.n	8001ece <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fa5c 	bl	8001360 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eae:	f7ff fa57 	bl	8001360 <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b64      	cmp	r3, #100	@ 0x64
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e2fd      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec0:	4b8c      	ldr	r3, [pc, #560]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	029b      	lsls	r3, r3, #10
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0xf2>
 8001ecc:	e015      	b.n	8001efa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fa47 	bl	8001360 <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff fa42 	bl	8001360 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	@ 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e2e8      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	4b82      	ldr	r3, [pc, #520]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	029b      	lsls	r3, r3, #10
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x11c>
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2202      	movs	r2, #2
 8001f00:	4013      	ands	r3, r2
 8001f02:	d100      	bne.n	8001f06 <HAL_RCC_OscConfig+0x14a>
 8001f04:	e06c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f06:	4b7b      	ldr	r3, [pc, #492]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d00e      	beq.n	8001f2e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f10:	4b78      	ldr	r3, [pc, #480]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	220c      	movs	r2, #12
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d11f      	bne.n	8001f5c <HAL_RCC_OscConfig+0x1a0>
 8001f1c:	4b75      	ldr	r3, [pc, #468]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	23c0      	movs	r3, #192	@ 0xc0
 8001f22:	025b      	lsls	r3, r3, #9
 8001f24:	401a      	ands	r2, r3
 8001f26:	2380      	movs	r3, #128	@ 0x80
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d116      	bne.n	8001f5c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	4b71      	ldr	r3, [pc, #452]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2202      	movs	r2, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_OscConfig+0x188>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e2bb      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4b6b      	ldr	r3, [pc, #428]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	22f8      	movs	r2, #248	@ 0xf8
 8001f4a:	4393      	bics	r3, r2
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00da      	lsls	r2, r3, #3
 8001f54:	4b67      	ldr	r3, [pc, #412]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	e041      	b.n	8001fe0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d024      	beq.n	8001fae <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f64:	4b63      	ldr	r3, [pc, #396]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b62      	ldr	r3, [pc, #392]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff f9f6 	bl	8001360 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7a:	f7ff f9f1 	bl	8001360 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e297      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	4b59      	ldr	r3, [pc, #356]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2202      	movs	r2, #2
 8001f92:	4013      	ands	r3, r2
 8001f94:	d0f1      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b57      	ldr	r3, [pc, #348]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	22f8      	movs	r2, #248	@ 0xf8
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	00da      	lsls	r2, r3, #3
 8001fa6:	4b53      	ldr	r3, [pc, #332]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e018      	b.n	8001fe0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fae:	4b51      	ldr	r3, [pc, #324]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4b50      	ldr	r3, [pc, #320]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	438a      	bics	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff f9d1 	bl	8001360 <HAL_GetTick>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7ff f9cc 	bl	8001360 <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e272      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	4b47      	ldr	r3, [pc, #284]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d1f1      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d036      	beq.n	8002058 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d019      	beq.n	8002026 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff2:	4b40      	ldr	r3, [pc, #256]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001ff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff f9af 	bl	8001360 <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff f9aa 	bl	8001360 <HAL_GetTick>
 800200c:	0002      	movs	r2, r0
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e250      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	4b36      	ldr	r3, [pc, #216]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	2202      	movs	r2, #2
 8002020:	4013      	ands	r3, r2
 8002022:	d0f1      	beq.n	8002008 <HAL_RCC_OscConfig+0x24c>
 8002024:	e018      	b.n	8002058 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002026:	4b33      	ldr	r3, [pc, #204]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8002028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800202a:	4b32      	ldr	r3, [pc, #200]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 800202c:	2101      	movs	r1, #1
 800202e:	438a      	bics	r2, r1
 8002030:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7ff f995 	bl	8001360 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff f990 	bl	8001360 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e236      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204e:	4b29      	ldr	r3, [pc, #164]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	2202      	movs	r2, #2
 8002054:	4013      	ands	r3, r2
 8002056:	d1f1      	bne.n	800203c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2204      	movs	r2, #4
 800205e:	4013      	ands	r3, r2
 8002060:	d100      	bne.n	8002064 <HAL_RCC_OscConfig+0x2a8>
 8002062:	e0b5      	b.n	80021d0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002064:	201f      	movs	r0, #31
 8002066:	183b      	adds	r3, r7, r0
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206c:	4b21      	ldr	r3, [pc, #132]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	055b      	lsls	r3, r3, #21
 8002074:	4013      	ands	r3, r2
 8002076:	d110      	bne.n	800209a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 800207a:	69da      	ldr	r2, [r3, #28]
 800207c:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 800207e:	2180      	movs	r1, #128	@ 0x80
 8002080:	0549      	lsls	r1, r1, #21
 8002082:	430a      	orrs	r2, r1
 8002084:	61da      	str	r2, [r3, #28]
 8002086:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 8002088:	69da      	ldr	r2, [r3, #28]
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	055b      	lsls	r3, r3, #21
 800208e:	4013      	ands	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002094:	183b      	adds	r3, r7, r0
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <HAL_RCC_OscConfig+0x344>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4013      	ands	r3, r2
 80020a4:	d11a      	bne.n	80020dc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <HAL_RCC_OscConfig+0x344>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_RCC_OscConfig+0x344>)
 80020ac:	2180      	movs	r1, #128	@ 0x80
 80020ae:	0049      	lsls	r1, r1, #1
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b4:	f7ff f954 	bl	8001360 <HAL_GetTick>
 80020b8:	0003      	movs	r3, r0
 80020ba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020be:	f7ff f94f 	bl	8001360 <HAL_GetTick>
 80020c2:	0002      	movs	r2, r0
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b64      	cmp	r3, #100	@ 0x64
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e1f5      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_RCC_OscConfig+0x344>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	@ 0x80
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10f      	bne.n	8002104 <HAL_RCC_OscConfig+0x348>
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	4b02      	ldr	r3, [pc, #8]	@ (80020f4 <HAL_RCC_OscConfig+0x338>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	430a      	orrs	r2, r1
 80020ee:	621a      	str	r2, [r3, #32]
 80020f0:	e036      	b.n	8002160 <HAL_RCC_OscConfig+0x3a4>
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	fffeffff 	.word	0xfffeffff
 80020fc:	fffbffff 	.word	0xfffbffff
 8002100:	40007000 	.word	0x40007000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10c      	bne.n	8002126 <HAL_RCC_OscConfig+0x36a>
 800210c:	4bca      	ldr	r3, [pc, #808]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	4bc9      	ldr	r3, [pc, #804]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002112:	2101      	movs	r1, #1
 8002114:	438a      	bics	r2, r1
 8002116:	621a      	str	r2, [r3, #32]
 8002118:	4bc7      	ldr	r3, [pc, #796]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 800211a:	6a1a      	ldr	r2, [r3, #32]
 800211c:	4bc6      	ldr	r3, [pc, #792]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 800211e:	2104      	movs	r1, #4
 8002120:	438a      	bics	r2, r1
 8002122:	621a      	str	r2, [r3, #32]
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x3a4>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b05      	cmp	r3, #5
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x38c>
 800212e:	4bc2      	ldr	r3, [pc, #776]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002130:	6a1a      	ldr	r2, [r3, #32]
 8002132:	4bc1      	ldr	r3, [pc, #772]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002134:	2104      	movs	r1, #4
 8002136:	430a      	orrs	r2, r1
 8002138:	621a      	str	r2, [r3, #32]
 800213a:	4bbf      	ldr	r3, [pc, #764]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 800213c:	6a1a      	ldr	r2, [r3, #32]
 800213e:	4bbe      	ldr	r3, [pc, #760]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002140:	2101      	movs	r1, #1
 8002142:	430a      	orrs	r2, r1
 8002144:	621a      	str	r2, [r3, #32]
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0x3a4>
 8002148:	4bbb      	ldr	r3, [pc, #748]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	4bba      	ldr	r3, [pc, #744]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 800214e:	2101      	movs	r1, #1
 8002150:	438a      	bics	r2, r1
 8002152:	621a      	str	r2, [r3, #32]
 8002154:	4bb8      	ldr	r3, [pc, #736]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	4bb7      	ldr	r3, [pc, #732]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 800215a:	2104      	movs	r1, #4
 800215c:	438a      	bics	r2, r1
 800215e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d014      	beq.n	8002192 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7ff f8fa 	bl	8001360 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	e009      	b.n	8002186 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff f8f5 	bl	8001360 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	4aaf      	ldr	r2, [pc, #700]	@ (800243c <HAL_RCC_OscConfig+0x680>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e19a      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	4bac      	ldr	r3, [pc, #688]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x3b6>
 8002190:	e013      	b.n	80021ba <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7ff f8e5 	bl	8001360 <HAL_GetTick>
 8002196:	0003      	movs	r3, r0
 8002198:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219a:	e009      	b.n	80021b0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff f8e0 	bl	8001360 <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	4aa5      	ldr	r2, [pc, #660]	@ (800243c <HAL_RCC_OscConfig+0x680>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e185      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	4ba1      	ldr	r3, [pc, #644]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	2202      	movs	r2, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ba:	231f      	movs	r3, #31
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c4:	4b9c      	ldr	r3, [pc, #624]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	4b9b      	ldr	r3, [pc, #620]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80021ca:	499d      	ldr	r1, [pc, #628]	@ (8002440 <HAL_RCC_OscConfig+0x684>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2210      	movs	r2, #16
 80021d6:	4013      	ands	r3, r2
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d12a      	bne.n	8002238 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021e2:	4b95      	ldr	r3, [pc, #596]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80021e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021e6:	4b94      	ldr	r3, [pc, #592]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80021e8:	2104      	movs	r1, #4
 80021ea:	430a      	orrs	r2, r1
 80021ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80021ee:	4b92      	ldr	r3, [pc, #584]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80021f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021f2:	4b91      	ldr	r3, [pc, #580]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	430a      	orrs	r2, r1
 80021f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7ff f8b1 	bl	8001360 <HAL_GetTick>
 80021fe:	0003      	movs	r3, r0
 8002200:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002204:	f7ff f8ac 	bl	8001360 <HAL_GetTick>
 8002208:	0002      	movs	r2, r0
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e152      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002216:	4b88      	ldr	r3, [pc, #544]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221a:	2202      	movs	r2, #2
 800221c:	4013      	ands	r3, r2
 800221e:	d0f1      	beq.n	8002204 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002220:	4b85      	ldr	r3, [pc, #532]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002224:	22f8      	movs	r2, #248	@ 0xf8
 8002226:	4393      	bics	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	00da      	lsls	r2, r3, #3
 8002230:	4b81      	ldr	r3, [pc, #516]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002232:	430a      	orrs	r2, r1
 8002234:	635a      	str	r2, [r3, #52]	@ 0x34
 8002236:	e034      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	3305      	adds	r3, #5
 800223e:	d111      	bne.n	8002264 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002240:	4b7d      	ldr	r3, [pc, #500]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002244:	4b7c      	ldr	r3, [pc, #496]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002246:	2104      	movs	r1, #4
 8002248:	438a      	bics	r2, r1
 800224a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800224c:	4b7a      	ldr	r3, [pc, #488]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 800224e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002250:	22f8      	movs	r2, #248	@ 0xf8
 8002252:	4393      	bics	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	00da      	lsls	r2, r3, #3
 800225c:	4b76      	ldr	r3, [pc, #472]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 800225e:	430a      	orrs	r2, r1
 8002260:	635a      	str	r2, [r3, #52]	@ 0x34
 8002262:	e01e      	b.n	80022a2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002264:	4b74      	ldr	r3, [pc, #464]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002268:	4b73      	ldr	r3, [pc, #460]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 800226a:	2104      	movs	r1, #4
 800226c:	430a      	orrs	r2, r1
 800226e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002270:	4b71      	ldr	r3, [pc, #452]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002274:	4b70      	ldr	r3, [pc, #448]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002276:	2101      	movs	r1, #1
 8002278:	438a      	bics	r2, r1
 800227a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7ff f870 	bl	8001360 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002286:	f7ff f86b 	bl	8001360 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e111      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002298:	4b67      	ldr	r3, [pc, #412]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 800229a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229c:	2202      	movs	r2, #2
 800229e:	4013      	ands	r3, r2
 80022a0:	d1f1      	bne.n	8002286 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2220      	movs	r2, #32
 80022a8:	4013      	ands	r3, r2
 80022aa:	d05c      	beq.n	8002366 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80022ac:	4b62      	ldr	r3, [pc, #392]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	220c      	movs	r2, #12
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	d00e      	beq.n	80022d6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80022b8:	4b5f      	ldr	r3, [pc, #380]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	220c      	movs	r2, #12
 80022be:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d114      	bne.n	80022ee <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80022c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	23c0      	movs	r3, #192	@ 0xc0
 80022ca:	025b      	lsls	r3, r3, #9
 80022cc:	401a      	ands	r2, r3
 80022ce:	23c0      	movs	r3, #192	@ 0xc0
 80022d0:	025b      	lsls	r3, r3, #9
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d10b      	bne.n	80022ee <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80022d6:	4b58      	ldr	r3, [pc, #352]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80022d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022da:	2380      	movs	r3, #128	@ 0x80
 80022dc:	029b      	lsls	r3, r3, #10
 80022de:	4013      	ands	r3, r2
 80022e0:	d040      	beq.n	8002364 <HAL_RCC_OscConfig+0x5a8>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d03c      	beq.n	8002364 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0e6      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d01b      	beq.n	800232e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80022f6:	4b50      	ldr	r3, [pc, #320]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80022f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80022fc:	2180      	movs	r1, #128	@ 0x80
 80022fe:	0249      	lsls	r1, r1, #9
 8002300:	430a      	orrs	r2, r1
 8002302:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff f82c 	bl	8001360 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800230e:	f7ff f827 	bl	8001360 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0cd      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002320:	4b45      	ldr	r3, [pc, #276]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002324:	2380      	movs	r3, #128	@ 0x80
 8002326:	029b      	lsls	r3, r3, #10
 8002328:	4013      	ands	r3, r2
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x552>
 800232c:	e01b      	b.n	8002366 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800232e:	4b42      	ldr	r3, [pc, #264]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002332:	4b41      	ldr	r3, [pc, #260]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002334:	4943      	ldr	r1, [pc, #268]	@ (8002444 <HAL_RCC_OscConfig+0x688>)
 8002336:	400a      	ands	r2, r1
 8002338:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7ff f811 	bl	8001360 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002344:	f7ff f80c 	bl	8001360 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e0b2      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002356:	4b38      	ldr	r3, [pc, #224]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	029b      	lsls	r3, r3, #10
 800235e:	4013      	ands	r3, r2
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x588>
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002364:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	2b00      	cmp	r3, #0
 800236c:	d100      	bne.n	8002370 <HAL_RCC_OscConfig+0x5b4>
 800236e:	e0a4      	b.n	80024ba <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002370:	4b31      	ldr	r3, [pc, #196]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	220c      	movs	r2, #12
 8002376:	4013      	ands	r3, r2
 8002378:	2b08      	cmp	r3, #8
 800237a:	d100      	bne.n	800237e <HAL_RCC_OscConfig+0x5c2>
 800237c:	e078      	b.n	8002470 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	2b02      	cmp	r3, #2
 8002384:	d14c      	bne.n	8002420 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002386:	4b2c      	ldr	r3, [pc, #176]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	4b2b      	ldr	r3, [pc, #172]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 800238c:	492e      	ldr	r1, [pc, #184]	@ (8002448 <HAL_RCC_OscConfig+0x68c>)
 800238e:	400a      	ands	r2, r1
 8002390:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe ffe5 	bl	8001360 <HAL_GetTick>
 8002396:	0003      	movs	r3, r0
 8002398:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe ffe0 	bl	8001360 <HAL_GetTick>
 80023a0:	0002      	movs	r2, r0
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e086      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ae:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	2380      	movs	r3, #128	@ 0x80
 80023b4:	049b      	lsls	r3, r3, #18
 80023b6:	4013      	ands	r3, r2
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80023bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023be:	220f      	movs	r2, #15
 80023c0:	4393      	bics	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4a1e      	ldr	r2, [pc, #120]	@ (800244c <HAL_RCC_OscConfig+0x690>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	431a      	orrs	r2, r3
 80023e2:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e8:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 80023ee:	2180      	movs	r1, #128	@ 0x80
 80023f0:	0449      	lsls	r1, r1, #17
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7fe ffb3 	bl	8001360 <HAL_GetTick>
 80023fa:	0003      	movs	r3, r0
 80023fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe ffae 	bl	8001360 <HAL_GetTick>
 8002404:	0002      	movs	r2, r0
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e054      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002412:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	2380      	movs	r3, #128	@ 0x80
 8002418:	049b      	lsls	r3, r3, #18
 800241a:	4013      	ands	r3, r2
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x644>
 800241e:	e04c      	b.n	80024ba <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <HAL_RCC_OscConfig+0x67c>)
 8002426:	4908      	ldr	r1, [pc, #32]	@ (8002448 <HAL_RCC_OscConfig+0x68c>)
 8002428:	400a      	ands	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7fe ff98 	bl	8001360 <HAL_GetTick>
 8002430:	0003      	movs	r3, r0
 8002432:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002434:	e015      	b.n	8002462 <HAL_RCC_OscConfig+0x6a6>
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	40021000 	.word	0x40021000
 800243c:	00001388 	.word	0x00001388
 8002440:	efffffff 	.word	0xefffffff
 8002444:	fffeffff 	.word	0xfffeffff
 8002448:	feffffff 	.word	0xfeffffff
 800244c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe ff86 	bl	8001360 <HAL_GetTick>
 8002454:	0002      	movs	r2, r0
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e02c      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002462:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <HAL_RCC_OscConfig+0x708>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	@ 0x80
 8002468:	049b      	lsls	r3, r3, #18
 800246a:	4013      	ands	r3, r2
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x694>
 800246e:	e024      	b.n	80024ba <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e01f      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800247c:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <HAL_RCC_OscConfig+0x708>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <HAL_RCC_OscConfig+0x708>)
 8002484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002486:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	23c0      	movs	r3, #192	@ 0xc0
 800248c:	025b      	lsls	r3, r3, #9
 800248e:	401a      	ands	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002494:	429a      	cmp	r2, r3
 8002496:	d10e      	bne.n	80024b6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	220f      	movs	r2, #15
 800249c:	401a      	ands	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	23f0      	movs	r3, #240	@ 0xf0
 80024aa:	039b      	lsls	r3, r3, #14
 80024ac:	401a      	ands	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b008      	add	sp, #32
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000

080024c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0bf      	b.n	800265c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b61      	ldr	r3, [pc, #388]	@ (8002664 <HAL_RCC_ClockConfig+0x19c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d911      	bls.n	800250e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002664 <HAL_RCC_ClockConfig+0x19c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	4393      	bics	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002664 <HAL_RCC_ClockConfig+0x19c>)
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fc:	4b59      	ldr	r3, [pc, #356]	@ (8002664 <HAL_RCC_ClockConfig+0x19c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0a6      	b.n	800265c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2202      	movs	r2, #2
 8002514:	4013      	ands	r3, r2
 8002516:	d015      	beq.n	8002544 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2204      	movs	r2, #4
 800251e:	4013      	ands	r3, r2
 8002520:	d006      	beq.n	8002530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002522:	4b51      	ldr	r3, [pc, #324]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4b50      	ldr	r3, [pc, #320]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 8002528:	21e0      	movs	r1, #224	@ 0xe0
 800252a:	00c9      	lsls	r1, r1, #3
 800252c:	430a      	orrs	r2, r1
 800252e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b4d      	ldr	r3, [pc, #308]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	22f0      	movs	r2, #240	@ 0xf0
 8002536:	4393      	bics	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	4b4a      	ldr	r3, [pc, #296]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 8002540:	430a      	orrs	r2, r1
 8002542:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2201      	movs	r2, #1
 800254a:	4013      	ands	r3, r2
 800254c:	d04c      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b44      	ldr	r3, [pc, #272]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	029b      	lsls	r3, r3, #10
 800255e:	4013      	ands	r3, r2
 8002560:	d120      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e07a      	b.n	800265c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256e:	4b3e      	ldr	r3, [pc, #248]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	2380      	movs	r3, #128	@ 0x80
 8002574:	049b      	lsls	r3, r3, #18
 8002576:	4013      	ands	r3, r2
 8002578:	d114      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e06e      	b.n	800265c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002586:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 8002588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800258a:	2380      	movs	r3, #128	@ 0x80
 800258c:	029b      	lsls	r3, r3, #10
 800258e:	4013      	ands	r3, r2
 8002590:	d108      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e062      	b.n	800265c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002596:	4b34      	ldr	r3, [pc, #208]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2202      	movs	r2, #2
 800259c:	4013      	ands	r3, r2
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e05b      	b.n	800265c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a4:	4b30      	ldr	r3, [pc, #192]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2203      	movs	r2, #3
 80025aa:	4393      	bics	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 80025b4:	430a      	orrs	r2, r1
 80025b6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fed2 	bl	8001360 <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c0:	e009      	b.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c2:	f7fe fecd 	bl	8001360 <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	4a27      	ldr	r2, [pc, #156]	@ (800266c <HAL_RCC_ClockConfig+0x1a4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e042      	b.n	800265c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	220c      	movs	r2, #12
 80025dc:	401a      	ands	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1ec      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <HAL_RCC_ClockConfig+0x19c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	4013      	ands	r3, r2
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d211      	bcs.n	800261a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_RCC_ClockConfig+0x19c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2201      	movs	r2, #1
 80025fc:	4393      	bics	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	4b18      	ldr	r3, [pc, #96]	@ (8002664 <HAL_RCC_ClockConfig+0x19c>)
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002608:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <HAL_RCC_ClockConfig+0x19c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	4013      	ands	r3, r2
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d001      	beq.n	800261a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e020      	b.n	800265c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2204      	movs	r2, #4
 8002620:	4013      	ands	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002624:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a11      	ldr	r2, [pc, #68]	@ (8002670 <HAL_RCC_ClockConfig+0x1a8>)
 800262a:	4013      	ands	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 8002634:	430a      	orrs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002638:	f000 f860 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 800263c:	0001      	movs	r1, r0
 800263e:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <HAL_RCC_ClockConfig+0x1a0>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	220f      	movs	r2, #15
 8002646:	4013      	ands	r3, r2
 8002648:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <HAL_RCC_ClockConfig+0x1ac>)
 800264a:	5cd3      	ldrb	r3, [r2, r3]
 800264c:	000a      	movs	r2, r1
 800264e:	40da      	lsrs	r2, r3
 8002650:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <HAL_RCC_ClockConfig+0x1b0>)
 8002652:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002654:	2003      	movs	r0, #3
 8002656:	f7fe fe3d 	bl	80012d4 <HAL_InitTick>
  
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b004      	add	sp, #16
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40022000 	.word	0x40022000
 8002668:	40021000 	.word	0x40021000
 800266c:	00001388 	.word	0x00001388
 8002670:	fffff8ff 	.word	0xfffff8ff
 8002674:	08005760 	.word	0x08005760
 8002678:	20000000 	.word	0x20000000

0800267c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	@ 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002688:	2014      	movs	r0, #20
 800268a:	183b      	adds	r3, r7, r0
 800268c:	2202      	movs	r2, #2
 800268e:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002690:	183b      	adds	r3, r7, r0
 8002692:	2203      	movs	r2, #3
 8002694:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 8002696:	183b      	adds	r3, r7, r0
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  gpio.Pin       = MCO1_PIN;
 800269c:	183b      	adds	r3, r7, r0
 800269e:	2280      	movs	r2, #128	@ 0x80
 80026a0:	0052      	lsls	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
  gpio.Alternate = GPIO_AF0_MCO;
 80026a4:	183b      	adds	r3, r7, r0
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80026aa:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <HAL_RCC_MCOConfig+0x78>)
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <HAL_RCC_MCOConfig+0x78>)
 80026b0:	2180      	movs	r1, #128	@ 0x80
 80026b2:	0289      	lsls	r1, r1, #10
 80026b4:	430a      	orrs	r2, r1
 80026b6:	615a      	str	r2, [r3, #20]
 80026b8:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <HAL_RCC_MCOConfig+0x78>)
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	2380      	movs	r3, #128	@ 0x80
 80026be:	029b      	lsls	r3, r3, #10
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80026c6:	183a      	adds	r2, r7, r0
 80026c8:	2390      	movs	r3, #144	@ 0x90
 80026ca:	05db      	lsls	r3, r3, #23
 80026cc:	0011      	movs	r1, r2
 80026ce:	0018      	movs	r0, r3
 80026d0:	f7ff fa0c 	bl	8001aec <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80026d4:	4b07      	ldr	r3, [pc, #28]	@ (80026f4 <HAL_RCC_MCOConfig+0x78>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4a07      	ldr	r2, [pc, #28]	@ (80026f8 <HAL_RCC_MCOConfig+0x7c>)
 80026da:	4013      	ands	r3, r2
 80026dc:	0019      	movs	r1, r3
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	4b03      	ldr	r3, [pc, #12]	@ (80026f4 <HAL_RCC_MCOConfig+0x78>)
 80026e6:	430a      	orrs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]
}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b00a      	add	sp, #40	@ 0x28
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	40021000 	.word	0x40021000
 80026f8:	80ffffff 	.word	0x80ffffff

080026fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002716:	4b2d      	ldr	r3, [pc, #180]	@ (80027cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	220c      	movs	r2, #12
 8002720:	4013      	ands	r3, r2
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d046      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0xb8>
 8002726:	d848      	bhi.n	80027ba <HAL_RCC_GetSysClockFreq+0xbe>
 8002728:	2b04      	cmp	r3, #4
 800272a:	d002      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x36>
 800272c:	2b08      	cmp	r3, #8
 800272e:	d003      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x3c>
 8002730:	e043      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002732:	4b27      	ldr	r3, [pc, #156]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002734:	613b      	str	r3, [r7, #16]
      break;
 8002736:	e043      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	0c9b      	lsrs	r3, r3, #18
 800273c:	220f      	movs	r2, #15
 800273e:	4013      	ands	r3, r2
 8002740:	4a24      	ldr	r2, [pc, #144]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002746:	4b21      	ldr	r3, [pc, #132]	@ (80027cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	220f      	movs	r2, #15
 800274c:	4013      	ands	r3, r2
 800274e:	4a22      	ldr	r2, [pc, #136]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	23c0      	movs	r3, #192	@ 0xc0
 8002758:	025b      	lsls	r3, r3, #9
 800275a:	401a      	ands	r2, r3
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	429a      	cmp	r2, r3
 8002762:	d109      	bne.n	8002778 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	481a      	ldr	r0, [pc, #104]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002768:	f7fd fce0 	bl	800012c <__udivsi3>
 800276c:	0003      	movs	r3, r0
 800276e:	001a      	movs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4353      	muls	r3, r2
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	e01a      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	23c0      	movs	r3, #192	@ 0xc0
 800277c:	025b      	lsls	r3, r3, #9
 800277e:	401a      	ands	r2, r3
 8002780:	23c0      	movs	r3, #192	@ 0xc0
 8002782:	025b      	lsls	r3, r3, #9
 8002784:	429a      	cmp	r2, r3
 8002786:	d109      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	4814      	ldr	r0, [pc, #80]	@ (80027dc <HAL_RCC_GetSysClockFreq+0xe0>)
 800278c:	f7fd fcce 	bl	800012c <__udivsi3>
 8002790:	0003      	movs	r3, r0
 8002792:	001a      	movs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4353      	muls	r3, r2
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e008      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	480c      	ldr	r0, [pc, #48]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80027a0:	f7fd fcc4 	bl	800012c <__udivsi3>
 80027a4:	0003      	movs	r3, r0
 80027a6:	001a      	movs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4353      	muls	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	613b      	str	r3, [r7, #16]
      break;
 80027b2:	e005      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80027b4:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_RCC_GetSysClockFreq+0xe0>)
 80027b6:	613b      	str	r3, [r7, #16]
      break;
 80027b8:	e002      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027ba:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80027bc:	613b      	str	r3, [r7, #16]
      break;
 80027be:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027c0:	693b      	ldr	r3, [r7, #16]
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b006      	add	sp, #24
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	40021000 	.word	0x40021000
 80027d0:	007a1200 	.word	0x007a1200
 80027d4:	08005778 	.word	0x08005778
 80027d8:	08005788 	.word	0x08005788
 80027dc:	02dc6c00 	.word	0x02dc6c00

080027e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e4:	4b02      	ldr	r3, [pc, #8]	@ (80027f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	20000000 	.word	0x20000000

080027f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80027f8:	f7ff fff2 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 80027fc:	0001      	movs	r1, r0
 80027fe:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	2207      	movs	r2, #7
 8002806:	4013      	ands	r3, r2
 8002808:	4a04      	ldr	r2, [pc, #16]	@ (800281c <HAL_RCC_GetPCLK1Freq+0x28>)
 800280a:	5cd3      	ldrb	r3, [r2, r3]
 800280c:	40d9      	lsrs	r1, r3
 800280e:	000b      	movs	r3, r1
}    
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	40021000 	.word	0x40021000
 800281c:	08005770 	.word	0x08005770

08002820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e042      	b.n	80028b8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	223d      	movs	r2, #61	@ 0x3d
 8002836:	5c9b      	ldrb	r3, [r3, r2]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d107      	bne.n	800284e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	223c      	movs	r2, #60	@ 0x3c
 8002842:	2100      	movs	r1, #0
 8002844:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	0018      	movs	r0, r3
 800284a:	f7fe fa91 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	223d      	movs	r2, #61	@ 0x3d
 8002852:	2102      	movs	r1, #2
 8002854:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3304      	adds	r3, #4
 800285e:	0019      	movs	r1, r3
 8002860:	0010      	movs	r0, r2
 8002862:	f000 fe31 	bl	80034c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2246      	movs	r2, #70	@ 0x46
 800286a:	2101      	movs	r1, #1
 800286c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	223e      	movs	r2, #62	@ 0x3e
 8002872:	2101      	movs	r1, #1
 8002874:	5499      	strb	r1, [r3, r2]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	223f      	movs	r2, #63	@ 0x3f
 800287a:	2101      	movs	r1, #1
 800287c:	5499      	strb	r1, [r3, r2]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2240      	movs	r2, #64	@ 0x40
 8002882:	2101      	movs	r1, #1
 8002884:	5499      	strb	r1, [r3, r2]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2241      	movs	r2, #65	@ 0x41
 800288a:	2101      	movs	r1, #1
 800288c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2242      	movs	r2, #66	@ 0x42
 8002892:	2101      	movs	r1, #1
 8002894:	5499      	strb	r1, [r3, r2]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2243      	movs	r2, #67	@ 0x43
 800289a:	2101      	movs	r1, #1
 800289c:	5499      	strb	r1, [r3, r2]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2244      	movs	r2, #68	@ 0x44
 80028a2:	2101      	movs	r1, #1
 80028a4:	5499      	strb	r1, [r3, r2]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2245      	movs	r2, #69	@ 0x45
 80028aa:	2101      	movs	r1, #1
 80028ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	223d      	movs	r2, #61	@ 0x3d
 80028b2:	2101      	movs	r1, #1
 80028b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b002      	add	sp, #8
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e042      	b.n	8002958 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	223d      	movs	r2, #61	@ 0x3d
 80028d6:	5c9b      	ldrb	r3, [r3, r2]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d107      	bne.n	80028ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	223c      	movs	r2, #60	@ 0x3c
 80028e2:	2100      	movs	r1, #0
 80028e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f000 f839 	bl	8002960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	223d      	movs	r2, #61	@ 0x3d
 80028f2:	2102      	movs	r1, #2
 80028f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	0019      	movs	r1, r3
 8002900:	0010      	movs	r0, r2
 8002902:	f000 fde1 	bl	80034c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2246      	movs	r2, #70	@ 0x46
 800290a:	2101      	movs	r1, #1
 800290c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	223e      	movs	r2, #62	@ 0x3e
 8002912:	2101      	movs	r1, #1
 8002914:	5499      	strb	r1, [r3, r2]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	223f      	movs	r2, #63	@ 0x3f
 800291a:	2101      	movs	r1, #1
 800291c:	5499      	strb	r1, [r3, r2]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2240      	movs	r2, #64	@ 0x40
 8002922:	2101      	movs	r1, #1
 8002924:	5499      	strb	r1, [r3, r2]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2241      	movs	r2, #65	@ 0x41
 800292a:	2101      	movs	r1, #1
 800292c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2242      	movs	r2, #66	@ 0x42
 8002932:	2101      	movs	r1, #1
 8002934:	5499      	strb	r1, [r3, r2]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2243      	movs	r2, #67	@ 0x43
 800293a:	2101      	movs	r1, #1
 800293c:	5499      	strb	r1, [r3, r2]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2244      	movs	r2, #68	@ 0x44
 8002942:	2101      	movs	r1, #1
 8002944:	5499      	strb	r1, [r3, r2]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2245      	movs	r2, #69	@ 0x45
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	223d      	movs	r2, #61	@ 0x3d
 8002952:	2101      	movs	r1, #1
 8002954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002968:	46c0      	nop			@ (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d108      	bne.n	8002992 <HAL_TIM_PWM_Start+0x22>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	223e      	movs	r2, #62	@ 0x3e
 8002984:	5c9b      	ldrb	r3, [r3, r2]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	1e5a      	subs	r2, r3, #1
 800298c:	4193      	sbcs	r3, r2
 800298e:	b2db      	uxtb	r3, r3
 8002990:	e01f      	b.n	80029d2 <HAL_TIM_PWM_Start+0x62>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b04      	cmp	r3, #4
 8002996:	d108      	bne.n	80029aa <HAL_TIM_PWM_Start+0x3a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	223f      	movs	r2, #63	@ 0x3f
 800299c:	5c9b      	ldrb	r3, [r3, r2]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	1e5a      	subs	r2, r3, #1
 80029a4:	4193      	sbcs	r3, r2
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	e013      	b.n	80029d2 <HAL_TIM_PWM_Start+0x62>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d108      	bne.n	80029c2 <HAL_TIM_PWM_Start+0x52>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2240      	movs	r2, #64	@ 0x40
 80029b4:	5c9b      	ldrb	r3, [r3, r2]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	1e5a      	subs	r2, r3, #1
 80029bc:	4193      	sbcs	r3, r2
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	e007      	b.n	80029d2 <HAL_TIM_PWM_Start+0x62>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2241      	movs	r2, #65	@ 0x41
 80029c6:	5c9b      	ldrb	r3, [r3, r2]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	1e5a      	subs	r2, r3, #1
 80029ce:	4193      	sbcs	r3, r2
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06a      	b.n	8002ab0 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d104      	bne.n	80029ea <HAL_TIM_PWM_Start+0x7a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	223e      	movs	r2, #62	@ 0x3e
 80029e4:	2102      	movs	r1, #2
 80029e6:	5499      	strb	r1, [r3, r2]
 80029e8:	e013      	b.n	8002a12 <HAL_TIM_PWM_Start+0xa2>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d104      	bne.n	80029fa <HAL_TIM_PWM_Start+0x8a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	223f      	movs	r2, #63	@ 0x3f
 80029f4:	2102      	movs	r1, #2
 80029f6:	5499      	strb	r1, [r3, r2]
 80029f8:	e00b      	b.n	8002a12 <HAL_TIM_PWM_Start+0xa2>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d104      	bne.n	8002a0a <HAL_TIM_PWM_Start+0x9a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2240      	movs	r2, #64	@ 0x40
 8002a04:	2102      	movs	r1, #2
 8002a06:	5499      	strb	r1, [r3, r2]
 8002a08:	e003      	b.n	8002a12 <HAL_TIM_PWM_Start+0xa2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2241      	movs	r2, #65	@ 0x41
 8002a0e:	2102      	movs	r1, #2
 8002a10:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6839      	ldr	r1, [r7, #0]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f001 f962 	bl	8003ce4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a24      	ldr	r2, [pc, #144]	@ (8002ab8 <HAL_TIM_PWM_Start+0x148>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d009      	beq.n	8002a3e <HAL_TIM_PWM_Start+0xce>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a23      	ldr	r2, [pc, #140]	@ (8002abc <HAL_TIM_PWM_Start+0x14c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d004      	beq.n	8002a3e <HAL_TIM_PWM_Start+0xce>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a21      	ldr	r2, [pc, #132]	@ (8002ac0 <HAL_TIM_PWM_Start+0x150>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_TIM_PWM_Start+0xd2>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_TIM_PWM_Start+0xd4>
 8002a42:	2300      	movs	r3, #0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2180      	movs	r1, #128	@ 0x80
 8002a54:	0209      	lsls	r1, r1, #8
 8002a56:	430a      	orrs	r2, r1
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a16      	ldr	r2, [pc, #88]	@ (8002ab8 <HAL_TIM_PWM_Start+0x148>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00a      	beq.n	8002a7a <HAL_TIM_PWM_Start+0x10a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2380      	movs	r3, #128	@ 0x80
 8002a6a:	05db      	lsls	r3, r3, #23
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d004      	beq.n	8002a7a <HAL_TIM_PWM_Start+0x10a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a13      	ldr	r2, [pc, #76]	@ (8002ac4 <HAL_TIM_PWM_Start+0x154>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d111      	bne.n	8002a9e <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2207      	movs	r2, #7
 8002a82:	4013      	ands	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b06      	cmp	r3, #6
 8002a8a:	d010      	beq.n	8002aae <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2101      	movs	r1, #1
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9c:	e007      	b.n	8002aae <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b004      	add	sp, #16
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40014400 	.word	0x40014400
 8002ac0:	40014800 	.word	0x40014800
 8002ac4:	40000400 	.word	0x40000400

08002ac8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e042      	b.n	8002b60 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	223d      	movs	r2, #61	@ 0x3d
 8002ade:	5c9b      	ldrb	r3, [r3, r2]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d107      	bne.n	8002af6 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	223c      	movs	r2, #60	@ 0x3c
 8002aea:	2100      	movs	r1, #0
 8002aec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 f839 	bl	8002b68 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	223d      	movs	r2, #61	@ 0x3d
 8002afa:	2102      	movs	r1, #2
 8002afc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3304      	adds	r3, #4
 8002b06:	0019      	movs	r1, r3
 8002b08:	0010      	movs	r0, r2
 8002b0a:	f000 fcdd 	bl	80034c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2246      	movs	r2, #70	@ 0x46
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	223e      	movs	r2, #62	@ 0x3e
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	223f      	movs	r2, #63	@ 0x3f
 8002b22:	2101      	movs	r1, #1
 8002b24:	5499      	strb	r1, [r3, r2]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2240      	movs	r2, #64	@ 0x40
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2241      	movs	r2, #65	@ 0x41
 8002b32:	2101      	movs	r1, #1
 8002b34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2242      	movs	r2, #66	@ 0x42
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2243      	movs	r2, #67	@ 0x43
 8002b42:	2101      	movs	r1, #1
 8002b44:	5499      	strb	r1, [r3, r2]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2244      	movs	r2, #68	@ 0x44
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	5499      	strb	r1, [r3, r2]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2245      	movs	r2, #69	@ 0x45
 8002b52:	2101      	movs	r1, #1
 8002b54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	223d      	movs	r2, #61	@ 0x3d
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002b70:	46c0      	nop			@ (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b82:	230f      	movs	r3, #15
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d104      	bne.n	8002b9a <HAL_TIM_IC_Start_IT+0x22>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	223e      	movs	r2, #62	@ 0x3e
 8002b94:	5c9b      	ldrb	r3, [r3, r2]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e013      	b.n	8002bc2 <HAL_TIM_IC_Start_IT+0x4a>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d104      	bne.n	8002baa <HAL_TIM_IC_Start_IT+0x32>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	223f      	movs	r2, #63	@ 0x3f
 8002ba4:	5c9b      	ldrb	r3, [r3, r2]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	e00b      	b.n	8002bc2 <HAL_TIM_IC_Start_IT+0x4a>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d104      	bne.n	8002bba <HAL_TIM_IC_Start_IT+0x42>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2240      	movs	r2, #64	@ 0x40
 8002bb4:	5c9b      	ldrb	r3, [r3, r2]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	e003      	b.n	8002bc2 <HAL_TIM_IC_Start_IT+0x4a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2241      	movs	r2, #65	@ 0x41
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	220e      	movs	r2, #14
 8002bc4:	18ba      	adds	r2, r7, r2
 8002bc6:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d104      	bne.n	8002bd8 <HAL_TIM_IC_Start_IT+0x60>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2242      	movs	r2, #66	@ 0x42
 8002bd2:	5c9b      	ldrb	r3, [r3, r2]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e013      	b.n	8002c00 <HAL_TIM_IC_Start_IT+0x88>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d104      	bne.n	8002be8 <HAL_TIM_IC_Start_IT+0x70>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2243      	movs	r2, #67	@ 0x43
 8002be2:	5c9b      	ldrb	r3, [r3, r2]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e00b      	b.n	8002c00 <HAL_TIM_IC_Start_IT+0x88>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d104      	bne.n	8002bf8 <HAL_TIM_IC_Start_IT+0x80>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2244      	movs	r2, #68	@ 0x44
 8002bf2:	5c9b      	ldrb	r3, [r3, r2]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e003      	b.n	8002c00 <HAL_TIM_IC_Start_IT+0x88>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2245      	movs	r2, #69	@ 0x45
 8002bfc:	5c9b      	ldrb	r3, [r3, r2]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	210d      	movs	r1, #13
 8002c02:	187a      	adds	r2, r7, r1
 8002c04:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c06:	230e      	movs	r3, #14
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d103      	bne.n	8002c18 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c10:	187b      	adds	r3, r7, r1
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d001      	beq.n	8002c1c <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0ac      	b.n	8002d76 <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d104      	bne.n	8002c2c <HAL_TIM_IC_Start_IT+0xb4>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	223e      	movs	r2, #62	@ 0x3e
 8002c26:	2102      	movs	r1, #2
 8002c28:	5499      	strb	r1, [r3, r2]
 8002c2a:	e013      	b.n	8002c54 <HAL_TIM_IC_Start_IT+0xdc>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d104      	bne.n	8002c3c <HAL_TIM_IC_Start_IT+0xc4>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	223f      	movs	r2, #63	@ 0x3f
 8002c36:	2102      	movs	r1, #2
 8002c38:	5499      	strb	r1, [r3, r2]
 8002c3a:	e00b      	b.n	8002c54 <HAL_TIM_IC_Start_IT+0xdc>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d104      	bne.n	8002c4c <HAL_TIM_IC_Start_IT+0xd4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2240      	movs	r2, #64	@ 0x40
 8002c46:	2102      	movs	r1, #2
 8002c48:	5499      	strb	r1, [r3, r2]
 8002c4a:	e003      	b.n	8002c54 <HAL_TIM_IC_Start_IT+0xdc>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2241      	movs	r2, #65	@ 0x41
 8002c50:	2102      	movs	r1, #2
 8002c52:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d104      	bne.n	8002c64 <HAL_TIM_IC_Start_IT+0xec>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2242      	movs	r2, #66	@ 0x42
 8002c5e:	2102      	movs	r1, #2
 8002c60:	5499      	strb	r1, [r3, r2]
 8002c62:	e013      	b.n	8002c8c <HAL_TIM_IC_Start_IT+0x114>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d104      	bne.n	8002c74 <HAL_TIM_IC_Start_IT+0xfc>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2243      	movs	r2, #67	@ 0x43
 8002c6e:	2102      	movs	r1, #2
 8002c70:	5499      	strb	r1, [r3, r2]
 8002c72:	e00b      	b.n	8002c8c <HAL_TIM_IC_Start_IT+0x114>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d104      	bne.n	8002c84 <HAL_TIM_IC_Start_IT+0x10c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2244      	movs	r2, #68	@ 0x44
 8002c7e:	2102      	movs	r1, #2
 8002c80:	5499      	strb	r1, [r3, r2]
 8002c82:	e003      	b.n	8002c8c <HAL_TIM_IC_Start_IT+0x114>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2245      	movs	r2, #69	@ 0x45
 8002c88:	2102      	movs	r1, #2
 8002c8a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d02a      	beq.n	8002ce8 <HAL_TIM_IC_Start_IT+0x170>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	d830      	bhi.n	8002cfa <HAL_TIM_IC_Start_IT+0x182>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d01b      	beq.n	8002cd6 <HAL_TIM_IC_Start_IT+0x15e>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d82a      	bhi.n	8002cfa <HAL_TIM_IC_Start_IT+0x182>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IC_Start_IT+0x13a>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d009      	beq.n	8002cc4 <HAL_TIM_IC_Start_IT+0x14c>
 8002cb0:	e023      	b.n	8002cfa <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	60da      	str	r2, [r3, #12]
      break;
 8002cc2:	e01f      	b.n	8002d04 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2104      	movs	r1, #4
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	60da      	str	r2, [r3, #12]
      break;
 8002cd4:	e016      	b.n	8002d04 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2108      	movs	r1, #8
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	60da      	str	r2, [r3, #12]
      break;
 8002ce6:	e00d      	b.n	8002d04 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2110      	movs	r1, #16
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]
      break;
 8002cf8:	e004      	b.n	8002d04 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8002cfa:	230f      	movs	r3, #15
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
      break;
 8002d02:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002d04:	230f      	movs	r3, #15
 8002d06:	18fb      	adds	r3, r7, r3
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d130      	bne.n	8002d70 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6839      	ldr	r1, [r7, #0]
 8002d14:	2201      	movs	r2, #1
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 ffe4 	bl	8003ce4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a17      	ldr	r2, [pc, #92]	@ (8002d80 <HAL_TIM_IC_Start_IT+0x208>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00a      	beq.n	8002d3c <HAL_TIM_IC_Start_IT+0x1c4>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	2380      	movs	r3, #128	@ 0x80
 8002d2c:	05db      	lsls	r3, r3, #23
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d004      	beq.n	8002d3c <HAL_TIM_IC_Start_IT+0x1c4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a13      	ldr	r2, [pc, #76]	@ (8002d84 <HAL_TIM_IC_Start_IT+0x20c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d111      	bne.n	8002d60 <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2207      	movs	r2, #7
 8002d44:	4013      	ands	r3, r2
 8002d46:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d010      	beq.n	8002d70 <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2101      	movs	r1, #1
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5e:	e007      	b.n	8002d70 <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d70:	230f      	movs	r3, #15
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	781b      	ldrb	r3, [r3, #0]
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b004      	add	sp, #16
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			@ (mov r8, r8)
 8002d80:	40012c00 	.word	0x40012c00
 8002d84:	40000400 	.word	0x40000400

08002d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2202      	movs	r2, #2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d124      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2202      	movs	r2, #2
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d11d      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2203      	movs	r2, #3
 8002db2:	4252      	negs	r2, r2
 8002db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7fd fec2 	bl	8000b54 <HAL_TIM_IC_CaptureCallback>
 8002dd0:	e007      	b.n	8002de2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 fb5f 	bl	8003498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 fb63 	bl	80034a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2204      	movs	r2, #4
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d125      	bne.n	8002e42 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d11e      	bne.n	8002e42 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2205      	movs	r2, #5
 8002e0a:	4252      	negs	r2, r2
 8002e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	23c0      	movs	r3, #192	@ 0xc0
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d004      	beq.n	8002e2c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7fd fe95 	bl	8000b54 <HAL_TIM_IC_CaptureCallback>
 8002e2a:	e007      	b.n	8002e3c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f000 fb32 	bl	8003498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fb36 	bl	80034a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	2208      	movs	r2, #8
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d124      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2208      	movs	r2, #8
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d11d      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2209      	movs	r2, #9
 8002e64:	4252      	negs	r2, r2
 8002e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	2203      	movs	r2, #3
 8002e76:	4013      	ands	r3, r2
 8002e78:	d004      	beq.n	8002e84 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f7fd fe69 	bl	8000b54 <HAL_TIM_IC_CaptureCallback>
 8002e82:	e007      	b.n	8002e94 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	0018      	movs	r0, r3
 8002e88:	f000 fb06 	bl	8003498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 fb0a 	bl	80034a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d125      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2210      	movs	r2, #16
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d11e      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2211      	movs	r2, #17
 8002ebc:	4252      	negs	r2, r2
 8002ebe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	23c0      	movs	r3, #192	@ 0xc0
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7fd fe3c 	bl	8000b54 <HAL_TIM_IC_CaptureCallback>
 8002edc:	e007      	b.n	8002eee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f000 fad9 	bl	8003498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f000 fadd 	bl	80034a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2201      	movs	r2, #1
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d10f      	bne.n	8002f22 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d108      	bne.n	8002f22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2202      	movs	r2, #2
 8002f16:	4252      	negs	r2, r2
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f7fd fea7 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2280      	movs	r2, #128	@ 0x80
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b80      	cmp	r3, #128	@ 0x80
 8002f2e:	d10f      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2280      	movs	r2, #128	@ 0x80
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b80      	cmp	r3, #128	@ 0x80
 8002f3c:	d108      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2281      	movs	r2, #129	@ 0x81
 8002f44:	4252      	negs	r2, r2
 8002f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 ffac 	bl	8003ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2240      	movs	r2, #64	@ 0x40
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b40      	cmp	r3, #64	@ 0x40
 8002f5c:	d10f      	bne.n	8002f7e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2240      	movs	r2, #64	@ 0x40
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	d108      	bne.n	8002f7e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2241      	movs	r2, #65	@ 0x41
 8002f72:	4252      	negs	r2, r2
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f000 fa9d 	bl	80034b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2220      	movs	r2, #32
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d10f      	bne.n	8002fac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d108      	bne.n	8002fac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2221      	movs	r2, #33	@ 0x21
 8002fa0:	4252      	negs	r2, r2
 8002fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 ff76 	bl	8003e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fac:	46c0      	nop			@ (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc0:	2317      	movs	r3, #23
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	223c      	movs	r2, #60	@ 0x3c
 8002fcc:	5c9b      	ldrb	r3, [r3, r2]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_IC_ConfigChannel+0x22>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e08c      	b.n	80030f0 <HAL_TIM_IC_ConfigChannel+0x13c>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	223c      	movs	r2, #60	@ 0x3c
 8002fda:	2101      	movs	r1, #1
 8002fdc:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002ff4:	f000 fcbe 	bl	8003974 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	210c      	movs	r1, #12
 8003004:	438a      	bics	r2, r1
 8003006:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6999      	ldr	r1, [r3, #24]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	619a      	str	r2, [r3, #24]
 800301a:	e062      	b.n	80030e2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b04      	cmp	r3, #4
 8003020:	d11c      	bne.n	800305c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003032:	f000 fd23 	bl	8003a7c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699a      	ldr	r2, [r3, #24]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	492d      	ldr	r1, [pc, #180]	@ (80030f8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003042:	400a      	ands	r2, r1
 8003044:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6999      	ldr	r1, [r3, #24]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	021a      	lsls	r2, r3, #8
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	619a      	str	r2, [r3, #24]
 800305a:	e042      	b.n	80030e2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b08      	cmp	r3, #8
 8003060:	d11b      	bne.n	800309a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003072:	f000 fd77 	bl	8003b64 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	210c      	movs	r1, #12
 8003082:	438a      	bics	r2, r1
 8003084:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69d9      	ldr	r1, [r3, #28]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	61da      	str	r2, [r3, #28]
 8003098:	e023      	b.n	80030e2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d11c      	bne.n	80030da <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80030b0:	f000 fd98 	bl	8003be4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	490e      	ldr	r1, [pc, #56]	@ (80030f8 <HAL_TIM_IC_ConfigChannel+0x144>)
 80030c0:	400a      	ands	r2, r1
 80030c2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69d9      	ldr	r1, [r3, #28]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	021a      	lsls	r2, r3, #8
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	61da      	str	r2, [r3, #28]
 80030d8:	e003      	b.n	80030e2 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80030da:	2317      	movs	r3, #23
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	223c      	movs	r2, #60	@ 0x3c
 80030e6:	2100      	movs	r1, #0
 80030e8:	5499      	strb	r1, [r3, r2]

  return status;
 80030ea:	2317      	movs	r3, #23
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	781b      	ldrb	r3, [r3, #0]
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b006      	add	sp, #24
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	fffff3ff 	.word	0xfffff3ff

080030fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2317      	movs	r3, #23
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	223c      	movs	r2, #60	@ 0x3c
 8003114:	5c9b      	ldrb	r3, [r3, r2]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_TIM_PWM_ConfigChannel+0x22>
 800311a:	2302      	movs	r3, #2
 800311c:	e0ad      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	223c      	movs	r2, #60	@ 0x3c
 8003122:	2101      	movs	r1, #1
 8003124:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b0c      	cmp	r3, #12
 800312a:	d100      	bne.n	800312e <HAL_TIM_PWM_ConfigChannel+0x32>
 800312c:	e076      	b.n	800321c <HAL_TIM_PWM_ConfigChannel+0x120>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d900      	bls.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003134:	e095      	b.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d04e      	beq.n	80031da <HAL_TIM_PWM_ConfigChannel+0xde>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b08      	cmp	r3, #8
 8003140:	d900      	bls.n	8003144 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003142:	e08e      	b.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_PWM_ConfigChannel+0x56>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d021      	beq.n	8003194 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003150:	e087      	b.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	0011      	movs	r1, r2
 800315a:	0018      	movs	r0, r3
 800315c:	f000 fa2a 	bl	80035b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2108      	movs	r1, #8
 800316c:	430a      	orrs	r2, r1
 800316e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2104      	movs	r1, #4
 800317c:	438a      	bics	r2, r1
 800317e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6999      	ldr	r1, [r3, #24]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	619a      	str	r2, [r3, #24]
      break;
 8003192:	e06b      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	0011      	movs	r1, r2
 800319c:	0018      	movs	r0, r3
 800319e:	f000 fa87 	bl	80036b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2180      	movs	r1, #128	@ 0x80
 80031ae:	0109      	lsls	r1, r1, #4
 80031b0:	430a      	orrs	r2, r1
 80031b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4931      	ldr	r1, [pc, #196]	@ (8003284 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80031c0:	400a      	ands	r2, r1
 80031c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6999      	ldr	r1, [r3, #24]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	021a      	lsls	r2, r3, #8
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	619a      	str	r2, [r3, #24]
      break;
 80031d8:	e048      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	0011      	movs	r1, r2
 80031e2:	0018      	movs	r0, r3
 80031e4:	f000 fae2 	bl	80037ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2108      	movs	r1, #8
 80031f4:	430a      	orrs	r2, r1
 80031f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2104      	movs	r1, #4
 8003204:	438a      	bics	r2, r1
 8003206:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69d9      	ldr	r1, [r3, #28]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	61da      	str	r2, [r3, #28]
      break;
 800321a:	e027      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	0011      	movs	r1, r2
 8003224:	0018      	movs	r0, r3
 8003226:	f000 fb41 	bl	80038ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2180      	movs	r1, #128	@ 0x80
 8003236:	0109      	lsls	r1, r1, #4
 8003238:	430a      	orrs	r2, r1
 800323a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	490f      	ldr	r1, [pc, #60]	@ (8003284 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003248:	400a      	ands	r2, r1
 800324a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69d9      	ldr	r1, [r3, #28]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	021a      	lsls	r2, r3, #8
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	61da      	str	r2, [r3, #28]
      break;
 8003260:	e004      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003262:	2317      	movs	r3, #23
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
      break;
 800326a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	223c      	movs	r2, #60	@ 0x3c
 8003270:	2100      	movs	r1, #0
 8003272:	5499      	strb	r1, [r3, r2]

  return status;
 8003274:	2317      	movs	r3, #23
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	781b      	ldrb	r3, [r3, #0]
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b006      	add	sp, #24
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			@ (mov r8, r8)
 8003284:	fffffbff 	.word	0xfffffbff

08003288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003292:	230f      	movs	r3, #15
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	223c      	movs	r2, #60	@ 0x3c
 800329e:	5c9b      	ldrb	r3, [r3, r2]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_TIM_ConfigClockSource+0x20>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e0bc      	b.n	8003422 <HAL_TIM_ConfigClockSource+0x19a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	223c      	movs	r2, #60	@ 0x3c
 80032ac:	2101      	movs	r1, #1
 80032ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	223d      	movs	r2, #61	@ 0x3d
 80032b4:	2102      	movs	r1, #2
 80032b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2277      	movs	r2, #119	@ 0x77
 80032c4:	4393      	bics	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4a58      	ldr	r2, [pc, #352]	@ (800342c <HAL_TIM_ConfigClockSource+0x1a4>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2280      	movs	r2, #128	@ 0x80
 80032de:	0192      	lsls	r2, r2, #6
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d040      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0xde>
 80032e4:	2280      	movs	r2, #128	@ 0x80
 80032e6:	0192      	lsls	r2, r2, #6
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d900      	bls.n	80032ee <HAL_TIM_ConfigClockSource+0x66>
 80032ec:	e088      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x178>
 80032ee:	2280      	movs	r2, #128	@ 0x80
 80032f0:	0152      	lsls	r2, r2, #5
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d100      	bne.n	80032f8 <HAL_TIM_ConfigClockSource+0x70>
 80032f6:	e088      	b.n	800340a <HAL_TIM_ConfigClockSource+0x182>
 80032f8:	2280      	movs	r2, #128	@ 0x80
 80032fa:	0152      	lsls	r2, r2, #5
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d900      	bls.n	8003302 <HAL_TIM_ConfigClockSource+0x7a>
 8003300:	e07e      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x178>
 8003302:	2b70      	cmp	r3, #112	@ 0x70
 8003304:	d018      	beq.n	8003338 <HAL_TIM_ConfigClockSource+0xb0>
 8003306:	d900      	bls.n	800330a <HAL_TIM_ConfigClockSource+0x82>
 8003308:	e07a      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x178>
 800330a:	2b60      	cmp	r3, #96	@ 0x60
 800330c:	d04f      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0x126>
 800330e:	d900      	bls.n	8003312 <HAL_TIM_ConfigClockSource+0x8a>
 8003310:	e076      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x178>
 8003312:	2b50      	cmp	r3, #80	@ 0x50
 8003314:	d03b      	beq.n	800338e <HAL_TIM_ConfigClockSource+0x106>
 8003316:	d900      	bls.n	800331a <HAL_TIM_ConfigClockSource+0x92>
 8003318:	e072      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x178>
 800331a:	2b40      	cmp	r3, #64	@ 0x40
 800331c:	d057      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x146>
 800331e:	d900      	bls.n	8003322 <HAL_TIM_ConfigClockSource+0x9a>
 8003320:	e06e      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x178>
 8003322:	2b30      	cmp	r3, #48	@ 0x30
 8003324:	d063      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x166>
 8003326:	d86b      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x178>
 8003328:	2b20      	cmp	r3, #32
 800332a:	d060      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x166>
 800332c:	d868      	bhi.n	8003400 <HAL_TIM_ConfigClockSource+0x178>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d05d      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x166>
 8003332:	2b10      	cmp	r3, #16
 8003334:	d05b      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x166>
 8003336:	e063      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003348:	f000 fcac 	bl	8003ca4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2277      	movs	r2, #119	@ 0x77
 8003358:	4313      	orrs	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	609a      	str	r2, [r3, #8]
      break;
 8003364:	e052      	b.n	800340c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003376:	f000 fc95 	bl	8003ca4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2180      	movs	r1, #128	@ 0x80
 8003386:	01c9      	lsls	r1, r1, #7
 8003388:	430a      	orrs	r2, r1
 800338a:	609a      	str	r2, [r3, #8]
      break;
 800338c:	e03e      	b.n	800340c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800339a:	001a      	movs	r2, r3
 800339c:	f000 fb40 	bl	8003a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2150      	movs	r1, #80	@ 0x50
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 fc62 	bl	8003c70 <TIM_ITRx_SetConfig>
      break;
 80033ac:	e02e      	b.n	800340c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ba:	001a      	movs	r2, r3
 80033bc:	f000 fba0 	bl	8003b00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2160      	movs	r1, #96	@ 0x60
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 fc52 	bl	8003c70 <TIM_ITRx_SetConfig>
      break;
 80033cc:	e01e      	b.n	800340c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033da:	001a      	movs	r2, r3
 80033dc:	f000 fb20 	bl	8003a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2140      	movs	r1, #64	@ 0x40
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 fc42 	bl	8003c70 <TIM_ITRx_SetConfig>
      break;
 80033ec:	e00e      	b.n	800340c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0019      	movs	r1, r3
 80033f8:	0010      	movs	r0, r2
 80033fa:	f000 fc39 	bl	8003c70 <TIM_ITRx_SetConfig>
      break;
 80033fe:	e005      	b.n	800340c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003400:	230f      	movs	r3, #15
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
      break;
 8003408:	e000      	b.n	800340c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800340a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	223d      	movs	r2, #61	@ 0x3d
 8003410:	2101      	movs	r1, #1
 8003412:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	223c      	movs	r2, #60	@ 0x3c
 8003418:	2100      	movs	r1, #0
 800341a:	5499      	strb	r1, [r3, r2]

  return status;
 800341c:	230f      	movs	r3, #15
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	781b      	ldrb	r3, [r3, #0]
}
 8003422:	0018      	movs	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	ffff00ff 	.word	0xffff00ff

08003430 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b0c      	cmp	r3, #12
 8003442:	d01e      	beq.n	8003482 <HAL_TIM_ReadCapturedValue+0x52>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d820      	bhi.n	800348c <HAL_TIM_ReadCapturedValue+0x5c>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d013      	beq.n	8003478 <HAL_TIM_ReadCapturedValue+0x48>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b08      	cmp	r3, #8
 8003454:	d81a      	bhi.n	800348c <HAL_TIM_ReadCapturedValue+0x5c>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_TIM_ReadCapturedValue+0x34>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b04      	cmp	r3, #4
 8003460:	d005      	beq.n	800346e <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8003462:	e013      	b.n	800348c <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346a:	60fb      	str	r3, [r7, #12]
      break;
 800346c:	e00f      	b.n	800348e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003474:	60fb      	str	r3, [r7, #12]
      break;
 8003476:	e00a      	b.n	800348e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347e:	60fb      	str	r3, [r7, #12]
      break;
 8003480:	e005      	b.n	800348e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	60fb      	str	r3, [r7, #12]
      break;
 800348a:	e000      	b.n	800348e <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800348c:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800348e:	68fb      	ldr	r3, [r7, #12]
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b004      	add	sp, #16
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034a0:	46c0      	nop			@ (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b002      	add	sp, #8
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b002      	add	sp, #8
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c0:	46c0      	nop			@ (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a30      	ldr	r2, [pc, #192]	@ (800359c <TIM_Base_SetConfig+0xd4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d008      	beq.n	80034f2 <TIM_Base_SetConfig+0x2a>
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	2380      	movs	r3, #128	@ 0x80
 80034e4:	05db      	lsls	r3, r3, #23
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d003      	beq.n	80034f2 <TIM_Base_SetConfig+0x2a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a2c      	ldr	r2, [pc, #176]	@ (80035a0 <TIM_Base_SetConfig+0xd8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2270      	movs	r2, #112	@ 0x70
 80034f6:	4393      	bics	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a25      	ldr	r2, [pc, #148]	@ (800359c <TIM_Base_SetConfig+0xd4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d014      	beq.n	8003536 <TIM_Base_SetConfig+0x6e>
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	2380      	movs	r3, #128	@ 0x80
 8003510:	05db      	lsls	r3, r3, #23
 8003512:	429a      	cmp	r2, r3
 8003514:	d00f      	beq.n	8003536 <TIM_Base_SetConfig+0x6e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a21      	ldr	r2, [pc, #132]	@ (80035a0 <TIM_Base_SetConfig+0xd8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00b      	beq.n	8003536 <TIM_Base_SetConfig+0x6e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a20      	ldr	r2, [pc, #128]	@ (80035a4 <TIM_Base_SetConfig+0xdc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d007      	beq.n	8003536 <TIM_Base_SetConfig+0x6e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1f      	ldr	r2, [pc, #124]	@ (80035a8 <TIM_Base_SetConfig+0xe0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d003      	beq.n	8003536 <TIM_Base_SetConfig+0x6e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1e      	ldr	r2, [pc, #120]	@ (80035ac <TIM_Base_SetConfig+0xe4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d108      	bne.n	8003548 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4a1d      	ldr	r2, [pc, #116]	@ (80035b0 <TIM_Base_SetConfig+0xe8>)
 800353a:	4013      	ands	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2280      	movs	r2, #128	@ 0x80
 800354c:	4393      	bics	r3, r2
 800354e:	001a      	movs	r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a0a      	ldr	r2, [pc, #40]	@ (800359c <TIM_Base_SetConfig+0xd4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0xbe>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a0b      	ldr	r2, [pc, #44]	@ (80035a8 <TIM_Base_SetConfig+0xe0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0xbe>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a0a      	ldr	r2, [pc, #40]	@ (80035ac <TIM_Base_SetConfig+0xe4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d103      	bne.n	800358e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	615a      	str	r2, [r3, #20]
}
 8003594:	46c0      	nop			@ (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	b004      	add	sp, #16
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40002000 	.word	0x40002000
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800
 80035b0:	fffffcff 	.word	0xfffffcff

080035b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	2201      	movs	r2, #1
 80035c4:	4393      	bics	r3, r2
 80035c6:	001a      	movs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2270      	movs	r2, #112	@ 0x70
 80035e2:	4393      	bics	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2203      	movs	r2, #3
 80035ea:	4393      	bics	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2202      	movs	r2, #2
 80035fc:	4393      	bics	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a23      	ldr	r2, [pc, #140]	@ (800369c <TIM_OC1_SetConfig+0xe8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <TIM_OC1_SetConfig+0x6e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a22      	ldr	r2, [pc, #136]	@ (80036a0 <TIM_OC1_SetConfig+0xec>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d003      	beq.n	8003622 <TIM_OC1_SetConfig+0x6e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a21      	ldr	r2, [pc, #132]	@ (80036a4 <TIM_OC1_SetConfig+0xf0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d10c      	bne.n	800363c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2208      	movs	r2, #8
 8003626:	4393      	bics	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2204      	movs	r2, #4
 8003638:	4393      	bics	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a17      	ldr	r2, [pc, #92]	@ (800369c <TIM_OC1_SetConfig+0xe8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d007      	beq.n	8003654 <TIM_OC1_SetConfig+0xa0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a16      	ldr	r2, [pc, #88]	@ (80036a0 <TIM_OC1_SetConfig+0xec>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <TIM_OC1_SetConfig+0xa0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a15      	ldr	r2, [pc, #84]	@ (80036a4 <TIM_OC1_SetConfig+0xf0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d111      	bne.n	8003678 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4a14      	ldr	r2, [pc, #80]	@ (80036a8 <TIM_OC1_SetConfig+0xf4>)
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4a13      	ldr	r2, [pc, #76]	@ (80036ac <TIM_OC1_SetConfig+0xf8>)
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	621a      	str	r2, [r3, #32]
}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	b006      	add	sp, #24
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	40012c00 	.word	0x40012c00
 80036a0:	40014400 	.word	0x40014400
 80036a4:	40014800 	.word	0x40014800
 80036a8:	fffffeff 	.word	0xfffffeff
 80036ac:	fffffdff 	.word	0xfffffdff

080036b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	2210      	movs	r2, #16
 80036c0:	4393      	bics	r3, r2
 80036c2:	001a      	movs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003790 <TIM_OC2_SetConfig+0xe0>)
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003794 <TIM_OC2_SetConfig+0xe4>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2220      	movs	r2, #32
 80036fa:	4393      	bics	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a22      	ldr	r2, [pc, #136]	@ (8003798 <TIM_OC2_SetConfig+0xe8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10d      	bne.n	800372e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2280      	movs	r2, #128	@ 0x80
 8003716:	4393      	bics	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2240      	movs	r2, #64	@ 0x40
 800372a:	4393      	bics	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a19      	ldr	r2, [pc, #100]	@ (8003798 <TIM_OC2_SetConfig+0xe8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d007      	beq.n	8003746 <TIM_OC2_SetConfig+0x96>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a18      	ldr	r2, [pc, #96]	@ (800379c <TIM_OC2_SetConfig+0xec>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d003      	beq.n	8003746 <TIM_OC2_SetConfig+0x96>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <TIM_OC2_SetConfig+0xf0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d113      	bne.n	800376e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4a16      	ldr	r2, [pc, #88]	@ (80037a4 <TIM_OC2_SetConfig+0xf4>)
 800374a:	4013      	ands	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4a15      	ldr	r2, [pc, #84]	@ (80037a8 <TIM_OC2_SetConfig+0xf8>)
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	621a      	str	r2, [r3, #32]
}
 8003788:	46c0      	nop			@ (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b006      	add	sp, #24
 800378e:	bd80      	pop	{r7, pc}
 8003790:	ffff8fff 	.word	0xffff8fff
 8003794:	fffffcff 	.word	0xfffffcff
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40014400 	.word	0x40014400
 80037a0:	40014800 	.word	0x40014800
 80037a4:	fffffbff 	.word	0xfffffbff
 80037a8:	fffff7ff 	.word	0xfffff7ff

080037ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	4a33      	ldr	r2, [pc, #204]	@ (8003888 <TIM_OC3_SetConfig+0xdc>)
 80037bc:	401a      	ands	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2270      	movs	r2, #112	@ 0x70
 80037d8:	4393      	bics	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2203      	movs	r2, #3
 80037e0:	4393      	bics	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	4a26      	ldr	r2, [pc, #152]	@ (800388c <TIM_OC3_SetConfig+0xe0>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a22      	ldr	r2, [pc, #136]	@ (8003890 <TIM_OC3_SetConfig+0xe4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10d      	bne.n	8003826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	4a21      	ldr	r2, [pc, #132]	@ (8003894 <TIM_OC3_SetConfig+0xe8>)
 800380e:	4013      	ands	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	4a1d      	ldr	r2, [pc, #116]	@ (8003898 <TIM_OC3_SetConfig+0xec>)
 8003822:	4013      	ands	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a19      	ldr	r2, [pc, #100]	@ (8003890 <TIM_OC3_SetConfig+0xe4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d007      	beq.n	800383e <TIM_OC3_SetConfig+0x92>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a1a      	ldr	r2, [pc, #104]	@ (800389c <TIM_OC3_SetConfig+0xf0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <TIM_OC3_SetConfig+0x92>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a19      	ldr	r2, [pc, #100]	@ (80038a0 <TIM_OC3_SetConfig+0xf4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d113      	bne.n	8003866 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4a18      	ldr	r2, [pc, #96]	@ (80038a4 <TIM_OC3_SetConfig+0xf8>)
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4a17      	ldr	r2, [pc, #92]	@ (80038a8 <TIM_OC3_SetConfig+0xfc>)
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b006      	add	sp, #24
 8003886:	bd80      	pop	{r7, pc}
 8003888:	fffffeff 	.word	0xfffffeff
 800388c:	fffffdff 	.word	0xfffffdff
 8003890:	40012c00 	.word	0x40012c00
 8003894:	fffff7ff 	.word	0xfffff7ff
 8003898:	fffffbff 	.word	0xfffffbff
 800389c:	40014400 	.word	0x40014400
 80038a0:	40014800 	.word	0x40014800
 80038a4:	ffffefff 	.word	0xffffefff
 80038a8:	ffffdfff 	.word	0xffffdfff

080038ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4a26      	ldr	r2, [pc, #152]	@ (8003954 <TIM_OC4_SetConfig+0xa8>)
 80038bc:	401a      	ands	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a20      	ldr	r2, [pc, #128]	@ (8003958 <TIM_OC4_SetConfig+0xac>)
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a1f      	ldr	r2, [pc, #124]	@ (800395c <TIM_OC4_SetConfig+0xb0>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003960 <TIM_OC4_SetConfig+0xb4>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	031b      	lsls	r3, r3, #12
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a17      	ldr	r2, [pc, #92]	@ (8003964 <TIM_OC4_SetConfig+0xb8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <TIM_OC4_SetConfig+0x70>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a16      	ldr	r2, [pc, #88]	@ (8003968 <TIM_OC4_SetConfig+0xbc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_OC4_SetConfig+0x70>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a15      	ldr	r2, [pc, #84]	@ (800396c <TIM_OC4_SetConfig+0xc0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d109      	bne.n	8003930 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	4a14      	ldr	r2, [pc, #80]	@ (8003970 <TIM_OC4_SetConfig+0xc4>)
 8003920:	4013      	ands	r3, r2
 8003922:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	019b      	lsls	r3, r3, #6
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	46bd      	mov	sp, r7
 800394e:	b006      	add	sp, #24
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	ffffefff 	.word	0xffffefff
 8003958:	ffff8fff 	.word	0xffff8fff
 800395c:	fffffcff 	.word	0xfffffcff
 8003960:	ffffdfff 	.word	0xffffdfff
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40014400 	.word	0x40014400
 800396c:	40014800 	.word	0x40014800
 8003970:	ffffbfff 	.word	0xffffbfff

08003974 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	2201      	movs	r2, #1
 8003988:	4393      	bics	r3, r2
 800398a:	001a      	movs	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a1e      	ldr	r2, [pc, #120]	@ (8003a18 <TIM_TI1_SetConfig+0xa4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d008      	beq.n	80039b6 <TIM_TI1_SetConfig+0x42>
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	2380      	movs	r3, #128	@ 0x80
 80039a8:	05db      	lsls	r3, r3, #23
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d003      	beq.n	80039b6 <TIM_TI1_SetConfig+0x42>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a1c <TIM_TI1_SetConfig+0xa8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <TIM_TI1_SetConfig+0x46>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <TIM_TI1_SetConfig+0x48>
 80039ba:	2300      	movs	r3, #0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2203      	movs	r2, #3
 80039c4:	4393      	bics	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e003      	b.n	80039da <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2201      	movs	r2, #1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	22f0      	movs	r2, #240	@ 0xf0
 80039de:	4393      	bics	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	22ff      	movs	r2, #255	@ 0xff
 80039e8:	4013      	ands	r3, r2
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	220a      	movs	r2, #10
 80039f4:	4393      	bics	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	220a      	movs	r2, #10
 80039fc:	4013      	ands	r3, r2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	621a      	str	r2, [r3, #32]
}
 8003a10:	46c0      	nop			@ (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b006      	add	sp, #24
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40000400 	.word	0x40000400

08003a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	2201      	movs	r2, #1
 8003a38:	4393      	bics	r3, r2
 8003a3a:	001a      	movs	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	22f0      	movs	r2, #240	@ 0xf0
 8003a4a:	4393      	bics	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	220a      	movs	r2, #10
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	621a      	str	r2, [r3, #32]
}
 8003a74:	46c0      	nop			@ (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b006      	add	sp, #24
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	2210      	movs	r2, #16
 8003a90:	4393      	bics	r3, r2
 8003a92:	001a      	movs	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4a14      	ldr	r2, [pc, #80]	@ (8003af8 <TIM_TI2_SetConfig+0x7c>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	4a10      	ldr	r2, [pc, #64]	@ (8003afc <TIM_TI2_SetConfig+0x80>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	031b      	lsls	r3, r3, #12
 8003ac2:	041b      	lsls	r3, r3, #16
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	22a0      	movs	r2, #160	@ 0xa0
 8003ad0:	4393      	bics	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	22a0      	movs	r2, #160	@ 0xa0
 8003ada:	4013      	ands	r3, r2
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b006      	add	sp, #24
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	fffffcff 	.word	0xfffffcff
 8003afc:	ffff0fff 	.word	0xffff0fff

08003b00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	2210      	movs	r2, #16
 8003b12:	4393      	bics	r3, r2
 8003b14:	001a      	movs	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4a0d      	ldr	r2, [pc, #52]	@ (8003b60 <TIM_TI2_ConfigInputStage+0x60>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	031b      	lsls	r3, r3, #12
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	22a0      	movs	r2, #160	@ 0xa0
 8003b3c:	4393      	bics	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b006      	add	sp, #24
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	ffff0fff 	.word	0xffff0fff

08003b64 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a19      	ldr	r2, [pc, #100]	@ (8003bdc <TIM_TI3_SetConfig+0x78>)
 8003b78:	401a      	ands	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	4393      	bics	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	22f0      	movs	r2, #240	@ 0xf0
 8003b9e:	4393      	bics	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	22ff      	movs	r2, #255	@ 0xff
 8003ba8:	4013      	ands	r3, r2
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4a0b      	ldr	r2, [pc, #44]	@ (8003be0 <TIM_TI3_SetConfig+0x7c>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	021a      	lsls	r2, r3, #8
 8003bbc:	23a0      	movs	r3, #160	@ 0xa0
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b006      	add	sp, #24
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	fffffeff 	.word	0xfffffeff
 8003be0:	fffff5ff 	.word	0xfffff5ff

08003be4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c60 <TIM_TI4_SetConfig+0x7c>)
 8003bf8:	401a      	ands	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	4a15      	ldr	r2, [pc, #84]	@ (8003c64 <TIM_TI4_SetConfig+0x80>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	4a12      	ldr	r2, [pc, #72]	@ (8003c68 <TIM_TI4_SetConfig+0x84>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	031b      	lsls	r3, r3, #12
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	0c1b      	lsrs	r3, r3, #16
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4a0d      	ldr	r2, [pc, #52]	@ (8003c6c <TIM_TI4_SetConfig+0x88>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	031a      	lsls	r2, r3, #12
 8003c3e:	23a0      	movs	r3, #160	@ 0xa0
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	4013      	ands	r3, r2
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b006      	add	sp, #24
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	ffffefff 	.word	0xffffefff
 8003c64:	fffffcff 	.word	0xfffffcff
 8003c68:	ffff0fff 	.word	0xffff0fff
 8003c6c:	ffff5fff 	.word	0xffff5fff

08003c70 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2270      	movs	r2, #112	@ 0x70
 8003c84:	4393      	bics	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	2207      	movs	r2, #7
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	609a      	str	r2, [r3, #8]
}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b004      	add	sp, #16
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4a09      	ldr	r2, [pc, #36]	@ (8003ce0 <TIM_ETR_SetConfig+0x3c>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	021a      	lsls	r2, r3, #8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	46c0      	nop			@ (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b006      	add	sp, #24
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	ffff00ff 	.word	0xffff00ff

08003ce4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	221f      	movs	r2, #31
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	0013      	movs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	43d2      	mvns	r2, r2
 8003d06:	401a      	ands	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1a      	ldr	r2, [r3, #32]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	211f      	movs	r1, #31
 8003d14:	400b      	ands	r3, r1
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4099      	lsls	r1, r3
 8003d1a:	000b      	movs	r3, r1
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b006      	add	sp, #24
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	223c      	movs	r2, #60	@ 0x3c
 8003d3a:	5c9b      	ldrb	r3, [r3, r2]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e042      	b.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	223c      	movs	r2, #60	@ 0x3c
 8003d48:	2101      	movs	r1, #1
 8003d4a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	223d      	movs	r2, #61	@ 0x3d
 8003d50:	2102      	movs	r1, #2
 8003d52:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2270      	movs	r2, #112	@ 0x70
 8003d68:	4393      	bics	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a14      	ldr	r2, [pc, #80]	@ (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00a      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	2380      	movs	r3, #128	@ 0x80
 8003d8e:	05db      	lsls	r3, r3, #23
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d004      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a0f      	ldr	r2, [pc, #60]	@ (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d10c      	bne.n	8003db8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2280      	movs	r2, #128	@ 0x80
 8003da2:	4393      	bics	r3, r2
 8003da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	223d      	movs	r2, #61	@ 0x3d
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	223c      	movs	r2, #60	@ 0x3c
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	0018      	movs	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b004      	add	sp, #16
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	40012c00 	.word	0x40012c00
 8003dd8:	40000400 	.word	0x40000400

08003ddc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	223c      	movs	r2, #60	@ 0x3c
 8003dee:	5c9b      	ldrb	r3, [r3, r2]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e03e      	b.n	8003e76 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	223c      	movs	r2, #60	@ 0x3c
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	22ff      	movs	r2, #255	@ 0xff
 8003e04:	4393      	bics	r3, r2
 8003e06:	001a      	movs	r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a1b      	ldr	r2, [pc, #108]	@ (8003e80 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003e14:	401a      	ands	r2, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a18      	ldr	r2, [pc, #96]	@ (8003e84 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003e22:	401a      	ands	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a16      	ldr	r2, [pc, #88]	@ (8003e88 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003e30:	401a      	ands	r2, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a13      	ldr	r2, [pc, #76]	@ (8003e8c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003e3e:	401a      	ands	r2, r3
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a11      	ldr	r2, [pc, #68]	@ (8003e90 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4a0e      	ldr	r2, [pc, #56]	@ (8003e94 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	223c      	movs	r2, #60	@ 0x3c
 8003e70:	2100      	movs	r1, #0
 8003e72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b004      	add	sp, #16
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	fffffcff 	.word	0xfffffcff
 8003e84:	fffffbff 	.word	0xfffffbff
 8003e88:	fffff7ff 	.word	0xfffff7ff
 8003e8c:	ffffefff 	.word	0xffffefff
 8003e90:	ffffdfff 	.word	0xffffdfff
 8003e94:	ffffbfff 	.word	0xffffbfff

08003e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b002      	add	sp, #8
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b002      	add	sp, #8
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e044      	b.n	8003f54 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d107      	bne.n	8003ee2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2278      	movs	r2, #120	@ 0x78
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fd f8b1 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2224      	movs	r2, #36	@ 0x24
 8003ee6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	438a      	bics	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	0018      	movs	r0, r3
 8003efc:	f000 fbcc 	bl	8004698 <UART_SetConfig>
 8003f00:	0003      	movs	r3, r0
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e024      	b.n	8003f54 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	0018      	movs	r0, r3
 8003f16:	f000 fcff 	bl	8004918 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	490d      	ldr	r1, [pc, #52]	@ (8003f5c <HAL_UART_Init+0xa4>)
 8003f26:	400a      	ands	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	212a      	movs	r1, #42	@ 0x2a
 8003f36:	438a      	bics	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2101      	movs	r1, #1
 8003f46:	430a      	orrs	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f000 fd97 	bl	8004a80 <UART_CheckIdleState>
 8003f52:	0003      	movs	r3, r0
}
 8003f54:	0018      	movs	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b002      	add	sp, #8
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	ffffb7ff 	.word	0xffffb7ff

08003f60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	@ 0x28
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	1dbb      	adds	r3, r7, #6
 8003f6e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d000      	beq.n	8003f7a <HAL_UART_Transmit+0x1a>
 8003f78:	e08c      	b.n	8004094 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_UART_Transmit+0x28>
 8003f80:	1dbb      	adds	r3, r7, #6
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e084      	b.n	8004096 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	2380      	movs	r3, #128	@ 0x80
 8003f92:	015b      	lsls	r3, r3, #5
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d109      	bne.n	8003fac <HAL_UART_Transmit+0x4c>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d105      	bne.n	8003fac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d001      	beq.n	8003fac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e074      	b.n	8004096 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2284      	movs	r2, #132	@ 0x84
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2221      	movs	r2, #33	@ 0x21
 8003fb8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fba:	f7fd f9d1 	bl	8001360 <HAL_GetTick>
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1dba      	adds	r2, r7, #6
 8003fc6:	2150      	movs	r1, #80	@ 0x50
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1dba      	adds	r2, r7, #6
 8003fd0:	2152      	movs	r1, #82	@ 0x52
 8003fd2:	8812      	ldrh	r2, [r2, #0]
 8003fd4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	2380      	movs	r3, #128	@ 0x80
 8003fdc:	015b      	lsls	r3, r3, #5
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d108      	bne.n	8003ff4 <HAL_UART_Transmit+0x94>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d104      	bne.n	8003ff4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	e003      	b.n	8003ffc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ffc:	e02f      	b.n	800405e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	0013      	movs	r3, r2
 8004008:	2200      	movs	r2, #0
 800400a:	2180      	movs	r1, #128	@ 0x80
 800400c:	f000 fde0 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 8004010:	1e03      	subs	r3, r0, #0
 8004012:	d004      	beq.n	800401e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e03b      	b.n	8004096 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10b      	bne.n	800403c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	881a      	ldrh	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	05d2      	lsls	r2, r2, #23
 800402e:	0dd2      	lsrs	r2, r2, #23
 8004030:	b292      	uxth	r2, r2
 8004032:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	3302      	adds	r3, #2
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	e007      	b.n	800404c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	781a      	ldrb	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3301      	adds	r3, #1
 800404a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2252      	movs	r2, #82	@ 0x52
 8004050:	5a9b      	ldrh	r3, [r3, r2]
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b299      	uxth	r1, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2252      	movs	r2, #82	@ 0x52
 800405c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2252      	movs	r2, #82	@ 0x52
 8004062:	5a9b      	ldrh	r3, [r3, r2]
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1c9      	bne.n	8003ffe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	0013      	movs	r3, r2
 8004074:	2200      	movs	r2, #0
 8004076:	2140      	movs	r1, #64	@ 0x40
 8004078:	f000 fdaa 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 800407c:	1e03      	subs	r3, r0, #0
 800407e:	d004      	beq.n	800408a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e005      	b.n	8004096 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	e000      	b.n	8004096 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004094:	2302      	movs	r3, #2
  }
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b008      	add	sp, #32
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b0ab      	sub	sp, #172	@ 0xac
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	22a4      	movs	r2, #164	@ 0xa4
 80040b0:	18b9      	adds	r1, r7, r2
 80040b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	20a0      	movs	r0, #160	@ 0xa0
 80040bc:	1839      	adds	r1, r7, r0
 80040be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	219c      	movs	r1, #156	@ 0x9c
 80040c8:	1879      	adds	r1, r7, r1
 80040ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040cc:	0011      	movs	r1, r2
 80040ce:	18bb      	adds	r3, r7, r2
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a99      	ldr	r2, [pc, #612]	@ (8004338 <HAL_UART_IRQHandler+0x298>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	2298      	movs	r2, #152	@ 0x98
 80040d8:	18bc      	adds	r4, r7, r2
 80040da:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80040dc:	18bb      	adds	r3, r7, r2
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d114      	bne.n	800410e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040e4:	187b      	adds	r3, r7, r1
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2220      	movs	r2, #32
 80040ea:	4013      	ands	r3, r2
 80040ec:	d00f      	beq.n	800410e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040ee:	183b      	adds	r3, r7, r0
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2220      	movs	r2, #32
 80040f4:	4013      	ands	r3, r2
 80040f6:	d00a      	beq.n	800410e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d100      	bne.n	8004102 <HAL_UART_IRQHandler+0x62>
 8004100:	e29e      	b.n	8004640 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	0010      	movs	r0, r2
 800410a:	4798      	blx	r3
      }
      return;
 800410c:	e298      	b.n	8004640 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800410e:	2398      	movs	r3, #152	@ 0x98
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d100      	bne.n	800411a <HAL_UART_IRQHandler+0x7a>
 8004118:	e114      	b.n	8004344 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800411a:	239c      	movs	r3, #156	@ 0x9c
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2201      	movs	r2, #1
 8004122:	4013      	ands	r3, r2
 8004124:	d106      	bne.n	8004134 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004126:	23a0      	movs	r3, #160	@ 0xa0
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a83      	ldr	r2, [pc, #524]	@ (800433c <HAL_UART_IRQHandler+0x29c>)
 800412e:	4013      	ands	r3, r2
 8004130:	d100      	bne.n	8004134 <HAL_UART_IRQHandler+0x94>
 8004132:	e107      	b.n	8004344 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004134:	23a4      	movs	r3, #164	@ 0xa4
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2201      	movs	r2, #1
 800413c:	4013      	ands	r3, r2
 800413e:	d012      	beq.n	8004166 <HAL_UART_IRQHandler+0xc6>
 8004140:	23a0      	movs	r3, #160	@ 0xa0
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	2380      	movs	r3, #128	@ 0x80
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4013      	ands	r3, r2
 800414c:	d00b      	beq.n	8004166 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2284      	movs	r2, #132	@ 0x84
 800415a:	589b      	ldr	r3, [r3, r2]
 800415c:	2201      	movs	r2, #1
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2184      	movs	r1, #132	@ 0x84
 8004164:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004166:	23a4      	movs	r3, #164	@ 0xa4
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2202      	movs	r2, #2
 800416e:	4013      	ands	r3, r2
 8004170:	d011      	beq.n	8004196 <HAL_UART_IRQHandler+0xf6>
 8004172:	239c      	movs	r3, #156	@ 0x9c
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2201      	movs	r2, #1
 800417a:	4013      	ands	r3, r2
 800417c:	d00b      	beq.n	8004196 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2202      	movs	r2, #2
 8004184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2284      	movs	r2, #132	@ 0x84
 800418a:	589b      	ldr	r3, [r3, r2]
 800418c:	2204      	movs	r2, #4
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2184      	movs	r1, #132	@ 0x84
 8004194:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004196:	23a4      	movs	r3, #164	@ 0xa4
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2204      	movs	r2, #4
 800419e:	4013      	ands	r3, r2
 80041a0:	d011      	beq.n	80041c6 <HAL_UART_IRQHandler+0x126>
 80041a2:	239c      	movs	r3, #156	@ 0x9c
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2201      	movs	r2, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2204      	movs	r2, #4
 80041b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2284      	movs	r2, #132	@ 0x84
 80041ba:	589b      	ldr	r3, [r3, r2]
 80041bc:	2202      	movs	r2, #2
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2184      	movs	r1, #132	@ 0x84
 80041c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041c6:	23a4      	movs	r3, #164	@ 0xa4
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2208      	movs	r2, #8
 80041ce:	4013      	ands	r3, r2
 80041d0:	d017      	beq.n	8004202 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041d2:	23a0      	movs	r3, #160	@ 0xa0
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2220      	movs	r2, #32
 80041da:	4013      	ands	r3, r2
 80041dc:	d105      	bne.n	80041ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041de:	239c      	movs	r3, #156	@ 0x9c
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2201      	movs	r2, #1
 80041e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041e8:	d00b      	beq.n	8004202 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2208      	movs	r2, #8
 80041f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2284      	movs	r2, #132	@ 0x84
 80041f6:	589b      	ldr	r3, [r3, r2]
 80041f8:	2208      	movs	r2, #8
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2184      	movs	r1, #132	@ 0x84
 8004200:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004202:	23a4      	movs	r3, #164	@ 0xa4
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	@ 0x80
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	4013      	ands	r3, r2
 800420e:	d013      	beq.n	8004238 <HAL_UART_IRQHandler+0x198>
 8004210:	23a0      	movs	r3, #160	@ 0xa0
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	2380      	movs	r3, #128	@ 0x80
 8004218:	04db      	lsls	r3, r3, #19
 800421a:	4013      	ands	r3, r2
 800421c:	d00c      	beq.n	8004238 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2280      	movs	r2, #128	@ 0x80
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2284      	movs	r2, #132	@ 0x84
 800422c:	589b      	ldr	r3, [r3, r2]
 800422e:	2220      	movs	r2, #32
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2184      	movs	r1, #132	@ 0x84
 8004236:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2284      	movs	r2, #132	@ 0x84
 800423c:	589b      	ldr	r3, [r3, r2]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d100      	bne.n	8004244 <HAL_UART_IRQHandler+0x1a4>
 8004242:	e1ff      	b.n	8004644 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004244:	23a4      	movs	r3, #164	@ 0xa4
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2220      	movs	r2, #32
 800424c:	4013      	ands	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004250:	23a0      	movs	r3, #160	@ 0xa0
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2220      	movs	r2, #32
 8004258:	4013      	ands	r3, r2
 800425a:	d008      	beq.n	800426e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004260:	2b00      	cmp	r3, #0
 8004262:	d004      	beq.n	800426e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	0010      	movs	r0, r2
 800426c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2284      	movs	r2, #132	@ 0x84
 8004272:	589b      	ldr	r3, [r3, r2]
 8004274:	2194      	movs	r1, #148	@ 0x94
 8004276:	187a      	adds	r2, r7, r1
 8004278:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2240      	movs	r2, #64	@ 0x40
 8004282:	4013      	ands	r3, r2
 8004284:	2b40      	cmp	r3, #64	@ 0x40
 8004286:	d004      	beq.n	8004292 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004288:	187b      	adds	r3, r7, r1
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2228      	movs	r2, #40	@ 0x28
 800428e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004290:	d047      	beq.n	8004322 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 fd05 	bl	8004ca4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2240      	movs	r2, #64	@ 0x40
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b40      	cmp	r3, #64	@ 0x40
 80042a6:	d137      	bne.n	8004318 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a8:	f3ef 8310 	mrs	r3, PRIMASK
 80042ac:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80042ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b0:	2090      	movs	r0, #144	@ 0x90
 80042b2:	183a      	adds	r2, r7, r0
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	2301      	movs	r3, #1
 80042b8:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042bc:	f383 8810 	msr	PRIMASK, r3
}
 80042c0:	46c0      	nop			@ (mov r8, r8)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2140      	movs	r1, #64	@ 0x40
 80042ce:	438a      	bics	r2, r1
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	183b      	adds	r3, r7, r0
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042da:	f383 8810 	msr	PRIMASK, r3
}
 80042de:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d012      	beq.n	800430e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ec:	4a14      	ldr	r2, [pc, #80]	@ (8004340 <HAL_UART_IRQHandler+0x2a0>)
 80042ee:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7fd fbb3 	bl	8001a60 <HAL_DMA_Abort_IT>
 80042fa:	1e03      	subs	r3, r0, #0
 80042fc:	d01a      	beq.n	8004334 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004308:	0018      	movs	r0, r3
 800430a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	e012      	b.n	8004334 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	0018      	movs	r0, r3
 8004312:	f000 f9ad 	bl	8004670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004316:	e00d      	b.n	8004334 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f9a8 	bl	8004670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004320:	e008      	b.n	8004334 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f000 f9a3 	bl	8004670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2284      	movs	r2, #132	@ 0x84
 800432e:	2100      	movs	r1, #0
 8004330:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004332:	e187      	b.n	8004644 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004334:	46c0      	nop			@ (mov r8, r8)
    return;
 8004336:	e185      	b.n	8004644 <HAL_UART_IRQHandler+0x5a4>
 8004338:	0000080f 	.word	0x0000080f
 800433c:	04000120 	.word	0x04000120
 8004340:	08004d6d 	.word	0x08004d6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004348:	2b01      	cmp	r3, #1
 800434a:	d000      	beq.n	800434e <HAL_UART_IRQHandler+0x2ae>
 800434c:	e139      	b.n	80045c2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800434e:	23a4      	movs	r3, #164	@ 0xa4
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2210      	movs	r2, #16
 8004356:	4013      	ands	r3, r2
 8004358:	d100      	bne.n	800435c <HAL_UART_IRQHandler+0x2bc>
 800435a:	e132      	b.n	80045c2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800435c:	23a0      	movs	r3, #160	@ 0xa0
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2210      	movs	r2, #16
 8004364:	4013      	ands	r3, r2
 8004366:	d100      	bne.n	800436a <HAL_UART_IRQHandler+0x2ca>
 8004368:	e12b      	b.n	80045c2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2210      	movs	r2, #16
 8004370:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2240      	movs	r2, #64	@ 0x40
 800437a:	4013      	ands	r3, r2
 800437c:	2b40      	cmp	r3, #64	@ 0x40
 800437e:	d000      	beq.n	8004382 <HAL_UART_IRQHandler+0x2e2>
 8004380:	e09f      	b.n	80044c2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	217e      	movs	r1, #126	@ 0x7e
 800438c:	187b      	adds	r3, r7, r1
 800438e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004390:	187b      	adds	r3, r7, r1
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d100      	bne.n	800439a <HAL_UART_IRQHandler+0x2fa>
 8004398:	e156      	b.n	8004648 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2258      	movs	r2, #88	@ 0x58
 800439e:	5a9b      	ldrh	r3, [r3, r2]
 80043a0:	187a      	adds	r2, r7, r1
 80043a2:	8812      	ldrh	r2, [r2, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d300      	bcc.n	80043aa <HAL_UART_IRQHandler+0x30a>
 80043a8:	e14e      	b.n	8004648 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	187a      	adds	r2, r7, r1
 80043ae:	215a      	movs	r1, #90	@ 0x5a
 80043b0:	8812      	ldrh	r2, [r2, #0]
 80043b2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d06f      	beq.n	800449e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043be:	f3ef 8310 	mrs	r3, PRIMASK
 80043c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80043c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043c8:	2301      	movs	r3, #1
 80043ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ce:	f383 8810 	msr	PRIMASK, r3
}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	499e      	ldr	r1, [pc, #632]	@ (8004658 <HAL_UART_IRQHandler+0x5b8>)
 80043e0:	400a      	ands	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ea:	f383 8810 	msr	PRIMASK, r3
}
 80043ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f0:	f3ef 8310 	mrs	r3, PRIMASK
 80043f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80043f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80043fa:	2301      	movs	r3, #1
 80043fc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004400:	f383 8810 	msr	PRIMASK, r3
}
 8004404:	46c0      	nop			@ (mov r8, r8)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2101      	movs	r1, #1
 8004412:	438a      	bics	r2, r1
 8004414:	609a      	str	r2, [r3, #8]
 8004416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004418:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800441c:	f383 8810 	msr	PRIMASK, r3
}
 8004420:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004422:	f3ef 8310 	mrs	r3, PRIMASK
 8004426:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	673b      	str	r3, [r7, #112]	@ 0x70
 800442c:	2301      	movs	r3, #1
 800442e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004432:	f383 8810 	msr	PRIMASK, r3
}
 8004436:	46c0      	nop			@ (mov r8, r8)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2140      	movs	r1, #64	@ 0x40
 8004444:	438a      	bics	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800444a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800444e:	f383 8810 	msr	PRIMASK, r3
}
 8004452:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2280      	movs	r2, #128	@ 0x80
 8004458:	2120      	movs	r1, #32
 800445a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004462:	f3ef 8310 	mrs	r3, PRIMASK
 8004466:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800446c:	2301      	movs	r3, #1
 800446e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004470:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004472:	f383 8810 	msr	PRIMASK, r3
}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2110      	movs	r1, #16
 8004484:	438a      	bics	r2, r1
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800448a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800448e:	f383 8810 	msr	PRIMASK, r3
}
 8004492:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004498:	0018      	movs	r0, r3
 800449a:	f7fd faa9 	bl	80019f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2202      	movs	r2, #2
 80044a2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2258      	movs	r2, #88	@ 0x58
 80044a8:	5a9a      	ldrh	r2, [r3, r2]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	215a      	movs	r1, #90	@ 0x5a
 80044ae:	5a5b      	ldrh	r3, [r3, r1]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	0011      	movs	r1, r2
 80044ba:	0018      	movs	r0, r3
 80044bc:	f000 f8e0 	bl	8004680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044c0:	e0c2      	b.n	8004648 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2258      	movs	r2, #88	@ 0x58
 80044c6:	5a99      	ldrh	r1, [r3, r2]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	225a      	movs	r2, #90	@ 0x5a
 80044cc:	5a9b      	ldrh	r3, [r3, r2]
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	208e      	movs	r0, #142	@ 0x8e
 80044d2:	183b      	adds	r3, r7, r0
 80044d4:	1a8a      	subs	r2, r1, r2
 80044d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	225a      	movs	r2, #90	@ 0x5a
 80044dc:	5a9b      	ldrh	r3, [r3, r2]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d100      	bne.n	80044e6 <HAL_UART_IRQHandler+0x446>
 80044e4:	e0b2      	b.n	800464c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80044e6:	183b      	adds	r3, r7, r0
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d100      	bne.n	80044f0 <HAL_UART_IRQHandler+0x450>
 80044ee:	e0ad      	b.n	800464c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f0:	f3ef 8310 	mrs	r3, PRIMASK
 80044f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80044f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f8:	2488      	movs	r4, #136	@ 0x88
 80044fa:	193a      	adds	r2, r7, r4
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	2301      	movs	r3, #1
 8004500:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f383 8810 	msr	PRIMASK, r3
}
 8004508:	46c0      	nop			@ (mov r8, r8)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4951      	ldr	r1, [pc, #324]	@ (800465c <HAL_UART_IRQHandler+0x5bc>)
 8004516:	400a      	ands	r2, r1
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	193b      	adds	r3, r7, r4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f383 8810 	msr	PRIMASK, r3
}
 8004526:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004528:	f3ef 8310 	mrs	r3, PRIMASK
 800452c:	61bb      	str	r3, [r7, #24]
  return(result);
 800452e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004530:	2484      	movs	r4, #132	@ 0x84
 8004532:	193a      	adds	r2, r7, r4
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	2301      	movs	r3, #1
 8004538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f383 8810 	msr	PRIMASK, r3
}
 8004540:	46c0      	nop			@ (mov r8, r8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2101      	movs	r1, #1
 800454e:	438a      	bics	r2, r1
 8004550:	609a      	str	r2, [r3, #8]
 8004552:	193b      	adds	r3, r7, r4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	f383 8810 	msr	PRIMASK, r3
}
 800455e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2280      	movs	r2, #128	@ 0x80
 8004564:	2120      	movs	r1, #32
 8004566:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004574:	f3ef 8310 	mrs	r3, PRIMASK
 8004578:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457c:	2480      	movs	r4, #128	@ 0x80
 800457e:	193a      	adds	r2, r7, r4
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	2301      	movs	r3, #1
 8004584:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	f383 8810 	msr	PRIMASK, r3
}
 800458c:	46c0      	nop			@ (mov r8, r8)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2110      	movs	r1, #16
 800459a:	438a      	bics	r2, r1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	193b      	adds	r3, r7, r4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a6:	f383 8810 	msr	PRIMASK, r3
}
 80045aa:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045b2:	183b      	adds	r3, r7, r0
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	0011      	movs	r1, r2
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 f860 	bl	8004680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045c0:	e044      	b.n	800464c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045c2:	23a4      	movs	r3, #164	@ 0xa4
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	2380      	movs	r3, #128	@ 0x80
 80045ca:	035b      	lsls	r3, r3, #13
 80045cc:	4013      	ands	r3, r2
 80045ce:	d010      	beq.n	80045f2 <HAL_UART_IRQHandler+0x552>
 80045d0:	239c      	movs	r3, #156	@ 0x9c
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	2380      	movs	r3, #128	@ 0x80
 80045d8:	03db      	lsls	r3, r3, #15
 80045da:	4013      	ands	r3, r2
 80045dc:	d009      	beq.n	80045f2 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2280      	movs	r2, #128	@ 0x80
 80045e4:	0352      	lsls	r2, r2, #13
 80045e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 fc00 	bl	8004df0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045f0:	e02f      	b.n	8004652 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045f2:	23a4      	movs	r3, #164	@ 0xa4
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2280      	movs	r2, #128	@ 0x80
 80045fa:	4013      	ands	r3, r2
 80045fc:	d00f      	beq.n	800461e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045fe:	23a0      	movs	r3, #160	@ 0xa0
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2280      	movs	r2, #128	@ 0x80
 8004606:	4013      	ands	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01e      	beq.n	8004650 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	0010      	movs	r0, r2
 800461a:	4798      	blx	r3
    }
    return;
 800461c:	e018      	b.n	8004650 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800461e:	23a4      	movs	r3, #164	@ 0xa4
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2240      	movs	r2, #64	@ 0x40
 8004626:	4013      	ands	r3, r2
 8004628:	d013      	beq.n	8004652 <HAL_UART_IRQHandler+0x5b2>
 800462a:	23a0      	movs	r3, #160	@ 0xa0
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2240      	movs	r2, #64	@ 0x40
 8004632:	4013      	ands	r3, r2
 8004634:	d00d      	beq.n	8004652 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	0018      	movs	r0, r3
 800463a:	f000 fbae 	bl	8004d9a <UART_EndTransmit_IT>
    return;
 800463e:	e008      	b.n	8004652 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004640:	46c0      	nop			@ (mov r8, r8)
 8004642:	e006      	b.n	8004652 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004644:	46c0      	nop			@ (mov r8, r8)
 8004646:	e004      	b.n	8004652 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004648:	46c0      	nop			@ (mov r8, r8)
 800464a:	e002      	b.n	8004652 <HAL_UART_IRQHandler+0x5b2>
      return;
 800464c:	46c0      	nop			@ (mov r8, r8)
 800464e:	e000      	b.n	8004652 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004650:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004652:	46bd      	mov	sp, r7
 8004654:	b02b      	add	sp, #172	@ 0xac
 8004656:	bd90      	pop	{r4, r7, pc}
 8004658:	fffffeff 	.word	0xfffffeff
 800465c:	fffffedf 	.word	0xfffffedf

08004660 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004668:	46c0      	nop			@ (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004678:	46c0      	nop			@ (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b002      	add	sp, #8
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	000a      	movs	r2, r1
 800468a:	1cbb      	adds	r3, r7, #2
 800468c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	46bd      	mov	sp, r7
 8004692:	b002      	add	sp, #8
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046a0:	231e      	movs	r3, #30
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a8d      	ldr	r2, [pc, #564]	@ (80048fc <UART_SetConfig+0x264>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	0019      	movs	r1, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4a88      	ldr	r2, [pc, #544]	@ (8004900 <UART_SetConfig+0x268>)
 80046de:	4013      	ands	r3, r2
 80046e0:	0019      	movs	r1, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	4a7f      	ldr	r2, [pc, #508]	@ (8004904 <UART_SetConfig+0x26c>)
 8004706:	4013      	ands	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a7b      	ldr	r2, [pc, #492]	@ (8004908 <UART_SetConfig+0x270>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d127      	bne.n	800476e <UART_SetConfig+0xd6>
 800471e:	4b7b      	ldr	r3, [pc, #492]	@ (800490c <UART_SetConfig+0x274>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	2203      	movs	r2, #3
 8004724:	4013      	ands	r3, r2
 8004726:	2b03      	cmp	r3, #3
 8004728:	d00d      	beq.n	8004746 <UART_SetConfig+0xae>
 800472a:	d81b      	bhi.n	8004764 <UART_SetConfig+0xcc>
 800472c:	2b02      	cmp	r3, #2
 800472e:	d014      	beq.n	800475a <UART_SetConfig+0xc2>
 8004730:	d818      	bhi.n	8004764 <UART_SetConfig+0xcc>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <UART_SetConfig+0xa4>
 8004736:	2b01      	cmp	r3, #1
 8004738:	d00a      	beq.n	8004750 <UART_SetConfig+0xb8>
 800473a:	e013      	b.n	8004764 <UART_SetConfig+0xcc>
 800473c:	231f      	movs	r3, #31
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e021      	b.n	800478a <UART_SetConfig+0xf2>
 8004746:	231f      	movs	r3, #31
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	2202      	movs	r2, #2
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e01c      	b.n	800478a <UART_SetConfig+0xf2>
 8004750:	231f      	movs	r3, #31
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	2204      	movs	r2, #4
 8004756:	701a      	strb	r2, [r3, #0]
 8004758:	e017      	b.n	800478a <UART_SetConfig+0xf2>
 800475a:	231f      	movs	r3, #31
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	2208      	movs	r2, #8
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e012      	b.n	800478a <UART_SetConfig+0xf2>
 8004764:	231f      	movs	r3, #31
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	2210      	movs	r2, #16
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	e00d      	b.n	800478a <UART_SetConfig+0xf2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a67      	ldr	r2, [pc, #412]	@ (8004910 <UART_SetConfig+0x278>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d104      	bne.n	8004782 <UART_SetConfig+0xea>
 8004778:	231f      	movs	r3, #31
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	e003      	b.n	800478a <UART_SetConfig+0xf2>
 8004782:	231f      	movs	r3, #31
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	2210      	movs	r2, #16
 8004788:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	2380      	movs	r3, #128	@ 0x80
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	429a      	cmp	r2, r3
 8004794:	d15c      	bne.n	8004850 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004796:	231f      	movs	r3, #31
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d015      	beq.n	80047cc <UART_SetConfig+0x134>
 80047a0:	dc18      	bgt.n	80047d4 <UART_SetConfig+0x13c>
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d00d      	beq.n	80047c2 <UART_SetConfig+0x12a>
 80047a6:	dc15      	bgt.n	80047d4 <UART_SetConfig+0x13c>
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <UART_SetConfig+0x11a>
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d005      	beq.n	80047bc <UART_SetConfig+0x124>
 80047b0:	e010      	b.n	80047d4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b2:	f7fe f81f 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 80047b6:	0003      	movs	r3, r0
 80047b8:	61bb      	str	r3, [r7, #24]
        break;
 80047ba:	e012      	b.n	80047e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047bc:	4b55      	ldr	r3, [pc, #340]	@ (8004914 <UART_SetConfig+0x27c>)
 80047be:	61bb      	str	r3, [r7, #24]
        break;
 80047c0:	e00f      	b.n	80047e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047c2:	f7fd ff9b 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80047c6:	0003      	movs	r3, r0
 80047c8:	61bb      	str	r3, [r7, #24]
        break;
 80047ca:	e00a      	b.n	80047e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047cc:	2380      	movs	r3, #128	@ 0x80
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	61bb      	str	r3, [r7, #24]
        break;
 80047d2:	e006      	b.n	80047e2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047d8:	231e      	movs	r3, #30
 80047da:	18fb      	adds	r3, r7, r3
 80047dc:	2201      	movs	r2, #1
 80047de:	701a      	strb	r2, [r3, #0]
        break;
 80047e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d100      	bne.n	80047ea <UART_SetConfig+0x152>
 80047e8:	e07a      	b.n	80048e0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	005a      	lsls	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	18d2      	adds	r2, r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	0019      	movs	r1, r3
 80047fc:	0010      	movs	r0, r2
 80047fe:	f7fb fc95 	bl	800012c <__udivsi3>
 8004802:	0003      	movs	r3, r0
 8004804:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b0f      	cmp	r3, #15
 800480a:	d91c      	bls.n	8004846 <UART_SetConfig+0x1ae>
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	2380      	movs	r3, #128	@ 0x80
 8004810:	025b      	lsls	r3, r3, #9
 8004812:	429a      	cmp	r2, r3
 8004814:	d217      	bcs.n	8004846 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	b29a      	uxth	r2, r3
 800481a:	200e      	movs	r0, #14
 800481c:	183b      	adds	r3, r7, r0
 800481e:	210f      	movs	r1, #15
 8004820:	438a      	bics	r2, r1
 8004822:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	b29b      	uxth	r3, r3
 800482a:	2207      	movs	r2, #7
 800482c:	4013      	ands	r3, r2
 800482e:	b299      	uxth	r1, r3
 8004830:	183b      	adds	r3, r7, r0
 8004832:	183a      	adds	r2, r7, r0
 8004834:	8812      	ldrh	r2, [r2, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	183a      	adds	r2, r7, r0
 8004840:	8812      	ldrh	r2, [r2, #0]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e04c      	b.n	80048e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004846:	231e      	movs	r3, #30
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e047      	b.n	80048e0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004850:	231f      	movs	r3, #31
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b08      	cmp	r3, #8
 8004858:	d015      	beq.n	8004886 <UART_SetConfig+0x1ee>
 800485a:	dc18      	bgt.n	800488e <UART_SetConfig+0x1f6>
 800485c:	2b04      	cmp	r3, #4
 800485e:	d00d      	beq.n	800487c <UART_SetConfig+0x1e4>
 8004860:	dc15      	bgt.n	800488e <UART_SetConfig+0x1f6>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <UART_SetConfig+0x1d4>
 8004866:	2b02      	cmp	r3, #2
 8004868:	d005      	beq.n	8004876 <UART_SetConfig+0x1de>
 800486a:	e010      	b.n	800488e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800486c:	f7fd ffc2 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 8004870:	0003      	movs	r3, r0
 8004872:	61bb      	str	r3, [r7, #24]
        break;
 8004874:	e012      	b.n	800489c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004876:	4b27      	ldr	r3, [pc, #156]	@ (8004914 <UART_SetConfig+0x27c>)
 8004878:	61bb      	str	r3, [r7, #24]
        break;
 800487a:	e00f      	b.n	800489c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800487c:	f7fd ff3e 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8004880:	0003      	movs	r3, r0
 8004882:	61bb      	str	r3, [r7, #24]
        break;
 8004884:	e00a      	b.n	800489c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004886:	2380      	movs	r3, #128	@ 0x80
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	61bb      	str	r3, [r7, #24]
        break;
 800488c:	e006      	b.n	800489c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004892:	231e      	movs	r3, #30
 8004894:	18fb      	adds	r3, r7, r3
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
        break;
 800489a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01e      	beq.n	80048e0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	085a      	lsrs	r2, r3, #1
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	18d2      	adds	r2, r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	0019      	movs	r1, r3
 80048b2:	0010      	movs	r0, r2
 80048b4:	f7fb fc3a 	bl	800012c <__udivsi3>
 80048b8:	0003      	movs	r3, r0
 80048ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b0f      	cmp	r3, #15
 80048c0:	d90a      	bls.n	80048d8 <UART_SetConfig+0x240>
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	2380      	movs	r3, #128	@ 0x80
 80048c6:	025b      	lsls	r3, r3, #9
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d205      	bcs.n	80048d8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	e003      	b.n	80048e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80048d8:	231e      	movs	r3, #30
 80048da:	18fb      	adds	r3, r7, r3
 80048dc:	2201      	movs	r2, #1
 80048de:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048ec:	231e      	movs	r3, #30
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	781b      	ldrb	r3, [r3, #0]
}
 80048f2:	0018      	movs	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b008      	add	sp, #32
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	efff69f3 	.word	0xefff69f3
 8004900:	ffffcfff 	.word	0xffffcfff
 8004904:	fffff4ff 	.word	0xfffff4ff
 8004908:	40013800 	.word	0x40013800
 800490c:	40021000 	.word	0x40021000
 8004910:	40004400 	.word	0x40004400
 8004914:	007a1200 	.word	0x007a1200

08004918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	2201      	movs	r2, #1
 8004926:	4013      	ands	r3, r2
 8004928:	d00b      	beq.n	8004942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4a4a      	ldr	r2, [pc, #296]	@ (8004a5c <UART_AdvFeatureConfig+0x144>)
 8004932:	4013      	ands	r3, r2
 8004934:	0019      	movs	r1, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	2202      	movs	r2, #2
 8004948:	4013      	ands	r3, r2
 800494a:	d00b      	beq.n	8004964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4a43      	ldr	r2, [pc, #268]	@ (8004a60 <UART_AdvFeatureConfig+0x148>)
 8004954:	4013      	ands	r3, r2
 8004956:	0019      	movs	r1, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	2204      	movs	r2, #4
 800496a:	4013      	ands	r3, r2
 800496c:	d00b      	beq.n	8004986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a3b      	ldr	r2, [pc, #236]	@ (8004a64 <UART_AdvFeatureConfig+0x14c>)
 8004976:	4013      	ands	r3, r2
 8004978:	0019      	movs	r1, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	2208      	movs	r2, #8
 800498c:	4013      	ands	r3, r2
 800498e:	d00b      	beq.n	80049a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a34      	ldr	r2, [pc, #208]	@ (8004a68 <UART_AdvFeatureConfig+0x150>)
 8004998:	4013      	ands	r3, r2
 800499a:	0019      	movs	r1, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	2210      	movs	r2, #16
 80049ae:	4013      	ands	r3, r2
 80049b0:	d00b      	beq.n	80049ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a6c <UART_AdvFeatureConfig+0x154>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	0019      	movs	r1, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	2220      	movs	r2, #32
 80049d0:	4013      	ands	r3, r2
 80049d2:	d00b      	beq.n	80049ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	4a25      	ldr	r2, [pc, #148]	@ (8004a70 <UART_AdvFeatureConfig+0x158>)
 80049dc:	4013      	ands	r3, r2
 80049de:	0019      	movs	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	2240      	movs	r2, #64	@ 0x40
 80049f2:	4013      	ands	r3, r2
 80049f4:	d01d      	beq.n	8004a32 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a74 <UART_AdvFeatureConfig+0x15c>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	0019      	movs	r1, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	035b      	lsls	r3, r3, #13
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d10b      	bne.n	8004a32 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a15      	ldr	r2, [pc, #84]	@ (8004a78 <UART_AdvFeatureConfig+0x160>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	0019      	movs	r1, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	2280      	movs	r2, #128	@ 0x80
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4a0e      	ldr	r2, [pc, #56]	@ (8004a7c <UART_AdvFeatureConfig+0x164>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	0019      	movs	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]
  }
}
 8004a54:	46c0      	nop			@ (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	fffdffff 	.word	0xfffdffff
 8004a60:	fffeffff 	.word	0xfffeffff
 8004a64:	fffbffff 	.word	0xfffbffff
 8004a68:	ffff7fff 	.word	0xffff7fff
 8004a6c:	ffffefff 	.word	0xffffefff
 8004a70:	ffffdfff 	.word	0xffffdfff
 8004a74:	ffefffff 	.word	0xffefffff
 8004a78:	ff9fffff 	.word	0xff9fffff
 8004a7c:	fff7ffff 	.word	0xfff7ffff

08004a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b092      	sub	sp, #72	@ 0x48
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2284      	movs	r2, #132	@ 0x84
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a90:	f7fc fc66 	bl	8001360 <HAL_GetTick>
 8004a94:	0003      	movs	r3, r0
 8004a96:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2208      	movs	r2, #8
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d12c      	bne.n	8004b00 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa8:	2280      	movs	r2, #128	@ 0x80
 8004aaa:	0391      	lsls	r1, r2, #14
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4a46      	ldr	r2, [pc, #280]	@ (8004bc8 <UART_CheckIdleState+0x148>)
 8004ab0:	9200      	str	r2, [sp, #0]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f000 f88c 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 8004ab8:	1e03      	subs	r3, r0, #0
 8004aba:	d021      	beq.n	8004b00 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004abc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004acc:	f383 8810 	msr	PRIMASK, r3
}
 8004ad0:	46c0      	nop			@ (mov r8, r8)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2180      	movs	r1, #128	@ 0x80
 8004ade:	438a      	bics	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae8:	f383 8810 	msr	PRIMASK, r3
}
 8004aec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2278      	movs	r2, #120	@ 0x78
 8004af8:	2100      	movs	r1, #0
 8004afa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e05f      	b.n	8004bc0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2204      	movs	r2, #4
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d146      	bne.n	8004b9c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b10:	2280      	movs	r2, #128	@ 0x80
 8004b12:	03d1      	lsls	r1, r2, #15
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc8 <UART_CheckIdleState+0x148>)
 8004b18:	9200      	str	r2, [sp, #0]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f000 f858 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 8004b20:	1e03      	subs	r3, r0, #0
 8004b22:	d03b      	beq.n	8004b9c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b24:	f3ef 8310 	mrs	r3, PRIMASK
 8004b28:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b2e:	2301      	movs	r3, #1
 8004b30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f383 8810 	msr	PRIMASK, r3
}
 8004b38:	46c0      	nop			@ (mov r8, r8)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4921      	ldr	r1, [pc, #132]	@ (8004bcc <UART_CheckIdleState+0x14c>)
 8004b46:	400a      	ands	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f383 8810 	msr	PRIMASK, r3
}
 8004b54:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b56:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b5c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b60:	2301      	movs	r3, #1
 8004b62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f383 8810 	msr	PRIMASK, r3
}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2101      	movs	r1, #1
 8004b78:	438a      	bics	r2, r1
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	f383 8810 	msr	PRIMASK, r3
}
 8004b86:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2280      	movs	r2, #128	@ 0x80
 8004b8c:	2120      	movs	r1, #32
 8004b8e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2278      	movs	r2, #120	@ 0x78
 8004b94:	2100      	movs	r1, #0
 8004b96:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e011      	b.n	8004bc0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2280      	movs	r2, #128	@ 0x80
 8004ba6:	2120      	movs	r1, #32
 8004ba8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2278      	movs	r2, #120	@ 0x78
 8004bba:	2100      	movs	r1, #0
 8004bbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b010      	add	sp, #64	@ 0x40
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	01ffffff 	.word	0x01ffffff
 8004bcc:	fffffedf 	.word	0xfffffedf

08004bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	1dfb      	adds	r3, r7, #7
 8004bde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be0:	e04b      	b.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	3301      	adds	r3, #1
 8004be6:	d048      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fc fbba 	bl	8001360 <HAL_GetTick>
 8004bec:	0002      	movs	r2, r0
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x2e>
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e04b      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d035      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	2208      	movs	r2, #8
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d111      	bne.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2208      	movs	r2, #8
 8004c22:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	0018      	movs	r0, r3
 8004c28:	f000 f83c 	bl	8004ca4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2284      	movs	r2, #132	@ 0x84
 8004c30:	2108      	movs	r1, #8
 8004c32:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2278      	movs	r2, #120	@ 0x78
 8004c38:	2100      	movs	r1, #0
 8004c3a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e02c      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	2380      	movs	r3, #128	@ 0x80
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	2380      	movs	r3, #128	@ 0x80
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d112      	bne.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2280      	movs	r2, #128	@ 0x80
 8004c5a:	0112      	lsls	r2, r2, #4
 8004c5c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	0018      	movs	r0, r3
 8004c62:	f000 f81f 	bl	8004ca4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2284      	movs	r2, #132	@ 0x84
 8004c6a:	2120      	movs	r1, #32
 8004c6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2278      	movs	r2, #120	@ 0x78
 8004c72:	2100      	movs	r1, #0
 8004c74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e00f      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	4013      	ands	r3, r2
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	425a      	negs	r2, r3
 8004c8a:	4153      	adcs	r3, r2
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	001a      	movs	r2, r3
 8004c90:	1dfb      	adds	r3, r7, #7
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d0a4      	beq.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b004      	add	sp, #16
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08e      	sub	sp, #56	@ 0x38
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cac:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb0:	617b      	str	r3, [r7, #20]
  return(result);
 8004cb2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	f383 8810 	msr	PRIMASK, r3
}
 8004cc0:	46c0      	nop			@ (mov r8, r8)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4926      	ldr	r1, [pc, #152]	@ (8004d68 <UART_EndRxTransfer+0xc4>)
 8004cce:	400a      	ands	r2, r1
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cde:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce2:	623b      	str	r3, [r7, #32]
  return(result);
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ce8:	2301      	movs	r3, #1
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cee:	f383 8810 	msr	PRIMASK, r3
}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2101      	movs	r1, #1
 8004d00:	438a      	bics	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0a:	f383 8810 	msr	PRIMASK, r3
}
 8004d0e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d118      	bne.n	8004d4a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d18:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d22:	2301      	movs	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f383 8810 	msr	PRIMASK, r3
}
 8004d2c:	46c0      	nop			@ (mov r8, r8)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2110      	movs	r1, #16
 8004d3a:	438a      	bics	r2, r1
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f383 8810 	msr	PRIMASK, r3
}
 8004d48:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2280      	movs	r2, #128	@ 0x80
 8004d4e:	2120      	movs	r1, #32
 8004d50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b00e      	add	sp, #56	@ 0x38
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	fffffedf 	.word	0xfffffedf

08004d6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	225a      	movs	r2, #90	@ 0x5a
 8004d7e:	2100      	movs	r1, #0
 8004d80:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2252      	movs	r2, #82	@ 0x52
 8004d86:	2100      	movs	r1, #0
 8004d88:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7ff fc6f 	bl	8004670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b004      	add	sp, #16
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b086      	sub	sp, #24
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da2:	f3ef 8310 	mrs	r3, PRIMASK
 8004da6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004da8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	2301      	movs	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f383 8810 	msr	PRIMASK, r3
}
 8004db6:	46c0      	nop			@ (mov r8, r8)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2140      	movs	r1, #64	@ 0x40
 8004dc4:	438a      	bics	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f383 8810 	msr	PRIMASK, r3
}
 8004dd2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	0018      	movs	r0, r3
 8004de4:	f7ff fc3c 	bl	8004660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004de8:	46c0      	nop			@ (mov r8, r8)
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b006      	add	sp, #24
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004df8:	46c0      	nop			@ (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <siprintf>:
 8004e00:	b40e      	push	{r1, r2, r3}
 8004e02:	b500      	push	{lr}
 8004e04:	490b      	ldr	r1, [pc, #44]	@ (8004e34 <siprintf+0x34>)
 8004e06:	b09c      	sub	sp, #112	@ 0x70
 8004e08:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e0a:	9002      	str	r0, [sp, #8]
 8004e0c:	9006      	str	r0, [sp, #24]
 8004e0e:	9107      	str	r1, [sp, #28]
 8004e10:	9104      	str	r1, [sp, #16]
 8004e12:	4809      	ldr	r0, [pc, #36]	@ (8004e38 <siprintf+0x38>)
 8004e14:	4909      	ldr	r1, [pc, #36]	@ (8004e3c <siprintf+0x3c>)
 8004e16:	cb04      	ldmia	r3!, {r2}
 8004e18:	9105      	str	r1, [sp, #20]
 8004e1a:	6800      	ldr	r0, [r0, #0]
 8004e1c:	a902      	add	r1, sp, #8
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	f000 f8a2 	bl	8004f68 <_svfiprintf_r>
 8004e24:	2200      	movs	r2, #0
 8004e26:	9b02      	ldr	r3, [sp, #8]
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	b01c      	add	sp, #112	@ 0x70
 8004e2c:	bc08      	pop	{r3}
 8004e2e:	b003      	add	sp, #12
 8004e30:	4718      	bx	r3
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	7fffffff 	.word	0x7fffffff
 8004e38:	2000000c 	.word	0x2000000c
 8004e3c:	ffff0208 	.word	0xffff0208

08004e40 <memset>:
 8004e40:	0003      	movs	r3, r0
 8004e42:	1882      	adds	r2, r0, r2
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d100      	bne.n	8004e4a <memset+0xa>
 8004e48:	4770      	bx	lr
 8004e4a:	7019      	strb	r1, [r3, #0]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	e7f9      	b.n	8004e44 <memset+0x4>

08004e50 <__errno>:
 8004e50:	4b01      	ldr	r3, [pc, #4]	@ (8004e58 <__errno+0x8>)
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	4770      	bx	lr
 8004e56:	46c0      	nop			@ (mov r8, r8)
 8004e58:	2000000c 	.word	0x2000000c

08004e5c <__libc_init_array>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	2600      	movs	r6, #0
 8004e60:	4c0c      	ldr	r4, [pc, #48]	@ (8004e94 <__libc_init_array+0x38>)
 8004e62:	4d0d      	ldr	r5, [pc, #52]	@ (8004e98 <__libc_init_array+0x3c>)
 8004e64:	1b64      	subs	r4, r4, r5
 8004e66:	10a4      	asrs	r4, r4, #2
 8004e68:	42a6      	cmp	r6, r4
 8004e6a:	d109      	bne.n	8004e80 <__libc_init_array+0x24>
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	f000 fc63 	bl	8005738 <_init>
 8004e72:	4c0a      	ldr	r4, [pc, #40]	@ (8004e9c <__libc_init_array+0x40>)
 8004e74:	4d0a      	ldr	r5, [pc, #40]	@ (8004ea0 <__libc_init_array+0x44>)
 8004e76:	1b64      	subs	r4, r4, r5
 8004e78:	10a4      	asrs	r4, r4, #2
 8004e7a:	42a6      	cmp	r6, r4
 8004e7c:	d105      	bne.n	8004e8a <__libc_init_array+0x2e>
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	00b3      	lsls	r3, r6, #2
 8004e82:	58eb      	ldr	r3, [r5, r3]
 8004e84:	4798      	blx	r3
 8004e86:	3601      	adds	r6, #1
 8004e88:	e7ee      	b.n	8004e68 <__libc_init_array+0xc>
 8004e8a:	00b3      	lsls	r3, r6, #2
 8004e8c:	58eb      	ldr	r3, [r5, r3]
 8004e8e:	4798      	blx	r3
 8004e90:	3601      	adds	r6, #1
 8004e92:	e7f2      	b.n	8004e7a <__libc_init_array+0x1e>
 8004e94:	080057cc 	.word	0x080057cc
 8004e98:	080057cc 	.word	0x080057cc
 8004e9c:	080057d0 	.word	0x080057d0
 8004ea0:	080057cc 	.word	0x080057cc

08004ea4 <__retarget_lock_acquire_recursive>:
 8004ea4:	4770      	bx	lr

08004ea6 <__retarget_lock_release_recursive>:
 8004ea6:	4770      	bx	lr

08004ea8 <__ssputs_r>:
 8004ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eaa:	688e      	ldr	r6, [r1, #8]
 8004eac:	b085      	sub	sp, #20
 8004eae:	001f      	movs	r7, r3
 8004eb0:	000c      	movs	r4, r1
 8004eb2:	680b      	ldr	r3, [r1, #0]
 8004eb4:	9002      	str	r0, [sp, #8]
 8004eb6:	9203      	str	r2, [sp, #12]
 8004eb8:	42be      	cmp	r6, r7
 8004eba:	d830      	bhi.n	8004f1e <__ssputs_r+0x76>
 8004ebc:	210c      	movs	r1, #12
 8004ebe:	5e62      	ldrsh	r2, [r4, r1]
 8004ec0:	2190      	movs	r1, #144	@ 0x90
 8004ec2:	00c9      	lsls	r1, r1, #3
 8004ec4:	420a      	tst	r2, r1
 8004ec6:	d028      	beq.n	8004f1a <__ssputs_r+0x72>
 8004ec8:	2003      	movs	r0, #3
 8004eca:	6921      	ldr	r1, [r4, #16]
 8004ecc:	1a5b      	subs	r3, r3, r1
 8004ece:	9301      	str	r3, [sp, #4]
 8004ed0:	6963      	ldr	r3, [r4, #20]
 8004ed2:	4343      	muls	r3, r0
 8004ed4:	9801      	ldr	r0, [sp, #4]
 8004ed6:	0fdd      	lsrs	r5, r3, #31
 8004ed8:	18ed      	adds	r5, r5, r3
 8004eda:	1c7b      	adds	r3, r7, #1
 8004edc:	181b      	adds	r3, r3, r0
 8004ede:	106d      	asrs	r5, r5, #1
 8004ee0:	42ab      	cmp	r3, r5
 8004ee2:	d900      	bls.n	8004ee6 <__ssputs_r+0x3e>
 8004ee4:	001d      	movs	r5, r3
 8004ee6:	0552      	lsls	r2, r2, #21
 8004ee8:	d528      	bpl.n	8004f3c <__ssputs_r+0x94>
 8004eea:	0029      	movs	r1, r5
 8004eec:	9802      	ldr	r0, [sp, #8]
 8004eee:	f000 f95b 	bl	80051a8 <_malloc_r>
 8004ef2:	1e06      	subs	r6, r0, #0
 8004ef4:	d02c      	beq.n	8004f50 <__ssputs_r+0xa8>
 8004ef6:	9a01      	ldr	r2, [sp, #4]
 8004ef8:	6921      	ldr	r1, [r4, #16]
 8004efa:	f000 fbc2 	bl	8005682 <memcpy>
 8004efe:	89a2      	ldrh	r2, [r4, #12]
 8004f00:	4b18      	ldr	r3, [pc, #96]	@ (8004f64 <__ssputs_r+0xbc>)
 8004f02:	401a      	ands	r2, r3
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	4313      	orrs	r3, r2
 8004f08:	81a3      	strh	r3, [r4, #12]
 8004f0a:	9b01      	ldr	r3, [sp, #4]
 8004f0c:	6126      	str	r6, [r4, #16]
 8004f0e:	18f6      	adds	r6, r6, r3
 8004f10:	6026      	str	r6, [r4, #0]
 8004f12:	003e      	movs	r6, r7
 8004f14:	6165      	str	r5, [r4, #20]
 8004f16:	1aed      	subs	r5, r5, r3
 8004f18:	60a5      	str	r5, [r4, #8]
 8004f1a:	42be      	cmp	r6, r7
 8004f1c:	d900      	bls.n	8004f20 <__ssputs_r+0x78>
 8004f1e:	003e      	movs	r6, r7
 8004f20:	0032      	movs	r2, r6
 8004f22:	9903      	ldr	r1, [sp, #12]
 8004f24:	6820      	ldr	r0, [r4, #0]
 8004f26:	f000 fb7c 	bl	8005622 <memmove>
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	68a3      	ldr	r3, [r4, #8]
 8004f2e:	1b9b      	subs	r3, r3, r6
 8004f30:	60a3      	str	r3, [r4, #8]
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	199b      	adds	r3, r3, r6
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	b005      	add	sp, #20
 8004f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f3c:	002a      	movs	r2, r5
 8004f3e:	9802      	ldr	r0, [sp, #8]
 8004f40:	f000 fb40 	bl	80055c4 <_realloc_r>
 8004f44:	1e06      	subs	r6, r0, #0
 8004f46:	d1e0      	bne.n	8004f0a <__ssputs_r+0x62>
 8004f48:	6921      	ldr	r1, [r4, #16]
 8004f4a:	9802      	ldr	r0, [sp, #8]
 8004f4c:	f000 fba2 	bl	8005694 <_free_r>
 8004f50:	230c      	movs	r3, #12
 8004f52:	2001      	movs	r0, #1
 8004f54:	9a02      	ldr	r2, [sp, #8]
 8004f56:	4240      	negs	r0, r0
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	89a2      	ldrh	r2, [r4, #12]
 8004f5c:	3334      	adds	r3, #52	@ 0x34
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	81a3      	strh	r3, [r4, #12]
 8004f62:	e7e9      	b.n	8004f38 <__ssputs_r+0x90>
 8004f64:	fffffb7f 	.word	0xfffffb7f

08004f68 <_svfiprintf_r>:
 8004f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6a:	b0a1      	sub	sp, #132	@ 0x84
 8004f6c:	9003      	str	r0, [sp, #12]
 8004f6e:	001d      	movs	r5, r3
 8004f70:	898b      	ldrh	r3, [r1, #12]
 8004f72:	000f      	movs	r7, r1
 8004f74:	0016      	movs	r6, r2
 8004f76:	061b      	lsls	r3, r3, #24
 8004f78:	d511      	bpl.n	8004f9e <_svfiprintf_r+0x36>
 8004f7a:	690b      	ldr	r3, [r1, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10e      	bne.n	8004f9e <_svfiprintf_r+0x36>
 8004f80:	2140      	movs	r1, #64	@ 0x40
 8004f82:	f000 f911 	bl	80051a8 <_malloc_r>
 8004f86:	6038      	str	r0, [r7, #0]
 8004f88:	6138      	str	r0, [r7, #16]
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d105      	bne.n	8004f9a <_svfiprintf_r+0x32>
 8004f8e:	230c      	movs	r3, #12
 8004f90:	9a03      	ldr	r2, [sp, #12]
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	2001      	movs	r0, #1
 8004f96:	4240      	negs	r0, r0
 8004f98:	e0cf      	b.n	800513a <_svfiprintf_r+0x1d2>
 8004f9a:	2340      	movs	r3, #64	@ 0x40
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	ac08      	add	r4, sp, #32
 8004fa2:	6163      	str	r3, [r4, #20]
 8004fa4:	3320      	adds	r3, #32
 8004fa6:	7663      	strb	r3, [r4, #25]
 8004fa8:	3310      	adds	r3, #16
 8004faa:	76a3      	strb	r3, [r4, #26]
 8004fac:	9507      	str	r5, [sp, #28]
 8004fae:	0035      	movs	r5, r6
 8004fb0:	782b      	ldrb	r3, [r5, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <_svfiprintf_r+0x52>
 8004fb6:	2b25      	cmp	r3, #37	@ 0x25
 8004fb8:	d148      	bne.n	800504c <_svfiprintf_r+0xe4>
 8004fba:	1bab      	subs	r3, r5, r6
 8004fbc:	9305      	str	r3, [sp, #20]
 8004fbe:	42b5      	cmp	r5, r6
 8004fc0:	d00b      	beq.n	8004fda <_svfiprintf_r+0x72>
 8004fc2:	0032      	movs	r2, r6
 8004fc4:	0039      	movs	r1, r7
 8004fc6:	9803      	ldr	r0, [sp, #12]
 8004fc8:	f7ff ff6e 	bl	8004ea8 <__ssputs_r>
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d100      	bne.n	8004fd2 <_svfiprintf_r+0x6a>
 8004fd0:	e0ae      	b.n	8005130 <_svfiprintf_r+0x1c8>
 8004fd2:	6963      	ldr	r3, [r4, #20]
 8004fd4:	9a05      	ldr	r2, [sp, #20]
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	6163      	str	r3, [r4, #20]
 8004fda:	782b      	ldrb	r3, [r5, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d100      	bne.n	8004fe2 <_svfiprintf_r+0x7a>
 8004fe0:	e0a6      	b.n	8005130 <_svfiprintf_r+0x1c8>
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4252      	negs	r2, r2
 8004fe8:	6062      	str	r2, [r4, #4]
 8004fea:	a904      	add	r1, sp, #16
 8004fec:	3254      	adds	r2, #84	@ 0x54
 8004fee:	1852      	adds	r2, r2, r1
 8004ff0:	1c6e      	adds	r6, r5, #1
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	60e3      	str	r3, [r4, #12]
 8004ff6:	60a3      	str	r3, [r4, #8]
 8004ff8:	7013      	strb	r3, [r2, #0]
 8004ffa:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004ffc:	4b54      	ldr	r3, [pc, #336]	@ (8005150 <_svfiprintf_r+0x1e8>)
 8004ffe:	2205      	movs	r2, #5
 8005000:	0018      	movs	r0, r3
 8005002:	7831      	ldrb	r1, [r6, #0]
 8005004:	9305      	str	r3, [sp, #20]
 8005006:	f000 fb31 	bl	800566c <memchr>
 800500a:	1c75      	adds	r5, r6, #1
 800500c:	2800      	cmp	r0, #0
 800500e:	d11f      	bne.n	8005050 <_svfiprintf_r+0xe8>
 8005010:	6822      	ldr	r2, [r4, #0]
 8005012:	06d3      	lsls	r3, r2, #27
 8005014:	d504      	bpl.n	8005020 <_svfiprintf_r+0xb8>
 8005016:	2353      	movs	r3, #83	@ 0x53
 8005018:	a904      	add	r1, sp, #16
 800501a:	185b      	adds	r3, r3, r1
 800501c:	2120      	movs	r1, #32
 800501e:	7019      	strb	r1, [r3, #0]
 8005020:	0713      	lsls	r3, r2, #28
 8005022:	d504      	bpl.n	800502e <_svfiprintf_r+0xc6>
 8005024:	2353      	movs	r3, #83	@ 0x53
 8005026:	a904      	add	r1, sp, #16
 8005028:	185b      	adds	r3, r3, r1
 800502a:	212b      	movs	r1, #43	@ 0x2b
 800502c:	7019      	strb	r1, [r3, #0]
 800502e:	7833      	ldrb	r3, [r6, #0]
 8005030:	2b2a      	cmp	r3, #42	@ 0x2a
 8005032:	d016      	beq.n	8005062 <_svfiprintf_r+0xfa>
 8005034:	0035      	movs	r5, r6
 8005036:	2100      	movs	r1, #0
 8005038:	200a      	movs	r0, #10
 800503a:	68e3      	ldr	r3, [r4, #12]
 800503c:	782a      	ldrb	r2, [r5, #0]
 800503e:	1c6e      	adds	r6, r5, #1
 8005040:	3a30      	subs	r2, #48	@ 0x30
 8005042:	2a09      	cmp	r2, #9
 8005044:	d950      	bls.n	80050e8 <_svfiprintf_r+0x180>
 8005046:	2900      	cmp	r1, #0
 8005048:	d111      	bne.n	800506e <_svfiprintf_r+0x106>
 800504a:	e017      	b.n	800507c <_svfiprintf_r+0x114>
 800504c:	3501      	adds	r5, #1
 800504e:	e7af      	b.n	8004fb0 <_svfiprintf_r+0x48>
 8005050:	9b05      	ldr	r3, [sp, #20]
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	1ac0      	subs	r0, r0, r3
 8005056:	2301      	movs	r3, #1
 8005058:	4083      	lsls	r3, r0
 800505a:	4313      	orrs	r3, r2
 800505c:	002e      	movs	r6, r5
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	e7cc      	b.n	8004ffc <_svfiprintf_r+0x94>
 8005062:	9b07      	ldr	r3, [sp, #28]
 8005064:	1d19      	adds	r1, r3, #4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	9107      	str	r1, [sp, #28]
 800506a:	2b00      	cmp	r3, #0
 800506c:	db01      	blt.n	8005072 <_svfiprintf_r+0x10a>
 800506e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005070:	e004      	b.n	800507c <_svfiprintf_r+0x114>
 8005072:	425b      	negs	r3, r3
 8005074:	60e3      	str	r3, [r4, #12]
 8005076:	2302      	movs	r3, #2
 8005078:	4313      	orrs	r3, r2
 800507a:	6023      	str	r3, [r4, #0]
 800507c:	782b      	ldrb	r3, [r5, #0]
 800507e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005080:	d10c      	bne.n	800509c <_svfiprintf_r+0x134>
 8005082:	786b      	ldrb	r3, [r5, #1]
 8005084:	2b2a      	cmp	r3, #42	@ 0x2a
 8005086:	d134      	bne.n	80050f2 <_svfiprintf_r+0x18a>
 8005088:	9b07      	ldr	r3, [sp, #28]
 800508a:	3502      	adds	r5, #2
 800508c:	1d1a      	adds	r2, r3, #4
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	9207      	str	r2, [sp, #28]
 8005092:	2b00      	cmp	r3, #0
 8005094:	da01      	bge.n	800509a <_svfiprintf_r+0x132>
 8005096:	2301      	movs	r3, #1
 8005098:	425b      	negs	r3, r3
 800509a:	9309      	str	r3, [sp, #36]	@ 0x24
 800509c:	4e2d      	ldr	r6, [pc, #180]	@ (8005154 <_svfiprintf_r+0x1ec>)
 800509e:	2203      	movs	r2, #3
 80050a0:	0030      	movs	r0, r6
 80050a2:	7829      	ldrb	r1, [r5, #0]
 80050a4:	f000 fae2 	bl	800566c <memchr>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	d006      	beq.n	80050ba <_svfiprintf_r+0x152>
 80050ac:	2340      	movs	r3, #64	@ 0x40
 80050ae:	1b80      	subs	r0, r0, r6
 80050b0:	4083      	lsls	r3, r0
 80050b2:	6822      	ldr	r2, [r4, #0]
 80050b4:	3501      	adds	r5, #1
 80050b6:	4313      	orrs	r3, r2
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	7829      	ldrb	r1, [r5, #0]
 80050bc:	2206      	movs	r2, #6
 80050be:	4826      	ldr	r0, [pc, #152]	@ (8005158 <_svfiprintf_r+0x1f0>)
 80050c0:	1c6e      	adds	r6, r5, #1
 80050c2:	7621      	strb	r1, [r4, #24]
 80050c4:	f000 fad2 	bl	800566c <memchr>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d038      	beq.n	800513e <_svfiprintf_r+0x1d6>
 80050cc:	4b23      	ldr	r3, [pc, #140]	@ (800515c <_svfiprintf_r+0x1f4>)
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d122      	bne.n	8005118 <_svfiprintf_r+0x1b0>
 80050d2:	2207      	movs	r2, #7
 80050d4:	9b07      	ldr	r3, [sp, #28]
 80050d6:	3307      	adds	r3, #7
 80050d8:	4393      	bics	r3, r2
 80050da:	3308      	adds	r3, #8
 80050dc:	9307      	str	r3, [sp, #28]
 80050de:	6963      	ldr	r3, [r4, #20]
 80050e0:	9a04      	ldr	r2, [sp, #16]
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	6163      	str	r3, [r4, #20]
 80050e6:	e762      	b.n	8004fae <_svfiprintf_r+0x46>
 80050e8:	4343      	muls	r3, r0
 80050ea:	0035      	movs	r5, r6
 80050ec:	2101      	movs	r1, #1
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	e7a4      	b.n	800503c <_svfiprintf_r+0xd4>
 80050f2:	2300      	movs	r3, #0
 80050f4:	200a      	movs	r0, #10
 80050f6:	0019      	movs	r1, r3
 80050f8:	3501      	adds	r5, #1
 80050fa:	6063      	str	r3, [r4, #4]
 80050fc:	782a      	ldrb	r2, [r5, #0]
 80050fe:	1c6e      	adds	r6, r5, #1
 8005100:	3a30      	subs	r2, #48	@ 0x30
 8005102:	2a09      	cmp	r2, #9
 8005104:	d903      	bls.n	800510e <_svfiprintf_r+0x1a6>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0c8      	beq.n	800509c <_svfiprintf_r+0x134>
 800510a:	9109      	str	r1, [sp, #36]	@ 0x24
 800510c:	e7c6      	b.n	800509c <_svfiprintf_r+0x134>
 800510e:	4341      	muls	r1, r0
 8005110:	0035      	movs	r5, r6
 8005112:	2301      	movs	r3, #1
 8005114:	1889      	adds	r1, r1, r2
 8005116:	e7f1      	b.n	80050fc <_svfiprintf_r+0x194>
 8005118:	aa07      	add	r2, sp, #28
 800511a:	9200      	str	r2, [sp, #0]
 800511c:	0021      	movs	r1, r4
 800511e:	003a      	movs	r2, r7
 8005120:	4b0f      	ldr	r3, [pc, #60]	@ (8005160 <_svfiprintf_r+0x1f8>)
 8005122:	9803      	ldr	r0, [sp, #12]
 8005124:	e000      	b.n	8005128 <_svfiprintf_r+0x1c0>
 8005126:	bf00      	nop
 8005128:	9004      	str	r0, [sp, #16]
 800512a:	9b04      	ldr	r3, [sp, #16]
 800512c:	3301      	adds	r3, #1
 800512e:	d1d6      	bne.n	80050de <_svfiprintf_r+0x176>
 8005130:	89bb      	ldrh	r3, [r7, #12]
 8005132:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005134:	065b      	lsls	r3, r3, #25
 8005136:	d500      	bpl.n	800513a <_svfiprintf_r+0x1d2>
 8005138:	e72c      	b.n	8004f94 <_svfiprintf_r+0x2c>
 800513a:	b021      	add	sp, #132	@ 0x84
 800513c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800513e:	aa07      	add	r2, sp, #28
 8005140:	9200      	str	r2, [sp, #0]
 8005142:	0021      	movs	r1, r4
 8005144:	003a      	movs	r2, r7
 8005146:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <_svfiprintf_r+0x1f8>)
 8005148:	9803      	ldr	r0, [sp, #12]
 800514a:	f000 f91d 	bl	8005388 <_printf_i>
 800514e:	e7eb      	b.n	8005128 <_svfiprintf_r+0x1c0>
 8005150:	08005798 	.word	0x08005798
 8005154:	0800579e 	.word	0x0800579e
 8005158:	080057a2 	.word	0x080057a2
 800515c:	00000000 	.word	0x00000000
 8005160:	08004ea9 	.word	0x08004ea9

08005164 <sbrk_aligned>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	4e0f      	ldr	r6, [pc, #60]	@ (80051a4 <sbrk_aligned+0x40>)
 8005168:	000d      	movs	r5, r1
 800516a:	6831      	ldr	r1, [r6, #0]
 800516c:	0004      	movs	r4, r0
 800516e:	2900      	cmp	r1, #0
 8005170:	d102      	bne.n	8005178 <sbrk_aligned+0x14>
 8005172:	f000 fa69 	bl	8005648 <_sbrk_r>
 8005176:	6030      	str	r0, [r6, #0]
 8005178:	0029      	movs	r1, r5
 800517a:	0020      	movs	r0, r4
 800517c:	f000 fa64 	bl	8005648 <_sbrk_r>
 8005180:	1c43      	adds	r3, r0, #1
 8005182:	d103      	bne.n	800518c <sbrk_aligned+0x28>
 8005184:	2501      	movs	r5, #1
 8005186:	426d      	negs	r5, r5
 8005188:	0028      	movs	r0, r5
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	2303      	movs	r3, #3
 800518e:	1cc5      	adds	r5, r0, #3
 8005190:	439d      	bics	r5, r3
 8005192:	42a8      	cmp	r0, r5
 8005194:	d0f8      	beq.n	8005188 <sbrk_aligned+0x24>
 8005196:	1a29      	subs	r1, r5, r0
 8005198:	0020      	movs	r0, r4
 800519a:	f000 fa55 	bl	8005648 <_sbrk_r>
 800519e:	3001      	adds	r0, #1
 80051a0:	d1f2      	bne.n	8005188 <sbrk_aligned+0x24>
 80051a2:	e7ef      	b.n	8005184 <sbrk_aligned+0x20>
 80051a4:	2000039c 	.word	0x2000039c

080051a8 <_malloc_r>:
 80051a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051aa:	2203      	movs	r2, #3
 80051ac:	1ccb      	adds	r3, r1, #3
 80051ae:	4393      	bics	r3, r2
 80051b0:	3308      	adds	r3, #8
 80051b2:	0005      	movs	r5, r0
 80051b4:	001f      	movs	r7, r3
 80051b6:	2b0c      	cmp	r3, #12
 80051b8:	d234      	bcs.n	8005224 <_malloc_r+0x7c>
 80051ba:	270c      	movs	r7, #12
 80051bc:	42b9      	cmp	r1, r7
 80051be:	d833      	bhi.n	8005228 <_malloc_r+0x80>
 80051c0:	0028      	movs	r0, r5
 80051c2:	f000 f9ef 	bl	80055a4 <__malloc_lock>
 80051c6:	4e37      	ldr	r6, [pc, #220]	@ (80052a4 <_malloc_r+0xfc>)
 80051c8:	6833      	ldr	r3, [r6, #0]
 80051ca:	001c      	movs	r4, r3
 80051cc:	2c00      	cmp	r4, #0
 80051ce:	d12f      	bne.n	8005230 <_malloc_r+0x88>
 80051d0:	0039      	movs	r1, r7
 80051d2:	0028      	movs	r0, r5
 80051d4:	f7ff ffc6 	bl	8005164 <sbrk_aligned>
 80051d8:	0004      	movs	r4, r0
 80051da:	1c43      	adds	r3, r0, #1
 80051dc:	d15f      	bne.n	800529e <_malloc_r+0xf6>
 80051de:	6834      	ldr	r4, [r6, #0]
 80051e0:	9400      	str	r4, [sp, #0]
 80051e2:	9b00      	ldr	r3, [sp, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d14a      	bne.n	800527e <_malloc_r+0xd6>
 80051e8:	2c00      	cmp	r4, #0
 80051ea:	d052      	beq.n	8005292 <_malloc_r+0xea>
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	0028      	movs	r0, r5
 80051f0:	18e3      	adds	r3, r4, r3
 80051f2:	9900      	ldr	r1, [sp, #0]
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	f000 fa27 	bl	8005648 <_sbrk_r>
 80051fa:	9b01      	ldr	r3, [sp, #4]
 80051fc:	4283      	cmp	r3, r0
 80051fe:	d148      	bne.n	8005292 <_malloc_r+0xea>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	0028      	movs	r0, r5
 8005204:	1aff      	subs	r7, r7, r3
 8005206:	0039      	movs	r1, r7
 8005208:	f7ff ffac 	bl	8005164 <sbrk_aligned>
 800520c:	3001      	adds	r0, #1
 800520e:	d040      	beq.n	8005292 <_malloc_r+0xea>
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	19db      	adds	r3, r3, r7
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	6833      	ldr	r3, [r6, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	2a00      	cmp	r2, #0
 800521c:	d133      	bne.n	8005286 <_malloc_r+0xde>
 800521e:	9b00      	ldr	r3, [sp, #0]
 8005220:	6033      	str	r3, [r6, #0]
 8005222:	e019      	b.n	8005258 <_malloc_r+0xb0>
 8005224:	2b00      	cmp	r3, #0
 8005226:	dac9      	bge.n	80051bc <_malloc_r+0x14>
 8005228:	230c      	movs	r3, #12
 800522a:	602b      	str	r3, [r5, #0]
 800522c:	2000      	movs	r0, #0
 800522e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005230:	6821      	ldr	r1, [r4, #0]
 8005232:	1bc9      	subs	r1, r1, r7
 8005234:	d420      	bmi.n	8005278 <_malloc_r+0xd0>
 8005236:	290b      	cmp	r1, #11
 8005238:	d90a      	bls.n	8005250 <_malloc_r+0xa8>
 800523a:	19e2      	adds	r2, r4, r7
 800523c:	6027      	str	r7, [r4, #0]
 800523e:	42a3      	cmp	r3, r4
 8005240:	d104      	bne.n	800524c <_malloc_r+0xa4>
 8005242:	6032      	str	r2, [r6, #0]
 8005244:	6863      	ldr	r3, [r4, #4]
 8005246:	6011      	str	r1, [r2, #0]
 8005248:	6053      	str	r3, [r2, #4]
 800524a:	e005      	b.n	8005258 <_malloc_r+0xb0>
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	e7f9      	b.n	8005244 <_malloc_r+0x9c>
 8005250:	6862      	ldr	r2, [r4, #4]
 8005252:	42a3      	cmp	r3, r4
 8005254:	d10e      	bne.n	8005274 <_malloc_r+0xcc>
 8005256:	6032      	str	r2, [r6, #0]
 8005258:	0028      	movs	r0, r5
 800525a:	f000 f9ab 	bl	80055b4 <__malloc_unlock>
 800525e:	0020      	movs	r0, r4
 8005260:	2207      	movs	r2, #7
 8005262:	300b      	adds	r0, #11
 8005264:	1d23      	adds	r3, r4, #4
 8005266:	4390      	bics	r0, r2
 8005268:	1ac2      	subs	r2, r0, r3
 800526a:	4298      	cmp	r0, r3
 800526c:	d0df      	beq.n	800522e <_malloc_r+0x86>
 800526e:	1a1b      	subs	r3, r3, r0
 8005270:	50a3      	str	r3, [r4, r2]
 8005272:	e7dc      	b.n	800522e <_malloc_r+0x86>
 8005274:	605a      	str	r2, [r3, #4]
 8005276:	e7ef      	b.n	8005258 <_malloc_r+0xb0>
 8005278:	0023      	movs	r3, r4
 800527a:	6864      	ldr	r4, [r4, #4]
 800527c:	e7a6      	b.n	80051cc <_malloc_r+0x24>
 800527e:	9c00      	ldr	r4, [sp, #0]
 8005280:	6863      	ldr	r3, [r4, #4]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	e7ad      	b.n	80051e2 <_malloc_r+0x3a>
 8005286:	001a      	movs	r2, r3
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	42a3      	cmp	r3, r4
 800528c:	d1fb      	bne.n	8005286 <_malloc_r+0xde>
 800528e:	2300      	movs	r3, #0
 8005290:	e7da      	b.n	8005248 <_malloc_r+0xa0>
 8005292:	230c      	movs	r3, #12
 8005294:	0028      	movs	r0, r5
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	f000 f98c 	bl	80055b4 <__malloc_unlock>
 800529c:	e7c6      	b.n	800522c <_malloc_r+0x84>
 800529e:	6007      	str	r7, [r0, #0]
 80052a0:	e7da      	b.n	8005258 <_malloc_r+0xb0>
 80052a2:	46c0      	nop			@ (mov r8, r8)
 80052a4:	200003a0 	.word	0x200003a0

080052a8 <_printf_common>:
 80052a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052aa:	0016      	movs	r6, r2
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	688a      	ldr	r2, [r1, #8]
 80052b0:	690b      	ldr	r3, [r1, #16]
 80052b2:	000c      	movs	r4, r1
 80052b4:	9000      	str	r0, [sp, #0]
 80052b6:	4293      	cmp	r3, r2
 80052b8:	da00      	bge.n	80052bc <_printf_common+0x14>
 80052ba:	0013      	movs	r3, r2
 80052bc:	0022      	movs	r2, r4
 80052be:	6033      	str	r3, [r6, #0]
 80052c0:	3243      	adds	r2, #67	@ 0x43
 80052c2:	7812      	ldrb	r2, [r2, #0]
 80052c4:	2a00      	cmp	r2, #0
 80052c6:	d001      	beq.n	80052cc <_printf_common+0x24>
 80052c8:	3301      	adds	r3, #1
 80052ca:	6033      	str	r3, [r6, #0]
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	069b      	lsls	r3, r3, #26
 80052d0:	d502      	bpl.n	80052d8 <_printf_common+0x30>
 80052d2:	6833      	ldr	r3, [r6, #0]
 80052d4:	3302      	adds	r3, #2
 80052d6:	6033      	str	r3, [r6, #0]
 80052d8:	6822      	ldr	r2, [r4, #0]
 80052da:	2306      	movs	r3, #6
 80052dc:	0015      	movs	r5, r2
 80052de:	401d      	ands	r5, r3
 80052e0:	421a      	tst	r2, r3
 80052e2:	d027      	beq.n	8005334 <_printf_common+0x8c>
 80052e4:	0023      	movs	r3, r4
 80052e6:	3343      	adds	r3, #67	@ 0x43
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	1e5a      	subs	r2, r3, #1
 80052ec:	4193      	sbcs	r3, r2
 80052ee:	6822      	ldr	r2, [r4, #0]
 80052f0:	0692      	lsls	r2, r2, #26
 80052f2:	d430      	bmi.n	8005356 <_printf_common+0xae>
 80052f4:	0022      	movs	r2, r4
 80052f6:	9901      	ldr	r1, [sp, #4]
 80052f8:	9800      	ldr	r0, [sp, #0]
 80052fa:	9d08      	ldr	r5, [sp, #32]
 80052fc:	3243      	adds	r2, #67	@ 0x43
 80052fe:	47a8      	blx	r5
 8005300:	3001      	adds	r0, #1
 8005302:	d025      	beq.n	8005350 <_printf_common+0xa8>
 8005304:	2206      	movs	r2, #6
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	2500      	movs	r5, #0
 800530a:	4013      	ands	r3, r2
 800530c:	2b04      	cmp	r3, #4
 800530e:	d105      	bne.n	800531c <_printf_common+0x74>
 8005310:	6833      	ldr	r3, [r6, #0]
 8005312:	68e5      	ldr	r5, [r4, #12]
 8005314:	1aed      	subs	r5, r5, r3
 8005316:	43eb      	mvns	r3, r5
 8005318:	17db      	asrs	r3, r3, #31
 800531a:	401d      	ands	r5, r3
 800531c:	68a3      	ldr	r3, [r4, #8]
 800531e:	6922      	ldr	r2, [r4, #16]
 8005320:	4293      	cmp	r3, r2
 8005322:	dd01      	ble.n	8005328 <_printf_common+0x80>
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	18ed      	adds	r5, r5, r3
 8005328:	2600      	movs	r6, #0
 800532a:	42b5      	cmp	r5, r6
 800532c:	d120      	bne.n	8005370 <_printf_common+0xc8>
 800532e:	2000      	movs	r0, #0
 8005330:	e010      	b.n	8005354 <_printf_common+0xac>
 8005332:	3501      	adds	r5, #1
 8005334:	68e3      	ldr	r3, [r4, #12]
 8005336:	6832      	ldr	r2, [r6, #0]
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	42ab      	cmp	r3, r5
 800533c:	ddd2      	ble.n	80052e4 <_printf_common+0x3c>
 800533e:	0022      	movs	r2, r4
 8005340:	2301      	movs	r3, #1
 8005342:	9901      	ldr	r1, [sp, #4]
 8005344:	9800      	ldr	r0, [sp, #0]
 8005346:	9f08      	ldr	r7, [sp, #32]
 8005348:	3219      	adds	r2, #25
 800534a:	47b8      	blx	r7
 800534c:	3001      	adds	r0, #1
 800534e:	d1f0      	bne.n	8005332 <_printf_common+0x8a>
 8005350:	2001      	movs	r0, #1
 8005352:	4240      	negs	r0, r0
 8005354:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005356:	2030      	movs	r0, #48	@ 0x30
 8005358:	18e1      	adds	r1, r4, r3
 800535a:	3143      	adds	r1, #67	@ 0x43
 800535c:	7008      	strb	r0, [r1, #0]
 800535e:	0021      	movs	r1, r4
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	3145      	adds	r1, #69	@ 0x45
 8005364:	7809      	ldrb	r1, [r1, #0]
 8005366:	18a2      	adds	r2, r4, r2
 8005368:	3243      	adds	r2, #67	@ 0x43
 800536a:	3302      	adds	r3, #2
 800536c:	7011      	strb	r1, [r2, #0]
 800536e:	e7c1      	b.n	80052f4 <_printf_common+0x4c>
 8005370:	0022      	movs	r2, r4
 8005372:	2301      	movs	r3, #1
 8005374:	9901      	ldr	r1, [sp, #4]
 8005376:	9800      	ldr	r0, [sp, #0]
 8005378:	9f08      	ldr	r7, [sp, #32]
 800537a:	321a      	adds	r2, #26
 800537c:	47b8      	blx	r7
 800537e:	3001      	adds	r0, #1
 8005380:	d0e6      	beq.n	8005350 <_printf_common+0xa8>
 8005382:	3601      	adds	r6, #1
 8005384:	e7d1      	b.n	800532a <_printf_common+0x82>
	...

08005388 <_printf_i>:
 8005388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538a:	b08b      	sub	sp, #44	@ 0x2c
 800538c:	9206      	str	r2, [sp, #24]
 800538e:	000a      	movs	r2, r1
 8005390:	3243      	adds	r2, #67	@ 0x43
 8005392:	9307      	str	r3, [sp, #28]
 8005394:	9005      	str	r0, [sp, #20]
 8005396:	9203      	str	r2, [sp, #12]
 8005398:	7e0a      	ldrb	r2, [r1, #24]
 800539a:	000c      	movs	r4, r1
 800539c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800539e:	2a78      	cmp	r2, #120	@ 0x78
 80053a0:	d809      	bhi.n	80053b6 <_printf_i+0x2e>
 80053a2:	2a62      	cmp	r2, #98	@ 0x62
 80053a4:	d80b      	bhi.n	80053be <_printf_i+0x36>
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	d100      	bne.n	80053ac <_printf_i+0x24>
 80053aa:	e0bc      	b.n	8005526 <_printf_i+0x19e>
 80053ac:	497b      	ldr	r1, [pc, #492]	@ (800559c <_printf_i+0x214>)
 80053ae:	9104      	str	r1, [sp, #16]
 80053b0:	2a58      	cmp	r2, #88	@ 0x58
 80053b2:	d100      	bne.n	80053b6 <_printf_i+0x2e>
 80053b4:	e090      	b.n	80054d8 <_printf_i+0x150>
 80053b6:	0025      	movs	r5, r4
 80053b8:	3542      	adds	r5, #66	@ 0x42
 80053ba:	702a      	strb	r2, [r5, #0]
 80053bc:	e022      	b.n	8005404 <_printf_i+0x7c>
 80053be:	0010      	movs	r0, r2
 80053c0:	3863      	subs	r0, #99	@ 0x63
 80053c2:	2815      	cmp	r0, #21
 80053c4:	d8f7      	bhi.n	80053b6 <_printf_i+0x2e>
 80053c6:	f7fa fea7 	bl	8000118 <__gnu_thumb1_case_shi>
 80053ca:	0016      	.short	0x0016
 80053cc:	fff6001f 	.word	0xfff6001f
 80053d0:	fff6fff6 	.word	0xfff6fff6
 80053d4:	001ffff6 	.word	0x001ffff6
 80053d8:	fff6fff6 	.word	0xfff6fff6
 80053dc:	fff6fff6 	.word	0xfff6fff6
 80053e0:	003600a1 	.word	0x003600a1
 80053e4:	fff60080 	.word	0xfff60080
 80053e8:	00b2fff6 	.word	0x00b2fff6
 80053ec:	0036fff6 	.word	0x0036fff6
 80053f0:	fff6fff6 	.word	0xfff6fff6
 80053f4:	0084      	.short	0x0084
 80053f6:	0025      	movs	r5, r4
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	3542      	adds	r5, #66	@ 0x42
 80053fc:	1d11      	adds	r1, r2, #4
 80053fe:	6019      	str	r1, [r3, #0]
 8005400:	6813      	ldr	r3, [r2, #0]
 8005402:	702b      	strb	r3, [r5, #0]
 8005404:	2301      	movs	r3, #1
 8005406:	e0a0      	b.n	800554a <_printf_i+0x1c2>
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	6809      	ldr	r1, [r1, #0]
 800540c:	1d02      	adds	r2, r0, #4
 800540e:	060d      	lsls	r5, r1, #24
 8005410:	d50b      	bpl.n	800542a <_printf_i+0xa2>
 8005412:	6806      	ldr	r6, [r0, #0]
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	2e00      	cmp	r6, #0
 8005418:	da03      	bge.n	8005422 <_printf_i+0x9a>
 800541a:	232d      	movs	r3, #45	@ 0x2d
 800541c:	9a03      	ldr	r2, [sp, #12]
 800541e:	4276      	negs	r6, r6
 8005420:	7013      	strb	r3, [r2, #0]
 8005422:	4b5e      	ldr	r3, [pc, #376]	@ (800559c <_printf_i+0x214>)
 8005424:	270a      	movs	r7, #10
 8005426:	9304      	str	r3, [sp, #16]
 8005428:	e018      	b.n	800545c <_printf_i+0xd4>
 800542a:	6806      	ldr	r6, [r0, #0]
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	0649      	lsls	r1, r1, #25
 8005430:	d5f1      	bpl.n	8005416 <_printf_i+0x8e>
 8005432:	b236      	sxth	r6, r6
 8005434:	e7ef      	b.n	8005416 <_printf_i+0x8e>
 8005436:	6808      	ldr	r0, [r1, #0]
 8005438:	6819      	ldr	r1, [r3, #0]
 800543a:	c940      	ldmia	r1!, {r6}
 800543c:	0605      	lsls	r5, r0, #24
 800543e:	d402      	bmi.n	8005446 <_printf_i+0xbe>
 8005440:	0640      	lsls	r0, r0, #25
 8005442:	d500      	bpl.n	8005446 <_printf_i+0xbe>
 8005444:	b2b6      	uxth	r6, r6
 8005446:	6019      	str	r1, [r3, #0]
 8005448:	4b54      	ldr	r3, [pc, #336]	@ (800559c <_printf_i+0x214>)
 800544a:	270a      	movs	r7, #10
 800544c:	9304      	str	r3, [sp, #16]
 800544e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005450:	d100      	bne.n	8005454 <_printf_i+0xcc>
 8005452:	3f02      	subs	r7, #2
 8005454:	0023      	movs	r3, r4
 8005456:	2200      	movs	r2, #0
 8005458:	3343      	adds	r3, #67	@ 0x43
 800545a:	701a      	strb	r2, [r3, #0]
 800545c:	6863      	ldr	r3, [r4, #4]
 800545e:	60a3      	str	r3, [r4, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	db03      	blt.n	800546c <_printf_i+0xe4>
 8005464:	2104      	movs	r1, #4
 8005466:	6822      	ldr	r2, [r4, #0]
 8005468:	438a      	bics	r2, r1
 800546a:	6022      	str	r2, [r4, #0]
 800546c:	2e00      	cmp	r6, #0
 800546e:	d102      	bne.n	8005476 <_printf_i+0xee>
 8005470:	9d03      	ldr	r5, [sp, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00c      	beq.n	8005490 <_printf_i+0x108>
 8005476:	9d03      	ldr	r5, [sp, #12]
 8005478:	0030      	movs	r0, r6
 800547a:	0039      	movs	r1, r7
 800547c:	f7fa fedc 	bl	8000238 <__aeabi_uidivmod>
 8005480:	9b04      	ldr	r3, [sp, #16]
 8005482:	3d01      	subs	r5, #1
 8005484:	5c5b      	ldrb	r3, [r3, r1]
 8005486:	702b      	strb	r3, [r5, #0]
 8005488:	0033      	movs	r3, r6
 800548a:	0006      	movs	r6, r0
 800548c:	429f      	cmp	r7, r3
 800548e:	d9f3      	bls.n	8005478 <_printf_i+0xf0>
 8005490:	2f08      	cmp	r7, #8
 8005492:	d109      	bne.n	80054a8 <_printf_i+0x120>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	07db      	lsls	r3, r3, #31
 8005498:	d506      	bpl.n	80054a8 <_printf_i+0x120>
 800549a:	6862      	ldr	r2, [r4, #4]
 800549c:	6923      	ldr	r3, [r4, #16]
 800549e:	429a      	cmp	r2, r3
 80054a0:	dc02      	bgt.n	80054a8 <_printf_i+0x120>
 80054a2:	2330      	movs	r3, #48	@ 0x30
 80054a4:	3d01      	subs	r5, #1
 80054a6:	702b      	strb	r3, [r5, #0]
 80054a8:	9b03      	ldr	r3, [sp, #12]
 80054aa:	1b5b      	subs	r3, r3, r5
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	9b07      	ldr	r3, [sp, #28]
 80054b0:	0021      	movs	r1, r4
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	9805      	ldr	r0, [sp, #20]
 80054b6:	9b06      	ldr	r3, [sp, #24]
 80054b8:	aa09      	add	r2, sp, #36	@ 0x24
 80054ba:	f7ff fef5 	bl	80052a8 <_printf_common>
 80054be:	3001      	adds	r0, #1
 80054c0:	d148      	bne.n	8005554 <_printf_i+0x1cc>
 80054c2:	2001      	movs	r0, #1
 80054c4:	4240      	negs	r0, r0
 80054c6:	b00b      	add	sp, #44	@ 0x2c
 80054c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ca:	2220      	movs	r2, #32
 80054cc:	6809      	ldr	r1, [r1, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	6022      	str	r2, [r4, #0]
 80054d2:	2278      	movs	r2, #120	@ 0x78
 80054d4:	4932      	ldr	r1, [pc, #200]	@ (80055a0 <_printf_i+0x218>)
 80054d6:	9104      	str	r1, [sp, #16]
 80054d8:	0021      	movs	r1, r4
 80054da:	3145      	adds	r1, #69	@ 0x45
 80054dc:	700a      	strb	r2, [r1, #0]
 80054de:	6819      	ldr	r1, [r3, #0]
 80054e0:	6822      	ldr	r2, [r4, #0]
 80054e2:	c940      	ldmia	r1!, {r6}
 80054e4:	0610      	lsls	r0, r2, #24
 80054e6:	d402      	bmi.n	80054ee <_printf_i+0x166>
 80054e8:	0650      	lsls	r0, r2, #25
 80054ea:	d500      	bpl.n	80054ee <_printf_i+0x166>
 80054ec:	b2b6      	uxth	r6, r6
 80054ee:	6019      	str	r1, [r3, #0]
 80054f0:	07d3      	lsls	r3, r2, #31
 80054f2:	d502      	bpl.n	80054fa <_printf_i+0x172>
 80054f4:	2320      	movs	r3, #32
 80054f6:	4313      	orrs	r3, r2
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	2e00      	cmp	r6, #0
 80054fc:	d001      	beq.n	8005502 <_printf_i+0x17a>
 80054fe:	2710      	movs	r7, #16
 8005500:	e7a8      	b.n	8005454 <_printf_i+0xcc>
 8005502:	2220      	movs	r2, #32
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	4393      	bics	r3, r2
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	e7f8      	b.n	80054fe <_printf_i+0x176>
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	680d      	ldr	r5, [r1, #0]
 8005510:	1d10      	adds	r0, r2, #4
 8005512:	6949      	ldr	r1, [r1, #20]
 8005514:	6018      	str	r0, [r3, #0]
 8005516:	6813      	ldr	r3, [r2, #0]
 8005518:	062e      	lsls	r6, r5, #24
 800551a:	d501      	bpl.n	8005520 <_printf_i+0x198>
 800551c:	6019      	str	r1, [r3, #0]
 800551e:	e002      	b.n	8005526 <_printf_i+0x19e>
 8005520:	066d      	lsls	r5, r5, #25
 8005522:	d5fb      	bpl.n	800551c <_printf_i+0x194>
 8005524:	8019      	strh	r1, [r3, #0]
 8005526:	2300      	movs	r3, #0
 8005528:	9d03      	ldr	r5, [sp, #12]
 800552a:	6123      	str	r3, [r4, #16]
 800552c:	e7bf      	b.n	80054ae <_printf_i+0x126>
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	1d11      	adds	r1, r2, #4
 8005532:	6019      	str	r1, [r3, #0]
 8005534:	6815      	ldr	r5, [r2, #0]
 8005536:	2100      	movs	r1, #0
 8005538:	0028      	movs	r0, r5
 800553a:	6862      	ldr	r2, [r4, #4]
 800553c:	f000 f896 	bl	800566c <memchr>
 8005540:	2800      	cmp	r0, #0
 8005542:	d001      	beq.n	8005548 <_printf_i+0x1c0>
 8005544:	1b40      	subs	r0, r0, r5
 8005546:	6060      	str	r0, [r4, #4]
 8005548:	6863      	ldr	r3, [r4, #4]
 800554a:	6123      	str	r3, [r4, #16]
 800554c:	2300      	movs	r3, #0
 800554e:	9a03      	ldr	r2, [sp, #12]
 8005550:	7013      	strb	r3, [r2, #0]
 8005552:	e7ac      	b.n	80054ae <_printf_i+0x126>
 8005554:	002a      	movs	r2, r5
 8005556:	6923      	ldr	r3, [r4, #16]
 8005558:	9906      	ldr	r1, [sp, #24]
 800555a:	9805      	ldr	r0, [sp, #20]
 800555c:	9d07      	ldr	r5, [sp, #28]
 800555e:	47a8      	blx	r5
 8005560:	3001      	adds	r0, #1
 8005562:	d0ae      	beq.n	80054c2 <_printf_i+0x13a>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	079b      	lsls	r3, r3, #30
 8005568:	d415      	bmi.n	8005596 <_printf_i+0x20e>
 800556a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800556c:	68e0      	ldr	r0, [r4, #12]
 800556e:	4298      	cmp	r0, r3
 8005570:	daa9      	bge.n	80054c6 <_printf_i+0x13e>
 8005572:	0018      	movs	r0, r3
 8005574:	e7a7      	b.n	80054c6 <_printf_i+0x13e>
 8005576:	0022      	movs	r2, r4
 8005578:	2301      	movs	r3, #1
 800557a:	9906      	ldr	r1, [sp, #24]
 800557c:	9805      	ldr	r0, [sp, #20]
 800557e:	9e07      	ldr	r6, [sp, #28]
 8005580:	3219      	adds	r2, #25
 8005582:	47b0      	blx	r6
 8005584:	3001      	adds	r0, #1
 8005586:	d09c      	beq.n	80054c2 <_printf_i+0x13a>
 8005588:	3501      	adds	r5, #1
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	42ab      	cmp	r3, r5
 8005592:	dcf0      	bgt.n	8005576 <_printf_i+0x1ee>
 8005594:	e7e9      	b.n	800556a <_printf_i+0x1e2>
 8005596:	2500      	movs	r5, #0
 8005598:	e7f7      	b.n	800558a <_printf_i+0x202>
 800559a:	46c0      	nop			@ (mov r8, r8)
 800559c:	080057a9 	.word	0x080057a9
 80055a0:	080057ba 	.word	0x080057ba

080055a4 <__malloc_lock>:
 80055a4:	b510      	push	{r4, lr}
 80055a6:	4802      	ldr	r0, [pc, #8]	@ (80055b0 <__malloc_lock+0xc>)
 80055a8:	f7ff fc7c 	bl	8004ea4 <__retarget_lock_acquire_recursive>
 80055ac:	bd10      	pop	{r4, pc}
 80055ae:	46c0      	nop			@ (mov r8, r8)
 80055b0:	20000398 	.word	0x20000398

080055b4 <__malloc_unlock>:
 80055b4:	b510      	push	{r4, lr}
 80055b6:	4802      	ldr	r0, [pc, #8]	@ (80055c0 <__malloc_unlock+0xc>)
 80055b8:	f7ff fc75 	bl	8004ea6 <__retarget_lock_release_recursive>
 80055bc:	bd10      	pop	{r4, pc}
 80055be:	46c0      	nop			@ (mov r8, r8)
 80055c0:	20000398 	.word	0x20000398

080055c4 <_realloc_r>:
 80055c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055c6:	0006      	movs	r6, r0
 80055c8:	000c      	movs	r4, r1
 80055ca:	0015      	movs	r5, r2
 80055cc:	2900      	cmp	r1, #0
 80055ce:	d105      	bne.n	80055dc <_realloc_r+0x18>
 80055d0:	0011      	movs	r1, r2
 80055d2:	f7ff fde9 	bl	80051a8 <_malloc_r>
 80055d6:	0004      	movs	r4, r0
 80055d8:	0020      	movs	r0, r4
 80055da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055dc:	2a00      	cmp	r2, #0
 80055de:	d103      	bne.n	80055e8 <_realloc_r+0x24>
 80055e0:	f000 f858 	bl	8005694 <_free_r>
 80055e4:	2400      	movs	r4, #0
 80055e6:	e7f7      	b.n	80055d8 <_realloc_r+0x14>
 80055e8:	f000 f89e 	bl	8005728 <_malloc_usable_size_r>
 80055ec:	0007      	movs	r7, r0
 80055ee:	4285      	cmp	r5, r0
 80055f0:	d802      	bhi.n	80055f8 <_realloc_r+0x34>
 80055f2:	0843      	lsrs	r3, r0, #1
 80055f4:	42ab      	cmp	r3, r5
 80055f6:	d3ef      	bcc.n	80055d8 <_realloc_r+0x14>
 80055f8:	0029      	movs	r1, r5
 80055fa:	0030      	movs	r0, r6
 80055fc:	f7ff fdd4 	bl	80051a8 <_malloc_r>
 8005600:	9001      	str	r0, [sp, #4]
 8005602:	2800      	cmp	r0, #0
 8005604:	d0ee      	beq.n	80055e4 <_realloc_r+0x20>
 8005606:	002a      	movs	r2, r5
 8005608:	42bd      	cmp	r5, r7
 800560a:	d900      	bls.n	800560e <_realloc_r+0x4a>
 800560c:	003a      	movs	r2, r7
 800560e:	0021      	movs	r1, r4
 8005610:	9801      	ldr	r0, [sp, #4]
 8005612:	f000 f836 	bl	8005682 <memcpy>
 8005616:	0021      	movs	r1, r4
 8005618:	0030      	movs	r0, r6
 800561a:	f000 f83b 	bl	8005694 <_free_r>
 800561e:	9c01      	ldr	r4, [sp, #4]
 8005620:	e7da      	b.n	80055d8 <_realloc_r+0x14>

08005622 <memmove>:
 8005622:	b510      	push	{r4, lr}
 8005624:	4288      	cmp	r0, r1
 8005626:	d806      	bhi.n	8005636 <memmove+0x14>
 8005628:	2300      	movs	r3, #0
 800562a:	429a      	cmp	r2, r3
 800562c:	d008      	beq.n	8005640 <memmove+0x1e>
 800562e:	5ccc      	ldrb	r4, [r1, r3]
 8005630:	54c4      	strb	r4, [r0, r3]
 8005632:	3301      	adds	r3, #1
 8005634:	e7f9      	b.n	800562a <memmove+0x8>
 8005636:	188b      	adds	r3, r1, r2
 8005638:	4298      	cmp	r0, r3
 800563a:	d2f5      	bcs.n	8005628 <memmove+0x6>
 800563c:	3a01      	subs	r2, #1
 800563e:	d200      	bcs.n	8005642 <memmove+0x20>
 8005640:	bd10      	pop	{r4, pc}
 8005642:	5c8b      	ldrb	r3, [r1, r2]
 8005644:	5483      	strb	r3, [r0, r2]
 8005646:	e7f9      	b.n	800563c <memmove+0x1a>

08005648 <_sbrk_r>:
 8005648:	2300      	movs	r3, #0
 800564a:	b570      	push	{r4, r5, r6, lr}
 800564c:	4d06      	ldr	r5, [pc, #24]	@ (8005668 <_sbrk_r+0x20>)
 800564e:	0004      	movs	r4, r0
 8005650:	0008      	movs	r0, r1
 8005652:	602b      	str	r3, [r5, #0]
 8005654:	f7fb fdac 	bl	80011b0 <_sbrk>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d103      	bne.n	8005664 <_sbrk_r+0x1c>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d000      	beq.n	8005664 <_sbrk_r+0x1c>
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	bd70      	pop	{r4, r5, r6, pc}
 8005666:	46c0      	nop			@ (mov r8, r8)
 8005668:	200003a4 	.word	0x200003a4

0800566c <memchr>:
 800566c:	b2c9      	uxtb	r1, r1
 800566e:	1882      	adds	r2, r0, r2
 8005670:	4290      	cmp	r0, r2
 8005672:	d101      	bne.n	8005678 <memchr+0xc>
 8005674:	2000      	movs	r0, #0
 8005676:	4770      	bx	lr
 8005678:	7803      	ldrb	r3, [r0, #0]
 800567a:	428b      	cmp	r3, r1
 800567c:	d0fb      	beq.n	8005676 <memchr+0xa>
 800567e:	3001      	adds	r0, #1
 8005680:	e7f6      	b.n	8005670 <memchr+0x4>

08005682 <memcpy>:
 8005682:	2300      	movs	r3, #0
 8005684:	b510      	push	{r4, lr}
 8005686:	429a      	cmp	r2, r3
 8005688:	d100      	bne.n	800568c <memcpy+0xa>
 800568a:	bd10      	pop	{r4, pc}
 800568c:	5ccc      	ldrb	r4, [r1, r3]
 800568e:	54c4      	strb	r4, [r0, r3]
 8005690:	3301      	adds	r3, #1
 8005692:	e7f8      	b.n	8005686 <memcpy+0x4>

08005694 <_free_r>:
 8005694:	b570      	push	{r4, r5, r6, lr}
 8005696:	0005      	movs	r5, r0
 8005698:	1e0c      	subs	r4, r1, #0
 800569a:	d010      	beq.n	80056be <_free_r+0x2a>
 800569c:	3c04      	subs	r4, #4
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	da00      	bge.n	80056a6 <_free_r+0x12>
 80056a4:	18e4      	adds	r4, r4, r3
 80056a6:	0028      	movs	r0, r5
 80056a8:	f7ff ff7c 	bl	80055a4 <__malloc_lock>
 80056ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005724 <_free_r+0x90>)
 80056ae:	6813      	ldr	r3, [r2, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d105      	bne.n	80056c0 <_free_r+0x2c>
 80056b4:	6063      	str	r3, [r4, #4]
 80056b6:	6014      	str	r4, [r2, #0]
 80056b8:	0028      	movs	r0, r5
 80056ba:	f7ff ff7b 	bl	80055b4 <__malloc_unlock>
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	d908      	bls.n	80056d6 <_free_r+0x42>
 80056c4:	6820      	ldr	r0, [r4, #0]
 80056c6:	1821      	adds	r1, r4, r0
 80056c8:	428b      	cmp	r3, r1
 80056ca:	d1f3      	bne.n	80056b4 <_free_r+0x20>
 80056cc:	6819      	ldr	r1, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	1809      	adds	r1, r1, r0
 80056d2:	6021      	str	r1, [r4, #0]
 80056d4:	e7ee      	b.n	80056b4 <_free_r+0x20>
 80056d6:	001a      	movs	r2, r3
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <_free_r+0x4e>
 80056de:	42a3      	cmp	r3, r4
 80056e0:	d9f9      	bls.n	80056d6 <_free_r+0x42>
 80056e2:	6811      	ldr	r1, [r2, #0]
 80056e4:	1850      	adds	r0, r2, r1
 80056e6:	42a0      	cmp	r0, r4
 80056e8:	d10b      	bne.n	8005702 <_free_r+0x6e>
 80056ea:	6820      	ldr	r0, [r4, #0]
 80056ec:	1809      	adds	r1, r1, r0
 80056ee:	1850      	adds	r0, r2, r1
 80056f0:	6011      	str	r1, [r2, #0]
 80056f2:	4283      	cmp	r3, r0
 80056f4:	d1e0      	bne.n	80056b8 <_free_r+0x24>
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	1841      	adds	r1, r0, r1
 80056fc:	6011      	str	r1, [r2, #0]
 80056fe:	6053      	str	r3, [r2, #4]
 8005700:	e7da      	b.n	80056b8 <_free_r+0x24>
 8005702:	42a0      	cmp	r0, r4
 8005704:	d902      	bls.n	800570c <_free_r+0x78>
 8005706:	230c      	movs	r3, #12
 8005708:	602b      	str	r3, [r5, #0]
 800570a:	e7d5      	b.n	80056b8 <_free_r+0x24>
 800570c:	6820      	ldr	r0, [r4, #0]
 800570e:	1821      	adds	r1, r4, r0
 8005710:	428b      	cmp	r3, r1
 8005712:	d103      	bne.n	800571c <_free_r+0x88>
 8005714:	6819      	ldr	r1, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	1809      	adds	r1, r1, r0
 800571a:	6021      	str	r1, [r4, #0]
 800571c:	6063      	str	r3, [r4, #4]
 800571e:	6054      	str	r4, [r2, #4]
 8005720:	e7ca      	b.n	80056b8 <_free_r+0x24>
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	200003a0 	.word	0x200003a0

08005728 <_malloc_usable_size_r>:
 8005728:	1f0b      	subs	r3, r1, #4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	1f18      	subs	r0, r3, #4
 800572e:	2b00      	cmp	r3, #0
 8005730:	da01      	bge.n	8005736 <_malloc_usable_size_r+0xe>
 8005732:	580b      	ldr	r3, [r1, r0]
 8005734:	18c0      	adds	r0, r0, r3
 8005736:	4770      	bx	lr

08005738 <_init>:
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573e:	bc08      	pop	{r3}
 8005740:	469e      	mov	lr, r3
 8005742:	4770      	bx	lr

08005744 <_fini>:
 8005744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005746:	46c0      	nop			@ (mov r8, r8)
 8005748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574a:	bc08      	pop	{r3}
 800574c:	469e      	mov	lr, r3
 800574e:	4770      	bx	lr
